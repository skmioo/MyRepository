// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=8fd7408b07f8d2cd.  DO NOT EDIT!

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
public static partial class PBMessage {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_CS10000__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CS10000, global::CS10000.Builder> internal__static_CS10000__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static PBMessage() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "Cg9QQk1lc3NhZ2UucHJvdG8iHAoHQ1MxMDAwMBIRCgljb21tYW5kSWQYASAC" + 
        "KAxCHwodY29tLmN5b3UubXJkLnNldmVuc2VhLm1lc3NhZ2U=");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_CS10000__Descriptor = Descriptor.MessageTypes[0];
      internal__static_CS10000__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CS10000, global::CS10000.Builder>(internal__static_CS10000__Descriptor,
              new string[] { "CommandId", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
public sealed partial class CS10000 : pb::GeneratedMessage<CS10000, CS10000.Builder> {
  private static readonly CS10000 defaultInstance = new Builder().BuildPartial();
  public static CS10000 DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CS10000 DefaultInstanceForType {
    get { return defaultInstance; }
  }
  
  protected override CS10000 ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PBMessage.internal__static_CS10000__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CS10000, CS10000.Builder> InternalFieldAccessors {
    get { return global::PBMessage.internal__static_CS10000__FieldAccessorTable; }
  }
  
  public const int CommandIdFieldNumber = 1;
  private bool hasCommandId;
  private pb::ByteString commandId_ = pb::ByteString.Empty;
  public bool HasCommandId {
    get { return hasCommandId; }
  }
  public pb::ByteString CommandId {
    get { return commandId_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCommandId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::CodedOutputStream output) {
    int size = SerializedSize;
    if (HasCommandId) {
      output.WriteBytes(1, CommandId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (HasCommandId) {
        size += pb::CodedOutputStream.ComputeBytesSize(1, CommandId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CS10000 ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CS10000 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CS10000 ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CS10000 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CS10000 ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CS10000 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CS10000 ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CS10000 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CS10000 ParseFrom(pb::CodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CS10000 ParseFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CS10000 prototype) {
    return (Builder) new Builder().MergeFrom(prototype);
  }
  
  public sealed partial class Builder : pb::GeneratedBuilder<CS10000, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {}
    
    CS10000 result = new CS10000();
    
    protected override CS10000 MessageBeingBuilt {
      get { return result; }
    }
    
    public override Builder Clear() {
      result = new CS10000();
      return this;
    }
    
    public override Builder Clone() {
      return new Builder().MergeFrom(result);
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CS10000.Descriptor; }
    }
    
    public override CS10000 DefaultInstanceForType {
      get { return global::CS10000.DefaultInstance; }
    }
    
    public override CS10000 BuildPartial() {
      if (result == null) {
        throw new global::System.InvalidOperationException("build() has already been called on this Builder");
      }
      CS10000 returnMe = result;
      result = null;
      return returnMe;
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CS10000) {
        return MergeFrom((CS10000) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CS10000 other) {
      if (other == global::CS10000.DefaultInstance) return this;
      if (other.HasCommandId) {
        CommandId = other.CommandId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::CodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::CodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      pb::UnknownFieldSet.Builder unknownFields = null;
      while (true) {
        uint tag = input.ReadTag();
        switch (tag) {
          case 0: {
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag);
            break;
          }
          case 10: {
            CommandId = input.ReadBytes();
            break;
          }
        }
      }
    }
    
    
    public bool HasCommandId {
      get { return result.HasCommandId; }
    }
    public pb::ByteString CommandId {
      get { return result.CommandId; }
      set { SetCommandId(value); }
    }
    public Builder SetCommandId(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      result.hasCommandId = true;
      result.commandId_ = value;
      return this;
    }
    public Builder ClearCommandId() {
      result.hasCommandId = false;
      result.commandId_ = pb::ByteString.Empty;
      return this;
    }
  }
  static CS10000() {
    object.ReferenceEquals(global::PBMessage.Descriptor, null);
  }
}

#endregion

