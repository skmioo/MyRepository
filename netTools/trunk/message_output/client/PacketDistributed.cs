//Auto Generate File, Do NOT Modify!!!!!!!!!!!!!!!

using System.IO;
using System;
using System.Net.Sockets;
using Google.ProtocolBuffers;
using com.mile.common.message;

	public abstract class PacketDistributed

	{

		public static PacketDistributed CreatePacket(MessageID packetID)
		{
			PacketDistributed packet = null;
			switch (packetID)
			{
			case MessageID.CGGetQuestions: { packet = new CGGetQuestions();}break;
			case MessageID.GCSendQuestions: { packet = new GCSendQuestions();}break;
			case MessageID.CGAnswer: { packet = new CGAnswer();}break;
			case MessageID.GCAnswerResult: { packet = new GCAnswerResult();}break;
			case MessageID.GCPushAnswerOpen: { packet = new GCPushAnswerOpen();}break;
			case MessageID.GCInitAnswer: { packet = new GCInitAnswer();}break;
			case MessageID.CGSurvey: { packet = new CGSurvey();}break;
			case MessageID.GCSurvey: { packet = new GCSurvey();}break;
			case MessageID.QuestionData: { packet = new QuestionData();}break;
			case MessageID.TiKuData: { packet = new TiKuData();}break;
			case MessageID.GCWenJuanListData: { packet = new GCWenJuanListData();}break;
			case MessageID.CGAnswrQus: { packet = new CGAnswrQus();}break;
			case MessageID.GCAnswrQus: { packet = new GCAnswrQus();}break;
			case MessageID.CGRwdAnswrQus: { packet = new CGRwdAnswrQus();}break;
			case MessageID.GCRwdAnswrQus: { packet = new GCRwdAnswrQus();}break;
			case MessageID.GCActivity: { packet = new GCActivity();}break;
			case MessageID.CGActivityOprateEvent: { packet = new CGActivityOprateEvent();}break;
			case MessageID.GCActivityOprateEvent: { packet = new GCActivityOprateEvent();}break;
			case MessageID.OpActivityInfo: { packet = new OpActivityInfo();}break;
			case MessageID.CGOpActivityInfo: { packet = new CGOpActivityInfo();}break;
			case MessageID.GCOpActivityInfo: { packet = new GCOpActivityInfo();}break;
			case MessageID.GCIOSActivityOpen: { packet = new GCIOSActivityOpen();}break;
			case MessageID.EggInfo: { packet = new EggInfo();}break;
			case MessageID.HatchEggInfo: { packet = new HatchEggInfo();}break;
			case MessageID.GCInitChickenActivity: { packet = new GCInitChickenActivity();}break;
			case MessageID.CGEggHatch: { packet = new CGEggHatch();}break;
			case MessageID.GCEggHatchBack: { packet = new GCEggHatchBack();}break;
			case MessageID.RedBagInfo: { packet = new RedBagInfo();}break;
			case MessageID.GCInitRedBagInfo: { packet = new GCInitRedBagInfo();}break;
			case MessageID.CGGetRedBag: { packet = new CGGetRedBag();}break;
			case MessageID.GCGetRedBagBack: { packet = new GCGetRedBagBack();}break;
			case MessageID.NewYearLuckyDrawHistory: { packet = new NewYearLuckyDrawHistory();}break;
			case MessageID.CGNewYearLuckyDraw: { packet = new CGNewYearLuckyDraw();}break;
			case MessageID.GCNewYearLuckyDrawBack: { packet = new GCNewYearLuckyDrawBack();}break;
			case MessageID.CGNewYearLuckyDrawRank: { packet = new CGNewYearLuckyDrawRank();}break;
			case MessageID.GCNewYearLuckyDrawRank: { packet = new GCNewYearLuckyDrawRank();}break;
			case MessageID.FlowerBabyHistory: { packet = new FlowerBabyHistory();}break;
			case MessageID.CGGetFlowerBabyInfo: { packet = new CGGetFlowerBabyInfo();}break;
			case MessageID.GCGetFlowerBabyInfoBack: { packet = new GCGetFlowerBabyInfoBack();}break;
			case MessageID.CGGiveFlower: { packet = new CGGiveFlower();}break;
			case MessageID.GCGiveFlowerBack: { packet = new GCGiveFlowerBack();}break;
			case MessageID.FlowerRewardItem: { packet = new FlowerRewardItem();}break;
			case MessageID.CGGiveFlowerReward: { packet = new CGGiveFlowerReward();}break;
			case MessageID.GCGiveFlowerRewardBack: { packet = new GCGiveFlowerRewardBack();}break;
			case MessageID.CGFlowerBabyRank: { packet = new CGFlowerBabyRank();}break;
			case MessageID.GCFlowerBabyRank: { packet = new GCFlowerBabyRank();}break;
			case MessageID.TreeInfo: { packet = new TreeInfo();}break;
			case MessageID.TreeToolInfo: { packet = new TreeToolInfo();}break;
			case MessageID.CGTreeDayProp: { packet = new CGTreeDayProp();}break;
			case MessageID.GCTreeDayPropBack: { packet = new GCTreeDayPropBack();}break;
			case MessageID.CGTreeDayReward: { packet = new CGTreeDayReward();}break;
			case MessageID.GCTreeDayRewardBack: { packet = new GCTreeDayRewardBack();}break;
			case MessageID.CGTreeDayRank: { packet = new CGTreeDayRank();}break;
			case MessageID.GCTreeDayRankBack: { packet = new GCTreeDayRankBack();}break;
			case MessageID.SweetDiceInfo: { packet = new SweetDiceInfo();}break;
			case MessageID.PlayerSweetDice: { packet = new PlayerSweetDice();}break;
			case MessageID.CGSweetDice: { packet = new CGSweetDice();}break;
			case MessageID.GCSweetDice: { packet = new GCSweetDice();}break;
			case MessageID.CGGetSweetDiceItem: { packet = new CGGetSweetDiceItem();}break;
			case MessageID.CGBuySweetDice: { packet = new CGBuySweetDice();}break;
			case MessageID.ActivityRankInfo: { packet = new ActivityRankInfo();}break;
			case MessageID.ActivityRankReward: { packet = new ActivityRankReward();}break;
			case MessageID.CGActivityRank: { packet = new CGActivityRank();}break;
			case MessageID.GCActivityRankResult: { packet = new GCActivityRankResult();}break;
			case MessageID.AllCombatRegist: { packet = new AllCombatRegist();}break;
			case MessageID.AllCombatRegistBack: { packet = new AllCombatRegistBack();}break;
			case MessageID.ACombatTrans: { packet = new ACombatTrans();}break;
			case MessageID.MessageList: { packet = new MessageList();}break;
			case MessageID.ACombatTransBack: { packet = new ACombatTransBack();}break;
			case MessageID.MethodInvoteMsg: { packet = new MethodInvoteMsg();}break;
			case MessageID.CGGetAllCombatView: { packet = new CGGetAllCombatView();}break;
			case MessageID.GCGetAllCombatView: { packet = new GCGetAllCombatView();}break;
			case MessageID.CGEnterAllCombat: { packet = new CGEnterAllCombat();}break;
			case MessageID.GCEnterAllCombat: { packet = new GCEnterAllCombat();}break;
			case MessageID.CGExitAllCombat: { packet = new CGExitAllCombat();}break;
			case MessageID.GCExitAllCombat: { packet = new GCExitAllCombat();}break;
			case MessageID.GCEnterCombatEndTime: { packet = new GCEnterCombatEndTime();}break;
			case MessageID.CGGetherBloodItem: { packet = new CGGetherBloodItem();}break;
			case MessageID.GCChangeSorce: { packet = new GCChangeSorce();}break;
			case MessageID.CGGetAllCombatRanks: { packet = new CGGetAllCombatRanks();}break;
			case MessageID.GCGetAllCombatRanks: { packet = new GCGetAllCombatRanks();}break;
			case MessageID.GCAllCombatEnd: { packet = new GCAllCombatEnd();}break;
			case MessageID.CGGetAllRankDatas: { packet = new CGGetAllRankDatas();}break;
			case MessageID.GCGetAllRankDatas: { packet = new GCGetAllRankDatas();}break;
			case MessageID.AllcombatRankData: { packet = new AllcombatRankData();}break;
			case MessageID.ArenaInfo: { packet = new ArenaInfo();}break;
			case MessageID.FightHistroyInfo: { packet = new FightHistroyInfo();}break;
			case MessageID.CGArenaOpen: { packet = new CGArenaOpen();}break;
			case MessageID.GCArenaOpen: { packet = new GCArenaOpen();}break;
			case MessageID.CGArenaFight: { packet = new CGArenaFight();}break;
			case MessageID.GCArenaFight: { packet = new GCArenaFight();}break;
			case MessageID.GCArenaFightResult: { packet = new GCArenaFightResult();}break;
			case MessageID.CGArenaDivisionUp: { packet = new CGArenaDivisionUp();}break;
			case MessageID.CGArenaQuit: { packet = new CGArenaQuit();}break;
			case MessageID.CGArenaBuyChance: { packet = new CGArenaBuyChance();}break;
			case MessageID.GCArenaBuyChance: { packet = new GCArenaBuyChance();}break;
			case MessageID.CGArenaFightRecord: { packet = new CGArenaFightRecord();}break;
			case MessageID.GCArenaFightRecord: { packet = new GCArenaFightRecord();}break;
			case MessageID.CGArenaClrCDTime: { packet = new CGArenaClrCDTime();}break;
			case MessageID.GCArenaClrCDTime: { packet = new GCArenaClrCDTime();}break;
			case MessageID.CGGetArenaShopItems: { packet = new CGGetArenaShopItems();}break;
			case MessageID.GCGetArenaShopItemsBack: { packet = new GCGetArenaShopItemsBack();}break;
			case MessageID.CGExchangeArenaShopItem: { packet = new CGExchangeArenaShopItem();}break;
			case MessageID.GCExchangeArenaShopItem: { packet = new GCExchangeArenaShopItem();}break;
			case MessageID.AuctionBackData: { packet = new AuctionBackData();}break;
			case MessageID.AuctionRecordData: { packet = new AuctionRecordData();}break;
			case MessageID.CGGetAucitonList: { packet = new CGGetAucitonList();}break;
			case MessageID.GCGetAucitonListBack: { packet = new GCGetAucitonListBack();}break;
			case MessageID.CGAuctionSale: { packet = new CGAuctionSale();}break;
			case MessageID.CGAuctionBuyShelve: { packet = new CGAuctionBuyShelve();}break;
			case MessageID.GCAuctionHouseBack: { packet = new GCAuctionHouseBack();}break;
			case MessageID.CGGetAuctionRecordList: { packet = new CGGetAuctionRecordList();}break;
			case MessageID.GCGetAuctionRecordListBack: { packet = new GCGetAuctionRecordListBack();}break;
			case MessageID.BackpackGrid: { packet = new BackpackGrid();}break;
			case MessageID.BackpackItem: { packet = new BackpackItem();}break;
			case MessageID.CGBackpackOper: { packet = new CGBackpackOper();}break;
			case MessageID.GCBackpackOper: { packet = new GCBackpackOper();}break;
			case MessageID.GCPutBackpack: { packet = new GCPutBackpack();}break;
			case MessageID.GCPutStorage: { packet = new GCPutStorage();}break;
			case MessageID.CGBackpackSpecial: { packet = new CGBackpackSpecial();}break;
			case MessageID.TreasureMapDataInfo: { packet = new TreasureMapDataInfo();}break;
			case MessageID.GCBackTreasureMap: { packet = new GCBackTreasureMap();}break;
			case MessageID.TreasureMap: { packet = new TreasureMap();}break;
			case MessageID.CGBackUseMap: { packet = new CGBackUseMap();}break;
			case MessageID.GCBackPuseUseMap: { packet = new GCBackPuseUseMap();}break;
			case MessageID.GCSendTransmitToMe: { packet = new GCSendTransmitToMe();}break;
			case MessageID.CGTransmitToMember: { packet = new CGTransmitToMember();}break;
			case MessageID.GCOpenChatHornUI: { packet = new GCOpenChatHornUI();}break;
			case MessageID.GCSendOpenBoxEnd: { packet = new GCSendOpenBoxEnd();}break;
			case MessageID.GCSendMakeAct: { packet = new GCSendMakeAct();}break;
			case MessageID.ItemLimit: { packet = new ItemLimit();}break;
			case MessageID.GCItemLimitBack: { packet = new GCItemLimitBack();}break;
			case MessageID.NineMysteryItem: { packet = new NineMysteryItem();}break;
			case MessageID.CGBackUseNineMystery: { packet = new CGBackUseNineMystery();}break;
			case MessageID.CGUseNineMysteryIntoDungeon: { packet = new CGUseNineMysteryIntoDungeon();}break;
			case MessageID.GCBackNineMystery: { packet = new GCBackNineMystery();}break;
			case MessageID.CGComposeItems: { packet = new CGComposeItems();}break;
			case MessageID.GCComposeItems: { packet = new GCComposeItems();}break;
			case MessageID.CGSetAutoResolve: { packet = new CGSetAutoResolve();}break;
			case MessageID.GCSetAutoResolve: { packet = new GCSetAutoResolve();}break;
			case MessageID.CGBadvellyOperate: { packet = new CGBadvellyOperate();}break;
			case MessageID.GCBadvellyOperateBack: { packet = new GCBadvellyOperateBack();}break;
			case MessageID.GCErrorBack: { packet = new GCErrorBack();}break;
			case MessageID.CGheartbeatClientSend: { packet = new CGheartbeatClientSend();}break;
			case MessageID.GCheartbeatServerBack: { packet = new GCheartbeatServerBack();}break;
			case MessageID.GCServerMsg: { packet = new GCServerMsg();}break;
			case MessageID.GCCloseOldSession: { packet = new GCCloseOldSession();}break;
			case MessageID.GCLogMsg: { packet = new GCLogMsg();}break;
			case MessageID.GCBattleField2: { packet = new GCBattleField2();}break;
			case MessageID.CGBattleField2: { packet = new CGBattleField2();}break;
			case MessageID.GCBattleField: { packet = new GCBattleField();}break;
			case MessageID.CGBattleField: { packet = new CGBattleField();}break;
			case MessageID.BattleTask: { packet = new BattleTask();}break;
			case MessageID.GCBattleTaskListBack: { packet = new GCBattleTaskListBack();}break;
			case MessageID.GCBattleTaskInforBack: { packet = new GCBattleTaskInforBack();}break;
			case MessageID.CapeInfo: { packet = new CapeInfo();}break;
			case MessageID.CGCapeLevelUp: { packet = new CGCapeLevelUp();}break;
			case MessageID.GCCapeLevelUpResult: { packet = new GCCapeLevelUpResult();}break;
			case MessageID.CGChallengeBatchOperate: { packet = new CGChallengeBatchOperate();}break;
			case MessageID.GCChallengeBatchOperateBack: { packet = new GCChallengeBatchOperateBack();}break;
			case MessageID.GCChallengeBatchInfo: { packet = new GCChallengeBatchInfo();}break;
			case MessageID.GCChallengeBatchReward: { packet = new GCChallengeBatchReward();}break;
			case MessageID.GCChallengeBatchRefreshTime: { packet = new GCChallengeBatchRefreshTime();}break;
			case MessageID.CGSendChatMsg: { packet = new CGSendChatMsg();}break;
			case MessageID.ChatInfo: { packet = new ChatInfo();}break;
			case MessageID.GCPushChatMsg: { packet = new GCPushChatMsg();}break;
			case MessageID.CGChatSeting: { packet = new CGChatSeting();}break;
			case MessageID.GCChatSeting: { packet = new GCChatSeting();}break;
			case MessageID.CGBlackChatSeting: { packet = new CGBlackChatSeting();}break;
			case MessageID.GCBlackChatSeting: { packet = new GCBlackChatSeting();}break;
			case MessageID.CombineActivityInfo: { packet = new CombineActivityInfo();}break;
			case MessageID.CombineActivity: { packet = new CombineActivity();}break;
			case MessageID.GCCombineActivityList: { packet = new GCCombineActivityList();}break;
			case MessageID.CombineActivityListItem: { packet = new CombineActivityListItem();}break;
			case MessageID.CombineActivityExchangeItem: { packet = new CombineActivityExchangeItem();}break;
			case MessageID.CombineActivityBuyItem: { packet = new CombineActivityBuyItem();}break;
			case MessageID.CGGetCombineActivityReward: { packet = new CGGetCombineActivityReward();}break;
			case MessageID.GCGetCombineActivityRewardBack: { packet = new GCGetCombineActivityRewardBack();}break;
			case MessageID.GCCombineActivityItemUpdate: { packet = new GCCombineActivityItemUpdate();}break;
			case MessageID.CommonExchangeInfo: { packet = new CommonExchangeInfo();}break;
			case MessageID.CommonExchangeListInfo: { packet = new CommonExchangeListInfo();}break;
			case MessageID.CGRefreshCommonExchange: { packet = new CGRefreshCommonExchange();}break;
			case MessageID.GCRefreshCommonExchange: { packet = new GCRefreshCommonExchange();}break;
			case MessageID.CGCommonExchange: { packet = new CGCommonExchange();}break;
			case MessageID.GCCommonExchange: { packet = new GCCommonExchange();}break;
			case MessageID.GCRefreshHistory: { packet = new GCRefreshHistory();}break;
			case MessageID.EntryStrStr: { packet = new EntryStrStr();}break;
			case MessageID.EntryStringInt: { packet = new EntryStringInt();}break;
			case MessageID.EntryLongInt: { packet = new EntryLongInt();}break;
			case MessageID.EntryIntInt: { packet = new EntryIntInt();}break;
			case MessageID.EntryLongAry: { packet = new EntryLongAry();}break;
			case MessageID.MapStrStr: { packet = new MapStrStr();}break;
			case MessageID.MapLongAry: { packet = new MapLongAry();}break;
			case MessageID.ServerRegist: { packet = new ServerRegist();}break;
			case MessageID.LoginRegistBack: { packet = new LoginRegistBack();}break;
			case MessageID.LoginSendVilicode: { packet = new LoginSendVilicode();}break;
			case MessageID.CGReLogin: { packet = new CGReLogin();}break;
			case MessageID.GCReLogin: { packet = new GCReLogin();}break;
			case MessageID.SendSyncInnerPacket: { packet = new SendSyncInnerPacket();}break;
			case MessageID.BackSyncInnerPacket: { packet = new BackSyncInnerPacket();}break;
			case MessageID.ReqServerProperties: { packet = new ReqServerProperties();}break;
			case MessageID.PropertiesInfo: { packet = new PropertiesInfo();}break;
			case MessageID.ServerPropertiesBack: { packet = new ServerPropertiesBack();}break;
			case MessageID.GCFunctionOpen: { packet = new GCFunctionOpen();}break;
			case MessageID.GCFunctionOpenList: { packet = new GCFunctionOpenList();}break;
			case MessageID.IntegralRankInfo: { packet = new IntegralRankInfo();}break;
			case MessageID.CurcyIntegralItemInfo: { packet = new CurcyIntegralItemInfo();}break;
			case MessageID.IntegralRewardInfo: { packet = new IntegralRewardInfo();}break;
			case MessageID.CGIntegralOperate: { packet = new CGIntegralOperate();}break;
			case MessageID.GCIntegralResult: { packet = new GCIntegralResult();}break;
			case MessageID.CGEnterInstancing: { packet = new CGEnterInstancing();}break;
			case MessageID.GCEnterInstancing: { packet = new GCEnterInstancing();}break;
			case MessageID.GCAllMenusDatas: { packet = new GCAllMenusDatas();}break;
			case MessageID.GCMenusData: { packet = new GCMenusData();}break;
			case MessageID.GCFastestPlayer: { packet = new GCFastestPlayer();}break;
			case MessageID.GCInstancingData: { packet = new GCInstancingData();}break;
			case MessageID.DungeonItemsRwd: { packet = new DungeonItemsRwd();}break;
			case MessageID.GCDungeonEnd: { packet = new GCDungeonEnd();}break;
			case MessageID.CGChangeSchedule: { packet = new CGChangeSchedule();}break;
			case MessageID.GCChangeSchedule: { packet = new GCChangeSchedule();}break;
			case MessageID.CGChangeGuideId: { packet = new CGChangeGuideId();}break;
			case MessageID.GCInstancingStart: { packet = new GCInstancingStart();}break;
			case MessageID.GCAskEnterDungeon: { packet = new GCAskEnterDungeon();}break;
			case MessageID.CGResponseEnterDungeon: { packet = new CGResponseEnterDungeon();}break;
			case MessageID.CGExitDungeon: { packet = new CGExitDungeon();}break;
			case MessageID.CGBuyDungeonNum: { packet = new CGBuyDungeonNum();}break;
			case MessageID.CGSweepDungeon: { packet = new CGSweepDungeon();}break;
			case MessageID.GCSweepDungeon: { packet = new GCSweepDungeon();}break;
			case MessageID.GCSweepTower: { packet = new GCSweepTower();}break;
			case MessageID.GCInstancingRwdSchedule: { packet = new GCInstancingRwdSchedule();}break;
			case MessageID.GCInstancingErrorMessage: { packet = new GCInstancingErrorMessage();}break;
			case MessageID.BossData: { packet = new BossData();}break;
			case MessageID.ChapterBossData: { packet = new ChapterBossData();}break;
			case MessageID.CGGetBossView: { packet = new CGGetBossView();}break;
			case MessageID.GCGetBossView: { packet = new GCGetBossView();}break;
			case MessageID.GCChangeBossStar: { packet = new GCChangeBossStar();}break;
			case MessageID.CGPkBoss: { packet = new CGPkBoss();}break;
			case MessageID.BossRank: { packet = new BossRank();}break;
			case MessageID.CGGetBossRanks: { packet = new CGGetBossRanks();}break;
			case MessageID.GCGetBossRanks: { packet = new GCGetBossRanks();}break;
			case MessageID.GCPKBossResult: { packet = new GCPKBossResult();}break;
			case MessageID.CGGetPackRwd: { packet = new CGGetPackRwd();}break;
			case MessageID.CGExitPersonBoss: { packet = new CGExitPersonBoss();}break;
			case MessageID.BossOpenSts: { packet = new BossOpenSts();}break;
			case MessageID.GCPersonBossOpenSts: { packet = new GCPersonBossOpenSts();}break;
			case MessageID.GCClearBossData: { packet = new GCClearBossData();}break;
			case MessageID.EquipSlots: { packet = new EquipSlots();}break;
			case MessageID.EquipInfo: { packet = new EquipInfo();}break;
			case MessageID.EquipAttr: { packet = new EquipAttr();}break;
			case MessageID.CGEquipOperate: { packet = new CGEquipOperate();}break;
			case MessageID.GCEquipOperateResult: { packet = new GCEquipOperateResult();}break;
			case MessageID.CGPlayerDetalitedInfo: { packet = new CGPlayerDetalitedInfo();}break;
			case MessageID.GCSendPlayerDetalitedInfo: { packet = new GCSendPlayerDetalitedInfo();}break;
			case MessageID.CGHorseEquipOperate: { packet = new CGHorseEquipOperate();}break;
			case MessageID.GCHorseEquipOperateResult: { packet = new GCHorseEquipOperateResult();}break;
			case MessageID.CGCreateEquip: { packet = new CGCreateEquip();}break;
			case MessageID.GCCreateEquipResult: { packet = new GCCreateEquipResult();}break;
			case MessageID.CGEscortOperate: { packet = new CGEscortOperate();}break;
			case MessageID.GCEscortOperateResult: { packet = new GCEscortOperateResult();}break;
			case MessageID.CGFollowDart: { packet = new CGFollowDart();}break;
			case MessageID.GCFollowDartResult: { packet = new GCFollowDartResult();}break;
			case MessageID.GCBackFashionData: { packet = new GCBackFashionData();}break;
			case MessageID.CGSwitchFashionData: { packet = new CGSwitchFashionData();}break;
			case MessageID.GCSwitchFashionDataBack: { packet = new GCSwitchFashionDataBack();}break;
			case MessageID.CGBuyFashionData: { packet = new CGBuyFashionData();}break;
			case MessageID.GCBuyFashionDataBack: { packet = new GCBuyFashionDataBack();}break;
			case MessageID.CGMakeFashionData: { packet = new CGMakeFashionData();}break;
			case MessageID.GCMakeFashionDataBack: { packet = new GCMakeFashionDataBack();}break;
			case MessageID.GCCreateCharacterInfo: { packet = new GCCreateCharacterInfo();}break;
			case MessageID.FateInfo: { packet = new FateInfo();}break;
			case MessageID.SymInfo: { packet = new SymInfo();}break;
			case MessageID.CGFateOperate: { packet = new CGFateOperate();}break;
			case MessageID.GCFateResult: { packet = new GCFateResult();}break;
			case MessageID.CGFriendListData: { packet = new CGFriendListData();}break;
			case MessageID.GCFriendListDataBack: { packet = new GCFriendListDataBack();}break;
			case MessageID.CGOptionFriend: { packet = new CGOptionFriend();}break;
			case MessageID.GCOptionFriendBack: { packet = new GCOptionFriendBack();}break;
			case MessageID.GCPushAddFriend: { packet = new GCPushAddFriend();}break;
			case MessageID.GCPushPersonMessage: { packet = new GCPushPersonMessage();}break;
			case MessageID.CGGetFriendData: { packet = new CGGetFriendData();}break;
			case MessageID.GCGetFriendDataBack: { packet = new GCGetFriendDataBack();}break;
			case MessageID.CGFairy: { packet = new CGFairy();}break;
			case MessageID.CGTrackEnemy: { packet = new CGTrackEnemy();}break;
			case MessageID.GCTrackEnemy: { packet = new GCTrackEnemy();}break;
			case MessageID.killBossInfo: { packet = new killBossInfo();}break;
			case MessageID.bossInfo: { packet = new bossInfo();}break;
			case MessageID.GCGalaxyOperateResult: { packet = new GCGalaxyOperateResult();}break;
			case MessageID.CGSingleGalaxyOperate: { packet = new CGSingleGalaxyOperate();}break;
			case MessageID.GCSingleGalaxyOperate: { packet = new GCSingleGalaxyOperate();}break;
			case MessageID.CGWorldGalaxyOperate: { packet = new CGWorldGalaxyOperate();}break;
			case MessageID.GCWorldGalaxyOperate: { packet = new GCWorldGalaxyOperate();}break;
			case MessageID.CGGalaxyHomeOperate: { packet = new CGGalaxyHomeOperate();}break;
			case MessageID.GCGalaxyHomeOperate: { packet = new GCGalaxyHomeOperate();}break;
			case MessageID.CGBackLastScene: { packet = new CGBackLastScene();}break;
			case MessageID.GCGalaxyInviteGoHome: { packet = new GCGalaxyInviteGoHome();}break;
			case MessageID.CGGetTeamLeaderSceneID: { packet = new CGGetTeamLeaderSceneID();}break;
			case MessageID.GCGetTeamLeaderSceneID: { packet = new GCGetTeamLeaderSceneID();}break;
			case MessageID.GangAttr: { packet = new GangAttr();}break;
			case MessageID.GangMainInfo: { packet = new GangMainInfo();}break;
			case MessageID.BuildingInfo: { packet = new BuildingInfo();}break;
			case MessageID.GangMemberInfo: { packet = new GangMemberInfo();}break;
			case MessageID.CGCreateGang: { packet = new CGCreateGang();}break;
			case MessageID.GCCreateGang: { packet = new GCCreateGang();}break;
			case MessageID.CGGetGangList: { packet = new CGGetGangList();}break;
			case MessageID.GCGetGangList: { packet = new GCGetGangList();}break;
			case MessageID.CGGangOperate: { packet = new CGGangOperate();}break;
			case MessageID.GCGangOperate: { packet = new GCGangOperate();}break;
			case MessageID.CGGangBuy: { packet = new CGGangBuy();}break;
			case MessageID.GCGangBuy: { packet = new GCGangBuy();}break;
			case MessageID.CGGangFight: { packet = new CGGangFight();}break;
			case MessageID.GangInfo4Map: { packet = new GangInfo4Map();}break;
			case MessageID.GCGangFight: { packet = new GCGangFight();}break;
			case MessageID.CGEnterGang: { packet = new CGEnterGang();}break;
			case MessageID.GCEnterGang: { packet = new GCEnterGang();}break;
			case MessageID.GCGangRobberNum: { packet = new GCGangRobberNum();}break;
			case MessageID.GCGangActiveOpen: { packet = new GCGangActiveOpen();}break;
			case MessageID.CGMuteGangMember: { packet = new CGMuteGangMember();}break;
			case MessageID.GCMuteGangMember: { packet = new GCMuteGangMember();}break;
			case MessageID.GCMuteGangList: { packet = new GCMuteGangList();}break;
			case MessageID.CGInviteToGang: { packet = new CGInviteToGang();}break;
			case MessageID.GCBeInvitedToGang: { packet = new GCBeInvitedToGang();}break;
			case MessageID.CGBeBeInvitedToGang: { packet = new CGBeBeInvitedToGang();}break;
			case MessageID.GCApplyNotice: { packet = new GCApplyNotice();}break;
			case MessageID.CGHasGang: { packet = new CGHasGang();}break;
			case MessageID.GCHasGang: { packet = new GCHasGang();}break;
			case MessageID.CGGangChangeName: { packet = new CGGangChangeName();}break;
			case MessageID.GCGangChangeName: { packet = new GCGangChangeName();}break;
			case MessageID.GardenHerbalInfo: { packet = new GardenHerbalInfo();}break;
			case MessageID.GardenFieldInfo: { packet = new GardenFieldInfo();}break;
			case MessageID.GCGardenOperateResult: { packet = new GCGardenOperateResult();}break;
			case MessageID.CGGardenOperate: { packet = new CGGardenOperate();}break;
			case MessageID.CGGardenMakeMedicine: { packet = new CGGardenMakeMedicine();}break;
			case MessageID.GCGardenMakeMedicine: { packet = new GCGardenMakeMedicine();}break;
			case MessageID.CodeInfo: { packet = new CodeInfo();}break;
			case MessageID.GateRegist: { packet = new GateRegist();}break;
			case MessageID.GateRegistBack: { packet = new GateRegistBack();}break;
			case MessageID.Gate2LoginLoadPush: { packet = new Gate2LoginLoadPush();}break;
			case MessageID.GateWReadyPush: { packet = new GateWReadyPush();}break;
			case MessageID.User2GameForwardMessage: { packet = new User2GameForwardMessage();}break;
			case MessageID.Game2UserForwardMessage: { packet = new Game2UserForwardMessage();}break;
			case MessageID.Gate2GameInterruptUserSession: { packet = new Gate2GameInterruptUserSession();}break;
			case MessageID.Gate2GamePlayerLoginout: { packet = new Gate2GamePlayerLoginout();}break;
			case MessageID.Entry4GM: { packet = new Entry4GM();}break;
			case MessageID.CGGM4ClientMsg: { packet = new CGGM4ClientMsg();}break;
			case MessageID.CGEnterGongCheng: { packet = new CGEnterGongCheng();}break;
			case MessageID.GCEnterGongCheng: { packet = new GCEnterGongCheng();}break;
			case MessageID.GCGongChengChangeSchedule: { packet = new GCGongChengChangeSchedule();}break;
			case MessageID.CGDonateStick: { packet = new CGDonateStick();}break;
			case MessageID.GCDonateStick: { packet = new GCDonateStick();}break;
			case MessageID.CGOpenGongChengUI: { packet = new CGOpenGongChengUI();}break;
			case MessageID.GCOpenGongChengUI: { packet = new GCOpenGongChengUI();}break;
			case MessageID.GongChengDoorInfo: { packet = new GongChengDoorInfo();}break;
			case MessageID.GCDoorScore: { packet = new GCDoorScore();}break;
			case MessageID.GCDoorHurtPercent: { packet = new GCDoorHurtPercent();}break;
			case MessageID.GCGongChengLongBelong: { packet = new GCGongChengLongBelong();}break;
			case MessageID.GCGongchengAddScore: { packet = new GCGongchengAddScore();}break;
			case MessageID.CGGongChengLeave: { packet = new CGGongChengLeave();}break;
			case MessageID.GCGongChengLeave: { packet = new GCGongChengLeave();}break;
			case MessageID.CGBeforeDonateStick: { packet = new CGBeforeDonateStick();}break;
			case MessageID.GCBeforeDonateStick: { packet = new GCBeforeDonateStick();}break;
			case MessageID.GCGongChengLeaveTime: { packet = new GCGongChengLeaveTime();}break;
			case MessageID.GCGongChengScoreCount: { packet = new GCGongChengScoreCount();}break;
			case MessageID.CGGongChengReceiveAward: { packet = new CGGongChengReceiveAward();}break;
			case MessageID.GCGongChengReceiveAward: { packet = new GCGongChengReceiveAward();}break;
			case MessageID.CGGongChengCanStatue: { packet = new CGGongChengCanStatue();}break;
			case MessageID.GCGongChengCanStatue: { packet = new GCGongChengCanStatue();}break;
			case MessageID.CGGongChengGetStatueAward: { packet = new CGGongChengGetStatueAward();}break;
			case MessageID.GCGongChengGetStatueAward: { packet = new GCGongChengGetStatueAward();}break;
			case MessageID.GCOpenGongChengEnterBoard: { packet = new GCOpenGongChengEnterBoard();}break;
			case MessageID.GCGongChengLeader: { packet = new GCGongChengLeader();}break;
			case MessageID.HRRewardInfo: { packet = new HRRewardInfo();}break;
			case MessageID.ShowInfo: { packet = new ShowInfo();}break;
			case MessageID.HRInfo: { packet = new HRInfo();}break;
			case MessageID.CGHappyRoll: { packet = new CGHappyRoll();}break;
			case MessageID.GCHappyRoll: { packet = new GCHappyRoll();}break;
			case MessageID.GCHappyRollRewardList: { packet = new GCHappyRollRewardList();}break;
			case MessageID.GCHappyRollJackPotList: { packet = new GCHappyRollJackPotList();}break;
			case MessageID.CGLottery: { packet = new CGLottery();}break;
			case MessageID.GCLottery: { packet = new GCLottery();}break;
			case MessageID.CGHappyRollGetReward: { packet = new CGHappyRollGetReward();}break;
			case MessageID.GCHappyRollGetRewardBack: { packet = new GCHappyRollGetRewardBack();}break;
			case MessageID.CGCheckHRUpdate: { packet = new CGCheckHRUpdate();}break;
			case MessageID.GCVersion: { packet = new GCVersion();}break;
			case MessageID.CGHappyRollBuyMoney: { packet = new CGHappyRollBuyMoney();}break;
			case MessageID.GCPushHighLadderListBack: { packet = new GCPushHighLadderListBack();}break;
			case MessageID.GCHighLadderOver: { packet = new GCHighLadderOver();}break;
			case MessageID.CGGetHighLadderReward: { packet = new CGGetHighLadderReward();}break;
			case MessageID.GCGetHighLadderRewardBack: { packet = new GCGetHighLadderRewardBack();}break;
			case MessageID.CGGetAchievementData: { packet = new CGGetAchievementData();}break;
			case MessageID.GCGetAchievementDataBack: { packet = new GCGetAchievementDataBack();}break;
			case MessageID.CGUseTitle: { packet = new CGUseTitle();}break;
			case MessageID.GCUseTitleBack: { packet = new GCUseTitleBack();}break;
			case MessageID.CGLockTitle: { packet = new CGLockTitle();}break;
			case MessageID.GCLockTitleBack: { packet = new GCLockTitleBack();}break;
			case MessageID.GCBackHorseData: { packet = new GCBackHorseData();}break;
			case MessageID.CGChoseHorse: { packet = new CGChoseHorse();}break;
			case MessageID.GCChoseHorseBack: { packet = new GCChoseHorseBack();}break;
			case MessageID.CGUseHorse: { packet = new CGUseHorse();}break;
			case MessageID.GCUseHorseBack: { packet = new GCUseHorseBack();}break;
			case MessageID.CGCultureToUpStar: { packet = new CGCultureToUpStar();}break;
			case MessageID.GCCultureToUpStarBack: { packet = new GCCultureToUpStarBack();}break;
			case MessageID.CGLookHorse: { packet = new CGLookHorse();}break;
			case MessageID.GCLookHorseBack: { packet = new GCLookHorseBack();}break;
			case MessageID.GCGetNewHorse: { packet = new GCGetNewHorse();}break;
			case MessageID.ImpactData: { packet = new ImpactData();}break;
			case MessageID.GCSyncImpactList: { packet = new GCSyncImpactList();}break;
			case MessageID.CGTriggerImpact: { packet = new CGTriggerImpact();}break;
			case MessageID.GCTriggerImpact: { packet = new GCTriggerImpact();}break;
			case MessageID.RandomIsland: { packet = new RandomIsland();}break;
			case MessageID.Vector3Info: { packet = new Vector3Info();}break;
			case MessageID.SkillItemData: { packet = new SkillItemData();}break;
			case MessageID.CharacterViewMsg: { packet = new CharacterViewMsg();}break;
			case MessageID.CharacterInfo: { packet = new CharacterInfo();}break;
			case MessageID.HorseInfo: { packet = new HorseInfo();}break;
			case MessageID.ChangeEquipInfo: { packet = new ChangeEquipInfo();}break;
			case MessageID.PlayerFashion: { packet = new PlayerFashion();}break;
			case MessageID.RedCross: { packet = new RedCross();}break;
			case MessageID.CharacterAttr: { packet = new CharacterAttr();}break;
			case MessageID.PetAttr: { packet = new PetAttr();}break;
			case MessageID.PetInfo: { packet = new PetInfo();}break;
			case MessageID.GCChangeAttribute: { packet = new GCChangeAttribute();}break;
			case MessageID.GCErroeHintBack: { packet = new GCErroeHintBack();}break;
			case MessageID.DeviceInfo: { packet = new DeviceInfo();}break;
			case MessageID.Achievement: { packet = new Achievement();}break;
			case MessageID.Titlel: { packet = new Titlel();}break;
			case MessageID.TrapData: { packet = new TrapData();}break;
			case MessageID.TrapItemData: { packet = new TrapItemData();}break;
			case MessageID.VipData: { packet = new VipData();}break;
			case MessageID.GangInfo: { packet = new GangInfo();}break;
			case MessageID.FriendData: { packet = new FriendData();}break;
			case MessageID.PersonalMessagees: { packet = new PersonalMessagees();}break;
			case MessageID.GCCmmonDialog: { packet = new GCCmmonDialog();}break;
			case MessageID.SkillAttackRelation: { packet = new SkillAttackRelation();}break;
			case MessageID.GCSendAddExp: { packet = new GCSendAddExp();}break;
			case MessageID.GCAddVerifyBox: { packet = new GCAddVerifyBox();}break;
			case MessageID.CGVerifyBoxResult: { packet = new CGVerifyBoxResult();}break;
			case MessageID.GCCharacterTalk: { packet = new GCCharacterTalk();}break;
			case MessageID.GGDungeonChangeScene: { packet = new GGDungeonChangeScene();}break;
			case MessageID.RandomIndexInfo: { packet = new RandomIndexInfo();}break;
			case MessageID.Iteminfo: { packet = new Iteminfo();}break;
			case MessageID.GCPlayEffect: { packet = new GCPlayEffect();}break;
			case MessageID.GangClashInfo: { packet = new GangClashInfo();}break;
			case MessageID.ClashNode: { packet = new ClashNode();}break;
			case MessageID.CGKingClash: { packet = new CGKingClash();}break;
			case MessageID.GCKingClash: { packet = new GCKingClash();}break;
			case MessageID.KingOneInfo: { packet = new KingOneInfo();}break;
			case MessageID.GCKingClashFightInfo: { packet = new GCKingClashFightInfo();}break;
			case MessageID.LegacyData: { packet = new LegacyData();}break;
			case MessageID.CGLegacy: { packet = new CGLegacy();}break;
			case MessageID.GCLegacy: { packet = new GCLegacy();}break;
			case MessageID.CGLegacyBuyNum: { packet = new CGLegacyBuyNum();}break;
			case MessageID.CGLogin: { packet = new CGLogin();}break;
			case MessageID.PlayInfo: { packet = new PlayInfo();}break;
			case MessageID.GCLoginBack: { packet = new GCLoginBack();}break;
			case MessageID.CGGetRandName: { packet = new CGGetRandName();}break;
			case MessageID.GCGetRandNameBack: { packet = new GCGetRandNameBack();}break;
			case MessageID.CGCreatePlayer: { packet = new CGCreatePlayer();}break;
			case MessageID.GCCreatePlayerOK: { packet = new GCCreatePlayerOK();}break;
			case MessageID.CGLoginGameServer: { packet = new CGLoginGameServer();}break;
			case MessageID.GCLoginGameServer: { packet = new GCLoginGameServer();}break;
			case MessageID.CGDeletePlayer: { packet = new CGDeletePlayer();}break;
			case MessageID.GCDeletePlayer: { packet = new GCDeletePlayer();}break;
			case MessageID.LGForceOffLine: { packet = new LGForceOffLine();}break;
			case MessageID.GLCheckVilidCode: { packet = new GLCheckVilidCode();}break;
			case MessageID.LGCheckVilidCodeBack: { packet = new LGCheckVilidCodeBack();}break;
			case MessageID.GLLoginSuccess: { packet = new GLLoginSuccess();}break;
			case MessageID.GLPlayerOffLine: { packet = new GLPlayerOffLine();}break;
			case MessageID.CLBeforeLogin: { packet = new CLBeforeLogin();}break;
			case MessageID.LCBeforeLoginBack: { packet = new LCBeforeLoginBack();}break;
			case MessageID.CLChangePlayerLogin: { packet = new CLChangePlayerLogin();}break;
			case MessageID.LCChangePlayerBack: { packet = new LCChangePlayerBack();}break;
			case MessageID.GLGetPlayerLoginInfo: { packet = new GLGetPlayerLoginInfo();}break;
			case MessageID.LGGetPlayerLoginInfoBack: { packet = new LGGetPlayerLoginInfoBack();}break;
			case MessageID.LCPlayerLoginQueue: { packet = new LCPlayerLoginQueue();}break;
			case MessageID.CLPlayerCancelLoginQueue: { packet = new CLPlayerCancelLoginQueue();}break;
			case MessageID.LCPlayerCancelLoginQueueBack: { packet = new LCPlayerCancelLoginQueueBack();}break;
			case MessageID.GCCommonSetting: { packet = new GCCommonSetting();}break;
			case MessageID.MailInfo: { packet = new MailInfo();}break;
			case MessageID.GCSendMailStatus: { packet = new GCSendMailStatus();}break;
			case MessageID.CGSendMail2Player: { packet = new CGSendMail2Player();}break;
			case MessageID.GCSendMail2Player: { packet = new GCSendMail2Player();}break;
			case MessageID.GCSysSendMail2Player: { packet = new GCSysSendMail2Player();}break;
			case MessageID.CGGetMailList: { packet = new CGGetMailList();}break;
			case MessageID.GCGetMailList: { packet = new GCGetMailList();}break;
			case MessageID.CGReadMail: { packet = new CGReadMail();}break;
			case MessageID.GCReadMail: { packet = new GCReadMail();}break;
			case MessageID.CGGetItemInMail: { packet = new CGGetItemInMail();}break;
			case MessageID.GCGetItemInMail: { packet = new GCGetItemInMail();}break;
			case MessageID.CGDelMail: { packet = new CGDelMail();}break;
			case MessageID.GCDelMail: { packet = new GCDelMail();}break;
			case MessageID.GCRandomIslandInfo: { packet = new GCRandomIslandInfo();}break;
			case MessageID.CGDoMarry: { packet = new CGDoMarry();}break;
			case MessageID.GCDoMarry: { packet = new GCDoMarry();}break;
			case MessageID.CGExpressLove: { packet = new CGExpressLove();}break;
			case MessageID.GCExpressLove: { packet = new GCExpressLove();}break;
			case MessageID.CGExpressLoveBack: { packet = new CGExpressLoveBack();}break;
			case MessageID.GCExpressLoveBack: { packet = new GCExpressLoveBack();}break;
			case MessageID.RingInfo: { packet = new RingInfo();}break;
			case MessageID.GCMarrySts: { packet = new GCMarrySts();}break;
			case MessageID.CGMarryRingPower: { packet = new CGMarryRingPower();}break;
			case MessageID.GCMarryRingPower: { packet = new GCMarryRingPower();}break;
			case MessageID.CGSearchMarryInfo: { packet = new CGSearchMarryInfo();}break;
			case MessageID.GCSearchMarryInfo: { packet = new GCSearchMarryInfo();}break;
			case MessageID.CGDivorce: { packet = new CGDivorce();}break;
			case MessageID.GCDivorce: { packet = new GCDivorce();}break;
			case MessageID.CGAgreeOrRefuse: { packet = new CGAgreeOrRefuse();}break;
			case MessageID.GCAgreeOrRefuse: { packet = new GCAgreeOrRefuse();}break;
			case MessageID.MarryRank: { packet = new MarryRank();}break;
			case MessageID.MidaTargetInfo: { packet = new MidaTargetInfo();}break;
			case MessageID.MidaClientInfo: { packet = new MidaClientInfo();}break;
			case MessageID.CGMidAutumn: { packet = new CGMidAutumn();}break;
			case MessageID.GCMidAutumn: { packet = new GCMidAutumn();}break;
			case MessageID.CGMuseumOperate: { packet = new CGMuseumOperate();}break;
			case MessageID.GCMuseumResult: { packet = new GCMuseumResult();}break;
			case MessageID.NationalReward: { packet = new NationalReward();}break;
			case MessageID.NationalCash: { packet = new NationalCash();}break;
			case MessageID.NationalItem: { packet = new NationalItem();}break;
			case MessageID.NationalRank: { packet = new NationalRank();}break;
			case MessageID.NationalInfo: { packet = new NationalInfo();}break;
			case MessageID.CGNationalOperate: { packet = new CGNationalOperate();}break;
			case MessageID.GCNationalOperateResult: { packet = new GCNationalOperateResult();}break;
			case MessageID.GCNoviceGuideBack: { packet = new GCNoviceGuideBack();}break;
			case MessageID.CGNoviceGuideFinish: { packet = new CGNoviceGuideFinish();}break;
			case MessageID.GCViewMovie: { packet = new GCViewMovie();}break;
			case MessageID.CGViewMovieFinish: { packet = new CGViewMovieFinish();}break;
			case MessageID.OrderInfo: { packet = new OrderInfo();}break;
			case MessageID.CGCreateOrder: { packet = new CGCreateOrder();}break;
			case MessageID.GCCreateOrderBack: { packet = new GCCreateOrderBack();}break;
			case MessageID.CGGetOrderState: { packet = new CGGetOrderState();}break;
			case MessageID.GCOrderStateBack: { packet = new GCOrderStateBack();}break;
			case MessageID.CGVerifyIOSPay: { packet = new CGVerifyIOSPay();}break;
			case MessageID.GCVerifyIOSPayBack: { packet = new GCVerifyIOSPayBack();}break;
			case MessageID.RechargeItem: { packet = new RechargeItem();}break;
			case MessageID.GCRechargeItemInfo: { packet = new GCRechargeItemInfo();}break;
			case MessageID.CGGetPetList: { packet = new CGGetPetList();}break;
			case MessageID.GCPetList: { packet = new GCPetList();}break;
			case MessageID.CGPetChangeStatus: { packet = new CGPetChangeStatus();}break;
			case MessageID.GCPetChangeStatusBack: { packet = new GCPetChangeStatusBack();}break;
			case MessageID.CGPetChangeName: { packet = new CGPetChangeName();}break;
			case MessageID.GCPetChangeNameBack: { packet = new GCPetChangeNameBack();}break;
			case MessageID.CGPetRelease: { packet = new CGPetRelease();}break;
			case MessageID.GCPetReleaseBack: { packet = new GCPetReleaseBack();}break;
			case MessageID.CGPetReFreshAttr: { packet = new CGPetReFreshAttr();}break;
			case MessageID.GCPetReFreshAttrBack: { packet = new GCPetReFreshAttrBack();}break;
			case MessageID.CGPetCulture: { packet = new CGPetCulture();}break;
			case MessageID.GCPetCultureBack: { packet = new GCPetCultureBack();}break;
			case MessageID.CGPetUpStar: { packet = new CGPetUpStar();}break;
			case MessageID.GCPetUpStarBack: { packet = new GCPetUpStarBack();}break;
			case MessageID.CGPetDeposit: { packet = new CGPetDeposit();}break;
			case MessageID.GCPetDepositBack: { packet = new GCPetDepositBack();}break;
			case MessageID.CGPetStudySkill: { packet = new CGPetStudySkill();}break;
			case MessageID.GCPetStudySkillBack: { packet = new GCPetStudySkillBack();}break;
			case MessageID.GCRefreshPetData: { packet = new GCRefreshPetData();}break;
			case MessageID.CGUnlockPetBag: { packet = new CGUnlockPetBag();}break;
			case MessageID.GCUnlockPetBagBack: { packet = new GCUnlockPetBagBack();}break;
			case MessageID.CGBuyPet: { packet = new CGBuyPet();}break;
			case MessageID.GCBuyPetBack: { packet = new GCBuyPetBack();}break;
			case MessageID.CGLookPet: { packet = new CGLookPet();}break;
			case MessageID.GCLookPetBack: { packet = new GCLookPetBack();}break;
			case MessageID.GCUpdatePetInfo: { packet = new GCUpdatePetInfo();}break;
			case MessageID.PetEmbattleInfo: { packet = new PetEmbattleInfo();}break;
			case MessageID.CGPetEmbattle: { packet = new CGPetEmbattle();}break;
			case MessageID.GCPetEmbattleBack: { packet = new GCPetEmbattleBack();}break;
			case MessageID.CGPetEmbattleAddPower: { packet = new CGPetEmbattleAddPower();}break;
			case MessageID.CGPetGoupEmbattle: { packet = new CGPetGoupEmbattle();}break;
			case MessageID.GCPetEmbattleSkill: { packet = new GCPetEmbattleSkill();}break;
			case MessageID.GCPetEmbattleAddPowerBack: { packet = new GCPetEmbattleAddPowerBack();}break;
			case MessageID.CGPetChangeCharacter: { packet = new CGPetChangeCharacter();}break;
			case MessageID.GCPetChangeCharacterBack: { packet = new GCPetChangeCharacterBack();}break;
			case MessageID.CGPetSaveNewCharacter: { packet = new CGPetSaveNewCharacter();}break;
			case MessageID.GCPetSaveNewCharacterBack: { packet = new GCPetSaveNewCharacterBack();}break;
			case MessageID.GCCharacterFaceTo: { packet = new GCCharacterFaceTo();}break;
			case MessageID.GCPlayerDie: { packet = new GCPlayerDie();}break;
			case MessageID.CGReqPlayerReborn: { packet = new CGReqPlayerReborn();}break;
			case MessageID.GCPlayerReborn: { packet = new GCPlayerReborn();}break;
			case MessageID.CGUpdatePlayerName: { packet = new CGUpdatePlayerName();}break;
			case MessageID.GCUpdatePlayerNameOK: { packet = new GCUpdatePlayerNameOK();}break;
			case MessageID.GCSendHeadIconList: { packet = new GCSendHeadIconList();}break;
			case MessageID.CGUpdatePlayerHeadIcon: { packet = new CGUpdatePlayerHeadIcon();}break;
			case MessageID.GCUpdateHeadIconOK: { packet = new GCUpdateHeadIconOK();}break;
			case MessageID.CGReLoginGameServer: { packet = new CGReLoginGameServer();}break;
			case MessageID.GCReLoginGameServer: { packet = new GCReLoginGameServer();}break;
			case MessageID.GCSendSkillList: { packet = new GCSendSkillList();}break;
			case MessageID.CGPlayerHangup: { packet = new CGPlayerHangup();}break;
			case MessageID.GCPlayerHangup: { packet = new GCPlayerHangup();}break;
			case MessageID.CGSendRotate: { packet = new CGSendRotate();}break;
			case MessageID.GCSendRotate: { packet = new GCSendRotate();}break;
			case MessageID.CGGetPlaerInfoById: { packet = new CGGetPlaerInfoById();}break;
			case MessageID.GCSendPlayerInfoById: { packet = new GCSendPlayerInfoById();}break;
			case MessageID.GCLevelUpGetNewSkill: { packet = new GCLevelUpGetNewSkill();}break;
			case MessageID.CGGetPlayerAndPetInfo: { packet = new CGGetPlayerAndPetInfo();}break;
			case MessageID.GCSendPlayerAndPetInfo: { packet = new GCSendPlayerAndPetInfo();}break;
			case MessageID.CGChangePlayer: { packet = new CGChangePlayer();}break;
			case MessageID.GCChangePlayerResult: { packet = new GCChangePlayerResult();}break;
			case MessageID.GCStressTestBegin: { packet = new GCStressTestBegin();}break;
			case MessageID.CGPlayerViewSetting: { packet = new CGPlayerViewSetting();}break;
			case MessageID.GCPlayerViewSetting: { packet = new GCPlayerViewSetting();}break;
			case MessageID.CGQuitLogin: { packet = new CGQuitLogin();}break;
			case MessageID.GCQuitLoginBack: { packet = new GCQuitLoginBack();}break;
			case MessageID.GCMuteTime: { packet = new GCMuteTime();}break;
			case MessageID.GameForceLoginout: { packet = new GameForceLoginout();}break;
			case MessageID.GCExpPlus: { packet = new GCExpPlus();}break;
			case MessageID.GCNonageSts: { packet = new GCNonageSts();}break;
			case MessageID.CGNeedNonage: { packet = new CGNeedNonage();}break;
			case MessageID.GCOnLineTime: { packet = new GCOnLineTime();}break;
			case MessageID.CGAmbitLevelUp: { packet = new CGAmbitLevelUp();}break;
			case MessageID.GCAmbitLevelUp: { packet = new GCAmbitLevelUp();}break;
			case MessageID.GCPrivatePlayerAttr: { packet = new GCPrivatePlayerAttr();}break;
			case MessageID.CGUnLock: { packet = new CGUnLock();}break;
			case MessageID.CGLookPlayerInfo: { packet = new CGLookPlayerInfo();}break;
			case MessageID.GCLookPlayerInfo: { packet = new GCLookPlayerInfo();}break;
			case MessageID.PokedexSimpleInfo: { packet = new PokedexSimpleInfo();}break;
			case MessageID.CGGetPokedex: { packet = new CGGetPokedex();}break;
			case MessageID.GCGetPokedexList: { packet = new GCGetPokedexList();}break;
			case MessageID.CGGetTodayPvpPrestige: { packet = new CGGetTodayPvpPrestige();}break;
			case MessageID.GCGetTodayPvpPrestige: { packet = new GCGetTodayPvpPrestige();}break;
			case MessageID.CGRandomDungeon: { packet = new CGRandomDungeon();}break;
			case MessageID.GCRandomDungeon: { packet = new GCRandomDungeon();}break;
			case MessageID.RankInfo: { packet = new RankInfo();}break;
			case MessageID.CGGetRankByType: { packet = new CGGetRankByType();}break;
			case MessageID.GCPushRankInfo: { packet = new GCPushRankInfo();}break;
			case MessageID.CGRankWorship: { packet = new CGRankWorship();}break;
			case MessageID.GCRankWrshipBack: { packet = new GCRankWrshipBack();}break;
			case MessageID.CGGetPetOrHorseInfo: { packet = new CGGetPetOrHorseInfo();}break;
			case MessageID.GCSendPetOrHorseInfo: { packet = new GCSendPetOrHorseInfo();}break;
			case MessageID.GCPushWorship: { packet = new GCPushWorship();}break;
			case MessageID.GCRefreshRank: { packet = new GCRefreshRank();}break;
			case MessageID.FightInfo: { packet = new FightInfo();}break;
			case MessageID.LevelInfo: { packet = new LevelInfo();}break;
			case MessageID.GCPushOpenInfo: { packet = new GCPushOpenInfo();}break;
			case MessageID.GCOpenRankOver: { packet = new GCOpenRankOver();}break;
			case MessageID.RecastRegist: { packet = new RecastRegist();}break;
			case MessageID.GRStartMove: { packet = new GRStartMove();}break;
			case MessageID.RGStartMoveBack: { packet = new RGStartMoveBack();}break;
			case MessageID.GRCheckMoveToRayCastTest: { packet = new GRCheckMoveToRayCastTest();}break;
			case MessageID.RGCheckMoveToRayCastTest: { packet = new RGCheckMoveToRayCastTest();}break;
			case MessageID.GRMoveStepOnPath: { packet = new GRMoveStepOnPath();}break;
			case MessageID.RGMoveStepOnPathBack: { packet = new RGMoveStepOnPathBack();}break;
			case MessageID.GRStopMoving: { packet = new GRStopMoving();}break;
			case MessageID.RGStopMovingBack: { packet = new RGStopMovingBack();}break;
			case MessageID.GRUpdateMoveSpeed: { packet = new GRUpdateMoveSpeed();}break;
			case MessageID.GCBackRedCrossData: { packet = new GCBackRedCrossData();}break;
			case MessageID.ResourceInfo: { packet = new ResourceInfo();}break;
			case MessageID.GCRequestResourceInfoBack: { packet = new GCRequestResourceInfoBack();}break;
			case MessageID.CGGetResource: { packet = new CGGetResource();}break;
			case MessageID.GCGetResourceBack: { packet = new GCGetResourceBack();}break;
			case MessageID.CGEnterScene: { packet = new CGEnterScene();}break;
			case MessageID.GCEnterScene: { packet = new GCEnterScene();}break;
			case MessageID.CGEnterSceneOk: { packet = new CGEnterSceneOk();}break;
			case MessageID.GCEnterSceneOk: { packet = new GCEnterSceneOk();}break;
			case MessageID.GCCharacterObjsInView: { packet = new GCCharacterObjsInView();}break;
			case MessageID.GCDelObjInSceneBack: { packet = new GCDelObjInSceneBack();}break;
			case MessageID.GCCharObjDieBack: { packet = new GCCharObjDieBack();}break;
			case MessageID.CGSendMove: { packet = new CGSendMove();}break;
			case MessageID.GCSendMove: { packet = new GCSendMove();}break;
			case MessageID.CGStopMove: { packet = new CGStopMove();}break;
			case MessageID.GCStopMove: { packet = new GCStopMove();}break;
			case MessageID.GCRefreshPlayerAttr: { packet = new GCRefreshPlayerAttr();}break;
			case MessageID.CGFly: { packet = new CGFly();}break;
			case MessageID.CGSynPlayerPos: { packet = new CGSynPlayerPos();}break;
			case MessageID.CGChangeAttackState: { packet = new CGChangeAttackState();}break;
			case MessageID.GCPutDeviceInfo: { packet = new GCPutDeviceInfo();}break;
			case MessageID.GCRefreshDeviceInfo: { packet = new GCRefreshDeviceInfo();}break;
			case MessageID.CGGetherDevice: { packet = new CGGetherDevice();}break;
			case MessageID.GCPickDevice: { packet = new GCPickDevice();}break;
			case MessageID.GCShowHideObjInSceneBack: { packet = new GCShowHideObjInSceneBack();}break;
			case MessageID.GCRefreshTrapData: { packet = new GCRefreshTrapData();}break;
			case MessageID.GCTrapItemStartMove: { packet = new GCTrapItemStartMove();}break;
			case MessageID.CharacterHurtInfo: { packet = new CharacterHurtInfo();}break;
			case MessageID.GCRefreshCharacterHurtInfo: { packet = new GCRefreshCharacterHurtInfo();}break;
			case MessageID.GCDelCharacterHurtInfo: { packet = new GCDelCharacterHurtInfo();}break;
			case MessageID.CGTeleport: { packet = new CGTeleport();}break;
			case MessageID.GCTeleport: { packet = new GCTeleport();}break;
			case MessageID.CGMoveInJog: { packet = new CGMoveInJog();}break;
			case MessageID.GGEnterExistScene: { packet = new GGEnterExistScene();}break;
			case MessageID.GGLeaveScene: { packet = new GGLeaveScene();}break;
			case MessageID.GCCharacterChangeMotion: { packet = new GCCharacterChangeMotion();}break;
			case MessageID.GCSyncCharacterPos: { packet = new GCSyncCharacterPos();}break;
			case MessageID.GCCharacterRelation: { packet = new GCCharacterRelation();}break;
			case MessageID.GCSyncCharacterRelation: { packet = new GCSyncCharacterRelation();}break;
			case MessageID.CGCommonGetherDevice: { packet = new CGCommonGetherDevice();}break;
			case MessageID.ShenQiInfo: { packet = new ShenQiInfo();}break;
			case MessageID.CGShenQiLevelUp: { packet = new CGShenQiLevelUp();}break;
			case MessageID.GCShenQiLevel: { packet = new GCShenQiLevel();}break;
			case MessageID.CGShenQiWear: { packet = new CGShenQiWear();}break;
			case MessageID.GCRefreshShenQiSkill: { packet = new GCRefreshShenQiSkill();}break;
			case MessageID.CGShop: { packet = new CGShop();}break;
			case MessageID.GCShop: { packet = new GCShop();}break;
			case MessageID.ItemInfo: { packet = new ItemInfo();}break;
			case MessageID.ShopItemInfo: { packet = new ShopItemInfo();}break;
			case MessageID.ShopSingInfo: { packet = new ShopSingInfo();}break;
			case MessageID.ShopCardInfo: { packet = new ShopCardInfo();}break;
			case MessageID.GCPushShopData: { packet = new GCPushShopData();}break;
			case MessageID.GCAddShopItemData: { packet = new GCAddShopItemData();}break;
			case MessageID.DelItemData: { packet = new DelItemData();}break;
			case MessageID.GCDelShopItemData: { packet = new GCDelShopItemData();}break;
			case MessageID.CGShopLuckDraw: { packet = new CGShopLuckDraw();}break;
			case MessageID.GCPushShop: { packet = new GCPushShop();}break;
			case MessageID.CGUseSkill: { packet = new CGUseSkill();}break;
			case MessageID.GCUseSkill: { packet = new GCUseSkill();}break;
			case MessageID.GCTriggerMotion: { packet = new GCTriggerMotion();}break;
			case MessageID.CGUpSkill: { packet = new CGUpSkill();}break;
			case MessageID.GCUpSkillOK: { packet = new GCUpSkillOK();}break;
			case MessageID.CGChangeSkill: { packet = new CGChangeSkill();}break;
			case MessageID.GCChangeSkillOK: { packet = new GCChangeSkillOK();}break;
			case MessageID.BuffImpactInfo: { packet = new BuffImpactInfo();}break;
			case MessageID.GCAddBuffImpact: { packet = new GCAddBuffImpact();}break;
			case MessageID.GCDelBuffImpact: { packet = new GCDelBuffImpact();}break;
			case MessageID.CGRefreshBuff: { packet = new CGRefreshBuff();}break;
			case MessageID.GCRefreshBuffBack: { packet = new GCRefreshBuffBack();}break;
			case MessageID.CombatResult: { packet = new CombatResult();}break;
			case MessageID.GCCombatResult: { packet = new GCCombatResult();}break;
			case MessageID.SkillCDInfo: { packet = new SkillCDInfo();}break;
			case MessageID.GCRefreshSkillCDInfo: { packet = new GCRefreshSkillCDInfo();}break;
			case MessageID.GCUseSkillResult: { packet = new GCUseSkillResult();}break;
			case MessageID.GCChangeMotion: { packet = new GCChangeMotion();}break;
			case MessageID.CGEnterSnowInstance: { packet = new CGEnterSnowInstance();}break;
			case MessageID.GCRefreshSnowBossActitivy: { packet = new GCRefreshSnowBossActitivy();}break;
			case MessageID.CGRefreshSnowActivityData: { packet = new CGRefreshSnowActivityData();}break;
			case MessageID.FightRankInfo: { packet = new FightRankInfo();}break;
			case MessageID.GCRefreshFightRankList: { packet = new GCRefreshFightRankList();}break;
			case MessageID.RankRewardsInfo: { packet = new RankRewardsInfo();}break;
			case MessageID.GCRefreshRankRewardsList: { packet = new GCRefreshRankRewardsList();}break;
			case MessageID.CGOperSnowBoss: { packet = new CGOperSnowBoss();}break;
			case MessageID.SpiritBeastInfo: { packet = new SpiritBeastInfo();}break;
			case MessageID.SpiritBeastAttr: { packet = new SpiritBeastAttr();}break;
			case MessageID.SpiritBeastSkillInfo: { packet = new SpiritBeastSkillInfo();}break;
			case MessageID.SpiritBeastShouLingInfo: { packet = new SpiritBeastShouLingInfo();}break;
			case MessageID.SpiritBeastInUnite: { packet = new SpiritBeastInUnite();}break;
			case MessageID.SpiritBeastUniteInfo: { packet = new SpiritBeastUniteInfo();}break;
			case MessageID.CGSpiritBeastOperate: { packet = new CGSpiritBeastOperate();}break;
			case MessageID.GCSpiritBeastOperateResult: { packet = new GCSpiritBeastOperateResult();}break;
			case MessageID.CGSpiritBeastInherit: { packet = new CGSpiritBeastInherit();}break;
			case MessageID.GCSpiritBeastInheritResult: { packet = new GCSpiritBeastInheritResult();}break;
			case MessageID.CGSpiritBeastLevelUp: { packet = new CGSpiritBeastLevelUp();}break;
			case MessageID.GCSpiritBeastLevelUpResult: { packet = new GCSpiritBeastLevelUpResult();}break;
			case MessageID.CGSpiritBeastOperateSkill: { packet = new CGSpiritBeastOperateSkill();}break;
			case MessageID.GCSpiritBeastOperateSkillResult: { packet = new GCSpiritBeastOperateSkillResult();}break;
			case MessageID.CGSpiritBeastUniteOperate: { packet = new CGSpiritBeastUniteOperate();}break;
			case MessageID.GCSpiritBeastUniteOperateResult: { packet = new GCSpiritBeastUniteOperateResult();}break;
			case MessageID.CGSpiritBeastFree: { packet = new CGSpiritBeastFree();}break;
			case MessageID.GCSpiritBeastFreeResult: { packet = new GCSpiritBeastFreeResult();}break;
			case MessageID.CGSpiritBeastBreed: { packet = new CGSpiritBeastBreed();}break;
			case MessageID.GCSpiritBeastBreedResult: { packet = new GCSpiritBeastBreedResult();}break;
			case MessageID.CGSpiritBeastHatch: { packet = new CGSpiritBeastHatch();}break;
			case MessageID.GCSpiritBeastHatchResult: { packet = new GCSpiritBeastHatchResult();}break;
			case MessageID.GCSpiritBeastRelive: { packet = new GCSpiritBeastRelive();}break;
			case MessageID.CGSpiritBeastCatch: { packet = new CGSpiritBeastCatch();}break;
			case MessageID.GCSpiritBeastCatchResult: { packet = new GCSpiritBeastCatchResult();}break;
			case MessageID.CGStone: { packet = new CGStone();}break;
			case MessageID.GCStone: { packet = new GCStone();}break;
			case MessageID.StoneSlotInfo: { packet = new StoneSlotInfo();}break;
			case MessageID.StoneInfo: { packet = new StoneInfo();}break;
			case MessageID.CardRewardData: { packet = new CardRewardData();}break;
			case MessageID.RechargeTypeData: { packet = new RechargeTypeData();}break;
			case MessageID.RechargeRewardData: { packet = new RechargeRewardData();}break;
			case MessageID.GCUpdateCardReward: { packet = new GCUpdateCardReward();}break;
			case MessageID.CGGetCardReward: { packet = new CGGetCardReward();}break;
			case MessageID.OneInDay: { packet = new OneInDay();}break;
			case MessageID.GCSevenDaysHappy: { packet = new GCSevenDaysHappy();}break;
			case MessageID.CGSevenDaysHappy: { packet = new CGSevenDaysHappy();}break;
			case MessageID.CGFirstCharge: { packet = new CGFirstCharge();}break;
			case MessageID.GCFirstCharge: { packet = new GCFirstCharge();}break;
			case MessageID.CGRechargeReward: { packet = new CGRechargeReward();}break;
			case MessageID.GCRechargeReward: { packet = new GCRechargeReward();}break;
			case MessageID.GCRechargeTypeUpdate: { packet = new GCRechargeTypeUpdate();}break;
			case MessageID.GCSigninStatusList: { packet = new GCSigninStatusList();}break;
			case MessageID.SignInTem: { packet = new SignInTem();}break;
			case MessageID.CGSignin: { packet = new CGSignin();}break;
			case MessageID.GCSignin: { packet = new GCSignin();}break;
			case MessageID.SunSignInRew: { packet = new SunSignInRew();}break;
			case MessageID.CGGrowFund: { packet = new CGGrowFund();}break;
			case MessageID.GCGrowFund: { packet = new GCGrowFund();}break;
			case MessageID.GCGrowFundBuyNum: { packet = new GCGrowFundBuyNum();}break;
			case MessageID.CGDoublePay: { packet = new CGDoublePay();}break;
			case MessageID.GCDoublePay: { packet = new GCDoublePay();}break;
			case MessageID.GCDailyGiftInfo: { packet = new GCDailyGiftInfo();}break;
			case MessageID.WinnersInfo: { packet = new WinnersInfo();}break;
			case MessageID.GCUpdateRewardList: { packet = new GCUpdateRewardList();}break;
			case MessageID.oneBuyInfo: { packet = new oneBuyInfo();}break;
			case MessageID.GCUpdateOneBuyList: { packet = new GCUpdateOneBuyList();}break;
			case MessageID.CGCanBuy: { packet = new CGCanBuy();}break;
			case MessageID.GCCanBuyBack: { packet = new GCCanBuyBack();}break;
			case MessageID.GCHoliday: { packet = new GCHoliday();}break;
			case MessageID.CGHoliday: { packet = new CGHoliday();}break;
			case MessageID.GCFeelGold: { packet = new GCFeelGold();}break;
			case MessageID.CGFeelGold: { packet = new CGFeelGold();}break;
			case MessageID.LevelQuotaInfo: { packet = new LevelQuotaInfo();}break;
			case MessageID.GCLevelQuota: { packet = new GCLevelQuota();}break;
			case MessageID.CGBuyLevelQuota: { packet = new CGBuyLevelQuota();}break;
			case MessageID.GCLevelQuotaUpdate: { packet = new GCLevelQuotaUpdate();}break;
			case MessageID.FreeBackInfo: { packet = new FreeBackInfo();}break;
			case MessageID.CGBuyFreeBack: { packet = new CGBuyFreeBack();}break;
			case MessageID.GCFreeBack: { packet = new GCFreeBack();}break;
			case MessageID.SuperRebateItem: { packet = new SuperRebateItem();}break;
			case MessageID.SuperRebateInfo: { packet = new SuperRebateInfo();}break;
			case MessageID.CGGetSuperRebateReward: { packet = new CGGetSuperRebateReward();}break;
			case MessageID.GCSuperRebateBack: { packet = new GCSuperRebateBack();}break;
			case MessageID.RechargeDailyGiftItem: { packet = new RechargeDailyGiftItem();}break;
			case MessageID.GCRechargeDailyGiftInfo: { packet = new GCRechargeDailyGiftInfo();}break;
			case MessageID.CGGetRechargeDailyGiftReward: { packet = new CGGetRechargeDailyGiftReward();}break;
			case MessageID.GCGetRechargeDailyGiftRewardBack: { packet = new GCGetRechargeDailyGiftRewardBack();}break;
			case MessageID.GCPointsBuyHisInfo: { packet = new GCPointsBuyHisInfo();}break;
			case MessageID.GCPointsBuyList: { packet = new GCPointsBuyList();}break;
			case MessageID.CGBuyPoints: { packet = new CGBuyPoints();}break;
			case MessageID.TalismanInfo: { packet = new TalismanInfo();}break;
			case MessageID.TalismanAttr: { packet = new TalismanAttr();}break;
			case MessageID.TalismanSlots: { packet = new TalismanSlots();}break;
			case MessageID.TalismanSlotsLook: { packet = new TalismanSlotsLook();}break;
			case MessageID.CGTalismanOperate: { packet = new CGTalismanOperate();}break;
			case MessageID.GCTalismanOperateResult: { packet = new GCTalismanOperateResult();}break;
			case MessageID.CGCreateTalisman: { packet = new CGCreateTalisman();}break;
			case MessageID.GCCreateTalismanResult: { packet = new GCCreateTalismanResult();}break;
			case MessageID.CGResolveTalisman: { packet = new CGResolveTalisman();}break;
			case MessageID.GCResolveTalismanResult: { packet = new GCResolveTalismanResult();}break;
			case MessageID.TaskInfor: { packet = new TaskInfor();}break;
			case MessageID.TaskStatus: { packet = new TaskStatus();}break;
			case MessageID.CGDeliverTask: { packet = new CGDeliverTask();}break;
			case MessageID.CGFinishTask: { packet = new CGFinishTask();}break;
			case MessageID.GCTaskListBack: { packet = new GCTaskListBack();}break;
			case MessageID.GCTaskInforBack: { packet = new GCTaskInforBack();}break;
			case MessageID.CGReciveTask: { packet = new CGReciveTask();}break;
			case MessageID.CGCatchComplate: { packet = new CGCatchComplate();}break;
			case MessageID.CGCatchCreatMonster: { packet = new CGCatchCreatMonster();}break;
			case MessageID.CGCatchGiveUpTask: { packet = new CGCatchGiveUpTask();}break;
			case MessageID.CGOpenDialog: { packet = new CGOpenDialog();}break;
			case MessageID.GCMenverOpenDialog: { packet = new GCMenverOpenDialog();}break;
			case MessageID.GCSendTaskOver: { packet = new GCSendTaskOver();}break;
			case MessageID.GCSendMainTasks: { packet = new GCSendMainTasks();}break;
			case MessageID.GCSendTaskReward: { packet = new GCSendTaskReward();}break;
			case MessageID.GCCreatMonsterBack: { packet = new GCCreatMonsterBack();}break;
			case MessageID.GCSendTaskMonster: { packet = new GCSendTaskMonster();}break;
			case MessageID.CGCatchCreatProp: { packet = new CGCatchCreatProp();}break;
			case MessageID.TeamMember: { packet = new TeamMember();}break;
			case MessageID.TeamInfo: { packet = new TeamInfo();}break;
			case MessageID.TeamSampleInfo: { packet = new TeamSampleInfo();}break;
			case MessageID.CGCreateTeam: { packet = new CGCreateTeam();}break;
			case MessageID.GCRefreashMyTeam: { packet = new GCRefreashMyTeam();}break;
			case MessageID.CGOpenTeamView: { packet = new CGOpenTeamView();}break;
			case MessageID.GCOPenTeamView: { packet = new GCOPenTeamView();}break;
			case MessageID.CGLeaveTeam: { packet = new CGLeaveTeam();}break;
			case MessageID.GCLeaveTeam: { packet = new GCLeaveTeam();}break;
			case MessageID.GCAddTeamMember: { packet = new GCAddTeamMember();}break;
			case MessageID.GCDelTeamMember: { packet = new GCDelTeamMember();}break;
			case MessageID.GCUpdateTeamMember: { packet = new GCUpdateTeamMember();}break;
			case MessageID.CGApplyTeam: { packet = new CGApplyTeam();}break;
			case MessageID.GCApplyTeamLeader: { packet = new GCApplyTeamLeader();}break;
			case MessageID.CGAgreeApply: { packet = new CGAgreeApply();}break;
			case MessageID.CGInviteOther: { packet = new CGInviteOther();}break;
			case MessageID.GCInviteOther: { packet = new GCInviteOther();}break;
			case MessageID.CGAgreeInvite: { packet = new CGAgreeInvite();}break;
			case MessageID.CGKickedOut: { packet = new CGKickedOut();}break;
			case MessageID.CGTransferCaption: { packet = new CGTransferCaption();}break;
			case MessageID.CGSetTeamAuthority: { packet = new CGSetTeamAuthority();}break;
			case MessageID.GCSetTeamAuthority: { packet = new GCSetTeamAuthority();}break;
			case MessageID.CGSetAutoAgree: { packet = new CGSetAutoAgree();}break;
			case MessageID.GCSetAutoAgree: { packet = new GCSetAutoAgree();}break;
			case MessageID.CGCallFlow: { packet = new CGCallFlow();}break;
			case MessageID.GCCallFlow: { packet = new GCCallFlow();}break;
			case MessageID.CGMemberResponse: { packet = new CGMemberResponse();}break;
			case MessageID.CGMemberFolw: { packet = new CGMemberFolw();}break;
			case MessageID.GCMemberFolw: { packet = new GCMemberFolw();}break;
			case MessageID.CGQuickTeam: { packet = new CGQuickTeam();}break;
			case MessageID.GCQuickTeam: { packet = new GCQuickTeam();}break;
			case MessageID.GCFllowQueue: { packet = new GCFllowQueue();}break;
			case MessageID.TeamPKInfo: { packet = new TeamPKInfo();}break;
			case MessageID.CGTeamPKSend: { packet = new CGTeamPKSend();}break;
			case MessageID.GCTeamPKPush: { packet = new GCTeamPKPush();}break;
			case MessageID.CGTeamPKHoldFightFlag: { packet = new CGTeamPKHoldFightFlag();}break;
			case MessageID.GCTeamPKHoldFightFlag: { packet = new GCTeamPKHoldFightFlag();}break;
			case MessageID.TowerInfo: { packet = new TowerInfo();}break;
			case MessageID.CGTowerSend: { packet = new CGTowerSend();}break;
			case MessageID.RewardItem: { packet = new RewardItem();}break;
			case MessageID.GCTowerPush: { packet = new GCTowerPush();}break;
			case MessageID.VocabularyInfo: { packet = new VocabularyInfo();}break;
			case MessageID.TreasureEquipData: { packet = new TreasureEquipData();}break;
			case MessageID.GCAllOnTreasureEquips: { packet = new GCAllOnTreasureEquips();}break;
			case MessageID.CGOnOrOffTreasureEquip: { packet = new CGOnOrOffTreasureEquip();}break;
			case MessageID.GCOnOrOffTreasureEquip: { packet = new GCOnOrOffTreasureEquip();}break;
			case MessageID.CGRandomTreasureEquip: { packet = new CGRandomTreasureEquip();}break;
			case MessageID.GCRandomTreasureEquip: { packet = new GCRandomTreasureEquip();}break;
			case MessageID.CGSaveTreasureEquip: { packet = new CGSaveTreasureEquip();}break;
			case MessageID.GCSaveTreasureEquip: { packet = new GCSaveTreasureEquip();}break;
			case MessageID.GCPushVipBack: { packet = new GCPushVipBack();}break;
			case MessageID.CGGetRewardData: { packet = new CGGetRewardData();}break;
			case MessageID.GCGetRewardDataBack: { packet = new GCGetRewardDataBack();}break;
			case MessageID.ActiveData: { packet = new ActiveData();}break;
			case MessageID.PowerMedicalData: { packet = new PowerMedicalData();}break;
			case MessageID.ActiveStruct: { packet = new ActiveStruct();}break;
			case MessageID.CGOpenActive: { packet = new CGOpenActive();}break;
			case MessageID.GCOpenActiveBack: { packet = new GCOpenActiveBack();}break;
			case MessageID.CGGetActiveReward: { packet = new CGGetActiveReward();}break;
			case MessageID.GCGetActiveRewardBack: { packet = new GCGetActiveRewardBack();}break;
			case MessageID.CGGetPowerMedical: { packet = new CGGetPowerMedical();}break;
			case MessageID.GCGetPowerMedicalBack: { packet = new GCGetPowerMedicalBack();}break;
			case MessageID.CGDeepThinkOperation: { packet = new CGDeepThinkOperation();}break;
			case MessageID.GCDeepThinkOperationBack: { packet = new GCDeepThinkOperationBack();}break;
			case MessageID.CGGetDeepThinkExp: { packet = new CGGetDeepThinkExp();}break;
			case MessageID.GCGetDeepThinkExpBack: { packet = new GCGetDeepThinkExpBack();}break;
			case MessageID.GCBroadcastSystemNotice: { packet = new GCBroadcastSystemNotice();}break;
			case MessageID.GCPushNextDayReward: { packet = new GCPushNextDayReward();}break;
			case MessageID.CGGetNextDayReward: { packet = new CGGetNextDayReward();}break;
			case MessageID.GCGetNextDayRewardBack: { packet = new GCGetNextDayRewardBack();}break;
			case MessageID.CGGetCDKReward: { packet = new CGGetCDKReward();}break;
			case MessageID.GCGetCDKRewardBack: { packet = new GCGetCDKRewardBack();}break;
			case MessageID.WelfareItem: { packet = new WelfareItem();}break;
			case MessageID.WelfareStruct: { packet = new WelfareStruct();}break;
			case MessageID.GCPushWelfare: { packet = new GCPushWelfare();}break;
			case MessageID.SprintTime: { packet = new SprintTime();}break;
			case MessageID.GCWelfare: { packet = new GCWelfare();}break;
			case MessageID.CGOpenWelfare: { packet = new CGOpenWelfare();}break;
			case MessageID.GCOpenOnLineWelfareBack: { packet = new GCOpenOnLineWelfareBack();}break;
			case MessageID.CGGetWelfareReward: { packet = new CGGetWelfareReward();}break;
			case MessageID.GCGetWelfareRewardBack: { packet = new GCGetWelfareRewardBack();}break;
			case MessageID.CGGetLevelRewardOver: { packet = new CGGetLevelRewardOver();}break;
			case MessageID.GCGetLevelRewardOverBack: { packet = new GCGetLevelRewardOverBack();}break;
			case MessageID.GCPushContinuousLandDayNum: { packet = new GCPushContinuousLandDayNum();}break;
			case MessageID.CGContinuousLandOver: { packet = new CGContinuousLandOver();}break;
			case MessageID.GCContinuousLandOverBack: { packet = new GCContinuousLandOverBack();}break;
			case MessageID.CGRequestGetReward: { packet = new CGRequestGetReward();}break;
			case MessageID.GCRequestGetRewardBack: { packet = new GCRequestGetRewardBack();}break;
			case MessageID.CGDailyShare: { packet = new CGDailyShare();}break;
			case MessageID.GCDailyShare: { packet = new GCDailyShare();}break;
			case MessageID.CGGetLoginReward: { packet = new CGGetLoginReward();}break;
			case MessageID.GCGetLoginReward: { packet = new GCGetLoginReward();}break;
			case MessageID.ShareRewardInfo: { packet = new ShareRewardInfo();}break;
			case MessageID.GCShareRewardInfo: { packet = new GCShareRewardInfo();}break;
			case MessageID.CGGetShareReward: { packet = new CGGetShareReward();}break;
			case MessageID.GCGetShareReward: { packet = new GCGetShareReward();}break;
			case MessageID.GCOnlineViewSts: { packet = new GCOnlineViewSts();}break;
			case MessageID.CGRwdOnLineGift: { packet = new CGRwdOnLineGift();}break;
			case MessageID.GCRwdOnLineGift: { packet = new GCRwdOnLineGift();}break;
			case MessageID.GCDoubleExpmsg: { packet = new GCDoubleExpmsg();}break;
			case MessageID.WildBossInfo: { packet = new WildBossInfo();}break;
			case MessageID.GCWildBossInfo: { packet = new GCWildBossInfo();}break;
			case MessageID.WorldBossPlayerInfo: { packet = new WorldBossPlayerInfo();}break;
			case MessageID.CGWorldBossInfo: { packet = new CGWorldBossInfo();}break;
			case MessageID.GCWorldBossInfo: { packet = new GCWorldBossInfo();}break;
			case MessageID.CGEnterOrExitSXSL: { packet = new CGEnterOrExitSXSL();}break;
			case MessageID.CGPickCaoYao: { packet = new CGPickCaoYao();}break;
			case MessageID.XueSeShiLianRank: { packet = new XueSeShiLianRank();}break;
			case MessageID.GCXueSeShiLian: { packet = new GCXueSeShiLian();}break;
			case MessageID.LingMaiCity: { packet = new LingMaiCity();}break;
			case MessageID.CGGetLingMaiView: { packet = new CGGetLingMaiView();}break;
			case MessageID.GCGetLingMaiView: { packet = new GCGetLingMaiView();}break;
			case MessageID.CGEnterOrExitLingMai: { packet = new CGEnterOrExitLingMai();}break;
			case MessageID.CGGetLingMaiRank: { packet = new CGGetLingMaiRank();}break;
			case MessageID.LingMaiRank: { packet = new LingMaiRank();}break;
			case MessageID.GCLingMaiRank: { packet = new GCLingMaiRank();}break;
			case MessageID.GCLingMaiMsg: { packet = new GCLingMaiMsg();}break;

		}
		if (null != packet)
		{
			packet.packetID = packetID;
		}
		//netActionTime = DateTime.Now.ToFileTimeUtc();
		return packet;
	}
   
	public byte[] ToByteArray()
	{
		//Check must init
		if (!IsInitialized())
		{
			throw InvalidProtocolBufferException.ErrorMsg("Request data have not set");
		}
		byte[] data = new byte[SerializedSize()];
		CodedOutputStream output = CodedOutputStream.CreateInstance(data);
		WriteTo(output);
		output.CheckNoSpaceLeft();
		return data;
	}
	public PacketDistributed ParseFrom(byte[] data)
	{
		CodedInputStream input = CodedInputStream.CreateInstance(data);
		PacketDistributed inst = MergeFrom(input,this);
		input.CheckLastTagWas(0);
		return inst;
	}

	public abstract int SerializedSize();
	public abstract void WriteTo(CodedOutputStream data);
	public abstract PacketDistributed MergeFrom(CodedInputStream input,PacketDistributed _Inst);
	public abstract bool IsInitialized();

	protected MessageID packetID;

	public MessageID getMessageID()
	{ 
		return packetID;
	}
}
