// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityAnswerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityAnswerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGGetQuestions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetQuestions_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendQuestions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendQuestions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAnswerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAnswerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushAnswerOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushAnswerOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInitAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInitAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSurvey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSurvey_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSurvey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSurvey_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TiKuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TiKuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCWenJuanListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCWenJuanListData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAnswrQus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAnswrQus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAnswrQus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAnswrQus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRwdAnswrQus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRwdAnswrQus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRwdAnswrQus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRwdAnswrQus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityAnswerMessage_2eproto() {
  protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityAnswerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGGetQuestions_descriptor_ = file->message_type(0);
  static const int CGGetQuestions_offsets_[1] = {
  };
  CGGetQuestions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetQuestions_descriptor_,
      CGGetQuestions::default_instance_,
      CGGetQuestions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetQuestions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetQuestions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetQuestions));
  GCSendQuestions_descriptor_ = file->message_type(1);
  static const int GCSendQuestions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendQuestions, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendQuestions, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendQuestions, isopensurvey_),
  };
  GCSendQuestions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendQuestions_descriptor_,
      GCSendQuestions::default_instance_,
      GCSendQuestions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendQuestions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendQuestions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendQuestions));
  CGAnswer_descriptor_ = file->message_type(2);
  static const int CGAnswer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswer, answer_),
  };
  CGAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnswer_descriptor_,
      CGAnswer::default_instance_,
      CGAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnswer));
  GCAnswerResult_descriptor_ = file->message_type(3);
  static const int GCAnswerResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, totalmoney_),
  };
  GCAnswerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAnswerResult_descriptor_,
      GCAnswerResult::default_instance_,
      GCAnswerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAnswerResult));
  GCPushAnswerOpen_descriptor_ = file->message_type(4);
  static const int GCPushAnswerOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAnswerOpen, isopensurvey_),
  };
  GCPushAnswerOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushAnswerOpen_descriptor_,
      GCPushAnswerOpen::default_instance_,
      GCPushAnswerOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAnswerOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAnswerOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushAnswerOpen));
  GCInitAnswer_descriptor_ = file->message_type(5);
  static const int GCInitAnswer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, totalmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, isopensurvey_),
  };
  GCInitAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInitAnswer_descriptor_,
      GCInitAnswer::default_instance_,
      GCInitAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInitAnswer));
  CGSurvey_descriptor_ = file->message_type(6);
  static const int CGSurvey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSurvey, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSurvey, answer_),
  };
  CGSurvey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSurvey_descriptor_,
      CGSurvey::default_instance_,
      CGSurvey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSurvey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSurvey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSurvey));
  GCSurvey_descriptor_ = file->message_type(7);
  static const int GCSurvey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSurvey, result_),
  };
  GCSurvey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSurvey_descriptor_,
      GCSurvey::default_instance_,
      GCSurvey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSurvey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSurvey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSurvey));
  QuestionData_descriptor_ = file->message_type(8);
  static const int QuestionData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, question_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, answer_),
  };
  QuestionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionData_descriptor_,
      QuestionData::default_instance_,
      QuestionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionData));
  TiKuData_descriptor_ = file->message_type(9);
  static const int TiKuData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, propsreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, currencyreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, tikuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, rwdsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, totalnum_),
  };
  TiKuData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TiKuData_descriptor_,
      TiKuData::default_instance_,
      TiKuData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TiKuData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TiKuData));
  GCWenJuanListData_descriptor_ = file->message_type(10);
  static const int GCWenJuanListData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWenJuanListData, datalist_),
  };
  GCWenJuanListData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCWenJuanListData_descriptor_,
      GCWenJuanListData::default_instance_,
      GCWenJuanListData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWenJuanListData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWenJuanListData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCWenJuanListData));
  CGAnswrQus_descriptor_ = file->message_type(11);
  static const int CGAnswrQus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswrQus, tikuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswrQus, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswrQus, answer_),
  };
  CGAnswrQus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAnswrQus_descriptor_,
      CGAnswrQus::default_instance_,
      CGAnswrQus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswrQus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAnswrQus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAnswrQus));
  GCAnswrQus_descriptor_ = file->message_type(12);
  static const int GCAnswrQus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswrQus, tikuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswrQus, questid_),
  };
  GCAnswrQus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAnswrQus_descriptor_,
      GCAnswrQus::default_instance_,
      GCAnswrQus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswrQus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAnswrQus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAnswrQus));
  CGRwdAnswrQus_descriptor_ = file->message_type(13);
  static const int CGRwdAnswrQus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRwdAnswrQus, tikuid_),
  };
  CGRwdAnswrQus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRwdAnswrQus_descriptor_,
      CGRwdAnswrQus::default_instance_,
      CGRwdAnswrQus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRwdAnswrQus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRwdAnswrQus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRwdAnswrQus));
  GCRwdAnswrQus_descriptor_ = file->message_type(14);
  static const int GCRwdAnswrQus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdAnswrQus, tikuid_),
  };
  GCRwdAnswrQus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRwdAnswrQus_descriptor_,
      GCRwdAnswrQus::default_instance_,
      GCRwdAnswrQus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdAnswrQus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRwdAnswrQus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRwdAnswrQus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityAnswerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetQuestions_descriptor_, &CGGetQuestions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendQuestions_descriptor_, &GCSendQuestions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnswer_descriptor_, &CGAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAnswerResult_descriptor_, &GCAnswerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushAnswerOpen_descriptor_, &GCPushAnswerOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInitAnswer_descriptor_, &GCInitAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSurvey_descriptor_, &CGSurvey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSurvey_descriptor_, &GCSurvey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionData_descriptor_, &QuestionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TiKuData_descriptor_, &TiKuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCWenJuanListData_descriptor_, &GCWenJuanListData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAnswrQus_descriptor_, &CGAnswrQus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAnswrQus_descriptor_, &GCAnswrQus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRwdAnswrQus_descriptor_, &CGRwdAnswrQus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRwdAnswrQus_descriptor_, &GCRwdAnswrQus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityAnswerMessage_2eproto() {
  delete CGGetQuestions::default_instance_;
  delete CGGetQuestions_reflection_;
  delete GCSendQuestions::default_instance_;
  delete GCSendQuestions_reflection_;
  delete CGAnswer::default_instance_;
  delete CGAnswer_reflection_;
  delete GCAnswerResult::default_instance_;
  delete GCAnswerResult_reflection_;
  delete GCPushAnswerOpen::default_instance_;
  delete GCPushAnswerOpen_reflection_;
  delete GCInitAnswer::default_instance_;
  delete GCInitAnswer_reflection_;
  delete CGSurvey::default_instance_;
  delete CGSurvey_reflection_;
  delete GCSurvey::default_instance_;
  delete GCSurvey_reflection_;
  delete QuestionData::default_instance_;
  delete QuestionData_reflection_;
  delete TiKuData::default_instance_;
  delete TiKuData_reflection_;
  delete GCWenJuanListData::default_instance_;
  delete GCWenJuanListData_reflection_;
  delete CGAnswrQus::default_instance_;
  delete CGAnswrQus_reflection_;
  delete GCAnswrQus::default_instance_;
  delete GCAnswrQus_reflection_;
  delete CGRwdAnswrQus::default_instance_;
  delete CGRwdAnswrQus_reflection_;
  delete GCRwdAnswrQus::default_instance_;
  delete GCRwdAnswrQus_reflection_;
}

void protobuf_AddDesc_ActivityAnswerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ActivityAnswerMessage.proto\"\020\n\016CGGetQu"
    "estions\"G\n\017GCSendQuestions\022\013\n\003ids\030\001 \003(\005\022"
    "\021\n\tbeginTime\030\002 \001(\003\022\024\n\014isOpenSurvey\030\003 \001(\005"
    "\"&\n\010CGAnswer\022\n\n\002id\030\001 \001(\005\022\016\n\006answer\030\002 \001(\005"
    "\"w\n\016GCAnswerResult\022\016\n\006result\030\001 \001(\005\022\r\n\005ri"
    "ght\030\002 \001(\005\022\r\n\005total\030\003 \001(\005\022\021\n\terrorCode\030\004 "
    "\001(\005\022\020\n\010totalExp\030\005 \001(\005\022\022\n\ntotalMoney\030\006 \001("
    "\005\"(\n\020GCPushAnswerOpen\022\024\n\014isOpenSurvey\030\001 "
    "\001(\005\"\210\001\n\014GCInitAnswer\022\013\n\003ids\030\001 \003(\005\022\021\n\tbeg"
    "inTime\030\002 \001(\003\022\r\n\005right\030\003 \001(\005\022\r\n\005total\030\004 \001"
    "(\005\022\020\n\010totalExp\030\005 \001(\005\022\022\n\ntotalMoney\030\006 \001(\005"
    "\022\024\n\014isOpenSurvey\030\007 \001(\005\"&\n\010CGSurvey\022\n\n\002id"
    "\030\001 \001(\005\022\016\n\006answer\030\002 \001(\t\"\032\n\010GCSurvey\022\016\n\006re"
    "sult\030\001 \001(\005\"N\n\014QuestionData\022\n\n\002id\030\001 \001(\005\022\020"
    "\n\010category\030\002 \001(\005\022\020\n\010question\030\003 \001(\t\022\016\n\006an"
    "swer\030\004 \001(\t\"\225\001\n\010TiKuData\022\034\n\005datas\030\001 \003(\0132\r"
    ".QuestionData\022\023\n\013propsReward\030\003 \001(\t\022\026\n\016cu"
    "rrencyReward\030\004 \001(\t\022\016\n\006tikuId\030\005 \001(\005\022\014\n\004na"
    "me\030\006 \001(\t\022\016\n\006rwdSts\030\007 \001(\005\022\020\n\010totalNum\030\010 \001"
    "(\005\"0\n\021GCWenJuanListData\022\033\n\010dataList\030\001 \003("
    "\0132\t.TiKuData\"=\n\nCGAnswrQus\022\016\n\006tikuId\030\001 \001"
    "(\005\022\017\n\007questId\030\002 \001(\005\022\016\n\006answer\030\003 \001(\t\"-\n\nG"
    "CAnswrQus\022\016\n\006tikuId\030\001 \001(\005\022\017\n\007questId\030\002 \001"
    "(\005\"\037\n\rCGRwdAnswrQus\022\016\n\006tikuId\030\005 \001(\005\"\037\n\rG"
    "CRwdAnswrQus\022\016\n\006tikuId\030\005 \001(\005B\031\n\027com.mile"
    ".common.message", 1015);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityAnswerMessage.proto", &protobuf_RegisterTypes);
  CGGetQuestions::default_instance_ = new CGGetQuestions();
  GCSendQuestions::default_instance_ = new GCSendQuestions();
  CGAnswer::default_instance_ = new CGAnswer();
  GCAnswerResult::default_instance_ = new GCAnswerResult();
  GCPushAnswerOpen::default_instance_ = new GCPushAnswerOpen();
  GCInitAnswer::default_instance_ = new GCInitAnswer();
  CGSurvey::default_instance_ = new CGSurvey();
  GCSurvey::default_instance_ = new GCSurvey();
  QuestionData::default_instance_ = new QuestionData();
  TiKuData::default_instance_ = new TiKuData();
  GCWenJuanListData::default_instance_ = new GCWenJuanListData();
  CGAnswrQus::default_instance_ = new CGAnswrQus();
  GCAnswrQus::default_instance_ = new GCAnswrQus();
  CGRwdAnswrQus::default_instance_ = new CGRwdAnswrQus();
  GCRwdAnswrQus::default_instance_ = new GCRwdAnswrQus();
  CGGetQuestions::default_instance_->InitAsDefaultInstance();
  GCSendQuestions::default_instance_->InitAsDefaultInstance();
  CGAnswer::default_instance_->InitAsDefaultInstance();
  GCAnswerResult::default_instance_->InitAsDefaultInstance();
  GCPushAnswerOpen::default_instance_->InitAsDefaultInstance();
  GCInitAnswer::default_instance_->InitAsDefaultInstance();
  CGSurvey::default_instance_->InitAsDefaultInstance();
  GCSurvey::default_instance_->InitAsDefaultInstance();
  QuestionData::default_instance_->InitAsDefaultInstance();
  TiKuData::default_instance_->InitAsDefaultInstance();
  GCWenJuanListData::default_instance_->InitAsDefaultInstance();
  CGAnswrQus::default_instance_->InitAsDefaultInstance();
  GCAnswrQus::default_instance_->InitAsDefaultInstance();
  CGRwdAnswrQus::default_instance_->InitAsDefaultInstance();
  GCRwdAnswrQus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityAnswerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityAnswerMessage_2eproto {
  StaticDescriptorInitializer_ActivityAnswerMessage_2eproto() {
    protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  }
} static_descriptor_initializer_ActivityAnswerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetQuestions::CGGetQuestions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetQuestions)
}

void CGGetQuestions::InitAsDefaultInstance() {
}

CGGetQuestions::CGGetQuestions(const CGGetQuestions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetQuestions)
}

void CGGetQuestions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetQuestions::~CGGetQuestions() {
  // @@protoc_insertion_point(destructor:CGGetQuestions)
  SharedDtor();
}

void CGGetQuestions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetQuestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetQuestions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetQuestions_descriptor_;
}

const CGGetQuestions& CGGetQuestions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

CGGetQuestions* CGGetQuestions::default_instance_ = NULL;

CGGetQuestions* CGGetQuestions::New() const {
  return new CGGetQuestions;
}

void CGGetQuestions::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetQuestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetQuestions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetQuestions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetQuestions)
  return false;
#undef DO_
}

void CGGetQuestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetQuestions)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetQuestions)
}

::google::protobuf::uint8* CGGetQuestions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetQuestions)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetQuestions)
  return target;
}

int CGGetQuestions::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetQuestions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetQuestions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetQuestions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetQuestions::MergeFrom(const CGGetQuestions& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetQuestions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetQuestions::CopyFrom(const CGGetQuestions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetQuestions::IsInitialized() const {

  return true;
}

void CGGetQuestions::Swap(CGGetQuestions* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetQuestions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetQuestions_descriptor_;
  metadata.reflection = CGGetQuestions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendQuestions::kIdsFieldNumber;
const int GCSendQuestions::kBeginTimeFieldNumber;
const int GCSendQuestions::kIsOpenSurveyFieldNumber;
#endif  // !_MSC_VER

GCSendQuestions::GCSendQuestions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendQuestions)
}

void GCSendQuestions::InitAsDefaultInstance() {
}

GCSendQuestions::GCSendQuestions(const GCSendQuestions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendQuestions)
}

void GCSendQuestions::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  isopensurvey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendQuestions::~GCSendQuestions() {
  // @@protoc_insertion_point(destructor:GCSendQuestions)
  SharedDtor();
}

void GCSendQuestions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendQuestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendQuestions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendQuestions_descriptor_;
}

const GCSendQuestions& GCSendQuestions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCSendQuestions* GCSendQuestions::default_instance_ = NULL;

GCSendQuestions* GCSendQuestions::New() const {
  return new GCSendQuestions;
}

void GCSendQuestions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendQuestions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begintime_, isopensurvey_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendQuestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendQuestions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (tag == 8) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (tag == 16) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isOpenSurvey;
        break;
      }

      // optional int32 isOpenSurvey = 3;
      case 3: {
        if (tag == 24) {
         parse_isOpenSurvey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopensurvey_)));
          set_has_isopensurvey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendQuestions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendQuestions)
  return false;
#undef DO_
}

void GCSendQuestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendQuestions)
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int32 isOpenSurvey = 3;
  if (has_isopensurvey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isopensurvey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendQuestions)
}

::google::protobuf::uint8* GCSendQuestions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendQuestions)
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ids(i), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int32 isOpenSurvey = 3;
  if (has_isopensurvey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isopensurvey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendQuestions)
  return target;
}

int GCSendQuestions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int32 isOpenSurvey = 3;
    if (has_isopensurvey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopensurvey());
    }

  }
  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendQuestions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendQuestions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendQuestions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendQuestions::MergeFrom(const GCSendQuestions& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_isopensurvey()) {
      set_isopensurvey(from.isopensurvey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendQuestions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendQuestions::CopyFrom(const GCSendQuestions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendQuestions::IsInitialized() const {

  return true;
}

void GCSendQuestions::Swap(GCSendQuestions* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(begintime_, other->begintime_);
    std::swap(isopensurvey_, other->isopensurvey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendQuestions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendQuestions_descriptor_;
  metadata.reflection = GCSendQuestions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnswer::kIdFieldNumber;
const int CGAnswer::kAnswerFieldNumber;
#endif  // !_MSC_VER

CGAnswer::CGAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAnswer)
}

void CGAnswer::InitAsDefaultInstance() {
}

CGAnswer::CGAnswer(const CGAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAnswer)
}

void CGAnswer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  answer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnswer::~CGAnswer() {
  // @@protoc_insertion_point(destructor:CGAnswer)
  SharedDtor();
}

void CGAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnswer_descriptor_;
}

const CGAnswer& CGAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

CGAnswer* CGAnswer::default_instance_ = NULL;

CGAnswer* CGAnswer::New() const {
  return new CGAnswer;
}

void CGAnswer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAnswer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, answer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_answer;
        break;
      }

      // optional int32 answer = 2;
      case 2: {
        if (tag == 16) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAnswer)
  return false;
#undef DO_
}

void CGAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAnswer)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 answer = 2;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAnswer)
}

::google::protobuf::uint8* CGAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAnswer)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 answer = 2;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAnswer)
  return target;
}

int CGAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 answer = 2;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnswer::MergeFrom(const CGAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnswer::CopyFrom(const CGAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnswer::IsInitialized() const {

  return true;
}

void CGAnswer::Swap(CGAnswer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnswer_descriptor_;
  metadata.reflection = CGAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAnswerResult::kResultFieldNumber;
const int GCAnswerResult::kRightFieldNumber;
const int GCAnswerResult::kTotalFieldNumber;
const int GCAnswerResult::kErrorCodeFieldNumber;
const int GCAnswerResult::kTotalExpFieldNumber;
const int GCAnswerResult::kTotalMoneyFieldNumber;
#endif  // !_MSC_VER

GCAnswerResult::GCAnswerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAnswerResult)
}

void GCAnswerResult::InitAsDefaultInstance() {
}

GCAnswerResult::GCAnswerResult(const GCAnswerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAnswerResult)
}

void GCAnswerResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  right_ = 0;
  total_ = 0;
  errorcode_ = 0;
  totalexp_ = 0;
  totalmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAnswerResult::~GCAnswerResult() {
  // @@protoc_insertion_point(destructor:GCAnswerResult)
  SharedDtor();
}

void GCAnswerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAnswerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAnswerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAnswerResult_descriptor_;
}

const GCAnswerResult& GCAnswerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCAnswerResult* GCAnswerResult::default_instance_ = NULL;

GCAnswerResult* GCAnswerResult::New() const {
  return new GCAnswerResult;
}

void GCAnswerResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAnswerResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(result_, totalmoney_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAnswerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAnswerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // optional int32 right = 2;
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional int32 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 4;
      case 4: {
        if (tag == 32) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalExp;
        break;
      }

      // optional int32 totalExp = 5;
      case 5: {
        if (tag == 40) {
         parse_totalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totalMoney;
        break;
      }

      // optional int32 totalMoney = 6;
      case 6: {
        if (tag == 48) {
         parse_totalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmoney_)));
          set_has_totalmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAnswerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAnswerResult)
  return false;
#undef DO_
}

void GCAnswerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAnswerResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  // optional int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }

  // optional int32 errorCode = 4;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errorcode(), output);
  }

  // optional int32 totalExp = 5;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalexp(), output);
  }

  // optional int32 totalMoney = 6;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAnswerResult)
}

::google::protobuf::uint8* GCAnswerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAnswerResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->right(), target);
  }

  // optional int32 total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total(), target);
  }

  // optional int32 errorCode = 4;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errorcode(), target);
  }

  // optional int32 totalExp = 5;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalexp(), target);
  }

  // optional int32 totalMoney = 6;
  if (has_totalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAnswerResult)
  return target;
}

int GCAnswerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 errorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 totalExp = 5;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexp());
    }

    // optional int32 totalMoney = 6;
    if (has_totalmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAnswerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAnswerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAnswerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAnswerResult::MergeFrom(const GCAnswerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAnswerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAnswerResult::CopyFrom(const GCAnswerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAnswerResult::IsInitialized() const {

  return true;
}

void GCAnswerResult::Swap(GCAnswerResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(right_, other->right_);
    std::swap(total_, other->total_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAnswerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAnswerResult_descriptor_;
  metadata.reflection = GCAnswerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushAnswerOpen::kIsOpenSurveyFieldNumber;
#endif  // !_MSC_VER

GCPushAnswerOpen::GCPushAnswerOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushAnswerOpen)
}

void GCPushAnswerOpen::InitAsDefaultInstance() {
}

GCPushAnswerOpen::GCPushAnswerOpen(const GCPushAnswerOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushAnswerOpen)
}

void GCPushAnswerOpen::SharedCtor() {
  _cached_size_ = 0;
  isopensurvey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushAnswerOpen::~GCPushAnswerOpen() {
  // @@protoc_insertion_point(destructor:GCPushAnswerOpen)
  SharedDtor();
}

void GCPushAnswerOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushAnswerOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushAnswerOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushAnswerOpen_descriptor_;
}

const GCPushAnswerOpen& GCPushAnswerOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCPushAnswerOpen* GCPushAnswerOpen::default_instance_ = NULL;

GCPushAnswerOpen* GCPushAnswerOpen::New() const {
  return new GCPushAnswerOpen;
}

void GCPushAnswerOpen::Clear() {
  isopensurvey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushAnswerOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushAnswerOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isOpenSurvey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopensurvey_)));
          set_has_isopensurvey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushAnswerOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushAnswerOpen)
  return false;
#undef DO_
}

void GCPushAnswerOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushAnswerOpen)
  // optional int32 isOpenSurvey = 1;
  if (has_isopensurvey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isopensurvey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushAnswerOpen)
}

::google::protobuf::uint8* GCPushAnswerOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushAnswerOpen)
  // optional int32 isOpenSurvey = 1;
  if (has_isopensurvey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isopensurvey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushAnswerOpen)
  return target;
}

int GCPushAnswerOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isOpenSurvey = 1;
    if (has_isopensurvey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopensurvey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushAnswerOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushAnswerOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushAnswerOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushAnswerOpen::MergeFrom(const GCPushAnswerOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopensurvey()) {
      set_isopensurvey(from.isopensurvey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushAnswerOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushAnswerOpen::CopyFrom(const GCPushAnswerOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushAnswerOpen::IsInitialized() const {

  return true;
}

void GCPushAnswerOpen::Swap(GCPushAnswerOpen* other) {
  if (other != this) {
    std::swap(isopensurvey_, other->isopensurvey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushAnswerOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushAnswerOpen_descriptor_;
  metadata.reflection = GCPushAnswerOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInitAnswer::kIdsFieldNumber;
const int GCInitAnswer::kBeginTimeFieldNumber;
const int GCInitAnswer::kRightFieldNumber;
const int GCInitAnswer::kTotalFieldNumber;
const int GCInitAnswer::kTotalExpFieldNumber;
const int GCInitAnswer::kTotalMoneyFieldNumber;
const int GCInitAnswer::kIsOpenSurveyFieldNumber;
#endif  // !_MSC_VER

GCInitAnswer::GCInitAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInitAnswer)
}

void GCInitAnswer::InitAsDefaultInstance() {
}

GCInitAnswer::GCInitAnswer(const GCInitAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInitAnswer)
}

void GCInitAnswer::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  right_ = 0;
  total_ = 0;
  totalexp_ = 0;
  totalmoney_ = 0;
  isopensurvey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInitAnswer::~GCInitAnswer() {
  // @@protoc_insertion_point(destructor:GCInitAnswer)
  SharedDtor();
}

void GCInitAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCInitAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInitAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInitAnswer_descriptor_;
}

const GCInitAnswer& GCInitAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCInitAnswer* GCInitAnswer::default_instance_ = NULL;

GCInitAnswer* GCInitAnswer::New() const {
  return new GCInitAnswer;
}

void GCInitAnswer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInitAnswer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(begintime_, isopensurvey_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInitAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInitAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (tag == 8) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (tag == 16) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_right;
        break;
      }

      // optional int32 right = 3;
      case 3: {
        if (tag == 24) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // optional int32 total = 4;
      case 4: {
        if (tag == 32) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalExp;
        break;
      }

      // optional int32 totalExp = 5;
      case 5: {
        if (tag == 40) {
         parse_totalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totalMoney;
        break;
      }

      // optional int32 totalMoney = 6;
      case 6: {
        if (tag == 48) {
         parse_totalMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmoney_)));
          set_has_totalmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isOpenSurvey;
        break;
      }

      // optional int32 isOpenSurvey = 7;
      case 7: {
        if (tag == 56) {
         parse_isOpenSurvey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isopensurvey_)));
          set_has_isopensurvey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInitAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInitAnswer)
  return false;
#undef DO_
}

void GCInitAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInitAnswer)
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int32 right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // optional int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // optional int32 totalExp = 5;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalexp(), output);
  }

  // optional int32 totalMoney = 6;
  if (has_totalmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalmoney(), output);
  }

  // optional int32 isOpenSurvey = 7;
  if (has_isopensurvey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isopensurvey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInitAnswer)
}

::google::protobuf::uint8* GCInitAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInitAnswer)
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ids(i), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int32 right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // optional int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // optional int32 totalExp = 5;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalexp(), target);
  }

  // optional int32 totalMoney = 6;
  if (has_totalmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalmoney(), target);
  }

  // optional int32 isOpenSurvey = 7;
  if (has_isopensurvey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isopensurvey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInitAnswer)
  return target;
}

int GCInitAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int32 right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 totalExp = 5;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexp());
    }

    // optional int32 totalMoney = 6;
    if (has_totalmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmoney());
    }

    // optional int32 isOpenSurvey = 7;
    if (has_isopensurvey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isopensurvey());
    }

  }
  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInitAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInitAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInitAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInitAnswer::MergeFrom(const GCInitAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_totalmoney()) {
      set_totalmoney(from.totalmoney());
    }
    if (from.has_isopensurvey()) {
      set_isopensurvey(from.isopensurvey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInitAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInitAnswer::CopyFrom(const GCInitAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInitAnswer::IsInitialized() const {

  return true;
}

void GCInitAnswer::Swap(GCInitAnswer* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(begintime_, other->begintime_);
    std::swap(right_, other->right_);
    std::swap(total_, other->total_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(totalmoney_, other->totalmoney_);
    std::swap(isopensurvey_, other->isopensurvey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInitAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInitAnswer_descriptor_;
  metadata.reflection = GCInitAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSurvey::kIdFieldNumber;
const int CGSurvey::kAnswerFieldNumber;
#endif  // !_MSC_VER

CGSurvey::CGSurvey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSurvey)
}

void CGSurvey::InitAsDefaultInstance() {
}

CGSurvey::CGSurvey(const CGSurvey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSurvey)
}

void CGSurvey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSurvey::~CGSurvey() {
  // @@protoc_insertion_point(destructor:CGSurvey)
  SharedDtor();
}

void CGSurvey::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void CGSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSurvey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSurvey_descriptor_;
}

const CGSurvey& CGSurvey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

CGSurvey* CGSurvey::default_instance_ = NULL;

CGSurvey* CGSurvey::New() const {
  return new CGSurvey;
}

void CGSurvey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSurvey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_answer;
        break;
      }

      // optional string answer = 2;
      case 2: {
        if (tag == 18) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSurvey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSurvey)
  return false;
#undef DO_
}

void CGSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSurvey)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string answer = 2;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSurvey)
}

::google::protobuf::uint8* CGSurvey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSurvey)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string answer = 2;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSurvey)
  return target;
}

int CGSurvey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string answer = 2;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSurvey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSurvey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSurvey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSurvey::MergeFrom(const CGSurvey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSurvey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSurvey::CopyFrom(const CGSurvey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSurvey::IsInitialized() const {

  return true;
}

void CGSurvey::Swap(CGSurvey* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSurvey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSurvey_descriptor_;
  metadata.reflection = CGSurvey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSurvey::kResultFieldNumber;
#endif  // !_MSC_VER

GCSurvey::GCSurvey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSurvey)
}

void GCSurvey::InitAsDefaultInstance() {
}

GCSurvey::GCSurvey(const GCSurvey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSurvey)
}

void GCSurvey::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSurvey::~GCSurvey() {
  // @@protoc_insertion_point(destructor:GCSurvey)
  SharedDtor();
}

void GCSurvey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSurvey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSurvey_descriptor_;
}

const GCSurvey& GCSurvey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCSurvey* GCSurvey::default_instance_ = NULL;

GCSurvey* GCSurvey::New() const {
  return new GCSurvey;
}

void GCSurvey::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSurvey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSurvey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSurvey)
  return false;
#undef DO_
}

void GCSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSurvey)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSurvey)
}

::google::protobuf::uint8* GCSurvey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSurvey)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSurvey)
  return target;
}

int GCSurvey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSurvey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSurvey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSurvey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSurvey::MergeFrom(const GCSurvey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSurvey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSurvey::CopyFrom(const GCSurvey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSurvey::IsInitialized() const {

  return true;
}

void GCSurvey::Swap(GCSurvey* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSurvey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSurvey_descriptor_;
  metadata.reflection = GCSurvey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionData::kIdFieldNumber;
const int QuestionData::kCategoryFieldNumber;
const int QuestionData::kQuestionFieldNumber;
const int QuestionData::kAnswerFieldNumber;
#endif  // !_MSC_VER

QuestionData::QuestionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuestionData)
}

void QuestionData::InitAsDefaultInstance() {
}

QuestionData::QuestionData(const QuestionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuestionData)
}

void QuestionData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  category_ = 0;
  question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionData::~QuestionData() {
  // @@protoc_insertion_point(destructor:QuestionData)
  SharedDtor();
}

void QuestionData::SharedDtor() {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void QuestionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionData_descriptor_;
}

const QuestionData& QuestionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

QuestionData* QuestionData::default_instance_ = NULL;

QuestionData* QuestionData::New() const {
  return new QuestionData;
}

void QuestionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, category_);
    if (has_question()) {
      if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        question_->clear();
      }
    }
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuestionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // optional int32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_question;
        break;
      }

      // optional string question = 3;
      case 3: {
        if (tag == 26) {
         parse_question:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "question");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_answer;
        break;
      }

      // optional string answer = 4;
      case 4: {
        if (tag == 34) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuestionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuestionData)
  return false;
#undef DO_
}

void QuestionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuestionData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category(), output);
  }

  // optional string question = 3;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->question(), output);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:QuestionData)
}

::google::protobuf::uint8* QuestionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuestionData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category(), target);
  }

  // optional string question = 3;
  if (has_question()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->question(), target);
  }

  // optional string answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuestionData)
  return target;
}

int QuestionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // optional string question = 3;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string answer = 4;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionData::MergeFrom(const QuestionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_question()) {
      set_question(from.question());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionData::CopyFrom(const QuestionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionData::IsInitialized() const {

  return true;
}

void QuestionData::Swap(QuestionData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(category_, other->category_);
    std::swap(question_, other->question_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionData_descriptor_;
  metadata.reflection = QuestionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TiKuData::kDatasFieldNumber;
const int TiKuData::kPropsRewardFieldNumber;
const int TiKuData::kCurrencyRewardFieldNumber;
const int TiKuData::kTikuIdFieldNumber;
const int TiKuData::kNameFieldNumber;
const int TiKuData::kRwdStsFieldNumber;
const int TiKuData::kTotalNumFieldNumber;
#endif  // !_MSC_VER

TiKuData::TiKuData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TiKuData)
}

void TiKuData::InitAsDefaultInstance() {
}

TiKuData::TiKuData(const TiKuData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TiKuData)
}

void TiKuData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  propsreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currencyreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tikuid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rwdsts_ = 0;
  totalnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TiKuData::~TiKuData() {
  // @@protoc_insertion_point(destructor:TiKuData)
  SharedDtor();
}

void TiKuData::SharedDtor() {
  if (propsreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete propsreward_;
  }
  if (currencyreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currencyreward_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TiKuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TiKuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TiKuData_descriptor_;
}

const TiKuData& TiKuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

TiKuData* TiKuData::default_instance_ = NULL;

TiKuData* TiKuData::New() const {
  return new TiKuData;
}

void TiKuData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TiKuData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 126) {
    ZR_(tikuid_, totalnum_);
    if (has_propsreward()) {
      if (propsreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        propsreward_->clear();
      }
    }
    if (has_currencyreward()) {
      if (currencyreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currencyreward_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TiKuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TiKuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuestionData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(26)) goto parse_propsReward;
        break;
      }

      // optional string propsReward = 3;
      case 3: {
        if (tag == 26) {
         parse_propsReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propsreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propsreward().data(), this->propsreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "propsreward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_currencyReward;
        break;
      }

      // optional string currencyReward = 4;
      case 4: {
        if (tag == 34) {
         parse_currencyReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currencyreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currencyreward().data(), this->currencyreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currencyreward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tikuId;
        break;
      }

      // optional int32 tikuId = 5;
      case 5: {
        if (tag == 40) {
         parse_tikuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tikuid_)));
          set_has_tikuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rwdSts;
        break;
      }

      // optional int32 rwdSts = 7;
      case 7: {
        if (tag == 56) {
         parse_rwdSts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rwdsts_)));
          set_has_rwdsts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalNum;
        break;
      }

      // optional int32 totalNum = 8;
      case 8: {
        if (tag == 64) {
         parse_totalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TiKuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TiKuData)
  return false;
#undef DO_
}

void TiKuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TiKuData)
  // repeated .QuestionData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // optional string propsReward = 3;
  if (has_propsreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsreward().data(), this->propsreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "propsreward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->propsreward(), output);
  }

  // optional string currencyReward = 4;
  if (has_currencyreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencyreward().data(), this->currencyreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currencyreward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->currencyreward(), output);
  }

  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tikuid(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 rwdSts = 7;
  if (has_rwdsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rwdsts(), output);
  }

  // optional int32 totalNum = 8;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totalnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TiKuData)
}

::google::protobuf::uint8* TiKuData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TiKuData)
  // repeated .QuestionData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // optional string propsReward = 3;
  if (has_propsreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propsreward().data(), this->propsreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "propsreward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->propsreward(), target);
  }

  // optional string currencyReward = 4;
  if (has_currencyreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currencyreward().data(), this->currencyreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currencyreward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currencyreward(), target);
  }

  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tikuid(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 rwdSts = 7;
  if (has_rwdsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rwdsts(), target);
  }

  // optional int32 totalNum = 8;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totalnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TiKuData)
  return target;
}

int TiKuData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string propsReward = 3;
    if (has_propsreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propsreward());
    }

    // optional string currencyReward = 4;
    if (has_currencyreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currencyreward());
    }

    // optional int32 tikuId = 5;
    if (has_tikuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tikuid());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rwdSts = 7;
    if (has_rwdsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rwdsts());
    }

    // optional int32 totalNum = 8;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }

  }
  // repeated .QuestionData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TiKuData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TiKuData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TiKuData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TiKuData::MergeFrom(const TiKuData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_propsreward()) {
      set_propsreward(from.propsreward());
    }
    if (from.has_currencyreward()) {
      set_currencyreward(from.currencyreward());
    }
    if (from.has_tikuid()) {
      set_tikuid(from.tikuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rwdsts()) {
      set_rwdsts(from.rwdsts());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TiKuData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TiKuData::CopyFrom(const TiKuData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TiKuData::IsInitialized() const {

  return true;
}

void TiKuData::Swap(TiKuData* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(propsreward_, other->propsreward_);
    std::swap(currencyreward_, other->currencyreward_);
    std::swap(tikuid_, other->tikuid_);
    std::swap(name_, other->name_);
    std::swap(rwdsts_, other->rwdsts_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TiKuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TiKuData_descriptor_;
  metadata.reflection = TiKuData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCWenJuanListData::kDataListFieldNumber;
#endif  // !_MSC_VER

GCWenJuanListData::GCWenJuanListData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCWenJuanListData)
}

void GCWenJuanListData::InitAsDefaultInstance() {
}

GCWenJuanListData::GCWenJuanListData(const GCWenJuanListData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCWenJuanListData)
}

void GCWenJuanListData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCWenJuanListData::~GCWenJuanListData() {
  // @@protoc_insertion_point(destructor:GCWenJuanListData)
  SharedDtor();
}

void GCWenJuanListData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCWenJuanListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCWenJuanListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCWenJuanListData_descriptor_;
}

const GCWenJuanListData& GCWenJuanListData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCWenJuanListData* GCWenJuanListData::default_instance_ = NULL;

GCWenJuanListData* GCWenJuanListData::New() const {
  return new GCWenJuanListData;
}

void GCWenJuanListData::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCWenJuanListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCWenJuanListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TiKuData dataList = 1;
      case 1: {
        if (tag == 10) {
         parse_dataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dataList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCWenJuanListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCWenJuanListData)
  return false;
#undef DO_
}

void GCWenJuanListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCWenJuanListData)
  // repeated .TiKuData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCWenJuanListData)
}

::google::protobuf::uint8* GCWenJuanListData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCWenJuanListData)
  // repeated .TiKuData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCWenJuanListData)
  return target;
}

int GCWenJuanListData::ByteSize() const {
  int total_size = 0;

  // repeated .TiKuData dataList = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCWenJuanListData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCWenJuanListData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCWenJuanListData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCWenJuanListData::MergeFrom(const GCWenJuanListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCWenJuanListData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCWenJuanListData::CopyFrom(const GCWenJuanListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWenJuanListData::IsInitialized() const {

  return true;
}

void GCWenJuanListData::Swap(GCWenJuanListData* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCWenJuanListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCWenJuanListData_descriptor_;
  metadata.reflection = GCWenJuanListData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAnswrQus::kTikuIdFieldNumber;
const int CGAnswrQus::kQuestIdFieldNumber;
const int CGAnswrQus::kAnswerFieldNumber;
#endif  // !_MSC_VER

CGAnswrQus::CGAnswrQus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAnswrQus)
}

void CGAnswrQus::InitAsDefaultInstance() {
}

CGAnswrQus::CGAnswrQus(const CGAnswrQus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAnswrQus)
}

void CGAnswrQus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tikuid_ = 0;
  questid_ = 0;
  answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAnswrQus::~CGAnswrQus() {
  // @@protoc_insertion_point(destructor:CGAnswrQus)
  SharedDtor();
}

void CGAnswrQus::SharedDtor() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (this != default_instance_) {
  }
}

void CGAnswrQus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAnswrQus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAnswrQus_descriptor_;
}

const CGAnswrQus& CGAnswrQus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

CGAnswrQus* CGAnswrQus::default_instance_ = NULL;

CGAnswrQus* CGAnswrQus::New() const {
  return new CGAnswrQus;
}

void CGAnswrQus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAnswrQus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(tikuid_, questid_);
    if (has_answer()) {
      if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        answer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAnswrQus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAnswrQus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tikuId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tikuid_)));
          set_has_tikuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questId;
        break;
      }

      // optional int32 questId = 2;
      case 2: {
        if (tag == 16) {
         parse_questId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_answer;
        break;
      }

      // optional string answer = 3;
      case 3: {
        if (tag == 26) {
         parse_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->answer().data(), this->answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "answer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAnswrQus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAnswrQus)
  return false;
#undef DO_
}

void CGAnswrQus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAnswrQus)
  // optional int32 tikuId = 1;
  if (has_tikuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tikuid(), output);
  }

  // optional int32 questId = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAnswrQus)
}

::google::protobuf::uint8* CGAnswrQus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAnswrQus)
  // optional int32 tikuId = 1;
  if (has_tikuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tikuid(), target);
  }

  // optional int32 questId = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questid(), target);
  }

  // optional string answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->answer().data(), this->answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "answer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAnswrQus)
  return target;
}

int CGAnswrQus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tikuId = 1;
    if (has_tikuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tikuid());
    }

    // optional int32 questId = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional string answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAnswrQus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAnswrQus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAnswrQus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAnswrQus::MergeFrom(const CGAnswrQus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tikuid()) {
      set_tikuid(from.tikuid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAnswrQus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAnswrQus::CopyFrom(const CGAnswrQus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAnswrQus::IsInitialized() const {

  return true;
}

void CGAnswrQus::Swap(CGAnswrQus* other) {
  if (other != this) {
    std::swap(tikuid_, other->tikuid_);
    std::swap(questid_, other->questid_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAnswrQus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAnswrQus_descriptor_;
  metadata.reflection = CGAnswrQus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAnswrQus::kTikuIdFieldNumber;
const int GCAnswrQus::kQuestIdFieldNumber;
#endif  // !_MSC_VER

GCAnswrQus::GCAnswrQus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAnswrQus)
}

void GCAnswrQus::InitAsDefaultInstance() {
}

GCAnswrQus::GCAnswrQus(const GCAnswrQus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAnswrQus)
}

void GCAnswrQus::SharedCtor() {
  _cached_size_ = 0;
  tikuid_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAnswrQus::~GCAnswrQus() {
  // @@protoc_insertion_point(destructor:GCAnswrQus)
  SharedDtor();
}

void GCAnswrQus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAnswrQus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAnswrQus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAnswrQus_descriptor_;
}

const GCAnswrQus& GCAnswrQus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCAnswrQus* GCAnswrQus::default_instance_ = NULL;

GCAnswrQus* GCAnswrQus::New() const {
  return new GCAnswrQus;
}

void GCAnswrQus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAnswrQus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tikuid_, questid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAnswrQus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAnswrQus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tikuId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tikuid_)));
          set_has_tikuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_questId;
        break;
      }

      // optional int32 questId = 2;
      case 2: {
        if (tag == 16) {
         parse_questId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAnswrQus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAnswrQus)
  return false;
#undef DO_
}

void GCAnswrQus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAnswrQus)
  // optional int32 tikuId = 1;
  if (has_tikuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tikuid(), output);
  }

  // optional int32 questId = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAnswrQus)
}

::google::protobuf::uint8* GCAnswrQus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAnswrQus)
  // optional int32 tikuId = 1;
  if (has_tikuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tikuid(), target);
  }

  // optional int32 questId = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAnswrQus)
  return target;
}

int GCAnswrQus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tikuId = 1;
    if (has_tikuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tikuid());
    }

    // optional int32 questId = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAnswrQus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAnswrQus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAnswrQus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAnswrQus::MergeFrom(const GCAnswrQus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tikuid()) {
      set_tikuid(from.tikuid());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAnswrQus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAnswrQus::CopyFrom(const GCAnswrQus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAnswrQus::IsInitialized() const {

  return true;
}

void GCAnswrQus::Swap(GCAnswrQus* other) {
  if (other != this) {
    std::swap(tikuid_, other->tikuid_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAnswrQus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAnswrQus_descriptor_;
  metadata.reflection = GCAnswrQus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRwdAnswrQus::kTikuIdFieldNumber;
#endif  // !_MSC_VER

CGRwdAnswrQus::CGRwdAnswrQus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRwdAnswrQus)
}

void CGRwdAnswrQus::InitAsDefaultInstance() {
}

CGRwdAnswrQus::CGRwdAnswrQus(const CGRwdAnswrQus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRwdAnswrQus)
}

void CGRwdAnswrQus::SharedCtor() {
  _cached_size_ = 0;
  tikuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRwdAnswrQus::~CGRwdAnswrQus() {
  // @@protoc_insertion_point(destructor:CGRwdAnswrQus)
  SharedDtor();
}

void CGRwdAnswrQus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRwdAnswrQus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRwdAnswrQus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRwdAnswrQus_descriptor_;
}

const CGRwdAnswrQus& CGRwdAnswrQus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

CGRwdAnswrQus* CGRwdAnswrQus::default_instance_ = NULL;

CGRwdAnswrQus* CGRwdAnswrQus::New() const {
  return new CGRwdAnswrQus;
}

void CGRwdAnswrQus::Clear() {
  tikuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRwdAnswrQus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRwdAnswrQus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tikuId = 5;
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tikuid_)));
          set_has_tikuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRwdAnswrQus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRwdAnswrQus)
  return false;
#undef DO_
}

void CGRwdAnswrQus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRwdAnswrQus)
  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tikuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRwdAnswrQus)
}

::google::protobuf::uint8* CGRwdAnswrQus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRwdAnswrQus)
  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tikuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRwdAnswrQus)
  return target;
}

int CGRwdAnswrQus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tikuId = 5;
    if (has_tikuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tikuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRwdAnswrQus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRwdAnswrQus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRwdAnswrQus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRwdAnswrQus::MergeFrom(const CGRwdAnswrQus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tikuid()) {
      set_tikuid(from.tikuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRwdAnswrQus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRwdAnswrQus::CopyFrom(const CGRwdAnswrQus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRwdAnswrQus::IsInitialized() const {

  return true;
}

void CGRwdAnswrQus::Swap(CGRwdAnswrQus* other) {
  if (other != this) {
    std::swap(tikuid_, other->tikuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRwdAnswrQus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRwdAnswrQus_descriptor_;
  metadata.reflection = CGRwdAnswrQus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRwdAnswrQus::kTikuIdFieldNumber;
#endif  // !_MSC_VER

GCRwdAnswrQus::GCRwdAnswrQus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRwdAnswrQus)
}

void GCRwdAnswrQus::InitAsDefaultInstance() {
}

GCRwdAnswrQus::GCRwdAnswrQus(const GCRwdAnswrQus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRwdAnswrQus)
}

void GCRwdAnswrQus::SharedCtor() {
  _cached_size_ = 0;
  tikuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRwdAnswrQus::~GCRwdAnswrQus() {
  // @@protoc_insertion_point(destructor:GCRwdAnswrQus)
  SharedDtor();
}

void GCRwdAnswrQus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRwdAnswrQus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRwdAnswrQus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRwdAnswrQus_descriptor_;
}

const GCRwdAnswrQus& GCRwdAnswrQus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityAnswerMessage_2eproto();
  return *default_instance_;
}

GCRwdAnswrQus* GCRwdAnswrQus::default_instance_ = NULL;

GCRwdAnswrQus* GCRwdAnswrQus::New() const {
  return new GCRwdAnswrQus;
}

void GCRwdAnswrQus::Clear() {
  tikuid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRwdAnswrQus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRwdAnswrQus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tikuId = 5;
      case 5: {
        if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tikuid_)));
          set_has_tikuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRwdAnswrQus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRwdAnswrQus)
  return false;
#undef DO_
}

void GCRwdAnswrQus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRwdAnswrQus)
  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tikuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRwdAnswrQus)
}

::google::protobuf::uint8* GCRwdAnswrQus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRwdAnswrQus)
  // optional int32 tikuId = 5;
  if (has_tikuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tikuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRwdAnswrQus)
  return target;
}

int GCRwdAnswrQus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tikuId = 5;
    if (has_tikuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tikuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRwdAnswrQus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRwdAnswrQus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRwdAnswrQus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRwdAnswrQus::MergeFrom(const GCRwdAnswrQus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tikuid()) {
      set_tikuid(from.tikuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRwdAnswrQus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRwdAnswrQus::CopyFrom(const GCRwdAnswrQus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRwdAnswrQus::IsInitialized() const {

  return true;
}

void GCRwdAnswrQus::Swap(GCRwdAnswrQus* other) {
  if (other != this) {
    std::swap(tikuid_, other->tikuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRwdAnswrQus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRwdAnswrQus_descriptor_;
  metadata.reflection = GCRwdAnswrQus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
