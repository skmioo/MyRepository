// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGActivityOprateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGActivityOprateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCActivityOprateEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCActivityOprateEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCIOSActivityOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCIOSActivityOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* EggInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EggInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HatchEggInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HatchEggInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInitChickenActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInitChickenActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEggHatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEggHatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEggHatchBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEggHatchBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInitRedBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInitRedBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetRedBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetRedBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetRedBagBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetRedBagBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearLuckyDrawHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearLuckyDrawHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNewYearLuckyDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNewYearLuckyDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCNewYearLuckyDrawBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCNewYearLuckyDrawBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNewYearLuckyDrawRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNewYearLuckyDrawRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCNewYearLuckyDrawRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCNewYearLuckyDrawRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowerBabyHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowerBabyHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetFlowerBabyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetFlowerBabyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetFlowerBabyInfoBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetFlowerBabyInfoBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGiveFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGiveFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGiveFlowerBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGiveFlowerBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowerRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowerRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGiveFlowerReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGiveFlowerReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGiveFlowerRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGiveFlowerRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFlowerBabyRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFlowerBabyRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFlowerBabyRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFlowerBabyRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeToolInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeToolInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTreeDayProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTreeDayProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTreeDayPropBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTreeDayPropBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTreeDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTreeDayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTreeDayRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTreeDayRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTreeDayRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTreeDayRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTreeDayRankBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTreeDayRankBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SweetDiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SweetDiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSweetDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSweetDice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSweetDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSweetDice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSweetDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSweetDice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetSweetDiceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetSweetDiceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuySweetDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuySweetDice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityMessage_2eproto() {
  protobuf_AddDesc_ActivityMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCActivity_descriptor_ = file->message_type(0);
  static const int GCActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivity, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivity, endtime_),
  };
  GCActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCActivity_descriptor_,
      GCActivity::default_instance_,
      GCActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCActivity));
  CGActivityOprateEvent_descriptor_ = file->message_type(1);
  static const int CGActivityOprateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityOprateEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityOprateEvent, params_),
  };
  CGActivityOprateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGActivityOprateEvent_descriptor_,
      CGActivityOprateEvent::default_instance_,
      CGActivityOprateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityOprateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityOprateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGActivityOprateEvent));
  GCActivityOprateEvent_descriptor_ = file->message_type(2);
  static const int GCActivityOprateEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityOprateEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityOprateEvent, flag_),
  };
  GCActivityOprateEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCActivityOprateEvent_descriptor_,
      GCActivityOprateEvent::default_instance_,
      GCActivityOprateEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityOprateEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityOprateEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCActivityOprateEvent));
  OpActivityInfo_descriptor_ = file->message_type(3);
  static const int OpActivityInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, actid_),
  };
  OpActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpActivityInfo_descriptor_,
      OpActivityInfo::default_instance_,
      OpActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpActivityInfo));
  CGOpActivityInfo_descriptor_ = file->message_type(4);
  static const int CGOpActivityInfo_offsets_[1] = {
  };
  CGOpActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpActivityInfo_descriptor_,
      CGOpActivityInfo::default_instance_,
      CGOpActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpActivityInfo));
  GCOpActivityInfo_descriptor_ = file->message_type(5);
  static const int GCOpActivityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpActivityInfo, activitylist_),
  };
  GCOpActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpActivityInfo_descriptor_,
      GCOpActivityInfo::default_instance_,
      GCOpActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpActivityInfo));
  GCIOSActivityOpen_descriptor_ = file->message_type(6);
  static const int GCIOSActivityOpen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIOSActivityOpen, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIOSActivityOpen, cdkopen_),
  };
  GCIOSActivityOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCIOSActivityOpen_descriptor_,
      GCIOSActivityOpen::default_instance_,
      GCIOSActivityOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIOSActivityOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIOSActivityOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCIOSActivityOpen));
  EggInfo_descriptor_ = file->message_type(7);
  static const int EggInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggInfo, hatchendtime_),
  };
  EggInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EggInfo_descriptor_,
      EggInfo::default_instance_,
      EggInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EggInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EggInfo));
  HatchEggInfo_descriptor_ = file->message_type(8);
  static const int HatchEggInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HatchEggInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HatchEggInfo, time2jintiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HatchEggInfo, needitems_),
  };
  HatchEggInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HatchEggInfo_descriptor_,
      HatchEggInfo::default_instance_,
      HatchEggInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HatchEggInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HatchEggInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HatchEggInfo));
  GCInitChickenActivity_descriptor_ = file->message_type(9);
  static const int GCInitChickenActivity_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, egginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, chickenitemarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, hatcheggtemplate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, model1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, model2_),
  };
  GCInitChickenActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInitChickenActivity_descriptor_,
      GCInitChickenActivity::default_instance_,
      GCInitChickenActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitChickenActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInitChickenActivity));
  CGEggHatch_descriptor_ = file->message_type(10);
  static const int CGEggHatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEggHatch, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEggHatch, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEggHatch, operator__),
  };
  CGEggHatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEggHatch_descriptor_,
      CGEggHatch::default_instance_,
      CGEggHatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEggHatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEggHatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEggHatch));
  GCEggHatchBack_descriptor_ = file->message_type(11);
  static const int GCEggHatchBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEggHatchBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEggHatchBack, egginfo_),
  };
  GCEggHatchBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEggHatchBack_descriptor_,
      GCEggHatchBack::default_instance_,
      GCEggHatchBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEggHatchBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEggHatchBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEggHatchBack));
  RedBagInfo_descriptor_ = file->message_type(12);
  static const int RedBagInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, expirytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, title_),
  };
  RedBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedBagInfo_descriptor_,
      RedBagInfo::default_instance_,
      RedBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedBagInfo));
  GCInitRedBagInfo_descriptor_ = file->message_type(13);
  static const int GCInitRedBagInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitRedBagInfo, redbagarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitRedBagInfo, operator__),
  };
  GCInitRedBagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInitRedBagInfo_descriptor_,
      GCInitRedBagInfo::default_instance_,
      GCInitRedBagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitRedBagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInitRedBagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInitRedBagInfo));
  CGGetRedBag_descriptor_ = file->message_type(14);
  static const int CGGetRedBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRedBag, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRedBag, operator__),
  };
  CGGetRedBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetRedBag_descriptor_,
      CGGetRedBag::default_instance_,
      CGGetRedBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRedBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRedBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetRedBag));
  GCGetRedBagBack_descriptor_ = file->message_type(15);
  static const int GCGetRedBagBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRedBagBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRedBagBack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRedBagBack, id_),
  };
  GCGetRedBagBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetRedBagBack_descriptor_,
      GCGetRedBagBack::default_instance_,
      GCGetRedBagBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRedBagBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRedBagBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetRedBagBack));
  NewYearLuckyDrawHistory_descriptor_ = file->message_type(16);
  static const int NewYearLuckyDrawHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearLuckyDrawHistory, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearLuckyDrawHistory, iteminfo_),
  };
  NewYearLuckyDrawHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearLuckyDrawHistory_descriptor_,
      NewYearLuckyDrawHistory::default_instance_,
      NewYearLuckyDrawHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearLuckyDrawHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearLuckyDrawHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearLuckyDrawHistory));
  CGNewYearLuckyDraw_descriptor_ = file->message_type(17);
  static const int CGNewYearLuckyDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNewYearLuckyDraw, operatetype_),
  };
  CGNewYearLuckyDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNewYearLuckyDraw_descriptor_,
      CGNewYearLuckyDraw::default_instance_,
      CGNewYearLuckyDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNewYearLuckyDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNewYearLuckyDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNewYearLuckyDraw));
  GCNewYearLuckyDrawBack_descriptor_ = file->message_type(18);
  static const int GCNewYearLuckyDrawBack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, needscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, curscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, allscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, drawindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, historylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, rankrewardlist_),
  };
  GCNewYearLuckyDrawBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCNewYearLuckyDrawBack_descriptor_,
      GCNewYearLuckyDrawBack::default_instance_,
      GCNewYearLuckyDrawBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCNewYearLuckyDrawBack));
  CGNewYearLuckyDrawRank_descriptor_ = file->message_type(19);
  static const int CGNewYearLuckyDrawRank_offsets_[1] = {
  };
  CGNewYearLuckyDrawRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNewYearLuckyDrawRank_descriptor_,
      CGNewYearLuckyDrawRank::default_instance_,
      CGNewYearLuckyDrawRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNewYearLuckyDrawRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNewYearLuckyDrawRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNewYearLuckyDrawRank));
  GCNewYearLuckyDrawRank_descriptor_ = file->message_type(20);
  static const int GCNewYearLuckyDrawRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawRank, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawRank, myrankinfo_),
  };
  GCNewYearLuckyDrawRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCNewYearLuckyDrawRank_descriptor_,
      GCNewYearLuckyDrawRank::default_instance_,
      GCNewYearLuckyDrawRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNewYearLuckyDrawRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCNewYearLuckyDrawRank));
  FlowerBabyHistory_descriptor_ = file->message_type(21);
  static const int FlowerBabyHistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, sendvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, flowerid_),
  };
  FlowerBabyHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowerBabyHistory_descriptor_,
      FlowerBabyHistory::default_instance_,
      FlowerBabyHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerBabyHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowerBabyHistory));
  CGGetFlowerBabyInfo_descriptor_ = file->message_type(22);
  static const int CGGetFlowerBabyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFlowerBabyInfo, playerid_),
  };
  CGGetFlowerBabyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetFlowerBabyInfo_descriptor_,
      CGGetFlowerBabyInfo::default_instance_,
      CGGetFlowerBabyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFlowerBabyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFlowerBabyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetFlowerBabyInfo));
  GCGetFlowerBabyInfoBack_descriptor_ = file->message_type(23);
  static const int GCGetFlowerBabyInfoBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFlowerBabyInfoBack, hislist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFlowerBabyInfoBack, receivescoresum_),
  };
  GCGetFlowerBabyInfoBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetFlowerBabyInfoBack_descriptor_,
      GCGetFlowerBabyInfoBack::default_instance_,
      GCGetFlowerBabyInfoBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFlowerBabyInfoBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFlowerBabyInfoBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetFlowerBabyInfoBack));
  CGGiveFlower_descriptor_ = file->message_type(24);
  static const int CGGiveFlower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlower, flowerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlower, playerid_),
  };
  CGGiveFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGiveFlower_descriptor_,
      CGGiveFlower::default_instance_,
      CGGiveFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGiveFlower));
  GCGiveFlowerBack_descriptor_ = file->message_type(25);
  static const int GCGiveFlowerBack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, givescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, receivescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, givescoresum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, receivescoresum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, giverankdaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, receiverankdaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, floweridlist_),
  };
  GCGiveFlowerBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGiveFlowerBack_descriptor_,
      GCGiveFlowerBack::default_instance_,
      GCGiveFlowerBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGiveFlowerBack));
  FlowerRewardItem_descriptor_ = file->message_type(26);
  static const int FlowerRewardItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, needscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, state_),
  };
  FlowerRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowerRewardItem_descriptor_,
      FlowerRewardItem::default_instance_,
      FlowerRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowerRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowerRewardItem));
  CGGiveFlowerReward_descriptor_ = file->message_type(27);
  static const int CGGiveFlowerReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlowerReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlowerReward, type_),
  };
  CGGiveFlowerReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGiveFlowerReward_descriptor_,
      CGGiveFlowerReward::default_instance_,
      CGGiveFlowerReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlowerReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGiveFlowerReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGiveFlowerReward));
  GCGiveFlowerRewardBack_descriptor_ = file->message_type(28);
  static const int GCGiveFlowerRewardBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerRewardBack, result_),
  };
  GCGiveFlowerRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGiveFlowerRewardBack_descriptor_,
      GCGiveFlowerRewardBack::default_instance_,
      GCGiveFlowerRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGiveFlowerRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGiveFlowerRewardBack));
  CGFlowerBabyRank_descriptor_ = file->message_type(29);
  static const int CGFlowerBabyRank_offsets_[1] = {
  };
  CGFlowerBabyRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFlowerBabyRank_descriptor_,
      CGFlowerBabyRank::default_instance_,
      CGFlowerBabyRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFlowerBabyRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFlowerBabyRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFlowerBabyRank));
  GCFlowerBabyRank_descriptor_ = file->message_type(30);
  static const int GCFlowerBabyRank_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, giveranktitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, receiveranktitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, giverankrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, receiverankrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, giveranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, receiveranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, mygiverank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, myreceiverank_),
  };
  GCFlowerBabyRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFlowerBabyRank_descriptor_,
      GCFlowerBabyRank::default_instance_,
      GCFlowerBabyRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFlowerBabyRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFlowerBabyRank));
  TreeInfo_descriptor_ = file->message_type(31);
  static const int TreeInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, needgrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, treenpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, treename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, scaling_),
  };
  TreeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeInfo_descriptor_,
      TreeInfo::default_instance_,
      TreeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeInfo));
  TreeToolInfo_descriptor_ = file->message_type(32);
  static const int TreeToolInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeToolInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeToolInfo, icon_),
  };
  TreeToolInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeToolInfo_descriptor_,
      TreeToolInfo::default_instance_,
      TreeToolInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeToolInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeToolInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeToolInfo));
  CGTreeDayProp_descriptor_ = file->message_type(33);
  static const int CGTreeDayProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayProp, propid_),
  };
  CGTreeDayProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTreeDayProp_descriptor_,
      CGTreeDayProp::default_instance_,
      CGTreeDayProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTreeDayProp));
  GCTreeDayPropBack_descriptor_ = file->message_type(34);
  static const int GCTreeDayPropBack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, mygrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, treegrowth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, treeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, treeinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, toollist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, rewardgetlist_),
  };
  GCTreeDayPropBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTreeDayPropBack_descriptor_,
      GCTreeDayPropBack::default_instance_,
      GCTreeDayPropBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayPropBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTreeDayPropBack));
  CGTreeDayReward_descriptor_ = file->message_type(35);
  static const int CGTreeDayReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayReward, id_),
  };
  CGTreeDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTreeDayReward_descriptor_,
      CGTreeDayReward::default_instance_,
      CGTreeDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTreeDayReward));
  GCTreeDayRewardBack_descriptor_ = file->message_type(36);
  static const int GCTreeDayRewardBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRewardBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRewardBack, rewardgetlist_),
  };
  GCTreeDayRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTreeDayRewardBack_descriptor_,
      GCTreeDayRewardBack::default_instance_,
      GCTreeDayRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTreeDayRewardBack));
  CGTreeDayRank_descriptor_ = file->message_type(37);
  static const int CGTreeDayRank_offsets_[1] = {
  };
  CGTreeDayRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTreeDayRank_descriptor_,
      CGTreeDayRank::default_instance_,
      CGTreeDayRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTreeDayRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTreeDayRank));
  GCTreeDayRankBack_descriptor_ = file->message_type(38);
  static const int GCTreeDayRankBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, arborrankrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, arborranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, myarborrank_),
  };
  GCTreeDayRankBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTreeDayRankBack_descriptor_,
      GCTreeDayRankBack::default_instance_,
      GCTreeDayRankBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTreeDayRankBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTreeDayRankBack));
  SweetDiceInfo_descriptor_ = file->message_type(39);
  static const int SweetDiceInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, tenneedmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, itemshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, rotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, noticetxt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, iconname_),
  };
  SweetDiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SweetDiceInfo_descriptor_,
      SweetDiceInfo::default_instance_,
      SweetDiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SweetDiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SweetDiceInfo));
  PlayerSweetDice_descriptor_ = file->message_type(40);
  static const int PlayerSweetDice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, freetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, sweetdicenum_),
  };
  PlayerSweetDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSweetDice_descriptor_,
      PlayerSweetDice::default_instance_,
      PlayerSweetDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSweetDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSweetDice));
  CGSweetDice_descriptor_ = file->message_type(41);
  static const int CGSweetDice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweetDice, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweetDice, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweetDice, freeflag_),
  };
  CGSweetDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSweetDice_descriptor_,
      CGSweetDice::default_instance_,
      CGSweetDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweetDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweetDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSweetDice));
  GCSweetDice_descriptor_ = file->message_type(42);
  static const int GCSweetDice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, sweetdicedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, playersweetdicedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, playersweetdice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, tenposlist_),
  };
  GCSweetDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSweetDice_descriptor_,
      GCSweetDice::default_instance_,
      GCSweetDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweetDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSweetDice));
  CGGetSweetDiceItem_descriptor_ = file->message_type(43);
  static const int CGGetSweetDiceItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSweetDiceItem, typeid__),
  };
  CGGetSweetDiceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetSweetDiceItem_descriptor_,
      CGGetSweetDiceItem::default_instance_,
      CGGetSweetDiceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSweetDiceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetSweetDiceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetSweetDiceItem));
  CGBuySweetDice_descriptor_ = file->message_type(44);
  static const int CGBuySweetDice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuySweetDice, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuySweetDice, buysweetdicenum_),
  };
  CGBuySweetDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuySweetDice_descriptor_,
      CGBuySweetDice::default_instance_,
      CGBuySweetDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuySweetDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuySweetDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuySweetDice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCActivity_descriptor_, &GCActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGActivityOprateEvent_descriptor_, &CGActivityOprateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCActivityOprateEvent_descriptor_, &GCActivityOprateEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpActivityInfo_descriptor_, &OpActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpActivityInfo_descriptor_, &CGOpActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpActivityInfo_descriptor_, &GCOpActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCIOSActivityOpen_descriptor_, &GCIOSActivityOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EggInfo_descriptor_, &EggInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HatchEggInfo_descriptor_, &HatchEggInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInitChickenActivity_descriptor_, &GCInitChickenActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEggHatch_descriptor_, &CGEggHatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEggHatchBack_descriptor_, &GCEggHatchBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedBagInfo_descriptor_, &RedBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInitRedBagInfo_descriptor_, &GCInitRedBagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetRedBag_descriptor_, &CGGetRedBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetRedBagBack_descriptor_, &GCGetRedBagBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearLuckyDrawHistory_descriptor_, &NewYearLuckyDrawHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNewYearLuckyDraw_descriptor_, &CGNewYearLuckyDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCNewYearLuckyDrawBack_descriptor_, &GCNewYearLuckyDrawBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNewYearLuckyDrawRank_descriptor_, &CGNewYearLuckyDrawRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCNewYearLuckyDrawRank_descriptor_, &GCNewYearLuckyDrawRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowerBabyHistory_descriptor_, &FlowerBabyHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetFlowerBabyInfo_descriptor_, &CGGetFlowerBabyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetFlowerBabyInfoBack_descriptor_, &GCGetFlowerBabyInfoBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGiveFlower_descriptor_, &CGGiveFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGiveFlowerBack_descriptor_, &GCGiveFlowerBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowerRewardItem_descriptor_, &FlowerRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGiveFlowerReward_descriptor_, &CGGiveFlowerReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGiveFlowerRewardBack_descriptor_, &GCGiveFlowerRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFlowerBabyRank_descriptor_, &CGFlowerBabyRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFlowerBabyRank_descriptor_, &GCFlowerBabyRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeInfo_descriptor_, &TreeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeToolInfo_descriptor_, &TreeToolInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTreeDayProp_descriptor_, &CGTreeDayProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTreeDayPropBack_descriptor_, &GCTreeDayPropBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTreeDayReward_descriptor_, &CGTreeDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTreeDayRewardBack_descriptor_, &GCTreeDayRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTreeDayRank_descriptor_, &CGTreeDayRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTreeDayRankBack_descriptor_, &GCTreeDayRankBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SweetDiceInfo_descriptor_, &SweetDiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSweetDice_descriptor_, &PlayerSweetDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSweetDice_descriptor_, &CGSweetDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSweetDice_descriptor_, &GCSweetDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetSweetDiceItem_descriptor_, &CGGetSweetDiceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuySweetDice_descriptor_, &CGBuySweetDice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityMessage_2eproto() {
  delete GCActivity::default_instance_;
  delete GCActivity_reflection_;
  delete CGActivityOprateEvent::default_instance_;
  delete CGActivityOprateEvent_reflection_;
  delete GCActivityOprateEvent::default_instance_;
  delete GCActivityOprateEvent_reflection_;
  delete OpActivityInfo::default_instance_;
  delete OpActivityInfo_reflection_;
  delete CGOpActivityInfo::default_instance_;
  delete CGOpActivityInfo_reflection_;
  delete GCOpActivityInfo::default_instance_;
  delete GCOpActivityInfo_reflection_;
  delete GCIOSActivityOpen::default_instance_;
  delete GCIOSActivityOpen_reflection_;
  delete EggInfo::default_instance_;
  delete EggInfo_reflection_;
  delete HatchEggInfo::default_instance_;
  delete HatchEggInfo_reflection_;
  delete GCInitChickenActivity::default_instance_;
  delete GCInitChickenActivity_reflection_;
  delete CGEggHatch::default_instance_;
  delete CGEggHatch_reflection_;
  delete GCEggHatchBack::default_instance_;
  delete GCEggHatchBack_reflection_;
  delete RedBagInfo::default_instance_;
  delete RedBagInfo_reflection_;
  delete GCInitRedBagInfo::default_instance_;
  delete GCInitRedBagInfo_reflection_;
  delete CGGetRedBag::default_instance_;
  delete CGGetRedBag_reflection_;
  delete GCGetRedBagBack::default_instance_;
  delete GCGetRedBagBack_reflection_;
  delete NewYearLuckyDrawHistory::default_instance_;
  delete NewYearLuckyDrawHistory_reflection_;
  delete CGNewYearLuckyDraw::default_instance_;
  delete CGNewYearLuckyDraw_reflection_;
  delete GCNewYearLuckyDrawBack::default_instance_;
  delete GCNewYearLuckyDrawBack_reflection_;
  delete CGNewYearLuckyDrawRank::default_instance_;
  delete CGNewYearLuckyDrawRank_reflection_;
  delete GCNewYearLuckyDrawRank::default_instance_;
  delete GCNewYearLuckyDrawRank_reflection_;
  delete FlowerBabyHistory::default_instance_;
  delete FlowerBabyHistory_reflection_;
  delete CGGetFlowerBabyInfo::default_instance_;
  delete CGGetFlowerBabyInfo_reflection_;
  delete GCGetFlowerBabyInfoBack::default_instance_;
  delete GCGetFlowerBabyInfoBack_reflection_;
  delete CGGiveFlower::default_instance_;
  delete CGGiveFlower_reflection_;
  delete GCGiveFlowerBack::default_instance_;
  delete GCGiveFlowerBack_reflection_;
  delete FlowerRewardItem::default_instance_;
  delete FlowerRewardItem_reflection_;
  delete CGGiveFlowerReward::default_instance_;
  delete CGGiveFlowerReward_reflection_;
  delete GCGiveFlowerRewardBack::default_instance_;
  delete GCGiveFlowerRewardBack_reflection_;
  delete CGFlowerBabyRank::default_instance_;
  delete CGFlowerBabyRank_reflection_;
  delete GCFlowerBabyRank::default_instance_;
  delete GCFlowerBabyRank_reflection_;
  delete TreeInfo::default_instance_;
  delete TreeInfo_reflection_;
  delete TreeToolInfo::default_instance_;
  delete TreeToolInfo_reflection_;
  delete CGTreeDayProp::default_instance_;
  delete CGTreeDayProp_reflection_;
  delete GCTreeDayPropBack::default_instance_;
  delete GCTreeDayPropBack_reflection_;
  delete CGTreeDayReward::default_instance_;
  delete CGTreeDayReward_reflection_;
  delete GCTreeDayRewardBack::default_instance_;
  delete GCTreeDayRewardBack_reflection_;
  delete CGTreeDayRank::default_instance_;
  delete CGTreeDayRank_reflection_;
  delete GCTreeDayRankBack::default_instance_;
  delete GCTreeDayRankBack_reflection_;
  delete SweetDiceInfo::default_instance_;
  delete SweetDiceInfo_reflection_;
  delete PlayerSweetDice::default_instance_;
  delete PlayerSweetDice_reflection_;
  delete CGSweetDice::default_instance_;
  delete CGSweetDice_reflection_;
  delete GCSweetDice::default_instance_;
  delete GCSweetDice_reflection_;
  delete CGGetSweetDiceItem::default_instance_;
  delete CGGetSweetDiceItem_reflection_;
  delete CGBuySweetDice::default_instance_;
  delete CGBuySweetDice_reflection_;
}

void protobuf_AddDesc_ActivityMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_ActivityRankMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ActivityMessage.proto\032\023CommonMessage.p"
    "roto\032\022InnerMessage.proto\032\031ActivityRankMe"
    "ssage.proto\"8\n\nGCActivity\022\013\n\003opt\030\001 \001(\005\022\014"
    "\n\004type\030\002 \001(\005\022\017\n\007endTime\030\003 \001(\003\"C\n\025CGActiv"
    "ityOprateEvent\022\014\n\004type\030\001 \001(\005\022\034\n\006params\030\002"
    " \003(\0132\014.EntryStrStr\"3\n\025GCActivityOprateEv"
    "ent\022\014\n\004type\030\001 \001(\005\022\014\n\004flag\030\002 \001(\005\"\203\001\n\016OpAc"
    "tivityInfo\022\r\n\005btype\030\001 \001(\005\022\r\n\005stype\030\002 \001(\005"
    "\022\014\n\004flag\030\003 \001(\005\022\022\n\nremainTime\030\004 \001(\003\022\021\n\tst"
    "artTime\030\005 \001(\003\022\017\n\007endTime\030\006 \001(\003\022\r\n\005actId\030"
    "\007 \001(\005\"\022\n\020CGOpActivityInfo\"9\n\020GCOpActivit"
    "yInfo\022%\n\014activityList\030\001 \003(\0132\017.OpActivity"
    "Info\"2\n\021GCIOSActivityOpen\022\014\n\004flag\030\001 \001(\005\022"
    "\017\n\007cdkOpen\030\002 \001(\005\"=\n\007EggInfo\022\014\n\004type\030\001 \001("
    "\005\022\016\n\006status\030\002 \001(\005\022\024\n\014hatchEndTime\030\003 \001(\003\""
    "P\n\014HatchEggInfo\022\014\n\004type\030\001 \001(\005\022\024\n\014time2Ji"
    "ntiao\030\002 \001(\t\022\034\n\tneedItems\030\003 \003(\0132\t.Iteminf"
    "o\"\324\001\n\025GCInitChickenActivity\022\022\n\nactivityI"
    "d\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\022\031\n\007eggInfo\030\003 \001("
    "\0132\010.EggInfo\022!\n\016chickenItemArr\030\004 \003(\0132\t.It"
    "eminfo\022\'\n\020hatchEggTemplate\030\005 \003(\0132\r.Hatch"
    "EggInfo\022\017\n\007actType\030\006 \001(\005\022\016\n\006model1\030\007 \001(\t"
    "\022\016\n\006model2\030\010 \001(\t\"9\n\nCGEggHatch\022\014\n\004type\030\001"
    " \001(\005\022\013\n\003num\030\002 \001(\005\022\020\n\010operator\030\003 \001(\005\";\n\016G"
    "CEggHatchBack\022\016\n\006result\030\001 \001(\005\022\031\n\007eggInfo"
    "\030\002 \001(\0132\010.EggInfo\"\213\001\n\nRedBagInfo\022\n\n\002id\030\001 "
    "\001(\005\022\016\n\006status\030\002 \001(\005\022\022\n\ncreateTime\030\003 \001(\003\022"
    "\022\n\nexpiryTime\030\004 \001(\003\022\034\n\trewardArr\030\005 \003(\0132\t"
    ".Iteminfo\022\014\n\004name\030\006 \001(\t\022\r\n\005title\030\007 \001(\t\"D"
    "\n\020GCInitRedBagInfo\022\036\n\tredBagArr\030\001 \003(\0132\013."
    "RedBagInfo\022\020\n\010operator\030\002 \001(\005\"+\n\013CGGetRed"
    "Bag\022\n\n\002id\030\001 \001(\005\022\020\n\010operator\030\002 \001(\005\"=\n\017GCG"
    "etRedBagBack\022\016\n\006result\030\001 \001(\005\022\016\n\006status\030\002"
    " \001(\005\022\n\n\002id\030\003 \003(\005\"D\n\027NewYearLuckyDrawHist"
    "ory\022\014\n\004time\030\001 \001(\003\022\033\n\010itemInfo\030\002 \001(\0132\t.It"
    "eminfo\")\n\022CGNewYearLuckyDraw\022\023\n\013operateT"
    "ype\030\001 \001(\005\"\360\001\n\026GCNewYearLuckyDrawBack\022\023\n\013"
    "operateType\030\001 \001(\005\022\014\n\004note\030\002 \001(\t\022\r\n\005items"
    "\030\003 \001(\t\022\021\n\tneedScore\030\004 \001(\005\022\020\n\010curScore\030\005 "
    "\001(\005\022\020\n\010allScore\030\006 \001(\005\022\021\n\tdrawIndex\030\007 \001(\005"
    "\022-\n\013historyList\030\010 \003(\0132\030.NewYearLuckyDraw"
    "History\022+\n\016rankRewardList\030\t \003(\0132\023.Activi"
    "tyRankReward\"\030\n\026CGNewYearLuckyDrawRank\"d"
    "\n\026GCNewYearLuckyDrawRank\022#\n\010rankList\030\001 \003"
    "(\0132\021.ActivityRankInfo\022%\n\nmyRankInfo\030\002 \001("
    "\0132\021.ActivityRankInfo\"f\n\021FlowerBabyHistor"
    "y\022\014\n\004time\030\001 \001(\003\022\016\n\006sendId\030\002 \001(\003\022\020\n\010sendN"
    "ame\030\003 \001(\t\022\017\n\007sendVip\030\004 \001(\005\022\020\n\010flowerId\030\005"
    " \001(\005\"\'\n\023CGGetFlowerBabyInfo\022\020\n\010playerID\030"
    "\001 \001(\003\"W\n\027GCGetFlowerBabyInfoBack\022#\n\007hisL"
    "ist\030\001 \003(\0132\022.FlowerBabyHistory\022\027\n\017receive"
    "ScoreSum\030\002 \001(\005\"2\n\014CGGiveFlower\022\020\n\010flower"
    "Id\030\001 \001(\005\022\020\n\010playerID\030\002 \001(\003\"\350\001\n\020GCGiveFlo"
    "werBack\022\017\n\007operate\030\001 \001(\005\022\021\n\tgiveScore\030\002 "
    "\001(\005\022\024\n\014receiveScore\030\003 \001(\005\022\024\n\014giveScoreSu"
    "m\030\004 \001(\005\022\027\n\017receiveScoreSum\030\005 \001(\005\022(\n\rgive"
    "RankDaily\030\006 \003(\0132\021.FlowerRewardItem\022+\n\020re"
    "ceiveRankDaily\030\007 \003(\0132\021.FlowerRewardItem\022"
    "\024\n\014flowerIdList\030\010 \003(\005\"P\n\020FlowerRewardIte"
    "m\022\n\n\002id\030\001 \001(\005\022\021\n\tneedScore\030\002 \001(\005\022\016\n\006rewa"
    "rd\030\003 \001(\t\022\r\n\005state\030\004 \001(\005\".\n\022CGGiveFlowerR"
    "eward\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"(\n\026GCGiv"
    "eFlowerRewardBack\022\016\n\006result\030\001 \001(\005\"\022\n\020CGF"
    "lowerBabyRank\"\267\002\n\020GCFlowerBabyRank\022\017\n\007op"
    "erate\030\001 \001(\005\022\027\n\017giveRankTitleId\030\002 \001(\005\022\032\n\022"
    "receiveRankTitleId\030\003 \001(\005\022,\n\017giveRankRewa"
    "rds\030\004 \003(\0132\023.ActivityRankReward\022/\n\022receiv"
    "eRankRewards\030\005 \003(\0132\023.ActivityRankReward\022"
    "\'\n\014giveRankList\030\006 \003(\0132\021.ActivityRankInfo"
    "\022*\n\017receiveRankList\030\007 \003(\0132\021.ActivityRank"
    "Info\022\022\n\nmyGiveRank\030\010 \001(\005\022\025\n\rmyReceiveRan"
    "k\030\t \001(\005\"\220\001\n\010TreeInfo\022\n\n\002id\030\001 \001(\005\022\022\n\nneed"
    "Growth\030\002 \001(\005\022\022\n\nrewardInfo\030\003 \001(\t\022\017\n\007tree"
    "NPC\030\004 \001(\005\022\020\n\010treeName\030\005 \001(\t\022\017\n\007sceneId\030\006"
    " \001(\005\022\013\n\003pos\030\007 \001(\t\022\017\n\007scaling\030\010 \001(\t\"(\n\014Tr"
    "eeToolInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004icon\030\002 \001(\t\"\037\n\r"
    "CGTreeDayProp\022\016\n\006propId\030\001 \001(\005\"\263\001\n\021GCTree"
    "DayPropBack\022\017\n\007operate\030\001 \001(\005\022\020\n\010myGrowth"
    "\030\002 \001(\005\022\022\n\ntreeGrowth\030\003 \001(\005\022\016\n\006treeID\030\004 \001"
    "(\005\022\037\n\014treeInfoList\030\005 \003(\0132\t.TreeInfo\022\037\n\010t"
    "oolList\030\006 \003(\0132\r.TreeToolInfo\022\025\n\rrewardGe"
    "tList\030\007 \003(\005\"\035\n\017CGTreeDayReward\022\n\n\002id\030\001 \001"
    "(\005\"<\n\023GCTreeDayRewardBack\022\016\n\006result\030\001 \001("
    "\005\022\025\n\rrewardGetList\030\002 \003(\005\"\017\n\rCGTreeDayRan"
    "k\"\222\001\n\021GCTreeDayRankBack\022\017\n\007operate\030\001 \001(\005"
    "\022-\n\020arborRankRewards\030\002 \003(\0132\023.ActivityRan"
    "kReward\022(\n\rarborRankList\030\003 \003(\0132\021.Activit"
    "yRankInfo\022\023\n\013myArborRank\030\004 \001(\005\"\315\001\n\rSweet"
    "DiceInfo\022\016\n\006typeId\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021"
    "\n\tneedmoney\030\003 \001(\t\022\024\n\014tenneedmoney\030\004 \001(\t\022"
    "\020\n\010itemshow\030\005 \001(\t\022\r\n\005model\030\006 \001(\005\022\r\n\005scal"
    "e\030\007 \001(\t\022\016\n\006rotate\030\010 \001(\t\022\020\n\010position\030\t \001("
    "\t\022\021\n\tnoticetxt\030\n \001(\t\022\020\n\010iconName\030\013 \001(\t\"Y"
    "\n\017PlayerSweetDice\022\016\n\006typeId\030\001 \001(\005\022\r\n\005pos"
    "Id\030\002 \001(\005\022\021\n\tfreeTimes\030\003 \001(\005\022\024\n\014sweetDice"
    "Num\030\004 \001(\005\"@\n\013CGSweetDice\022\016\n\006typeId\030\001 \001(\005"
    "\022\017\n\007operate\030\002 \001(\005\022\020\n\010freeFlag\030\003 \001(\005\"\263\001\n\013"
    "GCSweetDice\022\017\n\007operate\030\001 \001(\005\022%\n\rsweetDic"
    "eData\030\002 \003(\0132\016.SweetDiceInfo\022-\n\023playerSwe"
    "etDiceData\030\003 \003(\0132\020.PlayerSweetDice\022)\n\017pl"
    "ayerSweetDice\030\004 \001(\0132\020.PlayerSweetDice\022\022\n"
    "\ntenPosList\030\005 \003(\005\"$\n\022CGGetSweetDiceItem\022"
    "\016\n\006typeId\030\001 \001(\005\"9\n\016CGBuySweetDice\022\016\n\006typ"
    "eId\030\001 \001(\005\022\027\n\017buySweetDiceNum\030\002 \001(\005B\031\n\027co"
    "m.mile.common.message", 4181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityMessage.proto", &protobuf_RegisterTypes);
  GCActivity::default_instance_ = new GCActivity();
  CGActivityOprateEvent::default_instance_ = new CGActivityOprateEvent();
  GCActivityOprateEvent::default_instance_ = new GCActivityOprateEvent();
  OpActivityInfo::default_instance_ = new OpActivityInfo();
  CGOpActivityInfo::default_instance_ = new CGOpActivityInfo();
  GCOpActivityInfo::default_instance_ = new GCOpActivityInfo();
  GCIOSActivityOpen::default_instance_ = new GCIOSActivityOpen();
  EggInfo::default_instance_ = new EggInfo();
  HatchEggInfo::default_instance_ = new HatchEggInfo();
  GCInitChickenActivity::default_instance_ = new GCInitChickenActivity();
  CGEggHatch::default_instance_ = new CGEggHatch();
  GCEggHatchBack::default_instance_ = new GCEggHatchBack();
  RedBagInfo::default_instance_ = new RedBagInfo();
  GCInitRedBagInfo::default_instance_ = new GCInitRedBagInfo();
  CGGetRedBag::default_instance_ = new CGGetRedBag();
  GCGetRedBagBack::default_instance_ = new GCGetRedBagBack();
  NewYearLuckyDrawHistory::default_instance_ = new NewYearLuckyDrawHistory();
  CGNewYearLuckyDraw::default_instance_ = new CGNewYearLuckyDraw();
  GCNewYearLuckyDrawBack::default_instance_ = new GCNewYearLuckyDrawBack();
  CGNewYearLuckyDrawRank::default_instance_ = new CGNewYearLuckyDrawRank();
  GCNewYearLuckyDrawRank::default_instance_ = new GCNewYearLuckyDrawRank();
  FlowerBabyHistory::default_instance_ = new FlowerBabyHistory();
  CGGetFlowerBabyInfo::default_instance_ = new CGGetFlowerBabyInfo();
  GCGetFlowerBabyInfoBack::default_instance_ = new GCGetFlowerBabyInfoBack();
  CGGiveFlower::default_instance_ = new CGGiveFlower();
  GCGiveFlowerBack::default_instance_ = new GCGiveFlowerBack();
  FlowerRewardItem::default_instance_ = new FlowerRewardItem();
  CGGiveFlowerReward::default_instance_ = new CGGiveFlowerReward();
  GCGiveFlowerRewardBack::default_instance_ = new GCGiveFlowerRewardBack();
  CGFlowerBabyRank::default_instance_ = new CGFlowerBabyRank();
  GCFlowerBabyRank::default_instance_ = new GCFlowerBabyRank();
  TreeInfo::default_instance_ = new TreeInfo();
  TreeToolInfo::default_instance_ = new TreeToolInfo();
  CGTreeDayProp::default_instance_ = new CGTreeDayProp();
  GCTreeDayPropBack::default_instance_ = new GCTreeDayPropBack();
  CGTreeDayReward::default_instance_ = new CGTreeDayReward();
  GCTreeDayRewardBack::default_instance_ = new GCTreeDayRewardBack();
  CGTreeDayRank::default_instance_ = new CGTreeDayRank();
  GCTreeDayRankBack::default_instance_ = new GCTreeDayRankBack();
  SweetDiceInfo::default_instance_ = new SweetDiceInfo();
  PlayerSweetDice::default_instance_ = new PlayerSweetDice();
  CGSweetDice::default_instance_ = new CGSweetDice();
  GCSweetDice::default_instance_ = new GCSweetDice();
  CGGetSweetDiceItem::default_instance_ = new CGGetSweetDiceItem();
  CGBuySweetDice::default_instance_ = new CGBuySweetDice();
  GCActivity::default_instance_->InitAsDefaultInstance();
  CGActivityOprateEvent::default_instance_->InitAsDefaultInstance();
  GCActivityOprateEvent::default_instance_->InitAsDefaultInstance();
  OpActivityInfo::default_instance_->InitAsDefaultInstance();
  CGOpActivityInfo::default_instance_->InitAsDefaultInstance();
  GCOpActivityInfo::default_instance_->InitAsDefaultInstance();
  GCIOSActivityOpen::default_instance_->InitAsDefaultInstance();
  EggInfo::default_instance_->InitAsDefaultInstance();
  HatchEggInfo::default_instance_->InitAsDefaultInstance();
  GCInitChickenActivity::default_instance_->InitAsDefaultInstance();
  CGEggHatch::default_instance_->InitAsDefaultInstance();
  GCEggHatchBack::default_instance_->InitAsDefaultInstance();
  RedBagInfo::default_instance_->InitAsDefaultInstance();
  GCInitRedBagInfo::default_instance_->InitAsDefaultInstance();
  CGGetRedBag::default_instance_->InitAsDefaultInstance();
  GCGetRedBagBack::default_instance_->InitAsDefaultInstance();
  NewYearLuckyDrawHistory::default_instance_->InitAsDefaultInstance();
  CGNewYearLuckyDraw::default_instance_->InitAsDefaultInstance();
  GCNewYearLuckyDrawBack::default_instance_->InitAsDefaultInstance();
  CGNewYearLuckyDrawRank::default_instance_->InitAsDefaultInstance();
  GCNewYearLuckyDrawRank::default_instance_->InitAsDefaultInstance();
  FlowerBabyHistory::default_instance_->InitAsDefaultInstance();
  CGGetFlowerBabyInfo::default_instance_->InitAsDefaultInstance();
  GCGetFlowerBabyInfoBack::default_instance_->InitAsDefaultInstance();
  CGGiveFlower::default_instance_->InitAsDefaultInstance();
  GCGiveFlowerBack::default_instance_->InitAsDefaultInstance();
  FlowerRewardItem::default_instance_->InitAsDefaultInstance();
  CGGiveFlowerReward::default_instance_->InitAsDefaultInstance();
  GCGiveFlowerRewardBack::default_instance_->InitAsDefaultInstance();
  CGFlowerBabyRank::default_instance_->InitAsDefaultInstance();
  GCFlowerBabyRank::default_instance_->InitAsDefaultInstance();
  TreeInfo::default_instance_->InitAsDefaultInstance();
  TreeToolInfo::default_instance_->InitAsDefaultInstance();
  CGTreeDayProp::default_instance_->InitAsDefaultInstance();
  GCTreeDayPropBack::default_instance_->InitAsDefaultInstance();
  CGTreeDayReward::default_instance_->InitAsDefaultInstance();
  GCTreeDayRewardBack::default_instance_->InitAsDefaultInstance();
  CGTreeDayRank::default_instance_->InitAsDefaultInstance();
  GCTreeDayRankBack::default_instance_->InitAsDefaultInstance();
  SweetDiceInfo::default_instance_->InitAsDefaultInstance();
  PlayerSweetDice::default_instance_->InitAsDefaultInstance();
  CGSweetDice::default_instance_->InitAsDefaultInstance();
  GCSweetDice::default_instance_->InitAsDefaultInstance();
  CGGetSweetDiceItem::default_instance_->InitAsDefaultInstance();
  CGBuySweetDice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityMessage_2eproto {
  StaticDescriptorInitializer_ActivityMessage_2eproto() {
    protobuf_AddDesc_ActivityMessage_2eproto();
  }
} static_descriptor_initializer_ActivityMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCActivity::kOptFieldNumber;
const int GCActivity::kTypeFieldNumber;
const int GCActivity::kEndTimeFieldNumber;
#endif  // !_MSC_VER

GCActivity::GCActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCActivity)
}

void GCActivity::InitAsDefaultInstance() {
}

GCActivity::GCActivity(const GCActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCActivity)
}

void GCActivity::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  type_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCActivity::~GCActivity() {
  // @@protoc_insertion_point(destructor:GCActivity)
  SharedDtor();
}

void GCActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCActivity_descriptor_;
}

const GCActivity& GCActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCActivity* GCActivity::default_instance_ = NULL;

GCActivity* GCActivity::New() const {
  return new GCActivity;
}

void GCActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(opt_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (tag == 24) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCActivity)
  return false;
#undef DO_
}

void GCActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCActivity)
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCActivity)
}

::google::protobuf::uint8* GCActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCActivity)
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCActivity)
  return target;
}

int GCActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCActivity::MergeFrom(const GCActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCActivity::CopyFrom(const GCActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCActivity::IsInitialized() const {

  return true;
}

void GCActivity::Swap(GCActivity* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCActivity_descriptor_;
  metadata.reflection = GCActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGActivityOprateEvent::kTypeFieldNumber;
const int CGActivityOprateEvent::kParamsFieldNumber;
#endif  // !_MSC_VER

CGActivityOprateEvent::CGActivityOprateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGActivityOprateEvent)
}

void CGActivityOprateEvent::InitAsDefaultInstance() {
}

CGActivityOprateEvent::CGActivityOprateEvent(const CGActivityOprateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGActivityOprateEvent)
}

void CGActivityOprateEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGActivityOprateEvent::~CGActivityOprateEvent() {
  // @@protoc_insertion_point(destructor:CGActivityOprateEvent)
  SharedDtor();
}

void CGActivityOprateEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGActivityOprateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGActivityOprateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGActivityOprateEvent_descriptor_;
}

const CGActivityOprateEvent& CGActivityOprateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGActivityOprateEvent* CGActivityOprateEvent::default_instance_ = NULL;

CGActivityOprateEvent* CGActivityOprateEvent::New() const {
  return new CGActivityOprateEvent;
}

void CGActivityOprateEvent::Clear() {
  type_ = 0;
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGActivityOprateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGActivityOprateEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // repeated .EntryStrStr params = 2;
      case 2: {
        if (tag == 18) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGActivityOprateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGActivityOprateEvent)
  return false;
#undef DO_
}

void CGActivityOprateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGActivityOprateEvent)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .EntryStrStr params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGActivityOprateEvent)
}

::google::protobuf::uint8* CGActivityOprateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGActivityOprateEvent)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .EntryStrStr params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGActivityOprateEvent)
  return target;
}

int CGActivityOprateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .EntryStrStr params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGActivityOprateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGActivityOprateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGActivityOprateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGActivityOprateEvent::MergeFrom(const CGActivityOprateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGActivityOprateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGActivityOprateEvent::CopyFrom(const CGActivityOprateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGActivityOprateEvent::IsInitialized() const {

  return true;
}

void CGActivityOprateEvent::Swap(CGActivityOprateEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGActivityOprateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGActivityOprateEvent_descriptor_;
  metadata.reflection = CGActivityOprateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCActivityOprateEvent::kTypeFieldNumber;
const int GCActivityOprateEvent::kFlagFieldNumber;
#endif  // !_MSC_VER

GCActivityOprateEvent::GCActivityOprateEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCActivityOprateEvent)
}

void GCActivityOprateEvent::InitAsDefaultInstance() {
}

GCActivityOprateEvent::GCActivityOprateEvent(const GCActivityOprateEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCActivityOprateEvent)
}

void GCActivityOprateEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCActivityOprateEvent::~GCActivityOprateEvent() {
  // @@protoc_insertion_point(destructor:GCActivityOprateEvent)
  SharedDtor();
}

void GCActivityOprateEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCActivityOprateEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCActivityOprateEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCActivityOprateEvent_descriptor_;
}

const GCActivityOprateEvent& GCActivityOprateEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCActivityOprateEvent* GCActivityOprateEvent::default_instance_ = NULL;

GCActivityOprateEvent* GCActivityOprateEvent::New() const {
  return new GCActivityOprateEvent;
}

void GCActivityOprateEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCActivityOprateEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCActivityOprateEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCActivityOprateEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCActivityOprateEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCActivityOprateEvent)
  return false;
#undef DO_
}

void GCActivityOprateEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCActivityOprateEvent)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCActivityOprateEvent)
}

::google::protobuf::uint8* GCActivityOprateEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCActivityOprateEvent)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCActivityOprateEvent)
  return target;
}

int GCActivityOprateEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCActivityOprateEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCActivityOprateEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCActivityOprateEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCActivityOprateEvent::MergeFrom(const GCActivityOprateEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCActivityOprateEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCActivityOprateEvent::CopyFrom(const GCActivityOprateEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCActivityOprateEvent::IsInitialized() const {

  return true;
}

void GCActivityOprateEvent::Swap(GCActivityOprateEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCActivityOprateEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCActivityOprateEvent_descriptor_;
  metadata.reflection = GCActivityOprateEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpActivityInfo::kBtypeFieldNumber;
const int OpActivityInfo::kStypeFieldNumber;
const int OpActivityInfo::kFlagFieldNumber;
const int OpActivityInfo::kRemainTimeFieldNumber;
const int OpActivityInfo::kStartTimeFieldNumber;
const int OpActivityInfo::kEndTimeFieldNumber;
const int OpActivityInfo::kActIdFieldNumber;
#endif  // !_MSC_VER

OpActivityInfo::OpActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OpActivityInfo)
}

void OpActivityInfo::InitAsDefaultInstance() {
}

OpActivityInfo::OpActivityInfo(const OpActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OpActivityInfo)
}

void OpActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  btype_ = 0;
  stype_ = 0;
  flag_ = 0;
  remaintime_ = GOOGLE_LONGLONG(0);
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  actid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpActivityInfo::~OpActivityInfo() {
  // @@protoc_insertion_point(destructor:OpActivityInfo)
  SharedDtor();
}

void OpActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpActivityInfo_descriptor_;
}

const OpActivityInfo& OpActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

OpActivityInfo* OpActivityInfo::default_instance_ = NULL;

OpActivityInfo* OpActivityInfo::New() const {
  return new OpActivityInfo;
}

void OpActivityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpActivityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(btype_, endtime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OpActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 btype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stype;
        break;
      }

      // optional int32 stype = 2;
      case 2: {
        if (tag == 16) {
         parse_stype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stype_)));
          set_has_stype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remainTime;
        break;
      }

      // optional int64 remainTime = 4;
      case 4: {
        if (tag == 32) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 5;
      case 5: {
        if (tag == 40) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 6;
      case 6: {
        if (tag == 48) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_actId;
        break;
      }

      // optional int32 actId = 7;
      case 7: {
        if (tag == 56) {
         parse_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OpActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OpActivityInfo)
  return false;
#undef DO_
}

void OpActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OpActivityInfo)
  // optional int32 btype = 1;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->btype(), output);
  }

  // optional int32 stype = 2;
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stype(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  // optional int64 remainTime = 4;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remaintime(), output);
  }

  // optional int64 startTime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->starttime(), output);
  }

  // optional int64 endTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  // optional int32 actId = 7;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->actid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OpActivityInfo)
}

::google::protobuf::uint8* OpActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OpActivityInfo)
  // optional int32 btype = 1;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->btype(), target);
  }

  // optional int32 stype = 2;
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stype(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  // optional int64 remainTime = 4;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->remaintime(), target);
  }

  // optional int64 startTime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->starttime(), target);
  }

  // optional int64 endTime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }

  // optional int32 actId = 7;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->actid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OpActivityInfo)
  return target;
}

int OpActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 btype = 1;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btype());
    }

    // optional int32 stype = 2;
    if (has_stype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stype());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 remainTime = 4;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remaintime());
    }

    // optional int64 startTime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 actId = 7;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpActivityInfo::MergeFrom(const OpActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpActivityInfo::CopyFrom(const OpActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpActivityInfo::IsInitialized() const {

  return true;
}

void OpActivityInfo::Swap(OpActivityInfo* other) {
  if (other != this) {
    std::swap(btype_, other->btype_);
    std::swap(stype_, other->stype_);
    std::swap(flag_, other->flag_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(actid_, other->actid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpActivityInfo_descriptor_;
  metadata.reflection = OpActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGOpActivityInfo::CGOpActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpActivityInfo)
}

void CGOpActivityInfo::InitAsDefaultInstance() {
}

CGOpActivityInfo::CGOpActivityInfo(const CGOpActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpActivityInfo)
}

void CGOpActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpActivityInfo::~CGOpActivityInfo() {
  // @@protoc_insertion_point(destructor:CGOpActivityInfo)
  SharedDtor();
}

void CGOpActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpActivityInfo_descriptor_;
}

const CGOpActivityInfo& CGOpActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGOpActivityInfo* CGOpActivityInfo::default_instance_ = NULL;

CGOpActivityInfo* CGOpActivityInfo::New() const {
  return new CGOpActivityInfo;
}

void CGOpActivityInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpActivityInfo)
  return false;
#undef DO_
}

void CGOpActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpActivityInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpActivityInfo)
}

::google::protobuf::uint8* CGOpActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpActivityInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpActivityInfo)
  return target;
}

int CGOpActivityInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpActivityInfo::MergeFrom(const CGOpActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpActivityInfo::CopyFrom(const CGOpActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpActivityInfo::IsInitialized() const {

  return true;
}

void CGOpActivityInfo::Swap(CGOpActivityInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpActivityInfo_descriptor_;
  metadata.reflection = CGOpActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpActivityInfo::kActivityListFieldNumber;
#endif  // !_MSC_VER

GCOpActivityInfo::GCOpActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpActivityInfo)
}

void GCOpActivityInfo::InitAsDefaultInstance() {
}

GCOpActivityInfo::GCOpActivityInfo(const GCOpActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpActivityInfo)
}

void GCOpActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpActivityInfo::~GCOpActivityInfo() {
  // @@protoc_insertion_point(destructor:GCOpActivityInfo)
  SharedDtor();
}

void GCOpActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpActivityInfo_descriptor_;
}

const GCOpActivityInfo& GCOpActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCOpActivityInfo* GCOpActivityInfo::default_instance_ = NULL;

GCOpActivityInfo* GCOpActivityInfo::New() const {
  return new GCOpActivityInfo;
}

void GCOpActivityInfo::Clear() {
  activitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OpActivityInfo activityList = 1;
      case 1: {
        if (tag == 10) {
         parse_activityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activityList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpActivityInfo)
  return false;
#undef DO_
}

void GCOpActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpActivityInfo)
  // repeated .OpActivityInfo activityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpActivityInfo)
}

::google::protobuf::uint8* GCOpActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpActivityInfo)
  // repeated .OpActivityInfo activityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpActivityInfo)
  return target;
}

int GCOpActivityInfo::ByteSize() const {
  int total_size = 0;

  // repeated .OpActivityInfo activityList = 1;
  total_size += 1 * this->activitylist_size();
  for (int i = 0; i < this->activitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpActivityInfo::MergeFrom(const GCOpActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylist_.MergeFrom(from.activitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpActivityInfo::CopyFrom(const GCOpActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpActivityInfo::IsInitialized() const {

  return true;
}

void GCOpActivityInfo::Swap(GCOpActivityInfo* other) {
  if (other != this) {
    activitylist_.Swap(&other->activitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpActivityInfo_descriptor_;
  metadata.reflection = GCOpActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCIOSActivityOpen::kFlagFieldNumber;
const int GCIOSActivityOpen::kCdkOpenFieldNumber;
#endif  // !_MSC_VER

GCIOSActivityOpen::GCIOSActivityOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCIOSActivityOpen)
}

void GCIOSActivityOpen::InitAsDefaultInstance() {
}

GCIOSActivityOpen::GCIOSActivityOpen(const GCIOSActivityOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCIOSActivityOpen)
}

void GCIOSActivityOpen::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  cdkopen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCIOSActivityOpen::~GCIOSActivityOpen() {
  // @@protoc_insertion_point(destructor:GCIOSActivityOpen)
  SharedDtor();
}

void GCIOSActivityOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCIOSActivityOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCIOSActivityOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCIOSActivityOpen_descriptor_;
}

const GCIOSActivityOpen& GCIOSActivityOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCIOSActivityOpen* GCIOSActivityOpen::default_instance_ = NULL;

GCIOSActivityOpen* GCIOSActivityOpen::New() const {
  return new GCIOSActivityOpen;
}

void GCIOSActivityOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCIOSActivityOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, cdkopen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCIOSActivityOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCIOSActivityOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cdkOpen;
        break;
      }

      // optional int32 cdkOpen = 2;
      case 2: {
        if (tag == 16) {
         parse_cdkOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdkopen_)));
          set_has_cdkopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCIOSActivityOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCIOSActivityOpen)
  return false;
#undef DO_
}

void GCIOSActivityOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCIOSActivityOpen)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 cdkOpen = 2;
  if (has_cdkopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdkopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCIOSActivityOpen)
}

::google::protobuf::uint8* GCIOSActivityOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCIOSActivityOpen)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 cdkOpen = 2;
  if (has_cdkopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdkopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCIOSActivityOpen)
  return target;
}

int GCIOSActivityOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 cdkOpen = 2;
    if (has_cdkopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdkopen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCIOSActivityOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCIOSActivityOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCIOSActivityOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCIOSActivityOpen::MergeFrom(const GCIOSActivityOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_cdkopen()) {
      set_cdkopen(from.cdkopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCIOSActivityOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCIOSActivityOpen::CopyFrom(const GCIOSActivityOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCIOSActivityOpen::IsInitialized() const {

  return true;
}

void GCIOSActivityOpen::Swap(GCIOSActivityOpen* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(cdkopen_, other->cdkopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCIOSActivityOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCIOSActivityOpen_descriptor_;
  metadata.reflection = GCIOSActivityOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EggInfo::kTypeFieldNumber;
const int EggInfo::kStatusFieldNumber;
const int EggInfo::kHatchEndTimeFieldNumber;
#endif  // !_MSC_VER

EggInfo::EggInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EggInfo)
}

void EggInfo::InitAsDefaultInstance() {
}

EggInfo::EggInfo(const EggInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EggInfo)
}

void EggInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  hatchendtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EggInfo::~EggInfo() {
  // @@protoc_insertion_point(destructor:EggInfo)
  SharedDtor();
}

void EggInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EggInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EggInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EggInfo_descriptor_;
}

const EggInfo& EggInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

EggInfo* EggInfo::default_instance_ = NULL;

EggInfo* EggInfo::New() const {
  return new EggInfo;
}

void EggInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EggInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, hatchendtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EggInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EggInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hatchEndTime;
        break;
      }

      // optional int64 hatchEndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_hatchEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hatchendtime_)));
          set_has_hatchendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EggInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EggInfo)
  return false;
#undef DO_
}

void EggInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EggInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int64 hatchEndTime = 3;
  if (has_hatchendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hatchendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EggInfo)
}

::google::protobuf::uint8* EggInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EggInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int64 hatchEndTime = 3;
  if (has_hatchendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hatchendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EggInfo)
  return target;
}

int EggInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 hatchEndTime = 3;
    if (has_hatchendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hatchendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EggInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EggInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EggInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EggInfo::MergeFrom(const EggInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_hatchendtime()) {
      set_hatchendtime(from.hatchendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EggInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EggInfo::CopyFrom(const EggInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EggInfo::IsInitialized() const {

  return true;
}

void EggInfo::Swap(EggInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(hatchendtime_, other->hatchendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EggInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EggInfo_descriptor_;
  metadata.reflection = EggInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HatchEggInfo::kTypeFieldNumber;
const int HatchEggInfo::kTime2JintiaoFieldNumber;
const int HatchEggInfo::kNeedItemsFieldNumber;
#endif  // !_MSC_VER

HatchEggInfo::HatchEggInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HatchEggInfo)
}

void HatchEggInfo::InitAsDefaultInstance() {
}

HatchEggInfo::HatchEggInfo(const HatchEggInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HatchEggInfo)
}

void HatchEggInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  time2jintiao_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HatchEggInfo::~HatchEggInfo() {
  // @@protoc_insertion_point(destructor:HatchEggInfo)
  SharedDtor();
}

void HatchEggInfo::SharedDtor() {
  if (time2jintiao_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time2jintiao_;
  }
  if (this != default_instance_) {
  }
}

void HatchEggInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HatchEggInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HatchEggInfo_descriptor_;
}

const HatchEggInfo& HatchEggInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

HatchEggInfo* HatchEggInfo::default_instance_ = NULL;

HatchEggInfo* HatchEggInfo::New() const {
  return new HatchEggInfo;
}

void HatchEggInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 0;
    if (has_time2jintiao()) {
      if (time2jintiao_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time2jintiao_->clear();
      }
    }
  }
  needitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HatchEggInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HatchEggInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time2Jintiao;
        break;
      }

      // optional string time2Jintiao = 2;
      case 2: {
        if (tag == 18) {
         parse_time2Jintiao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time2jintiao()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time2jintiao().data(), this->time2jintiao().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time2jintiao");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_needItems;
        break;
      }

      // repeated .Iteminfo needItems = 3;
      case 3: {
        if (tag == 26) {
         parse_needItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_needItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HatchEggInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HatchEggInfo)
  return false;
#undef DO_
}

void HatchEggInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HatchEggInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string time2Jintiao = 2;
  if (has_time2jintiao()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time2jintiao().data(), this->time2jintiao().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time2jintiao");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time2jintiao(), output);
  }

  // repeated .Iteminfo needItems = 3;
  for (int i = 0; i < this->needitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->needitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HatchEggInfo)
}

::google::protobuf::uint8* HatchEggInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HatchEggInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string time2Jintiao = 2;
  if (has_time2jintiao()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time2jintiao().data(), this->time2jintiao().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time2jintiao");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time2jintiao(), target);
  }

  // repeated .Iteminfo needItems = 3;
  for (int i = 0; i < this->needitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->needitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HatchEggInfo)
  return target;
}

int HatchEggInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string time2Jintiao = 2;
    if (has_time2jintiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time2jintiao());
    }

  }
  // repeated .Iteminfo needItems = 3;
  total_size += 1 * this->needitems_size();
  for (int i = 0; i < this->needitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HatchEggInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HatchEggInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HatchEggInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HatchEggInfo::MergeFrom(const HatchEggInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  needitems_.MergeFrom(from.needitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time2jintiao()) {
      set_time2jintiao(from.time2jintiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HatchEggInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HatchEggInfo::CopyFrom(const HatchEggInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HatchEggInfo::IsInitialized() const {

  return true;
}

void HatchEggInfo::Swap(HatchEggInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time2jintiao_, other->time2jintiao_);
    needitems_.Swap(&other->needitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HatchEggInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HatchEggInfo_descriptor_;
  metadata.reflection = HatchEggInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInitChickenActivity::kActivityIdFieldNumber;
const int GCInitChickenActivity::kContentFieldNumber;
const int GCInitChickenActivity::kEggInfoFieldNumber;
const int GCInitChickenActivity::kChickenItemArrFieldNumber;
const int GCInitChickenActivity::kHatchEggTemplateFieldNumber;
const int GCInitChickenActivity::kActTypeFieldNumber;
const int GCInitChickenActivity::kModel1FieldNumber;
const int GCInitChickenActivity::kModel2FieldNumber;
#endif  // !_MSC_VER

GCInitChickenActivity::GCInitChickenActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInitChickenActivity)
}

void GCInitChickenActivity::InitAsDefaultInstance() {
  egginfo_ = const_cast< ::EggInfo*>(&::EggInfo::default_instance());
}

GCInitChickenActivity::GCInitChickenActivity(const GCInitChickenActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInitChickenActivity)
}

void GCInitChickenActivity::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  activityid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  egginfo_ = NULL;
  acttype_ = 0;
  model1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInitChickenActivity::~GCInitChickenActivity() {
  // @@protoc_insertion_point(destructor:GCInitChickenActivity)
  SharedDtor();
}

void GCInitChickenActivity::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (model1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model1_;
  }
  if (model2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model2_;
  }
  if (this != default_instance_) {
    delete egginfo_;
  }
}

void GCInitChickenActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInitChickenActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInitChickenActivity_descriptor_;
}

const GCInitChickenActivity& GCInitChickenActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCInitChickenActivity* GCInitChickenActivity::default_instance_ = NULL;

GCInitChickenActivity* GCInitChickenActivity::New() const {
  return new GCInitChickenActivity;
}

void GCInitChickenActivity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInitChickenActivity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(activityid_, acttype_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_egginfo()) {
      if (egginfo_ != NULL) egginfo_->::EggInfo::Clear();
    }
    if (has_model1()) {
      if (model1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model1_->clear();
      }
    }
    if (has_model2()) {
      if (model2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chickenitemarr_.Clear();
  hatcheggtemplate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInitChickenActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInitChickenActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_eggInfo;
        break;
      }

      // optional .EggInfo eggInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_eggInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chickenItemArr;
        break;
      }

      // repeated .Iteminfo chickenItemArr = 4;
      case 4: {
        if (tag == 34) {
         parse_chickenItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chickenitemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chickenItemArr;
        if (input->ExpectTag(42)) goto parse_hatchEggTemplate;
        break;
      }

      // repeated .HatchEggInfo hatchEggTemplate = 5;
      case 5: {
        if (tag == 42) {
         parse_hatchEggTemplate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatcheggtemplate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hatchEggTemplate;
        if (input->ExpectTag(48)) goto parse_actType;
        break;
      }

      // optional int32 actType = 6;
      case 6: {
        if (tag == 48) {
         parse_actType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_model1;
        break;
      }

      // optional string model1 = 7;
      case 7: {
        if (tag == 58) {
         parse_model1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model1().data(), this->model1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_model2;
        break;
      }

      // optional string model2 = 8;
      case 8: {
        if (tag == 66) {
         parse_model2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model2().data(), this->model2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInitChickenActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInitChickenActivity)
  return false;
#undef DO_
}

void GCInitChickenActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInitChickenActivity)
  // optional int32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional .EggInfo eggInfo = 3;
  if (has_egginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->egginfo(), output);
  }

  // repeated .Iteminfo chickenItemArr = 4;
  for (int i = 0; i < this->chickenitemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chickenitemarr(i), output);
  }

  // repeated .HatchEggInfo hatchEggTemplate = 5;
  for (int i = 0; i < this->hatcheggtemplate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hatcheggtemplate(i), output);
  }

  // optional int32 actType = 6;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->acttype(), output);
  }

  // optional string model1 = 7;
  if (has_model1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model1().data(), this->model1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->model1(), output);
  }

  // optional string model2 = 8;
  if (has_model2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model2().data(), this->model2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->model2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInitChickenActivity)
}

::google::protobuf::uint8* GCInitChickenActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInitChickenActivity)
  // optional int32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .EggInfo eggInfo = 3;
  if (has_egginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->egginfo(), target);
  }

  // repeated .Iteminfo chickenItemArr = 4;
  for (int i = 0; i < this->chickenitemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chickenitemarr(i), target);
  }

  // repeated .HatchEggInfo hatchEggTemplate = 5;
  for (int i = 0; i < this->hatcheggtemplate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hatcheggtemplate(i), target);
  }

  // optional int32 actType = 6;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->acttype(), target);
  }

  // optional string model1 = 7;
  if (has_model1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model1().data(), this->model1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->model1(), target);
  }

  // optional string model2 = 8;
  if (has_model2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model2().data(), this->model2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->model2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInitChickenActivity)
  return target;
}

int GCInitChickenActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .EggInfo eggInfo = 3;
    if (has_egginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->egginfo());
    }

    // optional int32 actType = 6;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acttype());
    }

    // optional string model1 = 7;
    if (has_model1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model1());
    }

    // optional string model2 = 8;
    if (has_model2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model2());
    }

  }
  // repeated .Iteminfo chickenItemArr = 4;
  total_size += 1 * this->chickenitemarr_size();
  for (int i = 0; i < this->chickenitemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chickenitemarr(i));
  }

  // repeated .HatchEggInfo hatchEggTemplate = 5;
  total_size += 1 * this->hatcheggtemplate_size();
  for (int i = 0; i < this->hatcheggtemplate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatcheggtemplate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInitChickenActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInitChickenActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInitChickenActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInitChickenActivity::MergeFrom(const GCInitChickenActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  chickenitemarr_.MergeFrom(from.chickenitemarr_);
  hatcheggtemplate_.MergeFrom(from.hatcheggtemplate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_egginfo()) {
      mutable_egginfo()->::EggInfo::MergeFrom(from.egginfo());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_model1()) {
      set_model1(from.model1());
    }
    if (from.has_model2()) {
      set_model2(from.model2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInitChickenActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInitChickenActivity::CopyFrom(const GCInitChickenActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInitChickenActivity::IsInitialized() const {

  return true;
}

void GCInitChickenActivity::Swap(GCInitChickenActivity* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(content_, other->content_);
    std::swap(egginfo_, other->egginfo_);
    chickenitemarr_.Swap(&other->chickenitemarr_);
    hatcheggtemplate_.Swap(&other->hatcheggtemplate_);
    std::swap(acttype_, other->acttype_);
    std::swap(model1_, other->model1_);
    std::swap(model2_, other->model2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInitChickenActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInitChickenActivity_descriptor_;
  metadata.reflection = GCInitChickenActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEggHatch::kTypeFieldNumber;
const int CGEggHatch::kNumFieldNumber;
const int CGEggHatch::kOperatorFieldNumber;
#endif  // !_MSC_VER

CGEggHatch::CGEggHatch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEggHatch)
}

void CGEggHatch::InitAsDefaultInstance() {
}

CGEggHatch::CGEggHatch(const CGEggHatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEggHatch)
}

void CGEggHatch::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  operator__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEggHatch::~CGEggHatch() {
  // @@protoc_insertion_point(destructor:CGEggHatch)
  SharedDtor();
}

void CGEggHatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEggHatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEggHatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEggHatch_descriptor_;
}

const CGEggHatch& CGEggHatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGEggHatch* CGEggHatch::default_instance_ = NULL;

CGEggHatch* CGEggHatch::New() const {
  return new CGEggHatch;
}

void CGEggHatch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGEggHatch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, operator__);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEggHatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEggHatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operator;
        break;
      }

      // optional int32 operator = 3;
      case 3: {
        if (tag == 24) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEggHatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEggHatch)
  return false;
#undef DO_
}

void CGEggHatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEggHatch)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 operator = 3;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operator_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEggHatch)
}

::google::protobuf::uint8* CGEggHatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEggHatch)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 operator = 3;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operator_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEggHatch)
  return target;
}

int CGEggHatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 operator = 3;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEggHatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEggHatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEggHatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEggHatch::MergeFrom(const CGEggHatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEggHatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEggHatch::CopyFrom(const CGEggHatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEggHatch::IsInitialized() const {

  return true;
}

void CGEggHatch::Swap(CGEggHatch* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(operator__, other->operator__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEggHatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEggHatch_descriptor_;
  metadata.reflection = CGEggHatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEggHatchBack::kResultFieldNumber;
const int GCEggHatchBack::kEggInfoFieldNumber;
#endif  // !_MSC_VER

GCEggHatchBack::GCEggHatchBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEggHatchBack)
}

void GCEggHatchBack::InitAsDefaultInstance() {
  egginfo_ = const_cast< ::EggInfo*>(&::EggInfo::default_instance());
}

GCEggHatchBack::GCEggHatchBack(const GCEggHatchBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEggHatchBack)
}

void GCEggHatchBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  egginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEggHatchBack::~GCEggHatchBack() {
  // @@protoc_insertion_point(destructor:GCEggHatchBack)
  SharedDtor();
}

void GCEggHatchBack::SharedDtor() {
  if (this != default_instance_) {
    delete egginfo_;
  }
}

void GCEggHatchBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEggHatchBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEggHatchBack_descriptor_;
}

const GCEggHatchBack& GCEggHatchBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCEggHatchBack* GCEggHatchBack::default_instance_ = NULL;

GCEggHatchBack* GCEggHatchBack::New() const {
  return new GCEggHatchBack;
}

void GCEggHatchBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_egginfo()) {
      if (egginfo_ != NULL) egginfo_->::EggInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEggHatchBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEggHatchBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eggInfo;
        break;
      }

      // optional .EggInfo eggInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_eggInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_egginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEggHatchBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEggHatchBack)
  return false;
#undef DO_
}

void GCEggHatchBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEggHatchBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EggInfo eggInfo = 2;
  if (has_egginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->egginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEggHatchBack)
}

::google::protobuf::uint8* GCEggHatchBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEggHatchBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EggInfo eggInfo = 2;
  if (has_egginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->egginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEggHatchBack)
  return target;
}

int GCEggHatchBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EggInfo eggInfo = 2;
    if (has_egginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->egginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEggHatchBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEggHatchBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEggHatchBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEggHatchBack::MergeFrom(const GCEggHatchBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_egginfo()) {
      mutable_egginfo()->::EggInfo::MergeFrom(from.egginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEggHatchBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEggHatchBack::CopyFrom(const GCEggHatchBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEggHatchBack::IsInitialized() const {

  return true;
}

void GCEggHatchBack::Swap(GCEggHatchBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(egginfo_, other->egginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEggHatchBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEggHatchBack_descriptor_;
  metadata.reflection = GCEggHatchBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedBagInfo::kIdFieldNumber;
const int RedBagInfo::kStatusFieldNumber;
const int RedBagInfo::kCreateTimeFieldNumber;
const int RedBagInfo::kExpiryTimeFieldNumber;
const int RedBagInfo::kRewardArrFieldNumber;
const int RedBagInfo::kNameFieldNumber;
const int RedBagInfo::kTitleFieldNumber;
#endif  // !_MSC_VER

RedBagInfo::RedBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RedBagInfo)
}

void RedBagInfo::InitAsDefaultInstance() {
}

RedBagInfo::RedBagInfo(const RedBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RedBagInfo)
}

void RedBagInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  status_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  expirytime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedBagInfo::~RedBagInfo() {
  // @@protoc_insertion_point(destructor:RedBagInfo)
  SharedDtor();
}

void RedBagInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void RedBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedBagInfo_descriptor_;
}

const RedBagInfo& RedBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

RedBagInfo* RedBagInfo::default_instance_ = NULL;

RedBagInfo* RedBagInfo::New() const {
  return new RedBagInfo;
}

void RedBagInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RedBagInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(id_, expirytime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RedBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 3;
      case 3: {
        if (tag == 24) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiryTime;
        break;
      }

      // optional int64 expiryTime = 4;
      case 4: {
        if (tag == 32) {
         parse_expiryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expirytime_)));
          set_has_expirytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewardArr;
        break;
      }

      // repeated .Iteminfo rewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_rewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewardArr;
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_title;
        break;
      }

      // optional string title = 7;
      case 7: {
        if (tag == 58) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RedBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RedBagInfo)
  return false;
#undef DO_
}

void RedBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RedBagInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int64 createTime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->createtime(), output);
  }

  // optional int64 expiryTime = 4;
  if (has_expirytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expirytime(), output);
  }

  // repeated .Iteminfo rewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RedBagInfo)
}

::google::protobuf::uint8* RedBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedBagInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int64 createTime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->createtime(), target);
  }

  // optional int64 expiryTime = 4;
  if (has_expirytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expirytime(), target);
  }

  // repeated .Iteminfo rewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional string title = 7;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedBagInfo)
  return target;
}

int RedBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 createTime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int64 expiryTime = 4;
    if (has_expirytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expirytime());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string title = 7;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .Iteminfo rewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedBagInfo::MergeFrom(const RedBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_expirytime()) {
      set_expirytime(from.expirytime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedBagInfo::CopyFrom(const RedBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedBagInfo::IsInitialized() const {

  return true;
}

void RedBagInfo::Swap(RedBagInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(createtime_, other->createtime_);
    std::swap(expirytime_, other->expirytime_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(name_, other->name_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedBagInfo_descriptor_;
  metadata.reflection = RedBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInitRedBagInfo::kRedBagArrFieldNumber;
const int GCInitRedBagInfo::kOperatorFieldNumber;
#endif  // !_MSC_VER

GCInitRedBagInfo::GCInitRedBagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInitRedBagInfo)
}

void GCInitRedBagInfo::InitAsDefaultInstance() {
}

GCInitRedBagInfo::GCInitRedBagInfo(const GCInitRedBagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInitRedBagInfo)
}

void GCInitRedBagInfo::SharedCtor() {
  _cached_size_ = 0;
  operator__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInitRedBagInfo::~GCInitRedBagInfo() {
  // @@protoc_insertion_point(destructor:GCInitRedBagInfo)
  SharedDtor();
}

void GCInitRedBagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCInitRedBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInitRedBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInitRedBagInfo_descriptor_;
}

const GCInitRedBagInfo& GCInitRedBagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCInitRedBagInfo* GCInitRedBagInfo::default_instance_ = NULL;

GCInitRedBagInfo* GCInitRedBagInfo::New() const {
  return new GCInitRedBagInfo;
}

void GCInitRedBagInfo::Clear() {
  operator__ = 0;
  redbagarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInitRedBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInitRedBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RedBagInfo redBagArr = 1;
      case 1: {
        if (tag == 10) {
         parse_redBagArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_redbagarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_redBagArr;
        if (input->ExpectTag(16)) goto parse_operator;
        break;
      }

      // optional int32 operator = 2;
      case 2: {
        if (tag == 16) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInitRedBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInitRedBagInfo)
  return false;
#undef DO_
}

void GCInitRedBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInitRedBagInfo)
  // repeated .RedBagInfo redBagArr = 1;
  for (int i = 0; i < this->redbagarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->redbagarr(i), output);
  }

  // optional int32 operator = 2;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operator_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInitRedBagInfo)
}

::google::protobuf::uint8* GCInitRedBagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInitRedBagInfo)
  // repeated .RedBagInfo redBagArr = 1;
  for (int i = 0; i < this->redbagarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->redbagarr(i), target);
  }

  // optional int32 operator = 2;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operator_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInitRedBagInfo)
  return target;
}

int GCInitRedBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 operator = 2;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

  }
  // repeated .RedBagInfo redBagArr = 1;
  total_size += 1 * this->redbagarr_size();
  for (int i = 0; i < this->redbagarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redbagarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInitRedBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInitRedBagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInitRedBagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInitRedBagInfo::MergeFrom(const GCInitRedBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  redbagarr_.MergeFrom(from.redbagarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInitRedBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInitRedBagInfo::CopyFrom(const GCInitRedBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInitRedBagInfo::IsInitialized() const {

  return true;
}

void GCInitRedBagInfo::Swap(GCInitRedBagInfo* other) {
  if (other != this) {
    redbagarr_.Swap(&other->redbagarr_);
    std::swap(operator__, other->operator__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInitRedBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInitRedBagInfo_descriptor_;
  metadata.reflection = GCInitRedBagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetRedBag::kIdFieldNumber;
const int CGGetRedBag::kOperatorFieldNumber;
#endif  // !_MSC_VER

CGGetRedBag::CGGetRedBag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetRedBag)
}

void CGGetRedBag::InitAsDefaultInstance() {
}

CGGetRedBag::CGGetRedBag(const CGGetRedBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetRedBag)
}

void CGGetRedBag::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  operator__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetRedBag::~CGGetRedBag() {
  // @@protoc_insertion_point(destructor:CGGetRedBag)
  SharedDtor();
}

void CGGetRedBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetRedBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetRedBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetRedBag_descriptor_;
}

const CGGetRedBag& CGGetRedBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGGetRedBag* CGGetRedBag::default_instance_ = NULL;

CGGetRedBag* CGGetRedBag::New() const {
  return new CGGetRedBag;
}

void CGGetRedBag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetRedBag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, operator__);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetRedBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetRedBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operator;
        break;
      }

      // optional int32 operator = 2;
      case 2: {
        if (tag == 16) {
         parse_operator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operator__)));
          set_has_operator_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetRedBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetRedBag)
  return false;
#undef DO_
}

void CGGetRedBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetRedBag)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 operator = 2;
  if (has_operator_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operator_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetRedBag)
}

::google::protobuf::uint8* CGGetRedBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetRedBag)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 operator = 2;
  if (has_operator_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operator_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetRedBag)
  return target;
}

int CGGetRedBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 operator = 2;
    if (has_operator_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operator_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetRedBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetRedBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetRedBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetRedBag::MergeFrom(const CGGetRedBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_operator_()) {
      set_operator_(from.operator_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetRedBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetRedBag::CopyFrom(const CGGetRedBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetRedBag::IsInitialized() const {

  return true;
}

void CGGetRedBag::Swap(CGGetRedBag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(operator__, other->operator__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetRedBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetRedBag_descriptor_;
  metadata.reflection = CGGetRedBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetRedBagBack::kResultFieldNumber;
const int GCGetRedBagBack::kStatusFieldNumber;
const int GCGetRedBagBack::kIdFieldNumber;
#endif  // !_MSC_VER

GCGetRedBagBack::GCGetRedBagBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetRedBagBack)
}

void GCGetRedBagBack::InitAsDefaultInstance() {
}

GCGetRedBagBack::GCGetRedBagBack(const GCGetRedBagBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetRedBagBack)
}

void GCGetRedBagBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetRedBagBack::~GCGetRedBagBack() {
  // @@protoc_insertion_point(destructor:GCGetRedBagBack)
  SharedDtor();
}

void GCGetRedBagBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetRedBagBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetRedBagBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetRedBagBack_descriptor_;
}

const GCGetRedBagBack& GCGetRedBagBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCGetRedBagBack* GCGetRedBagBack::default_instance_ = NULL;

GCGetRedBagBack* GCGetRedBagBack::New() const {
  return new GCGetRedBagBack;
}

void GCGetRedBagBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetRedBagBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetRedBagBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetRedBagBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetRedBagBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetRedBagBack)
  return false;
#undef DO_
}

void GCGetRedBagBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetRedBagBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated int32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetRedBagBack)
}

::google::protobuf::uint8* GCGetRedBagBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetRedBagBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated int32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetRedBagBack)
  return target;
}

int GCGetRedBagBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated int32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetRedBagBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetRedBagBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetRedBagBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetRedBagBack::MergeFrom(const GCGetRedBagBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetRedBagBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetRedBagBack::CopyFrom(const GCGetRedBagBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetRedBagBack::IsInitialized() const {

  return true;
}

void GCGetRedBagBack::Swap(GCGetRedBagBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(status_, other->status_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetRedBagBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetRedBagBack_descriptor_;
  metadata.reflection = GCGetRedBagBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearLuckyDrawHistory::kTimeFieldNumber;
const int NewYearLuckyDrawHistory::kItemInfoFieldNumber;
#endif  // !_MSC_VER

NewYearLuckyDrawHistory::NewYearLuckyDrawHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewYearLuckyDrawHistory)
}

void NewYearLuckyDrawHistory::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Iteminfo*>(&::Iteminfo::default_instance());
}

NewYearLuckyDrawHistory::NewYearLuckyDrawHistory(const NewYearLuckyDrawHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewYearLuckyDrawHistory)
}

void NewYearLuckyDrawHistory::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearLuckyDrawHistory::~NewYearLuckyDrawHistory() {
  // @@protoc_insertion_point(destructor:NewYearLuckyDrawHistory)
  SharedDtor();
}

void NewYearLuckyDrawHistory::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void NewYearLuckyDrawHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearLuckyDrawHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearLuckyDrawHistory_descriptor_;
}

const NewYearLuckyDrawHistory& NewYearLuckyDrawHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

NewYearLuckyDrawHistory* NewYearLuckyDrawHistory::default_instance_ = NULL;

NewYearLuckyDrawHistory* NewYearLuckyDrawHistory::New() const {
  return new NewYearLuckyDrawHistory;
}

void NewYearLuckyDrawHistory::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Iteminfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearLuckyDrawHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewYearLuckyDrawHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // optional .Iteminfo itemInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewYearLuckyDrawHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewYearLuckyDrawHistory)
  return false;
#undef DO_
}

void NewYearLuckyDrawHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewYearLuckyDrawHistory)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional .Iteminfo itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewYearLuckyDrawHistory)
}

::google::protobuf::uint8* NewYearLuckyDrawHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewYearLuckyDrawHistory)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional .Iteminfo itemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewYearLuckyDrawHistory)
  return target;
}

int NewYearLuckyDrawHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional .Iteminfo itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearLuckyDrawHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearLuckyDrawHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearLuckyDrawHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearLuckyDrawHistory::MergeFrom(const NewYearLuckyDrawHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Iteminfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearLuckyDrawHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearLuckyDrawHistory::CopyFrom(const NewYearLuckyDrawHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearLuckyDrawHistory::IsInitialized() const {

  return true;
}

void NewYearLuckyDrawHistory::Swap(NewYearLuckyDrawHistory* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearLuckyDrawHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearLuckyDrawHistory_descriptor_;
  metadata.reflection = NewYearLuckyDrawHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNewYearLuckyDraw::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

CGNewYearLuckyDraw::CGNewYearLuckyDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGNewYearLuckyDraw)
}

void CGNewYearLuckyDraw::InitAsDefaultInstance() {
}

CGNewYearLuckyDraw::CGNewYearLuckyDraw(const CGNewYearLuckyDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGNewYearLuckyDraw)
}

void CGNewYearLuckyDraw::SharedCtor() {
  _cached_size_ = 0;
  operatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNewYearLuckyDraw::~CGNewYearLuckyDraw() {
  // @@protoc_insertion_point(destructor:CGNewYearLuckyDraw)
  SharedDtor();
}

void CGNewYearLuckyDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNewYearLuckyDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNewYearLuckyDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNewYearLuckyDraw_descriptor_;
}

const CGNewYearLuckyDraw& CGNewYearLuckyDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGNewYearLuckyDraw* CGNewYearLuckyDraw::default_instance_ = NULL;

CGNewYearLuckyDraw* CGNewYearLuckyDraw::New() const {
  return new CGNewYearLuckyDraw;
}

void CGNewYearLuckyDraw::Clear() {
  operatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNewYearLuckyDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGNewYearLuckyDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGNewYearLuckyDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGNewYearLuckyDraw)
  return false;
#undef DO_
}

void CGNewYearLuckyDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGNewYearLuckyDraw)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGNewYearLuckyDraw)
}

::google::protobuf::uint8* CGNewYearLuckyDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGNewYearLuckyDraw)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGNewYearLuckyDraw)
  return target;
}

int CGNewYearLuckyDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNewYearLuckyDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNewYearLuckyDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNewYearLuckyDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNewYearLuckyDraw::MergeFrom(const CGNewYearLuckyDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNewYearLuckyDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNewYearLuckyDraw::CopyFrom(const CGNewYearLuckyDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNewYearLuckyDraw::IsInitialized() const {

  return true;
}

void CGNewYearLuckyDraw::Swap(CGNewYearLuckyDraw* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNewYearLuckyDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNewYearLuckyDraw_descriptor_;
  metadata.reflection = CGNewYearLuckyDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCNewYearLuckyDrawBack::kOperateTypeFieldNumber;
const int GCNewYearLuckyDrawBack::kNoteFieldNumber;
const int GCNewYearLuckyDrawBack::kItemsFieldNumber;
const int GCNewYearLuckyDrawBack::kNeedScoreFieldNumber;
const int GCNewYearLuckyDrawBack::kCurScoreFieldNumber;
const int GCNewYearLuckyDrawBack::kAllScoreFieldNumber;
const int GCNewYearLuckyDrawBack::kDrawIndexFieldNumber;
const int GCNewYearLuckyDrawBack::kHistoryListFieldNumber;
const int GCNewYearLuckyDrawBack::kRankRewardListFieldNumber;
#endif  // !_MSC_VER

GCNewYearLuckyDrawBack::GCNewYearLuckyDrawBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCNewYearLuckyDrawBack)
}

void GCNewYearLuckyDrawBack::InitAsDefaultInstance() {
}

GCNewYearLuckyDrawBack::GCNewYearLuckyDrawBack(const GCNewYearLuckyDrawBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCNewYearLuckyDrawBack)
}

void GCNewYearLuckyDrawBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operatetype_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needscore_ = 0;
  curscore_ = 0;
  allscore_ = 0;
  drawindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCNewYearLuckyDrawBack::~GCNewYearLuckyDrawBack() {
  // @@protoc_insertion_point(destructor:GCNewYearLuckyDrawBack)
  SharedDtor();
}

void GCNewYearLuckyDrawBack::SharedDtor() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (items_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete items_;
  }
  if (this != default_instance_) {
  }
}

void GCNewYearLuckyDrawBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCNewYearLuckyDrawBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCNewYearLuckyDrawBack_descriptor_;
}

const GCNewYearLuckyDrawBack& GCNewYearLuckyDrawBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCNewYearLuckyDrawBack* GCNewYearLuckyDrawBack::default_instance_ = NULL;

GCNewYearLuckyDrawBack* GCNewYearLuckyDrawBack::New() const {
  return new GCNewYearLuckyDrawBack;
}

void GCNewYearLuckyDrawBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCNewYearLuckyDrawBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(operatetype_, needscore_);
    ZR_(curscore_, allscore_);
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
    if (has_items()) {
      if (items_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        items_->clear();
      }
    }
    drawindex_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  historylist_.Clear();
  rankrewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCNewYearLuckyDrawBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCNewYearLuckyDrawBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_note;
        break;
      }

      // optional string note = 2;
      case 2: {
        if (tag == 18) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // optional string items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items().data(), this->items().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "items");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_needScore;
        break;
      }

      // optional int32 needScore = 4;
      case 4: {
        if (tag == 32) {
         parse_needScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needscore_)));
          set_has_needscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curScore;
        break;
      }

      // optional int32 curScore = 5;
      case 5: {
        if (tag == 40) {
         parse_curScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curscore_)));
          set_has_curscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allScore;
        break;
      }

      // optional int32 allScore = 6;
      case 6: {
        if (tag == 48) {
         parse_allScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allscore_)));
          set_has_allscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_drawIndex;
        break;
      }

      // optional int32 drawIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_drawIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawindex_)));
          set_has_drawindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_historyList;
        break;
      }

      // repeated .NewYearLuckyDrawHistory historyList = 8;
      case 8: {
        if (tag == 66) {
         parse_historyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_historyList;
        if (input->ExpectTag(74)) goto parse_rankRewardList;
        break;
      }

      // repeated .ActivityRankReward rankRewardList = 9;
      case 9: {
        if (tag == 74) {
         parse_rankRewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankrewardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rankRewardList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCNewYearLuckyDrawBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCNewYearLuckyDrawBack)
  return false;
#undef DO_
}

void GCNewYearLuckyDrawBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCNewYearLuckyDrawBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->note(), output);
  }

  // optional string items = 3;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "items");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->items(), output);
  }

  // optional int32 needScore = 4;
  if (has_needscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needscore(), output);
  }

  // optional int32 curScore = 5;
  if (has_curscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curscore(), output);
  }

  // optional int32 allScore = 6;
  if (has_allscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allscore(), output);
  }

  // optional int32 drawIndex = 7;
  if (has_drawindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->drawindex(), output);
  }

  // repeated .NewYearLuckyDrawHistory historyList = 8;
  for (int i = 0; i < this->historylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->historylist(i), output);
  }

  // repeated .ActivityRankReward rankRewardList = 9;
  for (int i = 0; i < this->rankrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rankrewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCNewYearLuckyDrawBack)
}

::google::protobuf::uint8* GCNewYearLuckyDrawBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCNewYearLuckyDrawBack)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional string note = 2;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->note(), target);
  }

  // optional string items = 3;
  if (has_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items().data(), this->items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "items");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->items(), target);
  }

  // optional int32 needScore = 4;
  if (has_needscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needscore(), target);
  }

  // optional int32 curScore = 5;
  if (has_curscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curscore(), target);
  }

  // optional int32 allScore = 6;
  if (has_allscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allscore(), target);
  }

  // optional int32 drawIndex = 7;
  if (has_drawindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->drawindex(), target);
  }

  // repeated .NewYearLuckyDrawHistory historyList = 8;
  for (int i = 0; i < this->historylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->historylist(i), target);
  }

  // repeated .ActivityRankReward rankRewardList = 9;
  for (int i = 0; i < this->rankrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rankrewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCNewYearLuckyDrawBack)
  return target;
}

int GCNewYearLuckyDrawBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional string note = 2;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional string items = 3;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items());
    }

    // optional int32 needScore = 4;
    if (has_needscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needscore());
    }

    // optional int32 curScore = 5;
    if (has_curscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curscore());
    }

    // optional int32 allScore = 6;
    if (has_allscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allscore());
    }

    // optional int32 drawIndex = 7;
    if (has_drawindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawindex());
    }

  }
  // repeated .NewYearLuckyDrawHistory historyList = 8;
  total_size += 1 * this->historylist_size();
  for (int i = 0; i < this->historylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historylist(i));
  }

  // repeated .ActivityRankReward rankRewardList = 9;
  total_size += 1 * this->rankrewardlist_size();
  for (int i = 0; i < this->rankrewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankrewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCNewYearLuckyDrawBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCNewYearLuckyDrawBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCNewYearLuckyDrawBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCNewYearLuckyDrawBack::MergeFrom(const GCNewYearLuckyDrawBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  historylist_.MergeFrom(from.historylist_);
  rankrewardlist_.MergeFrom(from.rankrewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_items()) {
      set_items(from.items());
    }
    if (from.has_needscore()) {
      set_needscore(from.needscore());
    }
    if (from.has_curscore()) {
      set_curscore(from.curscore());
    }
    if (from.has_allscore()) {
      set_allscore(from.allscore());
    }
    if (from.has_drawindex()) {
      set_drawindex(from.drawindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCNewYearLuckyDrawBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCNewYearLuckyDrawBack::CopyFrom(const GCNewYearLuckyDrawBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNewYearLuckyDrawBack::IsInitialized() const {

  return true;
}

void GCNewYearLuckyDrawBack::Swap(GCNewYearLuckyDrawBack* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(note_, other->note_);
    std::swap(items_, other->items_);
    std::swap(needscore_, other->needscore_);
    std::swap(curscore_, other->curscore_);
    std::swap(allscore_, other->allscore_);
    std::swap(drawindex_, other->drawindex_);
    historylist_.Swap(&other->historylist_);
    rankrewardlist_.Swap(&other->rankrewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCNewYearLuckyDrawBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCNewYearLuckyDrawBack_descriptor_;
  metadata.reflection = GCNewYearLuckyDrawBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGNewYearLuckyDrawRank::CGNewYearLuckyDrawRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGNewYearLuckyDrawRank)
}

void CGNewYearLuckyDrawRank::InitAsDefaultInstance() {
}

CGNewYearLuckyDrawRank::CGNewYearLuckyDrawRank(const CGNewYearLuckyDrawRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGNewYearLuckyDrawRank)
}

void CGNewYearLuckyDrawRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNewYearLuckyDrawRank::~CGNewYearLuckyDrawRank() {
  // @@protoc_insertion_point(destructor:CGNewYearLuckyDrawRank)
  SharedDtor();
}

void CGNewYearLuckyDrawRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNewYearLuckyDrawRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNewYearLuckyDrawRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNewYearLuckyDrawRank_descriptor_;
}

const CGNewYearLuckyDrawRank& CGNewYearLuckyDrawRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGNewYearLuckyDrawRank* CGNewYearLuckyDrawRank::default_instance_ = NULL;

CGNewYearLuckyDrawRank* CGNewYearLuckyDrawRank::New() const {
  return new CGNewYearLuckyDrawRank;
}

void CGNewYearLuckyDrawRank::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNewYearLuckyDrawRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGNewYearLuckyDrawRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGNewYearLuckyDrawRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGNewYearLuckyDrawRank)
  return false;
#undef DO_
}

void CGNewYearLuckyDrawRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGNewYearLuckyDrawRank)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGNewYearLuckyDrawRank)
}

::google::protobuf::uint8* CGNewYearLuckyDrawRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGNewYearLuckyDrawRank)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGNewYearLuckyDrawRank)
  return target;
}

int CGNewYearLuckyDrawRank::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNewYearLuckyDrawRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNewYearLuckyDrawRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNewYearLuckyDrawRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNewYearLuckyDrawRank::MergeFrom(const CGNewYearLuckyDrawRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNewYearLuckyDrawRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNewYearLuckyDrawRank::CopyFrom(const CGNewYearLuckyDrawRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNewYearLuckyDrawRank::IsInitialized() const {

  return true;
}

void CGNewYearLuckyDrawRank::Swap(CGNewYearLuckyDrawRank* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNewYearLuckyDrawRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNewYearLuckyDrawRank_descriptor_;
  metadata.reflection = CGNewYearLuckyDrawRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCNewYearLuckyDrawRank::kRankListFieldNumber;
const int GCNewYearLuckyDrawRank::kMyRankInfoFieldNumber;
#endif  // !_MSC_VER

GCNewYearLuckyDrawRank::GCNewYearLuckyDrawRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCNewYearLuckyDrawRank)
}

void GCNewYearLuckyDrawRank::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::ActivityRankInfo*>(&::ActivityRankInfo::default_instance());
}

GCNewYearLuckyDrawRank::GCNewYearLuckyDrawRank(const GCNewYearLuckyDrawRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCNewYearLuckyDrawRank)
}

void GCNewYearLuckyDrawRank::SharedCtor() {
  _cached_size_ = 0;
  myrankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCNewYearLuckyDrawRank::~GCNewYearLuckyDrawRank() {
  // @@protoc_insertion_point(destructor:GCNewYearLuckyDrawRank)
  SharedDtor();
}

void GCNewYearLuckyDrawRank::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void GCNewYearLuckyDrawRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCNewYearLuckyDrawRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCNewYearLuckyDrawRank_descriptor_;
}

const GCNewYearLuckyDrawRank& GCNewYearLuckyDrawRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCNewYearLuckyDrawRank* GCNewYearLuckyDrawRank::default_instance_ = NULL;

GCNewYearLuckyDrawRank* GCNewYearLuckyDrawRank::New() const {
  return new GCNewYearLuckyDrawRank;
}

void GCNewYearLuckyDrawRank::Clear() {
  if (has_myrankinfo()) {
    if (myrankinfo_ != NULL) myrankinfo_->::ActivityRankInfo::Clear();
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCNewYearLuckyDrawRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCNewYearLuckyDrawRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityRankInfo rankList = 1;
      case 1: {
        if (tag == 10) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rankList;
        if (input->ExpectTag(18)) goto parse_myRankInfo;
        break;
      }

      // optional .ActivityRankInfo myRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_myRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCNewYearLuckyDrawRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCNewYearLuckyDrawRank)
  return false;
#undef DO_
}

void GCNewYearLuckyDrawRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCNewYearLuckyDrawRank)
  // repeated .ActivityRankInfo rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklist(i), output);
  }

  // optional .ActivityRankInfo myRankInfo = 2;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myrankinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCNewYearLuckyDrawRank)
}

::google::protobuf::uint8* GCNewYearLuckyDrawRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCNewYearLuckyDrawRank)
  // repeated .ActivityRankInfo rankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklist(i), target);
  }

  // optional .ActivityRankInfo myRankInfo = 2;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myrankinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCNewYearLuckyDrawRank)
  return target;
}

int GCNewYearLuckyDrawRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ActivityRankInfo myRankInfo = 2;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

  }
  // repeated .ActivityRankInfo rankList = 1;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCNewYearLuckyDrawRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCNewYearLuckyDrawRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCNewYearLuckyDrawRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCNewYearLuckyDrawRank::MergeFrom(const GCNewYearLuckyDrawRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::ActivityRankInfo::MergeFrom(from.myrankinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCNewYearLuckyDrawRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCNewYearLuckyDrawRank::CopyFrom(const GCNewYearLuckyDrawRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNewYearLuckyDrawRank::IsInitialized() const {

  return true;
}

void GCNewYearLuckyDrawRank::Swap(GCNewYearLuckyDrawRank* other) {
  if (other != this) {
    ranklist_.Swap(&other->ranklist_);
    std::swap(myrankinfo_, other->myrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCNewYearLuckyDrawRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCNewYearLuckyDrawRank_descriptor_;
  metadata.reflection = GCNewYearLuckyDrawRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowerBabyHistory::kTimeFieldNumber;
const int FlowerBabyHistory::kSendIdFieldNumber;
const int FlowerBabyHistory::kSendNameFieldNumber;
const int FlowerBabyHistory::kSendVipFieldNumber;
const int FlowerBabyHistory::kFlowerIdFieldNumber;
#endif  // !_MSC_VER

FlowerBabyHistory::FlowerBabyHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlowerBabyHistory)
}

void FlowerBabyHistory::InitAsDefaultInstance() {
}

FlowerBabyHistory::FlowerBabyHistory(const FlowerBabyHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FlowerBabyHistory)
}

void FlowerBabyHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sendid_ = GOOGLE_LONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendvip_ = 0;
  flowerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowerBabyHistory::~FlowerBabyHistory() {
  // @@protoc_insertion_point(destructor:FlowerBabyHistory)
  SharedDtor();
}

void FlowerBabyHistory::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (this != default_instance_) {
  }
}

void FlowerBabyHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowerBabyHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowerBabyHistory_descriptor_;
}

const FlowerBabyHistory& FlowerBabyHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

FlowerBabyHistory* FlowerBabyHistory::default_instance_ = NULL;

FlowerBabyHistory* FlowerBabyHistory::New() const {
  return new FlowerBabyHistory;
}

void FlowerBabyHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FlowerBabyHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(time_, sendid_);
    ZR_(sendvip_, flowerid_);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowerBabyHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlowerBabyHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sendId;
        break;
      }

      // optional int64 sendId = 2;
      case 2: {
        if (tag == 16) {
         parse_sendId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendid_)));
          set_has_sendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sendName;
        break;
      }

      // optional string sendName = 3;
      case 3: {
        if (tag == 26) {
         parse_sendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sendVip;
        break;
      }

      // optional int32 sendVip = 4;
      case 4: {
        if (tag == 32) {
         parse_sendVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendvip_)));
          set_has_sendvip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flowerId;
        break;
      }

      // optional int32 flowerId = 5;
      case 5: {
        if (tag == 40) {
         parse_flowerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flowerid_)));
          set_has_flowerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlowerBabyHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlowerBabyHistory)
  return false;
#undef DO_
}

void FlowerBabyHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlowerBabyHistory)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int64 sendId = 2;
  if (has_sendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sendid(), output);
  }

  // optional string sendName = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sendname(), output);
  }

  // optional int32 sendVip = 4;
  if (has_sendvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sendvip(), output);
  }

  // optional int32 flowerId = 5;
  if (has_flowerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flowerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FlowerBabyHistory)
}

::google::protobuf::uint8* FlowerBabyHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlowerBabyHistory)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int64 sendId = 2;
  if (has_sendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sendid(), target);
  }

  // optional string sendName = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendname(), target);
  }

  // optional int32 sendVip = 4;
  if (has_sendvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sendvip(), target);
  }

  // optional int32 flowerId = 5;
  if (has_flowerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flowerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlowerBabyHistory)
  return target;
}

int FlowerBabyHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 sendId = 2;
    if (has_sendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendid());
    }

    // optional string sendName = 3;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int32 sendVip = 4;
    if (has_sendvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendvip());
    }

    // optional int32 flowerId = 5;
    if (has_flowerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flowerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowerBabyHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowerBabyHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowerBabyHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowerBabyHistory::MergeFrom(const FlowerBabyHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sendid()) {
      set_sendid(from.sendid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_sendvip()) {
      set_sendvip(from.sendvip());
    }
    if (from.has_flowerid()) {
      set_flowerid(from.flowerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowerBabyHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowerBabyHistory::CopyFrom(const FlowerBabyHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowerBabyHistory::IsInitialized() const {

  return true;
}

void FlowerBabyHistory::Swap(FlowerBabyHistory* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(sendid_, other->sendid_);
    std::swap(sendname_, other->sendname_);
    std::swap(sendvip_, other->sendvip_);
    std::swap(flowerid_, other->flowerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowerBabyHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowerBabyHistory_descriptor_;
  metadata.reflection = FlowerBabyHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetFlowerBabyInfo::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGGetFlowerBabyInfo::CGGetFlowerBabyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetFlowerBabyInfo)
}

void CGGetFlowerBabyInfo::InitAsDefaultInstance() {
}

CGGetFlowerBabyInfo::CGGetFlowerBabyInfo(const CGGetFlowerBabyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetFlowerBabyInfo)
}

void CGGetFlowerBabyInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetFlowerBabyInfo::~CGGetFlowerBabyInfo() {
  // @@protoc_insertion_point(destructor:CGGetFlowerBabyInfo)
  SharedDtor();
}

void CGGetFlowerBabyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetFlowerBabyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetFlowerBabyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetFlowerBabyInfo_descriptor_;
}

const CGGetFlowerBabyInfo& CGGetFlowerBabyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGGetFlowerBabyInfo* CGGetFlowerBabyInfo::default_instance_ = NULL;

CGGetFlowerBabyInfo* CGGetFlowerBabyInfo::New() const {
  return new CGGetFlowerBabyInfo;
}

void CGGetFlowerBabyInfo::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetFlowerBabyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetFlowerBabyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetFlowerBabyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetFlowerBabyInfo)
  return false;
#undef DO_
}

void CGGetFlowerBabyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetFlowerBabyInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetFlowerBabyInfo)
}

::google::protobuf::uint8* CGGetFlowerBabyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetFlowerBabyInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetFlowerBabyInfo)
  return target;
}

int CGGetFlowerBabyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetFlowerBabyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetFlowerBabyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetFlowerBabyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetFlowerBabyInfo::MergeFrom(const CGGetFlowerBabyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetFlowerBabyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetFlowerBabyInfo::CopyFrom(const CGGetFlowerBabyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetFlowerBabyInfo::IsInitialized() const {

  return true;
}

void CGGetFlowerBabyInfo::Swap(CGGetFlowerBabyInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetFlowerBabyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetFlowerBabyInfo_descriptor_;
  metadata.reflection = CGGetFlowerBabyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetFlowerBabyInfoBack::kHisListFieldNumber;
const int GCGetFlowerBabyInfoBack::kReceiveScoreSumFieldNumber;
#endif  // !_MSC_VER

GCGetFlowerBabyInfoBack::GCGetFlowerBabyInfoBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetFlowerBabyInfoBack)
}

void GCGetFlowerBabyInfoBack::InitAsDefaultInstance() {
}

GCGetFlowerBabyInfoBack::GCGetFlowerBabyInfoBack(const GCGetFlowerBabyInfoBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetFlowerBabyInfoBack)
}

void GCGetFlowerBabyInfoBack::SharedCtor() {
  _cached_size_ = 0;
  receivescoresum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetFlowerBabyInfoBack::~GCGetFlowerBabyInfoBack() {
  // @@protoc_insertion_point(destructor:GCGetFlowerBabyInfoBack)
  SharedDtor();
}

void GCGetFlowerBabyInfoBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetFlowerBabyInfoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetFlowerBabyInfoBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetFlowerBabyInfoBack_descriptor_;
}

const GCGetFlowerBabyInfoBack& GCGetFlowerBabyInfoBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCGetFlowerBabyInfoBack* GCGetFlowerBabyInfoBack::default_instance_ = NULL;

GCGetFlowerBabyInfoBack* GCGetFlowerBabyInfoBack::New() const {
  return new GCGetFlowerBabyInfoBack;
}

void GCGetFlowerBabyInfoBack::Clear() {
  receivescoresum_ = 0;
  hislist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetFlowerBabyInfoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetFlowerBabyInfoBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FlowerBabyHistory hisList = 1;
      case 1: {
        if (tag == 10) {
         parse_hisList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hislist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hisList;
        if (input->ExpectTag(16)) goto parse_receiveScoreSum;
        break;
      }

      // optional int32 receiveScoreSum = 2;
      case 2: {
        if (tag == 16) {
         parse_receiveScoreSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivescoresum_)));
          set_has_receivescoresum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetFlowerBabyInfoBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetFlowerBabyInfoBack)
  return false;
#undef DO_
}

void GCGetFlowerBabyInfoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetFlowerBabyInfoBack)
  // repeated .FlowerBabyHistory hisList = 1;
  for (int i = 0; i < this->hislist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hislist(i), output);
  }

  // optional int32 receiveScoreSum = 2;
  if (has_receivescoresum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receivescoresum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetFlowerBabyInfoBack)
}

::google::protobuf::uint8* GCGetFlowerBabyInfoBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetFlowerBabyInfoBack)
  // repeated .FlowerBabyHistory hisList = 1;
  for (int i = 0; i < this->hislist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hislist(i), target);
  }

  // optional int32 receiveScoreSum = 2;
  if (has_receivescoresum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receivescoresum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetFlowerBabyInfoBack)
  return target;
}

int GCGetFlowerBabyInfoBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 receiveScoreSum = 2;
    if (has_receivescoresum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivescoresum());
    }

  }
  // repeated .FlowerBabyHistory hisList = 1;
  total_size += 1 * this->hislist_size();
  for (int i = 0; i < this->hislist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hislist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetFlowerBabyInfoBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetFlowerBabyInfoBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetFlowerBabyInfoBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetFlowerBabyInfoBack::MergeFrom(const GCGetFlowerBabyInfoBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  hislist_.MergeFrom(from.hislist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_receivescoresum()) {
      set_receivescoresum(from.receivescoresum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetFlowerBabyInfoBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetFlowerBabyInfoBack::CopyFrom(const GCGetFlowerBabyInfoBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetFlowerBabyInfoBack::IsInitialized() const {

  return true;
}

void GCGetFlowerBabyInfoBack::Swap(GCGetFlowerBabyInfoBack* other) {
  if (other != this) {
    hislist_.Swap(&other->hislist_);
    std::swap(receivescoresum_, other->receivescoresum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetFlowerBabyInfoBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetFlowerBabyInfoBack_descriptor_;
  metadata.reflection = GCGetFlowerBabyInfoBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGiveFlower::kFlowerIdFieldNumber;
const int CGGiveFlower::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGGiveFlower::CGGiveFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGiveFlower)
}

void CGGiveFlower::InitAsDefaultInstance() {
}

CGGiveFlower::CGGiveFlower(const CGGiveFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGiveFlower)
}

void CGGiveFlower::SharedCtor() {
  _cached_size_ = 0;
  flowerid_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGiveFlower::~CGGiveFlower() {
  // @@protoc_insertion_point(destructor:CGGiveFlower)
  SharedDtor();
}

void CGGiveFlower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGiveFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGiveFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGiveFlower_descriptor_;
}

const CGGiveFlower& CGGiveFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGGiveFlower* CGGiveFlower::default_instance_ = NULL;

CGGiveFlower* CGGiveFlower::New() const {
  return new CGGiveFlower;
}

void CGGiveFlower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGiveFlower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, flowerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGiveFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGiveFlower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flowerid_)));
          set_has_flowerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 2;
      case 2: {
        if (tag == 16) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGiveFlower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGiveFlower)
  return false;
#undef DO_
}

void CGGiveFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGiveFlower)
  // optional int32 flowerId = 1;
  if (has_flowerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flowerid(), output);
  }

  // optional int64 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGiveFlower)
}

::google::protobuf::uint8* CGGiveFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGiveFlower)
  // optional int32 flowerId = 1;
  if (has_flowerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flowerid(), target);
  }

  // optional int64 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGiveFlower)
  return target;
}

int CGGiveFlower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flowerId = 1;
    if (has_flowerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flowerid());
    }

    // optional int64 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGiveFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGiveFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGiveFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGiveFlower::MergeFrom(const CGGiveFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flowerid()) {
      set_flowerid(from.flowerid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGiveFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGiveFlower::CopyFrom(const CGGiveFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGiveFlower::IsInitialized() const {

  return true;
}

void CGGiveFlower::Swap(CGGiveFlower* other) {
  if (other != this) {
    std::swap(flowerid_, other->flowerid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGiveFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGiveFlower_descriptor_;
  metadata.reflection = CGGiveFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGiveFlowerBack::kOperateFieldNumber;
const int GCGiveFlowerBack::kGiveScoreFieldNumber;
const int GCGiveFlowerBack::kReceiveScoreFieldNumber;
const int GCGiveFlowerBack::kGiveScoreSumFieldNumber;
const int GCGiveFlowerBack::kReceiveScoreSumFieldNumber;
const int GCGiveFlowerBack::kGiveRankDailyFieldNumber;
const int GCGiveFlowerBack::kReceiveRankDailyFieldNumber;
const int GCGiveFlowerBack::kFlowerIdListFieldNumber;
#endif  // !_MSC_VER

GCGiveFlowerBack::GCGiveFlowerBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGiveFlowerBack)
}

void GCGiveFlowerBack::InitAsDefaultInstance() {
}

GCGiveFlowerBack::GCGiveFlowerBack(const GCGiveFlowerBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGiveFlowerBack)
}

void GCGiveFlowerBack::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  givescore_ = 0;
  receivescore_ = 0;
  givescoresum_ = 0;
  receivescoresum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGiveFlowerBack::~GCGiveFlowerBack() {
  // @@protoc_insertion_point(destructor:GCGiveFlowerBack)
  SharedDtor();
}

void GCGiveFlowerBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGiveFlowerBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGiveFlowerBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGiveFlowerBack_descriptor_;
}

const GCGiveFlowerBack& GCGiveFlowerBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCGiveFlowerBack* GCGiveFlowerBack::default_instance_ = NULL;

GCGiveFlowerBack* GCGiveFlowerBack::New() const {
  return new GCGiveFlowerBack;
}

void GCGiveFlowerBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGiveFlowerBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(operate_, givescoresum_);
    receivescoresum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  giverankdaily_.Clear();
  receiverankdaily_.Clear();
  floweridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGiveFlowerBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGiveFlowerBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_giveScore;
        break;
      }

      // optional int32 giveScore = 2;
      case 2: {
        if (tag == 16) {
         parse_giveScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &givescore_)));
          set_has_givescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_receiveScore;
        break;
      }

      // optional int32 receiveScore = 3;
      case 3: {
        if (tag == 24) {
         parse_receiveScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivescore_)));
          set_has_receivescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_giveScoreSum;
        break;
      }

      // optional int32 giveScoreSum = 4;
      case 4: {
        if (tag == 32) {
         parse_giveScoreSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &givescoresum_)));
          set_has_givescoresum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_receiveScoreSum;
        break;
      }

      // optional int32 receiveScoreSum = 5;
      case 5: {
        if (tag == 40) {
         parse_receiveScoreSum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receivescoresum_)));
          set_has_receivescoresum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_giveRankDaily;
        break;
      }

      // repeated .FlowerRewardItem giveRankDaily = 6;
      case 6: {
        if (tag == 50) {
         parse_giveRankDaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giverankdaily()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_giveRankDaily;
        if (input->ExpectTag(58)) goto parse_receiveRankDaily;
        break;
      }

      // repeated .FlowerRewardItem receiveRankDaily = 7;
      case 7: {
        if (tag == 58) {
         parse_receiveRankDaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiverankdaily()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_receiveRankDaily;
        if (input->ExpectTag(64)) goto parse_flowerIdList;
        break;
      }

      // repeated int32 flowerIdList = 8;
      case 8: {
        if (tag == 64) {
         parse_flowerIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_floweridlist())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_floweridlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flowerIdList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGiveFlowerBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGiveFlowerBack)
  return false;
#undef DO_
}

void GCGiveFlowerBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGiveFlowerBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 giveScore = 2;
  if (has_givescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->givescore(), output);
  }

  // optional int32 receiveScore = 3;
  if (has_receivescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->receivescore(), output);
  }

  // optional int32 giveScoreSum = 4;
  if (has_givescoresum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->givescoresum(), output);
  }

  // optional int32 receiveScoreSum = 5;
  if (has_receivescoresum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->receivescoresum(), output);
  }

  // repeated .FlowerRewardItem giveRankDaily = 6;
  for (int i = 0; i < this->giverankdaily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->giverankdaily(i), output);
  }

  // repeated .FlowerRewardItem receiveRankDaily = 7;
  for (int i = 0; i < this->receiverankdaily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->receiverankdaily(i), output);
  }

  // repeated int32 flowerIdList = 8;
  for (int i = 0; i < this->floweridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->floweridlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGiveFlowerBack)
}

::google::protobuf::uint8* GCGiveFlowerBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGiveFlowerBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 giveScore = 2;
  if (has_givescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->givescore(), target);
  }

  // optional int32 receiveScore = 3;
  if (has_receivescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receivescore(), target);
  }

  // optional int32 giveScoreSum = 4;
  if (has_givescoresum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->givescoresum(), target);
  }

  // optional int32 receiveScoreSum = 5;
  if (has_receivescoresum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->receivescoresum(), target);
  }

  // repeated .FlowerRewardItem giveRankDaily = 6;
  for (int i = 0; i < this->giverankdaily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->giverankdaily(i), target);
  }

  // repeated .FlowerRewardItem receiveRankDaily = 7;
  for (int i = 0; i < this->receiverankdaily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->receiverankdaily(i), target);
  }

  // repeated int32 flowerIdList = 8;
  for (int i = 0; i < this->floweridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->floweridlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGiveFlowerBack)
  return target;
}

int GCGiveFlowerBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 giveScore = 2;
    if (has_givescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->givescore());
    }

    // optional int32 receiveScore = 3;
    if (has_receivescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivescore());
    }

    // optional int32 giveScoreSum = 4;
    if (has_givescoresum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->givescoresum());
    }

    // optional int32 receiveScoreSum = 5;
    if (has_receivescoresum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receivescoresum());
    }

  }
  // repeated .FlowerRewardItem giveRankDaily = 6;
  total_size += 1 * this->giverankdaily_size();
  for (int i = 0; i < this->giverankdaily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giverankdaily(i));
  }

  // repeated .FlowerRewardItem receiveRankDaily = 7;
  total_size += 1 * this->receiverankdaily_size();
  for (int i = 0; i < this->receiverankdaily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receiverankdaily(i));
  }

  // repeated int32 flowerIdList = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->floweridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->floweridlist(i));
    }
    total_size += 1 * this->floweridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGiveFlowerBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGiveFlowerBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGiveFlowerBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGiveFlowerBack::MergeFrom(const GCGiveFlowerBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  giverankdaily_.MergeFrom(from.giverankdaily_);
  receiverankdaily_.MergeFrom(from.receiverankdaily_);
  floweridlist_.MergeFrom(from.floweridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_givescore()) {
      set_givescore(from.givescore());
    }
    if (from.has_receivescore()) {
      set_receivescore(from.receivescore());
    }
    if (from.has_givescoresum()) {
      set_givescoresum(from.givescoresum());
    }
    if (from.has_receivescoresum()) {
      set_receivescoresum(from.receivescoresum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGiveFlowerBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGiveFlowerBack::CopyFrom(const GCGiveFlowerBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGiveFlowerBack::IsInitialized() const {

  return true;
}

void GCGiveFlowerBack::Swap(GCGiveFlowerBack* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(givescore_, other->givescore_);
    std::swap(receivescore_, other->receivescore_);
    std::swap(givescoresum_, other->givescoresum_);
    std::swap(receivescoresum_, other->receivescoresum_);
    giverankdaily_.Swap(&other->giverankdaily_);
    receiverankdaily_.Swap(&other->receiverankdaily_);
    floweridlist_.Swap(&other->floweridlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGiveFlowerBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGiveFlowerBack_descriptor_;
  metadata.reflection = GCGiveFlowerBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowerRewardItem::kIdFieldNumber;
const int FlowerRewardItem::kNeedScoreFieldNumber;
const int FlowerRewardItem::kRewardFieldNumber;
const int FlowerRewardItem::kStateFieldNumber;
#endif  // !_MSC_VER

FlowerRewardItem::FlowerRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlowerRewardItem)
}

void FlowerRewardItem::InitAsDefaultInstance() {
}

FlowerRewardItem::FlowerRewardItem(const FlowerRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FlowerRewardItem)
}

void FlowerRewardItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  needscore_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowerRewardItem::~FlowerRewardItem() {
  // @@protoc_insertion_point(destructor:FlowerRewardItem)
  SharedDtor();
}

void FlowerRewardItem::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void FlowerRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowerRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowerRewardItem_descriptor_;
}

const FlowerRewardItem& FlowerRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

FlowerRewardItem* FlowerRewardItem::default_instance_ = NULL;

FlowerRewardItem* FlowerRewardItem::New() const {
  return new FlowerRewardItem;
}

void FlowerRewardItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FlowerRewardItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, needscore_);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
    state_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowerRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlowerRewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_needScore;
        break;
      }

      // optional int32 needScore = 2;
      case 2: {
        if (tag == 16) {
         parse_needScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needscore_)));
          set_has_needscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional string reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlowerRewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlowerRewardItem)
  return false;
#undef DO_
}

void FlowerRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlowerRewardItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 needScore = 2;
  if (has_needscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needscore(), output);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reward(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FlowerRewardItem)
}

::google::protobuf::uint8* FlowerRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlowerRewardItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 needScore = 2;
  if (has_needscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needscore(), target);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reward(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlowerRewardItem)
  return target;
}

int FlowerRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 needScore = 2;
    if (has_needscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needscore());
    }

    // optional string reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowerRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowerRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowerRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowerRewardItem::MergeFrom(const FlowerRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needscore()) {
      set_needscore(from.needscore());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowerRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowerRewardItem::CopyFrom(const FlowerRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowerRewardItem::IsInitialized() const {

  return true;
}

void FlowerRewardItem::Swap(FlowerRewardItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needscore_, other->needscore_);
    std::swap(reward_, other->reward_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowerRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowerRewardItem_descriptor_;
  metadata.reflection = FlowerRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGiveFlowerReward::kIdFieldNumber;
const int CGGiveFlowerReward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGiveFlowerReward::CGGiveFlowerReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGiveFlowerReward)
}

void CGGiveFlowerReward::InitAsDefaultInstance() {
}

CGGiveFlowerReward::CGGiveFlowerReward(const CGGiveFlowerReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGiveFlowerReward)
}

void CGGiveFlowerReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGiveFlowerReward::~CGGiveFlowerReward() {
  // @@protoc_insertion_point(destructor:CGGiveFlowerReward)
  SharedDtor();
}

void CGGiveFlowerReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGiveFlowerReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGiveFlowerReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGiveFlowerReward_descriptor_;
}

const CGGiveFlowerReward& CGGiveFlowerReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGGiveFlowerReward* CGGiveFlowerReward::default_instance_ = NULL;

CGGiveFlowerReward* CGGiveFlowerReward::New() const {
  return new CGGiveFlowerReward;
}

void CGGiveFlowerReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGiveFlowerReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGiveFlowerReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGiveFlowerReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGiveFlowerReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGiveFlowerReward)
  return false;
#undef DO_
}

void CGGiveFlowerReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGiveFlowerReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGiveFlowerReward)
}

::google::protobuf::uint8* CGGiveFlowerReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGiveFlowerReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGiveFlowerReward)
  return target;
}

int CGGiveFlowerReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGiveFlowerReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGiveFlowerReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGiveFlowerReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGiveFlowerReward::MergeFrom(const CGGiveFlowerReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGiveFlowerReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGiveFlowerReward::CopyFrom(const CGGiveFlowerReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGiveFlowerReward::IsInitialized() const {

  return true;
}

void CGGiveFlowerReward::Swap(CGGiveFlowerReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGiveFlowerReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGiveFlowerReward_descriptor_;
  metadata.reflection = CGGiveFlowerReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGiveFlowerRewardBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCGiveFlowerRewardBack::GCGiveFlowerRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGiveFlowerRewardBack)
}

void GCGiveFlowerRewardBack::InitAsDefaultInstance() {
}

GCGiveFlowerRewardBack::GCGiveFlowerRewardBack(const GCGiveFlowerRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGiveFlowerRewardBack)
}

void GCGiveFlowerRewardBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGiveFlowerRewardBack::~GCGiveFlowerRewardBack() {
  // @@protoc_insertion_point(destructor:GCGiveFlowerRewardBack)
  SharedDtor();
}

void GCGiveFlowerRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGiveFlowerRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGiveFlowerRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGiveFlowerRewardBack_descriptor_;
}

const GCGiveFlowerRewardBack& GCGiveFlowerRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCGiveFlowerRewardBack* GCGiveFlowerRewardBack::default_instance_ = NULL;

GCGiveFlowerRewardBack* GCGiveFlowerRewardBack::New() const {
  return new GCGiveFlowerRewardBack;
}

void GCGiveFlowerRewardBack::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGiveFlowerRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGiveFlowerRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGiveFlowerRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGiveFlowerRewardBack)
  return false;
#undef DO_
}

void GCGiveFlowerRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGiveFlowerRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGiveFlowerRewardBack)
}

::google::protobuf::uint8* GCGiveFlowerRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGiveFlowerRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGiveFlowerRewardBack)
  return target;
}

int GCGiveFlowerRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGiveFlowerRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGiveFlowerRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGiveFlowerRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGiveFlowerRewardBack::MergeFrom(const GCGiveFlowerRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGiveFlowerRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGiveFlowerRewardBack::CopyFrom(const GCGiveFlowerRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGiveFlowerRewardBack::IsInitialized() const {

  return true;
}

void GCGiveFlowerRewardBack::Swap(GCGiveFlowerRewardBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGiveFlowerRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGiveFlowerRewardBack_descriptor_;
  metadata.reflection = GCGiveFlowerRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGFlowerBabyRank::CGFlowerBabyRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFlowerBabyRank)
}

void CGFlowerBabyRank::InitAsDefaultInstance() {
}

CGFlowerBabyRank::CGFlowerBabyRank(const CGFlowerBabyRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFlowerBabyRank)
}

void CGFlowerBabyRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFlowerBabyRank::~CGFlowerBabyRank() {
  // @@protoc_insertion_point(destructor:CGFlowerBabyRank)
  SharedDtor();
}

void CGFlowerBabyRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFlowerBabyRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFlowerBabyRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFlowerBabyRank_descriptor_;
}

const CGFlowerBabyRank& CGFlowerBabyRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGFlowerBabyRank* CGFlowerBabyRank::default_instance_ = NULL;

CGFlowerBabyRank* CGFlowerBabyRank::New() const {
  return new CGFlowerBabyRank;
}

void CGFlowerBabyRank::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFlowerBabyRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFlowerBabyRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGFlowerBabyRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFlowerBabyRank)
  return false;
#undef DO_
}

void CGFlowerBabyRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFlowerBabyRank)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFlowerBabyRank)
}

::google::protobuf::uint8* CGFlowerBabyRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFlowerBabyRank)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFlowerBabyRank)
  return target;
}

int CGFlowerBabyRank::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFlowerBabyRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFlowerBabyRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFlowerBabyRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFlowerBabyRank::MergeFrom(const CGFlowerBabyRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFlowerBabyRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFlowerBabyRank::CopyFrom(const CGFlowerBabyRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFlowerBabyRank::IsInitialized() const {

  return true;
}

void CGFlowerBabyRank::Swap(CGFlowerBabyRank* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFlowerBabyRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFlowerBabyRank_descriptor_;
  metadata.reflection = CGFlowerBabyRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFlowerBabyRank::kOperateFieldNumber;
const int GCFlowerBabyRank::kGiveRankTitleIdFieldNumber;
const int GCFlowerBabyRank::kReceiveRankTitleIdFieldNumber;
const int GCFlowerBabyRank::kGiveRankRewardsFieldNumber;
const int GCFlowerBabyRank::kReceiveRankRewardsFieldNumber;
const int GCFlowerBabyRank::kGiveRankListFieldNumber;
const int GCFlowerBabyRank::kReceiveRankListFieldNumber;
const int GCFlowerBabyRank::kMyGiveRankFieldNumber;
const int GCFlowerBabyRank::kMyReceiveRankFieldNumber;
#endif  // !_MSC_VER

GCFlowerBabyRank::GCFlowerBabyRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFlowerBabyRank)
}

void GCFlowerBabyRank::InitAsDefaultInstance() {
}

GCFlowerBabyRank::GCFlowerBabyRank(const GCFlowerBabyRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFlowerBabyRank)
}

void GCFlowerBabyRank::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  giveranktitleid_ = 0;
  receiveranktitleid_ = 0;
  mygiverank_ = 0;
  myreceiverank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFlowerBabyRank::~GCFlowerBabyRank() {
  // @@protoc_insertion_point(destructor:GCFlowerBabyRank)
  SharedDtor();
}

void GCFlowerBabyRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFlowerBabyRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFlowerBabyRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFlowerBabyRank_descriptor_;
}

const GCFlowerBabyRank& GCFlowerBabyRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCFlowerBabyRank* GCFlowerBabyRank::default_instance_ = NULL;

GCFlowerBabyRank* GCFlowerBabyRank::New() const {
  return new GCFlowerBabyRank;
}

void GCFlowerBabyRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFlowerBabyRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, giveranktitleid_);
  ZR_(receiveranktitleid_, mygiverank_);
  myreceiverank_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  giverankrewards_.Clear();
  receiverankrewards_.Clear();
  giveranklist_.Clear();
  receiveranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFlowerBabyRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFlowerBabyRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_giveRankTitleId;
        break;
      }

      // optional int32 giveRankTitleId = 2;
      case 2: {
        if (tag == 16) {
         parse_giveRankTitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giveranktitleid_)));
          set_has_giveranktitleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_receiveRankTitleId;
        break;
      }

      // optional int32 receiveRankTitleId = 3;
      case 3: {
        if (tag == 24) {
         parse_receiveRankTitleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiveranktitleid_)));
          set_has_receiveranktitleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_giveRankRewards;
        break;
      }

      // repeated .ActivityRankReward giveRankRewards = 4;
      case 4: {
        if (tag == 34) {
         parse_giveRankRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giverankrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_giveRankRewards;
        if (input->ExpectTag(42)) goto parse_receiveRankRewards;
        break;
      }

      // repeated .ActivityRankReward receiveRankRewards = 5;
      case 5: {
        if (tag == 42) {
         parse_receiveRankRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiverankrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_receiveRankRewards;
        if (input->ExpectTag(50)) goto parse_giveRankList;
        break;
      }

      // repeated .ActivityRankInfo giveRankList = 6;
      case 6: {
        if (tag == 50) {
         parse_giveRankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giveranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_giveRankList;
        if (input->ExpectTag(58)) goto parse_receiveRankList;
        break;
      }

      // repeated .ActivityRankInfo receiveRankList = 7;
      case 7: {
        if (tag == 58) {
         parse_receiveRankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_receiveranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_receiveRankList;
        if (input->ExpectTag(64)) goto parse_myGiveRank;
        break;
      }

      // optional int32 myGiveRank = 8;
      case 8: {
        if (tag == 64) {
         parse_myGiveRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mygiverank_)));
          set_has_mygiverank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_myReceiveRank;
        break;
      }

      // optional int32 myReceiveRank = 9;
      case 9: {
        if (tag == 72) {
         parse_myReceiveRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myreceiverank_)));
          set_has_myreceiverank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFlowerBabyRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFlowerBabyRank)
  return false;
#undef DO_
}

void GCFlowerBabyRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFlowerBabyRank)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 giveRankTitleId = 2;
  if (has_giveranktitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->giveranktitleid(), output);
  }

  // optional int32 receiveRankTitleId = 3;
  if (has_receiveranktitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->receiveranktitleid(), output);
  }

  // repeated .ActivityRankReward giveRankRewards = 4;
  for (int i = 0; i < this->giverankrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->giverankrewards(i), output);
  }

  // repeated .ActivityRankReward receiveRankRewards = 5;
  for (int i = 0; i < this->receiverankrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->receiverankrewards(i), output);
  }

  // repeated .ActivityRankInfo giveRankList = 6;
  for (int i = 0; i < this->giveranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->giveranklist(i), output);
  }

  // repeated .ActivityRankInfo receiveRankList = 7;
  for (int i = 0; i < this->receiveranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->receiveranklist(i), output);
  }

  // optional int32 myGiveRank = 8;
  if (has_mygiverank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mygiverank(), output);
  }

  // optional int32 myReceiveRank = 9;
  if (has_myreceiverank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->myreceiverank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFlowerBabyRank)
}

::google::protobuf::uint8* GCFlowerBabyRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFlowerBabyRank)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 giveRankTitleId = 2;
  if (has_giveranktitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->giveranktitleid(), target);
  }

  // optional int32 receiveRankTitleId = 3;
  if (has_receiveranktitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->receiveranktitleid(), target);
  }

  // repeated .ActivityRankReward giveRankRewards = 4;
  for (int i = 0; i < this->giverankrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->giverankrewards(i), target);
  }

  // repeated .ActivityRankReward receiveRankRewards = 5;
  for (int i = 0; i < this->receiverankrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->receiverankrewards(i), target);
  }

  // repeated .ActivityRankInfo giveRankList = 6;
  for (int i = 0; i < this->giveranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->giveranklist(i), target);
  }

  // repeated .ActivityRankInfo receiveRankList = 7;
  for (int i = 0; i < this->receiveranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->receiveranklist(i), target);
  }

  // optional int32 myGiveRank = 8;
  if (has_mygiverank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mygiverank(), target);
  }

  // optional int32 myReceiveRank = 9;
  if (has_myreceiverank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->myreceiverank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFlowerBabyRank)
  return target;
}

int GCFlowerBabyRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 giveRankTitleId = 2;
    if (has_giveranktitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giveranktitleid());
    }

    // optional int32 receiveRankTitleId = 3;
    if (has_receiveranktitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiveranktitleid());
    }

    // optional int32 myGiveRank = 8;
    if (has_mygiverank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mygiverank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 myReceiveRank = 9;
    if (has_myreceiverank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myreceiverank());
    }

  }
  // repeated .ActivityRankReward giveRankRewards = 4;
  total_size += 1 * this->giverankrewards_size();
  for (int i = 0; i < this->giverankrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giverankrewards(i));
  }

  // repeated .ActivityRankReward receiveRankRewards = 5;
  total_size += 1 * this->receiverankrewards_size();
  for (int i = 0; i < this->receiverankrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receiverankrewards(i));
  }

  // repeated .ActivityRankInfo giveRankList = 6;
  total_size += 1 * this->giveranklist_size();
  for (int i = 0; i < this->giveranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giveranklist(i));
  }

  // repeated .ActivityRankInfo receiveRankList = 7;
  total_size += 1 * this->receiveranklist_size();
  for (int i = 0; i < this->receiveranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->receiveranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFlowerBabyRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFlowerBabyRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFlowerBabyRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFlowerBabyRank::MergeFrom(const GCFlowerBabyRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  giverankrewards_.MergeFrom(from.giverankrewards_);
  receiverankrewards_.MergeFrom(from.receiverankrewards_);
  giveranklist_.MergeFrom(from.giveranklist_);
  receiveranklist_.MergeFrom(from.receiveranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_giveranktitleid()) {
      set_giveranktitleid(from.giveranktitleid());
    }
    if (from.has_receiveranktitleid()) {
      set_receiveranktitleid(from.receiveranktitleid());
    }
    if (from.has_mygiverank()) {
      set_mygiverank(from.mygiverank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_myreceiverank()) {
      set_myreceiverank(from.myreceiverank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFlowerBabyRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFlowerBabyRank::CopyFrom(const GCFlowerBabyRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFlowerBabyRank::IsInitialized() const {

  return true;
}

void GCFlowerBabyRank::Swap(GCFlowerBabyRank* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(giveranktitleid_, other->giveranktitleid_);
    std::swap(receiveranktitleid_, other->receiveranktitleid_);
    giverankrewards_.Swap(&other->giverankrewards_);
    receiverankrewards_.Swap(&other->receiverankrewards_);
    giveranklist_.Swap(&other->giveranklist_);
    receiveranklist_.Swap(&other->receiveranklist_);
    std::swap(mygiverank_, other->mygiverank_);
    std::swap(myreceiverank_, other->myreceiverank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFlowerBabyRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFlowerBabyRank_descriptor_;
  metadata.reflection = GCFlowerBabyRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeInfo::kIdFieldNumber;
const int TreeInfo::kNeedGrowthFieldNumber;
const int TreeInfo::kRewardInfoFieldNumber;
const int TreeInfo::kTreeNPCFieldNumber;
const int TreeInfo::kTreeNameFieldNumber;
const int TreeInfo::kSceneIdFieldNumber;
const int TreeInfo::kPosFieldNumber;
const int TreeInfo::kScalingFieldNumber;
#endif  // !_MSC_VER

TreeInfo::TreeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TreeInfo)
}

void TreeInfo::InitAsDefaultInstance() {
}

TreeInfo::TreeInfo(const TreeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TreeInfo)
}

void TreeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  needgrowth_ = 0;
  rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  treenpc_ = 0;
  treename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_ = 0;
  pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scaling_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeInfo::~TreeInfo() {
  // @@protoc_insertion_point(destructor:TreeInfo)
  SharedDtor();
}

void TreeInfo::SharedDtor() {
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardinfo_;
  }
  if (treename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete treename_;
  }
  if (pos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pos_;
  }
  if (scaling_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scaling_;
  }
  if (this != default_instance_) {
  }
}

void TreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeInfo_descriptor_;
}

const TreeInfo& TreeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

TreeInfo* TreeInfo::default_instance_ = NULL;

TreeInfo* TreeInfo::New() const {
  return new TreeInfo;
}

void TreeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, needgrowth_);
    ZR_(treenpc_, sceneid_);
    if (has_rewardinfo()) {
      if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewardinfo_->clear();
      }
    }
    if (has_treename()) {
      if (treename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        treename_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pos_->clear();
      }
    }
    if (has_scaling()) {
      if (scaling_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scaling_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TreeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_needGrowth;
        break;
      }

      // optional int32 needGrowth = 2;
      case 2: {
        if (tag == 16) {
         parse_needGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgrowth_)));
          set_has_needgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardInfo;
        break;
      }

      // optional string rewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewardinfo().data(), this->rewardinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewardinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_treeNPC;
        break;
      }

      // optional int32 treeNPC = 4;
      case 4: {
        if (tag == 32) {
         parse_treeNPC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treenpc_)));
          set_has_treenpc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_treeName;
        break;
      }

      // optional string treeName = 5;
      case 5: {
        if (tag == 42) {
         parse_treeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_treename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->treename().data(), this->treename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "treename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneId;
        break;
      }

      // optional int32 sceneId = 6;
      case 6: {
        if (tag == 48) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pos;
        break;
      }

      // optional string pos = 7;
      case 7: {
        if (tag == 58) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pos().data(), this->pos().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pos");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scaling;
        break;
      }

      // optional string scaling = 8;
      case 8: {
        if (tag == 66) {
         parse_scaling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scaling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scaling().data(), this->scaling().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scaling");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TreeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TreeInfo)
  return false;
#undef DO_
}

void TreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TreeInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 needGrowth = 2;
  if (has_needgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgrowth(), output);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rewardinfo(), output);
  }

  // optional int32 treeNPC = 4;
  if (has_treenpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->treenpc(), output);
  }

  // optional string treeName = 5;
  if (has_treename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->treename().data(), this->treename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "treename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->treename(), output);
  }

  // optional int32 sceneId = 6;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sceneid(), output);
  }

  // optional string pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos().data(), this->pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pos(), output);
  }

  // optional string scaling = 8;
  if (has_scaling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scaling().data(), this->scaling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scaling");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->scaling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TreeInfo)
}

::google::protobuf::uint8* TreeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreeInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 needGrowth = 2;
  if (has_needgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgrowth(), target);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewardinfo(), target);
  }

  // optional int32 treeNPC = 4;
  if (has_treenpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->treenpc(), target);
  }

  // optional string treeName = 5;
  if (has_treename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->treename().data(), this->treename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "treename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->treename(), target);
  }

  // optional int32 sceneId = 6;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sceneid(), target);
  }

  // optional string pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pos().data(), this->pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pos(), target);
  }

  // optional string scaling = 8;
  if (has_scaling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scaling().data(), this->scaling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scaling");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->scaling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreeInfo)
  return target;
}

int TreeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 needGrowth = 2;
    if (has_needgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgrowth());
    }

    // optional string rewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardinfo());
    }

    // optional int32 treeNPC = 4;
    if (has_treenpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treenpc());
    }

    // optional string treeName = 5;
    if (has_treename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->treename());
    }

    // optional int32 sceneId = 6;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional string pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos());
    }

    // optional string scaling = 8;
    if (has_scaling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scaling());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeInfo::MergeFrom(const TreeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgrowth()) {
      set_needgrowth(from.needgrowth());
    }
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
    if (from.has_treenpc()) {
      set_treenpc(from.treenpc());
    }
    if (from.has_treename()) {
      set_treename(from.treename());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_scaling()) {
      set_scaling(from.scaling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeInfo::CopyFrom(const TreeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeInfo::IsInitialized() const {

  return true;
}

void TreeInfo::Swap(TreeInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgrowth_, other->needgrowth_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(treenpc_, other->treenpc_);
    std::swap(treename_, other->treename_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(pos_, other->pos_);
    std::swap(scaling_, other->scaling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeInfo_descriptor_;
  metadata.reflection = TreeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeToolInfo::kIdFieldNumber;
const int TreeToolInfo::kIconFieldNumber;
#endif  // !_MSC_VER

TreeToolInfo::TreeToolInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TreeToolInfo)
}

void TreeToolInfo::InitAsDefaultInstance() {
}

TreeToolInfo::TreeToolInfo(const TreeToolInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TreeToolInfo)
}

void TreeToolInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeToolInfo::~TreeToolInfo() {
  // @@protoc_insertion_point(destructor:TreeToolInfo)
  SharedDtor();
}

void TreeToolInfo::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void TreeToolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeToolInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeToolInfo_descriptor_;
}

const TreeToolInfo& TreeToolInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

TreeToolInfo* TreeToolInfo::default_instance_ = NULL;

TreeToolInfo* TreeToolInfo::New() const {
  return new TreeToolInfo;
}

void TreeToolInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeToolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TreeToolInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (tag == 18) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TreeToolInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TreeToolInfo)
  return false;
#undef DO_
}

void TreeToolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TreeToolInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TreeToolInfo)
}

::google::protobuf::uint8* TreeToolInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreeToolInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreeToolInfo)
  return target;
}

int TreeToolInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeToolInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeToolInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeToolInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeToolInfo::MergeFrom(const TreeToolInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeToolInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeToolInfo::CopyFrom(const TreeToolInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeToolInfo::IsInitialized() const {

  return true;
}

void TreeToolInfo::Swap(TreeToolInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeToolInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeToolInfo_descriptor_;
  metadata.reflection = TreeToolInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTreeDayProp::kPropIdFieldNumber;
#endif  // !_MSC_VER

CGTreeDayProp::CGTreeDayProp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTreeDayProp)
}

void CGTreeDayProp::InitAsDefaultInstance() {
}

CGTreeDayProp::CGTreeDayProp(const CGTreeDayProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTreeDayProp)
}

void CGTreeDayProp::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTreeDayProp::~CGTreeDayProp() {
  // @@protoc_insertion_point(destructor:CGTreeDayProp)
  SharedDtor();
}

void CGTreeDayProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTreeDayProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTreeDayProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTreeDayProp_descriptor_;
}

const CGTreeDayProp& CGTreeDayProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGTreeDayProp* CGTreeDayProp::default_instance_ = NULL;

CGTreeDayProp* CGTreeDayProp::New() const {
  return new CGTreeDayProp;
}

void CGTreeDayProp::Clear() {
  propid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTreeDayProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTreeDayProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 propId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTreeDayProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTreeDayProp)
  return false;
#undef DO_
}

void CGTreeDayProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTreeDayProp)
  // optional int32 propId = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTreeDayProp)
}

::google::protobuf::uint8* CGTreeDayProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTreeDayProp)
  // optional int32 propId = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTreeDayProp)
  return target;
}

int CGTreeDayProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 propId = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTreeDayProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTreeDayProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTreeDayProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTreeDayProp::MergeFrom(const CGTreeDayProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTreeDayProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTreeDayProp::CopyFrom(const CGTreeDayProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTreeDayProp::IsInitialized() const {

  return true;
}

void CGTreeDayProp::Swap(CGTreeDayProp* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTreeDayProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTreeDayProp_descriptor_;
  metadata.reflection = CGTreeDayProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTreeDayPropBack::kOperateFieldNumber;
const int GCTreeDayPropBack::kMyGrowthFieldNumber;
const int GCTreeDayPropBack::kTreeGrowthFieldNumber;
const int GCTreeDayPropBack::kTreeIDFieldNumber;
const int GCTreeDayPropBack::kTreeInfoListFieldNumber;
const int GCTreeDayPropBack::kToolListFieldNumber;
const int GCTreeDayPropBack::kRewardGetListFieldNumber;
#endif  // !_MSC_VER

GCTreeDayPropBack::GCTreeDayPropBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTreeDayPropBack)
}

void GCTreeDayPropBack::InitAsDefaultInstance() {
}

GCTreeDayPropBack::GCTreeDayPropBack(const GCTreeDayPropBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTreeDayPropBack)
}

void GCTreeDayPropBack::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  mygrowth_ = 0;
  treegrowth_ = 0;
  treeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTreeDayPropBack::~GCTreeDayPropBack() {
  // @@protoc_insertion_point(destructor:GCTreeDayPropBack)
  SharedDtor();
}

void GCTreeDayPropBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTreeDayPropBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTreeDayPropBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTreeDayPropBack_descriptor_;
}

const GCTreeDayPropBack& GCTreeDayPropBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCTreeDayPropBack* GCTreeDayPropBack::default_instance_ = NULL;

GCTreeDayPropBack* GCTreeDayPropBack::New() const {
  return new GCTreeDayPropBack;
}

void GCTreeDayPropBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTreeDayPropBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, treeid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  treeinfolist_.Clear();
  toollist_.Clear();
  rewardgetlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTreeDayPropBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTreeDayPropBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myGrowth;
        break;
      }

      // optional int32 myGrowth = 2;
      case 2: {
        if (tag == 16) {
         parse_myGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mygrowth_)));
          set_has_mygrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_treeGrowth;
        break;
      }

      // optional int32 treeGrowth = 3;
      case 3: {
        if (tag == 24) {
         parse_treeGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treegrowth_)));
          set_has_treegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_treeID;
        break;
      }

      // optional int32 treeID = 4;
      case 4: {
        if (tag == 32) {
         parse_treeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treeid_)));
          set_has_treeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_treeInfoList;
        break;
      }

      // repeated .TreeInfo treeInfoList = 5;
      case 5: {
        if (tag == 42) {
         parse_treeInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treeinfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_treeInfoList;
        if (input->ExpectTag(50)) goto parse_toolList;
        break;
      }

      // repeated .TreeToolInfo toolList = 6;
      case 6: {
        if (tag == 50) {
         parse_toolList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toollist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_toolList;
        if (input->ExpectTag(56)) goto parse_rewardGetList;
        break;
      }

      // repeated int32 rewardGetList = 7;
      case 7: {
        if (tag == 56) {
         parse_rewardGetList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_rewardgetlist())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardgetlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rewardGetList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTreeDayPropBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTreeDayPropBack)
  return false;
#undef DO_
}

void GCTreeDayPropBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTreeDayPropBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 myGrowth = 2;
  if (has_mygrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mygrowth(), output);
  }

  // optional int32 treeGrowth = 3;
  if (has_treegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->treegrowth(), output);
  }

  // optional int32 treeID = 4;
  if (has_treeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->treeid(), output);
  }

  // repeated .TreeInfo treeInfoList = 5;
  for (int i = 0; i < this->treeinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->treeinfolist(i), output);
  }

  // repeated .TreeToolInfo toolList = 6;
  for (int i = 0; i < this->toollist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->toollist(i), output);
  }

  // repeated int32 rewardGetList = 7;
  for (int i = 0; i < this->rewardgetlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->rewardgetlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTreeDayPropBack)
}

::google::protobuf::uint8* GCTreeDayPropBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTreeDayPropBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 myGrowth = 2;
  if (has_mygrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mygrowth(), target);
  }

  // optional int32 treeGrowth = 3;
  if (has_treegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->treegrowth(), target);
  }

  // optional int32 treeID = 4;
  if (has_treeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->treeid(), target);
  }

  // repeated .TreeInfo treeInfoList = 5;
  for (int i = 0; i < this->treeinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->treeinfolist(i), target);
  }

  // repeated .TreeToolInfo toolList = 6;
  for (int i = 0; i < this->toollist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->toollist(i), target);
  }

  // repeated int32 rewardGetList = 7;
  for (int i = 0; i < this->rewardgetlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->rewardgetlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTreeDayPropBack)
  return target;
}

int GCTreeDayPropBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 myGrowth = 2;
    if (has_mygrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mygrowth());
    }

    // optional int32 treeGrowth = 3;
    if (has_treegrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treegrowth());
    }

    // optional int32 treeID = 4;
    if (has_treeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treeid());
    }

  }
  // repeated .TreeInfo treeInfoList = 5;
  total_size += 1 * this->treeinfolist_size();
  for (int i = 0; i < this->treeinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treeinfolist(i));
  }

  // repeated .TreeToolInfo toolList = 6;
  total_size += 1 * this->toollist_size();
  for (int i = 0; i < this->toollist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toollist(i));
  }

  // repeated int32 rewardGetList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardgetlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardgetlist(i));
    }
    total_size += 1 * this->rewardgetlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTreeDayPropBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTreeDayPropBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTreeDayPropBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTreeDayPropBack::MergeFrom(const GCTreeDayPropBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  treeinfolist_.MergeFrom(from.treeinfolist_);
  toollist_.MergeFrom(from.toollist_);
  rewardgetlist_.MergeFrom(from.rewardgetlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_mygrowth()) {
      set_mygrowth(from.mygrowth());
    }
    if (from.has_treegrowth()) {
      set_treegrowth(from.treegrowth());
    }
    if (from.has_treeid()) {
      set_treeid(from.treeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTreeDayPropBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTreeDayPropBack::CopyFrom(const GCTreeDayPropBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTreeDayPropBack::IsInitialized() const {

  return true;
}

void GCTreeDayPropBack::Swap(GCTreeDayPropBack* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(mygrowth_, other->mygrowth_);
    std::swap(treegrowth_, other->treegrowth_);
    std::swap(treeid_, other->treeid_);
    treeinfolist_.Swap(&other->treeinfolist_);
    toollist_.Swap(&other->toollist_);
    rewardgetlist_.Swap(&other->rewardgetlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTreeDayPropBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTreeDayPropBack_descriptor_;
  metadata.reflection = GCTreeDayPropBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTreeDayReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGTreeDayReward::CGTreeDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTreeDayReward)
}

void CGTreeDayReward::InitAsDefaultInstance() {
}

CGTreeDayReward::CGTreeDayReward(const CGTreeDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTreeDayReward)
}

void CGTreeDayReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTreeDayReward::~CGTreeDayReward() {
  // @@protoc_insertion_point(destructor:CGTreeDayReward)
  SharedDtor();
}

void CGTreeDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTreeDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTreeDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTreeDayReward_descriptor_;
}

const CGTreeDayReward& CGTreeDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGTreeDayReward* CGTreeDayReward::default_instance_ = NULL;

CGTreeDayReward* CGTreeDayReward::New() const {
  return new CGTreeDayReward;
}

void CGTreeDayReward::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTreeDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTreeDayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTreeDayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTreeDayReward)
  return false;
#undef DO_
}

void CGTreeDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTreeDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTreeDayReward)
}

::google::protobuf::uint8* CGTreeDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTreeDayReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTreeDayReward)
  return target;
}

int CGTreeDayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTreeDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTreeDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTreeDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTreeDayReward::MergeFrom(const CGTreeDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTreeDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTreeDayReward::CopyFrom(const CGTreeDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTreeDayReward::IsInitialized() const {

  return true;
}

void CGTreeDayReward::Swap(CGTreeDayReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTreeDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTreeDayReward_descriptor_;
  metadata.reflection = CGTreeDayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTreeDayRewardBack::kResultFieldNumber;
const int GCTreeDayRewardBack::kRewardGetListFieldNumber;
#endif  // !_MSC_VER

GCTreeDayRewardBack::GCTreeDayRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTreeDayRewardBack)
}

void GCTreeDayRewardBack::InitAsDefaultInstance() {
}

GCTreeDayRewardBack::GCTreeDayRewardBack(const GCTreeDayRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTreeDayRewardBack)
}

void GCTreeDayRewardBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTreeDayRewardBack::~GCTreeDayRewardBack() {
  // @@protoc_insertion_point(destructor:GCTreeDayRewardBack)
  SharedDtor();
}

void GCTreeDayRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTreeDayRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTreeDayRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTreeDayRewardBack_descriptor_;
}

const GCTreeDayRewardBack& GCTreeDayRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCTreeDayRewardBack* GCTreeDayRewardBack::default_instance_ = NULL;

GCTreeDayRewardBack* GCTreeDayRewardBack::New() const {
  return new GCTreeDayRewardBack;
}

void GCTreeDayRewardBack::Clear() {
  result_ = 0;
  rewardgetlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTreeDayRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTreeDayRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardGetList;
        break;
      }

      // repeated int32 rewardGetList = 2;
      case 2: {
        if (tag == 16) {
         parse_rewardGetList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rewardgetlist())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardgetlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewardGetList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTreeDayRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTreeDayRewardBack)
  return false;
#undef DO_
}

void GCTreeDayRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTreeDayRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated int32 rewardGetList = 2;
  for (int i = 0; i < this->rewardgetlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rewardgetlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTreeDayRewardBack)
}

::google::protobuf::uint8* GCTreeDayRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTreeDayRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated int32 rewardGetList = 2;
  for (int i = 0; i < this->rewardgetlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rewardgetlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTreeDayRewardBack)
  return target;
}

int GCTreeDayRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 rewardGetList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardgetlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardgetlist(i));
    }
    total_size += 1 * this->rewardgetlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTreeDayRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTreeDayRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTreeDayRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTreeDayRewardBack::MergeFrom(const GCTreeDayRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardgetlist_.MergeFrom(from.rewardgetlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTreeDayRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTreeDayRewardBack::CopyFrom(const GCTreeDayRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTreeDayRewardBack::IsInitialized() const {

  return true;
}

void GCTreeDayRewardBack::Swap(GCTreeDayRewardBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    rewardgetlist_.Swap(&other->rewardgetlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTreeDayRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTreeDayRewardBack_descriptor_;
  metadata.reflection = GCTreeDayRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGTreeDayRank::CGTreeDayRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTreeDayRank)
}

void CGTreeDayRank::InitAsDefaultInstance() {
}

CGTreeDayRank::CGTreeDayRank(const CGTreeDayRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTreeDayRank)
}

void CGTreeDayRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTreeDayRank::~CGTreeDayRank() {
  // @@protoc_insertion_point(destructor:CGTreeDayRank)
  SharedDtor();
}

void CGTreeDayRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTreeDayRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTreeDayRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTreeDayRank_descriptor_;
}

const CGTreeDayRank& CGTreeDayRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGTreeDayRank* CGTreeDayRank::default_instance_ = NULL;

CGTreeDayRank* CGTreeDayRank::New() const {
  return new CGTreeDayRank;
}

void CGTreeDayRank::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTreeDayRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTreeDayRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGTreeDayRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTreeDayRank)
  return false;
#undef DO_
}

void CGTreeDayRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTreeDayRank)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTreeDayRank)
}

::google::protobuf::uint8* CGTreeDayRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTreeDayRank)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTreeDayRank)
  return target;
}

int CGTreeDayRank::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTreeDayRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTreeDayRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTreeDayRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTreeDayRank::MergeFrom(const CGTreeDayRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTreeDayRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTreeDayRank::CopyFrom(const CGTreeDayRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTreeDayRank::IsInitialized() const {

  return true;
}

void CGTreeDayRank::Swap(CGTreeDayRank* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTreeDayRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTreeDayRank_descriptor_;
  metadata.reflection = CGTreeDayRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTreeDayRankBack::kOperateFieldNumber;
const int GCTreeDayRankBack::kArborRankRewardsFieldNumber;
const int GCTreeDayRankBack::kArborRankListFieldNumber;
const int GCTreeDayRankBack::kMyArborRankFieldNumber;
#endif  // !_MSC_VER

GCTreeDayRankBack::GCTreeDayRankBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTreeDayRankBack)
}

void GCTreeDayRankBack::InitAsDefaultInstance() {
}

GCTreeDayRankBack::GCTreeDayRankBack(const GCTreeDayRankBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTreeDayRankBack)
}

void GCTreeDayRankBack::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  myarborrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTreeDayRankBack::~GCTreeDayRankBack() {
  // @@protoc_insertion_point(destructor:GCTreeDayRankBack)
  SharedDtor();
}

void GCTreeDayRankBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTreeDayRankBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTreeDayRankBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTreeDayRankBack_descriptor_;
}

const GCTreeDayRankBack& GCTreeDayRankBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCTreeDayRankBack* GCTreeDayRankBack::default_instance_ = NULL;

GCTreeDayRankBack* GCTreeDayRankBack::New() const {
  return new GCTreeDayRankBack;
}

void GCTreeDayRankBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTreeDayRankBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, myarborrank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arborrankrewards_.Clear();
  arborranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTreeDayRankBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTreeDayRankBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arborRankRewards;
        break;
      }

      // repeated .ActivityRankReward arborRankRewards = 2;
      case 2: {
        if (tag == 18) {
         parse_arborRankRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arborrankrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arborRankRewards;
        if (input->ExpectTag(26)) goto parse_arborRankList;
        break;
      }

      // repeated .ActivityRankInfo arborRankList = 3;
      case 3: {
        if (tag == 26) {
         parse_arborRankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arborranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_arborRankList;
        if (input->ExpectTag(32)) goto parse_myArborRank;
        break;
      }

      // optional int32 myArborRank = 4;
      case 4: {
        if (tag == 32) {
         parse_myArborRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myarborrank_)));
          set_has_myarborrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTreeDayRankBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTreeDayRankBack)
  return false;
#undef DO_
}

void GCTreeDayRankBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTreeDayRankBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .ActivityRankReward arborRankRewards = 2;
  for (int i = 0; i < this->arborrankrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arborrankrewards(i), output);
  }

  // repeated .ActivityRankInfo arborRankList = 3;
  for (int i = 0; i < this->arborranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arborranklist(i), output);
  }

  // optional int32 myArborRank = 4;
  if (has_myarborrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->myarborrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTreeDayRankBack)
}

::google::protobuf::uint8* GCTreeDayRankBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTreeDayRankBack)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .ActivityRankReward arborRankRewards = 2;
  for (int i = 0; i < this->arborrankrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arborrankrewards(i), target);
  }

  // repeated .ActivityRankInfo arborRankList = 3;
  for (int i = 0; i < this->arborranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arborranklist(i), target);
  }

  // optional int32 myArborRank = 4;
  if (has_myarborrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->myarborrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTreeDayRankBack)
  return target;
}

int GCTreeDayRankBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 myArborRank = 4;
    if (has_myarborrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myarborrank());
    }

  }
  // repeated .ActivityRankReward arborRankRewards = 2;
  total_size += 1 * this->arborrankrewards_size();
  for (int i = 0; i < this->arborrankrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arborrankrewards(i));
  }

  // repeated .ActivityRankInfo arborRankList = 3;
  total_size += 1 * this->arborranklist_size();
  for (int i = 0; i < this->arborranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arborranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTreeDayRankBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTreeDayRankBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTreeDayRankBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTreeDayRankBack::MergeFrom(const GCTreeDayRankBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  arborrankrewards_.MergeFrom(from.arborrankrewards_);
  arborranklist_.MergeFrom(from.arborranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_myarborrank()) {
      set_myarborrank(from.myarborrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTreeDayRankBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTreeDayRankBack::CopyFrom(const GCTreeDayRankBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTreeDayRankBack::IsInitialized() const {

  return true;
}

void GCTreeDayRankBack::Swap(GCTreeDayRankBack* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    arborrankrewards_.Swap(&other->arborrankrewards_);
    arborranklist_.Swap(&other->arborranklist_);
    std::swap(myarborrank_, other->myarborrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTreeDayRankBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTreeDayRankBack_descriptor_;
  metadata.reflection = GCTreeDayRankBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SweetDiceInfo::kTypeIdFieldNumber;
const int SweetDiceInfo::kNameFieldNumber;
const int SweetDiceInfo::kNeedmoneyFieldNumber;
const int SweetDiceInfo::kTenneedmoneyFieldNumber;
const int SweetDiceInfo::kItemshowFieldNumber;
const int SweetDiceInfo::kModelFieldNumber;
const int SweetDiceInfo::kScaleFieldNumber;
const int SweetDiceInfo::kRotateFieldNumber;
const int SweetDiceInfo::kPositionFieldNumber;
const int SweetDiceInfo::kNoticetxtFieldNumber;
const int SweetDiceInfo::kIconNameFieldNumber;
#endif  // !_MSC_VER

SweetDiceInfo::SweetDiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SweetDiceInfo)
}

void SweetDiceInfo::InitAsDefaultInstance() {
}

SweetDiceInfo::SweetDiceInfo(const SweetDiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SweetDiceInfo)
}

void SweetDiceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  typeid__ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tenneedmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = 0;
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noticetxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SweetDiceInfo::~SweetDiceInfo() {
  // @@protoc_insertion_point(destructor:SweetDiceInfo)
  SharedDtor();
}

void SweetDiceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete needmoney_;
  }
  if (tenneedmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tenneedmoney_;
  }
  if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemshow_;
  }
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (noticetxt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticetxt_;
  }
  if (iconname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconname_;
  }
  if (this != default_instance_) {
  }
}

void SweetDiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SweetDiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SweetDiceInfo_descriptor_;
}

const SweetDiceInfo& SweetDiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

SweetDiceInfo* SweetDiceInfo::default_instance_ = NULL;

SweetDiceInfo* SweetDiceInfo::New() const {
  return new SweetDiceInfo;
}

void SweetDiceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SweetDiceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(typeid__, model_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_needmoney()) {
      if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        needmoney_->clear();
      }
    }
    if (has_tenneedmoney()) {
      if (tenneedmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tenneedmoney_->clear();
      }
    }
    if (has_itemshow()) {
      if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemshow_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scale_->clear();
      }
    }
    if (has_rotate()) {
      if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rotate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_noticetxt()) {
      if (noticetxt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        noticetxt_->clear();
      }
    }
    if (has_iconname()) {
      if (iconname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iconname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SweetDiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SweetDiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_needmoney;
        break;
      }

      // optional string needmoney = 3;
      case 3: {
        if (tag == 26) {
         parse_needmoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->needmoney().data(), this->needmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "needmoney");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tenneedmoney;
        break;
      }

      // optional string tenneedmoney = 4;
      case 4: {
        if (tag == 34) {
         parse_tenneedmoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tenneedmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tenneedmoney().data(), this->tenneedmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tenneedmoney");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_itemshow;
        break;
      }

      // optional string itemshow = 5;
      case 5: {
        if (tag == 42) {
         parse_itemshow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemshow().data(), this->itemshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemshow");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_model;
        break;
      }

      // optional int32 model = 6;
      case 6: {
        if (tag == 48) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scale;
        break;
      }

      // optional string scale = 7;
      case 7: {
        if (tag == 58) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rotate;
        break;
      }

      // optional string rotate = 8;
      case 8: {
        if (tag == 66) {
         parse_rotate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rotate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rotate().data(), this->rotate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rotate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_position;
        break;
      }

      // optional string position = 9;
      case 9: {
        if (tag == 74) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_noticetxt;
        break;
      }

      // optional string noticetxt = 10;
      case 10: {
        if (tag == 82) {
         parse_noticetxt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noticetxt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->noticetxt().data(), this->noticetxt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "noticetxt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_iconName;
        break;
      }

      // optional string iconName = 11;
      case 11: {
        if (tag == 90) {
         parse_iconName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconname().data(), this->iconname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iconname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SweetDiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SweetDiceInfo)
  return false;
#undef DO_
}

void SweetDiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SweetDiceInfo)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string needmoney = 3;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needmoney().data(), this->needmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needmoney");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->needmoney(), output);
  }

  // optional string tenneedmoney = 4;
  if (has_tenneedmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tenneedmoney().data(), this->tenneedmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tenneedmoney");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tenneedmoney(), output);
  }

  // optional string itemshow = 5;
  if (has_itemshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshow().data(), this->itemshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->itemshow(), output);
  }

  // optional int32 model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->model(), output);
  }

  // optional string scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scale(), output);
  }

  // optional string rotate = 8;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rotate(), output);
  }

  // optional string position = 9;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->position(), output);
  }

  // optional string noticetxt = 10;
  if (has_noticetxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticetxt().data(), this->noticetxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "noticetxt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->noticetxt(), output);
  }

  // optional string iconName = 11;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconname().data(), this->iconname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->iconname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SweetDiceInfo)
}

::google::protobuf::uint8* SweetDiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SweetDiceInfo)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string needmoney = 3;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needmoney().data(), this->needmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needmoney");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->needmoney(), target);
  }

  // optional string tenneedmoney = 4;
  if (has_tenneedmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tenneedmoney().data(), this->tenneedmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tenneedmoney");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tenneedmoney(), target);
  }

  // optional string itemshow = 5;
  if (has_itemshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemshow().data(), this->itemshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemshow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->itemshow(), target);
  }

  // optional int32 model = 6;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->model(), target);
  }

  // optional string scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->scale(), target);
  }

  // optional string rotate = 8;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rotate(), target);
  }

  // optional string position = 9;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->position(), target);
  }

  // optional string noticetxt = 10;
  if (has_noticetxt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noticetxt().data(), this->noticetxt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "noticetxt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->noticetxt(), target);
  }

  // optional string iconName = 11;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconname().data(), this->iconname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iconname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->iconname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SweetDiceInfo)
  return target;
}

int SweetDiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string needmoney = 3;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needmoney());
    }

    // optional string tenneedmoney = 4;
    if (has_tenneedmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tenneedmoney());
    }

    // optional string itemshow = 5;
    if (has_itemshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemshow());
    }

    // optional int32 model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }

    // optional string scale = 7;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string rotate = 8;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rotate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string position = 9;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string noticetxt = 10;
    if (has_noticetxt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noticetxt());
    }

    // optional string iconName = 11;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SweetDiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SweetDiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SweetDiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SweetDiceInfo::MergeFrom(const SweetDiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_needmoney()) {
      set_needmoney(from.needmoney());
    }
    if (from.has_tenneedmoney()) {
      set_tenneedmoney(from.tenneedmoney());
    }
    if (from.has_itemshow()) {
      set_itemshow(from.itemshow());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_noticetxt()) {
      set_noticetxt(from.noticetxt());
    }
    if (from.has_iconname()) {
      set_iconname(from.iconname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SweetDiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SweetDiceInfo::CopyFrom(const SweetDiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SweetDiceInfo::IsInitialized() const {

  return true;
}

void SweetDiceInfo::Swap(SweetDiceInfo* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(name_, other->name_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(tenneedmoney_, other->tenneedmoney_);
    std::swap(itemshow_, other->itemshow_);
    std::swap(model_, other->model_);
    std::swap(scale_, other->scale_);
    std::swap(rotate_, other->rotate_);
    std::swap(position_, other->position_);
    std::swap(noticetxt_, other->noticetxt_);
    std::swap(iconname_, other->iconname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SweetDiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SweetDiceInfo_descriptor_;
  metadata.reflection = SweetDiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSweetDice::kTypeIdFieldNumber;
const int PlayerSweetDice::kPosIdFieldNumber;
const int PlayerSweetDice::kFreeTimesFieldNumber;
const int PlayerSweetDice::kSweetDiceNumFieldNumber;
#endif  // !_MSC_VER

PlayerSweetDice::PlayerSweetDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerSweetDice)
}

void PlayerSweetDice::InitAsDefaultInstance() {
}

PlayerSweetDice::PlayerSweetDice(const PlayerSweetDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerSweetDice)
}

void PlayerSweetDice::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  posid_ = 0;
  freetimes_ = 0;
  sweetdicenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSweetDice::~PlayerSweetDice() {
  // @@protoc_insertion_point(destructor:PlayerSweetDice)
  SharedDtor();
}

void PlayerSweetDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSweetDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSweetDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSweetDice_descriptor_;
}

const PlayerSweetDice& PlayerSweetDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

PlayerSweetDice* PlayerSweetDice::default_instance_ = NULL;

PlayerSweetDice* PlayerSweetDice::New() const {
  return new PlayerSweetDice;
}

void PlayerSweetDice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerSweetDice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typeid__, sweetdicenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerSweetDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerSweetDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_posId;
        break;
      }

      // optional int32 posId = 2;
      case 2: {
        if (tag == 16) {
         parse_posId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_freeTimes;
        break;
      }

      // optional int32 freeTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_freeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetimes_)));
          set_has_freetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sweetDiceNum;
        break;
      }

      // optional int32 sweetDiceNum = 4;
      case 4: {
        if (tag == 32) {
         parse_sweetDiceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweetdicenum_)));
          set_has_sweetdicenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerSweetDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerSweetDice)
  return false;
#undef DO_
}

void PlayerSweetDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerSweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 posId = 2;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posid(), output);
  }

  // optional int32 freeTimes = 3;
  if (has_freetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freetimes(), output);
  }

  // optional int32 sweetDiceNum = 4;
  if (has_sweetdicenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sweetdicenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerSweetDice)
}

::google::protobuf::uint8* PlayerSweetDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerSweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 posId = 2;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posid(), target);
  }

  // optional int32 freeTimes = 3;
  if (has_freetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freetimes(), target);
  }

  // optional int32 sweetDiceNum = 4;
  if (has_sweetdicenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sweetdicenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerSweetDice)
  return target;
}

int PlayerSweetDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 posId = 2;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

    // optional int32 freeTimes = 3;
    if (has_freetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetimes());
    }

    // optional int32 sweetDiceNum = 4;
    if (has_sweetdicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweetdicenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSweetDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSweetDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSweetDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerSweetDice::MergeFrom(const PlayerSweetDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_freetimes()) {
      set_freetimes(from.freetimes());
    }
    if (from.has_sweetdicenum()) {
      set_sweetdicenum(from.sweetdicenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerSweetDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSweetDice::CopyFrom(const PlayerSweetDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSweetDice::IsInitialized() const {

  return true;
}

void PlayerSweetDice::Swap(PlayerSweetDice* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(posid_, other->posid_);
    std::swap(freetimes_, other->freetimes_);
    std::swap(sweetdicenum_, other->sweetdicenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerSweetDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSweetDice_descriptor_;
  metadata.reflection = PlayerSweetDice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSweetDice::kTypeIdFieldNumber;
const int CGSweetDice::kOperateFieldNumber;
const int CGSweetDice::kFreeFlagFieldNumber;
#endif  // !_MSC_VER

CGSweetDice::CGSweetDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSweetDice)
}

void CGSweetDice::InitAsDefaultInstance() {
}

CGSweetDice::CGSweetDice(const CGSweetDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSweetDice)
}

void CGSweetDice::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  operate_ = 0;
  freeflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSweetDice::~CGSweetDice() {
  // @@protoc_insertion_point(destructor:CGSweetDice)
  SharedDtor();
}

void CGSweetDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSweetDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSweetDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSweetDice_descriptor_;
}

const CGSweetDice& CGSweetDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGSweetDice* CGSweetDice::default_instance_ = NULL;

CGSweetDice* CGSweetDice::New() const {
  return new CGSweetDice;
}

void CGSweetDice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSweetDice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typeid__, freeflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSweetDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSweetDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_freeFlag;
        break;
      }

      // optional int32 freeFlag = 3;
      case 3: {
        if (tag == 24) {
         parse_freeFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeflag_)));
          set_has_freeflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSweetDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSweetDice)
  return false;
#undef DO_
}

void CGSweetDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // optional int32 freeFlag = 3;
  if (has_freeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freeflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSweetDice)
}

::google::protobuf::uint8* CGSweetDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // optional int32 freeFlag = 3;
  if (has_freeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freeflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSweetDice)
  return target;
}

int CGSweetDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 freeFlag = 3;
    if (has_freeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSweetDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSweetDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSweetDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSweetDice::MergeFrom(const CGSweetDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_freeflag()) {
      set_freeflag(from.freeflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSweetDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSweetDice::CopyFrom(const CGSweetDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSweetDice::IsInitialized() const {

  return true;
}

void CGSweetDice::Swap(CGSweetDice* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(operate_, other->operate_);
    std::swap(freeflag_, other->freeflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSweetDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSweetDice_descriptor_;
  metadata.reflection = CGSweetDice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSweetDice::kOperateFieldNumber;
const int GCSweetDice::kSweetDiceDataFieldNumber;
const int GCSweetDice::kPlayerSweetDiceDataFieldNumber;
const int GCSweetDice::kPlayerSweetDiceFieldNumber;
const int GCSweetDice::kTenPosListFieldNumber;
#endif  // !_MSC_VER

GCSweetDice::GCSweetDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSweetDice)
}

void GCSweetDice::InitAsDefaultInstance() {
  playersweetdice_ = const_cast< ::PlayerSweetDice*>(&::PlayerSweetDice::default_instance());
}

GCSweetDice::GCSweetDice(const GCSweetDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSweetDice)
}

void GCSweetDice::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  playersweetdice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSweetDice::~GCSweetDice() {
  // @@protoc_insertion_point(destructor:GCSweetDice)
  SharedDtor();
}

void GCSweetDice::SharedDtor() {
  if (this != default_instance_) {
    delete playersweetdice_;
  }
}

void GCSweetDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSweetDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSweetDice_descriptor_;
}

const GCSweetDice& GCSweetDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

GCSweetDice* GCSweetDice::default_instance_ = NULL;

GCSweetDice* GCSweetDice::New() const {
  return new GCSweetDice;
}

void GCSweetDice::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    operate_ = 0;
    if (has_playersweetdice()) {
      if (playersweetdice_ != NULL) playersweetdice_->::PlayerSweetDice::Clear();
    }
  }
  sweetdicedata_.Clear();
  playersweetdicedata_.Clear();
  tenposlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSweetDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSweetDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sweetDiceData;
        break;
      }

      // repeated .SweetDiceInfo sweetDiceData = 2;
      case 2: {
        if (tag == 18) {
         parse_sweetDiceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sweetdicedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sweetDiceData;
        if (input->ExpectTag(26)) goto parse_playerSweetDiceData;
        break;
      }

      // repeated .PlayerSweetDice playerSweetDiceData = 3;
      case 3: {
        if (tag == 26) {
         parse_playerSweetDiceData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playersweetdicedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerSweetDiceData;
        if (input->ExpectTag(34)) goto parse_playerSweetDice;
        break;
      }

      // optional .PlayerSweetDice playerSweetDice = 4;
      case 4: {
        if (tag == 34) {
         parse_playerSweetDice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersweetdice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tenPosList;
        break;
      }

      // repeated int32 tenPosList = 5;
      case 5: {
        if (tag == 40) {
         parse_tenPosList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_tenposlist())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tenposlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tenPosList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSweetDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSweetDice)
  return false;
#undef DO_
}

void GCSweetDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSweetDice)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .SweetDiceInfo sweetDiceData = 2;
  for (int i = 0; i < this->sweetdicedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sweetdicedata(i), output);
  }

  // repeated .PlayerSweetDice playerSweetDiceData = 3;
  for (int i = 0; i < this->playersweetdicedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playersweetdicedata(i), output);
  }

  // optional .PlayerSweetDice playerSweetDice = 4;
  if (has_playersweetdice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playersweetdice(), output);
  }

  // repeated int32 tenPosList = 5;
  for (int i = 0; i < this->tenposlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->tenposlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSweetDice)
}

::google::protobuf::uint8* GCSweetDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSweetDice)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .SweetDiceInfo sweetDiceData = 2;
  for (int i = 0; i < this->sweetdicedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sweetdicedata(i), target);
  }

  // repeated .PlayerSweetDice playerSweetDiceData = 3;
  for (int i = 0; i < this->playersweetdicedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playersweetdicedata(i), target);
  }

  // optional .PlayerSweetDice playerSweetDice = 4;
  if (has_playersweetdice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playersweetdice(), target);
  }

  // repeated int32 tenPosList = 5;
  for (int i = 0; i < this->tenposlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->tenposlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSweetDice)
  return target;
}

int GCSweetDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional .PlayerSweetDice playerSweetDice = 4;
    if (has_playersweetdice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersweetdice());
    }

  }
  // repeated .SweetDiceInfo sweetDiceData = 2;
  total_size += 1 * this->sweetdicedata_size();
  for (int i = 0; i < this->sweetdicedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sweetdicedata(i));
  }

  // repeated .PlayerSweetDice playerSweetDiceData = 3;
  total_size += 1 * this->playersweetdicedata_size();
  for (int i = 0; i < this->playersweetdicedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playersweetdicedata(i));
  }

  // repeated int32 tenPosList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->tenposlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tenposlist(i));
    }
    total_size += 1 * this->tenposlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSweetDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSweetDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSweetDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSweetDice::MergeFrom(const GCSweetDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  sweetdicedata_.MergeFrom(from.sweetdicedata_);
  playersweetdicedata_.MergeFrom(from.playersweetdicedata_);
  tenposlist_.MergeFrom(from.tenposlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_playersweetdice()) {
      mutable_playersweetdice()->::PlayerSweetDice::MergeFrom(from.playersweetdice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSweetDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSweetDice::CopyFrom(const GCSweetDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSweetDice::IsInitialized() const {

  return true;
}

void GCSweetDice::Swap(GCSweetDice* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    sweetdicedata_.Swap(&other->sweetdicedata_);
    playersweetdicedata_.Swap(&other->playersweetdicedata_);
    std::swap(playersweetdice_, other->playersweetdice_);
    tenposlist_.Swap(&other->tenposlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSweetDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSweetDice_descriptor_;
  metadata.reflection = GCSweetDice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetSweetDiceItem::kTypeIdFieldNumber;
#endif  // !_MSC_VER

CGGetSweetDiceItem::CGGetSweetDiceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetSweetDiceItem)
}

void CGGetSweetDiceItem::InitAsDefaultInstance() {
}

CGGetSweetDiceItem::CGGetSweetDiceItem(const CGGetSweetDiceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetSweetDiceItem)
}

void CGGetSweetDiceItem::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetSweetDiceItem::~CGGetSweetDiceItem() {
  // @@protoc_insertion_point(destructor:CGGetSweetDiceItem)
  SharedDtor();
}

void CGGetSweetDiceItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetSweetDiceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetSweetDiceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetSweetDiceItem_descriptor_;
}

const CGGetSweetDiceItem& CGGetSweetDiceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGGetSweetDiceItem* CGGetSweetDiceItem::default_instance_ = NULL;

CGGetSweetDiceItem* CGGetSweetDiceItem::New() const {
  return new CGGetSweetDiceItem;
}

void CGGetSweetDiceItem::Clear() {
  typeid__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetSweetDiceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetSweetDiceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetSweetDiceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetSweetDiceItem)
  return false;
#undef DO_
}

void CGGetSweetDiceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetSweetDiceItem)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetSweetDiceItem)
}

::google::protobuf::uint8* CGGetSweetDiceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetSweetDiceItem)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetSweetDiceItem)
  return target;
}

int CGGetSweetDiceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetSweetDiceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetSweetDiceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetSweetDiceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetSweetDiceItem::MergeFrom(const CGGetSweetDiceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetSweetDiceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetSweetDiceItem::CopyFrom(const CGGetSweetDiceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetSweetDiceItem::IsInitialized() const {

  return true;
}

void CGGetSweetDiceItem::Swap(CGGetSweetDiceItem* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetSweetDiceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetSweetDiceItem_descriptor_;
  metadata.reflection = CGGetSweetDiceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuySweetDice::kTypeIdFieldNumber;
const int CGBuySweetDice::kBuySweetDiceNumFieldNumber;
#endif  // !_MSC_VER

CGBuySweetDice::CGBuySweetDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuySweetDice)
}

void CGBuySweetDice::InitAsDefaultInstance() {
}

CGBuySweetDice::CGBuySweetDice(const CGBuySweetDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuySweetDice)
}

void CGBuySweetDice::SharedCtor() {
  _cached_size_ = 0;
  typeid__ = 0;
  buysweetdicenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuySweetDice::~CGBuySweetDice() {
  // @@protoc_insertion_point(destructor:CGBuySweetDice)
  SharedDtor();
}

void CGBuySweetDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuySweetDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuySweetDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuySweetDice_descriptor_;
}

const CGBuySweetDice& CGBuySweetDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityMessage_2eproto();
  return *default_instance_;
}

CGBuySweetDice* CGBuySweetDice::default_instance_ = NULL;

CGBuySweetDice* CGBuySweetDice::New() const {
  return new CGBuySweetDice;
}

void CGBuySweetDice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBuySweetDice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typeid__, buysweetdicenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuySweetDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuySweetDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 typeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buySweetDiceNum;
        break;
      }

      // optional int32 buySweetDiceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_buySweetDiceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buysweetdicenum_)));
          set_has_buysweetdicenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuySweetDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuySweetDice)
  return false;
#undef DO_
}

void CGBuySweetDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuySweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // optional int32 buySweetDiceNum = 2;
  if (has_buysweetdicenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buysweetdicenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuySweetDice)
}

::google::protobuf::uint8* CGBuySweetDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuySweetDice)
  // optional int32 typeId = 1;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // optional int32 buySweetDiceNum = 2;
  if (has_buysweetdicenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buysweetdicenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuySweetDice)
  return target;
}

int CGBuySweetDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 typeId = 1;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 buySweetDiceNum = 2;
    if (has_buysweetdicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buysweetdicenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuySweetDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuySweetDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuySweetDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuySweetDice::MergeFrom(const CGBuySweetDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_buysweetdicenum()) {
      set_buysweetdicenum(from.buysweetdicenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuySweetDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuySweetDice::CopyFrom(const CGBuySweetDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuySweetDice::IsInitialized() const {

  return true;
}

void CGBuySweetDice::Swap(CGBuySweetDice* other) {
  if (other != this) {
    std::swap(typeid__, other->typeid__);
    std::swap(buysweetdicenum_, other->buysweetdicenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuySweetDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuySweetDice_descriptor_;
  metadata.reflection = CGBuySweetDice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
