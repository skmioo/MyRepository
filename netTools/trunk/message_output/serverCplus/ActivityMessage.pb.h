// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityMessage.proto

#ifndef PROTOBUF_ActivityMessage_2eproto__INCLUDED
#define PROTOBUF_ActivityMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonMessage.pb.h"
#include "InnerMessage.pb.h"
#include "ActivityRankMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActivityMessage_2eproto();
void protobuf_AssignDesc_ActivityMessage_2eproto();
void protobuf_ShutdownFile_ActivityMessage_2eproto();

class GCActivity;
class CGActivityOprateEvent;
class GCActivityOprateEvent;
class OpActivityInfo;
class CGOpActivityInfo;
class GCOpActivityInfo;
class GCIOSActivityOpen;
class EggInfo;
class HatchEggInfo;
class GCInitChickenActivity;
class CGEggHatch;
class GCEggHatchBack;
class RedBagInfo;
class GCInitRedBagInfo;
class CGGetRedBag;
class GCGetRedBagBack;
class NewYearLuckyDrawHistory;
class CGNewYearLuckyDraw;
class GCNewYearLuckyDrawBack;
class CGNewYearLuckyDrawRank;
class GCNewYearLuckyDrawRank;
class FlowerBabyHistory;
class CGGetFlowerBabyInfo;
class GCGetFlowerBabyInfoBack;
class CGGiveFlower;
class GCGiveFlowerBack;
class FlowerRewardItem;
class CGGiveFlowerReward;
class GCGiveFlowerRewardBack;
class CGFlowerBabyRank;
class GCFlowerBabyRank;
class TreeInfo;
class TreeToolInfo;
class CGTreeDayProp;
class GCTreeDayPropBack;
class CGTreeDayReward;
class GCTreeDayRewardBack;
class CGTreeDayRank;
class GCTreeDayRankBack;
class SweetDiceInfo;
class PlayerSweetDice;
class CGSweetDice;
class GCSweetDice;
class CGGetSweetDiceItem;
class CGBuySweetDice;

// ===================================================================

class GCActivity : public ::google::protobuf::Message {
 public:
  GCActivity();
  virtual ~GCActivity();

  GCActivity(const GCActivity& from);

  inline GCActivity& operator=(const GCActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCActivity& default_instance();

  void Swap(GCActivity* other);

  // implements Message ----------------------------------------------

  GCActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCActivity& from);
  void MergeFrom(const GCActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCActivity)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 endtime_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCActivity* default_instance_;
};
// -------------------------------------------------------------------

class CGActivityOprateEvent : public ::google::protobuf::Message {
 public:
  CGActivityOprateEvent();
  virtual ~CGActivityOprateEvent();

  CGActivityOprateEvent(const CGActivityOprateEvent& from);

  inline CGActivityOprateEvent& operator=(const CGActivityOprateEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGActivityOprateEvent& default_instance();

  void Swap(CGActivityOprateEvent* other);

  // implements Message ----------------------------------------------

  CGActivityOprateEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGActivityOprateEvent& from);
  void MergeFrom(const CGActivityOprateEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .EntryStrStr params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline const ::EntryStrStr& params(int index) const;
  inline ::EntryStrStr* mutable_params(int index);
  inline ::EntryStrStr* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::EntryStrStr >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntryStrStr >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:CGActivityOprateEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::EntryStrStr > params_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGActivityOprateEvent* default_instance_;
};
// -------------------------------------------------------------------

class GCActivityOprateEvent : public ::google::protobuf::Message {
 public:
  GCActivityOprateEvent();
  virtual ~GCActivityOprateEvent();

  GCActivityOprateEvent(const GCActivityOprateEvent& from);

  inline GCActivityOprateEvent& operator=(const GCActivityOprateEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCActivityOprateEvent& default_instance();

  void Swap(GCActivityOprateEvent* other);

  // implements Message ----------------------------------------------

  GCActivityOprateEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCActivityOprateEvent& from);
  void MergeFrom(const GCActivityOprateEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCActivityOprateEvent)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCActivityOprateEvent* default_instance_;
};
// -------------------------------------------------------------------

class OpActivityInfo : public ::google::protobuf::Message {
 public:
  OpActivityInfo();
  virtual ~OpActivityInfo();

  OpActivityInfo(const OpActivityInfo& from);

  inline OpActivityInfo& operator=(const OpActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpActivityInfo& default_instance();

  void Swap(OpActivityInfo* other);

  // implements Message ----------------------------------------------

  OpActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpActivityInfo& from);
  void MergeFrom(const OpActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 btype = 1;
  inline bool has_btype() const;
  inline void clear_btype();
  static const int kBtypeFieldNumber = 1;
  inline ::google::protobuf::int32 btype() const;
  inline void set_btype(::google::protobuf::int32 value);

  // optional int32 stype = 2;
  inline bool has_stype() const;
  inline void clear_stype();
  static const int kStypeFieldNumber = 2;
  inline ::google::protobuf::int32 stype() const;
  inline void set_stype(::google::protobuf::int32 value);

  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int64 remainTime = 4;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 4;
  inline ::google::protobuf::int64 remaintime() const;
  inline void set_remaintime(::google::protobuf::int64 value);

  // optional int64 startTime = 5;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 endTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int32 actId = 7;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 7;
  inline ::google::protobuf::int32 actid() const;
  inline void set_actid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:OpActivityInfo)
 private:
  inline void set_has_btype();
  inline void clear_has_btype();
  inline void set_has_stype();
  inline void clear_has_stype();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_actid();
  inline void clear_has_actid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 btype_;
  ::google::protobuf::int32 stype_;
  ::google::protobuf::int64 remaintime_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 actid_;
  ::google::protobuf::int64 endtime_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static OpActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGOpActivityInfo : public ::google::protobuf::Message {
 public:
  CGOpActivityInfo();
  virtual ~CGOpActivityInfo();

  CGOpActivityInfo(const CGOpActivityInfo& from);

  inline CGOpActivityInfo& operator=(const CGOpActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGOpActivityInfo& default_instance();

  void Swap(CGOpActivityInfo* other);

  // implements Message ----------------------------------------------

  CGOpActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGOpActivityInfo& from);
  void MergeFrom(const CGOpActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGOpActivityInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGOpActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCOpActivityInfo : public ::google::protobuf::Message {
 public:
  GCOpActivityInfo();
  virtual ~GCOpActivityInfo();

  GCOpActivityInfo(const GCOpActivityInfo& from);

  inline GCOpActivityInfo& operator=(const GCOpActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCOpActivityInfo& default_instance();

  void Swap(GCOpActivityInfo* other);

  // implements Message ----------------------------------------------

  GCOpActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCOpActivityInfo& from);
  void MergeFrom(const GCOpActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OpActivityInfo activityList = 1;
  inline int activitylist_size() const;
  inline void clear_activitylist();
  static const int kActivityListFieldNumber = 1;
  inline const ::OpActivityInfo& activitylist(int index) const;
  inline ::OpActivityInfo* mutable_activitylist(int index);
  inline ::OpActivityInfo* add_activitylist();
  inline const ::google::protobuf::RepeatedPtrField< ::OpActivityInfo >&
      activitylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::OpActivityInfo >*
      mutable_activitylist();

  // @@protoc_insertion_point(class_scope:GCOpActivityInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OpActivityInfo > activitylist_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCOpActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCIOSActivityOpen : public ::google::protobuf::Message {
 public:
  GCIOSActivityOpen();
  virtual ~GCIOSActivityOpen();

  GCIOSActivityOpen(const GCIOSActivityOpen& from);

  inline GCIOSActivityOpen& operator=(const GCIOSActivityOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCIOSActivityOpen& default_instance();

  void Swap(GCIOSActivityOpen* other);

  // implements Message ----------------------------------------------

  GCIOSActivityOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCIOSActivityOpen& from);
  void MergeFrom(const GCIOSActivityOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 cdkOpen = 2;
  inline bool has_cdkopen() const;
  inline void clear_cdkopen();
  static const int kCdkOpenFieldNumber = 2;
  inline ::google::protobuf::int32 cdkopen() const;
  inline void set_cdkopen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCIOSActivityOpen)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_cdkopen();
  inline void clear_has_cdkopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 cdkopen_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCIOSActivityOpen* default_instance_;
};
// -------------------------------------------------------------------

class EggInfo : public ::google::protobuf::Message {
 public:
  EggInfo();
  virtual ~EggInfo();

  EggInfo(const EggInfo& from);

  inline EggInfo& operator=(const EggInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EggInfo& default_instance();

  void Swap(EggInfo* other);

  // implements Message ----------------------------------------------

  EggInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EggInfo& from);
  void MergeFrom(const EggInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int64 hatchEndTime = 3;
  inline bool has_hatchendtime() const;
  inline void clear_hatchendtime();
  static const int kHatchEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 hatchendtime() const;
  inline void set_hatchendtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:EggInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_hatchendtime();
  inline void clear_has_hatchendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 hatchendtime_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static EggInfo* default_instance_;
};
// -------------------------------------------------------------------

class HatchEggInfo : public ::google::protobuf::Message {
 public:
  HatchEggInfo();
  virtual ~HatchEggInfo();

  HatchEggInfo(const HatchEggInfo& from);

  inline HatchEggInfo& operator=(const HatchEggInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HatchEggInfo& default_instance();

  void Swap(HatchEggInfo* other);

  // implements Message ----------------------------------------------

  HatchEggInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HatchEggInfo& from);
  void MergeFrom(const HatchEggInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string time2Jintiao = 2;
  inline bool has_time2jintiao() const;
  inline void clear_time2jintiao();
  static const int kTime2JintiaoFieldNumber = 2;
  inline const ::std::string& time2jintiao() const;
  inline void set_time2jintiao(const ::std::string& value);
  inline void set_time2jintiao(const char* value);
  inline void set_time2jintiao(const char* value, size_t size);
  inline ::std::string* mutable_time2jintiao();
  inline ::std::string* release_time2jintiao();
  inline void set_allocated_time2jintiao(::std::string* time2jintiao);

  // repeated .Iteminfo needItems = 3;
  inline int needitems_size() const;
  inline void clear_needitems();
  static const int kNeedItemsFieldNumber = 3;
  inline const ::Iteminfo& needitems(int index) const;
  inline ::Iteminfo* mutable_needitems(int index);
  inline ::Iteminfo* add_needitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      needitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_needitems();

  // @@protoc_insertion_point(class_scope:HatchEggInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time2jintiao();
  inline void clear_has_time2jintiao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* time2jintiao_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > needitems_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static HatchEggInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCInitChickenActivity : public ::google::protobuf::Message {
 public:
  GCInitChickenActivity();
  virtual ~GCInitChickenActivity();

  GCInitChickenActivity(const GCInitChickenActivity& from);

  inline GCInitChickenActivity& operator=(const GCInitChickenActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCInitChickenActivity& default_instance();

  void Swap(GCInitChickenActivity* other);

  // implements Message ----------------------------------------------

  GCInitChickenActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCInitChickenActivity& from);
  void MergeFrom(const GCInitChickenActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 activityId = 1;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 1;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .EggInfo eggInfo = 3;
  inline bool has_egginfo() const;
  inline void clear_egginfo();
  static const int kEggInfoFieldNumber = 3;
  inline const ::EggInfo& egginfo() const;
  inline ::EggInfo* mutable_egginfo();
  inline ::EggInfo* release_egginfo();
  inline void set_allocated_egginfo(::EggInfo* egginfo);

  // repeated .Iteminfo chickenItemArr = 4;
  inline int chickenitemarr_size() const;
  inline void clear_chickenitemarr();
  static const int kChickenItemArrFieldNumber = 4;
  inline const ::Iteminfo& chickenitemarr(int index) const;
  inline ::Iteminfo* mutable_chickenitemarr(int index);
  inline ::Iteminfo* add_chickenitemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      chickenitemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_chickenitemarr();

  // repeated .HatchEggInfo hatchEggTemplate = 5;
  inline int hatcheggtemplate_size() const;
  inline void clear_hatcheggtemplate();
  static const int kHatchEggTemplateFieldNumber = 5;
  inline const ::HatchEggInfo& hatcheggtemplate(int index) const;
  inline ::HatchEggInfo* mutable_hatcheggtemplate(int index);
  inline ::HatchEggInfo* add_hatcheggtemplate();
  inline const ::google::protobuf::RepeatedPtrField< ::HatchEggInfo >&
      hatcheggtemplate() const;
  inline ::google::protobuf::RepeatedPtrField< ::HatchEggInfo >*
      mutable_hatcheggtemplate();

  // optional int32 actType = 6;
  inline bool has_acttype() const;
  inline void clear_acttype();
  static const int kActTypeFieldNumber = 6;
  inline ::google::protobuf::int32 acttype() const;
  inline void set_acttype(::google::protobuf::int32 value);

  // optional string model1 = 7;
  inline bool has_model1() const;
  inline void clear_model1();
  static const int kModel1FieldNumber = 7;
  inline const ::std::string& model1() const;
  inline void set_model1(const ::std::string& value);
  inline void set_model1(const char* value);
  inline void set_model1(const char* value, size_t size);
  inline ::std::string* mutable_model1();
  inline ::std::string* release_model1();
  inline void set_allocated_model1(::std::string* model1);

  // optional string model2 = 8;
  inline bool has_model2() const;
  inline void clear_model2();
  static const int kModel2FieldNumber = 8;
  inline const ::std::string& model2() const;
  inline void set_model2(const ::std::string& value);
  inline void set_model2(const char* value);
  inline void set_model2(const char* value, size_t size);
  inline ::std::string* mutable_model2();
  inline ::std::string* release_model2();
  inline void set_allocated_model2(::std::string* model2);

  // @@protoc_insertion_point(class_scope:GCInitChickenActivity)
 private:
  inline void set_has_activityid();
  inline void clear_has_activityid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_egginfo();
  inline void clear_has_egginfo();
  inline void set_has_acttype();
  inline void clear_has_acttype();
  inline void set_has_model1();
  inline void clear_has_model1();
  inline void set_has_model2();
  inline void clear_has_model2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::EggInfo* egginfo_;
  ::google::protobuf::int32 activityid_;
  ::google::protobuf::int32 acttype_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > chickenitemarr_;
  ::google::protobuf::RepeatedPtrField< ::HatchEggInfo > hatcheggtemplate_;
  ::std::string* model1_;
  ::std::string* model2_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCInitChickenActivity* default_instance_;
};
// -------------------------------------------------------------------

class CGEggHatch : public ::google::protobuf::Message {
 public:
  CGEggHatch();
  virtual ~CGEggHatch();

  CGEggHatch(const CGEggHatch& from);

  inline CGEggHatch& operator=(const CGEggHatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGEggHatch& default_instance();

  void Swap(CGEggHatch* other);

  // implements Message ----------------------------------------------

  CGEggHatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGEggHatch& from);
  void MergeFrom(const CGEggHatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 operator = 3;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 3;
  inline ::google::protobuf::int32 operator_() const;
  inline void set_operator_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGEggHatch)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_operator_();
  inline void clear_has_operator_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 operator__;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGEggHatch* default_instance_;
};
// -------------------------------------------------------------------

class GCEggHatchBack : public ::google::protobuf::Message {
 public:
  GCEggHatchBack();
  virtual ~GCEggHatchBack();

  GCEggHatchBack(const GCEggHatchBack& from);

  inline GCEggHatchBack& operator=(const GCEggHatchBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCEggHatchBack& default_instance();

  void Swap(GCEggHatchBack* other);

  // implements Message ----------------------------------------------

  GCEggHatchBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCEggHatchBack& from);
  void MergeFrom(const GCEggHatchBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .EggInfo eggInfo = 2;
  inline bool has_egginfo() const;
  inline void clear_egginfo();
  static const int kEggInfoFieldNumber = 2;
  inline const ::EggInfo& egginfo() const;
  inline ::EggInfo* mutable_egginfo();
  inline ::EggInfo* release_egginfo();
  inline void set_allocated_egginfo(::EggInfo* egginfo);

  // @@protoc_insertion_point(class_scope:GCEggHatchBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_egginfo();
  inline void clear_has_egginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::EggInfo* egginfo_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCEggHatchBack* default_instance_;
};
// -------------------------------------------------------------------

class RedBagInfo : public ::google::protobuf::Message {
 public:
  RedBagInfo();
  virtual ~RedBagInfo();

  RedBagInfo(const RedBagInfo& from);

  inline RedBagInfo& operator=(const RedBagInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedBagInfo& default_instance();

  void Swap(RedBagInfo* other);

  // implements Message ----------------------------------------------

  RedBagInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedBagInfo& from);
  void MergeFrom(const RedBagInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int64 createTime = 3;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 3;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 expiryTime = 4;
  inline bool has_expirytime() const;
  inline void clear_expirytime();
  static const int kExpiryTimeFieldNumber = 4;
  inline ::google::protobuf::int64 expirytime() const;
  inline void set_expirytime(::google::protobuf::int64 value);

  // repeated .Iteminfo rewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  inline const ::Iteminfo& rewardarr(int index) const;
  inline ::Iteminfo* mutable_rewardarr(int index);
  inline ::Iteminfo* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_rewardarr();

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string title = 7;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 7;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:RedBagInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_expirytime();
  inline void clear_has_expirytime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 expirytime_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > rewardarr_;
  ::std::string* name_;
  ::std::string* title_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static RedBagInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCInitRedBagInfo : public ::google::protobuf::Message {
 public:
  GCInitRedBagInfo();
  virtual ~GCInitRedBagInfo();

  GCInitRedBagInfo(const GCInitRedBagInfo& from);

  inline GCInitRedBagInfo& operator=(const GCInitRedBagInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCInitRedBagInfo& default_instance();

  void Swap(GCInitRedBagInfo* other);

  // implements Message ----------------------------------------------

  GCInitRedBagInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCInitRedBagInfo& from);
  void MergeFrom(const GCInitRedBagInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RedBagInfo redBagArr = 1;
  inline int redbagarr_size() const;
  inline void clear_redbagarr();
  static const int kRedBagArrFieldNumber = 1;
  inline const ::RedBagInfo& redbagarr(int index) const;
  inline ::RedBagInfo* mutable_redbagarr(int index);
  inline ::RedBagInfo* add_redbagarr();
  inline const ::google::protobuf::RepeatedPtrField< ::RedBagInfo >&
      redbagarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::RedBagInfo >*
      mutable_redbagarr();

  // optional int32 operator = 2;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 2;
  inline ::google::protobuf::int32 operator_() const;
  inline void set_operator_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCInitRedBagInfo)
 private:
  inline void set_has_operator_();
  inline void clear_has_operator_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RedBagInfo > redbagarr_;
  ::google::protobuf::int32 operator__;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCInitRedBagInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGGetRedBag : public ::google::protobuf::Message {
 public:
  CGGetRedBag();
  virtual ~CGGetRedBag();

  CGGetRedBag(const CGGetRedBag& from);

  inline CGGetRedBag& operator=(const CGGetRedBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetRedBag& default_instance();

  void Swap(CGGetRedBag* other);

  // implements Message ----------------------------------------------

  CGGetRedBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetRedBag& from);
  void MergeFrom(const CGGetRedBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 operator = 2;
  inline bool has_operator_() const;
  inline void clear_operator_();
  static const int kOperatorFieldNumber = 2;
  inline ::google::protobuf::int32 operator_() const;
  inline void set_operator_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGetRedBag)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_operator_();
  inline void clear_has_operator_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 operator__;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetRedBag* default_instance_;
};
// -------------------------------------------------------------------

class GCGetRedBagBack : public ::google::protobuf::Message {
 public:
  GCGetRedBagBack();
  virtual ~GCGetRedBagBack();

  GCGetRedBagBack(const GCGetRedBagBack& from);

  inline GCGetRedBagBack& operator=(const GCGetRedBagBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetRedBagBack& default_instance();

  void Swap(GCGetRedBagBack* other);

  // implements Message ----------------------------------------------

  GCGetRedBagBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetRedBagBack& from);
  void MergeFrom(const GCGetRedBagBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated int32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:GCGetRedBagBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetRedBagBack* default_instance_;
};
// -------------------------------------------------------------------

class NewYearLuckyDrawHistory : public ::google::protobuf::Message {
 public:
  NewYearLuckyDrawHistory();
  virtual ~NewYearLuckyDrawHistory();

  NewYearLuckyDrawHistory(const NewYearLuckyDrawHistory& from);

  inline NewYearLuckyDrawHistory& operator=(const NewYearLuckyDrawHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearLuckyDrawHistory& default_instance();

  void Swap(NewYearLuckyDrawHistory* other);

  // implements Message ----------------------------------------------

  NewYearLuckyDrawHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearLuckyDrawHistory& from);
  void MergeFrom(const NewYearLuckyDrawHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional .Iteminfo itemInfo = 2;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 2;
  inline const ::Iteminfo& iteminfo() const;
  inline ::Iteminfo* mutable_iteminfo();
  inline ::Iteminfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Iteminfo* iteminfo);

  // @@protoc_insertion_point(class_scope:NewYearLuckyDrawHistory)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::Iteminfo* iteminfo_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static NewYearLuckyDrawHistory* default_instance_;
};
// -------------------------------------------------------------------

class CGNewYearLuckyDraw : public ::google::protobuf::Message {
 public:
  CGNewYearLuckyDraw();
  virtual ~CGNewYearLuckyDraw();

  CGNewYearLuckyDraw(const CGNewYearLuckyDraw& from);

  inline CGNewYearLuckyDraw& operator=(const CGNewYearLuckyDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGNewYearLuckyDraw& default_instance();

  void Swap(CGNewYearLuckyDraw* other);

  // implements Message ----------------------------------------------

  CGNewYearLuckyDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGNewYearLuckyDraw& from);
  void MergeFrom(const CGNewYearLuckyDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operateType = 1;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatetype() const;
  inline void set_operatetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGNewYearLuckyDraw)
 private:
  inline void set_has_operatetype();
  inline void clear_has_operatetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operatetype_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGNewYearLuckyDraw* default_instance_;
};
// -------------------------------------------------------------------

class GCNewYearLuckyDrawBack : public ::google::protobuf::Message {
 public:
  GCNewYearLuckyDrawBack();
  virtual ~GCNewYearLuckyDrawBack();

  GCNewYearLuckyDrawBack(const GCNewYearLuckyDrawBack& from);

  inline GCNewYearLuckyDrawBack& operator=(const GCNewYearLuckyDrawBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCNewYearLuckyDrawBack& default_instance();

  void Swap(GCNewYearLuckyDrawBack* other);

  // implements Message ----------------------------------------------

  GCNewYearLuckyDrawBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCNewYearLuckyDrawBack& from);
  void MergeFrom(const GCNewYearLuckyDrawBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operateType = 1;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatetype() const;
  inline void set_operatetype(::google::protobuf::int32 value);

  // optional string note = 2;
  inline bool has_note() const;
  inline void clear_note();
  static const int kNoteFieldNumber = 2;
  inline const ::std::string& note() const;
  inline void set_note(const ::std::string& value);
  inline void set_note(const char* value);
  inline void set_note(const char* value, size_t size);
  inline ::std::string* mutable_note();
  inline ::std::string* release_note();
  inline void set_allocated_note(::std::string* note);

  // optional string items = 3;
  inline bool has_items() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::std::string& items() const;
  inline void set_items(const ::std::string& value);
  inline void set_items(const char* value);
  inline void set_items(const char* value, size_t size);
  inline ::std::string* mutable_items();
  inline ::std::string* release_items();
  inline void set_allocated_items(::std::string* items);

  // optional int32 needScore = 4;
  inline bool has_needscore() const;
  inline void clear_needscore();
  static const int kNeedScoreFieldNumber = 4;
  inline ::google::protobuf::int32 needscore() const;
  inline void set_needscore(::google::protobuf::int32 value);

  // optional int32 curScore = 5;
  inline bool has_curscore() const;
  inline void clear_curscore();
  static const int kCurScoreFieldNumber = 5;
  inline ::google::protobuf::int32 curscore() const;
  inline void set_curscore(::google::protobuf::int32 value);

  // optional int32 allScore = 6;
  inline bool has_allscore() const;
  inline void clear_allscore();
  static const int kAllScoreFieldNumber = 6;
  inline ::google::protobuf::int32 allscore() const;
  inline void set_allscore(::google::protobuf::int32 value);

  // optional int32 drawIndex = 7;
  inline bool has_drawindex() const;
  inline void clear_drawindex();
  static const int kDrawIndexFieldNumber = 7;
  inline ::google::protobuf::int32 drawindex() const;
  inline void set_drawindex(::google::protobuf::int32 value);

  // repeated .NewYearLuckyDrawHistory historyList = 8;
  inline int historylist_size() const;
  inline void clear_historylist();
  static const int kHistoryListFieldNumber = 8;
  inline const ::NewYearLuckyDrawHistory& historylist(int index) const;
  inline ::NewYearLuckyDrawHistory* mutable_historylist(int index);
  inline ::NewYearLuckyDrawHistory* add_historylist();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearLuckyDrawHistory >&
      historylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearLuckyDrawHistory >*
      mutable_historylist();

  // repeated .ActivityRankReward rankRewardList = 9;
  inline int rankrewardlist_size() const;
  inline void clear_rankrewardlist();
  static const int kRankRewardListFieldNumber = 9;
  inline const ::ActivityRankReward& rankrewardlist(int index) const;
  inline ::ActivityRankReward* mutable_rankrewardlist(int index);
  inline ::ActivityRankReward* add_rankrewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      rankrewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_rankrewardlist();

  // @@protoc_insertion_point(class_scope:GCNewYearLuckyDrawBack)
 private:
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_note();
  inline void clear_has_note();
  inline void set_has_items();
  inline void clear_has_items();
  inline void set_has_needscore();
  inline void clear_has_needscore();
  inline void set_has_curscore();
  inline void clear_has_curscore();
  inline void set_has_allscore();
  inline void clear_has_allscore();
  inline void set_has_drawindex();
  inline void clear_has_drawindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* note_;
  ::google::protobuf::int32 operatetype_;
  ::google::protobuf::int32 needscore_;
  ::std::string* items_;
  ::google::protobuf::int32 curscore_;
  ::google::protobuf::int32 allscore_;
  ::google::protobuf::RepeatedPtrField< ::NewYearLuckyDrawHistory > historylist_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > rankrewardlist_;
  ::google::protobuf::int32 drawindex_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCNewYearLuckyDrawBack* default_instance_;
};
// -------------------------------------------------------------------

class CGNewYearLuckyDrawRank : public ::google::protobuf::Message {
 public:
  CGNewYearLuckyDrawRank();
  virtual ~CGNewYearLuckyDrawRank();

  CGNewYearLuckyDrawRank(const CGNewYearLuckyDrawRank& from);

  inline CGNewYearLuckyDrawRank& operator=(const CGNewYearLuckyDrawRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGNewYearLuckyDrawRank& default_instance();

  void Swap(CGNewYearLuckyDrawRank* other);

  // implements Message ----------------------------------------------

  CGNewYearLuckyDrawRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGNewYearLuckyDrawRank& from);
  void MergeFrom(const CGNewYearLuckyDrawRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGNewYearLuckyDrawRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGNewYearLuckyDrawRank* default_instance_;
};
// -------------------------------------------------------------------

class GCNewYearLuckyDrawRank : public ::google::protobuf::Message {
 public:
  GCNewYearLuckyDrawRank();
  virtual ~GCNewYearLuckyDrawRank();

  GCNewYearLuckyDrawRank(const GCNewYearLuckyDrawRank& from);

  inline GCNewYearLuckyDrawRank& operator=(const GCNewYearLuckyDrawRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCNewYearLuckyDrawRank& default_instance();

  void Swap(GCNewYearLuckyDrawRank* other);

  // implements Message ----------------------------------------------

  GCNewYearLuckyDrawRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCNewYearLuckyDrawRank& from);
  void MergeFrom(const GCNewYearLuckyDrawRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ActivityRankInfo rankList = 1;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRankListFieldNumber = 1;
  inline const ::ActivityRankInfo& ranklist(int index) const;
  inline ::ActivityRankInfo* mutable_ranklist(int index);
  inline ::ActivityRankInfo* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_ranklist();

  // optional .ActivityRankInfo myRankInfo = 2;
  inline bool has_myrankinfo() const;
  inline void clear_myrankinfo();
  static const int kMyRankInfoFieldNumber = 2;
  inline const ::ActivityRankInfo& myrankinfo() const;
  inline ::ActivityRankInfo* mutable_myrankinfo();
  inline ::ActivityRankInfo* release_myrankinfo();
  inline void set_allocated_myrankinfo(::ActivityRankInfo* myrankinfo);

  // @@protoc_insertion_point(class_scope:GCNewYearLuckyDrawRank)
 private:
  inline void set_has_myrankinfo();
  inline void clear_has_myrankinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > ranklist_;
  ::ActivityRankInfo* myrankinfo_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCNewYearLuckyDrawRank* default_instance_;
};
// -------------------------------------------------------------------

class FlowerBabyHistory : public ::google::protobuf::Message {
 public:
  FlowerBabyHistory();
  virtual ~FlowerBabyHistory();

  FlowerBabyHistory(const FlowerBabyHistory& from);

  inline FlowerBabyHistory& operator=(const FlowerBabyHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowerBabyHistory& default_instance();

  void Swap(FlowerBabyHistory* other);

  // implements Message ----------------------------------------------

  FlowerBabyHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowerBabyHistory& from);
  void MergeFrom(const FlowerBabyHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 sendId = 2;
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendIdFieldNumber = 2;
  inline ::google::protobuf::int64 sendid() const;
  inline void set_sendid(::google::protobuf::int64 value);

  // optional string sendName = 3;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendNameFieldNumber = 3;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional int32 sendVip = 4;
  inline bool has_sendvip() const;
  inline void clear_sendvip();
  static const int kSendVipFieldNumber = 4;
  inline ::google::protobuf::int32 sendvip() const;
  inline void set_sendvip(::google::protobuf::int32 value);

  // optional int32 flowerId = 5;
  inline bool has_flowerid() const;
  inline void clear_flowerid();
  static const int kFlowerIdFieldNumber = 5;
  inline ::google::protobuf::int32 flowerid() const;
  inline void set_flowerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlowerBabyHistory)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_sendvip();
  inline void clear_has_sendvip();
  inline void set_has_flowerid();
  inline void clear_has_flowerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 sendid_;
  ::std::string* sendname_;
  ::google::protobuf::int32 sendvip_;
  ::google::protobuf::int32 flowerid_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static FlowerBabyHistory* default_instance_;
};
// -------------------------------------------------------------------

class CGGetFlowerBabyInfo : public ::google::protobuf::Message {
 public:
  CGGetFlowerBabyInfo();
  virtual ~CGGetFlowerBabyInfo();

  CGGetFlowerBabyInfo(const CGGetFlowerBabyInfo& from);

  inline CGGetFlowerBabyInfo& operator=(const CGGetFlowerBabyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetFlowerBabyInfo& default_instance();

  void Swap(CGGetFlowerBabyInfo* other);

  // implements Message ----------------------------------------------

  CGGetFlowerBabyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetFlowerBabyInfo& from);
  void MergeFrom(const CGGetFlowerBabyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGGetFlowerBabyInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetFlowerBabyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCGetFlowerBabyInfoBack : public ::google::protobuf::Message {
 public:
  GCGetFlowerBabyInfoBack();
  virtual ~GCGetFlowerBabyInfoBack();

  GCGetFlowerBabyInfoBack(const GCGetFlowerBabyInfoBack& from);

  inline GCGetFlowerBabyInfoBack& operator=(const GCGetFlowerBabyInfoBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetFlowerBabyInfoBack& default_instance();

  void Swap(GCGetFlowerBabyInfoBack* other);

  // implements Message ----------------------------------------------

  GCGetFlowerBabyInfoBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetFlowerBabyInfoBack& from);
  void MergeFrom(const GCGetFlowerBabyInfoBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FlowerBabyHistory hisList = 1;
  inline int hislist_size() const;
  inline void clear_hislist();
  static const int kHisListFieldNumber = 1;
  inline const ::FlowerBabyHistory& hislist(int index) const;
  inline ::FlowerBabyHistory* mutable_hislist(int index);
  inline ::FlowerBabyHistory* add_hislist();
  inline const ::google::protobuf::RepeatedPtrField< ::FlowerBabyHistory >&
      hislist() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlowerBabyHistory >*
      mutable_hislist();

  // optional int32 receiveScoreSum = 2;
  inline bool has_receivescoresum() const;
  inline void clear_receivescoresum();
  static const int kReceiveScoreSumFieldNumber = 2;
  inline ::google::protobuf::int32 receivescoresum() const;
  inline void set_receivescoresum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGetFlowerBabyInfoBack)
 private:
  inline void set_has_receivescoresum();
  inline void clear_has_receivescoresum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FlowerBabyHistory > hislist_;
  ::google::protobuf::int32 receivescoresum_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetFlowerBabyInfoBack* default_instance_;
};
// -------------------------------------------------------------------

class CGGiveFlower : public ::google::protobuf::Message {
 public:
  CGGiveFlower();
  virtual ~CGGiveFlower();

  CGGiveFlower(const CGGiveFlower& from);

  inline CGGiveFlower& operator=(const CGGiveFlower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGiveFlower& default_instance();

  void Swap(CGGiveFlower* other);

  // implements Message ----------------------------------------------

  CGGiveFlower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGiveFlower& from);
  void MergeFrom(const CGGiveFlower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flowerId = 1;
  inline bool has_flowerid() const;
  inline void clear_flowerid();
  static const int kFlowerIdFieldNumber = 1;
  inline ::google::protobuf::int32 flowerid() const;
  inline void set_flowerid(::google::protobuf::int32 value);

  // optional int64 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGGiveFlower)
 private:
  inline void set_has_flowerid();
  inline void clear_has_flowerid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 flowerid_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGiveFlower* default_instance_;
};
// -------------------------------------------------------------------

class GCGiveFlowerBack : public ::google::protobuf::Message {
 public:
  GCGiveFlowerBack();
  virtual ~GCGiveFlowerBack();

  GCGiveFlowerBack(const GCGiveFlowerBack& from);

  inline GCGiveFlowerBack& operator=(const GCGiveFlowerBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGiveFlowerBack& default_instance();

  void Swap(GCGiveFlowerBack* other);

  // implements Message ----------------------------------------------

  GCGiveFlowerBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGiveFlowerBack& from);
  void MergeFrom(const GCGiveFlowerBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 giveScore = 2;
  inline bool has_givescore() const;
  inline void clear_givescore();
  static const int kGiveScoreFieldNumber = 2;
  inline ::google::protobuf::int32 givescore() const;
  inline void set_givescore(::google::protobuf::int32 value);

  // optional int32 receiveScore = 3;
  inline bool has_receivescore() const;
  inline void clear_receivescore();
  static const int kReceiveScoreFieldNumber = 3;
  inline ::google::protobuf::int32 receivescore() const;
  inline void set_receivescore(::google::protobuf::int32 value);

  // optional int32 giveScoreSum = 4;
  inline bool has_givescoresum() const;
  inline void clear_givescoresum();
  static const int kGiveScoreSumFieldNumber = 4;
  inline ::google::protobuf::int32 givescoresum() const;
  inline void set_givescoresum(::google::protobuf::int32 value);

  // optional int32 receiveScoreSum = 5;
  inline bool has_receivescoresum() const;
  inline void clear_receivescoresum();
  static const int kReceiveScoreSumFieldNumber = 5;
  inline ::google::protobuf::int32 receivescoresum() const;
  inline void set_receivescoresum(::google::protobuf::int32 value);

  // repeated .FlowerRewardItem giveRankDaily = 6;
  inline int giverankdaily_size() const;
  inline void clear_giverankdaily();
  static const int kGiveRankDailyFieldNumber = 6;
  inline const ::FlowerRewardItem& giverankdaily(int index) const;
  inline ::FlowerRewardItem* mutable_giverankdaily(int index);
  inline ::FlowerRewardItem* add_giverankdaily();
  inline const ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >&
      giverankdaily() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >*
      mutable_giverankdaily();

  // repeated .FlowerRewardItem receiveRankDaily = 7;
  inline int receiverankdaily_size() const;
  inline void clear_receiverankdaily();
  static const int kReceiveRankDailyFieldNumber = 7;
  inline const ::FlowerRewardItem& receiverankdaily(int index) const;
  inline ::FlowerRewardItem* mutable_receiverankdaily(int index);
  inline ::FlowerRewardItem* add_receiverankdaily();
  inline const ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >&
      receiverankdaily() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >*
      mutable_receiverankdaily();

  // repeated int32 flowerIdList = 8;
  inline int floweridlist_size() const;
  inline void clear_floweridlist();
  static const int kFlowerIdListFieldNumber = 8;
  inline ::google::protobuf::int32 floweridlist(int index) const;
  inline void set_floweridlist(int index, ::google::protobuf::int32 value);
  inline void add_floweridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      floweridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_floweridlist();

  // @@protoc_insertion_point(class_scope:GCGiveFlowerBack)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_givescore();
  inline void clear_has_givescore();
  inline void set_has_receivescore();
  inline void clear_has_receivescore();
  inline void set_has_givescoresum();
  inline void clear_has_givescoresum();
  inline void set_has_receivescoresum();
  inline void clear_has_receivescoresum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 givescore_;
  ::google::protobuf::int32 receivescore_;
  ::google::protobuf::int32 givescoresum_;
  ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem > giverankdaily_;
  ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem > receiverankdaily_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > floweridlist_;
  ::google::protobuf::int32 receivescoresum_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGiveFlowerBack* default_instance_;
};
// -------------------------------------------------------------------

class FlowerRewardItem : public ::google::protobuf::Message {
 public:
  FlowerRewardItem();
  virtual ~FlowerRewardItem();

  FlowerRewardItem(const FlowerRewardItem& from);

  inline FlowerRewardItem& operator=(const FlowerRewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowerRewardItem& default_instance();

  void Swap(FlowerRewardItem* other);

  // implements Message ----------------------------------------------

  FlowerRewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlowerRewardItem& from);
  void MergeFrom(const FlowerRewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 needScore = 2;
  inline bool has_needscore() const;
  inline void clear_needscore();
  static const int kNeedScoreFieldNumber = 2;
  inline ::google::protobuf::int32 needscore() const;
  inline void set_needscore(::google::protobuf::int32 value);

  // optional string reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // optional int32 state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlowerRewardItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needscore();
  inline void clear_has_needscore();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 needscore_;
  ::std::string* reward_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static FlowerRewardItem* default_instance_;
};
// -------------------------------------------------------------------

class CGGiveFlowerReward : public ::google::protobuf::Message {
 public:
  CGGiveFlowerReward();
  virtual ~CGGiveFlowerReward();

  CGGiveFlowerReward(const CGGiveFlowerReward& from);

  inline CGGiveFlowerReward& operator=(const CGGiveFlowerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGiveFlowerReward& default_instance();

  void Swap(CGGiveFlowerReward* other);

  // implements Message ----------------------------------------------

  CGGiveFlowerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGiveFlowerReward& from);
  void MergeFrom(const CGGiveFlowerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGiveFlowerReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGiveFlowerReward* default_instance_;
};
// -------------------------------------------------------------------

class GCGiveFlowerRewardBack : public ::google::protobuf::Message {
 public:
  GCGiveFlowerRewardBack();
  virtual ~GCGiveFlowerRewardBack();

  GCGiveFlowerRewardBack(const GCGiveFlowerRewardBack& from);

  inline GCGiveFlowerRewardBack& operator=(const GCGiveFlowerRewardBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGiveFlowerRewardBack& default_instance();

  void Swap(GCGiveFlowerRewardBack* other);

  // implements Message ----------------------------------------------

  GCGiveFlowerRewardBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGiveFlowerRewardBack& from);
  void MergeFrom(const GCGiveFlowerRewardBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGiveFlowerRewardBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGiveFlowerRewardBack* default_instance_;
};
// -------------------------------------------------------------------

class CGFlowerBabyRank : public ::google::protobuf::Message {
 public:
  CGFlowerBabyRank();
  virtual ~CGFlowerBabyRank();

  CGFlowerBabyRank(const CGFlowerBabyRank& from);

  inline CGFlowerBabyRank& operator=(const CGFlowerBabyRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGFlowerBabyRank& default_instance();

  void Swap(CGFlowerBabyRank* other);

  // implements Message ----------------------------------------------

  CGFlowerBabyRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGFlowerBabyRank& from);
  void MergeFrom(const CGFlowerBabyRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGFlowerBabyRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGFlowerBabyRank* default_instance_;
};
// -------------------------------------------------------------------

class GCFlowerBabyRank : public ::google::protobuf::Message {
 public:
  GCFlowerBabyRank();
  virtual ~GCFlowerBabyRank();

  GCFlowerBabyRank(const GCFlowerBabyRank& from);

  inline GCFlowerBabyRank& operator=(const GCFlowerBabyRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCFlowerBabyRank& default_instance();

  void Swap(GCFlowerBabyRank* other);

  // implements Message ----------------------------------------------

  GCFlowerBabyRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCFlowerBabyRank& from);
  void MergeFrom(const GCFlowerBabyRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 giveRankTitleId = 2;
  inline bool has_giveranktitleid() const;
  inline void clear_giveranktitleid();
  static const int kGiveRankTitleIdFieldNumber = 2;
  inline ::google::protobuf::int32 giveranktitleid() const;
  inline void set_giveranktitleid(::google::protobuf::int32 value);

  // optional int32 receiveRankTitleId = 3;
  inline bool has_receiveranktitleid() const;
  inline void clear_receiveranktitleid();
  static const int kReceiveRankTitleIdFieldNumber = 3;
  inline ::google::protobuf::int32 receiveranktitleid() const;
  inline void set_receiveranktitleid(::google::protobuf::int32 value);

  // repeated .ActivityRankReward giveRankRewards = 4;
  inline int giverankrewards_size() const;
  inline void clear_giverankrewards();
  static const int kGiveRankRewardsFieldNumber = 4;
  inline const ::ActivityRankReward& giverankrewards(int index) const;
  inline ::ActivityRankReward* mutable_giverankrewards(int index);
  inline ::ActivityRankReward* add_giverankrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      giverankrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_giverankrewards();

  // repeated .ActivityRankReward receiveRankRewards = 5;
  inline int receiverankrewards_size() const;
  inline void clear_receiverankrewards();
  static const int kReceiveRankRewardsFieldNumber = 5;
  inline const ::ActivityRankReward& receiverankrewards(int index) const;
  inline ::ActivityRankReward* mutable_receiverankrewards(int index);
  inline ::ActivityRankReward* add_receiverankrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      receiverankrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_receiverankrewards();

  // repeated .ActivityRankInfo giveRankList = 6;
  inline int giveranklist_size() const;
  inline void clear_giveranklist();
  static const int kGiveRankListFieldNumber = 6;
  inline const ::ActivityRankInfo& giveranklist(int index) const;
  inline ::ActivityRankInfo* mutable_giveranklist(int index);
  inline ::ActivityRankInfo* add_giveranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      giveranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_giveranklist();

  // repeated .ActivityRankInfo receiveRankList = 7;
  inline int receiveranklist_size() const;
  inline void clear_receiveranklist();
  static const int kReceiveRankListFieldNumber = 7;
  inline const ::ActivityRankInfo& receiveranklist(int index) const;
  inline ::ActivityRankInfo* mutable_receiveranklist(int index);
  inline ::ActivityRankInfo* add_receiveranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      receiveranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_receiveranklist();

  // optional int32 myGiveRank = 8;
  inline bool has_mygiverank() const;
  inline void clear_mygiverank();
  static const int kMyGiveRankFieldNumber = 8;
  inline ::google::protobuf::int32 mygiverank() const;
  inline void set_mygiverank(::google::protobuf::int32 value);

  // optional int32 myReceiveRank = 9;
  inline bool has_myreceiverank() const;
  inline void clear_myreceiverank();
  static const int kMyReceiveRankFieldNumber = 9;
  inline ::google::protobuf::int32 myreceiverank() const;
  inline void set_myreceiverank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCFlowerBabyRank)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_giveranktitleid();
  inline void clear_has_giveranktitleid();
  inline void set_has_receiveranktitleid();
  inline void clear_has_receiveranktitleid();
  inline void set_has_mygiverank();
  inline void clear_has_mygiverank();
  inline void set_has_myreceiverank();
  inline void clear_has_myreceiverank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 giveranktitleid_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > giverankrewards_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > receiverankrewards_;
  ::google::protobuf::int32 receiveranktitleid_;
  ::google::protobuf::int32 mygiverank_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > giveranklist_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > receiveranklist_;
  ::google::protobuf::int32 myreceiverank_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCFlowerBabyRank* default_instance_;
};
// -------------------------------------------------------------------

class TreeInfo : public ::google::protobuf::Message {
 public:
  TreeInfo();
  virtual ~TreeInfo();

  TreeInfo(const TreeInfo& from);

  inline TreeInfo& operator=(const TreeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeInfo& default_instance();

  void Swap(TreeInfo* other);

  // implements Message ----------------------------------------------

  TreeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeInfo& from);
  void MergeFrom(const TreeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 needGrowth = 2;
  inline bool has_needgrowth() const;
  inline void clear_needgrowth();
  static const int kNeedGrowthFieldNumber = 2;
  inline ::google::protobuf::int32 needgrowth() const;
  inline void set_needgrowth(::google::protobuf::int32 value);

  // optional string rewardInfo = 3;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 3;
  inline const ::std::string& rewardinfo() const;
  inline void set_rewardinfo(const ::std::string& value);
  inline void set_rewardinfo(const char* value);
  inline void set_rewardinfo(const char* value, size_t size);
  inline ::std::string* mutable_rewardinfo();
  inline ::std::string* release_rewardinfo();
  inline void set_allocated_rewardinfo(::std::string* rewardinfo);

  // optional int32 treeNPC = 4;
  inline bool has_treenpc() const;
  inline void clear_treenpc();
  static const int kTreeNPCFieldNumber = 4;
  inline ::google::protobuf::int32 treenpc() const;
  inline void set_treenpc(::google::protobuf::int32 value);

  // optional string treeName = 5;
  inline bool has_treename() const;
  inline void clear_treename();
  static const int kTreeNameFieldNumber = 5;
  inline const ::std::string& treename() const;
  inline void set_treename(const ::std::string& value);
  inline void set_treename(const char* value);
  inline void set_treename(const char* value, size_t size);
  inline ::std::string* mutable_treename();
  inline ::std::string* release_treename();
  inline void set_allocated_treename(::std::string* treename);

  // optional int32 sceneId = 6;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 6;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // optional string pos = 7;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 7;
  inline const ::std::string& pos() const;
  inline void set_pos(const ::std::string& value);
  inline void set_pos(const char* value);
  inline void set_pos(const char* value, size_t size);
  inline ::std::string* mutable_pos();
  inline ::std::string* release_pos();
  inline void set_allocated_pos(::std::string* pos);

  // optional string scaling = 8;
  inline bool has_scaling() const;
  inline void clear_scaling();
  static const int kScalingFieldNumber = 8;
  inline const ::std::string& scaling() const;
  inline void set_scaling(const ::std::string& value);
  inline void set_scaling(const char* value);
  inline void set_scaling(const char* value, size_t size);
  inline ::std::string* mutable_scaling();
  inline ::std::string* release_scaling();
  inline void set_allocated_scaling(::std::string* scaling);

  // @@protoc_insertion_point(class_scope:TreeInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgrowth();
  inline void clear_has_needgrowth();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();
  inline void set_has_treenpc();
  inline void clear_has_treenpc();
  inline void set_has_treename();
  inline void clear_has_treename();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_scaling();
  inline void clear_has_scaling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 needgrowth_;
  ::std::string* rewardinfo_;
  ::std::string* treename_;
  ::google::protobuf::int32 treenpc_;
  ::google::protobuf::int32 sceneid_;
  ::std::string* pos_;
  ::std::string* scaling_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static TreeInfo* default_instance_;
};
// -------------------------------------------------------------------

class TreeToolInfo : public ::google::protobuf::Message {
 public:
  TreeToolInfo();
  virtual ~TreeToolInfo();

  TreeToolInfo(const TreeToolInfo& from);

  inline TreeToolInfo& operator=(const TreeToolInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeToolInfo& default_instance();

  void Swap(TreeToolInfo* other);

  // implements Message ----------------------------------------------

  TreeToolInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreeToolInfo& from);
  void MergeFrom(const TreeToolInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:TreeToolInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_icon();
  inline void clear_has_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* icon_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static TreeToolInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGTreeDayProp : public ::google::protobuf::Message {
 public:
  CGTreeDayProp();
  virtual ~CGTreeDayProp();

  CGTreeDayProp(const CGTreeDayProp& from);

  inline CGTreeDayProp& operator=(const CGTreeDayProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTreeDayProp& default_instance();

  void Swap(CGTreeDayProp* other);

  // implements Message ----------------------------------------------

  CGTreeDayProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTreeDayProp& from);
  void MergeFrom(const CGTreeDayProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 propId = 1;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIdFieldNumber = 1;
  inline ::google::protobuf::int32 propid() const;
  inline void set_propid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGTreeDayProp)
 private:
  inline void set_has_propid();
  inline void clear_has_propid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 propid_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTreeDayProp* default_instance_;
};
// -------------------------------------------------------------------

class GCTreeDayPropBack : public ::google::protobuf::Message {
 public:
  GCTreeDayPropBack();
  virtual ~GCTreeDayPropBack();

  GCTreeDayPropBack(const GCTreeDayPropBack& from);

  inline GCTreeDayPropBack& operator=(const GCTreeDayPropBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCTreeDayPropBack& default_instance();

  void Swap(GCTreeDayPropBack* other);

  // implements Message ----------------------------------------------

  GCTreeDayPropBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCTreeDayPropBack& from);
  void MergeFrom(const GCTreeDayPropBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 myGrowth = 2;
  inline bool has_mygrowth() const;
  inline void clear_mygrowth();
  static const int kMyGrowthFieldNumber = 2;
  inline ::google::protobuf::int32 mygrowth() const;
  inline void set_mygrowth(::google::protobuf::int32 value);

  // optional int32 treeGrowth = 3;
  inline bool has_treegrowth() const;
  inline void clear_treegrowth();
  static const int kTreeGrowthFieldNumber = 3;
  inline ::google::protobuf::int32 treegrowth() const;
  inline void set_treegrowth(::google::protobuf::int32 value);

  // optional int32 treeID = 4;
  inline bool has_treeid() const;
  inline void clear_treeid();
  static const int kTreeIDFieldNumber = 4;
  inline ::google::protobuf::int32 treeid() const;
  inline void set_treeid(::google::protobuf::int32 value);

  // repeated .TreeInfo treeInfoList = 5;
  inline int treeinfolist_size() const;
  inline void clear_treeinfolist();
  static const int kTreeInfoListFieldNumber = 5;
  inline const ::TreeInfo& treeinfolist(int index) const;
  inline ::TreeInfo* mutable_treeinfolist(int index);
  inline ::TreeInfo* add_treeinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::TreeInfo >&
      treeinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TreeInfo >*
      mutable_treeinfolist();

  // repeated .TreeToolInfo toolList = 6;
  inline int toollist_size() const;
  inline void clear_toollist();
  static const int kToolListFieldNumber = 6;
  inline const ::TreeToolInfo& toollist(int index) const;
  inline ::TreeToolInfo* mutable_toollist(int index);
  inline ::TreeToolInfo* add_toollist();
  inline const ::google::protobuf::RepeatedPtrField< ::TreeToolInfo >&
      toollist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TreeToolInfo >*
      mutable_toollist();

  // repeated int32 rewardGetList = 7;
  inline int rewardgetlist_size() const;
  inline void clear_rewardgetlist();
  static const int kRewardGetListFieldNumber = 7;
  inline ::google::protobuf::int32 rewardgetlist(int index) const;
  inline void set_rewardgetlist(int index, ::google::protobuf::int32 value);
  inline void add_rewardgetlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardgetlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardgetlist();

  // @@protoc_insertion_point(class_scope:GCTreeDayPropBack)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_mygrowth();
  inline void clear_has_mygrowth();
  inline void set_has_treegrowth();
  inline void clear_has_treegrowth();
  inline void set_has_treeid();
  inline void clear_has_treeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 mygrowth_;
  ::google::protobuf::int32 treegrowth_;
  ::google::protobuf::int32 treeid_;
  ::google::protobuf::RepeatedPtrField< ::TreeInfo > treeinfolist_;
  ::google::protobuf::RepeatedPtrField< ::TreeToolInfo > toollist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardgetlist_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCTreeDayPropBack* default_instance_;
};
// -------------------------------------------------------------------

class CGTreeDayReward : public ::google::protobuf::Message {
 public:
  CGTreeDayReward();
  virtual ~CGTreeDayReward();

  CGTreeDayReward(const CGTreeDayReward& from);

  inline CGTreeDayReward& operator=(const CGTreeDayReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTreeDayReward& default_instance();

  void Swap(CGTreeDayReward* other);

  // implements Message ----------------------------------------------

  CGTreeDayReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTreeDayReward& from);
  void MergeFrom(const CGTreeDayReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGTreeDayReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTreeDayReward* default_instance_;
};
// -------------------------------------------------------------------

class GCTreeDayRewardBack : public ::google::protobuf::Message {
 public:
  GCTreeDayRewardBack();
  virtual ~GCTreeDayRewardBack();

  GCTreeDayRewardBack(const GCTreeDayRewardBack& from);

  inline GCTreeDayRewardBack& operator=(const GCTreeDayRewardBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCTreeDayRewardBack& default_instance();

  void Swap(GCTreeDayRewardBack* other);

  // implements Message ----------------------------------------------

  GCTreeDayRewardBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCTreeDayRewardBack& from);
  void MergeFrom(const GCTreeDayRewardBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int32 rewardGetList = 2;
  inline int rewardgetlist_size() const;
  inline void clear_rewardgetlist();
  static const int kRewardGetListFieldNumber = 2;
  inline ::google::protobuf::int32 rewardgetlist(int index) const;
  inline void set_rewardgetlist(int index, ::google::protobuf::int32 value);
  inline void add_rewardgetlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rewardgetlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rewardgetlist();

  // @@protoc_insertion_point(class_scope:GCTreeDayRewardBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rewardgetlist_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCTreeDayRewardBack* default_instance_;
};
// -------------------------------------------------------------------

class CGTreeDayRank : public ::google::protobuf::Message {
 public:
  CGTreeDayRank();
  virtual ~CGTreeDayRank();

  CGTreeDayRank(const CGTreeDayRank& from);

  inline CGTreeDayRank& operator=(const CGTreeDayRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTreeDayRank& default_instance();

  void Swap(CGTreeDayRank* other);

  // implements Message ----------------------------------------------

  CGTreeDayRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTreeDayRank& from);
  void MergeFrom(const CGTreeDayRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGTreeDayRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTreeDayRank* default_instance_;
};
// -------------------------------------------------------------------

class GCTreeDayRankBack : public ::google::protobuf::Message {
 public:
  GCTreeDayRankBack();
  virtual ~GCTreeDayRankBack();

  GCTreeDayRankBack(const GCTreeDayRankBack& from);

  inline GCTreeDayRankBack& operator=(const GCTreeDayRankBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCTreeDayRankBack& default_instance();

  void Swap(GCTreeDayRankBack* other);

  // implements Message ----------------------------------------------

  GCTreeDayRankBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCTreeDayRankBack& from);
  void MergeFrom(const GCTreeDayRankBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .ActivityRankReward arborRankRewards = 2;
  inline int arborrankrewards_size() const;
  inline void clear_arborrankrewards();
  static const int kArborRankRewardsFieldNumber = 2;
  inline const ::ActivityRankReward& arborrankrewards(int index) const;
  inline ::ActivityRankReward* mutable_arborrankrewards(int index);
  inline ::ActivityRankReward* add_arborrankrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      arborrankrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_arborrankrewards();

  // repeated .ActivityRankInfo arborRankList = 3;
  inline int arborranklist_size() const;
  inline void clear_arborranklist();
  static const int kArborRankListFieldNumber = 3;
  inline const ::ActivityRankInfo& arborranklist(int index) const;
  inline ::ActivityRankInfo* mutable_arborranklist(int index);
  inline ::ActivityRankInfo* add_arborranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      arborranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_arborranklist();

  // optional int32 myArborRank = 4;
  inline bool has_myarborrank() const;
  inline void clear_myarborrank();
  static const int kMyArborRankFieldNumber = 4;
  inline ::google::protobuf::int32 myarborrank() const;
  inline void set_myarborrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCTreeDayRankBack)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_myarborrank();
  inline void clear_has_myarborrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > arborrankrewards_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 myarborrank_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > arborranklist_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCTreeDayRankBack* default_instance_;
};
// -------------------------------------------------------------------

class SweetDiceInfo : public ::google::protobuf::Message {
 public:
  SweetDiceInfo();
  virtual ~SweetDiceInfo();

  SweetDiceInfo(const SweetDiceInfo& from);

  inline SweetDiceInfo& operator=(const SweetDiceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SweetDiceInfo& default_instance();

  void Swap(SweetDiceInfo* other);

  // implements Message ----------------------------------------------

  SweetDiceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SweetDiceInfo& from);
  void MergeFrom(const SweetDiceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string needmoney = 3;
  inline bool has_needmoney() const;
  inline void clear_needmoney();
  static const int kNeedmoneyFieldNumber = 3;
  inline const ::std::string& needmoney() const;
  inline void set_needmoney(const ::std::string& value);
  inline void set_needmoney(const char* value);
  inline void set_needmoney(const char* value, size_t size);
  inline ::std::string* mutable_needmoney();
  inline ::std::string* release_needmoney();
  inline void set_allocated_needmoney(::std::string* needmoney);

  // optional string tenneedmoney = 4;
  inline bool has_tenneedmoney() const;
  inline void clear_tenneedmoney();
  static const int kTenneedmoneyFieldNumber = 4;
  inline const ::std::string& tenneedmoney() const;
  inline void set_tenneedmoney(const ::std::string& value);
  inline void set_tenneedmoney(const char* value);
  inline void set_tenneedmoney(const char* value, size_t size);
  inline ::std::string* mutable_tenneedmoney();
  inline ::std::string* release_tenneedmoney();
  inline void set_allocated_tenneedmoney(::std::string* tenneedmoney);

  // optional string itemshow = 5;
  inline bool has_itemshow() const;
  inline void clear_itemshow();
  static const int kItemshowFieldNumber = 5;
  inline const ::std::string& itemshow() const;
  inline void set_itemshow(const ::std::string& value);
  inline void set_itemshow(const char* value);
  inline void set_itemshow(const char* value, size_t size);
  inline ::std::string* mutable_itemshow();
  inline ::std::string* release_itemshow();
  inline void set_allocated_itemshow(::std::string* itemshow);

  // optional int32 model = 6;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 6;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);

  // optional string scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // optional string rotate = 8;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 8;
  inline const ::std::string& rotate() const;
  inline void set_rotate(const ::std::string& value);
  inline void set_rotate(const char* value);
  inline void set_rotate(const char* value, size_t size);
  inline ::std::string* mutable_rotate();
  inline ::std::string* release_rotate();
  inline void set_allocated_rotate(::std::string* rotate);

  // optional string position = 9;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 9;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional string noticetxt = 10;
  inline bool has_noticetxt() const;
  inline void clear_noticetxt();
  static const int kNoticetxtFieldNumber = 10;
  inline const ::std::string& noticetxt() const;
  inline void set_noticetxt(const ::std::string& value);
  inline void set_noticetxt(const char* value);
  inline void set_noticetxt(const char* value, size_t size);
  inline ::std::string* mutable_noticetxt();
  inline ::std::string* release_noticetxt();
  inline void set_allocated_noticetxt(::std::string* noticetxt);

  // optional string iconName = 11;
  inline bool has_iconname() const;
  inline void clear_iconname();
  static const int kIconNameFieldNumber = 11;
  inline const ::std::string& iconname() const;
  inline void set_iconname(const ::std::string& value);
  inline void set_iconname(const char* value);
  inline void set_iconname(const char* value, size_t size);
  inline ::std::string* mutable_iconname();
  inline ::std::string* release_iconname();
  inline void set_allocated_iconname(::std::string* iconname);

  // @@protoc_insertion_point(class_scope:SweetDiceInfo)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_needmoney();
  inline void clear_has_needmoney();
  inline void set_has_tenneedmoney();
  inline void clear_has_tenneedmoney();
  inline void set_has_itemshow();
  inline void clear_has_itemshow();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_noticetxt();
  inline void clear_has_noticetxt();
  inline void set_has_iconname();
  inline void clear_has_iconname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* needmoney_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 model_;
  ::std::string* tenneedmoney_;
  ::std::string* itemshow_;
  ::std::string* scale_;
  ::std::string* rotate_;
  ::std::string* position_;
  ::std::string* noticetxt_;
  ::std::string* iconname_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static SweetDiceInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSweetDice : public ::google::protobuf::Message {
 public:
  PlayerSweetDice();
  virtual ~PlayerSweetDice();

  PlayerSweetDice(const PlayerSweetDice& from);

  inline PlayerSweetDice& operator=(const PlayerSweetDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSweetDice& default_instance();

  void Swap(PlayerSweetDice* other);

  // implements Message ----------------------------------------------

  PlayerSweetDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSweetDice& from);
  void MergeFrom(const PlayerSweetDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 posId = 2;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 2;
  inline ::google::protobuf::int32 posid() const;
  inline void set_posid(::google::protobuf::int32 value);

  // optional int32 freeTimes = 3;
  inline bool has_freetimes() const;
  inline void clear_freetimes();
  static const int kFreeTimesFieldNumber = 3;
  inline ::google::protobuf::int32 freetimes() const;
  inline void set_freetimes(::google::protobuf::int32 value);

  // optional int32 sweetDiceNum = 4;
  inline bool has_sweetdicenum() const;
  inline void clear_sweetdicenum();
  static const int kSweetDiceNumFieldNumber = 4;
  inline ::google::protobuf::int32 sweetdicenum() const;
  inline void set_sweetdicenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSweetDice)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_freetimes();
  inline void clear_has_freetimes();
  inline void set_has_sweetdicenum();
  inline void clear_has_sweetdicenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 posid_;
  ::google::protobuf::int32 freetimes_;
  ::google::protobuf::int32 sweetdicenum_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static PlayerSweetDice* default_instance_;
};
// -------------------------------------------------------------------

class CGSweetDice : public ::google::protobuf::Message {
 public:
  CGSweetDice();
  virtual ~CGSweetDice();

  CGSweetDice(const CGSweetDice& from);

  inline CGSweetDice& operator=(const CGSweetDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSweetDice& default_instance();

  void Swap(CGSweetDice* other);

  // implements Message ----------------------------------------------

  CGSweetDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSweetDice& from);
  void MergeFrom(const CGSweetDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 operate = 2;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 2;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 freeFlag = 3;
  inline bool has_freeflag() const;
  inline void clear_freeflag();
  static const int kFreeFlagFieldNumber = 3;
  inline ::google::protobuf::int32 freeflag() const;
  inline void set_freeflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGSweetDice)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_freeflag();
  inline void clear_has_freeflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 freeflag_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSweetDice* default_instance_;
};
// -------------------------------------------------------------------

class GCSweetDice : public ::google::protobuf::Message {
 public:
  GCSweetDice();
  virtual ~GCSweetDice();

  GCSweetDice(const GCSweetDice& from);

  inline GCSweetDice& operator=(const GCSweetDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSweetDice& default_instance();

  void Swap(GCSweetDice* other);

  // implements Message ----------------------------------------------

  GCSweetDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSweetDice& from);
  void MergeFrom(const GCSweetDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .SweetDiceInfo sweetDiceData = 2;
  inline int sweetdicedata_size() const;
  inline void clear_sweetdicedata();
  static const int kSweetDiceDataFieldNumber = 2;
  inline const ::SweetDiceInfo& sweetdicedata(int index) const;
  inline ::SweetDiceInfo* mutable_sweetdicedata(int index);
  inline ::SweetDiceInfo* add_sweetdicedata();
  inline const ::google::protobuf::RepeatedPtrField< ::SweetDiceInfo >&
      sweetdicedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SweetDiceInfo >*
      mutable_sweetdicedata();

  // repeated .PlayerSweetDice playerSweetDiceData = 3;
  inline int playersweetdicedata_size() const;
  inline void clear_playersweetdicedata();
  static const int kPlayerSweetDiceDataFieldNumber = 3;
  inline const ::PlayerSweetDice& playersweetdicedata(int index) const;
  inline ::PlayerSweetDice* mutable_playersweetdicedata(int index);
  inline ::PlayerSweetDice* add_playersweetdicedata();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSweetDice >&
      playersweetdicedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSweetDice >*
      mutable_playersweetdicedata();

  // optional .PlayerSweetDice playerSweetDice = 4;
  inline bool has_playersweetdice() const;
  inline void clear_playersweetdice();
  static const int kPlayerSweetDiceFieldNumber = 4;
  inline const ::PlayerSweetDice& playersweetdice() const;
  inline ::PlayerSweetDice* mutable_playersweetdice();
  inline ::PlayerSweetDice* release_playersweetdice();
  inline void set_allocated_playersweetdice(::PlayerSweetDice* playersweetdice);

  // repeated int32 tenPosList = 5;
  inline int tenposlist_size() const;
  inline void clear_tenposlist();
  static const int kTenPosListFieldNumber = 5;
  inline ::google::protobuf::int32 tenposlist(int index) const;
  inline void set_tenposlist(int index, ::google::protobuf::int32 value);
  inline void add_tenposlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tenposlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tenposlist();

  // @@protoc_insertion_point(class_scope:GCSweetDice)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_playersweetdice();
  inline void clear_has_playersweetdice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SweetDiceInfo > sweetdicedata_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSweetDice > playersweetdicedata_;
  ::PlayerSweetDice* playersweetdice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tenposlist_;
  ::google::protobuf::int32 operate_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSweetDice* default_instance_;
};
// -------------------------------------------------------------------

class CGGetSweetDiceItem : public ::google::protobuf::Message {
 public:
  CGGetSweetDiceItem();
  virtual ~CGGetSweetDiceItem();

  CGGetSweetDiceItem(const CGGetSweetDiceItem& from);

  inline CGGetSweetDiceItem& operator=(const CGGetSweetDiceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetSweetDiceItem& default_instance();

  void Swap(CGGetSweetDiceItem* other);

  // implements Message ----------------------------------------------

  CGGetSweetDiceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetSweetDiceItem& from);
  void MergeFrom(const CGGetSweetDiceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGetSweetDiceItem)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typeid__;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetSweetDiceItem* default_instance_;
};
// -------------------------------------------------------------------

class CGBuySweetDice : public ::google::protobuf::Message {
 public:
  CGBuySweetDice();
  virtual ~CGBuySweetDice();

  CGBuySweetDice(const CGBuySweetDice& from);

  inline CGBuySweetDice& operator=(const CGBuySweetDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBuySweetDice& default_instance();

  void Swap(CGBuySweetDice* other);

  // implements Message ----------------------------------------------

  CGBuySweetDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBuySweetDice& from);
  void MergeFrom(const CGBuySweetDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 buySweetDiceNum = 2;
  inline bool has_buysweetdicenum() const;
  inline void clear_buysweetdicenum();
  static const int kBuySweetDiceNumFieldNumber = 2;
  inline ::google::protobuf::int32 buysweetdicenum() const;
  inline void set_buysweetdicenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGBuySweetDice)
 private:
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_buysweetdicenum();
  inline void clear_has_buysweetdicenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 buysweetdicenum_;
  friend void  protobuf_AddDesc_ActivityMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBuySweetDice* default_instance_;
};
// ===================================================================


// ===================================================================

// GCActivity

// optional int32 opt = 1;
inline bool GCActivity::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCActivity::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCActivity::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCActivity::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 GCActivity::opt() const {
  // @@protoc_insertion_point(field_get:GCActivity.opt)
  return opt_;
}
inline void GCActivity::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:GCActivity.opt)
}

// optional int32 type = 2;
inline bool GCActivity::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCActivity::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCActivity::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCActivity::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCActivity::type() const {
  // @@protoc_insertion_point(field_get:GCActivity.type)
  return type_;
}
inline void GCActivity::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCActivity.type)
}

// optional int64 endTime = 3;
inline bool GCActivity::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCActivity::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCActivity::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCActivity::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 GCActivity::endtime() const {
  // @@protoc_insertion_point(field_get:GCActivity.endTime)
  return endtime_;
}
inline void GCActivity::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:GCActivity.endTime)
}

// -------------------------------------------------------------------

// CGActivityOprateEvent

// optional int32 type = 1;
inline bool CGActivityOprateEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGActivityOprateEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGActivityOprateEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGActivityOprateEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGActivityOprateEvent::type() const {
  // @@protoc_insertion_point(field_get:CGActivityOprateEvent.type)
  return type_;
}
inline void CGActivityOprateEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGActivityOprateEvent.type)
}

// repeated .EntryStrStr params = 2;
inline int CGActivityOprateEvent::params_size() const {
  return params_.size();
}
inline void CGActivityOprateEvent::clear_params() {
  params_.Clear();
}
inline const ::EntryStrStr& CGActivityOprateEvent::params(int index) const {
  // @@protoc_insertion_point(field_get:CGActivityOprateEvent.params)
  return params_.Get(index);
}
inline ::EntryStrStr* CGActivityOprateEvent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:CGActivityOprateEvent.params)
  return params_.Mutable(index);
}
inline ::EntryStrStr* CGActivityOprateEvent::add_params() {
  // @@protoc_insertion_point(field_add:CGActivityOprateEvent.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntryStrStr >&
CGActivityOprateEvent::params() const {
  // @@protoc_insertion_point(field_list:CGActivityOprateEvent.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntryStrStr >*
CGActivityOprateEvent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:CGActivityOprateEvent.params)
  return &params_;
}

// -------------------------------------------------------------------

// GCActivityOprateEvent

// optional int32 type = 1;
inline bool GCActivityOprateEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCActivityOprateEvent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCActivityOprateEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCActivityOprateEvent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCActivityOprateEvent::type() const {
  // @@protoc_insertion_point(field_get:GCActivityOprateEvent.type)
  return type_;
}
inline void GCActivityOprateEvent::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCActivityOprateEvent.type)
}

// optional int32 flag = 2;
inline bool GCActivityOprateEvent::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCActivityOprateEvent::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCActivityOprateEvent::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCActivityOprateEvent::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCActivityOprateEvent::flag() const {
  // @@protoc_insertion_point(field_get:GCActivityOprateEvent.flag)
  return flag_;
}
inline void GCActivityOprateEvent::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCActivityOprateEvent.flag)
}

// -------------------------------------------------------------------

// OpActivityInfo

// optional int32 btype = 1;
inline bool OpActivityInfo::has_btype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpActivityInfo::set_has_btype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpActivityInfo::clear_has_btype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpActivityInfo::clear_btype() {
  btype_ = 0;
  clear_has_btype();
}
inline ::google::protobuf::int32 OpActivityInfo::btype() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.btype)
  return btype_;
}
inline void OpActivityInfo::set_btype(::google::protobuf::int32 value) {
  set_has_btype();
  btype_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.btype)
}

// optional int32 stype = 2;
inline bool OpActivityInfo::has_stype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpActivityInfo::set_has_stype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpActivityInfo::clear_has_stype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpActivityInfo::clear_stype() {
  stype_ = 0;
  clear_has_stype();
}
inline ::google::protobuf::int32 OpActivityInfo::stype() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.stype)
  return stype_;
}
inline void OpActivityInfo::set_stype(::google::protobuf::int32 value) {
  set_has_stype();
  stype_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.stype)
}

// optional int32 flag = 3;
inline bool OpActivityInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpActivityInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpActivityInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpActivityInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 OpActivityInfo::flag() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.flag)
  return flag_;
}
inline void OpActivityInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.flag)
}

// optional int64 remainTime = 4;
inline bool OpActivityInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpActivityInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpActivityInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpActivityInfo::clear_remaintime() {
  remaintime_ = GOOGLE_LONGLONG(0);
  clear_has_remaintime();
}
inline ::google::protobuf::int64 OpActivityInfo::remaintime() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.remainTime)
  return remaintime_;
}
inline void OpActivityInfo::set_remaintime(::google::protobuf::int64 value) {
  set_has_remaintime();
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.remainTime)
}

// optional int64 startTime = 5;
inline bool OpActivityInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpActivityInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpActivityInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpActivityInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 OpActivityInfo::starttime() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.startTime)
  return starttime_;
}
inline void OpActivityInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.startTime)
}

// optional int64 endTime = 6;
inline bool OpActivityInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpActivityInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpActivityInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpActivityInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 OpActivityInfo::endtime() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.endTime)
  return endtime_;
}
inline void OpActivityInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.endTime)
}

// optional int32 actId = 7;
inline bool OpActivityInfo::has_actid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpActivityInfo::set_has_actid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpActivityInfo::clear_has_actid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpActivityInfo::clear_actid() {
  actid_ = 0;
  clear_has_actid();
}
inline ::google::protobuf::int32 OpActivityInfo::actid() const {
  // @@protoc_insertion_point(field_get:OpActivityInfo.actId)
  return actid_;
}
inline void OpActivityInfo::set_actid(::google::protobuf::int32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:OpActivityInfo.actId)
}

// -------------------------------------------------------------------

// CGOpActivityInfo

// -------------------------------------------------------------------

// GCOpActivityInfo

// repeated .OpActivityInfo activityList = 1;
inline int GCOpActivityInfo::activitylist_size() const {
  return activitylist_.size();
}
inline void GCOpActivityInfo::clear_activitylist() {
  activitylist_.Clear();
}
inline const ::OpActivityInfo& GCOpActivityInfo::activitylist(int index) const {
  // @@protoc_insertion_point(field_get:GCOpActivityInfo.activityList)
  return activitylist_.Get(index);
}
inline ::OpActivityInfo* GCOpActivityInfo::mutable_activitylist(int index) {
  // @@protoc_insertion_point(field_mutable:GCOpActivityInfo.activityList)
  return activitylist_.Mutable(index);
}
inline ::OpActivityInfo* GCOpActivityInfo::add_activitylist() {
  // @@protoc_insertion_point(field_add:GCOpActivityInfo.activityList)
  return activitylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OpActivityInfo >&
GCOpActivityInfo::activitylist() const {
  // @@protoc_insertion_point(field_list:GCOpActivityInfo.activityList)
  return activitylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::OpActivityInfo >*
GCOpActivityInfo::mutable_activitylist() {
  // @@protoc_insertion_point(field_mutable_list:GCOpActivityInfo.activityList)
  return &activitylist_;
}

// -------------------------------------------------------------------

// GCIOSActivityOpen

// optional int32 flag = 1;
inline bool GCIOSActivityOpen::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCIOSActivityOpen::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCIOSActivityOpen::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCIOSActivityOpen::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCIOSActivityOpen::flag() const {
  // @@protoc_insertion_point(field_get:GCIOSActivityOpen.flag)
  return flag_;
}
inline void GCIOSActivityOpen::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCIOSActivityOpen.flag)
}

// optional int32 cdkOpen = 2;
inline bool GCIOSActivityOpen::has_cdkopen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCIOSActivityOpen::set_has_cdkopen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCIOSActivityOpen::clear_has_cdkopen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCIOSActivityOpen::clear_cdkopen() {
  cdkopen_ = 0;
  clear_has_cdkopen();
}
inline ::google::protobuf::int32 GCIOSActivityOpen::cdkopen() const {
  // @@protoc_insertion_point(field_get:GCIOSActivityOpen.cdkOpen)
  return cdkopen_;
}
inline void GCIOSActivityOpen::set_cdkopen(::google::protobuf::int32 value) {
  set_has_cdkopen();
  cdkopen_ = value;
  // @@protoc_insertion_point(field_set:GCIOSActivityOpen.cdkOpen)
}

// -------------------------------------------------------------------

// EggInfo

// optional int32 type = 1;
inline bool EggInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EggInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EggInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EggInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 EggInfo::type() const {
  // @@protoc_insertion_point(field_get:EggInfo.type)
  return type_;
}
inline void EggInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:EggInfo.type)
}

// optional int32 status = 2;
inline bool EggInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EggInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EggInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EggInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EggInfo::status() const {
  // @@protoc_insertion_point(field_get:EggInfo.status)
  return status_;
}
inline void EggInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:EggInfo.status)
}

// optional int64 hatchEndTime = 3;
inline bool EggInfo::has_hatchendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EggInfo::set_has_hatchendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EggInfo::clear_has_hatchendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EggInfo::clear_hatchendtime() {
  hatchendtime_ = GOOGLE_LONGLONG(0);
  clear_has_hatchendtime();
}
inline ::google::protobuf::int64 EggInfo::hatchendtime() const {
  // @@protoc_insertion_point(field_get:EggInfo.hatchEndTime)
  return hatchendtime_;
}
inline void EggInfo::set_hatchendtime(::google::protobuf::int64 value) {
  set_has_hatchendtime();
  hatchendtime_ = value;
  // @@protoc_insertion_point(field_set:EggInfo.hatchEndTime)
}

// -------------------------------------------------------------------

// HatchEggInfo

// optional int32 type = 1;
inline bool HatchEggInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HatchEggInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HatchEggInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HatchEggInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 HatchEggInfo::type() const {
  // @@protoc_insertion_point(field_get:HatchEggInfo.type)
  return type_;
}
inline void HatchEggInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:HatchEggInfo.type)
}

// optional string time2Jintiao = 2;
inline bool HatchEggInfo::has_time2jintiao() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HatchEggInfo::set_has_time2jintiao() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HatchEggInfo::clear_has_time2jintiao() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HatchEggInfo::clear_time2jintiao() {
  if (time2jintiao_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time2jintiao_->clear();
  }
  clear_has_time2jintiao();
}
inline const ::std::string& HatchEggInfo::time2jintiao() const {
  // @@protoc_insertion_point(field_get:HatchEggInfo.time2Jintiao)
  return *time2jintiao_;
}
inline void HatchEggInfo::set_time2jintiao(const ::std::string& value) {
  set_has_time2jintiao();
  if (time2jintiao_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time2jintiao_ = new ::std::string;
  }
  time2jintiao_->assign(value);
  // @@protoc_insertion_point(field_set:HatchEggInfo.time2Jintiao)
}
inline void HatchEggInfo::set_time2jintiao(const char* value) {
  set_has_time2jintiao();
  if (time2jintiao_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time2jintiao_ = new ::std::string;
  }
  time2jintiao_->assign(value);
  // @@protoc_insertion_point(field_set_char:HatchEggInfo.time2Jintiao)
}
inline void HatchEggInfo::set_time2jintiao(const char* value, size_t size) {
  set_has_time2jintiao();
  if (time2jintiao_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time2jintiao_ = new ::std::string;
  }
  time2jintiao_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HatchEggInfo.time2Jintiao)
}
inline ::std::string* HatchEggInfo::mutable_time2jintiao() {
  set_has_time2jintiao();
  if (time2jintiao_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time2jintiao_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HatchEggInfo.time2Jintiao)
  return time2jintiao_;
}
inline ::std::string* HatchEggInfo::release_time2jintiao() {
  clear_has_time2jintiao();
  if (time2jintiao_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time2jintiao_;
    time2jintiao_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HatchEggInfo::set_allocated_time2jintiao(::std::string* time2jintiao) {
  if (time2jintiao_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time2jintiao_;
  }
  if (time2jintiao) {
    set_has_time2jintiao();
    time2jintiao_ = time2jintiao;
  } else {
    clear_has_time2jintiao();
    time2jintiao_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HatchEggInfo.time2Jintiao)
}

// repeated .Iteminfo needItems = 3;
inline int HatchEggInfo::needitems_size() const {
  return needitems_.size();
}
inline void HatchEggInfo::clear_needitems() {
  needitems_.Clear();
}
inline const ::Iteminfo& HatchEggInfo::needitems(int index) const {
  // @@protoc_insertion_point(field_get:HatchEggInfo.needItems)
  return needitems_.Get(index);
}
inline ::Iteminfo* HatchEggInfo::mutable_needitems(int index) {
  // @@protoc_insertion_point(field_mutable:HatchEggInfo.needItems)
  return needitems_.Mutable(index);
}
inline ::Iteminfo* HatchEggInfo::add_needitems() {
  // @@protoc_insertion_point(field_add:HatchEggInfo.needItems)
  return needitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
HatchEggInfo::needitems() const {
  // @@protoc_insertion_point(field_list:HatchEggInfo.needItems)
  return needitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
HatchEggInfo::mutable_needitems() {
  // @@protoc_insertion_point(field_mutable_list:HatchEggInfo.needItems)
  return &needitems_;
}

// -------------------------------------------------------------------

// GCInitChickenActivity

// optional int32 activityId = 1;
inline bool GCInitChickenActivity::has_activityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCInitChickenActivity::set_has_activityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCInitChickenActivity::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCInitChickenActivity::clear_activityid() {
  activityid_ = 0;
  clear_has_activityid();
}
inline ::google::protobuf::int32 GCInitChickenActivity::activityid() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.activityId)
  return activityid_;
}
inline void GCInitChickenActivity::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
  // @@protoc_insertion_point(field_set:GCInitChickenActivity.activityId)
}

// optional string content = 2;
inline bool GCInitChickenActivity::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCInitChickenActivity::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCInitChickenActivity::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCInitChickenActivity::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GCInitChickenActivity::content() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.content)
  return *content_;
}
inline void GCInitChickenActivity::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:GCInitChickenActivity.content)
}
inline void GCInitChickenActivity::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCInitChickenActivity.content)
}
inline void GCInitChickenActivity::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCInitChickenActivity.content)
}
inline ::std::string* GCInitChickenActivity::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.content)
  return content_;
}
inline ::std::string* GCInitChickenActivity::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCInitChickenActivity::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCInitChickenActivity.content)
}

// optional .EggInfo eggInfo = 3;
inline bool GCInitChickenActivity::has_egginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCInitChickenActivity::set_has_egginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCInitChickenActivity::clear_has_egginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCInitChickenActivity::clear_egginfo() {
  if (egginfo_ != NULL) egginfo_->::EggInfo::Clear();
  clear_has_egginfo();
}
inline const ::EggInfo& GCInitChickenActivity::egginfo() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.eggInfo)
  return egginfo_ != NULL ? *egginfo_ : *default_instance_->egginfo_;
}
inline ::EggInfo* GCInitChickenActivity::mutable_egginfo() {
  set_has_egginfo();
  if (egginfo_ == NULL) egginfo_ = new ::EggInfo;
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.eggInfo)
  return egginfo_;
}
inline ::EggInfo* GCInitChickenActivity::release_egginfo() {
  clear_has_egginfo();
  ::EggInfo* temp = egginfo_;
  egginfo_ = NULL;
  return temp;
}
inline void GCInitChickenActivity::set_allocated_egginfo(::EggInfo* egginfo) {
  delete egginfo_;
  egginfo_ = egginfo;
  if (egginfo) {
    set_has_egginfo();
  } else {
    clear_has_egginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCInitChickenActivity.eggInfo)
}

// repeated .Iteminfo chickenItemArr = 4;
inline int GCInitChickenActivity::chickenitemarr_size() const {
  return chickenitemarr_.size();
}
inline void GCInitChickenActivity::clear_chickenitemarr() {
  chickenitemarr_.Clear();
}
inline const ::Iteminfo& GCInitChickenActivity::chickenitemarr(int index) const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.chickenItemArr)
  return chickenitemarr_.Get(index);
}
inline ::Iteminfo* GCInitChickenActivity::mutable_chickenitemarr(int index) {
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.chickenItemArr)
  return chickenitemarr_.Mutable(index);
}
inline ::Iteminfo* GCInitChickenActivity::add_chickenitemarr() {
  // @@protoc_insertion_point(field_add:GCInitChickenActivity.chickenItemArr)
  return chickenitemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
GCInitChickenActivity::chickenitemarr() const {
  // @@protoc_insertion_point(field_list:GCInitChickenActivity.chickenItemArr)
  return chickenitemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
GCInitChickenActivity::mutable_chickenitemarr() {
  // @@protoc_insertion_point(field_mutable_list:GCInitChickenActivity.chickenItemArr)
  return &chickenitemarr_;
}

// repeated .HatchEggInfo hatchEggTemplate = 5;
inline int GCInitChickenActivity::hatcheggtemplate_size() const {
  return hatcheggtemplate_.size();
}
inline void GCInitChickenActivity::clear_hatcheggtemplate() {
  hatcheggtemplate_.Clear();
}
inline const ::HatchEggInfo& GCInitChickenActivity::hatcheggtemplate(int index) const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.hatchEggTemplate)
  return hatcheggtemplate_.Get(index);
}
inline ::HatchEggInfo* GCInitChickenActivity::mutable_hatcheggtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.hatchEggTemplate)
  return hatcheggtemplate_.Mutable(index);
}
inline ::HatchEggInfo* GCInitChickenActivity::add_hatcheggtemplate() {
  // @@protoc_insertion_point(field_add:GCInitChickenActivity.hatchEggTemplate)
  return hatcheggtemplate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HatchEggInfo >&
GCInitChickenActivity::hatcheggtemplate() const {
  // @@protoc_insertion_point(field_list:GCInitChickenActivity.hatchEggTemplate)
  return hatcheggtemplate_;
}
inline ::google::protobuf::RepeatedPtrField< ::HatchEggInfo >*
GCInitChickenActivity::mutable_hatcheggtemplate() {
  // @@protoc_insertion_point(field_mutable_list:GCInitChickenActivity.hatchEggTemplate)
  return &hatcheggtemplate_;
}

// optional int32 actType = 6;
inline bool GCInitChickenActivity::has_acttype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCInitChickenActivity::set_has_acttype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCInitChickenActivity::clear_has_acttype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCInitChickenActivity::clear_acttype() {
  acttype_ = 0;
  clear_has_acttype();
}
inline ::google::protobuf::int32 GCInitChickenActivity::acttype() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.actType)
  return acttype_;
}
inline void GCInitChickenActivity::set_acttype(::google::protobuf::int32 value) {
  set_has_acttype();
  acttype_ = value;
  // @@protoc_insertion_point(field_set:GCInitChickenActivity.actType)
}

// optional string model1 = 7;
inline bool GCInitChickenActivity::has_model1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCInitChickenActivity::set_has_model1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCInitChickenActivity::clear_has_model1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCInitChickenActivity::clear_model1() {
  if (model1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model1_->clear();
  }
  clear_has_model1();
}
inline const ::std::string& GCInitChickenActivity::model1() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.model1)
  return *model1_;
}
inline void GCInitChickenActivity::set_model1(const ::std::string& value) {
  set_has_model1();
  if (model1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model1_ = new ::std::string;
  }
  model1_->assign(value);
  // @@protoc_insertion_point(field_set:GCInitChickenActivity.model1)
}
inline void GCInitChickenActivity::set_model1(const char* value) {
  set_has_model1();
  if (model1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model1_ = new ::std::string;
  }
  model1_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCInitChickenActivity.model1)
}
inline void GCInitChickenActivity::set_model1(const char* value, size_t size) {
  set_has_model1();
  if (model1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model1_ = new ::std::string;
  }
  model1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCInitChickenActivity.model1)
}
inline ::std::string* GCInitChickenActivity::mutable_model1() {
  set_has_model1();
  if (model1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.model1)
  return model1_;
}
inline ::std::string* GCInitChickenActivity::release_model1() {
  clear_has_model1();
  if (model1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model1_;
    model1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCInitChickenActivity::set_allocated_model1(::std::string* model1) {
  if (model1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model1_;
  }
  if (model1) {
    set_has_model1();
    model1_ = model1;
  } else {
    clear_has_model1();
    model1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCInitChickenActivity.model1)
}

// optional string model2 = 8;
inline bool GCInitChickenActivity::has_model2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCInitChickenActivity::set_has_model2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCInitChickenActivity::clear_has_model2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCInitChickenActivity::clear_model2() {
  if (model2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model2_->clear();
  }
  clear_has_model2();
}
inline const ::std::string& GCInitChickenActivity::model2() const {
  // @@protoc_insertion_point(field_get:GCInitChickenActivity.model2)
  return *model2_;
}
inline void GCInitChickenActivity::set_model2(const ::std::string& value) {
  set_has_model2();
  if (model2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model2_ = new ::std::string;
  }
  model2_->assign(value);
  // @@protoc_insertion_point(field_set:GCInitChickenActivity.model2)
}
inline void GCInitChickenActivity::set_model2(const char* value) {
  set_has_model2();
  if (model2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model2_ = new ::std::string;
  }
  model2_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCInitChickenActivity.model2)
}
inline void GCInitChickenActivity::set_model2(const char* value, size_t size) {
  set_has_model2();
  if (model2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model2_ = new ::std::string;
  }
  model2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCInitChickenActivity.model2)
}
inline ::std::string* GCInitChickenActivity::mutable_model2() {
  set_has_model2();
  if (model2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCInitChickenActivity.model2)
  return model2_;
}
inline ::std::string* GCInitChickenActivity::release_model2() {
  clear_has_model2();
  if (model2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model2_;
    model2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCInitChickenActivity::set_allocated_model2(::std::string* model2) {
  if (model2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model2_;
  }
  if (model2) {
    set_has_model2();
    model2_ = model2;
  } else {
    clear_has_model2();
    model2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCInitChickenActivity.model2)
}

// -------------------------------------------------------------------

// CGEggHatch

// optional int32 type = 1;
inline bool CGEggHatch::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGEggHatch::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGEggHatch::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGEggHatch::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGEggHatch::type() const {
  // @@protoc_insertion_point(field_get:CGEggHatch.type)
  return type_;
}
inline void CGEggHatch::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGEggHatch.type)
}

// optional int32 num = 2;
inline bool CGEggHatch::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGEggHatch::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGEggHatch::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGEggHatch::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CGEggHatch::num() const {
  // @@protoc_insertion_point(field_get:CGEggHatch.num)
  return num_;
}
inline void CGEggHatch::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:CGEggHatch.num)
}

// optional int32 operator = 3;
inline bool CGEggHatch::has_operator_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGEggHatch::set_has_operator_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGEggHatch::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGEggHatch::clear_operator_() {
  operator__ = 0;
  clear_has_operator_();
}
inline ::google::protobuf::int32 CGEggHatch::operator_() const {
  // @@protoc_insertion_point(field_get:CGEggHatch.operator)
  return operator__;
}
inline void CGEggHatch::set_operator_(::google::protobuf::int32 value) {
  set_has_operator_();
  operator__ = value;
  // @@protoc_insertion_point(field_set:CGEggHatch.operator)
}

// -------------------------------------------------------------------

// GCEggHatchBack

// optional int32 result = 1;
inline bool GCEggHatchBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCEggHatchBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCEggHatchBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCEggHatchBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCEggHatchBack::result() const {
  // @@protoc_insertion_point(field_get:GCEggHatchBack.result)
  return result_;
}
inline void GCEggHatchBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCEggHatchBack.result)
}

// optional .EggInfo eggInfo = 2;
inline bool GCEggHatchBack::has_egginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCEggHatchBack::set_has_egginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCEggHatchBack::clear_has_egginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCEggHatchBack::clear_egginfo() {
  if (egginfo_ != NULL) egginfo_->::EggInfo::Clear();
  clear_has_egginfo();
}
inline const ::EggInfo& GCEggHatchBack::egginfo() const {
  // @@protoc_insertion_point(field_get:GCEggHatchBack.eggInfo)
  return egginfo_ != NULL ? *egginfo_ : *default_instance_->egginfo_;
}
inline ::EggInfo* GCEggHatchBack::mutable_egginfo() {
  set_has_egginfo();
  if (egginfo_ == NULL) egginfo_ = new ::EggInfo;
  // @@protoc_insertion_point(field_mutable:GCEggHatchBack.eggInfo)
  return egginfo_;
}
inline ::EggInfo* GCEggHatchBack::release_egginfo() {
  clear_has_egginfo();
  ::EggInfo* temp = egginfo_;
  egginfo_ = NULL;
  return temp;
}
inline void GCEggHatchBack::set_allocated_egginfo(::EggInfo* egginfo) {
  delete egginfo_;
  egginfo_ = egginfo;
  if (egginfo) {
    set_has_egginfo();
  } else {
    clear_has_egginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCEggHatchBack.eggInfo)
}

// -------------------------------------------------------------------

// RedBagInfo

// optional int32 id = 1;
inline bool RedBagInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedBagInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedBagInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedBagInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RedBagInfo::id() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.id)
  return id_;
}
inline void RedBagInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RedBagInfo.id)
}

// optional int32 status = 2;
inline bool RedBagInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedBagInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedBagInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedBagInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RedBagInfo::status() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.status)
  return status_;
}
inline void RedBagInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:RedBagInfo.status)
}

// optional int64 createTime = 3;
inline bool RedBagInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedBagInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedBagInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedBagInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 RedBagInfo::createtime() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.createTime)
  return createtime_;
}
inline void RedBagInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:RedBagInfo.createTime)
}

// optional int64 expiryTime = 4;
inline bool RedBagInfo::has_expirytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedBagInfo::set_has_expirytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedBagInfo::clear_has_expirytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedBagInfo::clear_expirytime() {
  expirytime_ = GOOGLE_LONGLONG(0);
  clear_has_expirytime();
}
inline ::google::protobuf::int64 RedBagInfo::expirytime() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.expiryTime)
  return expirytime_;
}
inline void RedBagInfo::set_expirytime(::google::protobuf::int64 value) {
  set_has_expirytime();
  expirytime_ = value;
  // @@protoc_insertion_point(field_set:RedBagInfo.expiryTime)
}

// repeated .Iteminfo rewardArr = 5;
inline int RedBagInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void RedBagInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::Iteminfo& RedBagInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:RedBagInfo.rewardArr)
  return rewardarr_.Get(index);
}
inline ::Iteminfo* RedBagInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:RedBagInfo.rewardArr)
  return rewardarr_.Mutable(index);
}
inline ::Iteminfo* RedBagInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:RedBagInfo.rewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
RedBagInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:RedBagInfo.rewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
RedBagInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:RedBagInfo.rewardArr)
  return &rewardarr_;
}

// optional string name = 6;
inline bool RedBagInfo::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RedBagInfo::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RedBagInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RedBagInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RedBagInfo::name() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.name)
  return *name_;
}
inline void RedBagInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RedBagInfo.name)
}
inline void RedBagInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RedBagInfo.name)
}
inline void RedBagInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RedBagInfo.name)
}
inline ::std::string* RedBagInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RedBagInfo.name)
  return name_;
}
inline ::std::string* RedBagInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RedBagInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RedBagInfo.name)
}

// optional string title = 7;
inline bool RedBagInfo::has_title() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RedBagInfo::set_has_title() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RedBagInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RedBagInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& RedBagInfo::title() const {
  // @@protoc_insertion_point(field_get:RedBagInfo.title)
  return *title_;
}
inline void RedBagInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:RedBagInfo.title)
}
inline void RedBagInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:RedBagInfo.title)
}
inline void RedBagInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RedBagInfo.title)
}
inline ::std::string* RedBagInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RedBagInfo.title)
  return title_;
}
inline ::std::string* RedBagInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RedBagInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RedBagInfo.title)
}

// -------------------------------------------------------------------

// GCInitRedBagInfo

// repeated .RedBagInfo redBagArr = 1;
inline int GCInitRedBagInfo::redbagarr_size() const {
  return redbagarr_.size();
}
inline void GCInitRedBagInfo::clear_redbagarr() {
  redbagarr_.Clear();
}
inline const ::RedBagInfo& GCInitRedBagInfo::redbagarr(int index) const {
  // @@protoc_insertion_point(field_get:GCInitRedBagInfo.redBagArr)
  return redbagarr_.Get(index);
}
inline ::RedBagInfo* GCInitRedBagInfo::mutable_redbagarr(int index) {
  // @@protoc_insertion_point(field_mutable:GCInitRedBagInfo.redBagArr)
  return redbagarr_.Mutable(index);
}
inline ::RedBagInfo* GCInitRedBagInfo::add_redbagarr() {
  // @@protoc_insertion_point(field_add:GCInitRedBagInfo.redBagArr)
  return redbagarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RedBagInfo >&
GCInitRedBagInfo::redbagarr() const {
  // @@protoc_insertion_point(field_list:GCInitRedBagInfo.redBagArr)
  return redbagarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::RedBagInfo >*
GCInitRedBagInfo::mutable_redbagarr() {
  // @@protoc_insertion_point(field_mutable_list:GCInitRedBagInfo.redBagArr)
  return &redbagarr_;
}

// optional int32 operator = 2;
inline bool GCInitRedBagInfo::has_operator_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCInitRedBagInfo::set_has_operator_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCInitRedBagInfo::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCInitRedBagInfo::clear_operator_() {
  operator__ = 0;
  clear_has_operator_();
}
inline ::google::protobuf::int32 GCInitRedBagInfo::operator_() const {
  // @@protoc_insertion_point(field_get:GCInitRedBagInfo.operator)
  return operator__;
}
inline void GCInitRedBagInfo::set_operator_(::google::protobuf::int32 value) {
  set_has_operator_();
  operator__ = value;
  // @@protoc_insertion_point(field_set:GCInitRedBagInfo.operator)
}

// -------------------------------------------------------------------

// CGGetRedBag

// optional int32 id = 1;
inline bool CGGetRedBag::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetRedBag::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetRedBag::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetRedBag::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGGetRedBag::id() const {
  // @@protoc_insertion_point(field_get:CGGetRedBag.id)
  return id_;
}
inline void CGGetRedBag::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGGetRedBag.id)
}

// optional int32 operator = 2;
inline bool CGGetRedBag::has_operator_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGetRedBag::set_has_operator_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGetRedBag::clear_has_operator_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGetRedBag::clear_operator_() {
  operator__ = 0;
  clear_has_operator_();
}
inline ::google::protobuf::int32 CGGetRedBag::operator_() const {
  // @@protoc_insertion_point(field_get:CGGetRedBag.operator)
  return operator__;
}
inline void CGGetRedBag::set_operator_(::google::protobuf::int32 value) {
  set_has_operator_();
  operator__ = value;
  // @@protoc_insertion_point(field_set:CGGetRedBag.operator)
}

// -------------------------------------------------------------------

// GCGetRedBagBack

// optional int32 result = 1;
inline bool GCGetRedBagBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGetRedBagBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGetRedBagBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGetRedBagBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGetRedBagBack::result() const {
  // @@protoc_insertion_point(field_get:GCGetRedBagBack.result)
  return result_;
}
inline void GCGetRedBagBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGetRedBagBack.result)
}

// optional int32 status = 2;
inline bool GCGetRedBagBack::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGetRedBagBack::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGetRedBagBack::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGetRedBagBack::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GCGetRedBagBack::status() const {
  // @@protoc_insertion_point(field_get:GCGetRedBagBack.status)
  return status_;
}
inline void GCGetRedBagBack::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:GCGetRedBagBack.status)
}

// repeated int32 id = 3;
inline int GCGetRedBagBack::id_size() const {
  return id_.size();
}
inline void GCGetRedBagBack::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 GCGetRedBagBack::id(int index) const {
  // @@protoc_insertion_point(field_get:GCGetRedBagBack.id)
  return id_.Get(index);
}
inline void GCGetRedBagBack::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCGetRedBagBack.id)
}
inline void GCGetRedBagBack::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:GCGetRedBagBack.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCGetRedBagBack::id() const {
  // @@protoc_insertion_point(field_list:GCGetRedBagBack.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCGetRedBagBack::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:GCGetRedBagBack.id)
  return &id_;
}

// -------------------------------------------------------------------

// NewYearLuckyDrawHistory

// optional int64 time = 1;
inline bool NewYearLuckyDrawHistory::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewYearLuckyDrawHistory::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewYearLuckyDrawHistory::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewYearLuckyDrawHistory::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 NewYearLuckyDrawHistory::time() const {
  // @@protoc_insertion_point(field_get:NewYearLuckyDrawHistory.time)
  return time_;
}
inline void NewYearLuckyDrawHistory::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:NewYearLuckyDrawHistory.time)
}

// optional .Iteminfo itemInfo = 2;
inline bool NewYearLuckyDrawHistory::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewYearLuckyDrawHistory::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewYearLuckyDrawHistory::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewYearLuckyDrawHistory::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Iteminfo::Clear();
  clear_has_iteminfo();
}
inline const ::Iteminfo& NewYearLuckyDrawHistory::iteminfo() const {
  // @@protoc_insertion_point(field_get:NewYearLuckyDrawHistory.itemInfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Iteminfo* NewYearLuckyDrawHistory::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Iteminfo;
  // @@protoc_insertion_point(field_mutable:NewYearLuckyDrawHistory.itemInfo)
  return iteminfo_;
}
inline ::Iteminfo* NewYearLuckyDrawHistory::release_iteminfo() {
  clear_has_iteminfo();
  ::Iteminfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void NewYearLuckyDrawHistory::set_allocated_iteminfo(::Iteminfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:NewYearLuckyDrawHistory.itemInfo)
}

// -------------------------------------------------------------------

// CGNewYearLuckyDraw

// optional int32 operateType = 1;
inline bool CGNewYearLuckyDraw::has_operatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGNewYearLuckyDraw::set_has_operatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGNewYearLuckyDraw::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGNewYearLuckyDraw::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 CGNewYearLuckyDraw::operatetype() const {
  // @@protoc_insertion_point(field_get:CGNewYearLuckyDraw.operateType)
  return operatetype_;
}
inline void CGNewYearLuckyDraw::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:CGNewYearLuckyDraw.operateType)
}

// -------------------------------------------------------------------

// GCNewYearLuckyDrawBack

// optional int32 operateType = 1;
inline bool GCNewYearLuckyDrawBack::has_operatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_operatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCNewYearLuckyDrawBack::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCNewYearLuckyDrawBack::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 GCNewYearLuckyDrawBack::operatetype() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.operateType)
  return operatetype_;
}
inline void GCNewYearLuckyDrawBack::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.operateType)
}

// optional string note = 2;
inline bool GCNewYearLuckyDrawBack::has_note() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_note() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCNewYearLuckyDrawBack::clear_has_note() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCNewYearLuckyDrawBack::clear_note() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_->clear();
  }
  clear_has_note();
}
inline const ::std::string& GCNewYearLuckyDrawBack::note() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.note)
  return *note_;
}
inline void GCNewYearLuckyDrawBack::set_note(const ::std::string& value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_ = new ::std::string;
  }
  note_->assign(value);
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.note)
}
inline void GCNewYearLuckyDrawBack::set_note(const char* value) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_ = new ::std::string;
  }
  note_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCNewYearLuckyDrawBack.note)
}
inline void GCNewYearLuckyDrawBack::set_note(const char* value, size_t size) {
  set_has_note();
  if (note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_ = new ::std::string;
  }
  note_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCNewYearLuckyDrawBack.note)
}
inline ::std::string* GCNewYearLuckyDrawBack::mutable_note() {
  set_has_note();
  if (note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    note_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawBack.note)
  return note_;
}
inline ::std::string* GCNewYearLuckyDrawBack::release_note() {
  clear_has_note();
  if (note_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = note_;
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCNewYearLuckyDrawBack::set_allocated_note(::std::string* note) {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (note) {
    set_has_note();
    note_ = note;
  } else {
    clear_has_note();
    note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCNewYearLuckyDrawBack.note)
}

// optional string items = 3;
inline bool GCNewYearLuckyDrawBack::has_items() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_items() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCNewYearLuckyDrawBack::clear_has_items() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCNewYearLuckyDrawBack::clear_items() {
  if (items_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    items_->clear();
  }
  clear_has_items();
}
inline const ::std::string& GCNewYearLuckyDrawBack::items() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.items)
  return *items_;
}
inline void GCNewYearLuckyDrawBack::set_items(const ::std::string& value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    items_ = new ::std::string;
  }
  items_->assign(value);
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.items)
}
inline void GCNewYearLuckyDrawBack::set_items(const char* value) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    items_ = new ::std::string;
  }
  items_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCNewYearLuckyDrawBack.items)
}
inline void GCNewYearLuckyDrawBack::set_items(const char* value, size_t size) {
  set_has_items();
  if (items_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    items_ = new ::std::string;
  }
  items_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCNewYearLuckyDrawBack.items)
}
inline ::std::string* GCNewYearLuckyDrawBack::mutable_items() {
  set_has_items();
  if (items_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    items_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawBack.items)
  return items_;
}
inline ::std::string* GCNewYearLuckyDrawBack::release_items() {
  clear_has_items();
  if (items_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = items_;
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCNewYearLuckyDrawBack::set_allocated_items(::std::string* items) {
  if (items_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete items_;
  }
  if (items) {
    set_has_items();
    items_ = items;
  } else {
    clear_has_items();
    items_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCNewYearLuckyDrawBack.items)
}

// optional int32 needScore = 4;
inline bool GCNewYearLuckyDrawBack::has_needscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_needscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCNewYearLuckyDrawBack::clear_has_needscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCNewYearLuckyDrawBack::clear_needscore() {
  needscore_ = 0;
  clear_has_needscore();
}
inline ::google::protobuf::int32 GCNewYearLuckyDrawBack::needscore() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.needScore)
  return needscore_;
}
inline void GCNewYearLuckyDrawBack::set_needscore(::google::protobuf::int32 value) {
  set_has_needscore();
  needscore_ = value;
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.needScore)
}

// optional int32 curScore = 5;
inline bool GCNewYearLuckyDrawBack::has_curscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_curscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCNewYearLuckyDrawBack::clear_has_curscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCNewYearLuckyDrawBack::clear_curscore() {
  curscore_ = 0;
  clear_has_curscore();
}
inline ::google::protobuf::int32 GCNewYearLuckyDrawBack::curscore() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.curScore)
  return curscore_;
}
inline void GCNewYearLuckyDrawBack::set_curscore(::google::protobuf::int32 value) {
  set_has_curscore();
  curscore_ = value;
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.curScore)
}

// optional int32 allScore = 6;
inline bool GCNewYearLuckyDrawBack::has_allscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_allscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCNewYearLuckyDrawBack::clear_has_allscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCNewYearLuckyDrawBack::clear_allscore() {
  allscore_ = 0;
  clear_has_allscore();
}
inline ::google::protobuf::int32 GCNewYearLuckyDrawBack::allscore() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.allScore)
  return allscore_;
}
inline void GCNewYearLuckyDrawBack::set_allscore(::google::protobuf::int32 value) {
  set_has_allscore();
  allscore_ = value;
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.allScore)
}

// optional int32 drawIndex = 7;
inline bool GCNewYearLuckyDrawBack::has_drawindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCNewYearLuckyDrawBack::set_has_drawindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCNewYearLuckyDrawBack::clear_has_drawindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCNewYearLuckyDrawBack::clear_drawindex() {
  drawindex_ = 0;
  clear_has_drawindex();
}
inline ::google::protobuf::int32 GCNewYearLuckyDrawBack::drawindex() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.drawIndex)
  return drawindex_;
}
inline void GCNewYearLuckyDrawBack::set_drawindex(::google::protobuf::int32 value) {
  set_has_drawindex();
  drawindex_ = value;
  // @@protoc_insertion_point(field_set:GCNewYearLuckyDrawBack.drawIndex)
}

// repeated .NewYearLuckyDrawHistory historyList = 8;
inline int GCNewYearLuckyDrawBack::historylist_size() const {
  return historylist_.size();
}
inline void GCNewYearLuckyDrawBack::clear_historylist() {
  historylist_.Clear();
}
inline const ::NewYearLuckyDrawHistory& GCNewYearLuckyDrawBack::historylist(int index) const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.historyList)
  return historylist_.Get(index);
}
inline ::NewYearLuckyDrawHistory* GCNewYearLuckyDrawBack::mutable_historylist(int index) {
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawBack.historyList)
  return historylist_.Mutable(index);
}
inline ::NewYearLuckyDrawHistory* GCNewYearLuckyDrawBack::add_historylist() {
  // @@protoc_insertion_point(field_add:GCNewYearLuckyDrawBack.historyList)
  return historylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearLuckyDrawHistory >&
GCNewYearLuckyDrawBack::historylist() const {
  // @@protoc_insertion_point(field_list:GCNewYearLuckyDrawBack.historyList)
  return historylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearLuckyDrawHistory >*
GCNewYearLuckyDrawBack::mutable_historylist() {
  // @@protoc_insertion_point(field_mutable_list:GCNewYearLuckyDrawBack.historyList)
  return &historylist_;
}

// repeated .ActivityRankReward rankRewardList = 9;
inline int GCNewYearLuckyDrawBack::rankrewardlist_size() const {
  return rankrewardlist_.size();
}
inline void GCNewYearLuckyDrawBack::clear_rankrewardlist() {
  rankrewardlist_.Clear();
}
inline const ::ActivityRankReward& GCNewYearLuckyDrawBack::rankrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawBack.rankRewardList)
  return rankrewardlist_.Get(index);
}
inline ::ActivityRankReward* GCNewYearLuckyDrawBack::mutable_rankrewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawBack.rankRewardList)
  return rankrewardlist_.Mutable(index);
}
inline ::ActivityRankReward* GCNewYearLuckyDrawBack::add_rankrewardlist() {
  // @@protoc_insertion_point(field_add:GCNewYearLuckyDrawBack.rankRewardList)
  return rankrewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCNewYearLuckyDrawBack::rankrewardlist() const {
  // @@protoc_insertion_point(field_list:GCNewYearLuckyDrawBack.rankRewardList)
  return rankrewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCNewYearLuckyDrawBack::mutable_rankrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:GCNewYearLuckyDrawBack.rankRewardList)
  return &rankrewardlist_;
}

// -------------------------------------------------------------------

// CGNewYearLuckyDrawRank

// -------------------------------------------------------------------

// GCNewYearLuckyDrawRank

// repeated .ActivityRankInfo rankList = 1;
inline int GCNewYearLuckyDrawRank::ranklist_size() const {
  return ranklist_.size();
}
inline void GCNewYearLuckyDrawRank::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::ActivityRankInfo& GCNewYearLuckyDrawRank::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawRank.rankList)
  return ranklist_.Get(index);
}
inline ::ActivityRankInfo* GCNewYearLuckyDrawRank::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawRank.rankList)
  return ranklist_.Mutable(index);
}
inline ::ActivityRankInfo* GCNewYearLuckyDrawRank::add_ranklist() {
  // @@protoc_insertion_point(field_add:GCNewYearLuckyDrawRank.rankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCNewYearLuckyDrawRank::ranklist() const {
  // @@protoc_insertion_point(field_list:GCNewYearLuckyDrawRank.rankList)
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCNewYearLuckyDrawRank::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:GCNewYearLuckyDrawRank.rankList)
  return &ranklist_;
}

// optional .ActivityRankInfo myRankInfo = 2;
inline bool GCNewYearLuckyDrawRank::has_myrankinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCNewYearLuckyDrawRank::set_has_myrankinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCNewYearLuckyDrawRank::clear_has_myrankinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCNewYearLuckyDrawRank::clear_myrankinfo() {
  if (myrankinfo_ != NULL) myrankinfo_->::ActivityRankInfo::Clear();
  clear_has_myrankinfo();
}
inline const ::ActivityRankInfo& GCNewYearLuckyDrawRank::myrankinfo() const {
  // @@protoc_insertion_point(field_get:GCNewYearLuckyDrawRank.myRankInfo)
  return myrankinfo_ != NULL ? *myrankinfo_ : *default_instance_->myrankinfo_;
}
inline ::ActivityRankInfo* GCNewYearLuckyDrawRank::mutable_myrankinfo() {
  set_has_myrankinfo();
  if (myrankinfo_ == NULL) myrankinfo_ = new ::ActivityRankInfo;
  // @@protoc_insertion_point(field_mutable:GCNewYearLuckyDrawRank.myRankInfo)
  return myrankinfo_;
}
inline ::ActivityRankInfo* GCNewYearLuckyDrawRank::release_myrankinfo() {
  clear_has_myrankinfo();
  ::ActivityRankInfo* temp = myrankinfo_;
  myrankinfo_ = NULL;
  return temp;
}
inline void GCNewYearLuckyDrawRank::set_allocated_myrankinfo(::ActivityRankInfo* myrankinfo) {
  delete myrankinfo_;
  myrankinfo_ = myrankinfo;
  if (myrankinfo) {
    set_has_myrankinfo();
  } else {
    clear_has_myrankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCNewYearLuckyDrawRank.myRankInfo)
}

// -------------------------------------------------------------------

// FlowerBabyHistory

// optional int64 time = 1;
inline bool FlowerBabyHistory::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowerBabyHistory::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowerBabyHistory::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowerBabyHistory::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 FlowerBabyHistory::time() const {
  // @@protoc_insertion_point(field_get:FlowerBabyHistory.time)
  return time_;
}
inline void FlowerBabyHistory::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:FlowerBabyHistory.time)
}

// optional int64 sendId = 2;
inline bool FlowerBabyHistory::has_sendid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowerBabyHistory::set_has_sendid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlowerBabyHistory::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlowerBabyHistory::clear_sendid() {
  sendid_ = GOOGLE_LONGLONG(0);
  clear_has_sendid();
}
inline ::google::protobuf::int64 FlowerBabyHistory::sendid() const {
  // @@protoc_insertion_point(field_get:FlowerBabyHistory.sendId)
  return sendid_;
}
inline void FlowerBabyHistory::set_sendid(::google::protobuf::int64 value) {
  set_has_sendid();
  sendid_ = value;
  // @@protoc_insertion_point(field_set:FlowerBabyHistory.sendId)
}

// optional string sendName = 3;
inline bool FlowerBabyHistory::has_sendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlowerBabyHistory::set_has_sendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlowerBabyHistory::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlowerBabyHistory::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& FlowerBabyHistory::sendname() const {
  // @@protoc_insertion_point(field_get:FlowerBabyHistory.sendName)
  return *sendname_;
}
inline void FlowerBabyHistory::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
  // @@protoc_insertion_point(field_set:FlowerBabyHistory.sendName)
}
inline void FlowerBabyHistory::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
  // @@protoc_insertion_point(field_set_char:FlowerBabyHistory.sendName)
}
inline void FlowerBabyHistory::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FlowerBabyHistory.sendName)
}
inline ::std::string* FlowerBabyHistory::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FlowerBabyHistory.sendName)
  return sendname_;
}
inline ::std::string* FlowerBabyHistory::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FlowerBabyHistory::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FlowerBabyHistory.sendName)
}

// optional int32 sendVip = 4;
inline bool FlowerBabyHistory::has_sendvip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlowerBabyHistory::set_has_sendvip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlowerBabyHistory::clear_has_sendvip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlowerBabyHistory::clear_sendvip() {
  sendvip_ = 0;
  clear_has_sendvip();
}
inline ::google::protobuf::int32 FlowerBabyHistory::sendvip() const {
  // @@protoc_insertion_point(field_get:FlowerBabyHistory.sendVip)
  return sendvip_;
}
inline void FlowerBabyHistory::set_sendvip(::google::protobuf::int32 value) {
  set_has_sendvip();
  sendvip_ = value;
  // @@protoc_insertion_point(field_set:FlowerBabyHistory.sendVip)
}

// optional int32 flowerId = 5;
inline bool FlowerBabyHistory::has_flowerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlowerBabyHistory::set_has_flowerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlowerBabyHistory::clear_has_flowerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlowerBabyHistory::clear_flowerid() {
  flowerid_ = 0;
  clear_has_flowerid();
}
inline ::google::protobuf::int32 FlowerBabyHistory::flowerid() const {
  // @@protoc_insertion_point(field_get:FlowerBabyHistory.flowerId)
  return flowerid_;
}
inline void FlowerBabyHistory::set_flowerid(::google::protobuf::int32 value) {
  set_has_flowerid();
  flowerid_ = value;
  // @@protoc_insertion_point(field_set:FlowerBabyHistory.flowerId)
}

// -------------------------------------------------------------------

// CGGetFlowerBabyInfo

// optional int64 playerID = 1;
inline bool CGGetFlowerBabyInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetFlowerBabyInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetFlowerBabyInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetFlowerBabyInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGGetFlowerBabyInfo::playerid() const {
  // @@protoc_insertion_point(field_get:CGGetFlowerBabyInfo.playerID)
  return playerid_;
}
inline void CGGetFlowerBabyInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGGetFlowerBabyInfo.playerID)
}

// -------------------------------------------------------------------

// GCGetFlowerBabyInfoBack

// repeated .FlowerBabyHistory hisList = 1;
inline int GCGetFlowerBabyInfoBack::hislist_size() const {
  return hislist_.size();
}
inline void GCGetFlowerBabyInfoBack::clear_hislist() {
  hislist_.Clear();
}
inline const ::FlowerBabyHistory& GCGetFlowerBabyInfoBack::hislist(int index) const {
  // @@protoc_insertion_point(field_get:GCGetFlowerBabyInfoBack.hisList)
  return hislist_.Get(index);
}
inline ::FlowerBabyHistory* GCGetFlowerBabyInfoBack::mutable_hislist(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetFlowerBabyInfoBack.hisList)
  return hislist_.Mutable(index);
}
inline ::FlowerBabyHistory* GCGetFlowerBabyInfoBack::add_hislist() {
  // @@protoc_insertion_point(field_add:GCGetFlowerBabyInfoBack.hisList)
  return hislist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlowerBabyHistory >&
GCGetFlowerBabyInfoBack::hislist() const {
  // @@protoc_insertion_point(field_list:GCGetFlowerBabyInfoBack.hisList)
  return hislist_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlowerBabyHistory >*
GCGetFlowerBabyInfoBack::mutable_hislist() {
  // @@protoc_insertion_point(field_mutable_list:GCGetFlowerBabyInfoBack.hisList)
  return &hislist_;
}

// optional int32 receiveScoreSum = 2;
inline bool GCGetFlowerBabyInfoBack::has_receivescoresum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGetFlowerBabyInfoBack::set_has_receivescoresum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGetFlowerBabyInfoBack::clear_has_receivescoresum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGetFlowerBabyInfoBack::clear_receivescoresum() {
  receivescoresum_ = 0;
  clear_has_receivescoresum();
}
inline ::google::protobuf::int32 GCGetFlowerBabyInfoBack::receivescoresum() const {
  // @@protoc_insertion_point(field_get:GCGetFlowerBabyInfoBack.receiveScoreSum)
  return receivescoresum_;
}
inline void GCGetFlowerBabyInfoBack::set_receivescoresum(::google::protobuf::int32 value) {
  set_has_receivescoresum();
  receivescoresum_ = value;
  // @@protoc_insertion_point(field_set:GCGetFlowerBabyInfoBack.receiveScoreSum)
}

// -------------------------------------------------------------------

// CGGiveFlower

// optional int32 flowerId = 1;
inline bool CGGiveFlower::has_flowerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGiveFlower::set_has_flowerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGiveFlower::clear_has_flowerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGiveFlower::clear_flowerid() {
  flowerid_ = 0;
  clear_has_flowerid();
}
inline ::google::protobuf::int32 CGGiveFlower::flowerid() const {
  // @@protoc_insertion_point(field_get:CGGiveFlower.flowerId)
  return flowerid_;
}
inline void CGGiveFlower::set_flowerid(::google::protobuf::int32 value) {
  set_has_flowerid();
  flowerid_ = value;
  // @@protoc_insertion_point(field_set:CGGiveFlower.flowerId)
}

// optional int64 playerID = 2;
inline bool CGGiveFlower::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGiveFlower::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGiveFlower::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGiveFlower::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGGiveFlower::playerid() const {
  // @@protoc_insertion_point(field_get:CGGiveFlower.playerID)
  return playerid_;
}
inline void CGGiveFlower::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGGiveFlower.playerID)
}

// -------------------------------------------------------------------

// GCGiveFlowerBack

// optional int32 operate = 1;
inline bool GCGiveFlowerBack::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGiveFlowerBack::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGiveFlowerBack::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGiveFlowerBack::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::operate() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.operate)
  return operate_;
}
inline void GCGiveFlowerBack::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.operate)
}

// optional int32 giveScore = 2;
inline bool GCGiveFlowerBack::has_givescore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGiveFlowerBack::set_has_givescore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGiveFlowerBack::clear_has_givescore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGiveFlowerBack::clear_givescore() {
  givescore_ = 0;
  clear_has_givescore();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::givescore() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.giveScore)
  return givescore_;
}
inline void GCGiveFlowerBack::set_givescore(::google::protobuf::int32 value) {
  set_has_givescore();
  givescore_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.giveScore)
}

// optional int32 receiveScore = 3;
inline bool GCGiveFlowerBack::has_receivescore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGiveFlowerBack::set_has_receivescore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGiveFlowerBack::clear_has_receivescore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGiveFlowerBack::clear_receivescore() {
  receivescore_ = 0;
  clear_has_receivescore();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::receivescore() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.receiveScore)
  return receivescore_;
}
inline void GCGiveFlowerBack::set_receivescore(::google::protobuf::int32 value) {
  set_has_receivescore();
  receivescore_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.receiveScore)
}

// optional int32 giveScoreSum = 4;
inline bool GCGiveFlowerBack::has_givescoresum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCGiveFlowerBack::set_has_givescoresum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCGiveFlowerBack::clear_has_givescoresum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCGiveFlowerBack::clear_givescoresum() {
  givescoresum_ = 0;
  clear_has_givescoresum();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::givescoresum() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.giveScoreSum)
  return givescoresum_;
}
inline void GCGiveFlowerBack::set_givescoresum(::google::protobuf::int32 value) {
  set_has_givescoresum();
  givescoresum_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.giveScoreSum)
}

// optional int32 receiveScoreSum = 5;
inline bool GCGiveFlowerBack::has_receivescoresum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCGiveFlowerBack::set_has_receivescoresum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCGiveFlowerBack::clear_has_receivescoresum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCGiveFlowerBack::clear_receivescoresum() {
  receivescoresum_ = 0;
  clear_has_receivescoresum();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::receivescoresum() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.receiveScoreSum)
  return receivescoresum_;
}
inline void GCGiveFlowerBack::set_receivescoresum(::google::protobuf::int32 value) {
  set_has_receivescoresum();
  receivescoresum_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.receiveScoreSum)
}

// repeated .FlowerRewardItem giveRankDaily = 6;
inline int GCGiveFlowerBack::giverankdaily_size() const {
  return giverankdaily_.size();
}
inline void GCGiveFlowerBack::clear_giverankdaily() {
  giverankdaily_.Clear();
}
inline const ::FlowerRewardItem& GCGiveFlowerBack::giverankdaily(int index) const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.giveRankDaily)
  return giverankdaily_.Get(index);
}
inline ::FlowerRewardItem* GCGiveFlowerBack::mutable_giverankdaily(int index) {
  // @@protoc_insertion_point(field_mutable:GCGiveFlowerBack.giveRankDaily)
  return giverankdaily_.Mutable(index);
}
inline ::FlowerRewardItem* GCGiveFlowerBack::add_giverankdaily() {
  // @@protoc_insertion_point(field_add:GCGiveFlowerBack.giveRankDaily)
  return giverankdaily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >&
GCGiveFlowerBack::giverankdaily() const {
  // @@protoc_insertion_point(field_list:GCGiveFlowerBack.giveRankDaily)
  return giverankdaily_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >*
GCGiveFlowerBack::mutable_giverankdaily() {
  // @@protoc_insertion_point(field_mutable_list:GCGiveFlowerBack.giveRankDaily)
  return &giverankdaily_;
}

// repeated .FlowerRewardItem receiveRankDaily = 7;
inline int GCGiveFlowerBack::receiverankdaily_size() const {
  return receiverankdaily_.size();
}
inline void GCGiveFlowerBack::clear_receiverankdaily() {
  receiverankdaily_.Clear();
}
inline const ::FlowerRewardItem& GCGiveFlowerBack::receiverankdaily(int index) const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.receiveRankDaily)
  return receiverankdaily_.Get(index);
}
inline ::FlowerRewardItem* GCGiveFlowerBack::mutable_receiverankdaily(int index) {
  // @@protoc_insertion_point(field_mutable:GCGiveFlowerBack.receiveRankDaily)
  return receiverankdaily_.Mutable(index);
}
inline ::FlowerRewardItem* GCGiveFlowerBack::add_receiverankdaily() {
  // @@protoc_insertion_point(field_add:GCGiveFlowerBack.receiveRankDaily)
  return receiverankdaily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >&
GCGiveFlowerBack::receiverankdaily() const {
  // @@protoc_insertion_point(field_list:GCGiveFlowerBack.receiveRankDaily)
  return receiverankdaily_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlowerRewardItem >*
GCGiveFlowerBack::mutable_receiverankdaily() {
  // @@protoc_insertion_point(field_mutable_list:GCGiveFlowerBack.receiveRankDaily)
  return &receiverankdaily_;
}

// repeated int32 flowerIdList = 8;
inline int GCGiveFlowerBack::floweridlist_size() const {
  return floweridlist_.size();
}
inline void GCGiveFlowerBack::clear_floweridlist() {
  floweridlist_.Clear();
}
inline ::google::protobuf::int32 GCGiveFlowerBack::floweridlist(int index) const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerBack.flowerIdList)
  return floweridlist_.Get(index);
}
inline void GCGiveFlowerBack::set_floweridlist(int index, ::google::protobuf::int32 value) {
  floweridlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCGiveFlowerBack.flowerIdList)
}
inline void GCGiveFlowerBack::add_floweridlist(::google::protobuf::int32 value) {
  floweridlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCGiveFlowerBack.flowerIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCGiveFlowerBack::floweridlist() const {
  // @@protoc_insertion_point(field_list:GCGiveFlowerBack.flowerIdList)
  return floweridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCGiveFlowerBack::mutable_floweridlist() {
  // @@protoc_insertion_point(field_mutable_list:GCGiveFlowerBack.flowerIdList)
  return &floweridlist_;
}

// -------------------------------------------------------------------

// FlowerRewardItem

// optional int32 id = 1;
inline bool FlowerRewardItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlowerRewardItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlowerRewardItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlowerRewardItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FlowerRewardItem::id() const {
  // @@protoc_insertion_point(field_get:FlowerRewardItem.id)
  return id_;
}
inline void FlowerRewardItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FlowerRewardItem.id)
}

// optional int32 needScore = 2;
inline bool FlowerRewardItem::has_needscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlowerRewardItem::set_has_needscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlowerRewardItem::clear_has_needscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlowerRewardItem::clear_needscore() {
  needscore_ = 0;
  clear_has_needscore();
}
inline ::google::protobuf::int32 FlowerRewardItem::needscore() const {
  // @@protoc_insertion_point(field_get:FlowerRewardItem.needScore)
  return needscore_;
}
inline void FlowerRewardItem::set_needscore(::google::protobuf::int32 value) {
  set_has_needscore();
  needscore_ = value;
  // @@protoc_insertion_point(field_set:FlowerRewardItem.needScore)
}

// optional string reward = 3;
inline bool FlowerRewardItem::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlowerRewardItem::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlowerRewardItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlowerRewardItem::clear_reward() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& FlowerRewardItem::reward() const {
  // @@protoc_insertion_point(field_get:FlowerRewardItem.reward)
  return *reward_;
}
inline void FlowerRewardItem::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set:FlowerRewardItem.reward)
}
inline void FlowerRewardItem::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set_char:FlowerRewardItem.reward)
}
inline void FlowerRewardItem::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FlowerRewardItem.reward)
}
inline ::std::string* FlowerRewardItem::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FlowerRewardItem.reward)
  return reward_;
}
inline ::std::string* FlowerRewardItem::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FlowerRewardItem::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FlowerRewardItem.reward)
}

// optional int32 state = 4;
inline bool FlowerRewardItem::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlowerRewardItem::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlowerRewardItem::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlowerRewardItem::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FlowerRewardItem::state() const {
  // @@protoc_insertion_point(field_get:FlowerRewardItem.state)
  return state_;
}
inline void FlowerRewardItem::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:FlowerRewardItem.state)
}

// -------------------------------------------------------------------

// CGGiveFlowerReward

// optional int32 id = 1;
inline bool CGGiveFlowerReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGiveFlowerReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGiveFlowerReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGiveFlowerReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGGiveFlowerReward::id() const {
  // @@protoc_insertion_point(field_get:CGGiveFlowerReward.id)
  return id_;
}
inline void CGGiveFlowerReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGGiveFlowerReward.id)
}

// optional int32 type = 2;
inline bool CGGiveFlowerReward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGiveFlowerReward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGiveFlowerReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGiveFlowerReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGGiveFlowerReward::type() const {
  // @@protoc_insertion_point(field_get:CGGiveFlowerReward.type)
  return type_;
}
inline void CGGiveFlowerReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGGiveFlowerReward.type)
}

// -------------------------------------------------------------------

// GCGiveFlowerRewardBack

// optional int32 result = 1;
inline bool GCGiveFlowerRewardBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGiveFlowerRewardBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGiveFlowerRewardBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGiveFlowerRewardBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGiveFlowerRewardBack::result() const {
  // @@protoc_insertion_point(field_get:GCGiveFlowerRewardBack.result)
  return result_;
}
inline void GCGiveFlowerRewardBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGiveFlowerRewardBack.result)
}

// -------------------------------------------------------------------

// CGFlowerBabyRank

// -------------------------------------------------------------------

// GCFlowerBabyRank

// optional int32 operate = 1;
inline bool GCFlowerBabyRank::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCFlowerBabyRank::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCFlowerBabyRank::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCFlowerBabyRank::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCFlowerBabyRank::operate() const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.operate)
  return operate_;
}
inline void GCFlowerBabyRank::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCFlowerBabyRank.operate)
}

// optional int32 giveRankTitleId = 2;
inline bool GCFlowerBabyRank::has_giveranktitleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCFlowerBabyRank::set_has_giveranktitleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCFlowerBabyRank::clear_has_giveranktitleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCFlowerBabyRank::clear_giveranktitleid() {
  giveranktitleid_ = 0;
  clear_has_giveranktitleid();
}
inline ::google::protobuf::int32 GCFlowerBabyRank::giveranktitleid() const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.giveRankTitleId)
  return giveranktitleid_;
}
inline void GCFlowerBabyRank::set_giveranktitleid(::google::protobuf::int32 value) {
  set_has_giveranktitleid();
  giveranktitleid_ = value;
  // @@protoc_insertion_point(field_set:GCFlowerBabyRank.giveRankTitleId)
}

// optional int32 receiveRankTitleId = 3;
inline bool GCFlowerBabyRank::has_receiveranktitleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCFlowerBabyRank::set_has_receiveranktitleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCFlowerBabyRank::clear_has_receiveranktitleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCFlowerBabyRank::clear_receiveranktitleid() {
  receiveranktitleid_ = 0;
  clear_has_receiveranktitleid();
}
inline ::google::protobuf::int32 GCFlowerBabyRank::receiveranktitleid() const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.receiveRankTitleId)
  return receiveranktitleid_;
}
inline void GCFlowerBabyRank::set_receiveranktitleid(::google::protobuf::int32 value) {
  set_has_receiveranktitleid();
  receiveranktitleid_ = value;
  // @@protoc_insertion_point(field_set:GCFlowerBabyRank.receiveRankTitleId)
}

// repeated .ActivityRankReward giveRankRewards = 4;
inline int GCFlowerBabyRank::giverankrewards_size() const {
  return giverankrewards_.size();
}
inline void GCFlowerBabyRank::clear_giverankrewards() {
  giverankrewards_.Clear();
}
inline const ::ActivityRankReward& GCFlowerBabyRank::giverankrewards(int index) const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.giveRankRewards)
  return giverankrewards_.Get(index);
}
inline ::ActivityRankReward* GCFlowerBabyRank::mutable_giverankrewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCFlowerBabyRank.giveRankRewards)
  return giverankrewards_.Mutable(index);
}
inline ::ActivityRankReward* GCFlowerBabyRank::add_giverankrewards() {
  // @@protoc_insertion_point(field_add:GCFlowerBabyRank.giveRankRewards)
  return giverankrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCFlowerBabyRank::giverankrewards() const {
  // @@protoc_insertion_point(field_list:GCFlowerBabyRank.giveRankRewards)
  return giverankrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCFlowerBabyRank::mutable_giverankrewards() {
  // @@protoc_insertion_point(field_mutable_list:GCFlowerBabyRank.giveRankRewards)
  return &giverankrewards_;
}

// repeated .ActivityRankReward receiveRankRewards = 5;
inline int GCFlowerBabyRank::receiverankrewards_size() const {
  return receiverankrewards_.size();
}
inline void GCFlowerBabyRank::clear_receiverankrewards() {
  receiverankrewards_.Clear();
}
inline const ::ActivityRankReward& GCFlowerBabyRank::receiverankrewards(int index) const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.receiveRankRewards)
  return receiverankrewards_.Get(index);
}
inline ::ActivityRankReward* GCFlowerBabyRank::mutable_receiverankrewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCFlowerBabyRank.receiveRankRewards)
  return receiverankrewards_.Mutable(index);
}
inline ::ActivityRankReward* GCFlowerBabyRank::add_receiverankrewards() {
  // @@protoc_insertion_point(field_add:GCFlowerBabyRank.receiveRankRewards)
  return receiverankrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCFlowerBabyRank::receiverankrewards() const {
  // @@protoc_insertion_point(field_list:GCFlowerBabyRank.receiveRankRewards)
  return receiverankrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCFlowerBabyRank::mutable_receiverankrewards() {
  // @@protoc_insertion_point(field_mutable_list:GCFlowerBabyRank.receiveRankRewards)
  return &receiverankrewards_;
}

// repeated .ActivityRankInfo giveRankList = 6;
inline int GCFlowerBabyRank::giveranklist_size() const {
  return giveranklist_.size();
}
inline void GCFlowerBabyRank::clear_giveranklist() {
  giveranklist_.Clear();
}
inline const ::ActivityRankInfo& GCFlowerBabyRank::giveranklist(int index) const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.giveRankList)
  return giveranklist_.Get(index);
}
inline ::ActivityRankInfo* GCFlowerBabyRank::mutable_giveranklist(int index) {
  // @@protoc_insertion_point(field_mutable:GCFlowerBabyRank.giveRankList)
  return giveranklist_.Mutable(index);
}
inline ::ActivityRankInfo* GCFlowerBabyRank::add_giveranklist() {
  // @@protoc_insertion_point(field_add:GCFlowerBabyRank.giveRankList)
  return giveranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCFlowerBabyRank::giveranklist() const {
  // @@protoc_insertion_point(field_list:GCFlowerBabyRank.giveRankList)
  return giveranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCFlowerBabyRank::mutable_giveranklist() {
  // @@protoc_insertion_point(field_mutable_list:GCFlowerBabyRank.giveRankList)
  return &giveranklist_;
}

// repeated .ActivityRankInfo receiveRankList = 7;
inline int GCFlowerBabyRank::receiveranklist_size() const {
  return receiveranklist_.size();
}
inline void GCFlowerBabyRank::clear_receiveranklist() {
  receiveranklist_.Clear();
}
inline const ::ActivityRankInfo& GCFlowerBabyRank::receiveranklist(int index) const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.receiveRankList)
  return receiveranklist_.Get(index);
}
inline ::ActivityRankInfo* GCFlowerBabyRank::mutable_receiveranklist(int index) {
  // @@protoc_insertion_point(field_mutable:GCFlowerBabyRank.receiveRankList)
  return receiveranklist_.Mutable(index);
}
inline ::ActivityRankInfo* GCFlowerBabyRank::add_receiveranklist() {
  // @@protoc_insertion_point(field_add:GCFlowerBabyRank.receiveRankList)
  return receiveranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCFlowerBabyRank::receiveranklist() const {
  // @@protoc_insertion_point(field_list:GCFlowerBabyRank.receiveRankList)
  return receiveranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCFlowerBabyRank::mutable_receiveranklist() {
  // @@protoc_insertion_point(field_mutable_list:GCFlowerBabyRank.receiveRankList)
  return &receiveranklist_;
}

// optional int32 myGiveRank = 8;
inline bool GCFlowerBabyRank::has_mygiverank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCFlowerBabyRank::set_has_mygiverank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCFlowerBabyRank::clear_has_mygiverank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCFlowerBabyRank::clear_mygiverank() {
  mygiverank_ = 0;
  clear_has_mygiverank();
}
inline ::google::protobuf::int32 GCFlowerBabyRank::mygiverank() const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.myGiveRank)
  return mygiverank_;
}
inline void GCFlowerBabyRank::set_mygiverank(::google::protobuf::int32 value) {
  set_has_mygiverank();
  mygiverank_ = value;
  // @@protoc_insertion_point(field_set:GCFlowerBabyRank.myGiveRank)
}

// optional int32 myReceiveRank = 9;
inline bool GCFlowerBabyRank::has_myreceiverank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCFlowerBabyRank::set_has_myreceiverank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCFlowerBabyRank::clear_has_myreceiverank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCFlowerBabyRank::clear_myreceiverank() {
  myreceiverank_ = 0;
  clear_has_myreceiverank();
}
inline ::google::protobuf::int32 GCFlowerBabyRank::myreceiverank() const {
  // @@protoc_insertion_point(field_get:GCFlowerBabyRank.myReceiveRank)
  return myreceiverank_;
}
inline void GCFlowerBabyRank::set_myreceiverank(::google::protobuf::int32 value) {
  set_has_myreceiverank();
  myreceiverank_ = value;
  // @@protoc_insertion_point(field_set:GCFlowerBabyRank.myReceiveRank)
}

// -------------------------------------------------------------------

// TreeInfo

// optional int32 id = 1;
inline bool TreeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TreeInfo::id() const {
  // @@protoc_insertion_point(field_get:TreeInfo.id)
  return id_;
}
inline void TreeInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TreeInfo.id)
}

// optional int32 needGrowth = 2;
inline bool TreeInfo::has_needgrowth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreeInfo::set_has_needgrowth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreeInfo::clear_has_needgrowth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreeInfo::clear_needgrowth() {
  needgrowth_ = 0;
  clear_has_needgrowth();
}
inline ::google::protobuf::int32 TreeInfo::needgrowth() const {
  // @@protoc_insertion_point(field_get:TreeInfo.needGrowth)
  return needgrowth_;
}
inline void TreeInfo::set_needgrowth(::google::protobuf::int32 value) {
  set_has_needgrowth();
  needgrowth_ = value;
  // @@protoc_insertion_point(field_set:TreeInfo.needGrowth)
}

// optional string rewardInfo = 3;
inline bool TreeInfo::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreeInfo::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreeInfo::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreeInfo::clear_rewardinfo() {
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardinfo_->clear();
  }
  clear_has_rewardinfo();
}
inline const ::std::string& TreeInfo::rewardinfo() const {
  // @@protoc_insertion_point(field_get:TreeInfo.rewardInfo)
  return *rewardinfo_;
}
inline void TreeInfo::set_rewardinfo(const ::std::string& value) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(value);
  // @@protoc_insertion_point(field_set:TreeInfo.rewardInfo)
}
inline void TreeInfo::set_rewardinfo(const char* value) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:TreeInfo.rewardInfo)
}
inline void TreeInfo::set_rewardinfo(const char* value, size_t size) {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardinfo_ = new ::std::string;
  }
  rewardinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TreeInfo.rewardInfo)
}
inline ::std::string* TreeInfo::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TreeInfo.rewardInfo)
  return rewardinfo_;
}
inline ::std::string* TreeInfo::release_rewardinfo() {
  clear_has_rewardinfo();
  if (rewardinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewardinfo_;
    rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeInfo::set_allocated_rewardinfo(::std::string* rewardinfo) {
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardinfo_;
  }
  if (rewardinfo) {
    set_has_rewardinfo();
    rewardinfo_ = rewardinfo;
  } else {
    clear_has_rewardinfo();
    rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TreeInfo.rewardInfo)
}

// optional int32 treeNPC = 4;
inline bool TreeInfo::has_treenpc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreeInfo::set_has_treenpc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreeInfo::clear_has_treenpc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreeInfo::clear_treenpc() {
  treenpc_ = 0;
  clear_has_treenpc();
}
inline ::google::protobuf::int32 TreeInfo::treenpc() const {
  // @@protoc_insertion_point(field_get:TreeInfo.treeNPC)
  return treenpc_;
}
inline void TreeInfo::set_treenpc(::google::protobuf::int32 value) {
  set_has_treenpc();
  treenpc_ = value;
  // @@protoc_insertion_point(field_set:TreeInfo.treeNPC)
}

// optional string treeName = 5;
inline bool TreeInfo::has_treename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreeInfo::set_has_treename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreeInfo::clear_has_treename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreeInfo::clear_treename() {
  if (treename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    treename_->clear();
  }
  clear_has_treename();
}
inline const ::std::string& TreeInfo::treename() const {
  // @@protoc_insertion_point(field_get:TreeInfo.treeName)
  return *treename_;
}
inline void TreeInfo::set_treename(const ::std::string& value) {
  set_has_treename();
  if (treename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    treename_ = new ::std::string;
  }
  treename_->assign(value);
  // @@protoc_insertion_point(field_set:TreeInfo.treeName)
}
inline void TreeInfo::set_treename(const char* value) {
  set_has_treename();
  if (treename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    treename_ = new ::std::string;
  }
  treename_->assign(value);
  // @@protoc_insertion_point(field_set_char:TreeInfo.treeName)
}
inline void TreeInfo::set_treename(const char* value, size_t size) {
  set_has_treename();
  if (treename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    treename_ = new ::std::string;
  }
  treename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TreeInfo.treeName)
}
inline ::std::string* TreeInfo::mutable_treename() {
  set_has_treename();
  if (treename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    treename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TreeInfo.treeName)
  return treename_;
}
inline ::std::string* TreeInfo::release_treename() {
  clear_has_treename();
  if (treename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = treename_;
    treename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeInfo::set_allocated_treename(::std::string* treename) {
  if (treename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete treename_;
  }
  if (treename) {
    set_has_treename();
    treename_ = treename;
  } else {
    clear_has_treename();
    treename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TreeInfo.treeName)
}

// optional int32 sceneId = 6;
inline bool TreeInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TreeInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TreeInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TreeInfo::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 TreeInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:TreeInfo.sceneId)
  return sceneid_;
}
inline void TreeInfo::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TreeInfo.sceneId)
}

// optional string pos = 7;
inline bool TreeInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TreeInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TreeInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TreeInfo::clear_pos() {
  if (pos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_->clear();
  }
  clear_has_pos();
}
inline const ::std::string& TreeInfo::pos() const {
  // @@protoc_insertion_point(field_get:TreeInfo.pos)
  return *pos_;
}
inline void TreeInfo::set_pos(const ::std::string& value) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_ = new ::std::string;
  }
  pos_->assign(value);
  // @@protoc_insertion_point(field_set:TreeInfo.pos)
}
inline void TreeInfo::set_pos(const char* value) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_ = new ::std::string;
  }
  pos_->assign(value);
  // @@protoc_insertion_point(field_set_char:TreeInfo.pos)
}
inline void TreeInfo::set_pos(const char* value, size_t size) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_ = new ::std::string;
  }
  pos_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TreeInfo.pos)
}
inline ::std::string* TreeInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pos_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TreeInfo.pos)
  return pos_;
}
inline ::std::string* TreeInfo::release_pos() {
  clear_has_pos();
  if (pos_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pos_;
    pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeInfo::set_allocated_pos(::std::string* pos) {
  if (pos_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pos_;
  }
  if (pos) {
    set_has_pos();
    pos_ = pos;
  } else {
    clear_has_pos();
    pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TreeInfo.pos)
}

// optional string scaling = 8;
inline bool TreeInfo::has_scaling() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TreeInfo::set_has_scaling() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TreeInfo::clear_has_scaling() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TreeInfo::clear_scaling() {
  if (scaling_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scaling_->clear();
  }
  clear_has_scaling();
}
inline const ::std::string& TreeInfo::scaling() const {
  // @@protoc_insertion_point(field_get:TreeInfo.scaling)
  return *scaling_;
}
inline void TreeInfo::set_scaling(const ::std::string& value) {
  set_has_scaling();
  if (scaling_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scaling_ = new ::std::string;
  }
  scaling_->assign(value);
  // @@protoc_insertion_point(field_set:TreeInfo.scaling)
}
inline void TreeInfo::set_scaling(const char* value) {
  set_has_scaling();
  if (scaling_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scaling_ = new ::std::string;
  }
  scaling_->assign(value);
  // @@protoc_insertion_point(field_set_char:TreeInfo.scaling)
}
inline void TreeInfo::set_scaling(const char* value, size_t size) {
  set_has_scaling();
  if (scaling_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scaling_ = new ::std::string;
  }
  scaling_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TreeInfo.scaling)
}
inline ::std::string* TreeInfo::mutable_scaling() {
  set_has_scaling();
  if (scaling_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scaling_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TreeInfo.scaling)
  return scaling_;
}
inline ::std::string* TreeInfo::release_scaling() {
  clear_has_scaling();
  if (scaling_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scaling_;
    scaling_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeInfo::set_allocated_scaling(::std::string* scaling) {
  if (scaling_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scaling_;
  }
  if (scaling) {
    set_has_scaling();
    scaling_ = scaling;
  } else {
    clear_has_scaling();
    scaling_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TreeInfo.scaling)
}

// -------------------------------------------------------------------

// TreeToolInfo

// optional int32 id = 1;
inline bool TreeToolInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeToolInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeToolInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeToolInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TreeToolInfo::id() const {
  // @@protoc_insertion_point(field_get:TreeToolInfo.id)
  return id_;
}
inline void TreeToolInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TreeToolInfo.id)
}

// optional string icon = 2;
inline bool TreeToolInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreeToolInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreeToolInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreeToolInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& TreeToolInfo::icon() const {
  // @@protoc_insertion_point(field_get:TreeToolInfo.icon)
  return *icon_;
}
inline void TreeToolInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:TreeToolInfo.icon)
}
inline void TreeToolInfo::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:TreeToolInfo.icon)
}
inline void TreeToolInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TreeToolInfo.icon)
}
inline ::std::string* TreeToolInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TreeToolInfo.icon)
  return icon_;
}
inline ::std::string* TreeToolInfo::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TreeToolInfo::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TreeToolInfo.icon)
}

// -------------------------------------------------------------------

// CGTreeDayProp

// optional int32 propId = 1;
inline bool CGTreeDayProp::has_propid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTreeDayProp::set_has_propid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTreeDayProp::clear_has_propid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTreeDayProp::clear_propid() {
  propid_ = 0;
  clear_has_propid();
}
inline ::google::protobuf::int32 CGTreeDayProp::propid() const {
  // @@protoc_insertion_point(field_get:CGTreeDayProp.propId)
  return propid_;
}
inline void CGTreeDayProp::set_propid(::google::protobuf::int32 value) {
  set_has_propid();
  propid_ = value;
  // @@protoc_insertion_point(field_set:CGTreeDayProp.propId)
}

// -------------------------------------------------------------------

// GCTreeDayPropBack

// optional int32 operate = 1;
inline bool GCTreeDayPropBack::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCTreeDayPropBack::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCTreeDayPropBack::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCTreeDayPropBack::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCTreeDayPropBack::operate() const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.operate)
  return operate_;
}
inline void GCTreeDayPropBack::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayPropBack.operate)
}

// optional int32 myGrowth = 2;
inline bool GCTreeDayPropBack::has_mygrowth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCTreeDayPropBack::set_has_mygrowth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCTreeDayPropBack::clear_has_mygrowth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCTreeDayPropBack::clear_mygrowth() {
  mygrowth_ = 0;
  clear_has_mygrowth();
}
inline ::google::protobuf::int32 GCTreeDayPropBack::mygrowth() const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.myGrowth)
  return mygrowth_;
}
inline void GCTreeDayPropBack::set_mygrowth(::google::protobuf::int32 value) {
  set_has_mygrowth();
  mygrowth_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayPropBack.myGrowth)
}

// optional int32 treeGrowth = 3;
inline bool GCTreeDayPropBack::has_treegrowth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCTreeDayPropBack::set_has_treegrowth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCTreeDayPropBack::clear_has_treegrowth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCTreeDayPropBack::clear_treegrowth() {
  treegrowth_ = 0;
  clear_has_treegrowth();
}
inline ::google::protobuf::int32 GCTreeDayPropBack::treegrowth() const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.treeGrowth)
  return treegrowth_;
}
inline void GCTreeDayPropBack::set_treegrowth(::google::protobuf::int32 value) {
  set_has_treegrowth();
  treegrowth_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayPropBack.treeGrowth)
}

// optional int32 treeID = 4;
inline bool GCTreeDayPropBack::has_treeid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCTreeDayPropBack::set_has_treeid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCTreeDayPropBack::clear_has_treeid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCTreeDayPropBack::clear_treeid() {
  treeid_ = 0;
  clear_has_treeid();
}
inline ::google::protobuf::int32 GCTreeDayPropBack::treeid() const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.treeID)
  return treeid_;
}
inline void GCTreeDayPropBack::set_treeid(::google::protobuf::int32 value) {
  set_has_treeid();
  treeid_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayPropBack.treeID)
}

// repeated .TreeInfo treeInfoList = 5;
inline int GCTreeDayPropBack::treeinfolist_size() const {
  return treeinfolist_.size();
}
inline void GCTreeDayPropBack::clear_treeinfolist() {
  treeinfolist_.Clear();
}
inline const ::TreeInfo& GCTreeDayPropBack::treeinfolist(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.treeInfoList)
  return treeinfolist_.Get(index);
}
inline ::TreeInfo* GCTreeDayPropBack::mutable_treeinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:GCTreeDayPropBack.treeInfoList)
  return treeinfolist_.Mutable(index);
}
inline ::TreeInfo* GCTreeDayPropBack::add_treeinfolist() {
  // @@protoc_insertion_point(field_add:GCTreeDayPropBack.treeInfoList)
  return treeinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TreeInfo >&
GCTreeDayPropBack::treeinfolist() const {
  // @@protoc_insertion_point(field_list:GCTreeDayPropBack.treeInfoList)
  return treeinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TreeInfo >*
GCTreeDayPropBack::mutable_treeinfolist() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayPropBack.treeInfoList)
  return &treeinfolist_;
}

// repeated .TreeToolInfo toolList = 6;
inline int GCTreeDayPropBack::toollist_size() const {
  return toollist_.size();
}
inline void GCTreeDayPropBack::clear_toollist() {
  toollist_.Clear();
}
inline const ::TreeToolInfo& GCTreeDayPropBack::toollist(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.toolList)
  return toollist_.Get(index);
}
inline ::TreeToolInfo* GCTreeDayPropBack::mutable_toollist(int index) {
  // @@protoc_insertion_point(field_mutable:GCTreeDayPropBack.toolList)
  return toollist_.Mutable(index);
}
inline ::TreeToolInfo* GCTreeDayPropBack::add_toollist() {
  // @@protoc_insertion_point(field_add:GCTreeDayPropBack.toolList)
  return toollist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TreeToolInfo >&
GCTreeDayPropBack::toollist() const {
  // @@protoc_insertion_point(field_list:GCTreeDayPropBack.toolList)
  return toollist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TreeToolInfo >*
GCTreeDayPropBack::mutable_toollist() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayPropBack.toolList)
  return &toollist_;
}

// repeated int32 rewardGetList = 7;
inline int GCTreeDayPropBack::rewardgetlist_size() const {
  return rewardgetlist_.size();
}
inline void GCTreeDayPropBack::clear_rewardgetlist() {
  rewardgetlist_.Clear();
}
inline ::google::protobuf::int32 GCTreeDayPropBack::rewardgetlist(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayPropBack.rewardGetList)
  return rewardgetlist_.Get(index);
}
inline void GCTreeDayPropBack::set_rewardgetlist(int index, ::google::protobuf::int32 value) {
  rewardgetlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCTreeDayPropBack.rewardGetList)
}
inline void GCTreeDayPropBack::add_rewardgetlist(::google::protobuf::int32 value) {
  rewardgetlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCTreeDayPropBack.rewardGetList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCTreeDayPropBack::rewardgetlist() const {
  // @@protoc_insertion_point(field_list:GCTreeDayPropBack.rewardGetList)
  return rewardgetlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCTreeDayPropBack::mutable_rewardgetlist() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayPropBack.rewardGetList)
  return &rewardgetlist_;
}

// -------------------------------------------------------------------

// CGTreeDayReward

// optional int32 id = 1;
inline bool CGTreeDayReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTreeDayReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTreeDayReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTreeDayReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGTreeDayReward::id() const {
  // @@protoc_insertion_point(field_get:CGTreeDayReward.id)
  return id_;
}
inline void CGTreeDayReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGTreeDayReward.id)
}

// -------------------------------------------------------------------

// GCTreeDayRewardBack

// optional int32 result = 1;
inline bool GCTreeDayRewardBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCTreeDayRewardBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCTreeDayRewardBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCTreeDayRewardBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCTreeDayRewardBack::result() const {
  // @@protoc_insertion_point(field_get:GCTreeDayRewardBack.result)
  return result_;
}
inline void GCTreeDayRewardBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayRewardBack.result)
}

// repeated int32 rewardGetList = 2;
inline int GCTreeDayRewardBack::rewardgetlist_size() const {
  return rewardgetlist_.size();
}
inline void GCTreeDayRewardBack::clear_rewardgetlist() {
  rewardgetlist_.Clear();
}
inline ::google::protobuf::int32 GCTreeDayRewardBack::rewardgetlist(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayRewardBack.rewardGetList)
  return rewardgetlist_.Get(index);
}
inline void GCTreeDayRewardBack::set_rewardgetlist(int index, ::google::protobuf::int32 value) {
  rewardgetlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCTreeDayRewardBack.rewardGetList)
}
inline void GCTreeDayRewardBack::add_rewardgetlist(::google::protobuf::int32 value) {
  rewardgetlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCTreeDayRewardBack.rewardGetList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCTreeDayRewardBack::rewardgetlist() const {
  // @@protoc_insertion_point(field_list:GCTreeDayRewardBack.rewardGetList)
  return rewardgetlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCTreeDayRewardBack::mutable_rewardgetlist() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayRewardBack.rewardGetList)
  return &rewardgetlist_;
}

// -------------------------------------------------------------------

// CGTreeDayRank

// -------------------------------------------------------------------

// GCTreeDayRankBack

// optional int32 operate = 1;
inline bool GCTreeDayRankBack::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCTreeDayRankBack::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCTreeDayRankBack::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCTreeDayRankBack::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCTreeDayRankBack::operate() const {
  // @@protoc_insertion_point(field_get:GCTreeDayRankBack.operate)
  return operate_;
}
inline void GCTreeDayRankBack::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayRankBack.operate)
}

// repeated .ActivityRankReward arborRankRewards = 2;
inline int GCTreeDayRankBack::arborrankrewards_size() const {
  return arborrankrewards_.size();
}
inline void GCTreeDayRankBack::clear_arborrankrewards() {
  arborrankrewards_.Clear();
}
inline const ::ActivityRankReward& GCTreeDayRankBack::arborrankrewards(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayRankBack.arborRankRewards)
  return arborrankrewards_.Get(index);
}
inline ::ActivityRankReward* GCTreeDayRankBack::mutable_arborrankrewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCTreeDayRankBack.arborRankRewards)
  return arborrankrewards_.Mutable(index);
}
inline ::ActivityRankReward* GCTreeDayRankBack::add_arborrankrewards() {
  // @@protoc_insertion_point(field_add:GCTreeDayRankBack.arborRankRewards)
  return arborrankrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCTreeDayRankBack::arborrankrewards() const {
  // @@protoc_insertion_point(field_list:GCTreeDayRankBack.arborRankRewards)
  return arborrankrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCTreeDayRankBack::mutable_arborrankrewards() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayRankBack.arborRankRewards)
  return &arborrankrewards_;
}

// repeated .ActivityRankInfo arborRankList = 3;
inline int GCTreeDayRankBack::arborranklist_size() const {
  return arborranklist_.size();
}
inline void GCTreeDayRankBack::clear_arborranklist() {
  arborranklist_.Clear();
}
inline const ::ActivityRankInfo& GCTreeDayRankBack::arborranklist(int index) const {
  // @@protoc_insertion_point(field_get:GCTreeDayRankBack.arborRankList)
  return arborranklist_.Get(index);
}
inline ::ActivityRankInfo* GCTreeDayRankBack::mutable_arborranklist(int index) {
  // @@protoc_insertion_point(field_mutable:GCTreeDayRankBack.arborRankList)
  return arborranklist_.Mutable(index);
}
inline ::ActivityRankInfo* GCTreeDayRankBack::add_arborranklist() {
  // @@protoc_insertion_point(field_add:GCTreeDayRankBack.arborRankList)
  return arborranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCTreeDayRankBack::arborranklist() const {
  // @@protoc_insertion_point(field_list:GCTreeDayRankBack.arborRankList)
  return arborranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCTreeDayRankBack::mutable_arborranklist() {
  // @@protoc_insertion_point(field_mutable_list:GCTreeDayRankBack.arborRankList)
  return &arborranklist_;
}

// optional int32 myArborRank = 4;
inline bool GCTreeDayRankBack::has_myarborrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCTreeDayRankBack::set_has_myarborrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCTreeDayRankBack::clear_has_myarborrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCTreeDayRankBack::clear_myarborrank() {
  myarborrank_ = 0;
  clear_has_myarborrank();
}
inline ::google::protobuf::int32 GCTreeDayRankBack::myarborrank() const {
  // @@protoc_insertion_point(field_get:GCTreeDayRankBack.myArborRank)
  return myarborrank_;
}
inline void GCTreeDayRankBack::set_myarborrank(::google::protobuf::int32 value) {
  set_has_myarborrank();
  myarborrank_ = value;
  // @@protoc_insertion_point(field_set:GCTreeDayRankBack.myArborRank)
}

// -------------------------------------------------------------------

// SweetDiceInfo

// optional int32 typeId = 1;
inline bool SweetDiceInfo::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SweetDiceInfo::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SweetDiceInfo::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SweetDiceInfo::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 SweetDiceInfo::typeid_() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.typeId)
  return typeid__;
}
inline void SweetDiceInfo::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:SweetDiceInfo.typeId)
}

// optional string name = 2;
inline bool SweetDiceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SweetDiceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SweetDiceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SweetDiceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SweetDiceInfo::name() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.name)
  return *name_;
}
inline void SweetDiceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.name)
}
inline void SweetDiceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.name)
}
inline void SweetDiceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.name)
}
inline ::std::string* SweetDiceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.name)
  return name_;
}
inline ::std::string* SweetDiceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.name)
}

// optional string needmoney = 3;
inline bool SweetDiceInfo::has_needmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SweetDiceInfo::set_has_needmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SweetDiceInfo::clear_has_needmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SweetDiceInfo::clear_needmoney() {
  if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    needmoney_->clear();
  }
  clear_has_needmoney();
}
inline const ::std::string& SweetDiceInfo::needmoney() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.needmoney)
  return *needmoney_;
}
inline void SweetDiceInfo::set_needmoney(const ::std::string& value) {
  set_has_needmoney();
  if (needmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    needmoney_ = new ::std::string;
  }
  needmoney_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.needmoney)
}
inline void SweetDiceInfo::set_needmoney(const char* value) {
  set_has_needmoney();
  if (needmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    needmoney_ = new ::std::string;
  }
  needmoney_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.needmoney)
}
inline void SweetDiceInfo::set_needmoney(const char* value, size_t size) {
  set_has_needmoney();
  if (needmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    needmoney_ = new ::std::string;
  }
  needmoney_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.needmoney)
}
inline ::std::string* SweetDiceInfo::mutable_needmoney() {
  set_has_needmoney();
  if (needmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    needmoney_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.needmoney)
  return needmoney_;
}
inline ::std::string* SweetDiceInfo::release_needmoney() {
  clear_has_needmoney();
  if (needmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = needmoney_;
    needmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_needmoney(::std::string* needmoney) {
  if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete needmoney_;
  }
  if (needmoney) {
    set_has_needmoney();
    needmoney_ = needmoney;
  } else {
    clear_has_needmoney();
    needmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.needmoney)
}

// optional string tenneedmoney = 4;
inline bool SweetDiceInfo::has_tenneedmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SweetDiceInfo::set_has_tenneedmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SweetDiceInfo::clear_has_tenneedmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SweetDiceInfo::clear_tenneedmoney() {
  if (tenneedmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tenneedmoney_->clear();
  }
  clear_has_tenneedmoney();
}
inline const ::std::string& SweetDiceInfo::tenneedmoney() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.tenneedmoney)
  return *tenneedmoney_;
}
inline void SweetDiceInfo::set_tenneedmoney(const ::std::string& value) {
  set_has_tenneedmoney();
  if (tenneedmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tenneedmoney_ = new ::std::string;
  }
  tenneedmoney_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.tenneedmoney)
}
inline void SweetDiceInfo::set_tenneedmoney(const char* value) {
  set_has_tenneedmoney();
  if (tenneedmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tenneedmoney_ = new ::std::string;
  }
  tenneedmoney_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.tenneedmoney)
}
inline void SweetDiceInfo::set_tenneedmoney(const char* value, size_t size) {
  set_has_tenneedmoney();
  if (tenneedmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tenneedmoney_ = new ::std::string;
  }
  tenneedmoney_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.tenneedmoney)
}
inline ::std::string* SweetDiceInfo::mutable_tenneedmoney() {
  set_has_tenneedmoney();
  if (tenneedmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tenneedmoney_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.tenneedmoney)
  return tenneedmoney_;
}
inline ::std::string* SweetDiceInfo::release_tenneedmoney() {
  clear_has_tenneedmoney();
  if (tenneedmoney_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tenneedmoney_;
    tenneedmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_tenneedmoney(::std::string* tenneedmoney) {
  if (tenneedmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tenneedmoney_;
  }
  if (tenneedmoney) {
    set_has_tenneedmoney();
    tenneedmoney_ = tenneedmoney;
  } else {
    clear_has_tenneedmoney();
    tenneedmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.tenneedmoney)
}

// optional string itemshow = 5;
inline bool SweetDiceInfo::has_itemshow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SweetDiceInfo::set_has_itemshow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SweetDiceInfo::clear_has_itemshow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SweetDiceInfo::clear_itemshow() {
  if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemshow_->clear();
  }
  clear_has_itemshow();
}
inline const ::std::string& SweetDiceInfo::itemshow() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.itemshow)
  return *itemshow_;
}
inline void SweetDiceInfo::set_itemshow(const ::std::string& value) {
  set_has_itemshow();
  if (itemshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemshow_ = new ::std::string;
  }
  itemshow_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.itemshow)
}
inline void SweetDiceInfo::set_itemshow(const char* value) {
  set_has_itemshow();
  if (itemshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemshow_ = new ::std::string;
  }
  itemshow_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.itemshow)
}
inline void SweetDiceInfo::set_itemshow(const char* value, size_t size) {
  set_has_itemshow();
  if (itemshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemshow_ = new ::std::string;
  }
  itemshow_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.itemshow)
}
inline ::std::string* SweetDiceInfo::mutable_itemshow() {
  set_has_itemshow();
  if (itemshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemshow_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.itemshow)
  return itemshow_;
}
inline ::std::string* SweetDiceInfo::release_itemshow() {
  clear_has_itemshow();
  if (itemshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemshow_;
    itemshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_itemshow(::std::string* itemshow) {
  if (itemshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemshow_;
  }
  if (itemshow) {
    set_has_itemshow();
    itemshow_ = itemshow;
  } else {
    clear_has_itemshow();
    itemshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.itemshow)
}

// optional int32 model = 6;
inline bool SweetDiceInfo::has_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SweetDiceInfo::set_has_model() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SweetDiceInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SweetDiceInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 SweetDiceInfo::model() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.model)
  return model_;
}
inline void SweetDiceInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:SweetDiceInfo.model)
}

// optional string scale = 7;
inline bool SweetDiceInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SweetDiceInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SweetDiceInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SweetDiceInfo::clear_scale() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& SweetDiceInfo::scale() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.scale)
  return *scale_;
}
inline void SweetDiceInfo::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.scale)
}
inline void SweetDiceInfo::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.scale)
}
inline void SweetDiceInfo::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.scale)
}
inline ::std::string* SweetDiceInfo::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.scale)
  return scale_;
}
inline ::std::string* SweetDiceInfo::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.scale)
}

// optional string rotate = 8;
inline bool SweetDiceInfo::has_rotate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SweetDiceInfo::set_has_rotate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SweetDiceInfo::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SweetDiceInfo::clear_rotate() {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_->clear();
  }
  clear_has_rotate();
}
inline const ::std::string& SweetDiceInfo::rotate() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.rotate)
  return *rotate_;
}
inline void SweetDiceInfo::set_rotate(const ::std::string& value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.rotate)
}
inline void SweetDiceInfo::set_rotate(const char* value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.rotate)
}
inline void SweetDiceInfo::set_rotate(const char* value, size_t size) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.rotate)
}
inline ::std::string* SweetDiceInfo::mutable_rotate() {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.rotate)
  return rotate_;
}
inline ::std::string* SweetDiceInfo::release_rotate() {
  clear_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rotate_;
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_rotate(::std::string* rotate) {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (rotate) {
    set_has_rotate();
    rotate_ = rotate;
  } else {
    clear_has_rotate();
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.rotate)
}

// optional string position = 9;
inline bool SweetDiceInfo::has_position() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SweetDiceInfo::set_has_position() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SweetDiceInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SweetDiceInfo::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& SweetDiceInfo::position() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.position)
  return *position_;
}
inline void SweetDiceInfo::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.position)
}
inline void SweetDiceInfo::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.position)
}
inline void SweetDiceInfo::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.position)
}
inline ::std::string* SweetDiceInfo::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.position)
  return position_;
}
inline ::std::string* SweetDiceInfo::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.position)
}

// optional string noticetxt = 10;
inline bool SweetDiceInfo::has_noticetxt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SweetDiceInfo::set_has_noticetxt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SweetDiceInfo::clear_has_noticetxt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SweetDiceInfo::clear_noticetxt() {
  if (noticetxt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticetxt_->clear();
  }
  clear_has_noticetxt();
}
inline const ::std::string& SweetDiceInfo::noticetxt() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.noticetxt)
  return *noticetxt_;
}
inline void SweetDiceInfo::set_noticetxt(const ::std::string& value) {
  set_has_noticetxt();
  if (noticetxt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticetxt_ = new ::std::string;
  }
  noticetxt_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.noticetxt)
}
inline void SweetDiceInfo::set_noticetxt(const char* value) {
  set_has_noticetxt();
  if (noticetxt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticetxt_ = new ::std::string;
  }
  noticetxt_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.noticetxt)
}
inline void SweetDiceInfo::set_noticetxt(const char* value, size_t size) {
  set_has_noticetxt();
  if (noticetxt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticetxt_ = new ::std::string;
  }
  noticetxt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.noticetxt)
}
inline ::std::string* SweetDiceInfo::mutable_noticetxt() {
  set_has_noticetxt();
  if (noticetxt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    noticetxt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.noticetxt)
  return noticetxt_;
}
inline ::std::string* SweetDiceInfo::release_noticetxt() {
  clear_has_noticetxt();
  if (noticetxt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = noticetxt_;
    noticetxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_noticetxt(::std::string* noticetxt) {
  if (noticetxt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete noticetxt_;
  }
  if (noticetxt) {
    set_has_noticetxt();
    noticetxt_ = noticetxt;
  } else {
    clear_has_noticetxt();
    noticetxt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.noticetxt)
}

// optional string iconName = 11;
inline bool SweetDiceInfo::has_iconname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SweetDiceInfo::set_has_iconname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SweetDiceInfo::clear_has_iconname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SweetDiceInfo::clear_iconname() {
  if (iconname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconname_->clear();
  }
  clear_has_iconname();
}
inline const ::std::string& SweetDiceInfo::iconname() const {
  // @@protoc_insertion_point(field_get:SweetDiceInfo.iconName)
  return *iconname_;
}
inline void SweetDiceInfo::set_iconname(const ::std::string& value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
  // @@protoc_insertion_point(field_set:SweetDiceInfo.iconName)
}
inline void SweetDiceInfo::set_iconname(const char* value) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SweetDiceInfo.iconName)
}
inline void SweetDiceInfo::set_iconname(const char* value, size_t size) {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconname_ = new ::std::string;
  }
  iconname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SweetDiceInfo.iconName)
}
inline ::std::string* SweetDiceInfo::mutable_iconname() {
  set_has_iconname();
  if (iconname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SweetDiceInfo.iconName)
  return iconname_;
}
inline ::std::string* SweetDiceInfo::release_iconname() {
  clear_has_iconname();
  if (iconname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iconname_;
    iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SweetDiceInfo::set_allocated_iconname(::std::string* iconname) {
  if (iconname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconname_;
  }
  if (iconname) {
    set_has_iconname();
    iconname_ = iconname;
  } else {
    clear_has_iconname();
    iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SweetDiceInfo.iconName)
}

// -------------------------------------------------------------------

// PlayerSweetDice

// optional int32 typeId = 1;
inline bool PlayerSweetDice::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSweetDice::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSweetDice::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSweetDice::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 PlayerSweetDice::typeid_() const {
  // @@protoc_insertion_point(field_get:PlayerSweetDice.typeId)
  return typeid__;
}
inline void PlayerSweetDice::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:PlayerSweetDice.typeId)
}

// optional int32 posId = 2;
inline bool PlayerSweetDice::has_posid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSweetDice::set_has_posid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSweetDice::clear_has_posid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSweetDice::clear_posid() {
  posid_ = 0;
  clear_has_posid();
}
inline ::google::protobuf::int32 PlayerSweetDice::posid() const {
  // @@protoc_insertion_point(field_get:PlayerSweetDice.posId)
  return posid_;
}
inline void PlayerSweetDice::set_posid(::google::protobuf::int32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:PlayerSweetDice.posId)
}

// optional int32 freeTimes = 3;
inline bool PlayerSweetDice::has_freetimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSweetDice::set_has_freetimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSweetDice::clear_has_freetimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSweetDice::clear_freetimes() {
  freetimes_ = 0;
  clear_has_freetimes();
}
inline ::google::protobuf::int32 PlayerSweetDice::freetimes() const {
  // @@protoc_insertion_point(field_get:PlayerSweetDice.freeTimes)
  return freetimes_;
}
inline void PlayerSweetDice::set_freetimes(::google::protobuf::int32 value) {
  set_has_freetimes();
  freetimes_ = value;
  // @@protoc_insertion_point(field_set:PlayerSweetDice.freeTimes)
}

// optional int32 sweetDiceNum = 4;
inline bool PlayerSweetDice::has_sweetdicenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerSweetDice::set_has_sweetdicenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerSweetDice::clear_has_sweetdicenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerSweetDice::clear_sweetdicenum() {
  sweetdicenum_ = 0;
  clear_has_sweetdicenum();
}
inline ::google::protobuf::int32 PlayerSweetDice::sweetdicenum() const {
  // @@protoc_insertion_point(field_get:PlayerSweetDice.sweetDiceNum)
  return sweetdicenum_;
}
inline void PlayerSweetDice::set_sweetdicenum(::google::protobuf::int32 value) {
  set_has_sweetdicenum();
  sweetdicenum_ = value;
  // @@protoc_insertion_point(field_set:PlayerSweetDice.sweetDiceNum)
}

// -------------------------------------------------------------------

// CGSweetDice

// optional int32 typeId = 1;
inline bool CGSweetDice::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGSweetDice::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGSweetDice::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGSweetDice::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 CGSweetDice::typeid_() const {
  // @@protoc_insertion_point(field_get:CGSweetDice.typeId)
  return typeid__;
}
inline void CGSweetDice::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:CGSweetDice.typeId)
}

// optional int32 operate = 2;
inline bool CGSweetDice::has_operate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGSweetDice::set_has_operate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGSweetDice::clear_has_operate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGSweetDice::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGSweetDice::operate() const {
  // @@protoc_insertion_point(field_get:CGSweetDice.operate)
  return operate_;
}
inline void CGSweetDice::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGSweetDice.operate)
}

// optional int32 freeFlag = 3;
inline bool CGSweetDice::has_freeflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGSweetDice::set_has_freeflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGSweetDice::clear_has_freeflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGSweetDice::clear_freeflag() {
  freeflag_ = 0;
  clear_has_freeflag();
}
inline ::google::protobuf::int32 CGSweetDice::freeflag() const {
  // @@protoc_insertion_point(field_get:CGSweetDice.freeFlag)
  return freeflag_;
}
inline void CGSweetDice::set_freeflag(::google::protobuf::int32 value) {
  set_has_freeflag();
  freeflag_ = value;
  // @@protoc_insertion_point(field_set:CGSweetDice.freeFlag)
}

// -------------------------------------------------------------------

// GCSweetDice

// optional int32 operate = 1;
inline bool GCSweetDice::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSweetDice::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSweetDice::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSweetDice::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCSweetDice::operate() const {
  // @@protoc_insertion_point(field_get:GCSweetDice.operate)
  return operate_;
}
inline void GCSweetDice::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCSweetDice.operate)
}

// repeated .SweetDiceInfo sweetDiceData = 2;
inline int GCSweetDice::sweetdicedata_size() const {
  return sweetdicedata_.size();
}
inline void GCSweetDice::clear_sweetdicedata() {
  sweetdicedata_.Clear();
}
inline const ::SweetDiceInfo& GCSweetDice::sweetdicedata(int index) const {
  // @@protoc_insertion_point(field_get:GCSweetDice.sweetDiceData)
  return sweetdicedata_.Get(index);
}
inline ::SweetDiceInfo* GCSweetDice::mutable_sweetdicedata(int index) {
  // @@protoc_insertion_point(field_mutable:GCSweetDice.sweetDiceData)
  return sweetdicedata_.Mutable(index);
}
inline ::SweetDiceInfo* GCSweetDice::add_sweetdicedata() {
  // @@protoc_insertion_point(field_add:GCSweetDice.sweetDiceData)
  return sweetdicedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SweetDiceInfo >&
GCSweetDice::sweetdicedata() const {
  // @@protoc_insertion_point(field_list:GCSweetDice.sweetDiceData)
  return sweetdicedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SweetDiceInfo >*
GCSweetDice::mutable_sweetdicedata() {
  // @@protoc_insertion_point(field_mutable_list:GCSweetDice.sweetDiceData)
  return &sweetdicedata_;
}

// repeated .PlayerSweetDice playerSweetDiceData = 3;
inline int GCSweetDice::playersweetdicedata_size() const {
  return playersweetdicedata_.size();
}
inline void GCSweetDice::clear_playersweetdicedata() {
  playersweetdicedata_.Clear();
}
inline const ::PlayerSweetDice& GCSweetDice::playersweetdicedata(int index) const {
  // @@protoc_insertion_point(field_get:GCSweetDice.playerSweetDiceData)
  return playersweetdicedata_.Get(index);
}
inline ::PlayerSweetDice* GCSweetDice::mutable_playersweetdicedata(int index) {
  // @@protoc_insertion_point(field_mutable:GCSweetDice.playerSweetDiceData)
  return playersweetdicedata_.Mutable(index);
}
inline ::PlayerSweetDice* GCSweetDice::add_playersweetdicedata() {
  // @@protoc_insertion_point(field_add:GCSweetDice.playerSweetDiceData)
  return playersweetdicedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSweetDice >&
GCSweetDice::playersweetdicedata() const {
  // @@protoc_insertion_point(field_list:GCSweetDice.playerSweetDiceData)
  return playersweetdicedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSweetDice >*
GCSweetDice::mutable_playersweetdicedata() {
  // @@protoc_insertion_point(field_mutable_list:GCSweetDice.playerSweetDiceData)
  return &playersweetdicedata_;
}

// optional .PlayerSweetDice playerSweetDice = 4;
inline bool GCSweetDice::has_playersweetdice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCSweetDice::set_has_playersweetdice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCSweetDice::clear_has_playersweetdice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCSweetDice::clear_playersweetdice() {
  if (playersweetdice_ != NULL) playersweetdice_->::PlayerSweetDice::Clear();
  clear_has_playersweetdice();
}
inline const ::PlayerSweetDice& GCSweetDice::playersweetdice() const {
  // @@protoc_insertion_point(field_get:GCSweetDice.playerSweetDice)
  return playersweetdice_ != NULL ? *playersweetdice_ : *default_instance_->playersweetdice_;
}
inline ::PlayerSweetDice* GCSweetDice::mutable_playersweetdice() {
  set_has_playersweetdice();
  if (playersweetdice_ == NULL) playersweetdice_ = new ::PlayerSweetDice;
  // @@protoc_insertion_point(field_mutable:GCSweetDice.playerSweetDice)
  return playersweetdice_;
}
inline ::PlayerSweetDice* GCSweetDice::release_playersweetdice() {
  clear_has_playersweetdice();
  ::PlayerSweetDice* temp = playersweetdice_;
  playersweetdice_ = NULL;
  return temp;
}
inline void GCSweetDice::set_allocated_playersweetdice(::PlayerSweetDice* playersweetdice) {
  delete playersweetdice_;
  playersweetdice_ = playersweetdice;
  if (playersweetdice) {
    set_has_playersweetdice();
  } else {
    clear_has_playersweetdice();
  }
  // @@protoc_insertion_point(field_set_allocated:GCSweetDice.playerSweetDice)
}

// repeated int32 tenPosList = 5;
inline int GCSweetDice::tenposlist_size() const {
  return tenposlist_.size();
}
inline void GCSweetDice::clear_tenposlist() {
  tenposlist_.Clear();
}
inline ::google::protobuf::int32 GCSweetDice::tenposlist(int index) const {
  // @@protoc_insertion_point(field_get:GCSweetDice.tenPosList)
  return tenposlist_.Get(index);
}
inline void GCSweetDice::set_tenposlist(int index, ::google::protobuf::int32 value) {
  tenposlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCSweetDice.tenPosList)
}
inline void GCSweetDice::add_tenposlist(::google::protobuf::int32 value) {
  tenposlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCSweetDice.tenPosList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCSweetDice::tenposlist() const {
  // @@protoc_insertion_point(field_list:GCSweetDice.tenPosList)
  return tenposlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCSweetDice::mutable_tenposlist() {
  // @@protoc_insertion_point(field_mutable_list:GCSweetDice.tenPosList)
  return &tenposlist_;
}

// -------------------------------------------------------------------

// CGGetSweetDiceItem

// optional int32 typeId = 1;
inline bool CGGetSweetDiceItem::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetSweetDiceItem::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetSweetDiceItem::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetSweetDiceItem::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 CGGetSweetDiceItem::typeid_() const {
  // @@protoc_insertion_point(field_get:CGGetSweetDiceItem.typeId)
  return typeid__;
}
inline void CGGetSweetDiceItem::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:CGGetSweetDiceItem.typeId)
}

// -------------------------------------------------------------------

// CGBuySweetDice

// optional int32 typeId = 1;
inline bool CGBuySweetDice::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBuySweetDice::set_has_typeid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBuySweetDice::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBuySweetDice::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 CGBuySweetDice::typeid_() const {
  // @@protoc_insertion_point(field_get:CGBuySweetDice.typeId)
  return typeid__;
}
inline void CGBuySweetDice::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
  // @@protoc_insertion_point(field_set:CGBuySweetDice.typeId)
}

// optional int32 buySweetDiceNum = 2;
inline bool CGBuySweetDice::has_buysweetdicenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBuySweetDice::set_has_buysweetdicenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBuySweetDice::clear_has_buysweetdicenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBuySweetDice::clear_buysweetdicenum() {
  buysweetdicenum_ = 0;
  clear_has_buysweetdicenum();
}
inline ::google::protobuf::int32 CGBuySweetDice::buysweetdicenum() const {
  // @@protoc_insertion_point(field_get:CGBuySweetDice.buySweetDiceNum)
  return buysweetdicenum_;
}
inline void CGBuySweetDice::set_buysweetdicenum(::google::protobuf::int32 value) {
  set_has_buysweetdicenum();
  buysweetdicenum_ = value;
  // @@protoc_insertion_point(field_set:CGBuySweetDice.buySweetDiceNum)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActivityMessage_2eproto__INCLUDED
