// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityRankMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityRankMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ActivityRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityRankReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGActivityRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGActivityRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCActivityRankResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCActivityRankResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityRankMessage_2eproto() {
  protobuf_AddDesc_ActivityRankMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityRankMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityRankInfo_descriptor_ = file->message_type(0);
  static const int ActivityRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, points_),
  };
  ActivityRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRankInfo_descriptor_,
      ActivityRankInfo::default_instance_,
      ActivityRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRankInfo));
  ActivityRankReward_descriptor_ = file->message_type(1);
  static const int ActivityRankReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, pointreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, showreward_),
  };
  ActivityRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityRankReward_descriptor_,
      ActivityRankReward::default_instance_,
      ActivityRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityRankReward));
  CGActivityRank_descriptor_ = file->message_type(2);
  static const int CGActivityRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityRank, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityRank, type_),
  };
  CGActivityRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGActivityRank_descriptor_,
      CGActivityRank::default_instance_,
      CGActivityRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGActivityRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGActivityRank));
  GCActivityRankResult_descriptor_ = file->message_type(3);
  static const int GCActivityRankResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, chargeranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, spendranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, playercharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, playerspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, chargerewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, spendrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, type_),
  };
  GCActivityRankResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCActivityRankResult_descriptor_,
      GCActivityRankResult::default_instance_,
      GCActivityRankResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCActivityRankResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCActivityRankResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityRankMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRankInfo_descriptor_, &ActivityRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityRankReward_descriptor_, &ActivityRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGActivityRank_descriptor_, &CGActivityRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCActivityRankResult_descriptor_, &GCActivityRankResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityRankMessage_2eproto() {
  delete ActivityRankInfo::default_instance_;
  delete ActivityRankInfo_reflection_;
  delete ActivityRankReward::default_instance_;
  delete ActivityRankReward_reflection_;
  delete CGActivityRank::default_instance_;
  delete CGActivityRank_reflection_;
  delete GCActivityRankResult::default_instance_;
  delete GCActivityRankResult_reflection_;
}

void protobuf_AddDesc_ActivityRankMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031ActivityRankMessage.proto\"V\n\020ActivityR"
    "ankInfo\022\020\n\010playerID\030\001 \001(\003\022\022\n\nplayerName\030"
    "\002 \001(\t\022\014\n\004rank\030\003 \001(\005\022\016\n\006points\030\004 \001(\005\"k\n\022A"
    "ctivityRankReward\022\014\n\004rank\030\001 \001(\005\022\016\n\006point"
    "s\030\002 \001(\005\022\016\n\006reward\030\003 \001(\t\022\023\n\013pointReward\030\004"
    " \001(\t\022\022\n\nshowReward\030\005 \001(\t\"/\n\016CGActivityRa"
    "nk\022\017\n\007operate\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\254\002\n\024GC"
    "ActivityRankResult\022\017\n\007operate\030\001 \001(\005\022&\n\013c"
    "hargeRanks\030\002 \003(\0132\021.ActivityRankInfo\022%\n\ns"
    "pendRanks\030\003 \003(\0132\021.ActivityRankInfo\022\'\n\014pl"
    "ayerCharge\030\004 \001(\0132\021.ActivityRankInfo\022&\n\013p"
    "layerSpend\030\005 \001(\0132\021.ActivityRankInfo\022*\n\rc"
    "hargeRewards\030\006 \003(\0132\023.ActivityRankReward\022"
    ")\n\014spendRewards\030\007 \003(\0132\023.ActivityRankRewa"
    "rd\022\014\n\004type\030\010 \001(\005B\031\n\027com.mile.common.mess"
    "age", 603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityRankMessage.proto", &protobuf_RegisterTypes);
  ActivityRankInfo::default_instance_ = new ActivityRankInfo();
  ActivityRankReward::default_instance_ = new ActivityRankReward();
  CGActivityRank::default_instance_ = new CGActivityRank();
  GCActivityRankResult::default_instance_ = new GCActivityRankResult();
  ActivityRankInfo::default_instance_->InitAsDefaultInstance();
  ActivityRankReward::default_instance_->InitAsDefaultInstance();
  CGActivityRank::default_instance_->InitAsDefaultInstance();
  GCActivityRankResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityRankMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityRankMessage_2eproto {
  StaticDescriptorInitializer_ActivityRankMessage_2eproto() {
    protobuf_AddDesc_ActivityRankMessage_2eproto();
  }
} static_descriptor_initializer_ActivityRankMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivityRankInfo::kPlayerIDFieldNumber;
const int ActivityRankInfo::kPlayerNameFieldNumber;
const int ActivityRankInfo::kRankFieldNumber;
const int ActivityRankInfo::kPointsFieldNumber;
#endif  // !_MSC_VER

ActivityRankInfo::ActivityRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityRankInfo)
}

void ActivityRankInfo::InitAsDefaultInstance() {
}

ActivityRankInfo::ActivityRankInfo(const ActivityRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityRankInfo)
}

void ActivityRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_ = 0;
  points_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRankInfo::~ActivityRankInfo() {
  // @@protoc_insertion_point(destructor:ActivityRankInfo)
  SharedDtor();
}

void ActivityRankInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ActivityRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRankInfo_descriptor_;
}

const ActivityRankInfo& ActivityRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRankMessage_2eproto();
  return *default_instance_;
}

ActivityRankInfo* ActivityRankInfo::default_instance_ = NULL;

ActivityRankInfo* ActivityRankInfo::New() const {
  return new ActivityRankInfo;
}

void ActivityRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rank_, points_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_points;
        break;
      }

      // optional int32 points = 4;
      case 4: {
        if (tag == 32) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityRankInfo)
  return false;
#undef DO_
}

void ActivityRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityRankInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional int32 points = 4;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityRankInfo)
}

::google::protobuf::uint8* ActivityRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityRankInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional int32 points = 4;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityRankInfo)
  return target;
}

int ActivityRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 points = 4;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRankInfo::MergeFrom(const ActivityRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRankInfo::CopyFrom(const ActivityRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRankInfo::IsInitialized() const {

  return true;
}

void ActivityRankInfo::Swap(ActivityRankInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(rank_, other->rank_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRankInfo_descriptor_;
  metadata.reflection = ActivityRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityRankReward::kRankFieldNumber;
const int ActivityRankReward::kPointsFieldNumber;
const int ActivityRankReward::kRewardFieldNumber;
const int ActivityRankReward::kPointRewardFieldNumber;
const int ActivityRankReward::kShowRewardFieldNumber;
#endif  // !_MSC_VER

ActivityRankReward::ActivityRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityRankReward)
}

void ActivityRankReward::InitAsDefaultInstance() {
}

ActivityRankReward::ActivityRankReward(const ActivityRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityRankReward)
}

void ActivityRankReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0;
  points_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  showreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityRankReward::~ActivityRankReward() {
  // @@protoc_insertion_point(destructor:ActivityRankReward)
  SharedDtor();
}

void ActivityRankReward::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (pointreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pointreward_;
  }
  if (showreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete showreward_;
  }
  if (this != default_instance_) {
  }
}

void ActivityRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityRankReward_descriptor_;
}

const ActivityRankReward& ActivityRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRankMessage_2eproto();
  return *default_instance_;
}

ActivityRankReward* ActivityRankReward::default_instance_ = NULL;

ActivityRankReward* ActivityRankReward::New() const {
  return new ActivityRankReward;
}

void ActivityRankReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityRankReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(rank_, points_);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
    if (has_pointreward()) {
      if (pointreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pointreward_->clear();
      }
    }
    if (has_showreward()) {
      if (showreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        showreward_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityRankReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional string reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pointReward;
        break;
      }

      // optional string pointReward = 4;
      case 4: {
        if (tag == 34) {
         parse_pointReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pointreward().data(), this->pointreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pointreward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_showReward;
        break;
      }

      // optional string showReward = 5;
      case 5: {
        if (tag == 42) {
         parse_showReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->showreward().data(), this->showreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "showreward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityRankReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityRankReward)
  return false;
#undef DO_
}

void ActivityRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityRankReward)
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reward(), output);
  }

  // optional string pointReward = 4;
  if (has_pointreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pointreward().data(), this->pointreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pointreward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pointreward(), output);
  }

  // optional string showReward = 5;
  if (has_showreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showreward().data(), this->showreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showreward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->showreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityRankReward)
}

::google::protobuf::uint8* ActivityRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityRankReward)
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reward(), target);
  }

  // optional string pointReward = 4;
  if (has_pointreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pointreward().data(), this->pointreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pointreward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pointreward(), target);
  }

  // optional string showReward = 5;
  if (has_showreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->showreward().data(), this->showreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "showreward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->showreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityRankReward)
  return target;
}

int ActivityRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional string reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

    // optional string pointReward = 4;
    if (has_pointreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pointreward());
    }

    // optional string showReward = 5;
    if (has_showreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityRankReward::MergeFrom(const ActivityRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_pointreward()) {
      set_pointreward(from.pointreward());
    }
    if (from.has_showreward()) {
      set_showreward(from.showreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityRankReward::CopyFrom(const ActivityRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityRankReward::IsInitialized() const {

  return true;
}

void ActivityRankReward::Swap(ActivityRankReward* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(points_, other->points_);
    std::swap(reward_, other->reward_);
    std::swap(pointreward_, other->pointreward_);
    std::swap(showreward_, other->showreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityRankReward_descriptor_;
  metadata.reflection = ActivityRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGActivityRank::kOperateFieldNumber;
const int CGActivityRank::kTypeFieldNumber;
#endif  // !_MSC_VER

CGActivityRank::CGActivityRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGActivityRank)
}

void CGActivityRank::InitAsDefaultInstance() {
}

CGActivityRank::CGActivityRank(const CGActivityRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGActivityRank)
}

void CGActivityRank::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGActivityRank::~CGActivityRank() {
  // @@protoc_insertion_point(destructor:CGActivityRank)
  SharedDtor();
}

void CGActivityRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGActivityRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGActivityRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGActivityRank_descriptor_;
}

const CGActivityRank& CGActivityRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRankMessage_2eproto();
  return *default_instance_;
}

CGActivityRank* CGActivityRank::default_instance_ = NULL;

CGActivityRank* CGActivityRank::New() const {
  return new CGActivityRank;
}

void CGActivityRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGActivityRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGActivityRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGActivityRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGActivityRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGActivityRank)
  return false;
#undef DO_
}

void CGActivityRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGActivityRank)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGActivityRank)
}

::google::protobuf::uint8* CGActivityRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGActivityRank)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGActivityRank)
  return target;
}

int CGActivityRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGActivityRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGActivityRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGActivityRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGActivityRank::MergeFrom(const CGActivityRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGActivityRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGActivityRank::CopyFrom(const CGActivityRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGActivityRank::IsInitialized() const {

  return true;
}

void CGActivityRank::Swap(CGActivityRank* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGActivityRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGActivityRank_descriptor_;
  metadata.reflection = CGActivityRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCActivityRankResult::kOperateFieldNumber;
const int GCActivityRankResult::kChargeRanksFieldNumber;
const int GCActivityRankResult::kSpendRanksFieldNumber;
const int GCActivityRankResult::kPlayerChargeFieldNumber;
const int GCActivityRankResult::kPlayerSpendFieldNumber;
const int GCActivityRankResult::kChargeRewardsFieldNumber;
const int GCActivityRankResult::kSpendRewardsFieldNumber;
const int GCActivityRankResult::kTypeFieldNumber;
#endif  // !_MSC_VER

GCActivityRankResult::GCActivityRankResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCActivityRankResult)
}

void GCActivityRankResult::InitAsDefaultInstance() {
  playercharge_ = const_cast< ::ActivityRankInfo*>(&::ActivityRankInfo::default_instance());
  playerspend_ = const_cast< ::ActivityRankInfo*>(&::ActivityRankInfo::default_instance());
}

GCActivityRankResult::GCActivityRankResult(const GCActivityRankResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCActivityRankResult)
}

void GCActivityRankResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  playercharge_ = NULL;
  playerspend_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCActivityRankResult::~GCActivityRankResult() {
  // @@protoc_insertion_point(destructor:GCActivityRankResult)
  SharedDtor();
}

void GCActivityRankResult::SharedDtor() {
  if (this != default_instance_) {
    delete playercharge_;
    delete playerspend_;
  }
}

void GCActivityRankResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCActivityRankResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCActivityRankResult_descriptor_;
}

const GCActivityRankResult& GCActivityRankResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityRankMessage_2eproto();
  return *default_instance_;
}

GCActivityRankResult* GCActivityRankResult::default_instance_ = NULL;

GCActivityRankResult* GCActivityRankResult::New() const {
  return new GCActivityRankResult;
}

void GCActivityRankResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCActivityRankResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 153) {
    ZR_(operate_, type_);
    if (has_playercharge()) {
      if (playercharge_ != NULL) playercharge_->::ActivityRankInfo::Clear();
    }
    if (has_playerspend()) {
      if (playerspend_ != NULL) playerspend_->::ActivityRankInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  chargeranks_.Clear();
  spendranks_.Clear();
  chargerewards_.Clear();
  spendrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCActivityRankResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCActivityRankResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chargeRanks;
        break;
      }

      // repeated .ActivityRankInfo chargeRanks = 2;
      case 2: {
        if (tag == 18) {
         parse_chargeRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargeranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chargeRanks;
        if (input->ExpectTag(26)) goto parse_spendRanks;
        break;
      }

      // repeated .ActivityRankInfo spendRanks = 3;
      case 3: {
        if (tag == 26) {
         parse_spendRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spendranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spendRanks;
        if (input->ExpectTag(34)) goto parse_playerCharge;
        break;
      }

      // optional .ActivityRankInfo playerCharge = 4;
      case 4: {
        if (tag == 34) {
         parse_playerCharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playercharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_playerSpend;
        break;
      }

      // optional .ActivityRankInfo playerSpend = 5;
      case 5: {
        if (tag == 42) {
         parse_playerSpend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerspend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chargeRewards;
        break;
      }

      // repeated .ActivityRankReward chargeRewards = 6;
      case 6: {
        if (tag == 50) {
         parse_chargeRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargerewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_chargeRewards;
        if (input->ExpectTag(58)) goto parse_spendRewards;
        break;
      }

      // repeated .ActivityRankReward spendRewards = 7;
      case 7: {
        if (tag == 58) {
         parse_spendRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spendrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spendRewards;
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional int32 type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCActivityRankResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCActivityRankResult)
  return false;
#undef DO_
}

void GCActivityRankResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCActivityRankResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .ActivityRankInfo chargeRanks = 2;
  for (int i = 0; i < this->chargeranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chargeranks(i), output);
  }

  // repeated .ActivityRankInfo spendRanks = 3;
  for (int i = 0; i < this->spendranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spendranks(i), output);
  }

  // optional .ActivityRankInfo playerCharge = 4;
  if (has_playercharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playercharge(), output);
  }

  // optional .ActivityRankInfo playerSpend = 5;
  if (has_playerspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->playerspend(), output);
  }

  // repeated .ActivityRankReward chargeRewards = 6;
  for (int i = 0; i < this->chargerewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chargerewards(i), output);
  }

  // repeated .ActivityRankReward spendRewards = 7;
  for (int i = 0; i < this->spendrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->spendrewards(i), output);
  }

  // optional int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCActivityRankResult)
}

::google::protobuf::uint8* GCActivityRankResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCActivityRankResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .ActivityRankInfo chargeRanks = 2;
  for (int i = 0; i < this->chargeranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chargeranks(i), target);
  }

  // repeated .ActivityRankInfo spendRanks = 3;
  for (int i = 0; i < this->spendranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spendranks(i), target);
  }

  // optional .ActivityRankInfo playerCharge = 4;
  if (has_playercharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playercharge(), target);
  }

  // optional .ActivityRankInfo playerSpend = 5;
  if (has_playerspend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->playerspend(), target);
  }

  // repeated .ActivityRankReward chargeRewards = 6;
  for (int i = 0; i < this->chargerewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->chargerewards(i), target);
  }

  // repeated .ActivityRankReward spendRewards = 7;
  for (int i = 0; i < this->spendrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->spendrewards(i), target);
  }

  // optional int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCActivityRankResult)
  return target;
}

int GCActivityRankResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional .ActivityRankInfo playerCharge = 4;
    if (has_playercharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playercharge());
    }

    // optional .ActivityRankInfo playerSpend = 5;
    if (has_playerspend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerspend());
    }

    // optional int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .ActivityRankInfo chargeRanks = 2;
  total_size += 1 * this->chargeranks_size();
  for (int i = 0; i < this->chargeranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargeranks(i));
  }

  // repeated .ActivityRankInfo spendRanks = 3;
  total_size += 1 * this->spendranks_size();
  for (int i = 0; i < this->spendranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spendranks(i));
  }

  // repeated .ActivityRankReward chargeRewards = 6;
  total_size += 1 * this->chargerewards_size();
  for (int i = 0; i < this->chargerewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargerewards(i));
  }

  // repeated .ActivityRankReward spendRewards = 7;
  total_size += 1 * this->spendrewards_size();
  for (int i = 0; i < this->spendrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spendrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCActivityRankResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCActivityRankResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCActivityRankResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCActivityRankResult::MergeFrom(const GCActivityRankResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  chargeranks_.MergeFrom(from.chargeranks_);
  spendranks_.MergeFrom(from.spendranks_);
  chargerewards_.MergeFrom(from.chargerewards_);
  spendrewards_.MergeFrom(from.spendrewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_playercharge()) {
      mutable_playercharge()->::ActivityRankInfo::MergeFrom(from.playercharge());
    }
    if (from.has_playerspend()) {
      mutable_playerspend()->::ActivityRankInfo::MergeFrom(from.playerspend());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCActivityRankResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCActivityRankResult::CopyFrom(const GCActivityRankResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCActivityRankResult::IsInitialized() const {

  return true;
}

void GCActivityRankResult::Swap(GCActivityRankResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    chargeranks_.Swap(&other->chargeranks_);
    spendranks_.Swap(&other->spendranks_);
    std::swap(playercharge_, other->playercharge_);
    std::swap(playerspend_, other->playerspend_);
    chargerewards_.Swap(&other->chargerewards_);
    spendrewards_.Swap(&other->spendrewards_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCActivityRankResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCActivityRankResult_descriptor_;
  metadata.reflection = GCActivityRankResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
