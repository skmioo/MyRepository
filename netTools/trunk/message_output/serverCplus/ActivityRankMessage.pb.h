// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityRankMessage.proto

#ifndef PROTOBUF_ActivityRankMessage_2eproto__INCLUDED
#define PROTOBUF_ActivityRankMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActivityRankMessage_2eproto();
void protobuf_AssignDesc_ActivityRankMessage_2eproto();
void protobuf_ShutdownFile_ActivityRankMessage_2eproto();

class ActivityRankInfo;
class ActivityRankReward;
class CGActivityRank;
class GCActivityRankResult;

// ===================================================================

class ActivityRankInfo : public ::google::protobuf::Message {
 public:
  ActivityRankInfo();
  virtual ~ActivityRankInfo();

  ActivityRankInfo(const ActivityRankInfo& from);

  inline ActivityRankInfo& operator=(const ActivityRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityRankInfo& default_instance();

  void Swap(ActivityRankInfo* other);

  // implements Message ----------------------------------------------

  ActivityRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityRankInfo& from);
  void MergeFrom(const ActivityRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 points = 4;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 4;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivityRankInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 points_;
  friend void  protobuf_AddDesc_ActivityRankMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityRankMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityRankMessage_2eproto();

  void InitAsDefaultInstance();
  static ActivityRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class ActivityRankReward : public ::google::protobuf::Message {
 public:
  ActivityRankReward();
  virtual ~ActivityRankReward();

  ActivityRankReward(const ActivityRankReward& from);

  inline ActivityRankReward& operator=(const ActivityRankReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityRankReward& default_instance();

  void Swap(ActivityRankReward* other);

  // implements Message ----------------------------------------------

  ActivityRankReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityRankReward& from);
  void MergeFrom(const ActivityRankReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional string reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // optional string pointReward = 4;
  inline bool has_pointreward() const;
  inline void clear_pointreward();
  static const int kPointRewardFieldNumber = 4;
  inline const ::std::string& pointreward() const;
  inline void set_pointreward(const ::std::string& value);
  inline void set_pointreward(const char* value);
  inline void set_pointreward(const char* value, size_t size);
  inline ::std::string* mutable_pointreward();
  inline ::std::string* release_pointreward();
  inline void set_allocated_pointreward(::std::string* pointreward);

  // optional string showReward = 5;
  inline bool has_showreward() const;
  inline void clear_showreward();
  static const int kShowRewardFieldNumber = 5;
  inline const ::std::string& showreward() const;
  inline void set_showreward(const ::std::string& value);
  inline void set_showreward(const char* value);
  inline void set_showreward(const char* value, size_t size);
  inline ::std::string* mutable_showreward();
  inline ::std::string* release_showreward();
  inline void set_allocated_showreward(::std::string* showreward);

  // @@protoc_insertion_point(class_scope:ActivityRankReward)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_pointreward();
  inline void clear_has_pointreward();
  inline void set_has_showreward();
  inline void clear_has_showreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 points_;
  ::std::string* reward_;
  ::std::string* pointreward_;
  ::std::string* showreward_;
  friend void  protobuf_AddDesc_ActivityRankMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityRankMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityRankMessage_2eproto();

  void InitAsDefaultInstance();
  static ActivityRankReward* default_instance_;
};
// -------------------------------------------------------------------

class CGActivityRank : public ::google::protobuf::Message {
 public:
  CGActivityRank();
  virtual ~CGActivityRank();

  CGActivityRank(const CGActivityRank& from);

  inline CGActivityRank& operator=(const CGActivityRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGActivityRank& default_instance();

  void Swap(CGActivityRank* other);

  // implements Message ----------------------------------------------

  CGActivityRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGActivityRank& from);
  void MergeFrom(const CGActivityRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGActivityRank)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ActivityRankMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityRankMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityRankMessage_2eproto();

  void InitAsDefaultInstance();
  static CGActivityRank* default_instance_;
};
// -------------------------------------------------------------------

class GCActivityRankResult : public ::google::protobuf::Message {
 public:
  GCActivityRankResult();
  virtual ~GCActivityRankResult();

  GCActivityRankResult(const GCActivityRankResult& from);

  inline GCActivityRankResult& operator=(const GCActivityRankResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCActivityRankResult& default_instance();

  void Swap(GCActivityRankResult* other);

  // implements Message ----------------------------------------------

  GCActivityRankResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCActivityRankResult& from);
  void MergeFrom(const GCActivityRankResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .ActivityRankInfo chargeRanks = 2;
  inline int chargeranks_size() const;
  inline void clear_chargeranks();
  static const int kChargeRanksFieldNumber = 2;
  inline const ::ActivityRankInfo& chargeranks(int index) const;
  inline ::ActivityRankInfo* mutable_chargeranks(int index);
  inline ::ActivityRankInfo* add_chargeranks();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      chargeranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_chargeranks();

  // repeated .ActivityRankInfo spendRanks = 3;
  inline int spendranks_size() const;
  inline void clear_spendranks();
  static const int kSpendRanksFieldNumber = 3;
  inline const ::ActivityRankInfo& spendranks(int index) const;
  inline ::ActivityRankInfo* mutable_spendranks(int index);
  inline ::ActivityRankInfo* add_spendranks();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
      spendranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
      mutable_spendranks();

  // optional .ActivityRankInfo playerCharge = 4;
  inline bool has_playercharge() const;
  inline void clear_playercharge();
  static const int kPlayerChargeFieldNumber = 4;
  inline const ::ActivityRankInfo& playercharge() const;
  inline ::ActivityRankInfo* mutable_playercharge();
  inline ::ActivityRankInfo* release_playercharge();
  inline void set_allocated_playercharge(::ActivityRankInfo* playercharge);

  // optional .ActivityRankInfo playerSpend = 5;
  inline bool has_playerspend() const;
  inline void clear_playerspend();
  static const int kPlayerSpendFieldNumber = 5;
  inline const ::ActivityRankInfo& playerspend() const;
  inline ::ActivityRankInfo* mutable_playerspend();
  inline ::ActivityRankInfo* release_playerspend();
  inline void set_allocated_playerspend(::ActivityRankInfo* playerspend);

  // repeated .ActivityRankReward chargeRewards = 6;
  inline int chargerewards_size() const;
  inline void clear_chargerewards();
  static const int kChargeRewardsFieldNumber = 6;
  inline const ::ActivityRankReward& chargerewards(int index) const;
  inline ::ActivityRankReward* mutable_chargerewards(int index);
  inline ::ActivityRankReward* add_chargerewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      chargerewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_chargerewards();

  // repeated .ActivityRankReward spendRewards = 7;
  inline int spendrewards_size() const;
  inline void clear_spendrewards();
  static const int kSpendRewardsFieldNumber = 7;
  inline const ::ActivityRankReward& spendrewards(int index) const;
  inline ::ActivityRankReward* mutable_spendrewards(int index);
  inline ::ActivityRankReward* add_spendrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
      spendrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
      mutable_spendrewards();

  // optional int32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCActivityRankResult)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_playercharge();
  inline void clear_has_playercharge();
  inline void set_has_playerspend();
  inline void clear_has_playerspend();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > chargeranks_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo > spendranks_;
  ::ActivityRankInfo* playercharge_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 type_;
  ::ActivityRankInfo* playerspend_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > chargerewards_;
  ::google::protobuf::RepeatedPtrField< ::ActivityRankReward > spendrewards_;
  friend void  protobuf_AddDesc_ActivityRankMessage_2eproto();
  friend void protobuf_AssignDesc_ActivityRankMessage_2eproto();
  friend void protobuf_ShutdownFile_ActivityRankMessage_2eproto();

  void InitAsDefaultInstance();
  static GCActivityRankResult* default_instance_;
};
// ===================================================================


// ===================================================================

// ActivityRankInfo

// optional int64 playerID = 1;
inline bool ActivityRankInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityRankInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityRankInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityRankInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ActivityRankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:ActivityRankInfo.playerID)
  return playerid_;
}
inline void ActivityRankInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ActivityRankInfo.playerID)
}

// optional string playerName = 2;
inline bool ActivityRankInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityRankInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityRankInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityRankInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& ActivityRankInfo::playername() const {
  // @@protoc_insertion_point(field_get:ActivityRankInfo.playerName)
  return *playername_;
}
inline void ActivityRankInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityRankInfo.playerName)
}
inline void ActivityRankInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityRankInfo.playerName)
}
inline void ActivityRankInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityRankInfo.playerName)
}
inline ::std::string* ActivityRankInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityRankInfo.playerName)
  return playername_;
}
inline ::std::string* ActivityRankInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityRankInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityRankInfo.playerName)
}

// optional int32 rank = 3;
inline bool ActivityRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ActivityRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:ActivityRankInfo.rank)
  return rank_;
}
inline void ActivityRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ActivityRankInfo.rank)
}

// optional int32 points = 4;
inline bool ActivityRankInfo::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityRankInfo::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityRankInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityRankInfo::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 ActivityRankInfo::points() const {
  // @@protoc_insertion_point(field_get:ActivityRankInfo.points)
  return points_;
}
inline void ActivityRankInfo::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:ActivityRankInfo.points)
}

// -------------------------------------------------------------------

// ActivityRankReward

// optional int32 rank = 1;
inline bool ActivityRankReward::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityRankReward::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityRankReward::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityRankReward::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ActivityRankReward::rank() const {
  // @@protoc_insertion_point(field_get:ActivityRankReward.rank)
  return rank_;
}
inline void ActivityRankReward::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ActivityRankReward.rank)
}

// optional int32 points = 2;
inline bool ActivityRankReward::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityRankReward::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityRankReward::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityRankReward::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 ActivityRankReward::points() const {
  // @@protoc_insertion_point(field_get:ActivityRankReward.points)
  return points_;
}
inline void ActivityRankReward::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:ActivityRankReward.points)
}

// optional string reward = 3;
inline bool ActivityRankReward::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityRankReward::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityRankReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityRankReward::clear_reward() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& ActivityRankReward::reward() const {
  // @@protoc_insertion_point(field_get:ActivityRankReward.reward)
  return *reward_;
}
inline void ActivityRankReward::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityRankReward.reward)
}
inline void ActivityRankReward::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityRankReward.reward)
}
inline void ActivityRankReward::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityRankReward.reward)
}
inline ::std::string* ActivityRankReward::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityRankReward.reward)
  return reward_;
}
inline ::std::string* ActivityRankReward::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityRankReward::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityRankReward.reward)
}

// optional string pointReward = 4;
inline bool ActivityRankReward::has_pointreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityRankReward::set_has_pointreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityRankReward::clear_has_pointreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityRankReward::clear_pointreward() {
  if (pointreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pointreward_->clear();
  }
  clear_has_pointreward();
}
inline const ::std::string& ActivityRankReward::pointreward() const {
  // @@protoc_insertion_point(field_get:ActivityRankReward.pointReward)
  return *pointreward_;
}
inline void ActivityRankReward::set_pointreward(const ::std::string& value) {
  set_has_pointreward();
  if (pointreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pointreward_ = new ::std::string;
  }
  pointreward_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityRankReward.pointReward)
}
inline void ActivityRankReward::set_pointreward(const char* value) {
  set_has_pointreward();
  if (pointreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pointreward_ = new ::std::string;
  }
  pointreward_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityRankReward.pointReward)
}
inline void ActivityRankReward::set_pointreward(const char* value, size_t size) {
  set_has_pointreward();
  if (pointreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pointreward_ = new ::std::string;
  }
  pointreward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityRankReward.pointReward)
}
inline ::std::string* ActivityRankReward::mutable_pointreward() {
  set_has_pointreward();
  if (pointreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pointreward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityRankReward.pointReward)
  return pointreward_;
}
inline ::std::string* ActivityRankReward::release_pointreward() {
  clear_has_pointreward();
  if (pointreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pointreward_;
    pointreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityRankReward::set_allocated_pointreward(::std::string* pointreward) {
  if (pointreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pointreward_;
  }
  if (pointreward) {
    set_has_pointreward();
    pointreward_ = pointreward;
  } else {
    clear_has_pointreward();
    pointreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityRankReward.pointReward)
}

// optional string showReward = 5;
inline bool ActivityRankReward::has_showreward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityRankReward::set_has_showreward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityRankReward::clear_has_showreward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityRankReward::clear_showreward() {
  if (showreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    showreward_->clear();
  }
  clear_has_showreward();
}
inline const ::std::string& ActivityRankReward::showreward() const {
  // @@protoc_insertion_point(field_get:ActivityRankReward.showReward)
  return *showreward_;
}
inline void ActivityRankReward::set_showreward(const ::std::string& value) {
  set_has_showreward();
  if (showreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    showreward_ = new ::std::string;
  }
  showreward_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityRankReward.showReward)
}
inline void ActivityRankReward::set_showreward(const char* value) {
  set_has_showreward();
  if (showreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    showreward_ = new ::std::string;
  }
  showreward_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityRankReward.showReward)
}
inline void ActivityRankReward::set_showreward(const char* value, size_t size) {
  set_has_showreward();
  if (showreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    showreward_ = new ::std::string;
  }
  showreward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityRankReward.showReward)
}
inline ::std::string* ActivityRankReward::mutable_showreward() {
  set_has_showreward();
  if (showreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    showreward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityRankReward.showReward)
  return showreward_;
}
inline ::std::string* ActivityRankReward::release_showreward() {
  clear_has_showreward();
  if (showreward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = showreward_;
    showreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ActivityRankReward::set_allocated_showreward(::std::string* showreward) {
  if (showreward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete showreward_;
  }
  if (showreward) {
    set_has_showreward();
    showreward_ = showreward;
  } else {
    clear_has_showreward();
    showreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityRankReward.showReward)
}

// -------------------------------------------------------------------

// CGActivityRank

// optional int32 operate = 1;
inline bool CGActivityRank::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGActivityRank::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGActivityRank::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGActivityRank::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGActivityRank::operate() const {
  // @@protoc_insertion_point(field_get:CGActivityRank.operate)
  return operate_;
}
inline void CGActivityRank::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGActivityRank.operate)
}

// optional int32 type = 2;
inline bool CGActivityRank::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGActivityRank::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGActivityRank::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGActivityRank::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGActivityRank::type() const {
  // @@protoc_insertion_point(field_get:CGActivityRank.type)
  return type_;
}
inline void CGActivityRank::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGActivityRank.type)
}

// -------------------------------------------------------------------

// GCActivityRankResult

// optional int32 operate = 1;
inline bool GCActivityRankResult::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCActivityRankResult::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCActivityRankResult::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCActivityRankResult::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCActivityRankResult::operate() const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.operate)
  return operate_;
}
inline void GCActivityRankResult::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCActivityRankResult.operate)
}

// repeated .ActivityRankInfo chargeRanks = 2;
inline int GCActivityRankResult::chargeranks_size() const {
  return chargeranks_.size();
}
inline void GCActivityRankResult::clear_chargeranks() {
  chargeranks_.Clear();
}
inline const ::ActivityRankInfo& GCActivityRankResult::chargeranks(int index) const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.chargeRanks)
  return chargeranks_.Get(index);
}
inline ::ActivityRankInfo* GCActivityRankResult::mutable_chargeranks(int index) {
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.chargeRanks)
  return chargeranks_.Mutable(index);
}
inline ::ActivityRankInfo* GCActivityRankResult::add_chargeranks() {
  // @@protoc_insertion_point(field_add:GCActivityRankResult.chargeRanks)
  return chargeranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCActivityRankResult::chargeranks() const {
  // @@protoc_insertion_point(field_list:GCActivityRankResult.chargeRanks)
  return chargeranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCActivityRankResult::mutable_chargeranks() {
  // @@protoc_insertion_point(field_mutable_list:GCActivityRankResult.chargeRanks)
  return &chargeranks_;
}

// repeated .ActivityRankInfo spendRanks = 3;
inline int GCActivityRankResult::spendranks_size() const {
  return spendranks_.size();
}
inline void GCActivityRankResult::clear_spendranks() {
  spendranks_.Clear();
}
inline const ::ActivityRankInfo& GCActivityRankResult::spendranks(int index) const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.spendRanks)
  return spendranks_.Get(index);
}
inline ::ActivityRankInfo* GCActivityRankResult::mutable_spendranks(int index) {
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.spendRanks)
  return spendranks_.Mutable(index);
}
inline ::ActivityRankInfo* GCActivityRankResult::add_spendranks() {
  // @@protoc_insertion_point(field_add:GCActivityRankResult.spendRanks)
  return spendranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >&
GCActivityRankResult::spendranks() const {
  // @@protoc_insertion_point(field_list:GCActivityRankResult.spendRanks)
  return spendranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankInfo >*
GCActivityRankResult::mutable_spendranks() {
  // @@protoc_insertion_point(field_mutable_list:GCActivityRankResult.spendRanks)
  return &spendranks_;
}

// optional .ActivityRankInfo playerCharge = 4;
inline bool GCActivityRankResult::has_playercharge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCActivityRankResult::set_has_playercharge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCActivityRankResult::clear_has_playercharge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCActivityRankResult::clear_playercharge() {
  if (playercharge_ != NULL) playercharge_->::ActivityRankInfo::Clear();
  clear_has_playercharge();
}
inline const ::ActivityRankInfo& GCActivityRankResult::playercharge() const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.playerCharge)
  return playercharge_ != NULL ? *playercharge_ : *default_instance_->playercharge_;
}
inline ::ActivityRankInfo* GCActivityRankResult::mutable_playercharge() {
  set_has_playercharge();
  if (playercharge_ == NULL) playercharge_ = new ::ActivityRankInfo;
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.playerCharge)
  return playercharge_;
}
inline ::ActivityRankInfo* GCActivityRankResult::release_playercharge() {
  clear_has_playercharge();
  ::ActivityRankInfo* temp = playercharge_;
  playercharge_ = NULL;
  return temp;
}
inline void GCActivityRankResult::set_allocated_playercharge(::ActivityRankInfo* playercharge) {
  delete playercharge_;
  playercharge_ = playercharge;
  if (playercharge) {
    set_has_playercharge();
  } else {
    clear_has_playercharge();
  }
  // @@protoc_insertion_point(field_set_allocated:GCActivityRankResult.playerCharge)
}

// optional .ActivityRankInfo playerSpend = 5;
inline bool GCActivityRankResult::has_playerspend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCActivityRankResult::set_has_playerspend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCActivityRankResult::clear_has_playerspend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCActivityRankResult::clear_playerspend() {
  if (playerspend_ != NULL) playerspend_->::ActivityRankInfo::Clear();
  clear_has_playerspend();
}
inline const ::ActivityRankInfo& GCActivityRankResult::playerspend() const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.playerSpend)
  return playerspend_ != NULL ? *playerspend_ : *default_instance_->playerspend_;
}
inline ::ActivityRankInfo* GCActivityRankResult::mutable_playerspend() {
  set_has_playerspend();
  if (playerspend_ == NULL) playerspend_ = new ::ActivityRankInfo;
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.playerSpend)
  return playerspend_;
}
inline ::ActivityRankInfo* GCActivityRankResult::release_playerspend() {
  clear_has_playerspend();
  ::ActivityRankInfo* temp = playerspend_;
  playerspend_ = NULL;
  return temp;
}
inline void GCActivityRankResult::set_allocated_playerspend(::ActivityRankInfo* playerspend) {
  delete playerspend_;
  playerspend_ = playerspend;
  if (playerspend) {
    set_has_playerspend();
  } else {
    clear_has_playerspend();
  }
  // @@protoc_insertion_point(field_set_allocated:GCActivityRankResult.playerSpend)
}

// repeated .ActivityRankReward chargeRewards = 6;
inline int GCActivityRankResult::chargerewards_size() const {
  return chargerewards_.size();
}
inline void GCActivityRankResult::clear_chargerewards() {
  chargerewards_.Clear();
}
inline const ::ActivityRankReward& GCActivityRankResult::chargerewards(int index) const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.chargeRewards)
  return chargerewards_.Get(index);
}
inline ::ActivityRankReward* GCActivityRankResult::mutable_chargerewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.chargeRewards)
  return chargerewards_.Mutable(index);
}
inline ::ActivityRankReward* GCActivityRankResult::add_chargerewards() {
  // @@protoc_insertion_point(field_add:GCActivityRankResult.chargeRewards)
  return chargerewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCActivityRankResult::chargerewards() const {
  // @@protoc_insertion_point(field_list:GCActivityRankResult.chargeRewards)
  return chargerewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCActivityRankResult::mutable_chargerewards() {
  // @@protoc_insertion_point(field_mutable_list:GCActivityRankResult.chargeRewards)
  return &chargerewards_;
}

// repeated .ActivityRankReward spendRewards = 7;
inline int GCActivityRankResult::spendrewards_size() const {
  return spendrewards_.size();
}
inline void GCActivityRankResult::clear_spendrewards() {
  spendrewards_.Clear();
}
inline const ::ActivityRankReward& GCActivityRankResult::spendrewards(int index) const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.spendRewards)
  return spendrewards_.Get(index);
}
inline ::ActivityRankReward* GCActivityRankResult::mutable_spendrewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCActivityRankResult.spendRewards)
  return spendrewards_.Mutable(index);
}
inline ::ActivityRankReward* GCActivityRankResult::add_spendrewards() {
  // @@protoc_insertion_point(field_add:GCActivityRankResult.spendRewards)
  return spendrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >&
GCActivityRankResult::spendrewards() const {
  // @@protoc_insertion_point(field_list:GCActivityRankResult.spendRewards)
  return spendrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityRankReward >*
GCActivityRankResult::mutable_spendrewards() {
  // @@protoc_insertion_point(field_mutable_list:GCActivityRankResult.spendRewards)
  return &spendrewards_;
}

// optional int32 type = 8;
inline bool GCActivityRankResult::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCActivityRankResult::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCActivityRankResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCActivityRankResult::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCActivityRankResult::type() const {
  // @@protoc_insertion_point(field_get:GCActivityRankResult.type)
  return type_;
}
inline void GCActivityRankResult::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCActivityRankResult.type)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActivityRankMessage_2eproto__INCLUDED
