// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllCombatMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllCombatMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AllCombatRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllCombatRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllCombatRegistBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllCombatRegistBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACombatTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACombatTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACombatTransBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACombatTransBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodInvoteMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodInvoteMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAllCombatView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAllCombatView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAllCombatView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAllCombatView_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEnterAllCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterAllCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterAllCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterAllCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAllCombatReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAllCombatReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExitAllCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExitAllCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCExitAllCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCExitAllCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterCombatEndTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterCombatEndTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllRankRwd2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllRankRwd2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetherBloodItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetherBloodItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeSorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeSorce_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAllCombatRanks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAllCombatRanks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAllCombatRanks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAllCombatRanks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAllCombatEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAllCombatEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAllRankDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAllRankDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAllRankDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAllRankDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllcombatRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllcombatRankData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllCombatMessage_2eproto() {
  protobuf_AddDesc_AllCombatMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllCombatMessage.proto");
  GOOGLE_CHECK(file != NULL);
  AllCombatRegist_descriptor_ = file->message_type(0);
  static const int AllCombatRegist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCombatRegist, serverid_),
  };
  AllCombatRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllCombatRegist_descriptor_,
      AllCombatRegist::default_instance_,
      AllCombatRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCombatRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCombatRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllCombatRegist));
  AllCombatRegistBack_descriptor_ = file->message_type(1);
  static const int AllCombatRegistBack_offsets_[1] = {
  };
  AllCombatRegistBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllCombatRegistBack_descriptor_,
      AllCombatRegistBack::default_instance_,
      AllCombatRegistBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCombatRegistBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllCombatRegistBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllCombatRegistBack));
  ACombatTrans_descriptor_ = file->message_type(2);
  static const int ACombatTrans_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTrans, transtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTrans, innerpackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTrans, startt_),
  };
  ACombatTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACombatTrans_descriptor_,
      ACombatTrans::default_instance_,
      ACombatTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACombatTrans));
  MessageList_descriptor_ = file->message_type(3);
  static const int MessageList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageList, innerpackets_),
  };
  MessageList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageList_descriptor_,
      MessageList::default_instance_,
      MessageList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageList));
  ACombatTransBack_descriptor_ = file->message_type(4);
  static const int ACombatTransBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTransBack, transtype_),
  };
  ACombatTransBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACombatTransBack_descriptor_,
      ACombatTransBack::default_instance_,
      ACombatTransBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTransBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACombatTransBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACombatTransBack));
  MethodInvoteMsg_descriptor_ = file->message_type(5);
  static const int MethodInvoteMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInvoteMsg, innerpacket_),
  };
  MethodInvoteMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MethodInvoteMsg_descriptor_,
      MethodInvoteMsg::default_instance_,
      MethodInvoteMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInvoteMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodInvoteMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MethodInvoteMsg));
  CGGetAllCombatView_descriptor_ = file->message_type(6);
  static const int CGGetAllCombatView_offsets_[1] = {
  };
  CGGetAllCombatView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAllCombatView_descriptor_,
      CGGetAllCombatView::default_instance_,
      CGGetAllCombatView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllCombatView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllCombatView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAllCombatView));
  GCGetAllCombatView_descriptor_ = file->message_type(7);
  static const int GCGetAllCombatView_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, actstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, combatstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, rewardshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, canenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, sceneid_),
  };
  GCGetAllCombatView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAllCombatView_descriptor_,
      GCGetAllCombatView::default_instance_,
      GCGetAllCombatView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAllCombatView));
  CGEnterAllCombat_descriptor_ = file->message_type(8);
  static const int CGEnterAllCombat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterAllCombat, type_),
  };
  CGEnterAllCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterAllCombat_descriptor_,
      CGEnterAllCombat::default_instance_,
      CGEnterAllCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterAllCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterAllCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterAllCombat));
  GCEnterAllCombat_descriptor_ = file->message_type(9);
  static const int GCEnterAllCombat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, reports_),
  };
  GCEnterAllCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterAllCombat_descriptor_,
      GCEnterAllCombat::default_instance_,
      GCEnterAllCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterAllCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterAllCombat));
  GCAllCombatReport_descriptor_ = file->message_type(10);
  static const int GCAllCombatReport_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, killpersonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, killednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, sorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, maxkillnum_),
  };
  GCAllCombatReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAllCombatReport_descriptor_,
      GCAllCombatReport::default_instance_,
      GCAllCombatReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAllCombatReport));
  CGExitAllCombat_descriptor_ = file->message_type(11);
  static const int CGExitAllCombat_offsets_[1] = {
  };
  CGExitAllCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExitAllCombat_descriptor_,
      CGExitAllCombat::default_instance_,
      CGExitAllCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitAllCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitAllCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExitAllCombat));
  GCExitAllCombat_descriptor_ = file->message_type(12);
  static const int GCExitAllCombat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExitAllCombat, type_),
  };
  GCExitAllCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCExitAllCombat_descriptor_,
      GCExitAllCombat::default_instance_,
      GCExitAllCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExitAllCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExitAllCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCExitAllCombat));
  GCEnterCombatEndTime_descriptor_ = file->message_type(13);
  static const int GCEnterCombatEndTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterCombatEndTime, remains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterCombatEndTime, rwds_),
  };
  GCEnterCombatEndTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterCombatEndTime_descriptor_,
      GCEnterCombatEndTime::default_instance_,
      GCEnterCombatEndTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterCombatEndTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterCombatEndTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterCombatEndTime));
  AllRankRwd2_descriptor_ = file->message_type(14);
  static const int AllRankRwd2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRankRwd2, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRankRwd2, itemrwd_),
  };
  AllRankRwd2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllRankRwd2_descriptor_,
      AllRankRwd2::default_instance_,
      AllRankRwd2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRankRwd2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllRankRwd2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllRankRwd2));
  CGGetherBloodItem_descriptor_ = file->message_type(15);
  static const int CGGetherBloodItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherBloodItem, objid_),
  };
  CGGetherBloodItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetherBloodItem_descriptor_,
      CGGetherBloodItem::default_instance_,
      CGGetherBloodItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherBloodItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherBloodItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetherBloodItem));
  GCChangeSorce_descriptor_ = file->message_type(16);
  static const int GCChangeSorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSorce, sorce_),
  };
  GCChangeSorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeSorce_descriptor_,
      GCChangeSorce::default_instance_,
      GCChangeSorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeSorce));
  CGGetAllCombatRanks_descriptor_ = file->message_type(17);
  static const int CGGetAllCombatRanks_offsets_[1] = {
  };
  CGGetAllCombatRanks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAllCombatRanks_descriptor_,
      CGGetAllCombatRanks::default_instance_,
      CGGetAllCombatRanks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllCombatRanks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllCombatRanks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAllCombatRanks));
  GCGetAllCombatRanks_descriptor_ = file->message_type(18);
  static const int GCGetAllCombatRanks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatRanks, reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatRanks, my_),
  };
  GCGetAllCombatRanks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAllCombatRanks_descriptor_,
      GCGetAllCombatRanks::default_instance_,
      GCGetAllCombatRanks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatRanks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllCombatRanks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAllCombatRanks));
  GCAllCombatEnd_descriptor_ = file->message_type(19);
  static const int GCAllCombatEnd_offsets_[1] = {
  };
  GCAllCombatEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAllCombatEnd_descriptor_,
      GCAllCombatEnd::default_instance_,
      GCAllCombatEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllCombatEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAllCombatEnd));
  CGGetAllRankDatas_descriptor_ = file->message_type(20);
  static const int CGGetAllRankDatas_offsets_[1] = {
  };
  CGGetAllRankDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAllRankDatas_descriptor_,
      CGGetAllRankDatas::default_instance_,
      CGGetAllRankDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllRankDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAllRankDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAllRankDatas));
  GCGetAllRankDatas_descriptor_ = file->message_type(21);
  static const int GCGetAllRankDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllRankDatas, ranks_),
  };
  GCGetAllRankDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAllRankDatas_descriptor_,
      GCGetAllRankDatas::default_instance_,
      GCGetAllRankDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllRankDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAllRankDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAllRankDatas));
  AllcombatRankData_descriptor_ = file->message_type(22);
  static const int AllcombatRankData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, playerlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, battlenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, sorce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, rank_),
  };
  AllcombatRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllcombatRankData_descriptor_,
      AllcombatRankData::default_instance_,
      AllcombatRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllcombatRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllcombatRankData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllCombatMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllCombatRegist_descriptor_, &AllCombatRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllCombatRegistBack_descriptor_, &AllCombatRegistBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACombatTrans_descriptor_, &ACombatTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageList_descriptor_, &MessageList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACombatTransBack_descriptor_, &ACombatTransBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MethodInvoteMsg_descriptor_, &MethodInvoteMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAllCombatView_descriptor_, &CGGetAllCombatView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAllCombatView_descriptor_, &GCGetAllCombatView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterAllCombat_descriptor_, &CGEnterAllCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterAllCombat_descriptor_, &GCEnterAllCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAllCombatReport_descriptor_, &GCAllCombatReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExitAllCombat_descriptor_, &CGExitAllCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCExitAllCombat_descriptor_, &GCExitAllCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterCombatEndTime_descriptor_, &GCEnterCombatEndTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllRankRwd2_descriptor_, &AllRankRwd2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetherBloodItem_descriptor_, &CGGetherBloodItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeSorce_descriptor_, &GCChangeSorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAllCombatRanks_descriptor_, &CGGetAllCombatRanks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAllCombatRanks_descriptor_, &GCGetAllCombatRanks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAllCombatEnd_descriptor_, &GCAllCombatEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAllRankDatas_descriptor_, &CGGetAllRankDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAllRankDatas_descriptor_, &GCGetAllRankDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllcombatRankData_descriptor_, &AllcombatRankData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllCombatMessage_2eproto() {
  delete AllCombatRegist::default_instance_;
  delete AllCombatRegist_reflection_;
  delete AllCombatRegistBack::default_instance_;
  delete AllCombatRegistBack_reflection_;
  delete ACombatTrans::default_instance_;
  delete ACombatTrans_reflection_;
  delete MessageList::default_instance_;
  delete MessageList_reflection_;
  delete ACombatTransBack::default_instance_;
  delete ACombatTransBack_reflection_;
  delete MethodInvoteMsg::default_instance_;
  delete MethodInvoteMsg_reflection_;
  delete CGGetAllCombatView::default_instance_;
  delete CGGetAllCombatView_reflection_;
  delete GCGetAllCombatView::default_instance_;
  delete GCGetAllCombatView_reflection_;
  delete CGEnterAllCombat::default_instance_;
  delete CGEnterAllCombat_reflection_;
  delete GCEnterAllCombat::default_instance_;
  delete GCEnterAllCombat_reflection_;
  delete GCAllCombatReport::default_instance_;
  delete GCAllCombatReport_reflection_;
  delete CGExitAllCombat::default_instance_;
  delete CGExitAllCombat_reflection_;
  delete GCExitAllCombat::default_instance_;
  delete GCExitAllCombat_reflection_;
  delete GCEnterCombatEndTime::default_instance_;
  delete GCEnterCombatEndTime_reflection_;
  delete AllRankRwd2::default_instance_;
  delete AllRankRwd2_reflection_;
  delete CGGetherBloodItem::default_instance_;
  delete CGGetherBloodItem_reflection_;
  delete GCChangeSorce::default_instance_;
  delete GCChangeSorce_reflection_;
  delete CGGetAllCombatRanks::default_instance_;
  delete CGGetAllCombatRanks_reflection_;
  delete GCGetAllCombatRanks::default_instance_;
  delete GCGetAllCombatRanks_reflection_;
  delete GCAllCombatEnd::default_instance_;
  delete GCAllCombatEnd_reflection_;
  delete CGGetAllRankDatas::default_instance_;
  delete CGGetAllRankDatas_reflection_;
  delete GCGetAllRankDatas::default_instance_;
  delete GCGetAllRankDatas_reflection_;
  delete AllcombatRankData::default_instance_;
  delete AllcombatRankData_reflection_;
}

void protobuf_AddDesc_AllCombatMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026AllCombatMessage.proto\"#\n\017AllCombatReg"
    "ist\022\020\n\010serverId\030\001 \001(\005\"\025\n\023AllCombatRegist"
    "Back\"U\n\014ACombatTrans\022\021\n\ttransType\030\001 \001(\005\022"
    "\"\n\014innerPackets\030\002 \003(\0132\014.MessageList\022\016\n\006s"
    "tartT\030\003 \001(\003\"#\n\013MessageList\022\024\n\014innerPacke"
    "ts\030\001 \001(\014\"%\n\020ACombatTransBack\022\021\n\ttransTyp"
    "e\030\001 \001(\005\"&\n\017MethodInvoteMsg\022\023\n\013innerPacke"
    "t\030\001 \001(\014\"\024\n\022CGGetAllCombatView\"\271\001\n\022GCGetA"
    "llCombatView\022\024\n\014actStartTime\030\001 \001(\t\022\027\n\017co"
    "mbatStartTime\030\002 \001(\t\022\r\n\005title\030\004 \001(\005\022\020\n\010fu"
    "nction\030\005 \001(\t\022\014\n\004item\030\006 \001(\t\022\022\n\nrewardShow"
    "\030\007 \001(\t\022\016\n\006notice\030\010 \001(\t\022\020\n\010canEnter\030\t \001(\005"
    "\022\017\n\007sceneId\030\n \001(\005\" \n\020CGEnterAllCombat\022\014\n"
    "\004type\030\001 \001(\005\"b\n\020GCEnterAllCombat\022\017\n\007actTy"
    "pe\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022#\n\007re"
    "ports\030\004 \003(\0132\022.GCAllCombatReport\"\233\001\n\021GCAl"
    "lCombatReport\022\013\n\003gId\030\001 \001(\003\022\014\n\004name\030\002 \001(\t"
    "\022\020\n\010serverId\030\003 \001(\005\022\025\n\rkillPersonNum\030\004 \001("
    "\005\022\021\n\tkilledNum\030\005 \001(\005\022\r\n\005sorce\030\007 \001(\005\022\014\n\004r"
    "ank\030\010 \001(\005\022\022\n\nmaxKillNum\030\t \001(\005\"\021\n\017CGExitA"
    "llCombat\"\037\n\017GCExitAllCombat\022\014\n\004type\030\001 \001("
    "\005\"C\n\024GCEnterCombatEndTime\022\017\n\007remainS\030\001 \001"
    "(\003\022\032\n\004rwds\030\002 \003(\0132\014.AllRankRwd2\"-\n\013AllRan"
    "kRwd2\022\r\n\005stage\030\001 \001(\t\022\017\n\007itemrwd\030\002 \001(\t\"\"\n"
    "\021CGGetherBloodItem\022\r\n\005objId\030\001 \001(\003\"\036\n\rGCC"
    "hangeSorce\022\r\n\005sorce\030\007 \001(\005\"\025\n\023CGGetAllCom"
    "batRanks\"Z\n\023GCGetAllCombatRanks\022#\n\007repor"
    "ts\030\001 \003(\0132\022.GCAllCombatReport\022\036\n\002my\030\002 \001(\013"
    "2\022.GCAllCombatReport\"\020\n\016GCAllCombatEnd\"\023"
    "\n\021CGGetAllRankDatas\"6\n\021GCGetAllRankDatas"
    "\022!\n\005ranks\030\001 \003(\0132\022.AllcombatRankData\"\231\001\n\021"
    "AllcombatRankData\022\013\n\003gId\030\001 \001(\003\022\014\n\004name\030\002"
    " \001(\t\022\020\n\010serverId\030\003 \001(\005\022\022\n\nserverName\030\004 \001"
    "(\t\022\020\n\010playerLv\030\005 \001(\005\022\024\n\014battleNumber\030\006 \001"
    "(\005\022\r\n\005sorce\030\007 \001(\005\022\014\n\004rank\030\010 \001(\005B\031\n\027com.m"
    "ile.common.message", 1418);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllCombatMessage.proto", &protobuf_RegisterTypes);
  AllCombatRegist::default_instance_ = new AllCombatRegist();
  AllCombatRegistBack::default_instance_ = new AllCombatRegistBack();
  ACombatTrans::default_instance_ = new ACombatTrans();
  MessageList::default_instance_ = new MessageList();
  ACombatTransBack::default_instance_ = new ACombatTransBack();
  MethodInvoteMsg::default_instance_ = new MethodInvoteMsg();
  CGGetAllCombatView::default_instance_ = new CGGetAllCombatView();
  GCGetAllCombatView::default_instance_ = new GCGetAllCombatView();
  CGEnterAllCombat::default_instance_ = new CGEnterAllCombat();
  GCEnterAllCombat::default_instance_ = new GCEnterAllCombat();
  GCAllCombatReport::default_instance_ = new GCAllCombatReport();
  CGExitAllCombat::default_instance_ = new CGExitAllCombat();
  GCExitAllCombat::default_instance_ = new GCExitAllCombat();
  GCEnterCombatEndTime::default_instance_ = new GCEnterCombatEndTime();
  AllRankRwd2::default_instance_ = new AllRankRwd2();
  CGGetherBloodItem::default_instance_ = new CGGetherBloodItem();
  GCChangeSorce::default_instance_ = new GCChangeSorce();
  CGGetAllCombatRanks::default_instance_ = new CGGetAllCombatRanks();
  GCGetAllCombatRanks::default_instance_ = new GCGetAllCombatRanks();
  GCAllCombatEnd::default_instance_ = new GCAllCombatEnd();
  CGGetAllRankDatas::default_instance_ = new CGGetAllRankDatas();
  GCGetAllRankDatas::default_instance_ = new GCGetAllRankDatas();
  AllcombatRankData::default_instance_ = new AllcombatRankData();
  AllCombatRegist::default_instance_->InitAsDefaultInstance();
  AllCombatRegistBack::default_instance_->InitAsDefaultInstance();
  ACombatTrans::default_instance_->InitAsDefaultInstance();
  MessageList::default_instance_->InitAsDefaultInstance();
  ACombatTransBack::default_instance_->InitAsDefaultInstance();
  MethodInvoteMsg::default_instance_->InitAsDefaultInstance();
  CGGetAllCombatView::default_instance_->InitAsDefaultInstance();
  GCGetAllCombatView::default_instance_->InitAsDefaultInstance();
  CGEnterAllCombat::default_instance_->InitAsDefaultInstance();
  GCEnterAllCombat::default_instance_->InitAsDefaultInstance();
  GCAllCombatReport::default_instance_->InitAsDefaultInstance();
  CGExitAllCombat::default_instance_->InitAsDefaultInstance();
  GCExitAllCombat::default_instance_->InitAsDefaultInstance();
  GCEnterCombatEndTime::default_instance_->InitAsDefaultInstance();
  AllRankRwd2::default_instance_->InitAsDefaultInstance();
  CGGetherBloodItem::default_instance_->InitAsDefaultInstance();
  GCChangeSorce::default_instance_->InitAsDefaultInstance();
  CGGetAllCombatRanks::default_instance_->InitAsDefaultInstance();
  GCGetAllCombatRanks::default_instance_->InitAsDefaultInstance();
  GCAllCombatEnd::default_instance_->InitAsDefaultInstance();
  CGGetAllRankDatas::default_instance_->InitAsDefaultInstance();
  GCGetAllRankDatas::default_instance_->InitAsDefaultInstance();
  AllcombatRankData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllCombatMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllCombatMessage_2eproto {
  StaticDescriptorInitializer_AllCombatMessage_2eproto() {
    protobuf_AddDesc_AllCombatMessage_2eproto();
  }
} static_descriptor_initializer_AllCombatMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AllCombatRegist::kServerIdFieldNumber;
#endif  // !_MSC_VER

AllCombatRegist::AllCombatRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllCombatRegist)
}

void AllCombatRegist::InitAsDefaultInstance() {
}

AllCombatRegist::AllCombatRegist(const AllCombatRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllCombatRegist)
}

void AllCombatRegist::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllCombatRegist::~AllCombatRegist() {
  // @@protoc_insertion_point(destructor:AllCombatRegist)
  SharedDtor();
}

void AllCombatRegist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllCombatRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllCombatRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllCombatRegist_descriptor_;
}

const AllCombatRegist& AllCombatRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

AllCombatRegist* AllCombatRegist::default_instance_ = NULL;

AllCombatRegist* AllCombatRegist::New() const {
  return new AllCombatRegist;
}

void AllCombatRegist::Clear() {
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllCombatRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllCombatRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllCombatRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllCombatRegist)
  return false;
#undef DO_
}

void AllCombatRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllCombatRegist)
  // optional int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllCombatRegist)
}

::google::protobuf::uint8* AllCombatRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllCombatRegist)
  // optional int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllCombatRegist)
  return target;
}

int AllCombatRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllCombatRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllCombatRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllCombatRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllCombatRegist::MergeFrom(const AllCombatRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllCombatRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllCombatRegist::CopyFrom(const AllCombatRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllCombatRegist::IsInitialized() const {

  return true;
}

void AllCombatRegist::Swap(AllCombatRegist* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllCombatRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllCombatRegist_descriptor_;
  metadata.reflection = AllCombatRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllCombatRegistBack::AllCombatRegistBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllCombatRegistBack)
}

void AllCombatRegistBack::InitAsDefaultInstance() {
}

AllCombatRegistBack::AllCombatRegistBack(const AllCombatRegistBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllCombatRegistBack)
}

void AllCombatRegistBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllCombatRegistBack::~AllCombatRegistBack() {
  // @@protoc_insertion_point(destructor:AllCombatRegistBack)
  SharedDtor();
}

void AllCombatRegistBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllCombatRegistBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllCombatRegistBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllCombatRegistBack_descriptor_;
}

const AllCombatRegistBack& AllCombatRegistBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

AllCombatRegistBack* AllCombatRegistBack::default_instance_ = NULL;

AllCombatRegistBack* AllCombatRegistBack::New() const {
  return new AllCombatRegistBack;
}

void AllCombatRegistBack::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllCombatRegistBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllCombatRegistBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AllCombatRegistBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllCombatRegistBack)
  return false;
#undef DO_
}

void AllCombatRegistBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllCombatRegistBack)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllCombatRegistBack)
}

::google::protobuf::uint8* AllCombatRegistBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllCombatRegistBack)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllCombatRegistBack)
  return target;
}

int AllCombatRegistBack::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllCombatRegistBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllCombatRegistBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllCombatRegistBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllCombatRegistBack::MergeFrom(const AllCombatRegistBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllCombatRegistBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllCombatRegistBack::CopyFrom(const AllCombatRegistBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllCombatRegistBack::IsInitialized() const {

  return true;
}

void AllCombatRegistBack::Swap(AllCombatRegistBack* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllCombatRegistBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllCombatRegistBack_descriptor_;
  metadata.reflection = AllCombatRegistBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACombatTrans::kTransTypeFieldNumber;
const int ACombatTrans::kInnerPacketsFieldNumber;
const int ACombatTrans::kStartTFieldNumber;
#endif  // !_MSC_VER

ACombatTrans::ACombatTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ACombatTrans)
}

void ACombatTrans::InitAsDefaultInstance() {
}

ACombatTrans::ACombatTrans(const ACombatTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ACombatTrans)
}

void ACombatTrans::SharedCtor() {
  _cached_size_ = 0;
  transtype_ = 0;
  startt_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACombatTrans::~ACombatTrans() {
  // @@protoc_insertion_point(destructor:ACombatTrans)
  SharedDtor();
}

void ACombatTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACombatTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACombatTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACombatTrans_descriptor_;
}

const ACombatTrans& ACombatTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

ACombatTrans* ACombatTrans::default_instance_ = NULL;

ACombatTrans* ACombatTrans::New() const {
  return new ACombatTrans;
}

void ACombatTrans::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ACombatTrans*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(startt_, transtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  innerpackets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACombatTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ACombatTrans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transtype_)));
          set_has_transtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_innerPackets;
        break;
      }

      // repeated .MessageList innerPackets = 2;
      case 2: {
        if (tag == 18) {
         parse_innerPackets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_innerpackets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_innerPackets;
        if (input->ExpectTag(24)) goto parse_startT;
        break;
      }

      // optional int64 startT = 3;
      case 3: {
        if (tag == 24) {
         parse_startT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startt_)));
          set_has_startt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ACombatTrans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ACombatTrans)
  return false;
#undef DO_
}

void ACombatTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ACombatTrans)
  // optional int32 transType = 1;
  if (has_transtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transtype(), output);
  }

  // repeated .MessageList innerPackets = 2;
  for (int i = 0; i < this->innerpackets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->innerpackets(i), output);
  }

  // optional int64 startT = 3;
  if (has_startt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->startt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ACombatTrans)
}

::google::protobuf::uint8* ACombatTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ACombatTrans)
  // optional int32 transType = 1;
  if (has_transtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transtype(), target);
  }

  // repeated .MessageList innerPackets = 2;
  for (int i = 0; i < this->innerpackets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->innerpackets(i), target);
  }

  // optional int64 startT = 3;
  if (has_startt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->startt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ACombatTrans)
  return target;
}

int ACombatTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transType = 1;
    if (has_transtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transtype());
    }

    // optional int64 startT = 3;
    if (has_startt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startt());
    }

  }
  // repeated .MessageList innerPackets = 2;
  total_size += 1 * this->innerpackets_size();
  for (int i = 0; i < this->innerpackets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->innerpackets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACombatTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACombatTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACombatTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACombatTrans::MergeFrom(const ACombatTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  innerpackets_.MergeFrom(from.innerpackets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transtype()) {
      set_transtype(from.transtype());
    }
    if (from.has_startt()) {
      set_startt(from.startt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACombatTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACombatTrans::CopyFrom(const ACombatTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACombatTrans::IsInitialized() const {

  return true;
}

void ACombatTrans::Swap(ACombatTrans* other) {
  if (other != this) {
    std::swap(transtype_, other->transtype_);
    innerpackets_.Swap(&other->innerpackets_);
    std::swap(startt_, other->startt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACombatTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACombatTrans_descriptor_;
  metadata.reflection = ACombatTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageList::kInnerPacketsFieldNumber;
#endif  // !_MSC_VER

MessageList::MessageList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageList)
}

void MessageList::InitAsDefaultInstance() {
}

MessageList::MessageList(const MessageList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageList)
}

void MessageList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageList::~MessageList() {
  // @@protoc_insertion_point(destructor:MessageList)
  SharedDtor();
}

void MessageList::SharedDtor() {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpackets_;
  }
  if (this != default_instance_) {
  }
}

void MessageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageList_descriptor_;
}

const MessageList& MessageList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

MessageList* MessageList::default_instance_ = NULL;

MessageList* MessageList::New() const {
  return new MessageList;
}

void MessageList::Clear() {
  if (has_innerpackets()) {
    if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      innerpackets_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes innerPackets = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpackets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageList)
  return false;
#undef DO_
}

void MessageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageList)
  // optional bytes innerPackets = 1;
  if (has_innerpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->innerpackets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageList)
}

::google::protobuf::uint8* MessageList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageList)
  // optional bytes innerPackets = 1;
  if (has_innerpackets()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->innerpackets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageList)
  return target;
}

int MessageList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes innerPackets = 1;
    if (has_innerpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpackets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageList::MergeFrom(const MessageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_innerpackets()) {
      set_innerpackets(from.innerpackets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageList::CopyFrom(const MessageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageList::IsInitialized() const {

  return true;
}

void MessageList::Swap(MessageList* other) {
  if (other != this) {
    std::swap(innerpackets_, other->innerpackets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageList_descriptor_;
  metadata.reflection = MessageList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACombatTransBack::kTransTypeFieldNumber;
#endif  // !_MSC_VER

ACombatTransBack::ACombatTransBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ACombatTransBack)
}

void ACombatTransBack::InitAsDefaultInstance() {
}

ACombatTransBack::ACombatTransBack(const ACombatTransBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ACombatTransBack)
}

void ACombatTransBack::SharedCtor() {
  _cached_size_ = 0;
  transtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACombatTransBack::~ACombatTransBack() {
  // @@protoc_insertion_point(destructor:ACombatTransBack)
  SharedDtor();
}

void ACombatTransBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACombatTransBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACombatTransBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACombatTransBack_descriptor_;
}

const ACombatTransBack& ACombatTransBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

ACombatTransBack* ACombatTransBack::default_instance_ = NULL;

ACombatTransBack* ACombatTransBack::New() const {
  return new ACombatTransBack;
}

void ACombatTransBack::Clear() {
  transtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACombatTransBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ACombatTransBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transtype_)));
          set_has_transtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ACombatTransBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ACombatTransBack)
  return false;
#undef DO_
}

void ACombatTransBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ACombatTransBack)
  // optional int32 transType = 1;
  if (has_transtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ACombatTransBack)
}

::google::protobuf::uint8* ACombatTransBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ACombatTransBack)
  // optional int32 transType = 1;
  if (has_transtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ACombatTransBack)
  return target;
}

int ACombatTransBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 transType = 1;
    if (has_transtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACombatTransBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACombatTransBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACombatTransBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACombatTransBack::MergeFrom(const ACombatTransBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transtype()) {
      set_transtype(from.transtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACombatTransBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACombatTransBack::CopyFrom(const ACombatTransBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACombatTransBack::IsInitialized() const {

  return true;
}

void ACombatTransBack::Swap(ACombatTransBack* other) {
  if (other != this) {
    std::swap(transtype_, other->transtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACombatTransBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACombatTransBack_descriptor_;
  metadata.reflection = ACombatTransBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MethodInvoteMsg::kInnerPacketFieldNumber;
#endif  // !_MSC_VER

MethodInvoteMsg::MethodInvoteMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MethodInvoteMsg)
}

void MethodInvoteMsg::InitAsDefaultInstance() {
}

MethodInvoteMsg::MethodInvoteMsg(const MethodInvoteMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MethodInvoteMsg)
}

void MethodInvoteMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodInvoteMsg::~MethodInvoteMsg() {
  // @@protoc_insertion_point(destructor:MethodInvoteMsg)
  SharedDtor();
}

void MethodInvoteMsg::SharedDtor() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (this != default_instance_) {
  }
}

void MethodInvoteMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodInvoteMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodInvoteMsg_descriptor_;
}

const MethodInvoteMsg& MethodInvoteMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

MethodInvoteMsg* MethodInvoteMsg::default_instance_ = NULL;

MethodInvoteMsg* MethodInvoteMsg::New() const {
  return new MethodInvoteMsg;
}

void MethodInvoteMsg::Clear() {
  if (has_innerpacket()) {
    if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      innerpacket_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MethodInvoteMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MethodInvoteMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes innerPacket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MethodInvoteMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MethodInvoteMsg)
  return false;
#undef DO_
}

void MethodInvoteMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MethodInvoteMsg)
  // optional bytes innerPacket = 1;
  if (has_innerpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->innerpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MethodInvoteMsg)
}

::google::protobuf::uint8* MethodInvoteMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MethodInvoteMsg)
  // optional bytes innerPacket = 1;
  if (has_innerpacket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->innerpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MethodInvoteMsg)
  return target;
}

int MethodInvoteMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes innerPacket = 1;
    if (has_innerpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpacket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodInvoteMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MethodInvoteMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MethodInvoteMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MethodInvoteMsg::MergeFrom(const MethodInvoteMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_innerpacket()) {
      set_innerpacket(from.innerpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MethodInvoteMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodInvoteMsg::CopyFrom(const MethodInvoteMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodInvoteMsg::IsInitialized() const {

  return true;
}

void MethodInvoteMsg::Swap(MethodInvoteMsg* other) {
  if (other != this) {
    std::swap(innerpacket_, other->innerpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MethodInvoteMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodInvoteMsg_descriptor_;
  metadata.reflection = MethodInvoteMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAllCombatView::CGGetAllCombatView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAllCombatView)
}

void CGGetAllCombatView::InitAsDefaultInstance() {
}

CGGetAllCombatView::CGGetAllCombatView(const CGGetAllCombatView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAllCombatView)
}

void CGGetAllCombatView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAllCombatView::~CGGetAllCombatView() {
  // @@protoc_insertion_point(destructor:CGGetAllCombatView)
  SharedDtor();
}

void CGGetAllCombatView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAllCombatView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAllCombatView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAllCombatView_descriptor_;
}

const CGGetAllCombatView& CGGetAllCombatView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGGetAllCombatView* CGGetAllCombatView::default_instance_ = NULL;

CGGetAllCombatView* CGGetAllCombatView::New() const {
  return new CGGetAllCombatView;
}

void CGGetAllCombatView::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAllCombatView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAllCombatView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAllCombatView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAllCombatView)
  return false;
#undef DO_
}

void CGGetAllCombatView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAllCombatView)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAllCombatView)
}

::google::protobuf::uint8* CGGetAllCombatView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAllCombatView)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAllCombatView)
  return target;
}

int CGGetAllCombatView::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAllCombatView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAllCombatView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAllCombatView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAllCombatView::MergeFrom(const CGGetAllCombatView& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAllCombatView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAllCombatView::CopyFrom(const CGGetAllCombatView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAllCombatView::IsInitialized() const {

  return true;
}

void CGGetAllCombatView::Swap(CGGetAllCombatView* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAllCombatView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAllCombatView_descriptor_;
  metadata.reflection = CGGetAllCombatView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAllCombatView::kActStartTimeFieldNumber;
const int GCGetAllCombatView::kCombatStartTimeFieldNumber;
const int GCGetAllCombatView::kTitleFieldNumber;
const int GCGetAllCombatView::kFunctionFieldNumber;
const int GCGetAllCombatView::kItemFieldNumber;
const int GCGetAllCombatView::kRewardShowFieldNumber;
const int GCGetAllCombatView::kNoticeFieldNumber;
const int GCGetAllCombatView::kCanEnterFieldNumber;
const int GCGetAllCombatView::kSceneIdFieldNumber;
#endif  // !_MSC_VER

GCGetAllCombatView::GCGetAllCombatView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAllCombatView)
}

void GCGetAllCombatView::InitAsDefaultInstance() {
}

GCGetAllCombatView::GCGetAllCombatView(const GCGetAllCombatView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAllCombatView)
}

void GCGetAllCombatView::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combatstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0;
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewardshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canenter_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAllCombatView::~GCGetAllCombatView() {
  // @@protoc_insertion_point(destructor:GCGetAllCombatView)
  SharedDtor();
}

void GCGetAllCombatView::SharedDtor() {
  if (actstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actstarttime_;
  }
  if (combatstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combatstarttime_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_;
  }
  if (rewardshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardshow_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void GCGetAllCombatView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAllCombatView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAllCombatView_descriptor_;
}

const GCGetAllCombatView& GCGetAllCombatView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCGetAllCombatView* GCGetAllCombatView::default_instance_ = NULL;

GCGetAllCombatView* GCGetAllCombatView::New() const {
  return new GCGetAllCombatView;
}

void GCGetAllCombatView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetAllCombatView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(title_, canenter_);
    if (has_actstarttime()) {
      if (actstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        actstarttime_->clear();
      }
    }
    if (has_combatstarttime()) {
      if (combatstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        combatstarttime_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_item()) {
      if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        item_->clear();
      }
    }
    if (has_rewardshow()) {
      if (rewardshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewardshow_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }
  sceneid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAllCombatView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAllCombatView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string actStartTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actstarttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actstarttime().data(), this->actstarttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actstarttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_combatStartTime;
        break;
      }

      // optional string combatStartTime = 2;
      case 2: {
        if (tag == 18) {
         parse_combatStartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combatstarttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->combatstarttime().data(), this->combatstarttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "combatstarttime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_title;
        break;
      }

      // optional int32 title = 4;
      case 4: {
        if (tag == 32) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_function;
        break;
      }

      // optional string function = 5;
      case 5: {
        if (tag == 42) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }

      // optional string item = 6;
      case 6: {
        if (tag == 50) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "item");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rewardShow;
        break;
      }

      // optional string rewardShow = 7;
      case 7: {
        if (tag == 58) {
         parse_rewardShow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardshow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewardshow().data(), this->rewardshow().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewardshow");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_notice;
        break;
      }

      // optional string notice = 8;
      case 8: {
        if (tag == 66) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_canEnter;
        break;
      }

      // optional int32 canEnter = 9;
      case 9: {
        if (tag == 72) {
         parse_canEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canenter_)));
          set_has_canenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sceneId;
        break;
      }

      // optional int32 sceneId = 10;
      case 10: {
        if (tag == 80) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAllCombatView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAllCombatView)
  return false;
#undef DO_
}

void GCGetAllCombatView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAllCombatView)
  // optional string actStartTime = 1;
  if (has_actstarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actstarttime().data(), this->actstarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actstarttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->actstarttime(), output);
  }

  // optional string combatStartTime = 2;
  if (has_combatstarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->combatstarttime().data(), this->combatstarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "combatstarttime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->combatstarttime(), output);
  }

  // optional int32 title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->title(), output);
  }

  // optional string function = 5;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->function(), output);
  }

  // optional string item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->item(), output);
  }

  // optional string rewardShow = 7;
  if (has_rewardshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardshow().data(), this->rewardshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardshow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rewardshow(), output);
  }

  // optional string notice = 8;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->notice(), output);
  }

  // optional int32 canEnter = 9;
  if (has_canenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->canenter(), output);
  }

  // optional int32 sceneId = 10;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAllCombatView)
}

::google::protobuf::uint8* GCGetAllCombatView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAllCombatView)
  // optional string actStartTime = 1;
  if (has_actstarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actstarttime().data(), this->actstarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actstarttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->actstarttime(), target);
  }

  // optional string combatStartTime = 2;
  if (has_combatstarttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->combatstarttime().data(), this->combatstarttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "combatstarttime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->combatstarttime(), target);
  }

  // optional int32 title = 4;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->title(), target);
  }

  // optional string function = 5;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->function(), target);
  }

  // optional string item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "item");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->item(), target);
  }

  // optional string rewardShow = 7;
  if (has_rewardshow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardshow().data(), this->rewardshow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardshow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rewardshow(), target);
  }

  // optional string notice = 8;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->notice(), target);
  }

  // optional int32 canEnter = 9;
  if (has_canenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->canenter(), target);
  }

  // optional int32 sceneId = 10;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAllCombatView)
  return target;
}

int GCGetAllCombatView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string actStartTime = 1;
    if (has_actstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actstarttime());
    }

    // optional string combatStartTime = 2;
    if (has_combatstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combatstarttime());
    }

    // optional int32 title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional string function = 5;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // optional string item = 6;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item());
    }

    // optional string rewardShow = 7;
    if (has_rewardshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardshow());
    }

    // optional string notice = 8;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional int32 canEnter = 9;
    if (has_canenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canenter());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sceneId = 10;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAllCombatView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAllCombatView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAllCombatView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAllCombatView::MergeFrom(const GCGetAllCombatView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actstarttime()) {
      set_actstarttime(from.actstarttime());
    }
    if (from.has_combatstarttime()) {
      set_combatstarttime(from.combatstarttime());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_rewardshow()) {
      set_rewardshow(from.rewardshow());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_canenter()) {
      set_canenter(from.canenter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAllCombatView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAllCombatView::CopyFrom(const GCGetAllCombatView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAllCombatView::IsInitialized() const {

  return true;
}

void GCGetAllCombatView::Swap(GCGetAllCombatView* other) {
  if (other != this) {
    std::swap(actstarttime_, other->actstarttime_);
    std::swap(combatstarttime_, other->combatstarttime_);
    std::swap(title_, other->title_);
    std::swap(function_, other->function_);
    std::swap(item_, other->item_);
    std::swap(rewardshow_, other->rewardshow_);
    std::swap(notice_, other->notice_);
    std::swap(canenter_, other->canenter_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAllCombatView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAllCombatView_descriptor_;
  metadata.reflection = GCGetAllCombatView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEnterAllCombat::kTypeFieldNumber;
#endif  // !_MSC_VER

CGEnterAllCombat::CGEnterAllCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterAllCombat)
}

void CGEnterAllCombat::InitAsDefaultInstance() {
}

CGEnterAllCombat::CGEnterAllCombat(const CGEnterAllCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterAllCombat)
}

void CGEnterAllCombat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterAllCombat::~CGEnterAllCombat() {
  // @@protoc_insertion_point(destructor:CGEnterAllCombat)
  SharedDtor();
}

void CGEnterAllCombat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterAllCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterAllCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterAllCombat_descriptor_;
}

const CGEnterAllCombat& CGEnterAllCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGEnterAllCombat* CGEnterAllCombat::default_instance_ = NULL;

CGEnterAllCombat* CGEnterAllCombat::New() const {
  return new CGEnterAllCombat;
}

void CGEnterAllCombat::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterAllCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterAllCombat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterAllCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterAllCombat)
  return false;
#undef DO_
}

void CGEnterAllCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterAllCombat)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterAllCombat)
}

::google::protobuf::uint8* CGEnterAllCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterAllCombat)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterAllCombat)
  return target;
}

int CGEnterAllCombat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterAllCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterAllCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterAllCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterAllCombat::MergeFrom(const CGEnterAllCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterAllCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterAllCombat::CopyFrom(const CGEnterAllCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterAllCombat::IsInitialized() const {

  return true;
}

void CGEnterAllCombat::Swap(CGEnterAllCombat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterAllCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterAllCombat_descriptor_;
  metadata.reflection = CGEnterAllCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterAllCombat::kActTypeFieldNumber;
const int GCEnterAllCombat::kIpFieldNumber;
const int GCEnterAllCombat::kPortFieldNumber;
const int GCEnterAllCombat::kReportsFieldNumber;
#endif  // !_MSC_VER

GCEnterAllCombat::GCEnterAllCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterAllCombat)
}

void GCEnterAllCombat::InitAsDefaultInstance() {
}

GCEnterAllCombat::GCEnterAllCombat(const GCEnterAllCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterAllCombat)
}

void GCEnterAllCombat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  acttype_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterAllCombat::~GCEnterAllCombat() {
  // @@protoc_insertion_point(destructor:GCEnterAllCombat)
  SharedDtor();
}

void GCEnterAllCombat::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GCEnterAllCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterAllCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterAllCombat_descriptor_;
}

const GCEnterAllCombat& GCEnterAllCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCEnterAllCombat* GCEnterAllCombat::default_instance_ = NULL;

GCEnterAllCombat* GCEnterAllCombat::New() const {
  return new GCEnterAllCombat;
}

void GCEnterAllCombat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCEnterAllCombat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(acttype_, port_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterAllCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterAllCombat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reports;
        break;
      }

      // repeated .GCAllCombatReport reports = 4;
      case 4: {
        if (tag == 34) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reports;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterAllCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterAllCombat)
  return false;
#undef DO_
}

void GCEnterAllCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterAllCombat)
  // optional int32 actType = 1;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acttype(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // repeated .GCAllCombatReport reports = 4;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterAllCombat)
}

::google::protobuf::uint8* GCEnterAllCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterAllCombat)
  // optional int32 actType = 1;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acttype(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // repeated .GCAllCombatReport reports = 4;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterAllCombat)
  return target;
}

int GCEnterAllCombat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actType = 1;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acttype());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  // repeated .GCAllCombatReport reports = 4;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterAllCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterAllCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterAllCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterAllCombat::MergeFrom(const GCEnterAllCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterAllCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterAllCombat::CopyFrom(const GCEnterAllCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterAllCombat::IsInitialized() const {

  return true;
}

void GCEnterAllCombat::Swap(GCEnterAllCombat* other) {
  if (other != this) {
    std::swap(acttype_, other->acttype_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    reports_.Swap(&other->reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterAllCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterAllCombat_descriptor_;
  metadata.reflection = GCEnterAllCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAllCombatReport::kGIdFieldNumber;
const int GCAllCombatReport::kNameFieldNumber;
const int GCAllCombatReport::kServerIdFieldNumber;
const int GCAllCombatReport::kKillPersonNumFieldNumber;
const int GCAllCombatReport::kKilledNumFieldNumber;
const int GCAllCombatReport::kSorceFieldNumber;
const int GCAllCombatReport::kRankFieldNumber;
const int GCAllCombatReport::kMaxKillNumFieldNumber;
#endif  // !_MSC_VER

GCAllCombatReport::GCAllCombatReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAllCombatReport)
}

void GCAllCombatReport::InitAsDefaultInstance() {
}

GCAllCombatReport::GCAllCombatReport(const GCAllCombatReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAllCombatReport)
}

void GCAllCombatReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  killpersonnum_ = 0;
  killednum_ = 0;
  sorce_ = 0;
  rank_ = 0;
  maxkillnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAllCombatReport::~GCAllCombatReport() {
  // @@protoc_insertion_point(destructor:GCAllCombatReport)
  SharedDtor();
}

void GCAllCombatReport::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GCAllCombatReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAllCombatReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAllCombatReport_descriptor_;
}

const GCAllCombatReport& GCAllCombatReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCAllCombatReport* GCAllCombatReport::default_instance_ = NULL;

GCAllCombatReport* GCAllCombatReport::New() const {
  return new GCAllCombatReport;
}

void GCAllCombatReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAllCombatReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serverid_, maxkillnum_);
    gid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAllCombatReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAllCombatReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_killPersonNum;
        break;
      }

      // optional int32 killPersonNum = 4;
      case 4: {
        if (tag == 32) {
         parse_killPersonNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killpersonnum_)));
          set_has_killpersonnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killedNum;
        break;
      }

      // optional int32 killedNum = 5;
      case 5: {
        if (tag == 40) {
         parse_killedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killednum_)));
          set_has_killednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sorce;
        break;
      }

      // optional int32 sorce = 7;
      case 7: {
        if (tag == 56) {
         parse_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional int32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_maxKillNum;
        break;
      }

      // optional int32 maxKillNum = 9;
      case 9: {
        if (tag == 72) {
         parse_maxKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxkillnum_)));
          set_has_maxkillnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAllCombatReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAllCombatReport)
  return false;
#undef DO_
}

void GCAllCombatReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAllCombatReport)
  // optional int64 gId = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  // optional int32 killPersonNum = 4;
  if (has_killpersonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->killpersonnum(), output);
  }

  // optional int32 killedNum = 5;
  if (has_killednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killednum(), output);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sorce(), output);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rank(), output);
  }

  // optional int32 maxKillNum = 9;
  if (has_maxkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxkillnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAllCombatReport)
}

::google::protobuf::uint8* GCAllCombatReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAllCombatReport)
  // optional int64 gId = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }

  // optional int32 killPersonNum = 4;
  if (has_killpersonnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->killpersonnum(), target);
  }

  // optional int32 killedNum = 5;
  if (has_killednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killednum(), target);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sorce(), target);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rank(), target);
  }

  // optional int32 maxKillNum = 9;
  if (has_maxkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxkillnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAllCombatReport)
  return target;
}

int GCAllCombatReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gId = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 killPersonNum = 4;
    if (has_killpersonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killpersonnum());
    }

    // optional int32 killedNum = 5;
    if (has_killednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killednum());
    }

    // optional int32 sorce = 7;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

    // optional int32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 maxKillNum = 9;
    if (has_maxkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxkillnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAllCombatReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAllCombatReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAllCombatReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAllCombatReport::MergeFrom(const GCAllCombatReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_killpersonnum()) {
      set_killpersonnum(from.killpersonnum());
    }
    if (from.has_killednum()) {
      set_killednum(from.killednum());
    }
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_maxkillnum()) {
      set_maxkillnum(from.maxkillnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAllCombatReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAllCombatReport::CopyFrom(const GCAllCombatReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAllCombatReport::IsInitialized() const {

  return true;
}

void GCAllCombatReport::Swap(GCAllCombatReport* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(serverid_, other->serverid_);
    std::swap(killpersonnum_, other->killpersonnum_);
    std::swap(killednum_, other->killednum_);
    std::swap(sorce_, other->sorce_);
    std::swap(rank_, other->rank_);
    std::swap(maxkillnum_, other->maxkillnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAllCombatReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAllCombatReport_descriptor_;
  metadata.reflection = GCAllCombatReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGExitAllCombat::CGExitAllCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExitAllCombat)
}

void CGExitAllCombat::InitAsDefaultInstance() {
}

CGExitAllCombat::CGExitAllCombat(const CGExitAllCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExitAllCombat)
}

void CGExitAllCombat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExitAllCombat::~CGExitAllCombat() {
  // @@protoc_insertion_point(destructor:CGExitAllCombat)
  SharedDtor();
}

void CGExitAllCombat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGExitAllCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExitAllCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExitAllCombat_descriptor_;
}

const CGExitAllCombat& CGExitAllCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGExitAllCombat* CGExitAllCombat::default_instance_ = NULL;

CGExitAllCombat* CGExitAllCombat::New() const {
  return new CGExitAllCombat;
}

void CGExitAllCombat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExitAllCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExitAllCombat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGExitAllCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExitAllCombat)
  return false;
#undef DO_
}

void CGExitAllCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExitAllCombat)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExitAllCombat)
}

::google::protobuf::uint8* CGExitAllCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExitAllCombat)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExitAllCombat)
  return target;
}

int CGExitAllCombat::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExitAllCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExitAllCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExitAllCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExitAllCombat::MergeFrom(const CGExitAllCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExitAllCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExitAllCombat::CopyFrom(const CGExitAllCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExitAllCombat::IsInitialized() const {

  return true;
}

void CGExitAllCombat::Swap(CGExitAllCombat* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExitAllCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExitAllCombat_descriptor_;
  metadata.reflection = CGExitAllCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCExitAllCombat::kTypeFieldNumber;
#endif  // !_MSC_VER

GCExitAllCombat::GCExitAllCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCExitAllCombat)
}

void GCExitAllCombat::InitAsDefaultInstance() {
}

GCExitAllCombat::GCExitAllCombat(const GCExitAllCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCExitAllCombat)
}

void GCExitAllCombat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCExitAllCombat::~GCExitAllCombat() {
  // @@protoc_insertion_point(destructor:GCExitAllCombat)
  SharedDtor();
}

void GCExitAllCombat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCExitAllCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCExitAllCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCExitAllCombat_descriptor_;
}

const GCExitAllCombat& GCExitAllCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCExitAllCombat* GCExitAllCombat::default_instance_ = NULL;

GCExitAllCombat* GCExitAllCombat::New() const {
  return new GCExitAllCombat;
}

void GCExitAllCombat::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCExitAllCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCExitAllCombat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCExitAllCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCExitAllCombat)
  return false;
#undef DO_
}

void GCExitAllCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCExitAllCombat)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCExitAllCombat)
}

::google::protobuf::uint8* GCExitAllCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCExitAllCombat)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCExitAllCombat)
  return target;
}

int GCExitAllCombat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCExitAllCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCExitAllCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCExitAllCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCExitAllCombat::MergeFrom(const GCExitAllCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCExitAllCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCExitAllCombat::CopyFrom(const GCExitAllCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExitAllCombat::IsInitialized() const {

  return true;
}

void GCExitAllCombat::Swap(GCExitAllCombat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCExitAllCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCExitAllCombat_descriptor_;
  metadata.reflection = GCExitAllCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterCombatEndTime::kRemainSFieldNumber;
const int GCEnterCombatEndTime::kRwdsFieldNumber;
#endif  // !_MSC_VER

GCEnterCombatEndTime::GCEnterCombatEndTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterCombatEndTime)
}

void GCEnterCombatEndTime::InitAsDefaultInstance() {
}

GCEnterCombatEndTime::GCEnterCombatEndTime(const GCEnterCombatEndTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterCombatEndTime)
}

void GCEnterCombatEndTime::SharedCtor() {
  _cached_size_ = 0;
  remains_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterCombatEndTime::~GCEnterCombatEndTime() {
  // @@protoc_insertion_point(destructor:GCEnterCombatEndTime)
  SharedDtor();
}

void GCEnterCombatEndTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterCombatEndTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterCombatEndTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterCombatEndTime_descriptor_;
}

const GCEnterCombatEndTime& GCEnterCombatEndTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCEnterCombatEndTime* GCEnterCombatEndTime::default_instance_ = NULL;

GCEnterCombatEndTime* GCEnterCombatEndTime::New() const {
  return new GCEnterCombatEndTime;
}

void GCEnterCombatEndTime::Clear() {
  remains_ = GOOGLE_LONGLONG(0);
  rwds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterCombatEndTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterCombatEndTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 remainS = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remains_)));
          set_has_remains();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rwds;
        break;
      }

      // repeated .AllRankRwd2 rwds = 2;
      case 2: {
        if (tag == 18) {
         parse_rwds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rwds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rwds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterCombatEndTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterCombatEndTime)
  return false;
#undef DO_
}

void GCEnterCombatEndTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterCombatEndTime)
  // optional int64 remainS = 1;
  if (has_remains()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->remains(), output);
  }

  // repeated .AllRankRwd2 rwds = 2;
  for (int i = 0; i < this->rwds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rwds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterCombatEndTime)
}

::google::protobuf::uint8* GCEnterCombatEndTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterCombatEndTime)
  // optional int64 remainS = 1;
  if (has_remains()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->remains(), target);
  }

  // repeated .AllRankRwd2 rwds = 2;
  for (int i = 0; i < this->rwds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rwds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterCombatEndTime)
  return target;
}

int GCEnterCombatEndTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 remainS = 1;
    if (has_remains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remains());
    }

  }
  // repeated .AllRankRwd2 rwds = 2;
  total_size += 1 * this->rwds_size();
  for (int i = 0; i < this->rwds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rwds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterCombatEndTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterCombatEndTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterCombatEndTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterCombatEndTime::MergeFrom(const GCEnterCombatEndTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  rwds_.MergeFrom(from.rwds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remains()) {
      set_remains(from.remains());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterCombatEndTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterCombatEndTime::CopyFrom(const GCEnterCombatEndTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterCombatEndTime::IsInitialized() const {

  return true;
}

void GCEnterCombatEndTime::Swap(GCEnterCombatEndTime* other) {
  if (other != this) {
    std::swap(remains_, other->remains_);
    rwds_.Swap(&other->rwds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterCombatEndTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterCombatEndTime_descriptor_;
  metadata.reflection = GCEnterCombatEndTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllRankRwd2::kStageFieldNumber;
const int AllRankRwd2::kItemrwdFieldNumber;
#endif  // !_MSC_VER

AllRankRwd2::AllRankRwd2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllRankRwd2)
}

void AllRankRwd2::InitAsDefaultInstance() {
}

AllRankRwd2::AllRankRwd2(const AllRankRwd2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllRankRwd2)
}

void AllRankRwd2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  itemrwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllRankRwd2::~AllRankRwd2() {
  // @@protoc_insertion_point(destructor:AllRankRwd2)
  SharedDtor();
}

void AllRankRwd2::SharedDtor() {
  if (stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_;
  }
  if (itemrwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemrwd_;
  }
  if (this != default_instance_) {
  }
}

void AllRankRwd2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllRankRwd2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllRankRwd2_descriptor_;
}

const AllRankRwd2& AllRankRwd2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

AllRankRwd2* AllRankRwd2::default_instance_ = NULL;

AllRankRwd2* AllRankRwd2::New() const {
  return new AllRankRwd2;
}

void AllRankRwd2::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stage()) {
      if (stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stage_->clear();
      }
    }
    if (has_itemrwd()) {
      if (itemrwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemrwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllRankRwd2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllRankRwd2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage().data(), this->stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemrwd;
        break;
      }

      // optional string itemrwd = 2;
      case 2: {
        if (tag == 18) {
         parse_itemrwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemrwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemrwd().data(), this->itemrwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemrwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllRankRwd2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllRankRwd2)
  return false;
#undef DO_
}

void AllRankRwd2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllRankRwd2)
  // optional string stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stage(), output);
  }

  // optional string itemrwd = 2;
  if (has_itemrwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemrwd().data(), this->itemrwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemrwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->itemrwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllRankRwd2)
}

::google::protobuf::uint8* AllRankRwd2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllRankRwd2)
  // optional string stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage().data(), this->stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stage(), target);
  }

  // optional string itemrwd = 2;
  if (has_itemrwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemrwd().data(), this->itemrwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemrwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->itemrwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllRankRwd2)
  return target;
}

int AllRankRwd2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage());
    }

    // optional string itemrwd = 2;
    if (has_itemrwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemrwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllRankRwd2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllRankRwd2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllRankRwd2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllRankRwd2::MergeFrom(const AllRankRwd2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_itemrwd()) {
      set_itemrwd(from.itemrwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllRankRwd2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllRankRwd2::CopyFrom(const AllRankRwd2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllRankRwd2::IsInitialized() const {

  return true;
}

void AllRankRwd2::Swap(AllRankRwd2* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(itemrwd_, other->itemrwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllRankRwd2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllRankRwd2_descriptor_;
  metadata.reflection = AllRankRwd2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetherBloodItem::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGGetherBloodItem::CGGetherBloodItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetherBloodItem)
}

void CGGetherBloodItem::InitAsDefaultInstance() {
}

CGGetherBloodItem::CGGetherBloodItem(const CGGetherBloodItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetherBloodItem)
}

void CGGetherBloodItem::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetherBloodItem::~CGGetherBloodItem() {
  // @@protoc_insertion_point(destructor:CGGetherBloodItem)
  SharedDtor();
}

void CGGetherBloodItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetherBloodItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetherBloodItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetherBloodItem_descriptor_;
}

const CGGetherBloodItem& CGGetherBloodItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGGetherBloodItem* CGGetherBloodItem::default_instance_ = NULL;

CGGetherBloodItem* CGGetherBloodItem::New() const {
  return new CGGetherBloodItem;
}

void CGGetherBloodItem::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetherBloodItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetherBloodItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetherBloodItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetherBloodItem)
  return false;
#undef DO_
}

void CGGetherBloodItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetherBloodItem)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetherBloodItem)
}

::google::protobuf::uint8* CGGetherBloodItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetherBloodItem)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetherBloodItem)
  return target;
}

int CGGetherBloodItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetherBloodItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetherBloodItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetherBloodItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetherBloodItem::MergeFrom(const CGGetherBloodItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetherBloodItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetherBloodItem::CopyFrom(const CGGetherBloodItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetherBloodItem::IsInitialized() const {

  return true;
}

void CGGetherBloodItem::Swap(CGGetherBloodItem* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetherBloodItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetherBloodItem_descriptor_;
  metadata.reflection = CGGetherBloodItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeSorce::kSorceFieldNumber;
#endif  // !_MSC_VER

GCChangeSorce::GCChangeSorce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeSorce)
}

void GCChangeSorce::InitAsDefaultInstance() {
}

GCChangeSorce::GCChangeSorce(const GCChangeSorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeSorce)
}

void GCChangeSorce::SharedCtor() {
  _cached_size_ = 0;
  sorce_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeSorce::~GCChangeSorce() {
  // @@protoc_insertion_point(destructor:GCChangeSorce)
  SharedDtor();
}

void GCChangeSorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChangeSorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeSorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeSorce_descriptor_;
}

const GCChangeSorce& GCChangeSorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCChangeSorce* GCChangeSorce::default_instance_ = NULL;

GCChangeSorce* GCChangeSorce::New() const {
  return new GCChangeSorce;
}

void GCChangeSorce::Clear() {
  sorce_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeSorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeSorce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sorce = 7;
      case 7: {
        if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeSorce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeSorce)
  return false;
#undef DO_
}

void GCChangeSorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeSorce)
  // optional int32 sorce = 7;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sorce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeSorce)
}

::google::protobuf::uint8* GCChangeSorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeSorce)
  // optional int32 sorce = 7;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sorce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeSorce)
  return target;
}

int GCChangeSorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sorce = 7;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeSorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeSorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeSorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeSorce::MergeFrom(const GCChangeSorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeSorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeSorce::CopyFrom(const GCChangeSorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeSorce::IsInitialized() const {

  return true;
}

void GCChangeSorce::Swap(GCChangeSorce* other) {
  if (other != this) {
    std::swap(sorce_, other->sorce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeSorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeSorce_descriptor_;
  metadata.reflection = GCChangeSorce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAllCombatRanks::CGGetAllCombatRanks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAllCombatRanks)
}

void CGGetAllCombatRanks::InitAsDefaultInstance() {
}

CGGetAllCombatRanks::CGGetAllCombatRanks(const CGGetAllCombatRanks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAllCombatRanks)
}

void CGGetAllCombatRanks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAllCombatRanks::~CGGetAllCombatRanks() {
  // @@protoc_insertion_point(destructor:CGGetAllCombatRanks)
  SharedDtor();
}

void CGGetAllCombatRanks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAllCombatRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAllCombatRanks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAllCombatRanks_descriptor_;
}

const CGGetAllCombatRanks& CGGetAllCombatRanks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGGetAllCombatRanks* CGGetAllCombatRanks::default_instance_ = NULL;

CGGetAllCombatRanks* CGGetAllCombatRanks::New() const {
  return new CGGetAllCombatRanks;
}

void CGGetAllCombatRanks::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAllCombatRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAllCombatRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAllCombatRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAllCombatRanks)
  return false;
#undef DO_
}

void CGGetAllCombatRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAllCombatRanks)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAllCombatRanks)
}

::google::protobuf::uint8* CGGetAllCombatRanks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAllCombatRanks)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAllCombatRanks)
  return target;
}

int CGGetAllCombatRanks::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAllCombatRanks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAllCombatRanks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAllCombatRanks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAllCombatRanks::MergeFrom(const CGGetAllCombatRanks& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAllCombatRanks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAllCombatRanks::CopyFrom(const CGGetAllCombatRanks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAllCombatRanks::IsInitialized() const {

  return true;
}

void CGGetAllCombatRanks::Swap(CGGetAllCombatRanks* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAllCombatRanks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAllCombatRanks_descriptor_;
  metadata.reflection = CGGetAllCombatRanks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAllCombatRanks::kReportsFieldNumber;
const int GCGetAllCombatRanks::kMyFieldNumber;
#endif  // !_MSC_VER

GCGetAllCombatRanks::GCGetAllCombatRanks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAllCombatRanks)
}

void GCGetAllCombatRanks::InitAsDefaultInstance() {
  my_ = const_cast< ::GCAllCombatReport*>(&::GCAllCombatReport::default_instance());
}

GCGetAllCombatRanks::GCGetAllCombatRanks(const GCGetAllCombatRanks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAllCombatRanks)
}

void GCGetAllCombatRanks::SharedCtor() {
  _cached_size_ = 0;
  my_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAllCombatRanks::~GCGetAllCombatRanks() {
  // @@protoc_insertion_point(destructor:GCGetAllCombatRanks)
  SharedDtor();
}

void GCGetAllCombatRanks::SharedDtor() {
  if (this != default_instance_) {
    delete my_;
  }
}

void GCGetAllCombatRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAllCombatRanks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAllCombatRanks_descriptor_;
}

const GCGetAllCombatRanks& GCGetAllCombatRanks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCGetAllCombatRanks* GCGetAllCombatRanks::default_instance_ = NULL;

GCGetAllCombatRanks* GCGetAllCombatRanks::New() const {
  return new GCGetAllCombatRanks;
}

void GCGetAllCombatRanks::Clear() {
  if (has_my()) {
    if (my_ != NULL) my_->::GCAllCombatReport::Clear();
  }
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAllCombatRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAllCombatRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GCAllCombatReport reports = 1;
      case 1: {
        if (tag == 10) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reports;
        if (input->ExpectTag(18)) goto parse_my;
        break;
      }

      // optional .GCAllCombatReport my = 2;
      case 2: {
        if (tag == 18) {
         parse_my:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAllCombatRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAllCombatRanks)
  return false;
#undef DO_
}

void GCGetAllCombatRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAllCombatRanks)
  // repeated .GCAllCombatReport reports = 1;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reports(i), output);
  }

  // optional .GCAllCombatReport my = 2;
  if (has_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAllCombatRanks)
}

::google::protobuf::uint8* GCGetAllCombatRanks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAllCombatRanks)
  // repeated .GCAllCombatReport reports = 1;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reports(i), target);
  }

  // optional .GCAllCombatReport my = 2;
  if (has_my()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAllCombatRanks)
  return target;
}

int GCGetAllCombatRanks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .GCAllCombatReport my = 2;
    if (has_my()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my());
    }

  }
  // repeated .GCAllCombatReport reports = 1;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAllCombatRanks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAllCombatRanks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAllCombatRanks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAllCombatRanks::MergeFrom(const GCGetAllCombatRanks& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my()) {
      mutable_my()->::GCAllCombatReport::MergeFrom(from.my());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAllCombatRanks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAllCombatRanks::CopyFrom(const GCGetAllCombatRanks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAllCombatRanks::IsInitialized() const {

  return true;
}

void GCGetAllCombatRanks::Swap(GCGetAllCombatRanks* other) {
  if (other != this) {
    reports_.Swap(&other->reports_);
    std::swap(my_, other->my_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAllCombatRanks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAllCombatRanks_descriptor_;
  metadata.reflection = GCGetAllCombatRanks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GCAllCombatEnd::GCAllCombatEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAllCombatEnd)
}

void GCAllCombatEnd::InitAsDefaultInstance() {
}

GCAllCombatEnd::GCAllCombatEnd(const GCAllCombatEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAllCombatEnd)
}

void GCAllCombatEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAllCombatEnd::~GCAllCombatEnd() {
  // @@protoc_insertion_point(destructor:GCAllCombatEnd)
  SharedDtor();
}

void GCAllCombatEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAllCombatEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAllCombatEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAllCombatEnd_descriptor_;
}

const GCAllCombatEnd& GCAllCombatEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCAllCombatEnd* GCAllCombatEnd::default_instance_ = NULL;

GCAllCombatEnd* GCAllCombatEnd::New() const {
  return new GCAllCombatEnd;
}

void GCAllCombatEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAllCombatEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAllCombatEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GCAllCombatEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAllCombatEnd)
  return false;
#undef DO_
}

void GCAllCombatEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAllCombatEnd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAllCombatEnd)
}

::google::protobuf::uint8* GCAllCombatEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAllCombatEnd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAllCombatEnd)
  return target;
}

int GCAllCombatEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAllCombatEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAllCombatEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAllCombatEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAllCombatEnd::MergeFrom(const GCAllCombatEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAllCombatEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAllCombatEnd::CopyFrom(const GCAllCombatEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAllCombatEnd::IsInitialized() const {

  return true;
}

void GCAllCombatEnd::Swap(GCAllCombatEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAllCombatEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAllCombatEnd_descriptor_;
  metadata.reflection = GCAllCombatEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAllRankDatas::CGGetAllRankDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAllRankDatas)
}

void CGGetAllRankDatas::InitAsDefaultInstance() {
}

CGGetAllRankDatas::CGGetAllRankDatas(const CGGetAllRankDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAllRankDatas)
}

void CGGetAllRankDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAllRankDatas::~CGGetAllRankDatas() {
  // @@protoc_insertion_point(destructor:CGGetAllRankDatas)
  SharedDtor();
}

void CGGetAllRankDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAllRankDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAllRankDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAllRankDatas_descriptor_;
}

const CGGetAllRankDatas& CGGetAllRankDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

CGGetAllRankDatas* CGGetAllRankDatas::default_instance_ = NULL;

CGGetAllRankDatas* CGGetAllRankDatas::New() const {
  return new CGGetAllRankDatas;
}

void CGGetAllRankDatas::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAllRankDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAllRankDatas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAllRankDatas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAllRankDatas)
  return false;
#undef DO_
}

void CGGetAllRankDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAllRankDatas)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAllRankDatas)
}

::google::protobuf::uint8* CGGetAllRankDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAllRankDatas)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAllRankDatas)
  return target;
}

int CGGetAllRankDatas::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAllRankDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAllRankDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAllRankDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAllRankDatas::MergeFrom(const CGGetAllRankDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAllRankDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAllRankDatas::CopyFrom(const CGGetAllRankDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAllRankDatas::IsInitialized() const {

  return true;
}

void CGGetAllRankDatas::Swap(CGGetAllRankDatas* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAllRankDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAllRankDatas_descriptor_;
  metadata.reflection = CGGetAllRankDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAllRankDatas::kRanksFieldNumber;
#endif  // !_MSC_VER

GCGetAllRankDatas::GCGetAllRankDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAllRankDatas)
}

void GCGetAllRankDatas::InitAsDefaultInstance() {
}

GCGetAllRankDatas::GCGetAllRankDatas(const GCGetAllRankDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAllRankDatas)
}

void GCGetAllRankDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAllRankDatas::~GCGetAllRankDatas() {
  // @@protoc_insertion_point(destructor:GCGetAllRankDatas)
  SharedDtor();
}

void GCGetAllRankDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAllRankDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAllRankDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAllRankDatas_descriptor_;
}

const GCGetAllRankDatas& GCGetAllRankDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

GCGetAllRankDatas* GCGetAllRankDatas::default_instance_ = NULL;

GCGetAllRankDatas* GCGetAllRankDatas::New() const {
  return new GCGetAllRankDatas;
}

void GCGetAllRankDatas::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAllRankDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAllRankDatas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AllcombatRankData ranks = 1;
      case 1: {
        if (tag == 10) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAllRankDatas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAllRankDatas)
  return false;
#undef DO_
}

void GCGetAllRankDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAllRankDatas)
  // repeated .AllcombatRankData ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAllRankDatas)
}

::google::protobuf::uint8* GCGetAllRankDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAllRankDatas)
  // repeated .AllcombatRankData ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAllRankDatas)
  return target;
}

int GCGetAllRankDatas::ByteSize() const {
  int total_size = 0;

  // repeated .AllcombatRankData ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAllRankDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAllRankDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAllRankDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAllRankDatas::MergeFrom(const GCGetAllRankDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAllRankDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAllRankDatas::CopyFrom(const GCGetAllRankDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAllRankDatas::IsInitialized() const {

  return true;
}

void GCGetAllRankDatas::Swap(GCGetAllRankDatas* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAllRankDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAllRankDatas_descriptor_;
  metadata.reflection = GCGetAllRankDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllcombatRankData::kGIdFieldNumber;
const int AllcombatRankData::kNameFieldNumber;
const int AllcombatRankData::kServerIdFieldNumber;
const int AllcombatRankData::kServerNameFieldNumber;
const int AllcombatRankData::kPlayerLvFieldNumber;
const int AllcombatRankData::kBattleNumberFieldNumber;
const int AllcombatRankData::kSorceFieldNumber;
const int AllcombatRankData::kRankFieldNumber;
#endif  // !_MSC_VER

AllcombatRankData::AllcombatRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllcombatRankData)
}

void AllcombatRankData::InitAsDefaultInstance() {
}

AllcombatRankData::AllcombatRankData(const AllcombatRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllcombatRankData)
}

void AllcombatRankData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerlv_ = 0;
  battlenumber_ = 0;
  sorce_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllcombatRankData::~AllcombatRankData() {
  // @@protoc_insertion_point(destructor:AllcombatRankData)
  SharedDtor();
}

void AllcombatRankData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void AllcombatRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllcombatRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllcombatRankData_descriptor_;
}

const AllcombatRankData& AllcombatRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllCombatMessage_2eproto();
  return *default_instance_;
}

AllcombatRankData* AllcombatRankData::default_instance_ = NULL;

AllcombatRankData* AllcombatRankData::New() const {
  return new AllcombatRankData;
}

void AllcombatRankData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllcombatRankData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serverid_, rank_);
    gid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllcombatRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllcombatRankData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_serverName;
        break;
      }

      // optional string serverName = 4;
      case 4: {
        if (tag == 34) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_playerLv;
        break;
      }

      // optional int32 playerLv = 5;
      case 5: {
        if (tag == 40) {
         parse_playerLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_battleNumber;
        break;
      }

      // optional int32 battleNumber = 6;
      case 6: {
        if (tag == 48) {
         parse_battleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlenumber_)));
          set_has_battlenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sorce;
        break;
      }

      // optional int32 sorce = 7;
      case 7: {
        if (tag == 56) {
         parse_sorce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorce_)));
          set_has_sorce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rank;
        break;
      }

      // optional int32 rank = 8;
      case 8: {
        if (tag == 64) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllcombatRankData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllcombatRankData)
  return false;
#undef DO_
}

void AllcombatRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllcombatRankData)
  // optional int64 gId = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->servername(), output);
  }

  // optional int32 playerLv = 5;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerlv(), output);
  }

  // optional int32 battleNumber = 6;
  if (has_battlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battlenumber(), output);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sorce(), output);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllcombatRankData)
}

::google::protobuf::uint8* AllcombatRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllcombatRankData)
  // optional int64 gId = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 serverId = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  // optional int32 playerLv = 5;
  if (has_playerlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerlv(), target);
  }

  // optional int32 battleNumber = 6;
  if (has_battlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battlenumber(), target);
  }

  // optional int32 sorce = 7;
  if (has_sorce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sorce(), target);
  }

  // optional int32 rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllcombatRankData)
  return target;
}

int AllcombatRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gId = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string serverName = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional int32 playerLv = 5;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlv());
    }

    // optional int32 battleNumber = 6;
    if (has_battlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlenumber());
    }

    // optional int32 sorce = 7;
    if (has_sorce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorce());
    }

    // optional int32 rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllcombatRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllcombatRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllcombatRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllcombatRankData::MergeFrom(const AllcombatRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
    if (from.has_battlenumber()) {
      set_battlenumber(from.battlenumber());
    }
    if (from.has_sorce()) {
      set_sorce(from.sorce());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllcombatRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllcombatRankData::CopyFrom(const AllcombatRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllcombatRankData::IsInitialized() const {

  return true;
}

void AllcombatRankData::Swap(AllcombatRankData* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(battlenumber_, other->battlenumber_);
    std::swap(sorce_, other->sorce_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllcombatRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllcombatRankData_descriptor_;
  metadata.reflection = AllcombatRankData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
