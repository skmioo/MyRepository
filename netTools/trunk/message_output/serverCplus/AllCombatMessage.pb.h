// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllCombatMessage.proto

#ifndef PROTOBUF_AllCombatMessage_2eproto__INCLUDED
#define PROTOBUF_AllCombatMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllCombatMessage_2eproto();
void protobuf_AssignDesc_AllCombatMessage_2eproto();
void protobuf_ShutdownFile_AllCombatMessage_2eproto();

class AllCombatRegist;
class AllCombatRegistBack;
class ACombatTrans;
class MessageList;
class ACombatTransBack;
class MethodInvoteMsg;
class CGGetAllCombatView;
class GCGetAllCombatView;
class CGEnterAllCombat;
class GCEnterAllCombat;
class GCAllCombatReport;
class CGExitAllCombat;
class GCExitAllCombat;
class GCEnterCombatEndTime;
class AllRankRwd2;
class CGGetherBloodItem;
class GCChangeSorce;
class CGGetAllCombatRanks;
class GCGetAllCombatRanks;
class GCAllCombatEnd;
class CGGetAllRankDatas;
class GCGetAllRankDatas;
class AllcombatRankData;

// ===================================================================

class AllCombatRegist : public ::google::protobuf::Message {
 public:
  AllCombatRegist();
  virtual ~AllCombatRegist();

  AllCombatRegist(const AllCombatRegist& from);

  inline AllCombatRegist& operator=(const AllCombatRegist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllCombatRegist& default_instance();

  void Swap(AllCombatRegist* other);

  // implements Message ----------------------------------------------

  AllCombatRegist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllCombatRegist& from);
  void MergeFrom(const AllCombatRegist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 serverId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AllCombatRegist)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static AllCombatRegist* default_instance_;
};
// -------------------------------------------------------------------

class AllCombatRegistBack : public ::google::protobuf::Message {
 public:
  AllCombatRegistBack();
  virtual ~AllCombatRegistBack();

  AllCombatRegistBack(const AllCombatRegistBack& from);

  inline AllCombatRegistBack& operator=(const AllCombatRegistBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllCombatRegistBack& default_instance();

  void Swap(AllCombatRegistBack* other);

  // implements Message ----------------------------------------------

  AllCombatRegistBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllCombatRegistBack& from);
  void MergeFrom(const AllCombatRegistBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AllCombatRegistBack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static AllCombatRegistBack* default_instance_;
};
// -------------------------------------------------------------------

class ACombatTrans : public ::google::protobuf::Message {
 public:
  ACombatTrans();
  virtual ~ACombatTrans();

  ACombatTrans(const ACombatTrans& from);

  inline ACombatTrans& operator=(const ACombatTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACombatTrans& default_instance();

  void Swap(ACombatTrans* other);

  // implements Message ----------------------------------------------

  ACombatTrans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACombatTrans& from);
  void MergeFrom(const ACombatTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 transType = 1;
  inline bool has_transtype() const;
  inline void clear_transtype();
  static const int kTransTypeFieldNumber = 1;
  inline ::google::protobuf::int32 transtype() const;
  inline void set_transtype(::google::protobuf::int32 value);

  // repeated .MessageList innerPackets = 2;
  inline int innerpackets_size() const;
  inline void clear_innerpackets();
  static const int kInnerPacketsFieldNumber = 2;
  inline const ::MessageList& innerpackets(int index) const;
  inline ::MessageList* mutable_innerpackets(int index);
  inline ::MessageList* add_innerpackets();
  inline const ::google::protobuf::RepeatedPtrField< ::MessageList >&
      innerpackets() const;
  inline ::google::protobuf::RepeatedPtrField< ::MessageList >*
      mutable_innerpackets();

  // optional int64 startT = 3;
  inline bool has_startt() const;
  inline void clear_startt();
  static const int kStartTFieldNumber = 3;
  inline ::google::protobuf::int64 startt() const;
  inline void set_startt(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ACombatTrans)
 private:
  inline void set_has_transtype();
  inline void clear_has_transtype();
  inline void set_has_startt();
  inline void clear_has_startt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MessageList > innerpackets_;
  ::google::protobuf::int64 startt_;
  ::google::protobuf::int32 transtype_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static ACombatTrans* default_instance_;
};
// -------------------------------------------------------------------

class MessageList : public ::google::protobuf::Message {
 public:
  MessageList();
  virtual ~MessageList();

  MessageList(const MessageList& from);

  inline MessageList& operator=(const MessageList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageList& default_instance();

  void Swap(MessageList* other);

  // implements Message ----------------------------------------------

  MessageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageList& from);
  void MergeFrom(const MessageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes innerPackets = 1;
  inline bool has_innerpackets() const;
  inline void clear_innerpackets();
  static const int kInnerPacketsFieldNumber = 1;
  inline const ::std::string& innerpackets() const;
  inline void set_innerpackets(const ::std::string& value);
  inline void set_innerpackets(const char* value);
  inline void set_innerpackets(const void* value, size_t size);
  inline ::std::string* mutable_innerpackets();
  inline ::std::string* release_innerpackets();
  inline void set_allocated_innerpackets(::std::string* innerpackets);

  // @@protoc_insertion_point(class_scope:MessageList)
 private:
  inline void set_has_innerpackets();
  inline void clear_has_innerpackets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* innerpackets_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static MessageList* default_instance_;
};
// -------------------------------------------------------------------

class ACombatTransBack : public ::google::protobuf::Message {
 public:
  ACombatTransBack();
  virtual ~ACombatTransBack();

  ACombatTransBack(const ACombatTransBack& from);

  inline ACombatTransBack& operator=(const ACombatTransBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACombatTransBack& default_instance();

  void Swap(ACombatTransBack* other);

  // implements Message ----------------------------------------------

  ACombatTransBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACombatTransBack& from);
  void MergeFrom(const ACombatTransBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 transType = 1;
  inline bool has_transtype() const;
  inline void clear_transtype();
  static const int kTransTypeFieldNumber = 1;
  inline ::google::protobuf::int32 transtype() const;
  inline void set_transtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ACombatTransBack)
 private:
  inline void set_has_transtype();
  inline void clear_has_transtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 transtype_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static ACombatTransBack* default_instance_;
};
// -------------------------------------------------------------------

class MethodInvoteMsg : public ::google::protobuf::Message {
 public:
  MethodInvoteMsg();
  virtual ~MethodInvoteMsg();

  MethodInvoteMsg(const MethodInvoteMsg& from);

  inline MethodInvoteMsg& operator=(const MethodInvoteMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MethodInvoteMsg& default_instance();

  void Swap(MethodInvoteMsg* other);

  // implements Message ----------------------------------------------

  MethodInvoteMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MethodInvoteMsg& from);
  void MergeFrom(const MethodInvoteMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes innerPacket = 1;
  inline bool has_innerpacket() const;
  inline void clear_innerpacket();
  static const int kInnerPacketFieldNumber = 1;
  inline const ::std::string& innerpacket() const;
  inline void set_innerpacket(const ::std::string& value);
  inline void set_innerpacket(const char* value);
  inline void set_innerpacket(const void* value, size_t size);
  inline ::std::string* mutable_innerpacket();
  inline ::std::string* release_innerpacket();
  inline void set_allocated_innerpacket(::std::string* innerpacket);

  // @@protoc_insertion_point(class_scope:MethodInvoteMsg)
 private:
  inline void set_has_innerpacket();
  inline void clear_has_innerpacket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* innerpacket_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static MethodInvoteMsg* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAllCombatView : public ::google::protobuf::Message {
 public:
  CGGetAllCombatView();
  virtual ~CGGetAllCombatView();

  CGGetAllCombatView(const CGGetAllCombatView& from);

  inline CGGetAllCombatView& operator=(const CGGetAllCombatView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAllCombatView& default_instance();

  void Swap(CGGetAllCombatView* other);

  // implements Message ----------------------------------------------

  CGGetAllCombatView* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAllCombatView& from);
  void MergeFrom(const CGGetAllCombatView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGGetAllCombatView)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetAllCombatView* default_instance_;
};
// -------------------------------------------------------------------

class GCGetAllCombatView : public ::google::protobuf::Message {
 public:
  GCGetAllCombatView();
  virtual ~GCGetAllCombatView();

  GCGetAllCombatView(const GCGetAllCombatView& from);

  inline GCGetAllCombatView& operator=(const GCGetAllCombatView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetAllCombatView& default_instance();

  void Swap(GCGetAllCombatView* other);

  // implements Message ----------------------------------------------

  GCGetAllCombatView* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetAllCombatView& from);
  void MergeFrom(const GCGetAllCombatView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string actStartTime = 1;
  inline bool has_actstarttime() const;
  inline void clear_actstarttime();
  static const int kActStartTimeFieldNumber = 1;
  inline const ::std::string& actstarttime() const;
  inline void set_actstarttime(const ::std::string& value);
  inline void set_actstarttime(const char* value);
  inline void set_actstarttime(const char* value, size_t size);
  inline ::std::string* mutable_actstarttime();
  inline ::std::string* release_actstarttime();
  inline void set_allocated_actstarttime(::std::string* actstarttime);

  // optional string combatStartTime = 2;
  inline bool has_combatstarttime() const;
  inline void clear_combatstarttime();
  static const int kCombatStartTimeFieldNumber = 2;
  inline const ::std::string& combatstarttime() const;
  inline void set_combatstarttime(const ::std::string& value);
  inline void set_combatstarttime(const char* value);
  inline void set_combatstarttime(const char* value, size_t size);
  inline ::std::string* mutable_combatstarttime();
  inline ::std::string* release_combatstarttime();
  inline void set_allocated_combatstarttime(::std::string* combatstarttime);

  // optional int32 title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // optional string function = 5;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 5;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const char* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // optional string item = 6;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 6;
  inline const ::std::string& item() const;
  inline void set_item(const ::std::string& value);
  inline void set_item(const char* value);
  inline void set_item(const char* value, size_t size);
  inline ::std::string* mutable_item();
  inline ::std::string* release_item();
  inline void set_allocated_item(::std::string* item);

  // optional string rewardShow = 7;
  inline bool has_rewardshow() const;
  inline void clear_rewardshow();
  static const int kRewardShowFieldNumber = 7;
  inline const ::std::string& rewardshow() const;
  inline void set_rewardshow(const ::std::string& value);
  inline void set_rewardshow(const char* value);
  inline void set_rewardshow(const char* value, size_t size);
  inline ::std::string* mutable_rewardshow();
  inline ::std::string* release_rewardshow();
  inline void set_allocated_rewardshow(::std::string* rewardshow);

  // optional string notice = 8;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 8;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional int32 canEnter = 9;
  inline bool has_canenter() const;
  inline void clear_canenter();
  static const int kCanEnterFieldNumber = 9;
  inline ::google::protobuf::int32 canenter() const;
  inline void set_canenter(::google::protobuf::int32 value);

  // optional int32 sceneId = 10;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 10;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGetAllCombatView)
 private:
  inline void set_has_actstarttime();
  inline void clear_has_actstarttime();
  inline void set_has_combatstarttime();
  inline void clear_has_combatstarttime();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_rewardshow();
  inline void clear_has_rewardshow();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_canenter();
  inline void clear_has_canenter();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* actstarttime_;
  ::std::string* combatstarttime_;
  ::std::string* function_;
  ::std::string* item_;
  ::google::protobuf::int32 title_;
  ::google::protobuf::int32 canenter_;
  ::std::string* rewardshow_;
  ::std::string* notice_;
  ::google::protobuf::int32 sceneid_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetAllCombatView* default_instance_;
};
// -------------------------------------------------------------------

class CGEnterAllCombat : public ::google::protobuf::Message {
 public:
  CGEnterAllCombat();
  virtual ~CGEnterAllCombat();

  CGEnterAllCombat(const CGEnterAllCombat& from);

  inline CGEnterAllCombat& operator=(const CGEnterAllCombat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGEnterAllCombat& default_instance();

  void Swap(CGEnterAllCombat* other);

  // implements Message ----------------------------------------------

  CGEnterAllCombat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGEnterAllCombat& from);
  void MergeFrom(const CGEnterAllCombat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGEnterAllCombat)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGEnterAllCombat* default_instance_;
};
// -------------------------------------------------------------------

class GCEnterAllCombat : public ::google::protobuf::Message {
 public:
  GCEnterAllCombat();
  virtual ~GCEnterAllCombat();

  GCEnterAllCombat(const GCEnterAllCombat& from);

  inline GCEnterAllCombat& operator=(const GCEnterAllCombat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCEnterAllCombat& default_instance();

  void Swap(GCEnterAllCombat* other);

  // implements Message ----------------------------------------------

  GCEnterAllCombat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCEnterAllCombat& from);
  void MergeFrom(const GCEnterAllCombat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 actType = 1;
  inline bool has_acttype() const;
  inline void clear_acttype();
  static const int kActTypeFieldNumber = 1;
  inline ::google::protobuf::int32 acttype() const;
  inline void set_acttype(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // repeated .GCAllCombatReport reports = 4;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 4;
  inline const ::GCAllCombatReport& reports(int index) const;
  inline ::GCAllCombatReport* mutable_reports(int index);
  inline ::GCAllCombatReport* add_reports();
  inline const ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >&
      reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >*
      mutable_reports();

  // @@protoc_insertion_point(class_scope:GCEnterAllCombat)
 private:
  inline void set_has_acttype();
  inline void clear_has_acttype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 acttype_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport > reports_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCEnterAllCombat* default_instance_;
};
// -------------------------------------------------------------------

class GCAllCombatReport : public ::google::protobuf::Message {
 public:
  GCAllCombatReport();
  virtual ~GCAllCombatReport();

  GCAllCombatReport(const GCAllCombatReport& from);

  inline GCAllCombatReport& operator=(const GCAllCombatReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCAllCombatReport& default_instance();

  void Swap(GCAllCombatReport* other);

  // implements Message ----------------------------------------------

  GCAllCombatReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCAllCombatReport& from);
  void MergeFrom(const GCAllCombatReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gId = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGIdFieldNumber = 1;
  inline ::google::protobuf::int64 gid() const;
  inline void set_gid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 serverId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 killPersonNum = 4;
  inline bool has_killpersonnum() const;
  inline void clear_killpersonnum();
  static const int kKillPersonNumFieldNumber = 4;
  inline ::google::protobuf::int32 killpersonnum() const;
  inline void set_killpersonnum(::google::protobuf::int32 value);

  // optional int32 killedNum = 5;
  inline bool has_killednum() const;
  inline void clear_killednum();
  static const int kKilledNumFieldNumber = 5;
  inline ::google::protobuf::int32 killednum() const;
  inline void set_killednum(::google::protobuf::int32 value);

  // optional int32 sorce = 7;
  inline bool has_sorce() const;
  inline void clear_sorce();
  static const int kSorceFieldNumber = 7;
  inline ::google::protobuf::int32 sorce() const;
  inline void set_sorce(::google::protobuf::int32 value);

  // optional int32 rank = 8;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 8;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 maxKillNum = 9;
  inline bool has_maxkillnum() const;
  inline void clear_maxkillnum();
  static const int kMaxKillNumFieldNumber = 9;
  inline ::google::protobuf::int32 maxkillnum() const;
  inline void set_maxkillnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCAllCombatReport)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_killpersonnum();
  inline void clear_has_killpersonnum();
  inline void set_has_killednum();
  inline void clear_has_killednum();
  inline void set_has_sorce();
  inline void clear_has_sorce();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_maxkillnum();
  inline void clear_has_maxkillnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gid_;
  ::std::string* name_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 killpersonnum_;
  ::google::protobuf::int32 killednum_;
  ::google::protobuf::int32 sorce_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 maxkillnum_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCAllCombatReport* default_instance_;
};
// -------------------------------------------------------------------

class CGExitAllCombat : public ::google::protobuf::Message {
 public:
  CGExitAllCombat();
  virtual ~CGExitAllCombat();

  CGExitAllCombat(const CGExitAllCombat& from);

  inline CGExitAllCombat& operator=(const CGExitAllCombat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGExitAllCombat& default_instance();

  void Swap(CGExitAllCombat* other);

  // implements Message ----------------------------------------------

  CGExitAllCombat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGExitAllCombat& from);
  void MergeFrom(const CGExitAllCombat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGExitAllCombat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGExitAllCombat* default_instance_;
};
// -------------------------------------------------------------------

class GCExitAllCombat : public ::google::protobuf::Message {
 public:
  GCExitAllCombat();
  virtual ~GCExitAllCombat();

  GCExitAllCombat(const GCExitAllCombat& from);

  inline GCExitAllCombat& operator=(const GCExitAllCombat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCExitAllCombat& default_instance();

  void Swap(GCExitAllCombat* other);

  // implements Message ----------------------------------------------

  GCExitAllCombat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCExitAllCombat& from);
  void MergeFrom(const GCExitAllCombat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCExitAllCombat)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCExitAllCombat* default_instance_;
};
// -------------------------------------------------------------------

class GCEnterCombatEndTime : public ::google::protobuf::Message {
 public:
  GCEnterCombatEndTime();
  virtual ~GCEnterCombatEndTime();

  GCEnterCombatEndTime(const GCEnterCombatEndTime& from);

  inline GCEnterCombatEndTime& operator=(const GCEnterCombatEndTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCEnterCombatEndTime& default_instance();

  void Swap(GCEnterCombatEndTime* other);

  // implements Message ----------------------------------------------

  GCEnterCombatEndTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCEnterCombatEndTime& from);
  void MergeFrom(const GCEnterCombatEndTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 remainS = 1;
  inline bool has_remains() const;
  inline void clear_remains();
  static const int kRemainSFieldNumber = 1;
  inline ::google::protobuf::int64 remains() const;
  inline void set_remains(::google::protobuf::int64 value);

  // repeated .AllRankRwd2 rwds = 2;
  inline int rwds_size() const;
  inline void clear_rwds();
  static const int kRwdsFieldNumber = 2;
  inline const ::AllRankRwd2& rwds(int index) const;
  inline ::AllRankRwd2* mutable_rwds(int index);
  inline ::AllRankRwd2* add_rwds();
  inline const ::google::protobuf::RepeatedPtrField< ::AllRankRwd2 >&
      rwds() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllRankRwd2 >*
      mutable_rwds();

  // @@protoc_insertion_point(class_scope:GCEnterCombatEndTime)
 private:
  inline void set_has_remains();
  inline void clear_has_remains();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 remains_;
  ::google::protobuf::RepeatedPtrField< ::AllRankRwd2 > rwds_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCEnterCombatEndTime* default_instance_;
};
// -------------------------------------------------------------------

class AllRankRwd2 : public ::google::protobuf::Message {
 public:
  AllRankRwd2();
  virtual ~AllRankRwd2();

  AllRankRwd2(const AllRankRwd2& from);

  inline AllRankRwd2& operator=(const AllRankRwd2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllRankRwd2& default_instance();

  void Swap(AllRankRwd2* other);

  // implements Message ----------------------------------------------

  AllRankRwd2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllRankRwd2& from);
  void MergeFrom(const AllRankRwd2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline const ::std::string& stage() const;
  inline void set_stage(const ::std::string& value);
  inline void set_stage(const char* value);
  inline void set_stage(const char* value, size_t size);
  inline ::std::string* mutable_stage();
  inline ::std::string* release_stage();
  inline void set_allocated_stage(::std::string* stage);

  // optional string itemrwd = 2;
  inline bool has_itemrwd() const;
  inline void clear_itemrwd();
  static const int kItemrwdFieldNumber = 2;
  inline const ::std::string& itemrwd() const;
  inline void set_itemrwd(const ::std::string& value);
  inline void set_itemrwd(const char* value);
  inline void set_itemrwd(const char* value, size_t size);
  inline ::std::string* mutable_itemrwd();
  inline ::std::string* release_itemrwd();
  inline void set_allocated_itemrwd(::std::string* itemrwd);

  // @@protoc_insertion_point(class_scope:AllRankRwd2)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_itemrwd();
  inline void clear_has_itemrwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* stage_;
  ::std::string* itemrwd_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static AllRankRwd2* default_instance_;
};
// -------------------------------------------------------------------

class CGGetherBloodItem : public ::google::protobuf::Message {
 public:
  CGGetherBloodItem();
  virtual ~CGGetherBloodItem();

  CGGetherBloodItem(const CGGetherBloodItem& from);

  inline CGGetherBloodItem& operator=(const CGGetherBloodItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetherBloodItem& default_instance();

  void Swap(CGGetherBloodItem* other);

  // implements Message ----------------------------------------------

  CGGetherBloodItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetherBloodItem& from);
  void MergeFrom(const CGGetherBloodItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 objId = 1;
  inline bool has_objid() const;
  inline void clear_objid();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int64 objid() const;
  inline void set_objid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGGetherBloodItem)
 private:
  inline void set_has_objid();
  inline void clear_has_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 objid_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetherBloodItem* default_instance_;
};
// -------------------------------------------------------------------

class GCChangeSorce : public ::google::protobuf::Message {
 public:
  GCChangeSorce();
  virtual ~GCChangeSorce();

  GCChangeSorce(const GCChangeSorce& from);

  inline GCChangeSorce& operator=(const GCChangeSorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChangeSorce& default_instance();

  void Swap(GCChangeSorce* other);

  // implements Message ----------------------------------------------

  GCChangeSorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChangeSorce& from);
  void MergeFrom(const GCChangeSorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sorce = 7;
  inline bool has_sorce() const;
  inline void clear_sorce();
  static const int kSorceFieldNumber = 7;
  inline ::google::protobuf::int32 sorce() const;
  inline void set_sorce(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCChangeSorce)
 private:
  inline void set_has_sorce();
  inline void clear_has_sorce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sorce_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChangeSorce* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAllCombatRanks : public ::google::protobuf::Message {
 public:
  CGGetAllCombatRanks();
  virtual ~CGGetAllCombatRanks();

  CGGetAllCombatRanks(const CGGetAllCombatRanks& from);

  inline CGGetAllCombatRanks& operator=(const CGGetAllCombatRanks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAllCombatRanks& default_instance();

  void Swap(CGGetAllCombatRanks* other);

  // implements Message ----------------------------------------------

  CGGetAllCombatRanks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAllCombatRanks& from);
  void MergeFrom(const CGGetAllCombatRanks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGGetAllCombatRanks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetAllCombatRanks* default_instance_;
};
// -------------------------------------------------------------------

class GCGetAllCombatRanks : public ::google::protobuf::Message {
 public:
  GCGetAllCombatRanks();
  virtual ~GCGetAllCombatRanks();

  GCGetAllCombatRanks(const GCGetAllCombatRanks& from);

  inline GCGetAllCombatRanks& operator=(const GCGetAllCombatRanks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetAllCombatRanks& default_instance();

  void Swap(GCGetAllCombatRanks* other);

  // implements Message ----------------------------------------------

  GCGetAllCombatRanks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetAllCombatRanks& from);
  void MergeFrom(const GCGetAllCombatRanks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GCAllCombatReport reports = 1;
  inline int reports_size() const;
  inline void clear_reports();
  static const int kReportsFieldNumber = 1;
  inline const ::GCAllCombatReport& reports(int index) const;
  inline ::GCAllCombatReport* mutable_reports(int index);
  inline ::GCAllCombatReport* add_reports();
  inline const ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >&
      reports() const;
  inline ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >*
      mutable_reports();

  // optional .GCAllCombatReport my = 2;
  inline bool has_my() const;
  inline void clear_my();
  static const int kMyFieldNumber = 2;
  inline const ::GCAllCombatReport& my() const;
  inline ::GCAllCombatReport* mutable_my();
  inline ::GCAllCombatReport* release_my();
  inline void set_allocated_my(::GCAllCombatReport* my);

  // @@protoc_insertion_point(class_scope:GCGetAllCombatRanks)
 private:
  inline void set_has_my();
  inline void clear_has_my();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport > reports_;
  ::GCAllCombatReport* my_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetAllCombatRanks* default_instance_;
};
// -------------------------------------------------------------------

class GCAllCombatEnd : public ::google::protobuf::Message {
 public:
  GCAllCombatEnd();
  virtual ~GCAllCombatEnd();

  GCAllCombatEnd(const GCAllCombatEnd& from);

  inline GCAllCombatEnd& operator=(const GCAllCombatEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCAllCombatEnd& default_instance();

  void Swap(GCAllCombatEnd* other);

  // implements Message ----------------------------------------------

  GCAllCombatEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCAllCombatEnd& from);
  void MergeFrom(const GCAllCombatEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GCAllCombatEnd)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCAllCombatEnd* default_instance_;
};
// -------------------------------------------------------------------

class CGGetAllRankDatas : public ::google::protobuf::Message {
 public:
  CGGetAllRankDatas();
  virtual ~CGGetAllRankDatas();

  CGGetAllRankDatas(const CGGetAllRankDatas& from);

  inline CGGetAllRankDatas& operator=(const CGGetAllRankDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetAllRankDatas& default_instance();

  void Swap(CGGetAllRankDatas* other);

  // implements Message ----------------------------------------------

  CGGetAllRankDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetAllRankDatas& from);
  void MergeFrom(const CGGetAllRankDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGGetAllRankDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetAllRankDatas* default_instance_;
};
// -------------------------------------------------------------------

class GCGetAllRankDatas : public ::google::protobuf::Message {
 public:
  GCGetAllRankDatas();
  virtual ~GCGetAllRankDatas();

  GCGetAllRankDatas(const GCGetAllRankDatas& from);

  inline GCGetAllRankDatas& operator=(const GCGetAllRankDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetAllRankDatas& default_instance();

  void Swap(GCGetAllRankDatas* other);

  // implements Message ----------------------------------------------

  GCGetAllRankDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetAllRankDatas& from);
  void MergeFrom(const GCGetAllRankDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AllcombatRankData ranks = 1;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 1;
  inline const ::AllcombatRankData& ranks(int index) const;
  inline ::AllcombatRankData* mutable_ranks(int index);
  inline ::AllcombatRankData* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::AllcombatRankData >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllcombatRankData >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:GCGetAllRankDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AllcombatRankData > ranks_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetAllRankDatas* default_instance_;
};
// -------------------------------------------------------------------

class AllcombatRankData : public ::google::protobuf::Message {
 public:
  AllcombatRankData();
  virtual ~AllcombatRankData();

  AllcombatRankData(const AllcombatRankData& from);

  inline AllcombatRankData& operator=(const AllcombatRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllcombatRankData& default_instance();

  void Swap(AllcombatRankData* other);

  // implements Message ----------------------------------------------

  AllcombatRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllcombatRankData& from);
  void MergeFrom(const AllcombatRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gId = 1;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGIdFieldNumber = 1;
  inline ::google::protobuf::int64 gid() const;
  inline void set_gid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 serverId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional string serverName = 4;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServerNameFieldNumber = 4;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // optional int32 playerLv = 5;
  inline bool has_playerlv() const;
  inline void clear_playerlv();
  static const int kPlayerLvFieldNumber = 5;
  inline ::google::protobuf::int32 playerlv() const;
  inline void set_playerlv(::google::protobuf::int32 value);

  // optional int32 battleNumber = 6;
  inline bool has_battlenumber() const;
  inline void clear_battlenumber();
  static const int kBattleNumberFieldNumber = 6;
  inline ::google::protobuf::int32 battlenumber() const;
  inline void set_battlenumber(::google::protobuf::int32 value);

  // optional int32 sorce = 7;
  inline bool has_sorce() const;
  inline void clear_sorce();
  static const int kSorceFieldNumber = 7;
  inline ::google::protobuf::int32 sorce() const;
  inline void set_sorce(::google::protobuf::int32 value);

  // optional int32 rank = 8;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 8;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AllcombatRankData)
 private:
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_playerlv();
  inline void clear_has_playerlv();
  inline void set_has_battlenumber();
  inline void clear_has_battlenumber();
  inline void set_has_sorce();
  inline void clear_has_sorce();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gid_;
  ::std::string* name_;
  ::std::string* servername_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 playerlv_;
  ::google::protobuf::int32 battlenumber_;
  ::google::protobuf::int32 sorce_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_AllCombatMessage_2eproto();
  friend void protobuf_AssignDesc_AllCombatMessage_2eproto();
  friend void protobuf_ShutdownFile_AllCombatMessage_2eproto();

  void InitAsDefaultInstance();
  static AllcombatRankData* default_instance_;
};
// ===================================================================


// ===================================================================

// AllCombatRegist

// optional int32 serverId = 1;
inline bool AllCombatRegist::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllCombatRegist::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllCombatRegist::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllCombatRegist::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 AllCombatRegist::serverid() const {
  // @@protoc_insertion_point(field_get:AllCombatRegist.serverId)
  return serverid_;
}
inline void AllCombatRegist::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:AllCombatRegist.serverId)
}

// -------------------------------------------------------------------

// AllCombatRegistBack

// -------------------------------------------------------------------

// ACombatTrans

// optional int32 transType = 1;
inline bool ACombatTrans::has_transtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACombatTrans::set_has_transtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACombatTrans::clear_has_transtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACombatTrans::clear_transtype() {
  transtype_ = 0;
  clear_has_transtype();
}
inline ::google::protobuf::int32 ACombatTrans::transtype() const {
  // @@protoc_insertion_point(field_get:ACombatTrans.transType)
  return transtype_;
}
inline void ACombatTrans::set_transtype(::google::protobuf::int32 value) {
  set_has_transtype();
  transtype_ = value;
  // @@protoc_insertion_point(field_set:ACombatTrans.transType)
}

// repeated .MessageList innerPackets = 2;
inline int ACombatTrans::innerpackets_size() const {
  return innerpackets_.size();
}
inline void ACombatTrans::clear_innerpackets() {
  innerpackets_.Clear();
}
inline const ::MessageList& ACombatTrans::innerpackets(int index) const {
  // @@protoc_insertion_point(field_get:ACombatTrans.innerPackets)
  return innerpackets_.Get(index);
}
inline ::MessageList* ACombatTrans::mutable_innerpackets(int index) {
  // @@protoc_insertion_point(field_mutable:ACombatTrans.innerPackets)
  return innerpackets_.Mutable(index);
}
inline ::MessageList* ACombatTrans::add_innerpackets() {
  // @@protoc_insertion_point(field_add:ACombatTrans.innerPackets)
  return innerpackets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MessageList >&
ACombatTrans::innerpackets() const {
  // @@protoc_insertion_point(field_list:ACombatTrans.innerPackets)
  return innerpackets_;
}
inline ::google::protobuf::RepeatedPtrField< ::MessageList >*
ACombatTrans::mutable_innerpackets() {
  // @@protoc_insertion_point(field_mutable_list:ACombatTrans.innerPackets)
  return &innerpackets_;
}

// optional int64 startT = 3;
inline bool ACombatTrans::has_startt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ACombatTrans::set_has_startt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ACombatTrans::clear_has_startt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ACombatTrans::clear_startt() {
  startt_ = GOOGLE_LONGLONG(0);
  clear_has_startt();
}
inline ::google::protobuf::int64 ACombatTrans::startt() const {
  // @@protoc_insertion_point(field_get:ACombatTrans.startT)
  return startt_;
}
inline void ACombatTrans::set_startt(::google::protobuf::int64 value) {
  set_has_startt();
  startt_ = value;
  // @@protoc_insertion_point(field_set:ACombatTrans.startT)
}

// -------------------------------------------------------------------

// MessageList

// optional bytes innerPackets = 1;
inline bool MessageList::has_innerpackets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageList::set_has_innerpackets() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageList::clear_has_innerpackets() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageList::clear_innerpackets() {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_->clear();
  }
  clear_has_innerpackets();
}
inline const ::std::string& MessageList::innerpackets() const {
  // @@protoc_insertion_point(field_get:MessageList.innerPackets)
  return *innerpackets_;
}
inline void MessageList::set_innerpackets(const ::std::string& value) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(value);
  // @@protoc_insertion_point(field_set:MessageList.innerPackets)
}
inline void MessageList::set_innerpackets(const char* value) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageList.innerPackets)
}
inline void MessageList::set_innerpackets(const void* value, size_t size) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageList.innerPackets)
}
inline ::std::string* MessageList::mutable_innerpackets() {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageList.innerPackets)
  return innerpackets_;
}
inline ::std::string* MessageList::release_innerpackets() {
  clear_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = innerpackets_;
    innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageList::set_allocated_innerpackets(::std::string* innerpackets) {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpackets_;
  }
  if (innerpackets) {
    set_has_innerpackets();
    innerpackets_ = innerpackets;
  } else {
    clear_has_innerpackets();
    innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageList.innerPackets)
}

// -------------------------------------------------------------------

// ACombatTransBack

// optional int32 transType = 1;
inline bool ACombatTransBack::has_transtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ACombatTransBack::set_has_transtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ACombatTransBack::clear_has_transtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ACombatTransBack::clear_transtype() {
  transtype_ = 0;
  clear_has_transtype();
}
inline ::google::protobuf::int32 ACombatTransBack::transtype() const {
  // @@protoc_insertion_point(field_get:ACombatTransBack.transType)
  return transtype_;
}
inline void ACombatTransBack::set_transtype(::google::protobuf::int32 value) {
  set_has_transtype();
  transtype_ = value;
  // @@protoc_insertion_point(field_set:ACombatTransBack.transType)
}

// -------------------------------------------------------------------

// MethodInvoteMsg

// optional bytes innerPacket = 1;
inline bool MethodInvoteMsg::has_innerpacket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MethodInvoteMsg::set_has_innerpacket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MethodInvoteMsg::clear_has_innerpacket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MethodInvoteMsg::clear_innerpacket() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpacket_->clear();
  }
  clear_has_innerpacket();
}
inline const ::std::string& MethodInvoteMsg::innerpacket() const {
  // @@protoc_insertion_point(field_get:MethodInvoteMsg.innerPacket)
  return *innerpacket_;
}
inline void MethodInvoteMsg::set_innerpacket(const ::std::string& value) {
  set_has_innerpacket();
  if (innerpacket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpacket_ = new ::std::string;
  }
  innerpacket_->assign(value);
  // @@protoc_insertion_point(field_set:MethodInvoteMsg.innerPacket)
}
inline void MethodInvoteMsg::set_innerpacket(const char* value) {
  set_has_innerpacket();
  if (innerpacket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpacket_ = new ::std::string;
  }
  innerpacket_->assign(value);
  // @@protoc_insertion_point(field_set_char:MethodInvoteMsg.innerPacket)
}
inline void MethodInvoteMsg::set_innerpacket(const void* value, size_t size) {
  set_has_innerpacket();
  if (innerpacket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpacket_ = new ::std::string;
  }
  innerpacket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MethodInvoteMsg.innerPacket)
}
inline ::std::string* MethodInvoteMsg::mutable_innerpacket() {
  set_has_innerpacket();
  if (innerpacket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpacket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MethodInvoteMsg.innerPacket)
  return innerpacket_;
}
inline ::std::string* MethodInvoteMsg::release_innerpacket() {
  clear_has_innerpacket();
  if (innerpacket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = innerpacket_;
    innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MethodInvoteMsg::set_allocated_innerpacket(::std::string* innerpacket) {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (innerpacket) {
    set_has_innerpacket();
    innerpacket_ = innerpacket;
  } else {
    clear_has_innerpacket();
    innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MethodInvoteMsg.innerPacket)
}

// -------------------------------------------------------------------

// CGGetAllCombatView

// -------------------------------------------------------------------

// GCGetAllCombatView

// optional string actStartTime = 1;
inline bool GCGetAllCombatView::has_actstarttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGetAllCombatView::set_has_actstarttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGetAllCombatView::clear_has_actstarttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGetAllCombatView::clear_actstarttime() {
  if (actstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    actstarttime_->clear();
  }
  clear_has_actstarttime();
}
inline const ::std::string& GCGetAllCombatView::actstarttime() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.actStartTime)
  return *actstarttime_;
}
inline void GCGetAllCombatView::set_actstarttime(const ::std::string& value) {
  set_has_actstarttime();
  if (actstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    actstarttime_ = new ::std::string;
  }
  actstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.actStartTime)
}
inline void GCGetAllCombatView::set_actstarttime(const char* value) {
  set_has_actstarttime();
  if (actstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    actstarttime_ = new ::std::string;
  }
  actstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.actStartTime)
}
inline void GCGetAllCombatView::set_actstarttime(const char* value, size_t size) {
  set_has_actstarttime();
  if (actstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    actstarttime_ = new ::std::string;
  }
  actstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.actStartTime)
}
inline ::std::string* GCGetAllCombatView::mutable_actstarttime() {
  set_has_actstarttime();
  if (actstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    actstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.actStartTime)
  return actstarttime_;
}
inline ::std::string* GCGetAllCombatView::release_actstarttime() {
  clear_has_actstarttime();
  if (actstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = actstarttime_;
    actstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_actstarttime(::std::string* actstarttime) {
  if (actstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actstarttime_;
  }
  if (actstarttime) {
    set_has_actstarttime();
    actstarttime_ = actstarttime;
  } else {
    clear_has_actstarttime();
    actstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.actStartTime)
}

// optional string combatStartTime = 2;
inline bool GCGetAllCombatView::has_combatstarttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGetAllCombatView::set_has_combatstarttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGetAllCombatView::clear_has_combatstarttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGetAllCombatView::clear_combatstarttime() {
  if (combatstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combatstarttime_->clear();
  }
  clear_has_combatstarttime();
}
inline const ::std::string& GCGetAllCombatView::combatstarttime() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.combatStartTime)
  return *combatstarttime_;
}
inline void GCGetAllCombatView::set_combatstarttime(const ::std::string& value) {
  set_has_combatstarttime();
  if (combatstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combatstarttime_ = new ::std::string;
  }
  combatstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.combatStartTime)
}
inline void GCGetAllCombatView::set_combatstarttime(const char* value) {
  set_has_combatstarttime();
  if (combatstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combatstarttime_ = new ::std::string;
  }
  combatstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.combatStartTime)
}
inline void GCGetAllCombatView::set_combatstarttime(const char* value, size_t size) {
  set_has_combatstarttime();
  if (combatstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combatstarttime_ = new ::std::string;
  }
  combatstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.combatStartTime)
}
inline ::std::string* GCGetAllCombatView::mutable_combatstarttime() {
  set_has_combatstarttime();
  if (combatstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combatstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.combatStartTime)
  return combatstarttime_;
}
inline ::std::string* GCGetAllCombatView::release_combatstarttime() {
  clear_has_combatstarttime();
  if (combatstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = combatstarttime_;
    combatstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_combatstarttime(::std::string* combatstarttime) {
  if (combatstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combatstarttime_;
  }
  if (combatstarttime) {
    set_has_combatstarttime();
    combatstarttime_ = combatstarttime;
  } else {
    clear_has_combatstarttime();
    combatstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.combatStartTime)
}

// optional int32 title = 4;
inline bool GCGetAllCombatView::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGetAllCombatView::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGetAllCombatView::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGetAllCombatView::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 GCGetAllCombatView::title() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.title)
  return title_;
}
inline void GCGetAllCombatView::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.title)
}

// optional string function = 5;
inline bool GCGetAllCombatView::has_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCGetAllCombatView::set_has_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCGetAllCombatView::clear_has_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCGetAllCombatView::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& GCGetAllCombatView::function() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.function)
  return *function_;
}
inline void GCGetAllCombatView::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.function)
}
inline void GCGetAllCombatView::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.function)
}
inline void GCGetAllCombatView::set_function(const char* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.function)
}
inline ::std::string* GCGetAllCombatView::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.function)
  return function_;
}
inline ::std::string* GCGetAllCombatView::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.function)
}

// optional string item = 6;
inline bool GCGetAllCombatView::has_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCGetAllCombatView::set_has_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCGetAllCombatView::clear_has_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCGetAllCombatView::clear_item() {
  if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_->clear();
  }
  clear_has_item();
}
inline const ::std::string& GCGetAllCombatView::item() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.item)
  return *item_;
}
inline void GCGetAllCombatView::set_item(const ::std::string& value) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_ = new ::std::string;
  }
  item_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.item)
}
inline void GCGetAllCombatView::set_item(const char* value) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_ = new ::std::string;
  }
  item_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.item)
}
inline void GCGetAllCombatView::set_item(const char* value, size_t size) {
  set_has_item();
  if (item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_ = new ::std::string;
  }
  item_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.item)
}
inline ::std::string* GCGetAllCombatView::mutable_item() {
  set_has_item();
  if (item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    item_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.item)
  return item_;
}
inline ::std::string* GCGetAllCombatView::release_item() {
  clear_has_item();
  if (item_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = item_;
    item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_item(::std::string* item) {
  if (item_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete item_;
  }
  if (item) {
    set_has_item();
    item_ = item;
  } else {
    clear_has_item();
    item_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.item)
}

// optional string rewardShow = 7;
inline bool GCGetAllCombatView::has_rewardshow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCGetAllCombatView::set_has_rewardshow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCGetAllCombatView::clear_has_rewardshow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCGetAllCombatView::clear_rewardshow() {
  if (rewardshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardshow_->clear();
  }
  clear_has_rewardshow();
}
inline const ::std::string& GCGetAllCombatView::rewardshow() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.rewardShow)
  return *rewardshow_;
}
inline void GCGetAllCombatView::set_rewardshow(const ::std::string& value) {
  set_has_rewardshow();
  if (rewardshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardshow_ = new ::std::string;
  }
  rewardshow_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.rewardShow)
}
inline void GCGetAllCombatView::set_rewardshow(const char* value) {
  set_has_rewardshow();
  if (rewardshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardshow_ = new ::std::string;
  }
  rewardshow_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.rewardShow)
}
inline void GCGetAllCombatView::set_rewardshow(const char* value, size_t size) {
  set_has_rewardshow();
  if (rewardshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardshow_ = new ::std::string;
  }
  rewardshow_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.rewardShow)
}
inline ::std::string* GCGetAllCombatView::mutable_rewardshow() {
  set_has_rewardshow();
  if (rewardshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewardshow_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.rewardShow)
  return rewardshow_;
}
inline ::std::string* GCGetAllCombatView::release_rewardshow() {
  clear_has_rewardshow();
  if (rewardshow_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewardshow_;
    rewardshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_rewardshow(::std::string* rewardshow) {
  if (rewardshow_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardshow_;
  }
  if (rewardshow) {
    set_has_rewardshow();
    rewardshow_ = rewardshow;
  } else {
    clear_has_rewardshow();
    rewardshow_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.rewardShow)
}

// optional string notice = 8;
inline bool GCGetAllCombatView::has_notice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCGetAllCombatView::set_has_notice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCGetAllCombatView::clear_has_notice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCGetAllCombatView::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GCGetAllCombatView::notice() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.notice)
  return *notice_;
}
inline void GCGetAllCombatView::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.notice)
}
inline void GCGetAllCombatView::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetAllCombatView.notice)
}
inline void GCGetAllCombatView::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetAllCombatView.notice)
}
inline ::std::string* GCGetAllCombatView::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatView.notice)
  return notice_;
}
inline ::std::string* GCGetAllCombatView::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCGetAllCombatView::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatView.notice)
}

// optional int32 canEnter = 9;
inline bool GCGetAllCombatView::has_canenter() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCGetAllCombatView::set_has_canenter() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCGetAllCombatView::clear_has_canenter() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCGetAllCombatView::clear_canenter() {
  canenter_ = 0;
  clear_has_canenter();
}
inline ::google::protobuf::int32 GCGetAllCombatView::canenter() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.canEnter)
  return canenter_;
}
inline void GCGetAllCombatView::set_canenter(::google::protobuf::int32 value) {
  set_has_canenter();
  canenter_ = value;
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.canEnter)
}

// optional int32 sceneId = 10;
inline bool GCGetAllCombatView::has_sceneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCGetAllCombatView::set_has_sceneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCGetAllCombatView::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCGetAllCombatView::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
}
inline ::google::protobuf::int32 GCGetAllCombatView::sceneid() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatView.sceneId)
  return sceneid_;
}
inline void GCGetAllCombatView::set_sceneid(::google::protobuf::int32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:GCGetAllCombatView.sceneId)
}

// -------------------------------------------------------------------

// CGEnterAllCombat

// optional int32 type = 1;
inline bool CGEnterAllCombat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGEnterAllCombat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGEnterAllCombat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGEnterAllCombat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGEnterAllCombat::type() const {
  // @@protoc_insertion_point(field_get:CGEnterAllCombat.type)
  return type_;
}
inline void CGEnterAllCombat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGEnterAllCombat.type)
}

// -------------------------------------------------------------------

// GCEnterAllCombat

// optional int32 actType = 1;
inline bool GCEnterAllCombat::has_acttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCEnterAllCombat::set_has_acttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCEnterAllCombat::clear_has_acttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCEnterAllCombat::clear_acttype() {
  acttype_ = 0;
  clear_has_acttype();
}
inline ::google::protobuf::int32 GCEnterAllCombat::acttype() const {
  // @@protoc_insertion_point(field_get:GCEnterAllCombat.actType)
  return acttype_;
}
inline void GCEnterAllCombat::set_acttype(::google::protobuf::int32 value) {
  set_has_acttype();
  acttype_ = value;
  // @@protoc_insertion_point(field_set:GCEnterAllCombat.actType)
}

// optional string ip = 2;
inline bool GCEnterAllCombat::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCEnterAllCombat::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCEnterAllCombat::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCEnterAllCombat::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GCEnterAllCombat::ip() const {
  // @@protoc_insertion_point(field_get:GCEnterAllCombat.ip)
  return *ip_;
}
inline void GCEnterAllCombat::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:GCEnterAllCombat.ip)
}
inline void GCEnterAllCombat::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCEnterAllCombat.ip)
}
inline void GCEnterAllCombat::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCEnterAllCombat.ip)
}
inline ::std::string* GCEnterAllCombat::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCEnterAllCombat.ip)
  return ip_;
}
inline ::std::string* GCEnterAllCombat::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCEnterAllCombat::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCEnterAllCombat.ip)
}

// optional int32 port = 3;
inline bool GCEnterAllCombat::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCEnterAllCombat::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCEnterAllCombat::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCEnterAllCombat::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GCEnterAllCombat::port() const {
  // @@protoc_insertion_point(field_get:GCEnterAllCombat.port)
  return port_;
}
inline void GCEnterAllCombat::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:GCEnterAllCombat.port)
}

// repeated .GCAllCombatReport reports = 4;
inline int GCEnterAllCombat::reports_size() const {
  return reports_.size();
}
inline void GCEnterAllCombat::clear_reports() {
  reports_.Clear();
}
inline const ::GCAllCombatReport& GCEnterAllCombat::reports(int index) const {
  // @@protoc_insertion_point(field_get:GCEnterAllCombat.reports)
  return reports_.Get(index);
}
inline ::GCAllCombatReport* GCEnterAllCombat::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:GCEnterAllCombat.reports)
  return reports_.Mutable(index);
}
inline ::GCAllCombatReport* GCEnterAllCombat::add_reports() {
  // @@protoc_insertion_point(field_add:GCEnterAllCombat.reports)
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >&
GCEnterAllCombat::reports() const {
  // @@protoc_insertion_point(field_list:GCEnterAllCombat.reports)
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >*
GCEnterAllCombat::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:GCEnterAllCombat.reports)
  return &reports_;
}

// -------------------------------------------------------------------

// GCAllCombatReport

// optional int64 gId = 1;
inline bool GCAllCombatReport::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCAllCombatReport::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCAllCombatReport::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCAllCombatReport::clear_gid() {
  gid_ = GOOGLE_LONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::int64 GCAllCombatReport::gid() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.gId)
  return gid_;
}
inline void GCAllCombatReport::set_gid(::google::protobuf::int64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.gId)
}

// optional string name = 2;
inline bool GCAllCombatReport::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCAllCombatReport::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCAllCombatReport::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCAllCombatReport::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GCAllCombatReport::name() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.name)
  return *name_;
}
inline void GCAllCombatReport::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:GCAllCombatReport.name)
}
inline void GCAllCombatReport::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCAllCombatReport.name)
}
inline void GCAllCombatReport::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCAllCombatReport.name)
}
inline ::std::string* GCAllCombatReport::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCAllCombatReport.name)
  return name_;
}
inline ::std::string* GCAllCombatReport::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCAllCombatReport::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCAllCombatReport.name)
}

// optional int32 serverId = 3;
inline bool GCAllCombatReport::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCAllCombatReport::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCAllCombatReport::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCAllCombatReport::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GCAllCombatReport::serverid() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.serverId)
  return serverid_;
}
inline void GCAllCombatReport::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.serverId)
}

// optional int32 killPersonNum = 4;
inline bool GCAllCombatReport::has_killpersonnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCAllCombatReport::set_has_killpersonnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCAllCombatReport::clear_has_killpersonnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCAllCombatReport::clear_killpersonnum() {
  killpersonnum_ = 0;
  clear_has_killpersonnum();
}
inline ::google::protobuf::int32 GCAllCombatReport::killpersonnum() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.killPersonNum)
  return killpersonnum_;
}
inline void GCAllCombatReport::set_killpersonnum(::google::protobuf::int32 value) {
  set_has_killpersonnum();
  killpersonnum_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.killPersonNum)
}

// optional int32 killedNum = 5;
inline bool GCAllCombatReport::has_killednum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCAllCombatReport::set_has_killednum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCAllCombatReport::clear_has_killednum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCAllCombatReport::clear_killednum() {
  killednum_ = 0;
  clear_has_killednum();
}
inline ::google::protobuf::int32 GCAllCombatReport::killednum() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.killedNum)
  return killednum_;
}
inline void GCAllCombatReport::set_killednum(::google::protobuf::int32 value) {
  set_has_killednum();
  killednum_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.killedNum)
}

// optional int32 sorce = 7;
inline bool GCAllCombatReport::has_sorce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCAllCombatReport::set_has_sorce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCAllCombatReport::clear_has_sorce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCAllCombatReport::clear_sorce() {
  sorce_ = 0;
  clear_has_sorce();
}
inline ::google::protobuf::int32 GCAllCombatReport::sorce() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.sorce)
  return sorce_;
}
inline void GCAllCombatReport::set_sorce(::google::protobuf::int32 value) {
  set_has_sorce();
  sorce_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.sorce)
}

// optional int32 rank = 8;
inline bool GCAllCombatReport::has_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCAllCombatReport::set_has_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCAllCombatReport::clear_has_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCAllCombatReport::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GCAllCombatReport::rank() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.rank)
  return rank_;
}
inline void GCAllCombatReport::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.rank)
}

// optional int32 maxKillNum = 9;
inline bool GCAllCombatReport::has_maxkillnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCAllCombatReport::set_has_maxkillnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCAllCombatReport::clear_has_maxkillnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCAllCombatReport::clear_maxkillnum() {
  maxkillnum_ = 0;
  clear_has_maxkillnum();
}
inline ::google::protobuf::int32 GCAllCombatReport::maxkillnum() const {
  // @@protoc_insertion_point(field_get:GCAllCombatReport.maxKillNum)
  return maxkillnum_;
}
inline void GCAllCombatReport::set_maxkillnum(::google::protobuf::int32 value) {
  set_has_maxkillnum();
  maxkillnum_ = value;
  // @@protoc_insertion_point(field_set:GCAllCombatReport.maxKillNum)
}

// -------------------------------------------------------------------

// CGExitAllCombat

// -------------------------------------------------------------------

// GCExitAllCombat

// optional int32 type = 1;
inline bool GCExitAllCombat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCExitAllCombat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCExitAllCombat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCExitAllCombat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCExitAllCombat::type() const {
  // @@protoc_insertion_point(field_get:GCExitAllCombat.type)
  return type_;
}
inline void GCExitAllCombat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCExitAllCombat.type)
}

// -------------------------------------------------------------------

// GCEnterCombatEndTime

// optional int64 remainS = 1;
inline bool GCEnterCombatEndTime::has_remains() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCEnterCombatEndTime::set_has_remains() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCEnterCombatEndTime::clear_has_remains() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCEnterCombatEndTime::clear_remains() {
  remains_ = GOOGLE_LONGLONG(0);
  clear_has_remains();
}
inline ::google::protobuf::int64 GCEnterCombatEndTime::remains() const {
  // @@protoc_insertion_point(field_get:GCEnterCombatEndTime.remainS)
  return remains_;
}
inline void GCEnterCombatEndTime::set_remains(::google::protobuf::int64 value) {
  set_has_remains();
  remains_ = value;
  // @@protoc_insertion_point(field_set:GCEnterCombatEndTime.remainS)
}

// repeated .AllRankRwd2 rwds = 2;
inline int GCEnterCombatEndTime::rwds_size() const {
  return rwds_.size();
}
inline void GCEnterCombatEndTime::clear_rwds() {
  rwds_.Clear();
}
inline const ::AllRankRwd2& GCEnterCombatEndTime::rwds(int index) const {
  // @@protoc_insertion_point(field_get:GCEnterCombatEndTime.rwds)
  return rwds_.Get(index);
}
inline ::AllRankRwd2* GCEnterCombatEndTime::mutable_rwds(int index) {
  // @@protoc_insertion_point(field_mutable:GCEnterCombatEndTime.rwds)
  return rwds_.Mutable(index);
}
inline ::AllRankRwd2* GCEnterCombatEndTime::add_rwds() {
  // @@protoc_insertion_point(field_add:GCEnterCombatEndTime.rwds)
  return rwds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllRankRwd2 >&
GCEnterCombatEndTime::rwds() const {
  // @@protoc_insertion_point(field_list:GCEnterCombatEndTime.rwds)
  return rwds_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllRankRwd2 >*
GCEnterCombatEndTime::mutable_rwds() {
  // @@protoc_insertion_point(field_mutable_list:GCEnterCombatEndTime.rwds)
  return &rwds_;
}

// -------------------------------------------------------------------

// AllRankRwd2

// optional string stage = 1;
inline bool AllRankRwd2::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllRankRwd2::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllRankRwd2::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllRankRwd2::clear_stage() {
  if (stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_->clear();
  }
  clear_has_stage();
}
inline const ::std::string& AllRankRwd2::stage() const {
  // @@protoc_insertion_point(field_get:AllRankRwd2.stage)
  return *stage_;
}
inline void AllRankRwd2::set_stage(const ::std::string& value) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_ = new ::std::string;
  }
  stage_->assign(value);
  // @@protoc_insertion_point(field_set:AllRankRwd2.stage)
}
inline void AllRankRwd2::set_stage(const char* value) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_ = new ::std::string;
  }
  stage_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllRankRwd2.stage)
}
inline void AllRankRwd2::set_stage(const char* value, size_t size) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_ = new ::std::string;
  }
  stage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllRankRwd2.stage)
}
inline ::std::string* AllRankRwd2::mutable_stage() {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    stage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllRankRwd2.stage)
  return stage_;
}
inline ::std::string* AllRankRwd2::release_stage() {
  clear_has_stage();
  if (stage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = stage_;
    stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllRankRwd2::set_allocated_stage(::std::string* stage) {
  if (stage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stage_;
  }
  if (stage) {
    set_has_stage();
    stage_ = stage;
  } else {
    clear_has_stage();
    stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllRankRwd2.stage)
}

// optional string itemrwd = 2;
inline bool AllRankRwd2::has_itemrwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllRankRwd2::set_has_itemrwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllRankRwd2::clear_has_itemrwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllRankRwd2::clear_itemrwd() {
  if (itemrwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemrwd_->clear();
  }
  clear_has_itemrwd();
}
inline const ::std::string& AllRankRwd2::itemrwd() const {
  // @@protoc_insertion_point(field_get:AllRankRwd2.itemrwd)
  return *itemrwd_;
}
inline void AllRankRwd2::set_itemrwd(const ::std::string& value) {
  set_has_itemrwd();
  if (itemrwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemrwd_ = new ::std::string;
  }
  itemrwd_->assign(value);
  // @@protoc_insertion_point(field_set:AllRankRwd2.itemrwd)
}
inline void AllRankRwd2::set_itemrwd(const char* value) {
  set_has_itemrwd();
  if (itemrwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemrwd_ = new ::std::string;
  }
  itemrwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllRankRwd2.itemrwd)
}
inline void AllRankRwd2::set_itemrwd(const char* value, size_t size) {
  set_has_itemrwd();
  if (itemrwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemrwd_ = new ::std::string;
  }
  itemrwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllRankRwd2.itemrwd)
}
inline ::std::string* AllRankRwd2::mutable_itemrwd() {
  set_has_itemrwd();
  if (itemrwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    itemrwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllRankRwd2.itemrwd)
  return itemrwd_;
}
inline ::std::string* AllRankRwd2::release_itemrwd() {
  clear_has_itemrwd();
  if (itemrwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = itemrwd_;
    itemrwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllRankRwd2::set_allocated_itemrwd(::std::string* itemrwd) {
  if (itemrwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemrwd_;
  }
  if (itemrwd) {
    set_has_itemrwd();
    itemrwd_ = itemrwd;
  } else {
    clear_has_itemrwd();
    itemrwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllRankRwd2.itemrwd)
}

// -------------------------------------------------------------------

// CGGetherBloodItem

// optional int64 objId = 1;
inline bool CGGetherBloodItem::has_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetherBloodItem::set_has_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetherBloodItem::clear_has_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetherBloodItem::clear_objid() {
  objid_ = GOOGLE_LONGLONG(0);
  clear_has_objid();
}
inline ::google::protobuf::int64 CGGetherBloodItem::objid() const {
  // @@protoc_insertion_point(field_get:CGGetherBloodItem.objId)
  return objid_;
}
inline void CGGetherBloodItem::set_objid(::google::protobuf::int64 value) {
  set_has_objid();
  objid_ = value;
  // @@protoc_insertion_point(field_set:CGGetherBloodItem.objId)
}

// -------------------------------------------------------------------

// GCChangeSorce

// optional int32 sorce = 7;
inline bool GCChangeSorce::has_sorce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChangeSorce::set_has_sorce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChangeSorce::clear_has_sorce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChangeSorce::clear_sorce() {
  sorce_ = 0;
  clear_has_sorce();
}
inline ::google::protobuf::int32 GCChangeSorce::sorce() const {
  // @@protoc_insertion_point(field_get:GCChangeSorce.sorce)
  return sorce_;
}
inline void GCChangeSorce::set_sorce(::google::protobuf::int32 value) {
  set_has_sorce();
  sorce_ = value;
  // @@protoc_insertion_point(field_set:GCChangeSorce.sorce)
}

// -------------------------------------------------------------------

// CGGetAllCombatRanks

// -------------------------------------------------------------------

// GCGetAllCombatRanks

// repeated .GCAllCombatReport reports = 1;
inline int GCGetAllCombatRanks::reports_size() const {
  return reports_.size();
}
inline void GCGetAllCombatRanks::clear_reports() {
  reports_.Clear();
}
inline const ::GCAllCombatReport& GCGetAllCombatRanks::reports(int index) const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatRanks.reports)
  return reports_.Get(index);
}
inline ::GCAllCombatReport* GCGetAllCombatRanks::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatRanks.reports)
  return reports_.Mutable(index);
}
inline ::GCAllCombatReport* GCGetAllCombatRanks::add_reports() {
  // @@protoc_insertion_point(field_add:GCGetAllCombatRanks.reports)
  return reports_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >&
GCGetAllCombatRanks::reports() const {
  // @@protoc_insertion_point(field_list:GCGetAllCombatRanks.reports)
  return reports_;
}
inline ::google::protobuf::RepeatedPtrField< ::GCAllCombatReport >*
GCGetAllCombatRanks::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:GCGetAllCombatRanks.reports)
  return &reports_;
}

// optional .GCAllCombatReport my = 2;
inline bool GCGetAllCombatRanks::has_my() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGetAllCombatRanks::set_has_my() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGetAllCombatRanks::clear_has_my() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGetAllCombatRanks::clear_my() {
  if (my_ != NULL) my_->::GCAllCombatReport::Clear();
  clear_has_my();
}
inline const ::GCAllCombatReport& GCGetAllCombatRanks::my() const {
  // @@protoc_insertion_point(field_get:GCGetAllCombatRanks.my)
  return my_ != NULL ? *my_ : *default_instance_->my_;
}
inline ::GCAllCombatReport* GCGetAllCombatRanks::mutable_my() {
  set_has_my();
  if (my_ == NULL) my_ = new ::GCAllCombatReport;
  // @@protoc_insertion_point(field_mutable:GCGetAllCombatRanks.my)
  return my_;
}
inline ::GCAllCombatReport* GCGetAllCombatRanks::release_my() {
  clear_has_my();
  ::GCAllCombatReport* temp = my_;
  my_ = NULL;
  return temp;
}
inline void GCGetAllCombatRanks::set_allocated_my(::GCAllCombatReport* my) {
  delete my_;
  my_ = my;
  if (my) {
    set_has_my();
  } else {
    clear_has_my();
  }
  // @@protoc_insertion_point(field_set_allocated:GCGetAllCombatRanks.my)
}

// -------------------------------------------------------------------

// GCAllCombatEnd

// -------------------------------------------------------------------

// CGGetAllRankDatas

// -------------------------------------------------------------------

// GCGetAllRankDatas

// repeated .AllcombatRankData ranks = 1;
inline int GCGetAllRankDatas::ranks_size() const {
  return ranks_.size();
}
inline void GCGetAllRankDatas::clear_ranks() {
  ranks_.Clear();
}
inline const ::AllcombatRankData& GCGetAllRankDatas::ranks(int index) const {
  // @@protoc_insertion_point(field_get:GCGetAllRankDatas.ranks)
  return ranks_.Get(index);
}
inline ::AllcombatRankData* GCGetAllRankDatas::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetAllRankDatas.ranks)
  return ranks_.Mutable(index);
}
inline ::AllcombatRankData* GCGetAllRankDatas::add_ranks() {
  // @@protoc_insertion_point(field_add:GCGetAllRankDatas.ranks)
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllcombatRankData >&
GCGetAllRankDatas::ranks() const {
  // @@protoc_insertion_point(field_list:GCGetAllRankDatas.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllcombatRankData >*
GCGetAllRankDatas::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:GCGetAllRankDatas.ranks)
  return &ranks_;
}

// -------------------------------------------------------------------

// AllcombatRankData

// optional int64 gId = 1;
inline bool AllcombatRankData::has_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllcombatRankData::set_has_gid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllcombatRankData::clear_has_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllcombatRankData::clear_gid() {
  gid_ = GOOGLE_LONGLONG(0);
  clear_has_gid();
}
inline ::google::protobuf::int64 AllcombatRankData::gid() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.gId)
  return gid_;
}
inline void AllcombatRankData::set_gid(::google::protobuf::int64 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.gId)
}

// optional string name = 2;
inline bool AllcombatRankData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllcombatRankData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllcombatRankData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllcombatRankData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AllcombatRankData::name() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.name)
  return *name_;
}
inline void AllcombatRankData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AllcombatRankData.name)
}
inline void AllcombatRankData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllcombatRankData.name)
}
inline void AllcombatRankData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllcombatRankData.name)
}
inline ::std::string* AllcombatRankData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllcombatRankData.name)
  return name_;
}
inline ::std::string* AllcombatRankData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllcombatRankData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllcombatRankData.name)
}

// optional int32 serverId = 3;
inline bool AllcombatRankData::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllcombatRankData::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllcombatRankData::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllcombatRankData::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 AllcombatRankData::serverid() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.serverId)
  return serverid_;
}
inline void AllcombatRankData::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.serverId)
}

// optional string serverName = 4;
inline bool AllcombatRankData::has_servername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllcombatRankData::set_has_servername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllcombatRankData::clear_has_servername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllcombatRankData::clear_servername() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& AllcombatRankData::servername() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.serverName)
  return *servername_;
}
inline void AllcombatRankData::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set:AllcombatRankData.serverName)
}
inline void AllcombatRankData::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllcombatRankData.serverName)
}
inline void AllcombatRankData::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllcombatRankData.serverName)
}
inline ::std::string* AllcombatRankData::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    servername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllcombatRankData.serverName)
  return servername_;
}
inline ::std::string* AllcombatRankData::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AllcombatRankData::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllcombatRankData.serverName)
}

// optional int32 playerLv = 5;
inline bool AllcombatRankData::has_playerlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllcombatRankData::set_has_playerlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllcombatRankData::clear_has_playerlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllcombatRankData::clear_playerlv() {
  playerlv_ = 0;
  clear_has_playerlv();
}
inline ::google::protobuf::int32 AllcombatRankData::playerlv() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.playerLv)
  return playerlv_;
}
inline void AllcombatRankData::set_playerlv(::google::protobuf::int32 value) {
  set_has_playerlv();
  playerlv_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.playerLv)
}

// optional int32 battleNumber = 6;
inline bool AllcombatRankData::has_battlenumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllcombatRankData::set_has_battlenumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllcombatRankData::clear_has_battlenumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllcombatRankData::clear_battlenumber() {
  battlenumber_ = 0;
  clear_has_battlenumber();
}
inline ::google::protobuf::int32 AllcombatRankData::battlenumber() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.battleNumber)
  return battlenumber_;
}
inline void AllcombatRankData::set_battlenumber(::google::protobuf::int32 value) {
  set_has_battlenumber();
  battlenumber_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.battleNumber)
}

// optional int32 sorce = 7;
inline bool AllcombatRankData::has_sorce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllcombatRankData::set_has_sorce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllcombatRankData::clear_has_sorce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllcombatRankData::clear_sorce() {
  sorce_ = 0;
  clear_has_sorce();
}
inline ::google::protobuf::int32 AllcombatRankData::sorce() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.sorce)
  return sorce_;
}
inline void AllcombatRankData::set_sorce(::google::protobuf::int32 value) {
  set_has_sorce();
  sorce_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.sorce)
}

// optional int32 rank = 8;
inline bool AllcombatRankData::has_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AllcombatRankData::set_has_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AllcombatRankData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AllcombatRankData::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 AllcombatRankData::rank() const {
  // @@protoc_insertion_point(field_get:AllcombatRankData.rank)
  return rank_;
}
inline void AllcombatRankData::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:AllcombatRankData.rank)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllCombatMessage_2eproto__INCLUDED
