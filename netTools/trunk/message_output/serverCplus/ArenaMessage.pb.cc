// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightHistroyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightHistroyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaFightResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaFightResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaDivisionUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaDivisionUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaBuyChance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaBuyChance_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaBuyChance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaBuyChance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaFightRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaFightRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaFightRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaFightRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGArenaClrCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGArenaClrCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCArenaClrCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCArenaClrCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetArenaShopItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetArenaShopItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetArenaShopItemsBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetArenaShopItemsBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExchangeArenaShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExchangeArenaShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCExchangeArenaShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCExchangeArenaShopItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArenaMessage_2eproto() {
  protobuf_AddDesc_ArenaMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArenaMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaInfo_descriptor_ = file->message_type(0);
  static const int ArenaInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, division_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, isdivisionup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, arenacoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, cdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, iscanfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, characterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, rankoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, headicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, divisionrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, petconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, remainvipbuytime_),
  };
  ArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfo_descriptor_,
      ArenaInfo::default_instance_,
      ArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfo));
  FightHistroyInfo_descriptor_ = file->message_type(1);
  static const int FightHistroyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, ischange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, rankoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, enemyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, fighttime_),
  };
  FightHistroyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightHistroyInfo_descriptor_,
      FightHistroyInfo::default_instance_,
      FightHistroyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHistroyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightHistroyInfo));
  CGArenaOpen_descriptor_ = file->message_type(2);
  static const int CGArenaOpen_offsets_[1] = {
  };
  CGArenaOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaOpen_descriptor_,
      CGArenaOpen::default_instance_,
      CGArenaOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaOpen));
  GCArenaOpen_descriptor_ = file->message_type(3);
  static const int GCArenaOpen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaOpen, arenainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaOpen, arenainfolist_),
  };
  GCArenaOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaOpen_descriptor_,
      GCArenaOpen::default_instance_,
      GCArenaOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaOpen));
  CGArenaFight_descriptor_ = file->message_type(4);
  static const int CGArenaFight_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFight, pkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFight, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFight, devision_),
  };
  CGArenaFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaFight_descriptor_,
      CGArenaFight::default_instance_,
      CGArenaFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaFight));
  GCArenaFight_descriptor_ = file->message_type(5);
  static const int GCArenaFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFight, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFight, senceid_),
  };
  GCArenaFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaFight_descriptor_,
      GCArenaFight::default_instance_,
      GCArenaFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaFight));
  GCArenaFightResult_descriptor_ = file->message_type(6);
  static const int GCArenaFightResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, isdivisionup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, isexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, enemyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, arenacoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, fightreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, divisionuprewards_),
  };
  GCArenaFightResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaFightResult_descriptor_,
      GCArenaFightResult::default_instance_,
      GCArenaFightResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaFightResult));
  CGArenaDivisionUp_descriptor_ = file->message_type(7);
  static const int CGArenaDivisionUp_offsets_[1] = {
  };
  CGArenaDivisionUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaDivisionUp_descriptor_,
      CGArenaDivisionUp::default_instance_,
      CGArenaDivisionUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaDivisionUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaDivisionUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaDivisionUp));
  CGArenaQuit_descriptor_ = file->message_type(8);
  static const int CGArenaQuit_offsets_[1] = {
  };
  CGArenaQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaQuit_descriptor_,
      CGArenaQuit::default_instance_,
      CGArenaQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaQuit));
  CGArenaBuyChance_descriptor_ = file->message_type(9);
  static const int CGArenaBuyChance_offsets_[1] = {
  };
  CGArenaBuyChance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaBuyChance_descriptor_,
      CGArenaBuyChance::default_instance_,
      CGArenaBuyChance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaBuyChance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaBuyChance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaBuyChance));
  GCArenaBuyChance_descriptor_ = file->message_type(10);
  static const int GCArenaBuyChance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaBuyChance, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaBuyChance, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaBuyChance, remainvipbuytime_),
  };
  GCArenaBuyChance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaBuyChance_descriptor_,
      GCArenaBuyChance::default_instance_,
      GCArenaBuyChance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaBuyChance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaBuyChance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaBuyChance));
  CGArenaFightRecord_descriptor_ = file->message_type(11);
  static const int CGArenaFightRecord_offsets_[1] = {
  };
  CGArenaFightRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaFightRecord_descriptor_,
      CGArenaFightRecord::default_instance_,
      CGArenaFightRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFightRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaFightRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaFightRecord));
  GCArenaFightRecord_descriptor_ = file->message_type(12);
  static const int GCArenaFightRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightRecord, fighthistroyinfo_),
  };
  GCArenaFightRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaFightRecord_descriptor_,
      GCArenaFightRecord::default_instance_,
      GCArenaFightRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaFightRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaFightRecord));
  CGArenaClrCDTime_descriptor_ = file->message_type(13);
  static const int CGArenaClrCDTime_offsets_[1] = {
  };
  CGArenaClrCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGArenaClrCDTime_descriptor_,
      CGArenaClrCDTime::default_instance_,
      CGArenaClrCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaClrCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGArenaClrCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGArenaClrCDTime));
  GCArenaClrCDTime_descriptor_ = file->message_type(14);
  static const int GCArenaClrCDTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaClrCDTime, result_),
  };
  GCArenaClrCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCArenaClrCDTime_descriptor_,
      GCArenaClrCDTime::default_instance_,
      GCArenaClrCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaClrCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCArenaClrCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCArenaClrCDTime));
  CGGetArenaShopItems_descriptor_ = file->message_type(15);
  static const int CGGetArenaShopItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetArenaShopItems, state_),
  };
  CGGetArenaShopItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetArenaShopItems_descriptor_,
      CGGetArenaShopItems::default_instance_,
      CGGetArenaShopItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetArenaShopItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetArenaShopItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetArenaShopItems));
  GCGetArenaShopItemsBack_descriptor_ = file->message_type(16);
  static const int GCGetArenaShopItemsBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetArenaShopItemsBack, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetArenaShopItemsBack, item1list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetArenaShopItemsBack, item2list_),
  };
  GCGetArenaShopItemsBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetArenaShopItemsBack_descriptor_,
      GCGetArenaShopItemsBack::default_instance_,
      GCGetArenaShopItemsBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetArenaShopItemsBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetArenaShopItemsBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetArenaShopItemsBack));
  CGExchangeArenaShopItem_descriptor_ = file->message_type(17);
  static const int CGExchangeArenaShopItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExchangeArenaShopItem, id_),
  };
  CGExchangeArenaShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExchangeArenaShopItem_descriptor_,
      CGExchangeArenaShopItem::default_instance_,
      CGExchangeArenaShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExchangeArenaShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExchangeArenaShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExchangeArenaShopItem));
  GCExchangeArenaShopItem_descriptor_ = file->message_type(18);
  static const int GCExchangeArenaShopItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, arenacoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, iteminfo_),
  };
  GCExchangeArenaShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCExchangeArenaShopItem_descriptor_,
      GCExchangeArenaShopItem::default_instance_,
      GCExchangeArenaShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExchangeArenaShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCExchangeArenaShopItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArenaMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfo_descriptor_, &ArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightHistroyInfo_descriptor_, &FightHistroyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaOpen_descriptor_, &CGArenaOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaOpen_descriptor_, &GCArenaOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaFight_descriptor_, &CGArenaFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaFight_descriptor_, &GCArenaFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaFightResult_descriptor_, &GCArenaFightResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaDivisionUp_descriptor_, &CGArenaDivisionUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaQuit_descriptor_, &CGArenaQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaBuyChance_descriptor_, &CGArenaBuyChance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaBuyChance_descriptor_, &GCArenaBuyChance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaFightRecord_descriptor_, &CGArenaFightRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaFightRecord_descriptor_, &GCArenaFightRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGArenaClrCDTime_descriptor_, &CGArenaClrCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCArenaClrCDTime_descriptor_, &GCArenaClrCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetArenaShopItems_descriptor_, &CGGetArenaShopItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetArenaShopItemsBack_descriptor_, &GCGetArenaShopItemsBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExchangeArenaShopItem_descriptor_, &CGExchangeArenaShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCExchangeArenaShopItem_descriptor_, &GCExchangeArenaShopItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArenaMessage_2eproto() {
  delete ArenaInfo::default_instance_;
  delete ArenaInfo_reflection_;
  delete FightHistroyInfo::default_instance_;
  delete FightHistroyInfo_reflection_;
  delete CGArenaOpen::default_instance_;
  delete CGArenaOpen_reflection_;
  delete GCArenaOpen::default_instance_;
  delete GCArenaOpen_reflection_;
  delete CGArenaFight::default_instance_;
  delete CGArenaFight_reflection_;
  delete GCArenaFight::default_instance_;
  delete GCArenaFight_reflection_;
  delete GCArenaFightResult::default_instance_;
  delete GCArenaFightResult_reflection_;
  delete CGArenaDivisionUp::default_instance_;
  delete CGArenaDivisionUp_reflection_;
  delete CGArenaQuit::default_instance_;
  delete CGArenaQuit_reflection_;
  delete CGArenaBuyChance::default_instance_;
  delete CGArenaBuyChance_reflection_;
  delete GCArenaBuyChance::default_instance_;
  delete GCArenaBuyChance_reflection_;
  delete CGArenaFightRecord::default_instance_;
  delete CGArenaFightRecord_reflection_;
  delete GCArenaFightRecord::default_instance_;
  delete GCArenaFightRecord_reflection_;
  delete CGArenaClrCDTime::default_instance_;
  delete CGArenaClrCDTime_reflection_;
  delete GCArenaClrCDTime::default_instance_;
  delete GCArenaClrCDTime_reflection_;
  delete CGGetArenaShopItems::default_instance_;
  delete CGGetArenaShopItems_reflection_;
  delete GCGetArenaShopItemsBack::default_instance_;
  delete GCGetArenaShopItemsBack_reflection_;
  delete CGExchangeArenaShopItem::default_instance_;
  delete CGExchangeArenaShopItem_reflection_;
  delete GCExchangeArenaShopItem::default_instance_;
  delete GCExchangeArenaShopItem_reflection_;
}

void protobuf_AddDesc_ArenaMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_ShopMessage_2eproto();
  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ArenaMessage.proto\032\022InnerMessage.proto"
    "\032\021ShopMessage.proto\032\023CommonMessage.proto"
    "\"\342\002\n\tArenaInfo\022\020\n\010playerID\030\001 \001(\003\022\014\n\004name"
    "\030\002 \001(\t\022\022\n\nfightValue\030\003 \001(\005\022\020\n\010division\030\004"
    " \001(\005\022\024\n\014isDivisionUp\030\005 \001(\005\022\014\n\004rank\030\006 \001(\005"
    "\022\016\n\006points\030\007 \001(\005\022\021\n\tarenaCoin\030\010 \001(\005\022\022\n\nr"
    "emainTime\030\t \001(\005\022\016\n\006cdTime\030\n \001(\005\022\022\n\nisCan"
    "Fight\030\014 \001(\005\022%\n\rcharacterInfo\030\r \001(\0132\016.Cha"
    "racterInfo\022\022\n\nrankOffset\030\016 \001(\005\022\020\n\010headIc"
    "on\030\017 \001(\005\022\024\n\014divisionRank\030\020 \001(\005\022\023\n\013petCon"
    "figId\030\021 \001(\005\022\030\n\020remainVipBuyTime\030\022 \001(\005\"\215\001"
    "\n\020FightHistroyInfo\022\016\n\006result\030\001 \001(\005\022\020\n\010is"
    "Change\030\002 \001(\005\022\014\n\004rank\030\003 \001(\005\022\022\n\nrankOffset"
    "\030\004 \001(\005\022\017\n\007enemyID\030\005 \001(\003\022\021\n\tenemyName\030\006 \001"
    "(\t\022\021\n\tfightTime\030\007 \001(\003\"\r\n\013CGArenaOpen\"O\n\013"
    "GCArenaOpen\022\035\n\tarenaInfo\030\001 \001(\0132\n.ArenaIn"
    "fo\022!\n\rarenaInfoList\030\002 \003(\0132\n.ArenaInfo\"<\n"
    "\014CGArenaFight\022\014\n\004pkID\030\001 \001(\003\022\014\n\004rank\030\002 \001("
    "\005\022\020\n\010devision\030\003 \001(\005\",\n\014GCArenaFight\022\013\n\003f"
    "lg\030\001 \001(\005\022\017\n\007senceId\030\002 \001(\005\"\361\001\n\022GCArenaFig"
    "htResult\022\024\n\014isDivisionUp\030\001 \001(\005\022\016\n\006result"
    "\030\002 \001(\005\022\022\n\nisExchange\030\003 \001(\005\022\034\n\010selfInfo\030\004"
    " \001(\0132\n.ArenaInfo\022\035\n\tenemyInfo\030\005 \001(\0132\n.Ar"
    "enaInfo\022\013\n\003exp\030\006 \001(\005\022\021\n\tarenaCoin\030\007 \001(\005\022"
    "\036\n\013fightReward\030\010 \003(\0132\t.ItemInfo\022$\n\021divis"
    "ionUpRewards\030\t \003(\0132\t.ItemInfo\"\023\n\021CGArena"
    "DivisionUp\"\r\n\013CGArenaQuit\"\022\n\020CGArenaBuyC"
    "hance\"P\n\020GCArenaBuyChance\022\016\n\006result\030\001 \001("
    "\005\022\022\n\nremainTime\030\002 \001(\005\022\030\n\020remainVipBuyTim"
    "e\030\003 \001(\005\"\024\n\022CGArenaFightRecord\"A\n\022GCArena"
    "FightRecord\022+\n\020fightHistroyInfo\030\001 \003(\0132\021."
    "FightHistroyInfo\"\022\n\020CGArenaClrCDTime\"\"\n\020"
    "GCArenaClrCDTime\022\016\n\006result\030\001 \001(\005\"$\n\023CGGe"
    "tArenaShopItems\022\r\n\005state\030\001 \001(\005\"j\n\027GCGetA"
    "renaShopItemsBack\022\r\n\005state\030\001 \001(\005\022\037\n\titem"
    "1List\030\002 \003(\0132\014.EntryIntInt\022\037\n\titem2List\030\003"
    " \003(\0132\014.EntryIntInt\"%\n\027CGExchangeArenaSho"
    "pItem\022\n\n\002id\030\001 \001(\005\"l\n\027GCExchangeArenaShop"
    "Item\022\016\n\006result\030\001 \001(\005\022\016\n\006credit\030\002 \001(\005\022\021\n\t"
    "arenaCoin\030\003 \001(\005\022\036\n\010itemInfo\030\004 \001(\0132\014.Entr"
    "yIntIntB\031\n\027com.mile.common.message", 1634);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArenaMessage.proto", &protobuf_RegisterTypes);
  ArenaInfo::default_instance_ = new ArenaInfo();
  FightHistroyInfo::default_instance_ = new FightHistroyInfo();
  CGArenaOpen::default_instance_ = new CGArenaOpen();
  GCArenaOpen::default_instance_ = new GCArenaOpen();
  CGArenaFight::default_instance_ = new CGArenaFight();
  GCArenaFight::default_instance_ = new GCArenaFight();
  GCArenaFightResult::default_instance_ = new GCArenaFightResult();
  CGArenaDivisionUp::default_instance_ = new CGArenaDivisionUp();
  CGArenaQuit::default_instance_ = new CGArenaQuit();
  CGArenaBuyChance::default_instance_ = new CGArenaBuyChance();
  GCArenaBuyChance::default_instance_ = new GCArenaBuyChance();
  CGArenaFightRecord::default_instance_ = new CGArenaFightRecord();
  GCArenaFightRecord::default_instance_ = new GCArenaFightRecord();
  CGArenaClrCDTime::default_instance_ = new CGArenaClrCDTime();
  GCArenaClrCDTime::default_instance_ = new GCArenaClrCDTime();
  CGGetArenaShopItems::default_instance_ = new CGGetArenaShopItems();
  GCGetArenaShopItemsBack::default_instance_ = new GCGetArenaShopItemsBack();
  CGExchangeArenaShopItem::default_instance_ = new CGExchangeArenaShopItem();
  GCExchangeArenaShopItem::default_instance_ = new GCExchangeArenaShopItem();
  ArenaInfo::default_instance_->InitAsDefaultInstance();
  FightHistroyInfo::default_instance_->InitAsDefaultInstance();
  CGArenaOpen::default_instance_->InitAsDefaultInstance();
  GCArenaOpen::default_instance_->InitAsDefaultInstance();
  CGArenaFight::default_instance_->InitAsDefaultInstance();
  GCArenaFight::default_instance_->InitAsDefaultInstance();
  GCArenaFightResult::default_instance_->InitAsDefaultInstance();
  CGArenaDivisionUp::default_instance_->InitAsDefaultInstance();
  CGArenaQuit::default_instance_->InitAsDefaultInstance();
  CGArenaBuyChance::default_instance_->InitAsDefaultInstance();
  GCArenaBuyChance::default_instance_->InitAsDefaultInstance();
  CGArenaFightRecord::default_instance_->InitAsDefaultInstance();
  GCArenaFightRecord::default_instance_->InitAsDefaultInstance();
  CGArenaClrCDTime::default_instance_->InitAsDefaultInstance();
  GCArenaClrCDTime::default_instance_->InitAsDefaultInstance();
  CGGetArenaShopItems::default_instance_->InitAsDefaultInstance();
  GCGetArenaShopItemsBack::default_instance_->InitAsDefaultInstance();
  CGExchangeArenaShopItem::default_instance_->InitAsDefaultInstance();
  GCExchangeArenaShopItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaMessage_2eproto {
  StaticDescriptorInitializer_ArenaMessage_2eproto() {
    protobuf_AddDesc_ArenaMessage_2eproto();
  }
} static_descriptor_initializer_ArenaMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaInfo::kPlayerIDFieldNumber;
const int ArenaInfo::kNameFieldNumber;
const int ArenaInfo::kFightValueFieldNumber;
const int ArenaInfo::kDivisionFieldNumber;
const int ArenaInfo::kIsDivisionUpFieldNumber;
const int ArenaInfo::kRankFieldNumber;
const int ArenaInfo::kPointsFieldNumber;
const int ArenaInfo::kArenaCoinFieldNumber;
const int ArenaInfo::kRemainTimeFieldNumber;
const int ArenaInfo::kCdTimeFieldNumber;
const int ArenaInfo::kIsCanFightFieldNumber;
const int ArenaInfo::kCharacterInfoFieldNumber;
const int ArenaInfo::kRankOffsetFieldNumber;
const int ArenaInfo::kHeadIconFieldNumber;
const int ArenaInfo::kDivisionRankFieldNumber;
const int ArenaInfo::kPetConfigIdFieldNumber;
const int ArenaInfo::kRemainVipBuyTimeFieldNumber;
#endif  // !_MSC_VER

ArenaInfo::ArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ArenaInfo)
}

void ArenaInfo::InitAsDefaultInstance() {
  characterinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

ArenaInfo::ArenaInfo(const ArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ArenaInfo)
}

void ArenaInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightvalue_ = 0;
  division_ = 0;
  isdivisionup_ = 0;
  rank_ = 0;
  points_ = 0;
  arenacoin_ = 0;
  remaintime_ = 0;
  cdtime_ = 0;
  iscanfight_ = 0;
  characterinfo_ = NULL;
  rankoffset_ = 0;
  headicon_ = 0;
  divisionrank_ = 0;
  petconfigid_ = 0;
  remainvipbuytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfo::~ArenaInfo() {
  // @@protoc_insertion_point(destructor:ArenaInfo)
  SharedDtor();
}

void ArenaInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete characterinfo_;
  }
}

void ArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfo_descriptor_;
}

const ArenaInfo& ArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaInfo* ArenaInfo::default_instance_ = NULL;

ArenaInfo* ArenaInfo::New() const {
  return new ArenaInfo;
}

void ArenaInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArenaInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(fightvalue_, arenacoin_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(remaintime_, cdtime_);
    ZR_(iscanfight_, petconfigid_);
    if (has_characterinfo()) {
      if (characterinfo_ != NULL) characterinfo_->::CharacterInfo::Clear();
    }
  }
  remainvipbuytime_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ArenaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fightValue;
        break;
      }

      // optional int32 fightValue = 3;
      case 3: {
        if (tag == 24) {
         parse_fightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_division;
        break;
      }

      // optional int32 division = 4;
      case 4: {
        if (tag == 32) {
         parse_division:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &division_)));
          set_has_division();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isDivisionUp;
        break;
      }

      // optional int32 isDivisionUp = 5;
      case 5: {
        if (tag == 40) {
         parse_isDivisionUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdivisionup_)));
          set_has_isdivisionup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rank;
        break;
      }

      // optional int32 rank = 6;
      case 6: {
        if (tag == 48) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_points;
        break;
      }

      // optional int32 points = 7;
      case 7: {
        if (tag == 56) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_arenaCoin;
        break;
      }

      // optional int32 arenaCoin = 8;
      case 8: {
        if (tag == 64) {
         parse_arenaCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_remainTime;
        break;
      }

      // optional int32 remainTime = 9;
      case 9: {
        if (tag == 72) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cdTime;
        break;
      }

      // optional int32 cdTime = 10;
      case 10: {
        if (tag == 80) {
         parse_cdTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_isCanFight;
        break;
      }

      // optional int32 isCanFight = 12;
      case 12: {
        if (tag == 96) {
         parse_isCanFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanfight_)));
          set_has_iscanfight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_characterInfo;
        break;
      }

      // optional .CharacterInfo characterInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_characterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rankOffset;
        break;
      }

      // optional int32 rankOffset = 14;
      case 14: {
        if (tag == 112) {
         parse_rankOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankoffset_)));
          set_has_rankoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_headIcon;
        break;
      }

      // optional int32 headIcon = 15;
      case 15: {
        if (tag == 120) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_divisionRank;
        break;
      }

      // optional int32 divisionRank = 16;
      case 16: {
        if (tag == 128) {
         parse_divisionRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divisionrank_)));
          set_has_divisionrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_petConfigId;
        break;
      }

      // optional int32 petConfigId = 17;
      case 17: {
        if (tag == 136) {
         parse_petConfigId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petconfigid_)));
          set_has_petconfigid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_remainVipBuyTime;
        break;
      }

      // optional int32 remainVipBuyTime = 18;
      case 18: {
        if (tag == 144) {
         parse_remainVipBuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainvipbuytime_)));
          set_has_remainvipbuytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ArenaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ArenaInfo)
  return false;
#undef DO_
}

void ArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ArenaInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 fightValue = 3;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightvalue(), output);
  }

  // optional int32 division = 4;
  if (has_division()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->division(), output);
  }

  // optional int32 isDivisionUp = 5;
  if (has_isdivisionup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isdivisionup(), output);
  }

  // optional int32 rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank(), output);
  }

  // optional int32 points = 7;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->points(), output);
  }

  // optional int32 arenaCoin = 8;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->arenacoin(), output);
  }

  // optional int32 remainTime = 9;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->remaintime(), output);
  }

  // optional int32 cdTime = 10;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cdtime(), output);
  }

  // optional int32 isCanFight = 12;
  if (has_iscanfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->iscanfight(), output);
  }

  // optional .CharacterInfo characterInfo = 13;
  if (has_characterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->characterinfo(), output);
  }

  // optional int32 rankOffset = 14;
  if (has_rankoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rankoffset(), output);
  }

  // optional int32 headIcon = 15;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->headicon(), output);
  }

  // optional int32 divisionRank = 16;
  if (has_divisionrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->divisionrank(), output);
  }

  // optional int32 petConfigId = 17;
  if (has_petconfigid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->petconfigid(), output);
  }

  // optional int32 remainVipBuyTime = 18;
  if (has_remainvipbuytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->remainvipbuytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ArenaInfo)
}

::google::protobuf::uint8* ArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ArenaInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 fightValue = 3;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightvalue(), target);
  }

  // optional int32 division = 4;
  if (has_division()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->division(), target);
  }

  // optional int32 isDivisionUp = 5;
  if (has_isdivisionup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isdivisionup(), target);
  }

  // optional int32 rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank(), target);
  }

  // optional int32 points = 7;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->points(), target);
  }

  // optional int32 arenaCoin = 8;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->arenacoin(), target);
  }

  // optional int32 remainTime = 9;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->remaintime(), target);
  }

  // optional int32 cdTime = 10;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cdtime(), target);
  }

  // optional int32 isCanFight = 12;
  if (has_iscanfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->iscanfight(), target);
  }

  // optional .CharacterInfo characterInfo = 13;
  if (has_characterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->characterinfo(), target);
  }

  // optional int32 rankOffset = 14;
  if (has_rankoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rankoffset(), target);
  }

  // optional int32 headIcon = 15;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->headicon(), target);
  }

  // optional int32 divisionRank = 16;
  if (has_divisionrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->divisionrank(), target);
  }

  // optional int32 petConfigId = 17;
  if (has_petconfigid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->petconfigid(), target);
  }

  // optional int32 remainVipBuyTime = 18;
  if (has_remainvipbuytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->remainvipbuytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ArenaInfo)
  return target;
}

int ArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 fightValue = 3;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 division = 4;
    if (has_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->division());
    }

    // optional int32 isDivisionUp = 5;
    if (has_isdivisionup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdivisionup());
    }

    // optional int32 rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 points = 7;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int32 arenaCoin = 8;
    if (has_arenacoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenacoin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 remainTime = 9;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional int32 cdTime = 10;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cdtime());
    }

    // optional int32 isCanFight = 12;
    if (has_iscanfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanfight());
    }

    // optional .CharacterInfo characterInfo = 13;
    if (has_characterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->characterinfo());
    }

    // optional int32 rankOffset = 14;
    if (has_rankoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankoffset());
    }

    // optional int32 headIcon = 15;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }

    // optional int32 divisionRank = 16;
    if (has_divisionrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divisionrank());
    }

    // optional int32 petConfigId = 17;
    if (has_petconfigid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petconfigid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 remainVipBuyTime = 18;
    if (has_remainvipbuytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainvipbuytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfo::MergeFrom(const ArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_division()) {
      set_division(from.division());
    }
    if (from.has_isdivisionup()) {
      set_isdivisionup(from.isdivisionup());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_iscanfight()) {
      set_iscanfight(from.iscanfight());
    }
    if (from.has_characterinfo()) {
      mutable_characterinfo()->::CharacterInfo::MergeFrom(from.characterinfo());
    }
    if (from.has_rankoffset()) {
      set_rankoffset(from.rankoffset());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_divisionrank()) {
      set_divisionrank(from.divisionrank());
    }
    if (from.has_petconfigid()) {
      set_petconfigid(from.petconfigid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_remainvipbuytime()) {
      set_remainvipbuytime(from.remainvipbuytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfo::CopyFrom(const ArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfo::IsInitialized() const {

  return true;
}

void ArenaInfo::Swap(ArenaInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(fightvalue_, other->fightvalue_);
    std::swap(division_, other->division_);
    std::swap(isdivisionup_, other->isdivisionup_);
    std::swap(rank_, other->rank_);
    std::swap(points_, other->points_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(iscanfight_, other->iscanfight_);
    std::swap(characterinfo_, other->characterinfo_);
    std::swap(rankoffset_, other->rankoffset_);
    std::swap(headicon_, other->headicon_);
    std::swap(divisionrank_, other->divisionrank_);
    std::swap(petconfigid_, other->petconfigid_);
    std::swap(remainvipbuytime_, other->remainvipbuytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfo_descriptor_;
  metadata.reflection = ArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightHistroyInfo::kResultFieldNumber;
const int FightHistroyInfo::kIsChangeFieldNumber;
const int FightHistroyInfo::kRankFieldNumber;
const int FightHistroyInfo::kRankOffsetFieldNumber;
const int FightHistroyInfo::kEnemyIDFieldNumber;
const int FightHistroyInfo::kEnemyNameFieldNumber;
const int FightHistroyInfo::kFightTimeFieldNumber;
#endif  // !_MSC_VER

FightHistroyInfo::FightHistroyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightHistroyInfo)
}

void FightHistroyInfo::InitAsDefaultInstance() {
}

FightHistroyInfo::FightHistroyInfo(const FightHistroyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FightHistroyInfo)
}

void FightHistroyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  ischange_ = 0;
  rank_ = 0;
  rankoffset_ = 0;
  enemyid_ = GOOGLE_LONGLONG(0);
  enemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fighttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightHistroyInfo::~FightHistroyInfo() {
  // @@protoc_insertion_point(destructor:FightHistroyInfo)
  SharedDtor();
}

void FightHistroyInfo::SharedDtor() {
  if (enemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enemyname_;
  }
  if (this != default_instance_) {
  }
}

void FightHistroyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightHistroyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightHistroyInfo_descriptor_;
}

const FightHistroyInfo& FightHistroyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

FightHistroyInfo* FightHistroyInfo::default_instance_ = NULL;

FightHistroyInfo* FightHistroyInfo::New() const {
  return new FightHistroyInfo;
}

void FightHistroyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightHistroyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(result_, enemyid_);
    if (has_enemyname()) {
      if (enemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        enemyname_->clear();
      }
    }
    fighttime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightHistroyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightHistroyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isChange;
        break;
      }

      // optional int32 isChange = 2;
      case 2: {
        if (tag == 16) {
         parse_isChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischange_)));
          set_has_ischange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rankOffset;
        break;
      }

      // optional int32 rankOffset = 4;
      case 4: {
        if (tag == 32) {
         parse_rankOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankoffset_)));
          set_has_rankoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enemyID;
        break;
      }

      // optional int64 enemyID = 5;
      case 5: {
        if (tag == 40) {
         parse_enemyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_enemyName;
        break;
      }

      // optional string enemyName = 6;
      case 6: {
        if (tag == 50) {
         parse_enemyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enemyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enemyname().data(), this->enemyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enemyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fightTime;
        break;
      }

      // optional int64 fightTime = 7;
      case 7: {
        if (tag == 56) {
         parse_fightTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fighttime_)));
          set_has_fighttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightHistroyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightHistroyInfo)
  return false;
#undef DO_
}

void FightHistroyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightHistroyInfo)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 isChange = 2;
  if (has_ischange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ischange(), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional int32 rankOffset = 4;
  if (has_rankoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankoffset(), output);
  }

  // optional int64 enemyID = 5;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->enemyid(), output);
  }

  // optional string enemyName = 6;
  if (has_enemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemyname().data(), this->enemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->enemyname(), output);
  }

  // optional int64 fightTime = 7;
  if (has_fighttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fighttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightHistroyInfo)
}

::google::protobuf::uint8* FightHistroyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FightHistroyInfo)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 isChange = 2;
  if (has_ischange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ischange(), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional int32 rankOffset = 4;
  if (has_rankoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankoffset(), target);
  }

  // optional int64 enemyID = 5;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->enemyid(), target);
  }

  // optional string enemyName = 6;
  if (has_enemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enemyname().data(), this->enemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enemyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->enemyname(), target);
  }

  // optional int64 fightTime = 7;
  if (has_fighttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fighttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightHistroyInfo)
  return target;
}

int FightHistroyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 isChange = 2;
    if (has_ischange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischange());
    }

    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 rankOffset = 4;
    if (has_rankoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankoffset());
    }

    // optional int64 enemyID = 5;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enemyid());
    }

    // optional string enemyName = 6;
    if (has_enemyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enemyname());
    }

    // optional int64 fightTime = 7;
    if (has_fighttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fighttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightHistroyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightHistroyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightHistroyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightHistroyInfo::MergeFrom(const FightHistroyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ischange()) {
      set_ischange(from.ischange());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rankoffset()) {
      set_rankoffset(from.rankoffset());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_enemyname()) {
      set_enemyname(from.enemyname());
    }
    if (from.has_fighttime()) {
      set_fighttime(from.fighttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightHistroyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightHistroyInfo::CopyFrom(const FightHistroyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightHistroyInfo::IsInitialized() const {

  return true;
}

void FightHistroyInfo::Swap(FightHistroyInfo* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(ischange_, other->ischange_);
    std::swap(rank_, other->rank_);
    std::swap(rankoffset_, other->rankoffset_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(enemyname_, other->enemyname_);
    std::swap(fighttime_, other->fighttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightHistroyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightHistroyInfo_descriptor_;
  metadata.reflection = FightHistroyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaOpen::CGArenaOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaOpen)
}

void CGArenaOpen::InitAsDefaultInstance() {
}

CGArenaOpen::CGArenaOpen(const CGArenaOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaOpen)
}

void CGArenaOpen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaOpen::~CGArenaOpen() {
  // @@protoc_insertion_point(destructor:CGArenaOpen)
  SharedDtor();
}

void CGArenaOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaOpen_descriptor_;
}

const CGArenaOpen& CGArenaOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaOpen* CGArenaOpen::default_instance_ = NULL;

CGArenaOpen* CGArenaOpen::New() const {
  return new CGArenaOpen;
}

void CGArenaOpen::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaOpen)
  return false;
#undef DO_
}

void CGArenaOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaOpen)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaOpen)
}

::google::protobuf::uint8* CGArenaOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaOpen)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaOpen)
  return target;
}

int CGArenaOpen::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaOpen::MergeFrom(const CGArenaOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaOpen::CopyFrom(const CGArenaOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaOpen::IsInitialized() const {

  return true;
}

void CGArenaOpen::Swap(CGArenaOpen* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaOpen_descriptor_;
  metadata.reflection = CGArenaOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaOpen::kArenaInfoFieldNumber;
const int GCArenaOpen::kArenaInfoListFieldNumber;
#endif  // !_MSC_VER

GCArenaOpen::GCArenaOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaOpen)
}

void GCArenaOpen::InitAsDefaultInstance() {
  arenainfo_ = const_cast< ::ArenaInfo*>(&::ArenaInfo::default_instance());
}

GCArenaOpen::GCArenaOpen(const GCArenaOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaOpen)
}

void GCArenaOpen::SharedCtor() {
  _cached_size_ = 0;
  arenainfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaOpen::~GCArenaOpen() {
  // @@protoc_insertion_point(destructor:GCArenaOpen)
  SharedDtor();
}

void GCArenaOpen::SharedDtor() {
  if (this != default_instance_) {
    delete arenainfo_;
  }
}

void GCArenaOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaOpen_descriptor_;
}

const GCArenaOpen& GCArenaOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaOpen* GCArenaOpen::default_instance_ = NULL;

GCArenaOpen* GCArenaOpen::New() const {
  return new GCArenaOpen;
}

void GCArenaOpen::Clear() {
  if (has_arenainfo()) {
    if (arenainfo_ != NULL) arenainfo_->::ArenaInfo::Clear();
  }
  arenainfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ArenaInfo arenaInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenainfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arenaInfoList;
        break;
      }

      // repeated .ArenaInfo arenaInfoList = 2;
      case 2: {
        if (tag == 18) {
         parse_arenaInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenainfolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arenaInfoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaOpen)
  return false;
#undef DO_
}

void GCArenaOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaOpen)
  // optional .ArenaInfo arenaInfo = 1;
  if (has_arenainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenainfo(), output);
  }

  // repeated .ArenaInfo arenaInfoList = 2;
  for (int i = 0; i < this->arenainfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arenainfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaOpen)
}

::google::protobuf::uint8* GCArenaOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaOpen)
  // optional .ArenaInfo arenaInfo = 1;
  if (has_arenainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenainfo(), target);
  }

  // repeated .ArenaInfo arenaInfoList = 2;
  for (int i = 0; i < this->arenainfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arenainfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaOpen)
  return target;
}

int GCArenaOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ArenaInfo arenaInfo = 1;
    if (has_arenainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenainfo());
    }

  }
  // repeated .ArenaInfo arenaInfoList = 2;
  total_size += 1 * this->arenainfolist_size();
  for (int i = 0; i < this->arenainfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenainfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaOpen::MergeFrom(const GCArenaOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenainfolist_.MergeFrom(from.arenainfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arenainfo()) {
      mutable_arenainfo()->::ArenaInfo::MergeFrom(from.arenainfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaOpen::CopyFrom(const GCArenaOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaOpen::IsInitialized() const {

  return true;
}

void GCArenaOpen::Swap(GCArenaOpen* other) {
  if (other != this) {
    std::swap(arenainfo_, other->arenainfo_);
    arenainfolist_.Swap(&other->arenainfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaOpen_descriptor_;
  metadata.reflection = GCArenaOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGArenaFight::kPkIDFieldNumber;
const int CGArenaFight::kRankFieldNumber;
const int CGArenaFight::kDevisionFieldNumber;
#endif  // !_MSC_VER

CGArenaFight::CGArenaFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaFight)
}

void CGArenaFight::InitAsDefaultInstance() {
}

CGArenaFight::CGArenaFight(const CGArenaFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaFight)
}

void CGArenaFight::SharedCtor() {
  _cached_size_ = 0;
  pkid_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  devision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaFight::~CGArenaFight() {
  // @@protoc_insertion_point(destructor:CGArenaFight)
  SharedDtor();
}

void CGArenaFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaFight_descriptor_;
}

const CGArenaFight& CGArenaFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaFight* CGArenaFight::default_instance_ = NULL;

CGArenaFight* CGArenaFight::New() const {
  return new CGArenaFight;
}

void CGArenaFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGArenaFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pkid_, devision_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pkID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pkid_)));
          set_has_pkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_devision;
        break;
      }

      // optional int32 devision = 3;
      case 3: {
        if (tag == 24) {
         parse_devision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devision_)));
          set_has_devision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaFight)
  return false;
#undef DO_
}

void CGArenaFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaFight)
  // optional int64 pkID = 1;
  if (has_pkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pkid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 devision = 3;
  if (has_devision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->devision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaFight)
}

::google::protobuf::uint8* CGArenaFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaFight)
  // optional int64 pkID = 1;
  if (has_pkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pkid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 devision = 3;
  if (has_devision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->devision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaFight)
  return target;
}

int CGArenaFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pkID = 1;
    if (has_pkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pkid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 devision = 3;
    if (has_devision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaFight::MergeFrom(const CGArenaFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkid()) {
      set_pkid(from.pkid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_devision()) {
      set_devision(from.devision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaFight::CopyFrom(const CGArenaFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaFight::IsInitialized() const {

  return true;
}

void CGArenaFight::Swap(CGArenaFight* other) {
  if (other != this) {
    std::swap(pkid_, other->pkid_);
    std::swap(rank_, other->rank_);
    std::swap(devision_, other->devision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaFight_descriptor_;
  metadata.reflection = CGArenaFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaFight::kFlgFieldNumber;
const int GCArenaFight::kSenceIdFieldNumber;
#endif  // !_MSC_VER

GCArenaFight::GCArenaFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaFight)
}

void GCArenaFight::InitAsDefaultInstance() {
}

GCArenaFight::GCArenaFight(const GCArenaFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaFight)
}

void GCArenaFight::SharedCtor() {
  _cached_size_ = 0;
  flg_ = 0;
  senceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaFight::~GCArenaFight() {
  // @@protoc_insertion_point(destructor:GCArenaFight)
  SharedDtor();
}

void GCArenaFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCArenaFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaFight_descriptor_;
}

const GCArenaFight& GCArenaFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaFight* GCArenaFight::default_instance_ = NULL;

GCArenaFight* GCArenaFight::New() const {
  return new GCArenaFight;
}

void GCArenaFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCArenaFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flg_, senceid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flg = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senceId;
        break;
      }

      // optional int32 senceId = 2;
      case 2: {
        if (tag == 16) {
         parse_senceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senceid_)));
          set_has_senceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaFight)
  return false;
#undef DO_
}

void GCArenaFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaFight)
  // optional int32 flg = 1;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flg(), output);
  }

  // optional int32 senceId = 2;
  if (has_senceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->senceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaFight)
}

::google::protobuf::uint8* GCArenaFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaFight)
  // optional int32 flg = 1;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flg(), target);
  }

  // optional int32 senceId = 2;
  if (has_senceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->senceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaFight)
  return target;
}

int GCArenaFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flg = 1;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flg());
    }

    // optional int32 senceId = 2;
    if (has_senceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaFight::MergeFrom(const GCArenaFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_senceid()) {
      set_senceid(from.senceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaFight::CopyFrom(const GCArenaFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaFight::IsInitialized() const {

  return true;
}

void GCArenaFight::Swap(GCArenaFight* other) {
  if (other != this) {
    std::swap(flg_, other->flg_);
    std::swap(senceid_, other->senceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaFight_descriptor_;
  metadata.reflection = GCArenaFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaFightResult::kIsDivisionUpFieldNumber;
const int GCArenaFightResult::kResultFieldNumber;
const int GCArenaFightResult::kIsExchangeFieldNumber;
const int GCArenaFightResult::kSelfInfoFieldNumber;
const int GCArenaFightResult::kEnemyInfoFieldNumber;
const int GCArenaFightResult::kExpFieldNumber;
const int GCArenaFightResult::kArenaCoinFieldNumber;
const int GCArenaFightResult::kFightRewardFieldNumber;
const int GCArenaFightResult::kDivisionUpRewardsFieldNumber;
#endif  // !_MSC_VER

GCArenaFightResult::GCArenaFightResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaFightResult)
}

void GCArenaFightResult::InitAsDefaultInstance() {
  selfinfo_ = const_cast< ::ArenaInfo*>(&::ArenaInfo::default_instance());
  enemyinfo_ = const_cast< ::ArenaInfo*>(&::ArenaInfo::default_instance());
}

GCArenaFightResult::GCArenaFightResult(const GCArenaFightResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaFightResult)
}

void GCArenaFightResult::SharedCtor() {
  _cached_size_ = 0;
  isdivisionup_ = 0;
  result_ = 0;
  isexchange_ = 0;
  selfinfo_ = NULL;
  enemyinfo_ = NULL;
  exp_ = 0;
  arenacoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaFightResult::~GCArenaFightResult() {
  // @@protoc_insertion_point(destructor:GCArenaFightResult)
  SharedDtor();
}

void GCArenaFightResult::SharedDtor() {
  if (this != default_instance_) {
    delete selfinfo_;
    delete enemyinfo_;
  }
}

void GCArenaFightResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaFightResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaFightResult_descriptor_;
}

const GCArenaFightResult& GCArenaFightResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaFightResult* GCArenaFightResult::default_instance_ = NULL;

GCArenaFightResult* GCArenaFightResult::New() const {
  return new GCArenaFightResult;
}

void GCArenaFightResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCArenaFightResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(isdivisionup_, result_);
    ZR_(isexchange_, exp_);
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::ArenaInfo::Clear();
    }
    if (has_enemyinfo()) {
      if (enemyinfo_ != NULL) enemyinfo_->::ArenaInfo::Clear();
    }
    arenacoin_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fightreward_.Clear();
  divisionuprewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaFightResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaFightResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isDivisionUp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdivisionup_)));
          set_has_isdivisionup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isExchange;
        break;
      }

      // optional int32 isExchange = 3;
      case 3: {
        if (tag == 24) {
         parse_isExchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isexchange_)));
          set_has_isexchange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_selfInfo;
        break;
      }

      // optional .ArenaInfo selfInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_selfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_enemyInfo;
        break;
      }

      // optional .ArenaInfo enemyInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_enemyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_arenaCoin;
        break;
      }

      // optional int32 arenaCoin = 7;
      case 7: {
        if (tag == 56) {
         parse_arenaCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fightReward;
        break;
      }

      // repeated .ItemInfo fightReward = 8;
      case 8: {
        if (tag == 66) {
         parse_fightReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fightReward;
        if (input->ExpectTag(74)) goto parse_divisionUpRewards;
        break;
      }

      // repeated .ItemInfo divisionUpRewards = 9;
      case 9: {
        if (tag == 74) {
         parse_divisionUpRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_divisionuprewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_divisionUpRewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaFightResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaFightResult)
  return false;
#undef DO_
}

void GCArenaFightResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaFightResult)
  // optional int32 isDivisionUp = 1;
  if (has_isdivisionup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isdivisionup(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 isExchange = 3;
  if (has_isexchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isexchange(), output);
  }

  // optional .ArenaInfo selfInfo = 4;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selfinfo(), output);
  }

  // optional .ArenaInfo enemyInfo = 5;
  if (has_enemyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemyinfo(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // optional int32 arenaCoin = 7;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->arenacoin(), output);
  }

  // repeated .ItemInfo fightReward = 8;
  for (int i = 0; i < this->fightreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fightreward(i), output);
  }

  // repeated .ItemInfo divisionUpRewards = 9;
  for (int i = 0; i < this->divisionuprewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->divisionuprewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaFightResult)
}

::google::protobuf::uint8* GCArenaFightResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaFightResult)
  // optional int32 isDivisionUp = 1;
  if (has_isdivisionup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isdivisionup(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 isExchange = 3;
  if (has_isexchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isexchange(), target);
  }

  // optional .ArenaInfo selfInfo = 4;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selfinfo(), target);
  }

  // optional .ArenaInfo enemyInfo = 5;
  if (has_enemyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemyinfo(), target);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  // optional int32 arenaCoin = 7;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->arenacoin(), target);
  }

  // repeated .ItemInfo fightReward = 8;
  for (int i = 0; i < this->fightreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fightreward(i), target);
  }

  // repeated .ItemInfo divisionUpRewards = 9;
  for (int i = 0; i < this->divisionuprewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->divisionuprewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaFightResult)
  return target;
}

int GCArenaFightResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isDivisionUp = 1;
    if (has_isdivisionup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdivisionup());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 isExchange = 3;
    if (has_isexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isexchange());
    }

    // optional .ArenaInfo selfInfo = 4;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

    // optional .ArenaInfo enemyInfo = 5;
    if (has_enemyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemyinfo());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 arenaCoin = 7;
    if (has_arenacoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenacoin());
    }

  }
  // repeated .ItemInfo fightReward = 8;
  total_size += 1 * this->fightreward_size();
  for (int i = 0; i < this->fightreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightreward(i));
  }

  // repeated .ItemInfo divisionUpRewards = 9;
  total_size += 1 * this->divisionuprewards_size();
  for (int i = 0; i < this->divisionuprewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->divisionuprewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaFightResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaFightResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaFightResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaFightResult::MergeFrom(const GCArenaFightResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightreward_.MergeFrom(from.fightreward_);
  divisionuprewards_.MergeFrom(from.divisionuprewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isdivisionup()) {
      set_isdivisionup(from.isdivisionup());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isexchange()) {
      set_isexchange(from.isexchange());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::ArenaInfo::MergeFrom(from.selfinfo());
    }
    if (from.has_enemyinfo()) {
      mutable_enemyinfo()->::ArenaInfo::MergeFrom(from.enemyinfo());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaFightResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaFightResult::CopyFrom(const GCArenaFightResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaFightResult::IsInitialized() const {

  return true;
}

void GCArenaFightResult::Swap(GCArenaFightResult* other) {
  if (other != this) {
    std::swap(isdivisionup_, other->isdivisionup_);
    std::swap(result_, other->result_);
    std::swap(isexchange_, other->isexchange_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(enemyinfo_, other->enemyinfo_);
    std::swap(exp_, other->exp_);
    std::swap(arenacoin_, other->arenacoin_);
    fightreward_.Swap(&other->fightreward_);
    divisionuprewards_.Swap(&other->divisionuprewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaFightResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaFightResult_descriptor_;
  metadata.reflection = GCArenaFightResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaDivisionUp::CGArenaDivisionUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaDivisionUp)
}

void CGArenaDivisionUp::InitAsDefaultInstance() {
}

CGArenaDivisionUp::CGArenaDivisionUp(const CGArenaDivisionUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaDivisionUp)
}

void CGArenaDivisionUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaDivisionUp::~CGArenaDivisionUp() {
  // @@protoc_insertion_point(destructor:CGArenaDivisionUp)
  SharedDtor();
}

void CGArenaDivisionUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaDivisionUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaDivisionUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaDivisionUp_descriptor_;
}

const CGArenaDivisionUp& CGArenaDivisionUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaDivisionUp* CGArenaDivisionUp::default_instance_ = NULL;

CGArenaDivisionUp* CGArenaDivisionUp::New() const {
  return new CGArenaDivisionUp;
}

void CGArenaDivisionUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaDivisionUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaDivisionUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaDivisionUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaDivisionUp)
  return false;
#undef DO_
}

void CGArenaDivisionUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaDivisionUp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaDivisionUp)
}

::google::protobuf::uint8* CGArenaDivisionUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaDivisionUp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaDivisionUp)
  return target;
}

int CGArenaDivisionUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaDivisionUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaDivisionUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaDivisionUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaDivisionUp::MergeFrom(const CGArenaDivisionUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaDivisionUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaDivisionUp::CopyFrom(const CGArenaDivisionUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaDivisionUp::IsInitialized() const {

  return true;
}

void CGArenaDivisionUp::Swap(CGArenaDivisionUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaDivisionUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaDivisionUp_descriptor_;
  metadata.reflection = CGArenaDivisionUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaQuit::CGArenaQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaQuit)
}

void CGArenaQuit::InitAsDefaultInstance() {
}

CGArenaQuit::CGArenaQuit(const CGArenaQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaQuit)
}

void CGArenaQuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaQuit::~CGArenaQuit() {
  // @@protoc_insertion_point(destructor:CGArenaQuit)
  SharedDtor();
}

void CGArenaQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaQuit_descriptor_;
}

const CGArenaQuit& CGArenaQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaQuit* CGArenaQuit::default_instance_ = NULL;

CGArenaQuit* CGArenaQuit::New() const {
  return new CGArenaQuit;
}

void CGArenaQuit::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaQuit)
  return false;
#undef DO_
}

void CGArenaQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaQuit)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaQuit)
}

::google::protobuf::uint8* CGArenaQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaQuit)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaQuit)
  return target;
}

int CGArenaQuit::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaQuit::MergeFrom(const CGArenaQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaQuit::CopyFrom(const CGArenaQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaQuit::IsInitialized() const {

  return true;
}

void CGArenaQuit::Swap(CGArenaQuit* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaQuit_descriptor_;
  metadata.reflection = CGArenaQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaBuyChance::CGArenaBuyChance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaBuyChance)
}

void CGArenaBuyChance::InitAsDefaultInstance() {
}

CGArenaBuyChance::CGArenaBuyChance(const CGArenaBuyChance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaBuyChance)
}

void CGArenaBuyChance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaBuyChance::~CGArenaBuyChance() {
  // @@protoc_insertion_point(destructor:CGArenaBuyChance)
  SharedDtor();
}

void CGArenaBuyChance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaBuyChance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaBuyChance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaBuyChance_descriptor_;
}

const CGArenaBuyChance& CGArenaBuyChance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaBuyChance* CGArenaBuyChance::default_instance_ = NULL;

CGArenaBuyChance* CGArenaBuyChance::New() const {
  return new CGArenaBuyChance;
}

void CGArenaBuyChance::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaBuyChance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaBuyChance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaBuyChance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaBuyChance)
  return false;
#undef DO_
}

void CGArenaBuyChance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaBuyChance)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaBuyChance)
}

::google::protobuf::uint8* CGArenaBuyChance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaBuyChance)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaBuyChance)
  return target;
}

int CGArenaBuyChance::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaBuyChance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaBuyChance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaBuyChance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaBuyChance::MergeFrom(const CGArenaBuyChance& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaBuyChance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaBuyChance::CopyFrom(const CGArenaBuyChance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaBuyChance::IsInitialized() const {

  return true;
}

void CGArenaBuyChance::Swap(CGArenaBuyChance* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaBuyChance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaBuyChance_descriptor_;
  metadata.reflection = CGArenaBuyChance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaBuyChance::kResultFieldNumber;
const int GCArenaBuyChance::kRemainTimeFieldNumber;
const int GCArenaBuyChance::kRemainVipBuyTimeFieldNumber;
#endif  // !_MSC_VER

GCArenaBuyChance::GCArenaBuyChance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaBuyChance)
}

void GCArenaBuyChance::InitAsDefaultInstance() {
}

GCArenaBuyChance::GCArenaBuyChance(const GCArenaBuyChance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaBuyChance)
}

void GCArenaBuyChance::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  remaintime_ = 0;
  remainvipbuytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaBuyChance::~GCArenaBuyChance() {
  // @@protoc_insertion_point(destructor:GCArenaBuyChance)
  SharedDtor();
}

void GCArenaBuyChance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCArenaBuyChance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaBuyChance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaBuyChance_descriptor_;
}

const GCArenaBuyChance& GCArenaBuyChance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaBuyChance* GCArenaBuyChance::default_instance_ = NULL;

GCArenaBuyChance* GCArenaBuyChance::New() const {
  return new GCArenaBuyChance;
}

void GCArenaBuyChance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCArenaBuyChance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, remainvipbuytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaBuyChance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaBuyChance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remainTime;
        break;
      }

      // optional int32 remainTime = 2;
      case 2: {
        if (tag == 16) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_remainVipBuyTime;
        break;
      }

      // optional int32 remainVipBuyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_remainVipBuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainvipbuytime_)));
          set_has_remainvipbuytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaBuyChance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaBuyChance)
  return false;
#undef DO_
}

void GCArenaBuyChance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaBuyChance)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 remainTime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaintime(), output);
  }

  // optional int32 remainVipBuyTime = 3;
  if (has_remainvipbuytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remainvipbuytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaBuyChance)
}

::google::protobuf::uint8* GCArenaBuyChance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaBuyChance)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 remainTime = 2;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaintime(), target);
  }

  // optional int32 remainVipBuyTime = 3;
  if (has_remainvipbuytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remainvipbuytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaBuyChance)
  return target;
}

int GCArenaBuyChance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 remainTime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // optional int32 remainVipBuyTime = 3;
    if (has_remainvipbuytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainvipbuytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaBuyChance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaBuyChance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaBuyChance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaBuyChance::MergeFrom(const GCArenaBuyChance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_remainvipbuytime()) {
      set_remainvipbuytime(from.remainvipbuytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaBuyChance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaBuyChance::CopyFrom(const GCArenaBuyChance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaBuyChance::IsInitialized() const {

  return true;
}

void GCArenaBuyChance::Swap(GCArenaBuyChance* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(remainvipbuytime_, other->remainvipbuytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaBuyChance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaBuyChance_descriptor_;
  metadata.reflection = GCArenaBuyChance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaFightRecord::CGArenaFightRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaFightRecord)
}

void CGArenaFightRecord::InitAsDefaultInstance() {
}

CGArenaFightRecord::CGArenaFightRecord(const CGArenaFightRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaFightRecord)
}

void CGArenaFightRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaFightRecord::~CGArenaFightRecord() {
  // @@protoc_insertion_point(destructor:CGArenaFightRecord)
  SharedDtor();
}

void CGArenaFightRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaFightRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaFightRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaFightRecord_descriptor_;
}

const CGArenaFightRecord& CGArenaFightRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaFightRecord* CGArenaFightRecord::default_instance_ = NULL;

CGArenaFightRecord* CGArenaFightRecord::New() const {
  return new CGArenaFightRecord;
}

void CGArenaFightRecord::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaFightRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaFightRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaFightRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaFightRecord)
  return false;
#undef DO_
}

void CGArenaFightRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaFightRecord)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaFightRecord)
}

::google::protobuf::uint8* CGArenaFightRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaFightRecord)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaFightRecord)
  return target;
}

int CGArenaFightRecord::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaFightRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaFightRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaFightRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaFightRecord::MergeFrom(const CGArenaFightRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaFightRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaFightRecord::CopyFrom(const CGArenaFightRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaFightRecord::IsInitialized() const {

  return true;
}

void CGArenaFightRecord::Swap(CGArenaFightRecord* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaFightRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaFightRecord_descriptor_;
  metadata.reflection = CGArenaFightRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaFightRecord::kFightHistroyInfoFieldNumber;
#endif  // !_MSC_VER

GCArenaFightRecord::GCArenaFightRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaFightRecord)
}

void GCArenaFightRecord::InitAsDefaultInstance() {
}

GCArenaFightRecord::GCArenaFightRecord(const GCArenaFightRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaFightRecord)
}

void GCArenaFightRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaFightRecord::~GCArenaFightRecord() {
  // @@protoc_insertion_point(destructor:GCArenaFightRecord)
  SharedDtor();
}

void GCArenaFightRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCArenaFightRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaFightRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaFightRecord_descriptor_;
}

const GCArenaFightRecord& GCArenaFightRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaFightRecord* GCArenaFightRecord::default_instance_ = NULL;

GCArenaFightRecord* GCArenaFightRecord::New() const {
  return new GCArenaFightRecord;
}

void GCArenaFightRecord::Clear() {
  fighthistroyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaFightRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaFightRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightHistroyInfo fightHistroyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_fightHistroyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighthistroyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fightHistroyInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaFightRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaFightRecord)
  return false;
#undef DO_
}

void GCArenaFightRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaFightRecord)
  // repeated .FightHistroyInfo fightHistroyInfo = 1;
  for (int i = 0; i < this->fighthistroyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fighthistroyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaFightRecord)
}

::google::protobuf::uint8* GCArenaFightRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaFightRecord)
  // repeated .FightHistroyInfo fightHistroyInfo = 1;
  for (int i = 0; i < this->fighthistroyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fighthistroyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaFightRecord)
  return target;
}

int GCArenaFightRecord::ByteSize() const {
  int total_size = 0;

  // repeated .FightHistroyInfo fightHistroyInfo = 1;
  total_size += 1 * this->fighthistroyinfo_size();
  for (int i = 0; i < this->fighthistroyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighthistroyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaFightRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaFightRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaFightRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaFightRecord::MergeFrom(const GCArenaFightRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighthistroyinfo_.MergeFrom(from.fighthistroyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaFightRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaFightRecord::CopyFrom(const GCArenaFightRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaFightRecord::IsInitialized() const {

  return true;
}

void GCArenaFightRecord::Swap(GCArenaFightRecord* other) {
  if (other != this) {
    fighthistroyinfo_.Swap(&other->fighthistroyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaFightRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaFightRecord_descriptor_;
  metadata.reflection = GCArenaFightRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGArenaClrCDTime::CGArenaClrCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGArenaClrCDTime)
}

void CGArenaClrCDTime::InitAsDefaultInstance() {
}

CGArenaClrCDTime::CGArenaClrCDTime(const CGArenaClrCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGArenaClrCDTime)
}

void CGArenaClrCDTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGArenaClrCDTime::~CGArenaClrCDTime() {
  // @@protoc_insertion_point(destructor:CGArenaClrCDTime)
  SharedDtor();
}

void CGArenaClrCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGArenaClrCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGArenaClrCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGArenaClrCDTime_descriptor_;
}

const CGArenaClrCDTime& CGArenaClrCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGArenaClrCDTime* CGArenaClrCDTime::default_instance_ = NULL;

CGArenaClrCDTime* CGArenaClrCDTime::New() const {
  return new CGArenaClrCDTime;
}

void CGArenaClrCDTime::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGArenaClrCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGArenaClrCDTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGArenaClrCDTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGArenaClrCDTime)
  return false;
#undef DO_
}

void CGArenaClrCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGArenaClrCDTime)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGArenaClrCDTime)
}

::google::protobuf::uint8* CGArenaClrCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGArenaClrCDTime)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGArenaClrCDTime)
  return target;
}

int CGArenaClrCDTime::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGArenaClrCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGArenaClrCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGArenaClrCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGArenaClrCDTime::MergeFrom(const CGArenaClrCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGArenaClrCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGArenaClrCDTime::CopyFrom(const CGArenaClrCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGArenaClrCDTime::IsInitialized() const {

  return true;
}

void CGArenaClrCDTime::Swap(CGArenaClrCDTime* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGArenaClrCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGArenaClrCDTime_descriptor_;
  metadata.reflection = CGArenaClrCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCArenaClrCDTime::kResultFieldNumber;
#endif  // !_MSC_VER

GCArenaClrCDTime::GCArenaClrCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCArenaClrCDTime)
}

void GCArenaClrCDTime::InitAsDefaultInstance() {
}

GCArenaClrCDTime::GCArenaClrCDTime(const GCArenaClrCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCArenaClrCDTime)
}

void GCArenaClrCDTime::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCArenaClrCDTime::~GCArenaClrCDTime() {
  // @@protoc_insertion_point(destructor:GCArenaClrCDTime)
  SharedDtor();
}

void GCArenaClrCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCArenaClrCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCArenaClrCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCArenaClrCDTime_descriptor_;
}

const GCArenaClrCDTime& GCArenaClrCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCArenaClrCDTime* GCArenaClrCDTime::default_instance_ = NULL;

GCArenaClrCDTime* GCArenaClrCDTime::New() const {
  return new GCArenaClrCDTime;
}

void GCArenaClrCDTime::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCArenaClrCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCArenaClrCDTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCArenaClrCDTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCArenaClrCDTime)
  return false;
#undef DO_
}

void GCArenaClrCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCArenaClrCDTime)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCArenaClrCDTime)
}

::google::protobuf::uint8* GCArenaClrCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCArenaClrCDTime)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCArenaClrCDTime)
  return target;
}

int GCArenaClrCDTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCArenaClrCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCArenaClrCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCArenaClrCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCArenaClrCDTime::MergeFrom(const GCArenaClrCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCArenaClrCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCArenaClrCDTime::CopyFrom(const GCArenaClrCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCArenaClrCDTime::IsInitialized() const {

  return true;
}

void GCArenaClrCDTime::Swap(GCArenaClrCDTime* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCArenaClrCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCArenaClrCDTime_descriptor_;
  metadata.reflection = GCArenaClrCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetArenaShopItems::kStateFieldNumber;
#endif  // !_MSC_VER

CGGetArenaShopItems::CGGetArenaShopItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetArenaShopItems)
}

void CGGetArenaShopItems::InitAsDefaultInstance() {
}

CGGetArenaShopItems::CGGetArenaShopItems(const CGGetArenaShopItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetArenaShopItems)
}

void CGGetArenaShopItems::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetArenaShopItems::~CGGetArenaShopItems() {
  // @@protoc_insertion_point(destructor:CGGetArenaShopItems)
  SharedDtor();
}

void CGGetArenaShopItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetArenaShopItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetArenaShopItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetArenaShopItems_descriptor_;
}

const CGGetArenaShopItems& CGGetArenaShopItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGGetArenaShopItems* CGGetArenaShopItems::default_instance_ = NULL;

CGGetArenaShopItems* CGGetArenaShopItems::New() const {
  return new CGGetArenaShopItems;
}

void CGGetArenaShopItems::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetArenaShopItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetArenaShopItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetArenaShopItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetArenaShopItems)
  return false;
#undef DO_
}

void CGGetArenaShopItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetArenaShopItems)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetArenaShopItems)
}

::google::protobuf::uint8* CGGetArenaShopItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetArenaShopItems)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetArenaShopItems)
  return target;
}

int CGGetArenaShopItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetArenaShopItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetArenaShopItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetArenaShopItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetArenaShopItems::MergeFrom(const CGGetArenaShopItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetArenaShopItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetArenaShopItems::CopyFrom(const CGGetArenaShopItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetArenaShopItems::IsInitialized() const {

  return true;
}

void CGGetArenaShopItems::Swap(CGGetArenaShopItems* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetArenaShopItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetArenaShopItems_descriptor_;
  metadata.reflection = CGGetArenaShopItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetArenaShopItemsBack::kStateFieldNumber;
const int GCGetArenaShopItemsBack::kItem1ListFieldNumber;
const int GCGetArenaShopItemsBack::kItem2ListFieldNumber;
#endif  // !_MSC_VER

GCGetArenaShopItemsBack::GCGetArenaShopItemsBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetArenaShopItemsBack)
}

void GCGetArenaShopItemsBack::InitAsDefaultInstance() {
}

GCGetArenaShopItemsBack::GCGetArenaShopItemsBack(const GCGetArenaShopItemsBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetArenaShopItemsBack)
}

void GCGetArenaShopItemsBack::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetArenaShopItemsBack::~GCGetArenaShopItemsBack() {
  // @@protoc_insertion_point(destructor:GCGetArenaShopItemsBack)
  SharedDtor();
}

void GCGetArenaShopItemsBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetArenaShopItemsBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetArenaShopItemsBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetArenaShopItemsBack_descriptor_;
}

const GCGetArenaShopItemsBack& GCGetArenaShopItemsBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCGetArenaShopItemsBack* GCGetArenaShopItemsBack::default_instance_ = NULL;

GCGetArenaShopItemsBack* GCGetArenaShopItemsBack::New() const {
  return new GCGetArenaShopItemsBack;
}

void GCGetArenaShopItemsBack::Clear() {
  state_ = 0;
  item1list_.Clear();
  item2list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetArenaShopItemsBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetArenaShopItemsBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item1List;
        break;
      }

      // repeated .EntryIntInt item1List = 2;
      case 2: {
        if (tag == 18) {
         parse_item1List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item1list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item1List;
        if (input->ExpectTag(26)) goto parse_item2List;
        break;
      }

      // repeated .EntryIntInt item2List = 3;
      case 3: {
        if (tag == 26) {
         parse_item2List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item2list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item2List;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetArenaShopItemsBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetArenaShopItemsBack)
  return false;
#undef DO_
}

void GCGetArenaShopItemsBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetArenaShopItemsBack)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .EntryIntInt item1List = 2;
  for (int i = 0; i < this->item1list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item1list(i), output);
  }

  // repeated .EntryIntInt item2List = 3;
  for (int i = 0; i < this->item2list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item2list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetArenaShopItemsBack)
}

::google::protobuf::uint8* GCGetArenaShopItemsBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetArenaShopItemsBack)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated .EntryIntInt item1List = 2;
  for (int i = 0; i < this->item1list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item1list(i), target);
  }

  // repeated .EntryIntInt item2List = 3;
  for (int i = 0; i < this->item2list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item2list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetArenaShopItemsBack)
  return target;
}

int GCGetArenaShopItemsBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .EntryIntInt item1List = 2;
  total_size += 1 * this->item1list_size();
  for (int i = 0; i < this->item1list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item1list(i));
  }

  // repeated .EntryIntInt item2List = 3;
  total_size += 1 * this->item2list_size();
  for (int i = 0; i < this->item2list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item2list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetArenaShopItemsBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetArenaShopItemsBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetArenaShopItemsBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetArenaShopItemsBack::MergeFrom(const GCGetArenaShopItemsBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  item1list_.MergeFrom(from.item1list_);
  item2list_.MergeFrom(from.item2list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetArenaShopItemsBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetArenaShopItemsBack::CopyFrom(const GCGetArenaShopItemsBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetArenaShopItemsBack::IsInitialized() const {

  return true;
}

void GCGetArenaShopItemsBack::Swap(GCGetArenaShopItemsBack* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    item1list_.Swap(&other->item1list_);
    item2list_.Swap(&other->item2list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetArenaShopItemsBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetArenaShopItemsBack_descriptor_;
  metadata.reflection = GCGetArenaShopItemsBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGExchangeArenaShopItem::kIdFieldNumber;
#endif  // !_MSC_VER

CGExchangeArenaShopItem::CGExchangeArenaShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExchangeArenaShopItem)
}

void CGExchangeArenaShopItem::InitAsDefaultInstance() {
}

CGExchangeArenaShopItem::CGExchangeArenaShopItem(const CGExchangeArenaShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExchangeArenaShopItem)
}

void CGExchangeArenaShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExchangeArenaShopItem::~CGExchangeArenaShopItem() {
  // @@protoc_insertion_point(destructor:CGExchangeArenaShopItem)
  SharedDtor();
}

void CGExchangeArenaShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGExchangeArenaShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExchangeArenaShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExchangeArenaShopItem_descriptor_;
}

const CGExchangeArenaShopItem& CGExchangeArenaShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

CGExchangeArenaShopItem* CGExchangeArenaShopItem::default_instance_ = NULL;

CGExchangeArenaShopItem* CGExchangeArenaShopItem::New() const {
  return new CGExchangeArenaShopItem;
}

void CGExchangeArenaShopItem::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExchangeArenaShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExchangeArenaShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGExchangeArenaShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExchangeArenaShopItem)
  return false;
#undef DO_
}

void CGExchangeArenaShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExchangeArenaShopItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExchangeArenaShopItem)
}

::google::protobuf::uint8* CGExchangeArenaShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExchangeArenaShopItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExchangeArenaShopItem)
  return target;
}

int CGExchangeArenaShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExchangeArenaShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExchangeArenaShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExchangeArenaShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExchangeArenaShopItem::MergeFrom(const CGExchangeArenaShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExchangeArenaShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExchangeArenaShopItem::CopyFrom(const CGExchangeArenaShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExchangeArenaShopItem::IsInitialized() const {

  return true;
}

void CGExchangeArenaShopItem::Swap(CGExchangeArenaShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExchangeArenaShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExchangeArenaShopItem_descriptor_;
  metadata.reflection = CGExchangeArenaShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCExchangeArenaShopItem::kResultFieldNumber;
const int GCExchangeArenaShopItem::kCreditFieldNumber;
const int GCExchangeArenaShopItem::kArenaCoinFieldNumber;
const int GCExchangeArenaShopItem::kItemInfoFieldNumber;
#endif  // !_MSC_VER

GCExchangeArenaShopItem::GCExchangeArenaShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCExchangeArenaShopItem)
}

void GCExchangeArenaShopItem::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::EntryIntInt*>(&::EntryIntInt::default_instance());
}

GCExchangeArenaShopItem::GCExchangeArenaShopItem(const GCExchangeArenaShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCExchangeArenaShopItem)
}

void GCExchangeArenaShopItem::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  credit_ = 0;
  arenacoin_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCExchangeArenaShopItem::~GCExchangeArenaShopItem() {
  // @@protoc_insertion_point(destructor:GCExchangeArenaShopItem)
  SharedDtor();
}

void GCExchangeArenaShopItem::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void GCExchangeArenaShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCExchangeArenaShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCExchangeArenaShopItem_descriptor_;
}

const GCExchangeArenaShopItem& GCExchangeArenaShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

GCExchangeArenaShopItem* GCExchangeArenaShopItem::default_instance_ = NULL;

GCExchangeArenaShopItem* GCExchangeArenaShopItem::New() const {
  return new GCExchangeArenaShopItem;
}

void GCExchangeArenaShopItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCExchangeArenaShopItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, credit_);
    arenacoin_ = 0;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::EntryIntInt::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCExchangeArenaShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCExchangeArenaShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_credit;
        break;
      }

      // optional int32 credit = 2;
      case 2: {
        if (tag == 16) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_arenaCoin;
        break;
      }

      // optional int32 arenaCoin = 3;
      case 3: {
        if (tag == 24) {
         parse_arenaCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_itemInfo;
        break;
      }

      // optional .EntryIntInt itemInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCExchangeArenaShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCExchangeArenaShopItem)
  return false;
#undef DO_
}

void GCExchangeArenaShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCExchangeArenaShopItem)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  // optional int32 arenaCoin = 3;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arenacoin(), output);
  }

  // optional .EntryIntInt itemInfo = 4;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCExchangeArenaShopItem)
}

::google::protobuf::uint8* GCExchangeArenaShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCExchangeArenaShopItem)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  // optional int32 arenaCoin = 3;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arenacoin(), target);
  }

  // optional .EntryIntInt itemInfo = 4;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCExchangeArenaShopItem)
  return target;
}

int GCExchangeArenaShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 credit = 2;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 arenaCoin = 3;
    if (has_arenacoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenacoin());
    }

    // optional .EntryIntInt itemInfo = 4;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCExchangeArenaShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCExchangeArenaShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCExchangeArenaShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCExchangeArenaShopItem::MergeFrom(const GCExchangeArenaShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::EntryIntInt::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCExchangeArenaShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCExchangeArenaShopItem::CopyFrom(const GCExchangeArenaShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExchangeArenaShopItem::IsInitialized() const {

  return true;
}

void GCExchangeArenaShopItem::Swap(GCExchangeArenaShopItem* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(credit_, other->credit_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCExchangeArenaShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCExchangeArenaShopItem_descriptor_;
  metadata.reflection = GCExchangeArenaShopItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
