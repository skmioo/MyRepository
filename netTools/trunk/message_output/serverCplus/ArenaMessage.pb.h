// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMessage.proto

#ifndef PROTOBUF_ArenaMessage_2eproto__INCLUDED
#define PROTOBUF_ArenaMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
#include "ShopMessage.pb.h"
#include "CommonMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArenaMessage_2eproto();
void protobuf_AssignDesc_ArenaMessage_2eproto();
void protobuf_ShutdownFile_ArenaMessage_2eproto();

class ArenaInfo;
class FightHistroyInfo;
class CGArenaOpen;
class GCArenaOpen;
class CGArenaFight;
class GCArenaFight;
class GCArenaFightResult;
class CGArenaDivisionUp;
class CGArenaQuit;
class CGArenaBuyChance;
class GCArenaBuyChance;
class CGArenaFightRecord;
class GCArenaFightRecord;
class CGArenaClrCDTime;
class GCArenaClrCDTime;
class CGGetArenaShopItems;
class GCGetArenaShopItemsBack;
class CGExchangeArenaShopItem;
class GCExchangeArenaShopItem;

// ===================================================================

class ArenaInfo : public ::google::protobuf::Message {
 public:
  ArenaInfo();
  virtual ~ArenaInfo();

  ArenaInfo(const ArenaInfo& from);

  inline ArenaInfo& operator=(const ArenaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfo& default_instance();

  void Swap(ArenaInfo* other);

  // implements Message ----------------------------------------------

  ArenaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfo& from);
  void MergeFrom(const ArenaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 fightValue = 3;
  inline bool has_fightvalue() const;
  inline void clear_fightvalue();
  static const int kFightValueFieldNumber = 3;
  inline ::google::protobuf::int32 fightvalue() const;
  inline void set_fightvalue(::google::protobuf::int32 value);

  // optional int32 division = 4;
  inline bool has_division() const;
  inline void clear_division();
  static const int kDivisionFieldNumber = 4;
  inline ::google::protobuf::int32 division() const;
  inline void set_division(::google::protobuf::int32 value);

  // optional int32 isDivisionUp = 5;
  inline bool has_isdivisionup() const;
  inline void clear_isdivisionup();
  static const int kIsDivisionUpFieldNumber = 5;
  inline ::google::protobuf::int32 isdivisionup() const;
  inline void set_isdivisionup(::google::protobuf::int32 value);

  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 points = 7;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 7;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional int32 arenaCoin = 8;
  inline bool has_arenacoin() const;
  inline void clear_arenacoin();
  static const int kArenaCoinFieldNumber = 8;
  inline ::google::protobuf::int32 arenacoin() const;
  inline void set_arenacoin(::google::protobuf::int32 value);

  // optional int32 remainTime = 9;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 9;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // optional int32 cdTime = 10;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdTimeFieldNumber = 10;
  inline ::google::protobuf::int32 cdtime() const;
  inline void set_cdtime(::google::protobuf::int32 value);

  // optional int32 isCanFight = 12;
  inline bool has_iscanfight() const;
  inline void clear_iscanfight();
  static const int kIsCanFightFieldNumber = 12;
  inline ::google::protobuf::int32 iscanfight() const;
  inline void set_iscanfight(::google::protobuf::int32 value);

  // optional .CharacterInfo characterInfo = 13;
  inline bool has_characterinfo() const;
  inline void clear_characterinfo();
  static const int kCharacterInfoFieldNumber = 13;
  inline const ::CharacterInfo& characterinfo() const;
  inline ::CharacterInfo* mutable_characterinfo();
  inline ::CharacterInfo* release_characterinfo();
  inline void set_allocated_characterinfo(::CharacterInfo* characterinfo);

  // optional int32 rankOffset = 14;
  inline bool has_rankoffset() const;
  inline void clear_rankoffset();
  static const int kRankOffsetFieldNumber = 14;
  inline ::google::protobuf::int32 rankoffset() const;
  inline void set_rankoffset(::google::protobuf::int32 value);

  // optional int32 headIcon = 15;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadIconFieldNumber = 15;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);

  // optional int32 divisionRank = 16;
  inline bool has_divisionrank() const;
  inline void clear_divisionrank();
  static const int kDivisionRankFieldNumber = 16;
  inline ::google::protobuf::int32 divisionrank() const;
  inline void set_divisionrank(::google::protobuf::int32 value);

  // optional int32 petConfigId = 17;
  inline bool has_petconfigid() const;
  inline void clear_petconfigid();
  static const int kPetConfigIdFieldNumber = 17;
  inline ::google::protobuf::int32 petconfigid() const;
  inline void set_petconfigid(::google::protobuf::int32 value);

  // optional int32 remainVipBuyTime = 18;
  inline bool has_remainvipbuytime() const;
  inline void clear_remainvipbuytime();
  static const int kRemainVipBuyTimeFieldNumber = 18;
  inline ::google::protobuf::int32 remainvipbuytime() const;
  inline void set_remainvipbuytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArenaInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fightvalue();
  inline void clear_has_fightvalue();
  inline void set_has_division();
  inline void clear_has_division();
  inline void set_has_isdivisionup();
  inline void clear_has_isdivisionup();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_arenacoin();
  inline void clear_has_arenacoin();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();
  inline void set_has_iscanfight();
  inline void clear_has_iscanfight();
  inline void set_has_characterinfo();
  inline void clear_has_characterinfo();
  inline void set_has_rankoffset();
  inline void clear_has_rankoffset();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  inline void set_has_divisionrank();
  inline void clear_has_divisionrank();
  inline void set_has_petconfigid();
  inline void clear_has_petconfigid();
  inline void set_has_remainvipbuytime();
  inline void clear_has_remainvipbuytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 fightvalue_;
  ::google::protobuf::int32 division_;
  ::google::protobuf::int32 isdivisionup_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::int32 arenacoin_;
  ::google::protobuf::int32 remaintime_;
  ::google::protobuf::int32 cdtime_;
  ::CharacterInfo* characterinfo_;
  ::google::protobuf::int32 iscanfight_;
  ::google::protobuf::int32 rankoffset_;
  ::google::protobuf::int32 headicon_;
  ::google::protobuf::int32 divisionrank_;
  ::google::protobuf::int32 petconfigid_;
  ::google::protobuf::int32 remainvipbuytime_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfo* default_instance_;
};
// -------------------------------------------------------------------

class FightHistroyInfo : public ::google::protobuf::Message {
 public:
  FightHistroyInfo();
  virtual ~FightHistroyInfo();

  FightHistroyInfo(const FightHistroyInfo& from);

  inline FightHistroyInfo& operator=(const FightHistroyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightHistroyInfo& default_instance();

  void Swap(FightHistroyInfo* other);

  // implements Message ----------------------------------------------

  FightHistroyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightHistroyInfo& from);
  void MergeFrom(const FightHistroyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 isChange = 2;
  inline bool has_ischange() const;
  inline void clear_ischange();
  static const int kIsChangeFieldNumber = 2;
  inline ::google::protobuf::int32 ischange() const;
  inline void set_ischange(::google::protobuf::int32 value);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 rankOffset = 4;
  inline bool has_rankoffset() const;
  inline void clear_rankoffset();
  static const int kRankOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 rankoffset() const;
  inline void set_rankoffset(::google::protobuf::int32 value);

  // optional int64 enemyID = 5;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIDFieldNumber = 5;
  inline ::google::protobuf::int64 enemyid() const;
  inline void set_enemyid(::google::protobuf::int64 value);

  // optional string enemyName = 6;
  inline bool has_enemyname() const;
  inline void clear_enemyname();
  static const int kEnemyNameFieldNumber = 6;
  inline const ::std::string& enemyname() const;
  inline void set_enemyname(const ::std::string& value);
  inline void set_enemyname(const char* value);
  inline void set_enemyname(const char* value, size_t size);
  inline ::std::string* mutable_enemyname();
  inline ::std::string* release_enemyname();
  inline void set_allocated_enemyname(::std::string* enemyname);

  // optional int64 fightTime = 7;
  inline bool has_fighttime() const;
  inline void clear_fighttime();
  static const int kFightTimeFieldNumber = 7;
  inline ::google::protobuf::int64 fighttime() const;
  inline void set_fighttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:FightHistroyInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ischange();
  inline void clear_has_ischange();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rankoffset();
  inline void clear_has_rankoffset();
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_enemyname();
  inline void clear_has_enemyname();
  inline void set_has_fighttime();
  inline void clear_has_fighttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 ischange_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 rankoffset_;
  ::google::protobuf::int64 enemyid_;
  ::std::string* enemyname_;
  ::google::protobuf::int64 fighttime_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static FightHistroyInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaOpen : public ::google::protobuf::Message {
 public:
  CGArenaOpen();
  virtual ~CGArenaOpen();

  CGArenaOpen(const CGArenaOpen& from);

  inline CGArenaOpen& operator=(const CGArenaOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaOpen& default_instance();

  void Swap(CGArenaOpen* other);

  // implements Message ----------------------------------------------

  CGArenaOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaOpen& from);
  void MergeFrom(const CGArenaOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaOpen)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaOpen* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaOpen : public ::google::protobuf::Message {
 public:
  GCArenaOpen();
  virtual ~GCArenaOpen();

  GCArenaOpen(const GCArenaOpen& from);

  inline GCArenaOpen& operator=(const GCArenaOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaOpen& default_instance();

  void Swap(GCArenaOpen* other);

  // implements Message ----------------------------------------------

  GCArenaOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaOpen& from);
  void MergeFrom(const GCArenaOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ArenaInfo arenaInfo = 1;
  inline bool has_arenainfo() const;
  inline void clear_arenainfo();
  static const int kArenaInfoFieldNumber = 1;
  inline const ::ArenaInfo& arenainfo() const;
  inline ::ArenaInfo* mutable_arenainfo();
  inline ::ArenaInfo* release_arenainfo();
  inline void set_allocated_arenainfo(::ArenaInfo* arenainfo);

  // repeated .ArenaInfo arenaInfoList = 2;
  inline int arenainfolist_size() const;
  inline void clear_arenainfolist();
  static const int kArenaInfoListFieldNumber = 2;
  inline const ::ArenaInfo& arenainfolist(int index) const;
  inline ::ArenaInfo* mutable_arenainfolist(int index);
  inline ::ArenaInfo* add_arenainfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ArenaInfo >&
      arenainfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ArenaInfo >*
      mutable_arenainfolist();

  // @@protoc_insertion_point(class_scope:GCArenaOpen)
 private:
  inline void set_has_arenainfo();
  inline void clear_has_arenainfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ArenaInfo* arenainfo_;
  ::google::protobuf::RepeatedPtrField< ::ArenaInfo > arenainfolist_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaOpen* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaFight : public ::google::protobuf::Message {
 public:
  CGArenaFight();
  virtual ~CGArenaFight();

  CGArenaFight(const CGArenaFight& from);

  inline CGArenaFight& operator=(const CGArenaFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaFight& default_instance();

  void Swap(CGArenaFight* other);

  // implements Message ----------------------------------------------

  CGArenaFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaFight& from);
  void MergeFrom(const CGArenaFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pkID = 1;
  inline bool has_pkid() const;
  inline void clear_pkid();
  static const int kPkIDFieldNumber = 1;
  inline ::google::protobuf::int64 pkid() const;
  inline void set_pkid(::google::protobuf::int64 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 devision = 3;
  inline bool has_devision() const;
  inline void clear_devision();
  static const int kDevisionFieldNumber = 3;
  inline ::google::protobuf::int32 devision() const;
  inline void set_devision(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGArenaFight)
 private:
  inline void set_has_pkid();
  inline void clear_has_pkid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_devision();
  inline void clear_has_devision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pkid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 devision_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaFight* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaFight : public ::google::protobuf::Message {
 public:
  GCArenaFight();
  virtual ~GCArenaFight();

  GCArenaFight(const GCArenaFight& from);

  inline GCArenaFight& operator=(const GCArenaFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaFight& default_instance();

  void Swap(GCArenaFight* other);

  // implements Message ----------------------------------------------

  GCArenaFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaFight& from);
  void MergeFrom(const GCArenaFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flg = 1;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFlgFieldNumber = 1;
  inline ::google::protobuf::int32 flg() const;
  inline void set_flg(::google::protobuf::int32 value);

  // optional int32 senceId = 2;
  inline bool has_senceid() const;
  inline void clear_senceid();
  static const int kSenceIdFieldNumber = 2;
  inline ::google::protobuf::int32 senceid() const;
  inline void set_senceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCArenaFight)
 private:
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_senceid();
  inline void clear_has_senceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flg_;
  ::google::protobuf::int32 senceid_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaFight* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaFightResult : public ::google::protobuf::Message {
 public:
  GCArenaFightResult();
  virtual ~GCArenaFightResult();

  GCArenaFightResult(const GCArenaFightResult& from);

  inline GCArenaFightResult& operator=(const GCArenaFightResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaFightResult& default_instance();

  void Swap(GCArenaFightResult* other);

  // implements Message ----------------------------------------------

  GCArenaFightResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaFightResult& from);
  void MergeFrom(const GCArenaFightResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 isDivisionUp = 1;
  inline bool has_isdivisionup() const;
  inline void clear_isdivisionup();
  static const int kIsDivisionUpFieldNumber = 1;
  inline ::google::protobuf::int32 isdivisionup() const;
  inline void set_isdivisionup(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 isExchange = 3;
  inline bool has_isexchange() const;
  inline void clear_isexchange();
  static const int kIsExchangeFieldNumber = 3;
  inline ::google::protobuf::int32 isexchange() const;
  inline void set_isexchange(::google::protobuf::int32 value);

  // optional .ArenaInfo selfInfo = 4;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfInfoFieldNumber = 4;
  inline const ::ArenaInfo& selfinfo() const;
  inline ::ArenaInfo* mutable_selfinfo();
  inline ::ArenaInfo* release_selfinfo();
  inline void set_allocated_selfinfo(::ArenaInfo* selfinfo);

  // optional .ArenaInfo enemyInfo = 5;
  inline bool has_enemyinfo() const;
  inline void clear_enemyinfo();
  static const int kEnemyInfoFieldNumber = 5;
  inline const ::ArenaInfo& enemyinfo() const;
  inline ::ArenaInfo* mutable_enemyinfo();
  inline ::ArenaInfo* release_enemyinfo();
  inline void set_allocated_enemyinfo(::ArenaInfo* enemyinfo);

  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 arenaCoin = 7;
  inline bool has_arenacoin() const;
  inline void clear_arenacoin();
  static const int kArenaCoinFieldNumber = 7;
  inline ::google::protobuf::int32 arenacoin() const;
  inline void set_arenacoin(::google::protobuf::int32 value);

  // repeated .ItemInfo fightReward = 8;
  inline int fightreward_size() const;
  inline void clear_fightreward();
  static const int kFightRewardFieldNumber = 8;
  inline const ::ItemInfo& fightreward(int index) const;
  inline ::ItemInfo* mutable_fightreward(int index);
  inline ::ItemInfo* add_fightreward();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
      fightreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
      mutable_fightreward();

  // repeated .ItemInfo divisionUpRewards = 9;
  inline int divisionuprewards_size() const;
  inline void clear_divisionuprewards();
  static const int kDivisionUpRewardsFieldNumber = 9;
  inline const ::ItemInfo& divisionuprewards(int index) const;
  inline ::ItemInfo* mutable_divisionuprewards(int index);
  inline ::ItemInfo* add_divisionuprewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
      divisionuprewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
      mutable_divisionuprewards();

  // @@protoc_insertion_point(class_scope:GCArenaFightResult)
 private:
  inline void set_has_isdivisionup();
  inline void clear_has_isdivisionup();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_isexchange();
  inline void clear_has_isexchange();
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();
  inline void set_has_enemyinfo();
  inline void clear_has_enemyinfo();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_arenacoin();
  inline void clear_has_arenacoin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 isdivisionup_;
  ::google::protobuf::int32 result_;
  ::ArenaInfo* selfinfo_;
  ::google::protobuf::int32 isexchange_;
  ::google::protobuf::int32 exp_;
  ::ArenaInfo* enemyinfo_;
  ::google::protobuf::RepeatedPtrField< ::ItemInfo > fightreward_;
  ::google::protobuf::RepeatedPtrField< ::ItemInfo > divisionuprewards_;
  ::google::protobuf::int32 arenacoin_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaFightResult* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaDivisionUp : public ::google::protobuf::Message {
 public:
  CGArenaDivisionUp();
  virtual ~CGArenaDivisionUp();

  CGArenaDivisionUp(const CGArenaDivisionUp& from);

  inline CGArenaDivisionUp& operator=(const CGArenaDivisionUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaDivisionUp& default_instance();

  void Swap(CGArenaDivisionUp* other);

  // implements Message ----------------------------------------------

  CGArenaDivisionUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaDivisionUp& from);
  void MergeFrom(const CGArenaDivisionUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaDivisionUp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaDivisionUp* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaQuit : public ::google::protobuf::Message {
 public:
  CGArenaQuit();
  virtual ~CGArenaQuit();

  CGArenaQuit(const CGArenaQuit& from);

  inline CGArenaQuit& operator=(const CGArenaQuit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaQuit& default_instance();

  void Swap(CGArenaQuit* other);

  // implements Message ----------------------------------------------

  CGArenaQuit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaQuit& from);
  void MergeFrom(const CGArenaQuit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaQuit)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaQuit* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaBuyChance : public ::google::protobuf::Message {
 public:
  CGArenaBuyChance();
  virtual ~CGArenaBuyChance();

  CGArenaBuyChance(const CGArenaBuyChance& from);

  inline CGArenaBuyChance& operator=(const CGArenaBuyChance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaBuyChance& default_instance();

  void Swap(CGArenaBuyChance* other);

  // implements Message ----------------------------------------------

  CGArenaBuyChance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaBuyChance& from);
  void MergeFrom(const CGArenaBuyChance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaBuyChance)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaBuyChance* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaBuyChance : public ::google::protobuf::Message {
 public:
  GCArenaBuyChance();
  virtual ~GCArenaBuyChance();

  GCArenaBuyChance(const GCArenaBuyChance& from);

  inline GCArenaBuyChance& operator=(const GCArenaBuyChance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaBuyChance& default_instance();

  void Swap(GCArenaBuyChance* other);

  // implements Message ----------------------------------------------

  GCArenaBuyChance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaBuyChance& from);
  void MergeFrom(const GCArenaBuyChance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 remainTime = 2;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::int32 remaintime() const;
  inline void set_remaintime(::google::protobuf::int32 value);

  // optional int32 remainVipBuyTime = 3;
  inline bool has_remainvipbuytime() const;
  inline void clear_remainvipbuytime();
  static const int kRemainVipBuyTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remainvipbuytime() const;
  inline void set_remainvipbuytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCArenaBuyChance)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_remainvipbuytime();
  inline void clear_has_remainvipbuytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 remaintime_;
  ::google::protobuf::int32 remainvipbuytime_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaBuyChance* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaFightRecord : public ::google::protobuf::Message {
 public:
  CGArenaFightRecord();
  virtual ~CGArenaFightRecord();

  CGArenaFightRecord(const CGArenaFightRecord& from);

  inline CGArenaFightRecord& operator=(const CGArenaFightRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaFightRecord& default_instance();

  void Swap(CGArenaFightRecord* other);

  // implements Message ----------------------------------------------

  CGArenaFightRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaFightRecord& from);
  void MergeFrom(const CGArenaFightRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaFightRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaFightRecord* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaFightRecord : public ::google::protobuf::Message {
 public:
  GCArenaFightRecord();
  virtual ~GCArenaFightRecord();

  GCArenaFightRecord(const GCArenaFightRecord& from);

  inline GCArenaFightRecord& operator=(const GCArenaFightRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaFightRecord& default_instance();

  void Swap(GCArenaFightRecord* other);

  // implements Message ----------------------------------------------

  GCArenaFightRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaFightRecord& from);
  void MergeFrom(const GCArenaFightRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightHistroyInfo fightHistroyInfo = 1;
  inline int fighthistroyinfo_size() const;
  inline void clear_fighthistroyinfo();
  static const int kFightHistroyInfoFieldNumber = 1;
  inline const ::FightHistroyInfo& fighthistroyinfo(int index) const;
  inline ::FightHistroyInfo* mutable_fighthistroyinfo(int index);
  inline ::FightHistroyInfo* add_fighthistroyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::FightHistroyInfo >&
      fighthistroyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightHistroyInfo >*
      mutable_fighthistroyinfo();

  // @@protoc_insertion_point(class_scope:GCArenaFightRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightHistroyInfo > fighthistroyinfo_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaFightRecord* default_instance_;
};
// -------------------------------------------------------------------

class CGArenaClrCDTime : public ::google::protobuf::Message {
 public:
  CGArenaClrCDTime();
  virtual ~CGArenaClrCDTime();

  CGArenaClrCDTime(const CGArenaClrCDTime& from);

  inline CGArenaClrCDTime& operator=(const CGArenaClrCDTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGArenaClrCDTime& default_instance();

  void Swap(CGArenaClrCDTime* other);

  // implements Message ----------------------------------------------

  CGArenaClrCDTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGArenaClrCDTime& from);
  void MergeFrom(const CGArenaClrCDTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGArenaClrCDTime)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGArenaClrCDTime* default_instance_;
};
// -------------------------------------------------------------------

class GCArenaClrCDTime : public ::google::protobuf::Message {
 public:
  GCArenaClrCDTime();
  virtual ~GCArenaClrCDTime();

  GCArenaClrCDTime(const GCArenaClrCDTime& from);

  inline GCArenaClrCDTime& operator=(const GCArenaClrCDTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCArenaClrCDTime& default_instance();

  void Swap(GCArenaClrCDTime* other);

  // implements Message ----------------------------------------------

  GCArenaClrCDTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCArenaClrCDTime& from);
  void MergeFrom(const GCArenaClrCDTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCArenaClrCDTime)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCArenaClrCDTime* default_instance_;
};
// -------------------------------------------------------------------

class CGGetArenaShopItems : public ::google::protobuf::Message {
 public:
  CGGetArenaShopItems();
  virtual ~CGGetArenaShopItems();

  CGGetArenaShopItems(const CGGetArenaShopItems& from);

  inline CGGetArenaShopItems& operator=(const CGGetArenaShopItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetArenaShopItems& default_instance();

  void Swap(CGGetArenaShopItems* other);

  // implements Message ----------------------------------------------

  CGGetArenaShopItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetArenaShopItems& from);
  void MergeFrom(const CGGetArenaShopItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGetArenaShopItems)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetArenaShopItems* default_instance_;
};
// -------------------------------------------------------------------

class GCGetArenaShopItemsBack : public ::google::protobuf::Message {
 public:
  GCGetArenaShopItemsBack();
  virtual ~GCGetArenaShopItemsBack();

  GCGetArenaShopItemsBack(const GCGetArenaShopItemsBack& from);

  inline GCGetArenaShopItemsBack& operator=(const GCGetArenaShopItemsBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetArenaShopItemsBack& default_instance();

  void Swap(GCGetArenaShopItemsBack* other);

  // implements Message ----------------------------------------------

  GCGetArenaShopItemsBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetArenaShopItemsBack& from);
  void MergeFrom(const GCGetArenaShopItemsBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated .EntryIntInt item1List = 2;
  inline int item1list_size() const;
  inline void clear_item1list();
  static const int kItem1ListFieldNumber = 2;
  inline const ::EntryIntInt& item1list(int index) const;
  inline ::EntryIntInt* mutable_item1list(int index);
  inline ::EntryIntInt* add_item1list();
  inline const ::google::protobuf::RepeatedPtrField< ::EntryIntInt >&
      item1list() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntryIntInt >*
      mutable_item1list();

  // repeated .EntryIntInt item2List = 3;
  inline int item2list_size() const;
  inline void clear_item2list();
  static const int kItem2ListFieldNumber = 3;
  inline const ::EntryIntInt& item2list(int index) const;
  inline ::EntryIntInt* mutable_item2list(int index);
  inline ::EntryIntInt* add_item2list();
  inline const ::google::protobuf::RepeatedPtrField< ::EntryIntInt >&
      item2list() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntryIntInt >*
      mutable_item2list();

  // @@protoc_insertion_point(class_scope:GCGetArenaShopItemsBack)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::EntryIntInt > item1list_;
  ::google::protobuf::RepeatedPtrField< ::EntryIntInt > item2list_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetArenaShopItemsBack* default_instance_;
};
// -------------------------------------------------------------------

class CGExchangeArenaShopItem : public ::google::protobuf::Message {
 public:
  CGExchangeArenaShopItem();
  virtual ~CGExchangeArenaShopItem();

  CGExchangeArenaShopItem(const CGExchangeArenaShopItem& from);

  inline CGExchangeArenaShopItem& operator=(const CGExchangeArenaShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGExchangeArenaShopItem& default_instance();

  void Swap(CGExchangeArenaShopItem* other);

  // implements Message ----------------------------------------------

  CGExchangeArenaShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGExchangeArenaShopItem& from);
  void MergeFrom(const CGExchangeArenaShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGExchangeArenaShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static CGExchangeArenaShopItem* default_instance_;
};
// -------------------------------------------------------------------

class GCExchangeArenaShopItem : public ::google::protobuf::Message {
 public:
  GCExchangeArenaShopItem();
  virtual ~GCExchangeArenaShopItem();

  GCExchangeArenaShopItem(const GCExchangeArenaShopItem& from);

  inline GCExchangeArenaShopItem& operator=(const GCExchangeArenaShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCExchangeArenaShopItem& default_instance();

  void Swap(GCExchangeArenaShopItem* other);

  // implements Message ----------------------------------------------

  GCExchangeArenaShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCExchangeArenaShopItem& from);
  void MergeFrom(const GCExchangeArenaShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 credit = 2;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional int32 arenaCoin = 3;
  inline bool has_arenacoin() const;
  inline void clear_arenacoin();
  static const int kArenaCoinFieldNumber = 3;
  inline ::google::protobuf::int32 arenacoin() const;
  inline void set_arenacoin(::google::protobuf::int32 value);

  // optional .EntryIntInt itemInfo = 4;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 4;
  inline const ::EntryIntInt& iteminfo() const;
  inline ::EntryIntInt* mutable_iteminfo();
  inline ::EntryIntInt* release_iteminfo();
  inline void set_allocated_iteminfo(::EntryIntInt* iteminfo);

  // @@protoc_insertion_point(class_scope:GCExchangeArenaShopItem)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_arenacoin();
  inline void clear_has_arenacoin();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 credit_;
  ::EntryIntInt* iteminfo_;
  ::google::protobuf::int32 arenacoin_;
  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static GCExchangeArenaShopItem* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaInfo

// optional int64 playerID = 1;
inline bool ArenaInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ArenaInfo::playerid() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.playerID)
  return playerid_;
}
inline void ArenaInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.playerID)
}

// optional string name = 2;
inline bool ArenaInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ArenaInfo::name() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.name)
  return *name_;
}
inline void ArenaInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ArenaInfo.name)
}
inline void ArenaInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ArenaInfo.name)
}
inline void ArenaInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArenaInfo.name)
}
inline ::std::string* ArenaInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ArenaInfo.name)
  return name_;
}
inline ::std::string* ArenaInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ArenaInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ArenaInfo.name)
}

// optional int32 fightValue = 3;
inline bool ArenaInfo::has_fightvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaInfo::set_has_fightvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaInfo::clear_has_fightvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaInfo::clear_fightvalue() {
  fightvalue_ = 0;
  clear_has_fightvalue();
}
inline ::google::protobuf::int32 ArenaInfo::fightvalue() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.fightValue)
  return fightvalue_;
}
inline void ArenaInfo::set_fightvalue(::google::protobuf::int32 value) {
  set_has_fightvalue();
  fightvalue_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.fightValue)
}

// optional int32 division = 4;
inline bool ArenaInfo::has_division() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaInfo::set_has_division() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaInfo::clear_has_division() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaInfo::clear_division() {
  division_ = 0;
  clear_has_division();
}
inline ::google::protobuf::int32 ArenaInfo::division() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.division)
  return division_;
}
inline void ArenaInfo::set_division(::google::protobuf::int32 value) {
  set_has_division();
  division_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.division)
}

// optional int32 isDivisionUp = 5;
inline bool ArenaInfo::has_isdivisionup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaInfo::set_has_isdivisionup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaInfo::clear_has_isdivisionup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaInfo::clear_isdivisionup() {
  isdivisionup_ = 0;
  clear_has_isdivisionup();
}
inline ::google::protobuf::int32 ArenaInfo::isdivisionup() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.isDivisionUp)
  return isdivisionup_;
}
inline void ArenaInfo::set_isdivisionup(::google::protobuf::int32 value) {
  set_has_isdivisionup();
  isdivisionup_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.isDivisionUp)
}

// optional int32 rank = 6;
inline bool ArenaInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 ArenaInfo::rank() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.rank)
  return rank_;
}
inline void ArenaInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.rank)
}

// optional int32 points = 7;
inline bool ArenaInfo::has_points() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaInfo::set_has_points() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaInfo::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 ArenaInfo::points() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.points)
  return points_;
}
inline void ArenaInfo::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.points)
}

// optional int32 arenaCoin = 8;
inline bool ArenaInfo::has_arenacoin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArenaInfo::set_has_arenacoin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArenaInfo::clear_has_arenacoin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArenaInfo::clear_arenacoin() {
  arenacoin_ = 0;
  clear_has_arenacoin();
}
inline ::google::protobuf::int32 ArenaInfo::arenacoin() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.arenaCoin)
  return arenacoin_;
}
inline void ArenaInfo::set_arenacoin(::google::protobuf::int32 value) {
  set_has_arenacoin();
  arenacoin_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.arenaCoin)
}

// optional int32 remainTime = 9;
inline bool ArenaInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArenaInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArenaInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArenaInfo::clear_remaintime() {
  remaintime_ = 0;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 ArenaInfo::remaintime() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.remainTime)
  return remaintime_;
}
inline void ArenaInfo::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.remainTime)
}

// optional int32 cdTime = 10;
inline bool ArenaInfo::has_cdtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArenaInfo::set_has_cdtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArenaInfo::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArenaInfo::clear_cdtime() {
  cdtime_ = 0;
  clear_has_cdtime();
}
inline ::google::protobuf::int32 ArenaInfo::cdtime() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.cdTime)
  return cdtime_;
}
inline void ArenaInfo::set_cdtime(::google::protobuf::int32 value) {
  set_has_cdtime();
  cdtime_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.cdTime)
}

// optional int32 isCanFight = 12;
inline bool ArenaInfo::has_iscanfight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArenaInfo::set_has_iscanfight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArenaInfo::clear_has_iscanfight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArenaInfo::clear_iscanfight() {
  iscanfight_ = 0;
  clear_has_iscanfight();
}
inline ::google::protobuf::int32 ArenaInfo::iscanfight() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.isCanFight)
  return iscanfight_;
}
inline void ArenaInfo::set_iscanfight(::google::protobuf::int32 value) {
  set_has_iscanfight();
  iscanfight_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.isCanFight)
}

// optional .CharacterInfo characterInfo = 13;
inline bool ArenaInfo::has_characterinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ArenaInfo::set_has_characterinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ArenaInfo::clear_has_characterinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ArenaInfo::clear_characterinfo() {
  if (characterinfo_ != NULL) characterinfo_->::CharacterInfo::Clear();
  clear_has_characterinfo();
}
inline const ::CharacterInfo& ArenaInfo::characterinfo() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.characterInfo)
  return characterinfo_ != NULL ? *characterinfo_ : *default_instance_->characterinfo_;
}
inline ::CharacterInfo* ArenaInfo::mutable_characterinfo() {
  set_has_characterinfo();
  if (characterinfo_ == NULL) characterinfo_ = new ::CharacterInfo;
  // @@protoc_insertion_point(field_mutable:ArenaInfo.characterInfo)
  return characterinfo_;
}
inline ::CharacterInfo* ArenaInfo::release_characterinfo() {
  clear_has_characterinfo();
  ::CharacterInfo* temp = characterinfo_;
  characterinfo_ = NULL;
  return temp;
}
inline void ArenaInfo::set_allocated_characterinfo(::CharacterInfo* characterinfo) {
  delete characterinfo_;
  characterinfo_ = characterinfo;
  if (characterinfo) {
    set_has_characterinfo();
  } else {
    clear_has_characterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:ArenaInfo.characterInfo)
}

// optional int32 rankOffset = 14;
inline bool ArenaInfo::has_rankoffset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ArenaInfo::set_has_rankoffset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ArenaInfo::clear_has_rankoffset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ArenaInfo::clear_rankoffset() {
  rankoffset_ = 0;
  clear_has_rankoffset();
}
inline ::google::protobuf::int32 ArenaInfo::rankoffset() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.rankOffset)
  return rankoffset_;
}
inline void ArenaInfo::set_rankoffset(::google::protobuf::int32 value) {
  set_has_rankoffset();
  rankoffset_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.rankOffset)
}

// optional int32 headIcon = 15;
inline bool ArenaInfo::has_headicon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ArenaInfo::set_has_headicon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ArenaInfo::clear_has_headicon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ArenaInfo::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 ArenaInfo::headicon() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.headIcon)
  return headicon_;
}
inline void ArenaInfo::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.headIcon)
}

// optional int32 divisionRank = 16;
inline bool ArenaInfo::has_divisionrank() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArenaInfo::set_has_divisionrank() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArenaInfo::clear_has_divisionrank() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArenaInfo::clear_divisionrank() {
  divisionrank_ = 0;
  clear_has_divisionrank();
}
inline ::google::protobuf::int32 ArenaInfo::divisionrank() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.divisionRank)
  return divisionrank_;
}
inline void ArenaInfo::set_divisionrank(::google::protobuf::int32 value) {
  set_has_divisionrank();
  divisionrank_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.divisionRank)
}

// optional int32 petConfigId = 17;
inline bool ArenaInfo::has_petconfigid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ArenaInfo::set_has_petconfigid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ArenaInfo::clear_has_petconfigid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ArenaInfo::clear_petconfigid() {
  petconfigid_ = 0;
  clear_has_petconfigid();
}
inline ::google::protobuf::int32 ArenaInfo::petconfigid() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.petConfigId)
  return petconfigid_;
}
inline void ArenaInfo::set_petconfigid(::google::protobuf::int32 value) {
  set_has_petconfigid();
  petconfigid_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.petConfigId)
}

// optional int32 remainVipBuyTime = 18;
inline bool ArenaInfo::has_remainvipbuytime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ArenaInfo::set_has_remainvipbuytime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ArenaInfo::clear_has_remainvipbuytime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ArenaInfo::clear_remainvipbuytime() {
  remainvipbuytime_ = 0;
  clear_has_remainvipbuytime();
}
inline ::google::protobuf::int32 ArenaInfo::remainvipbuytime() const {
  // @@protoc_insertion_point(field_get:ArenaInfo.remainVipBuyTime)
  return remainvipbuytime_;
}
inline void ArenaInfo::set_remainvipbuytime(::google::protobuf::int32 value) {
  set_has_remainvipbuytime();
  remainvipbuytime_ = value;
  // @@protoc_insertion_point(field_set:ArenaInfo.remainVipBuyTime)
}

// -------------------------------------------------------------------

// FightHistroyInfo

// optional int32 result = 1;
inline bool FightHistroyInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightHistroyInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightHistroyInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightHistroyInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 FightHistroyInfo::result() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.result)
  return result_;
}
inline void FightHistroyInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.result)
}

// optional int32 isChange = 2;
inline bool FightHistroyInfo::has_ischange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightHistroyInfo::set_has_ischange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightHistroyInfo::clear_has_ischange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightHistroyInfo::clear_ischange() {
  ischange_ = 0;
  clear_has_ischange();
}
inline ::google::protobuf::int32 FightHistroyInfo::ischange() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.isChange)
  return ischange_;
}
inline void FightHistroyInfo::set_ischange(::google::protobuf::int32 value) {
  set_has_ischange();
  ischange_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.isChange)
}

// optional int32 rank = 3;
inline bool FightHistroyInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightHistroyInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightHistroyInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightHistroyInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FightHistroyInfo::rank() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.rank)
  return rank_;
}
inline void FightHistroyInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.rank)
}

// optional int32 rankOffset = 4;
inline bool FightHistroyInfo::has_rankoffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightHistroyInfo::set_has_rankoffset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightHistroyInfo::clear_has_rankoffset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightHistroyInfo::clear_rankoffset() {
  rankoffset_ = 0;
  clear_has_rankoffset();
}
inline ::google::protobuf::int32 FightHistroyInfo::rankoffset() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.rankOffset)
  return rankoffset_;
}
inline void FightHistroyInfo::set_rankoffset(::google::protobuf::int32 value) {
  set_has_rankoffset();
  rankoffset_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.rankOffset)
}

// optional int64 enemyID = 5;
inline bool FightHistroyInfo::has_enemyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightHistroyInfo::set_has_enemyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightHistroyInfo::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightHistroyInfo::clear_enemyid() {
  enemyid_ = GOOGLE_LONGLONG(0);
  clear_has_enemyid();
}
inline ::google::protobuf::int64 FightHistroyInfo::enemyid() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.enemyID)
  return enemyid_;
}
inline void FightHistroyInfo::set_enemyid(::google::protobuf::int64 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.enemyID)
}

// optional string enemyName = 6;
inline bool FightHistroyInfo::has_enemyname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightHistroyInfo::set_has_enemyname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightHistroyInfo::clear_has_enemyname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightHistroyInfo::clear_enemyname() {
  if (enemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enemyname_->clear();
  }
  clear_has_enemyname();
}
inline const ::std::string& FightHistroyInfo::enemyname() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.enemyName)
  return *enemyname_;
}
inline void FightHistroyInfo::set_enemyname(const ::std::string& value) {
  set_has_enemyname();
  if (enemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enemyname_ = new ::std::string;
  }
  enemyname_->assign(value);
  // @@protoc_insertion_point(field_set:FightHistroyInfo.enemyName)
}
inline void FightHistroyInfo::set_enemyname(const char* value) {
  set_has_enemyname();
  if (enemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enemyname_ = new ::std::string;
  }
  enemyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightHistroyInfo.enemyName)
}
inline void FightHistroyInfo::set_enemyname(const char* value, size_t size) {
  set_has_enemyname();
  if (enemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enemyname_ = new ::std::string;
  }
  enemyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightHistroyInfo.enemyName)
}
inline ::std::string* FightHistroyInfo::mutable_enemyname() {
  set_has_enemyname();
  if (enemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    enemyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightHistroyInfo.enemyName)
  return enemyname_;
}
inline ::std::string* FightHistroyInfo::release_enemyname() {
  clear_has_enemyname();
  if (enemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = enemyname_;
    enemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightHistroyInfo::set_allocated_enemyname(::std::string* enemyname) {
  if (enemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete enemyname_;
  }
  if (enemyname) {
    set_has_enemyname();
    enemyname_ = enemyname;
  } else {
    clear_has_enemyname();
    enemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightHistroyInfo.enemyName)
}

// optional int64 fightTime = 7;
inline bool FightHistroyInfo::has_fighttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightHistroyInfo::set_has_fighttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightHistroyInfo::clear_has_fighttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightHistroyInfo::clear_fighttime() {
  fighttime_ = GOOGLE_LONGLONG(0);
  clear_has_fighttime();
}
inline ::google::protobuf::int64 FightHistroyInfo::fighttime() const {
  // @@protoc_insertion_point(field_get:FightHistroyInfo.fightTime)
  return fighttime_;
}
inline void FightHistroyInfo::set_fighttime(::google::protobuf::int64 value) {
  set_has_fighttime();
  fighttime_ = value;
  // @@protoc_insertion_point(field_set:FightHistroyInfo.fightTime)
}

// -------------------------------------------------------------------

// CGArenaOpen

// -------------------------------------------------------------------

// GCArenaOpen

// optional .ArenaInfo arenaInfo = 1;
inline bool GCArenaOpen::has_arenainfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCArenaOpen::set_has_arenainfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCArenaOpen::clear_has_arenainfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCArenaOpen::clear_arenainfo() {
  if (arenainfo_ != NULL) arenainfo_->::ArenaInfo::Clear();
  clear_has_arenainfo();
}
inline const ::ArenaInfo& GCArenaOpen::arenainfo() const {
  // @@protoc_insertion_point(field_get:GCArenaOpen.arenaInfo)
  return arenainfo_ != NULL ? *arenainfo_ : *default_instance_->arenainfo_;
}
inline ::ArenaInfo* GCArenaOpen::mutable_arenainfo() {
  set_has_arenainfo();
  if (arenainfo_ == NULL) arenainfo_ = new ::ArenaInfo;
  // @@protoc_insertion_point(field_mutable:GCArenaOpen.arenaInfo)
  return arenainfo_;
}
inline ::ArenaInfo* GCArenaOpen::release_arenainfo() {
  clear_has_arenainfo();
  ::ArenaInfo* temp = arenainfo_;
  arenainfo_ = NULL;
  return temp;
}
inline void GCArenaOpen::set_allocated_arenainfo(::ArenaInfo* arenainfo) {
  delete arenainfo_;
  arenainfo_ = arenainfo;
  if (arenainfo) {
    set_has_arenainfo();
  } else {
    clear_has_arenainfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCArenaOpen.arenaInfo)
}

// repeated .ArenaInfo arenaInfoList = 2;
inline int GCArenaOpen::arenainfolist_size() const {
  return arenainfolist_.size();
}
inline void GCArenaOpen::clear_arenainfolist() {
  arenainfolist_.Clear();
}
inline const ::ArenaInfo& GCArenaOpen::arenainfolist(int index) const {
  // @@protoc_insertion_point(field_get:GCArenaOpen.arenaInfoList)
  return arenainfolist_.Get(index);
}
inline ::ArenaInfo* GCArenaOpen::mutable_arenainfolist(int index) {
  // @@protoc_insertion_point(field_mutable:GCArenaOpen.arenaInfoList)
  return arenainfolist_.Mutable(index);
}
inline ::ArenaInfo* GCArenaOpen::add_arenainfolist() {
  // @@protoc_insertion_point(field_add:GCArenaOpen.arenaInfoList)
  return arenainfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArenaInfo >&
GCArenaOpen::arenainfolist() const {
  // @@protoc_insertion_point(field_list:GCArenaOpen.arenaInfoList)
  return arenainfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ArenaInfo >*
GCArenaOpen::mutable_arenainfolist() {
  // @@protoc_insertion_point(field_mutable_list:GCArenaOpen.arenaInfoList)
  return &arenainfolist_;
}

// -------------------------------------------------------------------

// CGArenaFight

// optional int64 pkID = 1;
inline bool CGArenaFight::has_pkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGArenaFight::set_has_pkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGArenaFight::clear_has_pkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGArenaFight::clear_pkid() {
  pkid_ = GOOGLE_LONGLONG(0);
  clear_has_pkid();
}
inline ::google::protobuf::int64 CGArenaFight::pkid() const {
  // @@protoc_insertion_point(field_get:CGArenaFight.pkID)
  return pkid_;
}
inline void CGArenaFight::set_pkid(::google::protobuf::int64 value) {
  set_has_pkid();
  pkid_ = value;
  // @@protoc_insertion_point(field_set:CGArenaFight.pkID)
}

// optional int32 rank = 2;
inline bool CGArenaFight::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGArenaFight::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGArenaFight::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGArenaFight::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 CGArenaFight::rank() const {
  // @@protoc_insertion_point(field_get:CGArenaFight.rank)
  return rank_;
}
inline void CGArenaFight::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:CGArenaFight.rank)
}

// optional int32 devision = 3;
inline bool CGArenaFight::has_devision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGArenaFight::set_has_devision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGArenaFight::clear_has_devision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGArenaFight::clear_devision() {
  devision_ = 0;
  clear_has_devision();
}
inline ::google::protobuf::int32 CGArenaFight::devision() const {
  // @@protoc_insertion_point(field_get:CGArenaFight.devision)
  return devision_;
}
inline void CGArenaFight::set_devision(::google::protobuf::int32 value) {
  set_has_devision();
  devision_ = value;
  // @@protoc_insertion_point(field_set:CGArenaFight.devision)
}

// -------------------------------------------------------------------

// GCArenaFight

// optional int32 flg = 1;
inline bool GCArenaFight::has_flg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCArenaFight::set_has_flg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCArenaFight::clear_has_flg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCArenaFight::clear_flg() {
  flg_ = 0;
  clear_has_flg();
}
inline ::google::protobuf::int32 GCArenaFight::flg() const {
  // @@protoc_insertion_point(field_get:GCArenaFight.flg)
  return flg_;
}
inline void GCArenaFight::set_flg(::google::protobuf::int32 value) {
  set_has_flg();
  flg_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFight.flg)
}

// optional int32 senceId = 2;
inline bool GCArenaFight::has_senceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCArenaFight::set_has_senceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCArenaFight::clear_has_senceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCArenaFight::clear_senceid() {
  senceid_ = 0;
  clear_has_senceid();
}
inline ::google::protobuf::int32 GCArenaFight::senceid() const {
  // @@protoc_insertion_point(field_get:GCArenaFight.senceId)
  return senceid_;
}
inline void GCArenaFight::set_senceid(::google::protobuf::int32 value) {
  set_has_senceid();
  senceid_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFight.senceId)
}

// -------------------------------------------------------------------

// GCArenaFightResult

// optional int32 isDivisionUp = 1;
inline bool GCArenaFightResult::has_isdivisionup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCArenaFightResult::set_has_isdivisionup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCArenaFightResult::clear_has_isdivisionup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCArenaFightResult::clear_isdivisionup() {
  isdivisionup_ = 0;
  clear_has_isdivisionup();
}
inline ::google::protobuf::int32 GCArenaFightResult::isdivisionup() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.isDivisionUp)
  return isdivisionup_;
}
inline void GCArenaFightResult::set_isdivisionup(::google::protobuf::int32 value) {
  set_has_isdivisionup();
  isdivisionup_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFightResult.isDivisionUp)
}

// optional int32 result = 2;
inline bool GCArenaFightResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCArenaFightResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCArenaFightResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCArenaFightResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCArenaFightResult::result() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.result)
  return result_;
}
inline void GCArenaFightResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFightResult.result)
}

// optional int32 isExchange = 3;
inline bool GCArenaFightResult::has_isexchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCArenaFightResult::set_has_isexchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCArenaFightResult::clear_has_isexchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCArenaFightResult::clear_isexchange() {
  isexchange_ = 0;
  clear_has_isexchange();
}
inline ::google::protobuf::int32 GCArenaFightResult::isexchange() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.isExchange)
  return isexchange_;
}
inline void GCArenaFightResult::set_isexchange(::google::protobuf::int32 value) {
  set_has_isexchange();
  isexchange_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFightResult.isExchange)
}

// optional .ArenaInfo selfInfo = 4;
inline bool GCArenaFightResult::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCArenaFightResult::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCArenaFightResult::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCArenaFightResult::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::ArenaInfo::Clear();
  clear_has_selfinfo();
}
inline const ::ArenaInfo& GCArenaFightResult::selfinfo() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.selfInfo)
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::ArenaInfo* GCArenaFightResult::mutable_selfinfo() {
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::ArenaInfo;
  // @@protoc_insertion_point(field_mutable:GCArenaFightResult.selfInfo)
  return selfinfo_;
}
inline ::ArenaInfo* GCArenaFightResult::release_selfinfo() {
  clear_has_selfinfo();
  ::ArenaInfo* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void GCArenaFightResult::set_allocated_selfinfo(::ArenaInfo* selfinfo) {
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCArenaFightResult.selfInfo)
}

// optional .ArenaInfo enemyInfo = 5;
inline bool GCArenaFightResult::has_enemyinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCArenaFightResult::set_has_enemyinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCArenaFightResult::clear_has_enemyinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCArenaFightResult::clear_enemyinfo() {
  if (enemyinfo_ != NULL) enemyinfo_->::ArenaInfo::Clear();
  clear_has_enemyinfo();
}
inline const ::ArenaInfo& GCArenaFightResult::enemyinfo() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.enemyInfo)
  return enemyinfo_ != NULL ? *enemyinfo_ : *default_instance_->enemyinfo_;
}
inline ::ArenaInfo* GCArenaFightResult::mutable_enemyinfo() {
  set_has_enemyinfo();
  if (enemyinfo_ == NULL) enemyinfo_ = new ::ArenaInfo;
  // @@protoc_insertion_point(field_mutable:GCArenaFightResult.enemyInfo)
  return enemyinfo_;
}
inline ::ArenaInfo* GCArenaFightResult::release_enemyinfo() {
  clear_has_enemyinfo();
  ::ArenaInfo* temp = enemyinfo_;
  enemyinfo_ = NULL;
  return temp;
}
inline void GCArenaFightResult::set_allocated_enemyinfo(::ArenaInfo* enemyinfo) {
  delete enemyinfo_;
  enemyinfo_ = enemyinfo;
  if (enemyinfo) {
    set_has_enemyinfo();
  } else {
    clear_has_enemyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCArenaFightResult.enemyInfo)
}

// optional int32 exp = 6;
inline bool GCArenaFightResult::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCArenaFightResult::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCArenaFightResult::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCArenaFightResult::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 GCArenaFightResult::exp() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.exp)
  return exp_;
}
inline void GCArenaFightResult::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFightResult.exp)
}

// optional int32 arenaCoin = 7;
inline bool GCArenaFightResult::has_arenacoin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCArenaFightResult::set_has_arenacoin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCArenaFightResult::clear_has_arenacoin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCArenaFightResult::clear_arenacoin() {
  arenacoin_ = 0;
  clear_has_arenacoin();
}
inline ::google::protobuf::int32 GCArenaFightResult::arenacoin() const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.arenaCoin)
  return arenacoin_;
}
inline void GCArenaFightResult::set_arenacoin(::google::protobuf::int32 value) {
  set_has_arenacoin();
  arenacoin_ = value;
  // @@protoc_insertion_point(field_set:GCArenaFightResult.arenaCoin)
}

// repeated .ItemInfo fightReward = 8;
inline int GCArenaFightResult::fightreward_size() const {
  return fightreward_.size();
}
inline void GCArenaFightResult::clear_fightreward() {
  fightreward_.Clear();
}
inline const ::ItemInfo& GCArenaFightResult::fightreward(int index) const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.fightReward)
  return fightreward_.Get(index);
}
inline ::ItemInfo* GCArenaFightResult::mutable_fightreward(int index) {
  // @@protoc_insertion_point(field_mutable:GCArenaFightResult.fightReward)
  return fightreward_.Mutable(index);
}
inline ::ItemInfo* GCArenaFightResult::add_fightreward() {
  // @@protoc_insertion_point(field_add:GCArenaFightResult.fightReward)
  return fightreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
GCArenaFightResult::fightreward() const {
  // @@protoc_insertion_point(field_list:GCArenaFightResult.fightReward)
  return fightreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
GCArenaFightResult::mutable_fightreward() {
  // @@protoc_insertion_point(field_mutable_list:GCArenaFightResult.fightReward)
  return &fightreward_;
}

// repeated .ItemInfo divisionUpRewards = 9;
inline int GCArenaFightResult::divisionuprewards_size() const {
  return divisionuprewards_.size();
}
inline void GCArenaFightResult::clear_divisionuprewards() {
  divisionuprewards_.Clear();
}
inline const ::ItemInfo& GCArenaFightResult::divisionuprewards(int index) const {
  // @@protoc_insertion_point(field_get:GCArenaFightResult.divisionUpRewards)
  return divisionuprewards_.Get(index);
}
inline ::ItemInfo* GCArenaFightResult::mutable_divisionuprewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCArenaFightResult.divisionUpRewards)
  return divisionuprewards_.Mutable(index);
}
inline ::ItemInfo* GCArenaFightResult::add_divisionuprewards() {
  // @@protoc_insertion_point(field_add:GCArenaFightResult.divisionUpRewards)
  return divisionuprewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
GCArenaFightResult::divisionuprewards() const {
  // @@protoc_insertion_point(field_list:GCArenaFightResult.divisionUpRewards)
  return divisionuprewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
GCArenaFightResult::mutable_divisionuprewards() {
  // @@protoc_insertion_point(field_mutable_list:GCArenaFightResult.divisionUpRewards)
  return &divisionuprewards_;
}

// -------------------------------------------------------------------

// CGArenaDivisionUp

// -------------------------------------------------------------------

// CGArenaQuit

// -------------------------------------------------------------------

// CGArenaBuyChance

// -------------------------------------------------------------------

// GCArenaBuyChance

// optional int32 result = 1;
inline bool GCArenaBuyChance::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCArenaBuyChance::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCArenaBuyChance::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCArenaBuyChance::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCArenaBuyChance::result() const {
  // @@protoc_insertion_point(field_get:GCArenaBuyChance.result)
  return result_;
}
inline void GCArenaBuyChance::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCArenaBuyChance.result)
}

// optional int32 remainTime = 2;
inline bool GCArenaBuyChance::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCArenaBuyChance::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCArenaBuyChance::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCArenaBuyChance::clear_remaintime() {
  remaintime_ = 0;
  clear_has_remaintime();
}
inline ::google::protobuf::int32 GCArenaBuyChance::remaintime() const {
  // @@protoc_insertion_point(field_get:GCArenaBuyChance.remainTime)
  return remaintime_;
}
inline void GCArenaBuyChance::set_remaintime(::google::protobuf::int32 value) {
  set_has_remaintime();
  remaintime_ = value;
  // @@protoc_insertion_point(field_set:GCArenaBuyChance.remainTime)
}

// optional int32 remainVipBuyTime = 3;
inline bool GCArenaBuyChance::has_remainvipbuytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCArenaBuyChance::set_has_remainvipbuytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCArenaBuyChance::clear_has_remainvipbuytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCArenaBuyChance::clear_remainvipbuytime() {
  remainvipbuytime_ = 0;
  clear_has_remainvipbuytime();
}
inline ::google::protobuf::int32 GCArenaBuyChance::remainvipbuytime() const {
  // @@protoc_insertion_point(field_get:GCArenaBuyChance.remainVipBuyTime)
  return remainvipbuytime_;
}
inline void GCArenaBuyChance::set_remainvipbuytime(::google::protobuf::int32 value) {
  set_has_remainvipbuytime();
  remainvipbuytime_ = value;
  // @@protoc_insertion_point(field_set:GCArenaBuyChance.remainVipBuyTime)
}

// -------------------------------------------------------------------

// CGArenaFightRecord

// -------------------------------------------------------------------

// GCArenaFightRecord

// repeated .FightHistroyInfo fightHistroyInfo = 1;
inline int GCArenaFightRecord::fighthistroyinfo_size() const {
  return fighthistroyinfo_.size();
}
inline void GCArenaFightRecord::clear_fighthistroyinfo() {
  fighthistroyinfo_.Clear();
}
inline const ::FightHistroyInfo& GCArenaFightRecord::fighthistroyinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCArenaFightRecord.fightHistroyInfo)
  return fighthistroyinfo_.Get(index);
}
inline ::FightHistroyInfo* GCArenaFightRecord::mutable_fighthistroyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCArenaFightRecord.fightHistroyInfo)
  return fighthistroyinfo_.Mutable(index);
}
inline ::FightHistroyInfo* GCArenaFightRecord::add_fighthistroyinfo() {
  // @@protoc_insertion_point(field_add:GCArenaFightRecord.fightHistroyInfo)
  return fighthistroyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightHistroyInfo >&
GCArenaFightRecord::fighthistroyinfo() const {
  // @@protoc_insertion_point(field_list:GCArenaFightRecord.fightHistroyInfo)
  return fighthistroyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightHistroyInfo >*
GCArenaFightRecord::mutable_fighthistroyinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCArenaFightRecord.fightHistroyInfo)
  return &fighthistroyinfo_;
}

// -------------------------------------------------------------------

// CGArenaClrCDTime

// -------------------------------------------------------------------

// GCArenaClrCDTime

// optional int32 result = 1;
inline bool GCArenaClrCDTime::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCArenaClrCDTime::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCArenaClrCDTime::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCArenaClrCDTime::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCArenaClrCDTime::result() const {
  // @@protoc_insertion_point(field_get:GCArenaClrCDTime.result)
  return result_;
}
inline void GCArenaClrCDTime::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCArenaClrCDTime.result)
}

// -------------------------------------------------------------------

// CGGetArenaShopItems

// optional int32 state = 1;
inline bool CGGetArenaShopItems::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetArenaShopItems::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetArenaShopItems::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetArenaShopItems::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CGGetArenaShopItems::state() const {
  // @@protoc_insertion_point(field_get:CGGetArenaShopItems.state)
  return state_;
}
inline void CGGetArenaShopItems::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CGGetArenaShopItems.state)
}

// -------------------------------------------------------------------

// GCGetArenaShopItemsBack

// optional int32 state = 1;
inline bool GCGetArenaShopItemsBack::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGetArenaShopItemsBack::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGetArenaShopItemsBack::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGetArenaShopItemsBack::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GCGetArenaShopItemsBack::state() const {
  // @@protoc_insertion_point(field_get:GCGetArenaShopItemsBack.state)
  return state_;
}
inline void GCGetArenaShopItemsBack::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:GCGetArenaShopItemsBack.state)
}

// repeated .EntryIntInt item1List = 2;
inline int GCGetArenaShopItemsBack::item1list_size() const {
  return item1list_.size();
}
inline void GCGetArenaShopItemsBack::clear_item1list() {
  item1list_.Clear();
}
inline const ::EntryIntInt& GCGetArenaShopItemsBack::item1list(int index) const {
  // @@protoc_insertion_point(field_get:GCGetArenaShopItemsBack.item1List)
  return item1list_.Get(index);
}
inline ::EntryIntInt* GCGetArenaShopItemsBack::mutable_item1list(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetArenaShopItemsBack.item1List)
  return item1list_.Mutable(index);
}
inline ::EntryIntInt* GCGetArenaShopItemsBack::add_item1list() {
  // @@protoc_insertion_point(field_add:GCGetArenaShopItemsBack.item1List)
  return item1list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntryIntInt >&
GCGetArenaShopItemsBack::item1list() const {
  // @@protoc_insertion_point(field_list:GCGetArenaShopItemsBack.item1List)
  return item1list_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntryIntInt >*
GCGetArenaShopItemsBack::mutable_item1list() {
  // @@protoc_insertion_point(field_mutable_list:GCGetArenaShopItemsBack.item1List)
  return &item1list_;
}

// repeated .EntryIntInt item2List = 3;
inline int GCGetArenaShopItemsBack::item2list_size() const {
  return item2list_.size();
}
inline void GCGetArenaShopItemsBack::clear_item2list() {
  item2list_.Clear();
}
inline const ::EntryIntInt& GCGetArenaShopItemsBack::item2list(int index) const {
  // @@protoc_insertion_point(field_get:GCGetArenaShopItemsBack.item2List)
  return item2list_.Get(index);
}
inline ::EntryIntInt* GCGetArenaShopItemsBack::mutable_item2list(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetArenaShopItemsBack.item2List)
  return item2list_.Mutable(index);
}
inline ::EntryIntInt* GCGetArenaShopItemsBack::add_item2list() {
  // @@protoc_insertion_point(field_add:GCGetArenaShopItemsBack.item2List)
  return item2list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntryIntInt >&
GCGetArenaShopItemsBack::item2list() const {
  // @@protoc_insertion_point(field_list:GCGetArenaShopItemsBack.item2List)
  return item2list_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntryIntInt >*
GCGetArenaShopItemsBack::mutable_item2list() {
  // @@protoc_insertion_point(field_mutable_list:GCGetArenaShopItemsBack.item2List)
  return &item2list_;
}

// -------------------------------------------------------------------

// CGExchangeArenaShopItem

// optional int32 id = 1;
inline bool CGExchangeArenaShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGExchangeArenaShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGExchangeArenaShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGExchangeArenaShopItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGExchangeArenaShopItem::id() const {
  // @@protoc_insertion_point(field_get:CGExchangeArenaShopItem.id)
  return id_;
}
inline void CGExchangeArenaShopItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGExchangeArenaShopItem.id)
}

// -------------------------------------------------------------------

// GCExchangeArenaShopItem

// optional int32 result = 1;
inline bool GCExchangeArenaShopItem::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCExchangeArenaShopItem::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCExchangeArenaShopItem::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCExchangeArenaShopItem::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCExchangeArenaShopItem::result() const {
  // @@protoc_insertion_point(field_get:GCExchangeArenaShopItem.result)
  return result_;
}
inline void GCExchangeArenaShopItem::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCExchangeArenaShopItem.result)
}

// optional int32 credit = 2;
inline bool GCExchangeArenaShopItem::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCExchangeArenaShopItem::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCExchangeArenaShopItem::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCExchangeArenaShopItem::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 GCExchangeArenaShopItem::credit() const {
  // @@protoc_insertion_point(field_get:GCExchangeArenaShopItem.credit)
  return credit_;
}
inline void GCExchangeArenaShopItem::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
  // @@protoc_insertion_point(field_set:GCExchangeArenaShopItem.credit)
}

// optional int32 arenaCoin = 3;
inline bool GCExchangeArenaShopItem::has_arenacoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCExchangeArenaShopItem::set_has_arenacoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCExchangeArenaShopItem::clear_has_arenacoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCExchangeArenaShopItem::clear_arenacoin() {
  arenacoin_ = 0;
  clear_has_arenacoin();
}
inline ::google::protobuf::int32 GCExchangeArenaShopItem::arenacoin() const {
  // @@protoc_insertion_point(field_get:GCExchangeArenaShopItem.arenaCoin)
  return arenacoin_;
}
inline void GCExchangeArenaShopItem::set_arenacoin(::google::protobuf::int32 value) {
  set_has_arenacoin();
  arenacoin_ = value;
  // @@protoc_insertion_point(field_set:GCExchangeArenaShopItem.arenaCoin)
}

// optional .EntryIntInt itemInfo = 4;
inline bool GCExchangeArenaShopItem::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCExchangeArenaShopItem::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCExchangeArenaShopItem::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCExchangeArenaShopItem::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::EntryIntInt::Clear();
  clear_has_iteminfo();
}
inline const ::EntryIntInt& GCExchangeArenaShopItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:GCExchangeArenaShopItem.itemInfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::EntryIntInt* GCExchangeArenaShopItem::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::EntryIntInt;
  // @@protoc_insertion_point(field_mutable:GCExchangeArenaShopItem.itemInfo)
  return iteminfo_;
}
inline ::EntryIntInt* GCExchangeArenaShopItem::release_iteminfo() {
  clear_has_iteminfo();
  ::EntryIntInt* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void GCExchangeArenaShopItem::set_allocated_iteminfo(::EntryIntInt* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCExchangeArenaShopItem.itemInfo)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArenaMessage_2eproto__INCLUDED
