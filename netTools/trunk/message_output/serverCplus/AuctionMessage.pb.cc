// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AuctionMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AuctionBackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionBackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuctionRecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuctionRecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAucitonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAucitonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAucitonListBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAucitonListBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAuctionSale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAuctionSale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAuctionBuyShelve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAuctionBuyShelve_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAuctionHouseBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAuctionHouseBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAuctionRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAuctionRecordList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAuctionRecordListBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAuctionRecordListBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AuctionMessage_2eproto() {
  protobuf_AddDesc_AuctionMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AuctionMessage.proto");
  GOOGLE_CHECK(file != NULL);
  AuctionBackData_descriptor_ = file->message_type(0);
  static const int AuctionBackData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, ahid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, isshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, petinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, extime_),
  };
  AuctionBackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionBackData_descriptor_,
      AuctionBackData::default_instance_,
      AuctionBackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionBackData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionBackData));
  AuctionRecordData_descriptor_ = file->message_type(1);
  static const int AuctionRecordData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, buytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, petname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, petquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, petlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, salevip_),
  };
  AuctionRecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuctionRecordData_descriptor_,
      AuctionRecordData::default_instance_,
      AuctionRecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuctionRecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuctionRecordData));
  CGGetAucitonList_descriptor_ = file->message_type(2);
  static const int CGGetAucitonList_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, gettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, sorttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, bodytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, pagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, searchkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, quality_),
  };
  CGGetAucitonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAucitonList_descriptor_,
      CGGetAucitonList::default_instance_,
      CGGetAucitonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAucitonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAucitonList));
  GCGetAucitonListBack_descriptor_ = file->message_type(3);
  static const int GCGetAucitonListBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, gettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, currentpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, allpages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, abackdatalist_),
  };
  GCGetAucitonListBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAucitonListBack_descriptor_,
      GCGetAucitonListBack::default_instance_,
      GCGetAucitonListBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAucitonListBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAucitonListBack));
  CGAuctionSale_descriptor_ = file->message_type(4);
  static const int CGAuctionSale_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, auctiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, unitprice_),
  };
  CGAuctionSale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAuctionSale_descriptor_,
      CGAuctionSale::default_instance_,
      CGAuctionSale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionSale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAuctionSale));
  CGAuctionBuyShelve_descriptor_ = file->message_type(5);
  static const int CGAuctionBuyShelve_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionBuyShelve, ahid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionBuyShelve, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionBuyShelve, num_),
  };
  CGAuctionBuyShelve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAuctionBuyShelve_descriptor_,
      CGAuctionBuyShelve::default_instance_,
      CGAuctionBuyShelve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionBuyShelve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAuctionBuyShelve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAuctionBuyShelve));
  GCAuctionHouseBack_descriptor_ = file->message_type(6);
  static const int GCAuctionHouseBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAuctionHouseBack, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAuctionHouseBack, resultcode_),
  };
  GCAuctionHouseBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAuctionHouseBack_descriptor_,
      GCAuctionHouseBack::default_instance_,
      GCAuctionHouseBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAuctionHouseBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAuctionHouseBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAuctionHouseBack));
  CGGetAuctionRecordList_descriptor_ = file->message_type(7);
  static const int CGGetAuctionRecordList_offsets_[1] = {
  };
  CGGetAuctionRecordList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAuctionRecordList_descriptor_,
      CGGetAuctionRecordList::default_instance_,
      CGGetAuctionRecordList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAuctionRecordList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAuctionRecordList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAuctionRecordList));
  GCGetAuctionRecordListBack_descriptor_ = file->message_type(8);
  static const int GCGetAuctionRecordListBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAuctionRecordListBack, auctionrecorddatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAuctionRecordListBack, resultcode_),
  };
  GCGetAuctionRecordListBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAuctionRecordListBack_descriptor_,
      GCGetAuctionRecordListBack::default_instance_,
      GCGetAuctionRecordListBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAuctionRecordListBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAuctionRecordListBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAuctionRecordListBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AuctionMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionBackData_descriptor_, &AuctionBackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuctionRecordData_descriptor_, &AuctionRecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAucitonList_descriptor_, &CGGetAucitonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAucitonListBack_descriptor_, &GCGetAucitonListBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAuctionSale_descriptor_, &CGAuctionSale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAuctionBuyShelve_descriptor_, &CGAuctionBuyShelve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAuctionHouseBack_descriptor_, &GCAuctionHouseBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAuctionRecordList_descriptor_, &CGGetAuctionRecordList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAuctionRecordListBack_descriptor_, &GCGetAuctionRecordListBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AuctionMessage_2eproto() {
  delete AuctionBackData::default_instance_;
  delete AuctionBackData_reflection_;
  delete AuctionRecordData::default_instance_;
  delete AuctionRecordData_reflection_;
  delete CGGetAucitonList::default_instance_;
  delete CGGetAucitonList_reflection_;
  delete GCGetAucitonListBack::default_instance_;
  delete GCGetAucitonListBack_reflection_;
  delete CGAuctionSale::default_instance_;
  delete CGAuctionSale_reflection_;
  delete CGAuctionBuyShelve::default_instance_;
  delete CGAuctionBuyShelve_reflection_;
  delete GCAuctionHouseBack::default_instance_;
  delete GCAuctionHouseBack_reflection_;
  delete CGGetAuctionRecordList::default_instance_;
  delete CGGetAuctionRecordList_reflection_;
  delete GCGetAuctionRecordListBack::default_instance_;
  delete GCGetAuctionRecordListBack_reflection_;
}

void protobuf_AddDesc_AuctionMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_EquipMessage_2eproto();
  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AuctionMessage.proto\032\022EquipMessage.pro"
    "to\032\022InnerMessage.proto\"\302\001\n\017AuctionBackDa"
    "ta\022\014\n\004ahID\030\001 \001(\003\022\013\n\003bid\030\002 \001(\005\022\013\n\003sid\030\003 \001"
    "(\005\022\013\n\003num\030\004 \001(\005\022\021\n\tpriceType\030\005 \001(\005\022\r\n\005pr"
    "ice\030\006 \001(\005\022\016\n\006isShow\030\007 \001(\005\022\035\n\tequipInfo\030\010"
    " \001(\0132\n.EquipInfo\022\031\n\007petInfo\030\t \001(\0132\010.PetI"
    "nfo\022\016\n\006exTime\030\n \001(\003\"\350\001\n\021AuctionRecordDat"
    "a\022\013\n\003hid\030\001 \001(\003\022\013\n\003bid\030\002 \001(\005\022\013\n\003sid\030\003 \001(\005"
    "\022\013\n\003num\030\004 \001(\005\022\021\n\tpriceType\030\005 \001(\005\022\r\n\005pric"
    "e\030\006 \001(\005\022\017\n\007buyTime\030\007 \001(\003\022\022\n\nplayerName\030\010"
    " \001(\t\022\020\n\010playerID\030\t \001(\003\022\017\n\007petName\030\n \001(\t\022"
    "\022\n\npetQuality\030\013 \001(\005\022\020\n\010petLevel\030\014 \001(\005\022\017\n"
    "\007saleVip\030\r \001(\005\"\270\001\n\020CGGetAucitonList\022\017\n\007g"
    "etType\030\001 \001(\005\022\013\n\003bid\030\002 \001(\005\022\013\n\003sid\030\003 \001(\005\022\r"
    "\n\005jobid\030\004 \001(\005\022\020\n\010sortType\030\005 \001(\005\022\020\n\010bodyT"
    "ype\030\006 \003(\005\022\017\n\007pageNum\030\007 \001(\005\022\021\n\tsearchKey\030"
    "\010 \001(\t\022\021\n\tpriceType\030\t \003(\005\022\017\n\007quality\030\n \003("
    "\005\"w\n\024GCGetAucitonListBack\022\017\n\007getType\030\001 \001"
    "(\005\022\023\n\013currentPage\030\002 \001(\005\022\020\n\010AllPages\030\003 \001("
    "\005\022\'\n\rabackDatalist\030\004 \003(\0132\020.AuctionBackDa"
    "ta\"f\n\rCGAuctionSale\022\016\n\006itemID\030\001 \001(\003\022\023\n\013a"
    "uctionType\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\020\n\010sellTyp"
    "e\030\004 \001(\005\022\021\n\tunitPrice\030\005 \001(\005\"=\n\022CGAuctionB"
    "uyShelve\022\014\n\004ahID\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\013\n\003"
    "num\030\003 \001(\005\"<\n\022GCAuctionHouseBack\022\022\n\nactio"
    "nType\030\001 \001(\005\022\022\n\nresultCode\030\002 \001(\005\"\030\n\026CGGet"
    "AuctionRecordList\"c\n\032GCGetAuctionRecordL"
    "istBack\0221\n\025auctionRecordDataList\030\001 \003(\0132\022"
    ".AuctionRecordData\022\022\n\nresultCode\030\002 \001(\005B\031"
    "\n\027com.mile.common.message", 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AuctionMessage.proto", &protobuf_RegisterTypes);
  AuctionBackData::default_instance_ = new AuctionBackData();
  AuctionRecordData::default_instance_ = new AuctionRecordData();
  CGGetAucitonList::default_instance_ = new CGGetAucitonList();
  GCGetAucitonListBack::default_instance_ = new GCGetAucitonListBack();
  CGAuctionSale::default_instance_ = new CGAuctionSale();
  CGAuctionBuyShelve::default_instance_ = new CGAuctionBuyShelve();
  GCAuctionHouseBack::default_instance_ = new GCAuctionHouseBack();
  CGGetAuctionRecordList::default_instance_ = new CGGetAuctionRecordList();
  GCGetAuctionRecordListBack::default_instance_ = new GCGetAuctionRecordListBack();
  AuctionBackData::default_instance_->InitAsDefaultInstance();
  AuctionRecordData::default_instance_->InitAsDefaultInstance();
  CGGetAucitonList::default_instance_->InitAsDefaultInstance();
  GCGetAucitonListBack::default_instance_->InitAsDefaultInstance();
  CGAuctionSale::default_instance_->InitAsDefaultInstance();
  CGAuctionBuyShelve::default_instance_->InitAsDefaultInstance();
  GCAuctionHouseBack::default_instance_->InitAsDefaultInstance();
  CGGetAuctionRecordList::default_instance_->InitAsDefaultInstance();
  GCGetAuctionRecordListBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AuctionMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AuctionMessage_2eproto {
  StaticDescriptorInitializer_AuctionMessage_2eproto() {
    protobuf_AddDesc_AuctionMessage_2eproto();
  }
} static_descriptor_initializer_AuctionMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuctionBackData::kAhIDFieldNumber;
const int AuctionBackData::kBidFieldNumber;
const int AuctionBackData::kSidFieldNumber;
const int AuctionBackData::kNumFieldNumber;
const int AuctionBackData::kPriceTypeFieldNumber;
const int AuctionBackData::kPriceFieldNumber;
const int AuctionBackData::kIsShowFieldNumber;
const int AuctionBackData::kEquipInfoFieldNumber;
const int AuctionBackData::kPetInfoFieldNumber;
const int AuctionBackData::kExTimeFieldNumber;
#endif  // !_MSC_VER

AuctionBackData::AuctionBackData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuctionBackData)
}

void AuctionBackData::InitAsDefaultInstance() {
  equipinfo_ = const_cast< ::EquipInfo*>(&::EquipInfo::default_instance());
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

AuctionBackData::AuctionBackData(const AuctionBackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuctionBackData)
}

void AuctionBackData::SharedCtor() {
  _cached_size_ = 0;
  ahid_ = GOOGLE_LONGLONG(0);
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  pricetype_ = 0;
  price_ = 0;
  isshow_ = 0;
  equipinfo_ = NULL;
  petinfo_ = NULL;
  extime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionBackData::~AuctionBackData() {
  // @@protoc_insertion_point(destructor:AuctionBackData)
  SharedDtor();
}

void AuctionBackData::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
    delete petinfo_;
  }
}

void AuctionBackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionBackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionBackData_descriptor_;
}

const AuctionBackData& AuctionBackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

AuctionBackData* AuctionBackData::default_instance_ = NULL;

AuctionBackData* AuctionBackData::New() const {
  return new AuctionBackData;
}

void AuctionBackData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionBackData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ahid_, isshow_);
    if (has_equipinfo()) {
      if (equipinfo_ != NULL) equipinfo_->::EquipInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
    extime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionBackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuctionBackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ahID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ahid_)));
          set_has_ahid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid;
        break;
      }

      // optional int32 bid = 2;
      case 2: {
        if (tag == 16) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priceType;
        break;
      }

      // optional int32 priceType = 5;
      case 5: {
        if (tag == 40) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // optional int32 price = 6;
      case 6: {
        if (tag == 48) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isShow;
        break;
      }

      // optional int32 isShow = 7;
      case 7: {
        if (tag == 56) {
         parse_isShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_equipInfo;
        break;
      }

      // optional .EquipInfo equipInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_equipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_petInfo;
        break;
      }

      // optional .PetInfo petInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_petInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_exTime;
        break;
      }

      // optional int64 exTime = 10;
      case 10: {
        if (tag == 80) {
         parse_exTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extime_)));
          set_has_extime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuctionBackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuctionBackData)
  return false;
#undef DO_
}

void AuctionBackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuctionBackData)
  // optional int64 ahID = 1;
  if (has_ahid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ahid(), output);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 priceType = 5;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pricetype(), output);
  }

  // optional int32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // optional int32 isShow = 7;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isshow(), output);
  }

  // optional .EquipInfo equipInfo = 8;
  if (has_equipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equipinfo(), output);
  }

  // optional .PetInfo petInfo = 9;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->petinfo(), output);
  }

  // optional int64 exTime = 10;
  if (has_extime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->extime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuctionBackData)
}

::google::protobuf::uint8* AuctionBackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuctionBackData)
  // optional int64 ahID = 1;
  if (has_ahid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ahid(), target);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 priceType = 5;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pricetype(), target);
  }

  // optional int32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  // optional int32 isShow = 7;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isshow(), target);
  }

  // optional .EquipInfo equipInfo = 8;
  if (has_equipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equipinfo(), target);
  }

  // optional .PetInfo petInfo = 9;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->petinfo(), target);
  }

  // optional int64 exTime = 10;
  if (has_extime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->extime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuctionBackData)
  return target;
}

int AuctionBackData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ahID = 1;
    if (has_ahid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ahid());
    }

    // optional int32 bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 priceType = 5;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }

    // optional int32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 isShow = 7;
    if (has_isshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshow());
    }

    // optional .EquipInfo equipInfo = 8;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PetInfo petInfo = 9;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

    // optional int64 exTime = 10;
    if (has_extime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionBackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionBackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionBackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionBackData::MergeFrom(const AuctionBackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ahid()) {
      set_ahid(from.ahid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
    if (from.has_equipinfo()) {
      mutable_equipinfo()->::EquipInfo::MergeFrom(from.equipinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
    if (from.has_extime()) {
      set_extime(from.extime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionBackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionBackData::CopyFrom(const AuctionBackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionBackData::IsInitialized() const {

  return true;
}

void AuctionBackData::Swap(AuctionBackData* other) {
  if (other != this) {
    std::swap(ahid_, other->ahid_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(isshow_, other->isshow_);
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(extime_, other->extime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionBackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionBackData_descriptor_;
  metadata.reflection = AuctionBackData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuctionRecordData::kHidFieldNumber;
const int AuctionRecordData::kBidFieldNumber;
const int AuctionRecordData::kSidFieldNumber;
const int AuctionRecordData::kNumFieldNumber;
const int AuctionRecordData::kPriceTypeFieldNumber;
const int AuctionRecordData::kPriceFieldNumber;
const int AuctionRecordData::kBuyTimeFieldNumber;
const int AuctionRecordData::kPlayerNameFieldNumber;
const int AuctionRecordData::kPlayerIDFieldNumber;
const int AuctionRecordData::kPetNameFieldNumber;
const int AuctionRecordData::kPetQualityFieldNumber;
const int AuctionRecordData::kPetLevelFieldNumber;
const int AuctionRecordData::kSaleVipFieldNumber;
#endif  // !_MSC_VER

AuctionRecordData::AuctionRecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuctionRecordData)
}

void AuctionRecordData::InitAsDefaultInstance() {
}

AuctionRecordData::AuctionRecordData(const AuctionRecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuctionRecordData)
}

void AuctionRecordData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hid_ = GOOGLE_LONGLONG(0);
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  pricetype_ = 0;
  price_ = 0;
  buytime_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = GOOGLE_LONGLONG(0);
  petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  petquality_ = 0;
  petlevel_ = 0;
  salevip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuctionRecordData::~AuctionRecordData() {
  // @@protoc_insertion_point(destructor:AuctionRecordData)
  SharedDtor();
}

void AuctionRecordData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (petname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete petname_;
  }
  if (this != default_instance_) {
  }
}

void AuctionRecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuctionRecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuctionRecordData_descriptor_;
}

const AuctionRecordData& AuctionRecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

AuctionRecordData* AuctionRecordData::default_instance_ = NULL;

AuctionRecordData* AuctionRecordData::New() const {
  return new AuctionRecordData;
}

void AuctionRecordData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuctionRecordData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hid_, buytime_);
    price_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(petquality_, playerid_);
    ZR_(petlevel_, salevip_);
    if (has_petname()) {
      if (petname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        petname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuctionRecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuctionRecordData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid;
        break;
      }

      // optional int32 bid = 2;
      case 2: {
        if (tag == 16) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priceType;
        break;
      }

      // optional int32 priceType = 5;
      case 5: {
        if (tag == 40) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // optional int32 price = 6;
      case 6: {
        if (tag == 48) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buyTime;
        break;
      }

      // optional int64 buyTime = 7;
      case 7: {
        if (tag == 56) {
         parse_buyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_playerName;
        break;
      }

      // optional string playerName = 8;
      case 8: {
        if (tag == 66) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 9;
      case 9: {
        if (tag == 72) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_petName;
        break;
      }

      // optional string petName = 10;
      case 10: {
        if (tag == 82) {
         parse_petName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->petname().data(), this->petname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "petname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_petQuality;
        break;
      }

      // optional int32 petQuality = 11;
      case 11: {
        if (tag == 88) {
         parse_petQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petquality_)));
          set_has_petquality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_petLevel;
        break;
      }

      // optional int32 petLevel = 12;
      case 12: {
        if (tag == 96) {
         parse_petLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petlevel_)));
          set_has_petlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_saleVip;
        break;
      }

      // optional int32 saleVip = 13;
      case 13: {
        if (tag == 104) {
         parse_saleVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &salevip_)));
          set_has_salevip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuctionRecordData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuctionRecordData)
  return false;
#undef DO_
}

void AuctionRecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuctionRecordData)
  // optional int64 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->hid(), output);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 priceType = 5;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pricetype(), output);
  }

  // optional int32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // optional int64 buyTime = 7;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->buytime(), output);
  }

  // optional string playerName = 8;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->playername(), output);
  }

  // optional int64 playerID = 9;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->playerid(), output);
  }

  // optional string petName = 10;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "petname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->petname(), output);
  }

  // optional int32 petQuality = 11;
  if (has_petquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->petquality(), output);
  }

  // optional int32 petLevel = 12;
  if (has_petlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->petlevel(), output);
  }

  // optional int32 saleVip = 13;
  if (has_salevip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->salevip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuctionRecordData)
}

::google::protobuf::uint8* AuctionRecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AuctionRecordData)
  // optional int64 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->hid(), target);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 priceType = 5;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pricetype(), target);
  }

  // optional int32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  // optional int64 buyTime = 7;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->buytime(), target);
  }

  // optional string playerName = 8;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->playername(), target);
  }

  // optional int64 playerID = 9;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->playerid(), target);
  }

  // optional string petName = 10;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "petname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->petname(), target);
  }

  // optional int32 petQuality = 11;
  if (has_petquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->petquality(), target);
  }

  // optional int32 petLevel = 12;
  if (has_petlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->petlevel(), target);
  }

  // optional int32 saleVip = 13;
  if (has_salevip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->salevip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuctionRecordData)
  return target;
}

int AuctionRecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hid());
    }

    // optional int32 bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 priceType = 5;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }

    // optional int32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int64 buyTime = 7;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buytime());
    }

    // optional string playerName = 8;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 playerID = 9;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string petName = 10;
    if (has_petname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petname());
    }

    // optional int32 petQuality = 11;
    if (has_petquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petquality());
    }

    // optional int32 petLevel = 12;
    if (has_petlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petlevel());
    }

    // optional int32 saleVip = 13;
    if (has_salevip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->salevip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuctionRecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuctionRecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuctionRecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuctionRecordData::MergeFrom(const AuctionRecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_petname()) {
      set_petname(from.petname());
    }
    if (from.has_petquality()) {
      set_petquality(from.petquality());
    }
    if (from.has_petlevel()) {
      set_petlevel(from.petlevel());
    }
    if (from.has_salevip()) {
      set_salevip(from.salevip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuctionRecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuctionRecordData::CopyFrom(const AuctionRecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRecordData::IsInitialized() const {

  return true;
}

void AuctionRecordData::Swap(AuctionRecordData* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(buytime_, other->buytime_);
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(petname_, other->petname_);
    std::swap(petquality_, other->petquality_);
    std::swap(petlevel_, other->petlevel_);
    std::swap(salevip_, other->salevip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuctionRecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuctionRecordData_descriptor_;
  metadata.reflection = AuctionRecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetAucitonList::kGetTypeFieldNumber;
const int CGGetAucitonList::kBidFieldNumber;
const int CGGetAucitonList::kSidFieldNumber;
const int CGGetAucitonList::kJobidFieldNumber;
const int CGGetAucitonList::kSortTypeFieldNumber;
const int CGGetAucitonList::kBodyTypeFieldNumber;
const int CGGetAucitonList::kPageNumFieldNumber;
const int CGGetAucitonList::kSearchKeyFieldNumber;
const int CGGetAucitonList::kPriceTypeFieldNumber;
const int CGGetAucitonList::kQualityFieldNumber;
#endif  // !_MSC_VER

CGGetAucitonList::CGGetAucitonList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAucitonList)
}

void CGGetAucitonList::InitAsDefaultInstance() {
}

CGGetAucitonList::CGGetAucitonList(const CGGetAucitonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAucitonList)
}

void CGGetAucitonList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gettype_ = 0;
  bid_ = 0;
  sid_ = 0;
  jobid_ = 0;
  sorttype_ = 0;
  pagenum_ = 0;
  searchkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAucitonList::~CGGetAucitonList() {
  // @@protoc_insertion_point(destructor:CGGetAucitonList)
  SharedDtor();
}

void CGGetAucitonList::SharedDtor() {
  if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete searchkey_;
  }
  if (this != default_instance_) {
  }
}

void CGGetAucitonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAucitonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAucitonList_descriptor_;
}

const CGGetAucitonList& CGGetAucitonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

CGGetAucitonList* CGGetAucitonList::default_instance_ = NULL;

CGGetAucitonList* CGGetAucitonList::New() const {
  return new CGGetAucitonList;
}

void CGGetAucitonList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetAucitonList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(gettype_, jobid_);
    ZR_(sorttype_, pagenum_);
    if (has_searchkey()) {
      if (searchkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        searchkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bodytype_.Clear();
  pricetype_.Clear();
  quality_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAucitonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAucitonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 getType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettype_)));
          set_has_gettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bid;
        break;
      }

      // optional int32 bid = 2;
      case 2: {
        if (tag == 16) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (tag == 24) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_jobid;
        break;
      }

      // optional int32 jobid = 4;
      case 4: {
        if (tag == 32) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sortType;
        break;
      }

      // optional int32 sortType = 5;
      case 5: {
        if (tag == 40) {
         parse_sortType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorttype_)));
          set_has_sorttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bodyType;
        break;
      }

      // repeated int32 bodyType = 6;
      case 6: {
        if (tag == 48) {
         parse_bodyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_bodytype())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bodytype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bodyType;
        if (input->ExpectTag(56)) goto parse_pageNum;
        break;
      }

      // optional int32 pageNum = 7;
      case 7: {
        if (tag == 56) {
         parse_pageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagenum_)));
          set_has_pagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_searchKey;
        break;
      }

      // optional string searchKey = 8;
      case 8: {
        if (tag == 66) {
         parse_searchKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->searchkey().data(), this->searchkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "searchkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_priceType;
        break;
      }

      // repeated int32 priceType = 9;
      case 9: {
        if (tag == 72) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_pricetype())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pricetype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_priceType;
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // repeated int32 quality = 10;
      case 10: {
        if (tag == 80) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_quality())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_quality())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAucitonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAucitonList)
  return false;
#undef DO_
}

void CGGetAucitonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAucitonList)
  // optional int32 getType = 1;
  if (has_gettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gettype(), output);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bid(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional int32 jobid = 4;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jobid(), output);
  }

  // optional int32 sortType = 5;
  if (has_sorttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sorttype(), output);
  }

  // repeated int32 bodyType = 6;
  for (int i = 0; i < this->bodytype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->bodytype(i), output);
  }

  // optional int32 pageNum = 7;
  if (has_pagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pagenum(), output);
  }

  // optional string searchKey = 8;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->searchkey(), output);
  }

  // repeated int32 priceType = 9;
  for (int i = 0; i < this->pricetype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->pricetype(i), output);
  }

  // repeated int32 quality = 10;
  for (int i = 0; i < this->quality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->quality(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAucitonList)
}

::google::protobuf::uint8* CGGetAucitonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAucitonList)
  // optional int32 getType = 1;
  if (has_gettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gettype(), target);
  }

  // optional int32 bid = 2;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bid(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional int32 jobid = 4;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jobid(), target);
  }

  // optional int32 sortType = 5;
  if (has_sorttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sorttype(), target);
  }

  // repeated int32 bodyType = 6;
  for (int i = 0; i < this->bodytype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->bodytype(i), target);
  }

  // optional int32 pageNum = 7;
  if (has_pagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pagenum(), target);
  }

  // optional string searchKey = 8;
  if (has_searchkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->searchkey().data(), this->searchkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "searchkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->searchkey(), target);
  }

  // repeated int32 priceType = 9;
  for (int i = 0; i < this->pricetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->pricetype(i), target);
  }

  // repeated int32 quality = 10;
  for (int i = 0; i < this->quality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->quality(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAucitonList)
  return target;
}

int CGGetAucitonList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 getType = 1;
    if (has_gettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettype());
    }

    // optional int32 bid = 2;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 jobid = 4;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid());
    }

    // optional int32 sortType = 5;
    if (has_sorttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorttype());
    }

    // optional int32 pageNum = 7;
    if (has_pagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagenum());
    }

    // optional string searchKey = 8;
    if (has_searchkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchkey());
    }

  }
  // repeated int32 bodyType = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->bodytype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bodytype(i));
    }
    total_size += 1 * this->bodytype_size() + data_size;
  }

  // repeated int32 priceType = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->pricetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pricetype(i));
    }
    total_size += 1 * this->pricetype_size() + data_size;
  }

  // repeated int32 quality = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->quality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->quality(i));
    }
    total_size += 1 * this->quality_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAucitonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAucitonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAucitonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAucitonList::MergeFrom(const CGGetAucitonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  bodytype_.MergeFrom(from.bodytype_);
  pricetype_.MergeFrom(from.pricetype_);
  quality_.MergeFrom(from.quality_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gettype()) {
      set_gettype(from.gettype());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_sorttype()) {
      set_sorttype(from.sorttype());
    }
    if (from.has_pagenum()) {
      set_pagenum(from.pagenum());
    }
    if (from.has_searchkey()) {
      set_searchkey(from.searchkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAucitonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAucitonList::CopyFrom(const CGGetAucitonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAucitonList::IsInitialized() const {

  return true;
}

void CGGetAucitonList::Swap(CGGetAucitonList* other) {
  if (other != this) {
    std::swap(gettype_, other->gettype_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(jobid_, other->jobid_);
    std::swap(sorttype_, other->sorttype_);
    bodytype_.Swap(&other->bodytype_);
    std::swap(pagenum_, other->pagenum_);
    std::swap(searchkey_, other->searchkey_);
    pricetype_.Swap(&other->pricetype_);
    quality_.Swap(&other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAucitonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAucitonList_descriptor_;
  metadata.reflection = CGGetAucitonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAucitonListBack::kGetTypeFieldNumber;
const int GCGetAucitonListBack::kCurrentPageFieldNumber;
const int GCGetAucitonListBack::kAllPagesFieldNumber;
const int GCGetAucitonListBack::kAbackDatalistFieldNumber;
#endif  // !_MSC_VER

GCGetAucitonListBack::GCGetAucitonListBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAucitonListBack)
}

void GCGetAucitonListBack::InitAsDefaultInstance() {
}

GCGetAucitonListBack::GCGetAucitonListBack(const GCGetAucitonListBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAucitonListBack)
}

void GCGetAucitonListBack::SharedCtor() {
  _cached_size_ = 0;
  gettype_ = 0;
  currentpage_ = 0;
  allpages_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAucitonListBack::~GCGetAucitonListBack() {
  // @@protoc_insertion_point(destructor:GCGetAucitonListBack)
  SharedDtor();
}

void GCGetAucitonListBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAucitonListBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAucitonListBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAucitonListBack_descriptor_;
}

const GCGetAucitonListBack& GCGetAucitonListBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

GCGetAucitonListBack* GCGetAucitonListBack::default_instance_ = NULL;

GCGetAucitonListBack* GCGetAucitonListBack::New() const {
  return new GCGetAucitonListBack;
}

void GCGetAucitonListBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetAucitonListBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gettype_, currentpage_);
    allpages_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  abackdatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAucitonListBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAucitonListBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 getType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettype_)));
          set_has_gettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currentPage;
        break;
      }

      // optional int32 currentPage = 2;
      case 2: {
        if (tag == 16) {
         parse_currentPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentpage_)));
          set_has_currentpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllPages;
        break;
      }

      // optional int32 AllPages = 3;
      case 3: {
        if (tag == 24) {
         parse_AllPages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allpages_)));
          set_has_allpages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_abackDatalist;
        break;
      }

      // repeated .AuctionBackData abackDatalist = 4;
      case 4: {
        if (tag == 34) {
         parse_abackDatalist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abackdatalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_abackDatalist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAucitonListBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAucitonListBack)
  return false;
#undef DO_
}

void GCGetAucitonListBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAucitonListBack)
  // optional int32 getType = 1;
  if (has_gettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gettype(), output);
  }

  // optional int32 currentPage = 2;
  if (has_currentpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentpage(), output);
  }

  // optional int32 AllPages = 3;
  if (has_allpages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allpages(), output);
  }

  // repeated .AuctionBackData abackDatalist = 4;
  for (int i = 0; i < this->abackdatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->abackdatalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAucitonListBack)
}

::google::protobuf::uint8* GCGetAucitonListBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAucitonListBack)
  // optional int32 getType = 1;
  if (has_gettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gettype(), target);
  }

  // optional int32 currentPage = 2;
  if (has_currentpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentpage(), target);
  }

  // optional int32 AllPages = 3;
  if (has_allpages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allpages(), target);
  }

  // repeated .AuctionBackData abackDatalist = 4;
  for (int i = 0; i < this->abackdatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->abackdatalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAucitonListBack)
  return target;
}

int GCGetAucitonListBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 getType = 1;
    if (has_gettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettype());
    }

    // optional int32 currentPage = 2;
    if (has_currentpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentpage());
    }

    // optional int32 AllPages = 3;
    if (has_allpages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allpages());
    }

  }
  // repeated .AuctionBackData abackDatalist = 4;
  total_size += 1 * this->abackdatalist_size();
  for (int i = 0; i < this->abackdatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abackdatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAucitonListBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAucitonListBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAucitonListBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAucitonListBack::MergeFrom(const GCGetAucitonListBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  abackdatalist_.MergeFrom(from.abackdatalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gettype()) {
      set_gettype(from.gettype());
    }
    if (from.has_currentpage()) {
      set_currentpage(from.currentpage());
    }
    if (from.has_allpages()) {
      set_allpages(from.allpages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAucitonListBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAucitonListBack::CopyFrom(const GCGetAucitonListBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAucitonListBack::IsInitialized() const {

  return true;
}

void GCGetAucitonListBack::Swap(GCGetAucitonListBack* other) {
  if (other != this) {
    std::swap(gettype_, other->gettype_);
    std::swap(currentpage_, other->currentpage_);
    std::swap(allpages_, other->allpages_);
    abackdatalist_.Swap(&other->abackdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAucitonListBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAucitonListBack_descriptor_;
  metadata.reflection = GCGetAucitonListBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAuctionSale::kItemIDFieldNumber;
const int CGAuctionSale::kAuctionTypeFieldNumber;
const int CGAuctionSale::kNumFieldNumber;
const int CGAuctionSale::kSellTypeFieldNumber;
const int CGAuctionSale::kUnitPriceFieldNumber;
#endif  // !_MSC_VER

CGAuctionSale::CGAuctionSale()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAuctionSale)
}

void CGAuctionSale::InitAsDefaultInstance() {
}

CGAuctionSale::CGAuctionSale(const CGAuctionSale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAuctionSale)
}

void CGAuctionSale::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  auctiontype_ = 0;
  num_ = 0;
  selltype_ = 0;
  unitprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAuctionSale::~CGAuctionSale() {
  // @@protoc_insertion_point(destructor:CGAuctionSale)
  SharedDtor();
}

void CGAuctionSale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAuctionSale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAuctionSale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAuctionSale_descriptor_;
}

const CGAuctionSale& CGAuctionSale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

CGAuctionSale* CGAuctionSale::default_instance_ = NULL;

CGAuctionSale* CGAuctionSale::New() const {
  return new CGAuctionSale;
}

void CGAuctionSale::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAuctionSale*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(itemid_, unitprice_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAuctionSale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAuctionSale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_auctionType;
        break;
      }

      // optional int32 auctionType = 2;
      case 2: {
        if (tag == 16) {
         parse_auctionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctiontype_)));
          set_has_auctiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sellType;
        break;
      }

      // optional int32 sellType = 4;
      case 4: {
        if (tag == 32) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unitPrice;
        break;
      }

      // optional int32 unitPrice = 5;
      case 5: {
        if (tag == 40) {
         parse_unitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitprice_)));
          set_has_unitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAuctionSale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAuctionSale)
  return false;
#undef DO_
}

void CGAuctionSale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAuctionSale)
  // optional int64 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // optional int32 auctionType = 2;
  if (has_auctiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->auctiontype(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 sellType = 4;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->selltype(), output);
  }

  // optional int32 unitPrice = 5;
  if (has_unitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unitprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAuctionSale)
}

::google::protobuf::uint8* CGAuctionSale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAuctionSale)
  // optional int64 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 auctionType = 2;
  if (has_auctiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->auctiontype(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 sellType = 4;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->selltype(), target);
  }

  // optional int32 unitPrice = 5;
  if (has_unitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unitprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAuctionSale)
  return target;
}

int CGAuctionSale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 auctionType = 2;
    if (has_auctiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auctiontype());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 sellType = 4;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selltype());
    }

    // optional int32 unitPrice = 5;
    if (has_unitprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unitprice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAuctionSale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAuctionSale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAuctionSale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAuctionSale::MergeFrom(const CGAuctionSale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_auctiontype()) {
      set_auctiontype(from.auctiontype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_unitprice()) {
      set_unitprice(from.unitprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAuctionSale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAuctionSale::CopyFrom(const CGAuctionSale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionSale::IsInitialized() const {

  return true;
}

void CGAuctionSale::Swap(CGAuctionSale* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(auctiontype_, other->auctiontype_);
    std::swap(num_, other->num_);
    std::swap(selltype_, other->selltype_);
    std::swap(unitprice_, other->unitprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAuctionSale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAuctionSale_descriptor_;
  metadata.reflection = CGAuctionSale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAuctionBuyShelve::kAhIDFieldNumber;
const int CGAuctionBuyShelve::kTypeFieldNumber;
const int CGAuctionBuyShelve::kNumFieldNumber;
#endif  // !_MSC_VER

CGAuctionBuyShelve::CGAuctionBuyShelve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAuctionBuyShelve)
}

void CGAuctionBuyShelve::InitAsDefaultInstance() {
}

CGAuctionBuyShelve::CGAuctionBuyShelve(const CGAuctionBuyShelve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAuctionBuyShelve)
}

void CGAuctionBuyShelve::SharedCtor() {
  _cached_size_ = 0;
  ahid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAuctionBuyShelve::~CGAuctionBuyShelve() {
  // @@protoc_insertion_point(destructor:CGAuctionBuyShelve)
  SharedDtor();
}

void CGAuctionBuyShelve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAuctionBuyShelve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAuctionBuyShelve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAuctionBuyShelve_descriptor_;
}

const CGAuctionBuyShelve& CGAuctionBuyShelve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

CGAuctionBuyShelve* CGAuctionBuyShelve::default_instance_ = NULL;

CGAuctionBuyShelve* CGAuctionBuyShelve::New() const {
  return new CGAuctionBuyShelve;
}

void CGAuctionBuyShelve::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGAuctionBuyShelve*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ahid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAuctionBuyShelve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAuctionBuyShelve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ahID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ahid_)));
          set_has_ahid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAuctionBuyShelve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAuctionBuyShelve)
  return false;
#undef DO_
}

void CGAuctionBuyShelve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAuctionBuyShelve)
  // optional int64 ahID = 1;
  if (has_ahid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ahid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAuctionBuyShelve)
}

::google::protobuf::uint8* CGAuctionBuyShelve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAuctionBuyShelve)
  // optional int64 ahID = 1;
  if (has_ahid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ahid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAuctionBuyShelve)
  return target;
}

int CGAuctionBuyShelve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ahID = 1;
    if (has_ahid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ahid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAuctionBuyShelve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAuctionBuyShelve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAuctionBuyShelve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAuctionBuyShelve::MergeFrom(const CGAuctionBuyShelve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ahid()) {
      set_ahid(from.ahid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAuctionBuyShelve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAuctionBuyShelve::CopyFrom(const CGAuctionBuyShelve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAuctionBuyShelve::IsInitialized() const {

  return true;
}

void CGAuctionBuyShelve::Swap(CGAuctionBuyShelve* other) {
  if (other != this) {
    std::swap(ahid_, other->ahid_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAuctionBuyShelve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAuctionBuyShelve_descriptor_;
  metadata.reflection = CGAuctionBuyShelve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAuctionHouseBack::kActionTypeFieldNumber;
const int GCAuctionHouseBack::kResultCodeFieldNumber;
#endif  // !_MSC_VER

GCAuctionHouseBack::GCAuctionHouseBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAuctionHouseBack)
}

void GCAuctionHouseBack::InitAsDefaultInstance() {
}

GCAuctionHouseBack::GCAuctionHouseBack(const GCAuctionHouseBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAuctionHouseBack)
}

void GCAuctionHouseBack::SharedCtor() {
  _cached_size_ = 0;
  actiontype_ = 0;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAuctionHouseBack::~GCAuctionHouseBack() {
  // @@protoc_insertion_point(destructor:GCAuctionHouseBack)
  SharedDtor();
}

void GCAuctionHouseBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAuctionHouseBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAuctionHouseBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAuctionHouseBack_descriptor_;
}

const GCAuctionHouseBack& GCAuctionHouseBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

GCAuctionHouseBack* GCAuctionHouseBack::default_instance_ = NULL;

GCAuctionHouseBack* GCAuctionHouseBack::New() const {
  return new GCAuctionHouseBack;
}

void GCAuctionHouseBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAuctionHouseBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actiontype_, resultcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAuctionHouseBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAuctionHouseBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actionType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 2;
      case 2: {
        if (tag == 16) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAuctionHouseBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAuctionHouseBack)
  return false;
#undef DO_
}

void GCAuctionHouseBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAuctionHouseBack)
  // optional int32 actionType = 1;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actiontype(), output);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAuctionHouseBack)
}

::google::protobuf::uint8* GCAuctionHouseBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAuctionHouseBack)
  // optional int32 actionType = 1;
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actiontype(), target);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAuctionHouseBack)
  return target;
}

int GCAuctionHouseBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actionType = 1;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontype());
    }

    // optional int32 resultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAuctionHouseBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAuctionHouseBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAuctionHouseBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAuctionHouseBack::MergeFrom(const GCAuctionHouseBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAuctionHouseBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAuctionHouseBack::CopyFrom(const GCAuctionHouseBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAuctionHouseBack::IsInitialized() const {

  return true;
}

void GCAuctionHouseBack::Swap(GCAuctionHouseBack* other) {
  if (other != this) {
    std::swap(actiontype_, other->actiontype_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAuctionHouseBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAuctionHouseBack_descriptor_;
  metadata.reflection = GCAuctionHouseBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAuctionRecordList::CGGetAuctionRecordList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAuctionRecordList)
}

void CGGetAuctionRecordList::InitAsDefaultInstance() {
}

CGGetAuctionRecordList::CGGetAuctionRecordList(const CGGetAuctionRecordList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAuctionRecordList)
}

void CGGetAuctionRecordList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAuctionRecordList::~CGGetAuctionRecordList() {
  // @@protoc_insertion_point(destructor:CGGetAuctionRecordList)
  SharedDtor();
}

void CGGetAuctionRecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAuctionRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAuctionRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAuctionRecordList_descriptor_;
}

const CGGetAuctionRecordList& CGGetAuctionRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

CGGetAuctionRecordList* CGGetAuctionRecordList::default_instance_ = NULL;

CGGetAuctionRecordList* CGGetAuctionRecordList::New() const {
  return new CGGetAuctionRecordList;
}

void CGGetAuctionRecordList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAuctionRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAuctionRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAuctionRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAuctionRecordList)
  return false;
#undef DO_
}

void CGGetAuctionRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAuctionRecordList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAuctionRecordList)
}

::google::protobuf::uint8* CGGetAuctionRecordList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAuctionRecordList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAuctionRecordList)
  return target;
}

int CGGetAuctionRecordList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAuctionRecordList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAuctionRecordList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAuctionRecordList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAuctionRecordList::MergeFrom(const CGGetAuctionRecordList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAuctionRecordList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAuctionRecordList::CopyFrom(const CGGetAuctionRecordList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAuctionRecordList::IsInitialized() const {

  return true;
}

void CGGetAuctionRecordList::Swap(CGGetAuctionRecordList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAuctionRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAuctionRecordList_descriptor_;
  metadata.reflection = CGGetAuctionRecordList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAuctionRecordListBack::kAuctionRecordDataListFieldNumber;
const int GCGetAuctionRecordListBack::kResultCodeFieldNumber;
#endif  // !_MSC_VER

GCGetAuctionRecordListBack::GCGetAuctionRecordListBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAuctionRecordListBack)
}

void GCGetAuctionRecordListBack::InitAsDefaultInstance() {
}

GCGetAuctionRecordListBack::GCGetAuctionRecordListBack(const GCGetAuctionRecordListBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAuctionRecordListBack)
}

void GCGetAuctionRecordListBack::SharedCtor() {
  _cached_size_ = 0;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAuctionRecordListBack::~GCGetAuctionRecordListBack() {
  // @@protoc_insertion_point(destructor:GCGetAuctionRecordListBack)
  SharedDtor();
}

void GCGetAuctionRecordListBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAuctionRecordListBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAuctionRecordListBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAuctionRecordListBack_descriptor_;
}

const GCGetAuctionRecordListBack& GCGetAuctionRecordListBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AuctionMessage_2eproto();
  return *default_instance_;
}

GCGetAuctionRecordListBack* GCGetAuctionRecordListBack::default_instance_ = NULL;

GCGetAuctionRecordListBack* GCGetAuctionRecordListBack::New() const {
  return new GCGetAuctionRecordListBack;
}

void GCGetAuctionRecordListBack::Clear() {
  resultcode_ = 0;
  auctionrecorddatalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAuctionRecordListBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAuctionRecordListBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AuctionRecordData auctionRecordDataList = 1;
      case 1: {
        if (tag == 10) {
         parse_auctionRecordDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auctionrecorddatalist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_auctionRecordDataList;
        if (input->ExpectTag(16)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 2;
      case 2: {
        if (tag == 16) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAuctionRecordListBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAuctionRecordListBack)
  return false;
#undef DO_
}

void GCGetAuctionRecordListBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAuctionRecordListBack)
  // repeated .AuctionRecordData auctionRecordDataList = 1;
  for (int i = 0; i < this->auctionrecorddatalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->auctionrecorddatalist(i), output);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAuctionRecordListBack)
}

::google::protobuf::uint8* GCGetAuctionRecordListBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAuctionRecordListBack)
  // repeated .AuctionRecordData auctionRecordDataList = 1;
  for (int i = 0; i < this->auctionrecorddatalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->auctionrecorddatalist(i), target);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAuctionRecordListBack)
  return target;
}

int GCGetAuctionRecordListBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 resultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  // repeated .AuctionRecordData auctionRecordDataList = 1;
  total_size += 1 * this->auctionrecorddatalist_size();
  for (int i = 0; i < this->auctionrecorddatalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auctionrecorddatalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAuctionRecordListBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAuctionRecordListBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAuctionRecordListBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAuctionRecordListBack::MergeFrom(const GCGetAuctionRecordListBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  auctionrecorddatalist_.MergeFrom(from.auctionrecorddatalist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAuctionRecordListBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAuctionRecordListBack::CopyFrom(const GCGetAuctionRecordListBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAuctionRecordListBack::IsInitialized() const {

  return true;
}

void GCGetAuctionRecordListBack::Swap(GCGetAuctionRecordListBack* other) {
  if (other != this) {
    auctionrecorddatalist_.Swap(&other->auctionrecorddatalist_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAuctionRecordListBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAuctionRecordListBack_descriptor_;
  metadata.reflection = GCGetAuctionRecordListBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
