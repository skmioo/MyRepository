// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BackpackMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BackpackMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BackpackGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackpackGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackpackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackpackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBackpackOper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBackpackOper_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBackpackOper_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBackpackOper_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPutBackpack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPutBackpack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPutStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPutStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBackpackSpecial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBackpackSpecial_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureMapDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureMapDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBackTreasureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBackTreasureMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBackUseMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBackUseMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBackPuseUseMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBackPuseUseMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendTransmitToMe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendTransmitToMe_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTransmitToMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTransmitToMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenChatHornUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenChatHornUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendOpenBoxEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendOpenBoxEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendMakeAct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendMakeAct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCItemLimitBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCItemLimitBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* NineMysteryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NineMysteryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBackUseNineMystery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBackUseNineMystery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUseNineMysteryIntoDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUseNineMysteryIntoDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBackNineMystery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBackNineMystery_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGComposeItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGComposeItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCComposeItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCComposeItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSetAutoResolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSetAutoResolve_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSetAutoResolve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSetAutoResolve_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BackpackMessage_2eproto() {
  protobuf_AddDesc_BackpackMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BackpackMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BackpackGrid_descriptor_ = file->message_type(0);
  static const int BackpackGrid_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, treasureequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, talismaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, treasuremap_),
  };
  BackpackGrid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackpackGrid_descriptor_,
      BackpackGrid::default_instance_,
      BackpackGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackGrid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackpackGrid));
  BackpackItem_descriptor_ = file->message_type(1);
  static const int BackpackItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, bind_),
  };
  BackpackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackpackItem_descriptor_,
      BackpackItem::default_instance_,
      BackpackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackpackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackpackItem));
  CGBackpackOper_descriptor_ = file->message_type(2);
  static const int CGBackpackOper_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, resolveid_),
  };
  CGBackpackOper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBackpackOper_descriptor_,
      CGBackpackOper::default_instance_,
      CGBackpackOper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackOper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBackpackOper));
  GCBackpackOper_descriptor_ = file->message_type(3);
  static const int GCBackpackOper_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, resolveid_),
  };
  GCBackpackOper_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBackpackOper_descriptor_,
      GCBackpackOper::default_instance_,
      GCBackpackOper_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackpackOper, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBackpackOper));
  GCPutBackpack_descriptor_ = file->message_type(4);
  static const int GCPutBackpack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, gridnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, gridmax_),
  };
  GCPutBackpack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPutBackpack_descriptor_,
      GCPutBackpack::default_instance_,
      GCPutBackpack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutBackpack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPutBackpack));
  GCPutStorage_descriptor_ = file->message_type(5);
  static const int GCPutStorage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, gridnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, gridmax_),
  };
  GCPutStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPutStorage_descriptor_,
      GCPutStorage::default_instance_,
      GCPutStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPutStorage));
  CGBackpackSpecial_descriptor_ = file->message_type(6);
  static const int CGBackpackSpecial_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackSpecial, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackSpecial, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackSpecial, backpackitem_),
  };
  CGBackpackSpecial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBackpackSpecial_descriptor_,
      CGBackpackSpecial::default_instance_,
      CGBackpackSpecial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackSpecial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackpackSpecial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBackpackSpecial));
  TreasureMapDataInfo_descriptor_ = file->message_type(7);
  static const int TreasureMapDataInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, locationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, eventparam_),
  };
  TreasureMapDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureMapDataInfo_descriptor_,
      TreasureMapDataInfo::default_instance_,
      TreasureMapDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMapDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureMapDataInfo));
  GCBackTreasureMap_descriptor_ = file->message_type(8);
  static const int GCBackTreasureMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackTreasureMap, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackTreasureMap, operate_),
  };
  GCBackTreasureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBackTreasureMap_descriptor_,
      GCBackTreasureMap::default_instance_,
      GCBackTreasureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackTreasureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackTreasureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBackTreasureMap));
  TreasureMap_descriptor_ = file->message_type(9);
  static const int TreasureMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMap, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMap, funcid_),
  };
  TreasureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureMap_descriptor_,
      TreasureMap::default_instance_,
      TreasureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureMap));
  CGBackUseMap_descriptor_ = file->message_type(10);
  static const int CGBackUseMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseMap, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseMap, pid_),
  };
  CGBackUseMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBackUseMap_descriptor_,
      CGBackUseMap::default_instance_,
      CGBackUseMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBackUseMap));
  GCBackPuseUseMap_descriptor_ = file->message_type(11);
  static const int GCBackPuseUseMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, treasuremap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, monsterid_),
  };
  GCBackPuseUseMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBackPuseUseMap_descriptor_,
      GCBackPuseUseMap::default_instance_,
      GCBackPuseUseMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackPuseUseMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBackPuseUseMap));
  GCSendTransmitToMe_descriptor_ = file->message_type(12);
  static const int GCSendTransmitToMe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTransmitToMe, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTransmitToMe, limittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTransmitToMe, playername_),
  };
  GCSendTransmitToMe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendTransmitToMe_descriptor_,
      GCSendTransmitToMe::default_instance_,
      GCSendTransmitToMe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTransmitToMe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendTransmitToMe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendTransmitToMe));
  CGTransmitToMember_descriptor_ = file->message_type(13);
  static const int CGTransmitToMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransmitToMember, playerid_),
  };
  CGTransmitToMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTransmitToMember_descriptor_,
      CGTransmitToMember::default_instance_,
      CGTransmitToMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransmitToMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTransmitToMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTransmitToMember));
  GCOpenChatHornUI_descriptor_ = file->message_type(14);
  static const int GCOpenChatHornUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenChatHornUI, errorcode_),
  };
  GCOpenChatHornUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenChatHornUI_descriptor_,
      GCOpenChatHornUI::default_instance_,
      GCOpenChatHornUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenChatHornUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenChatHornUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenChatHornUI));
  GCSendOpenBoxEnd_descriptor_ = file->message_type(15);
  static const int GCSendOpenBoxEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendOpenBoxEnd, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendOpenBoxEnd, errorcode_),
  };
  GCSendOpenBoxEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendOpenBoxEnd_descriptor_,
      GCSendOpenBoxEnd::default_instance_,
      GCSendOpenBoxEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendOpenBoxEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendOpenBoxEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendOpenBoxEnd));
  GCSendMakeAct_descriptor_ = file->message_type(16);
  static const int GCSendMakeAct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMakeAct, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMakeAct, playerid_),
  };
  GCSendMakeAct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendMakeAct_descriptor_,
      GCSendMakeAct::default_instance_,
      GCSendMakeAct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMakeAct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMakeAct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendMakeAct));
  ItemLimit_descriptor_ = file->message_type(17);
  static const int ItemLimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLimit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLimit, num_),
  };
  ItemLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemLimit_descriptor_,
      ItemLimit::default_instance_,
      ItemLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemLimit));
  GCItemLimitBack_descriptor_ = file->message_type(18);
  static const int GCItemLimitBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCItemLimitBack, itemlimits_),
  };
  GCItemLimitBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCItemLimitBack_descriptor_,
      GCItemLimitBack::default_instance_,
      GCItemLimitBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCItemLimitBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCItemLimitBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCItemLimitBack));
  NineMysteryItem_descriptor_ = file->message_type(19);
  static const int NineMysteryItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, param_),
  };
  NineMysteryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NineMysteryItem_descriptor_,
      NineMysteryItem::default_instance_,
      NineMysteryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NineMysteryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NineMysteryItem));
  CGBackUseNineMystery_descriptor_ = file->message_type(20);
  static const int CGBackUseNineMystery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseNineMystery, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseNineMystery, pid_),
  };
  CGBackUseNineMystery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBackUseNineMystery_descriptor_,
      CGBackUseNineMystery::default_instance_,
      CGBackUseNineMystery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseNineMystery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackUseNineMystery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBackUseNineMystery));
  CGUseNineMysteryIntoDungeon_descriptor_ = file->message_type(21);
  static const int CGUseNineMysteryIntoDungeon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseNineMysteryIntoDungeon, dungeon_),
  };
  CGUseNineMysteryIntoDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUseNineMysteryIntoDungeon_descriptor_,
      CGUseNineMysteryIntoDungeon::default_instance_,
      CGUseNineMysteryIntoDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseNineMysteryIntoDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseNineMysteryIntoDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUseNineMysteryIntoDungeon));
  GCBackNineMystery_descriptor_ = file->message_type(22);
  static const int GCBackNineMystery_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, ninemysteryitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, monsterid_),
  };
  GCBackNineMystery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBackNineMystery_descriptor_,
      GCBackNineMystery::default_instance_,
      GCBackNineMystery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackNineMystery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBackNineMystery));
  CGComposeItems_descriptor_ = file->message_type(23);
  static const int CGComposeItems_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGComposeItems, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGComposeItems, targetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGComposeItems, selectbound_),
  };
  CGComposeItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGComposeItems_descriptor_,
      CGComposeItems::default_instance_,
      CGComposeItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGComposeItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGComposeItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGComposeItems));
  GCComposeItems_descriptor_ = file->message_type(24);
  static const int GCComposeItems_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, targetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, selectbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, flag_),
  };
  GCComposeItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCComposeItems_descriptor_,
      GCComposeItems::default_instance_,
      GCComposeItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCComposeItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCComposeItems));
  CGSetAutoResolve_descriptor_ = file->message_type(25);
  static const int CGSetAutoResolve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoResolve, resolveid_),
  };
  CGSetAutoResolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSetAutoResolve_descriptor_,
      CGSetAutoResolve::default_instance_,
      CGSetAutoResolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoResolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSetAutoResolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSetAutoResolve));
  GCSetAutoResolve_descriptor_ = file->message_type(26);
  static const int GCSetAutoResolve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoResolve, resolveid_),
  };
  GCSetAutoResolve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSetAutoResolve_descriptor_,
      GCSetAutoResolve::default_instance_,
      GCSetAutoResolve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoResolve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSetAutoResolve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSetAutoResolve));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BackpackMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackpackGrid_descriptor_, &BackpackGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackpackItem_descriptor_, &BackpackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBackpackOper_descriptor_, &CGBackpackOper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBackpackOper_descriptor_, &GCBackpackOper::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPutBackpack_descriptor_, &GCPutBackpack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPutStorage_descriptor_, &GCPutStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBackpackSpecial_descriptor_, &CGBackpackSpecial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureMapDataInfo_descriptor_, &TreasureMapDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBackTreasureMap_descriptor_, &GCBackTreasureMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureMap_descriptor_, &TreasureMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBackUseMap_descriptor_, &CGBackUseMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBackPuseUseMap_descriptor_, &GCBackPuseUseMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendTransmitToMe_descriptor_, &GCSendTransmitToMe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTransmitToMember_descriptor_, &CGTransmitToMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenChatHornUI_descriptor_, &GCOpenChatHornUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendOpenBoxEnd_descriptor_, &GCSendOpenBoxEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendMakeAct_descriptor_, &GCSendMakeAct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemLimit_descriptor_, &ItemLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCItemLimitBack_descriptor_, &GCItemLimitBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NineMysteryItem_descriptor_, &NineMysteryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBackUseNineMystery_descriptor_, &CGBackUseNineMystery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUseNineMysteryIntoDungeon_descriptor_, &CGUseNineMysteryIntoDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBackNineMystery_descriptor_, &GCBackNineMystery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGComposeItems_descriptor_, &CGComposeItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCComposeItems_descriptor_, &GCComposeItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSetAutoResolve_descriptor_, &CGSetAutoResolve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSetAutoResolve_descriptor_, &GCSetAutoResolve::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BackpackMessage_2eproto() {
  delete BackpackGrid::default_instance_;
  delete BackpackGrid_reflection_;
  delete BackpackItem::default_instance_;
  delete BackpackItem_reflection_;
  delete CGBackpackOper::default_instance_;
  delete CGBackpackOper_reflection_;
  delete GCBackpackOper::default_instance_;
  delete GCBackpackOper_reflection_;
  delete GCPutBackpack::default_instance_;
  delete GCPutBackpack_reflection_;
  delete GCPutStorage::default_instance_;
  delete GCPutStorage_reflection_;
  delete CGBackpackSpecial::default_instance_;
  delete CGBackpackSpecial_reflection_;
  delete TreasureMapDataInfo::default_instance_;
  delete TreasureMapDataInfo_reflection_;
  delete GCBackTreasureMap::default_instance_;
  delete GCBackTreasureMap_reflection_;
  delete TreasureMap::default_instance_;
  delete TreasureMap_reflection_;
  delete CGBackUseMap::default_instance_;
  delete CGBackUseMap_reflection_;
  delete GCBackPuseUseMap::default_instance_;
  delete GCBackPuseUseMap_reflection_;
  delete GCSendTransmitToMe::default_instance_;
  delete GCSendTransmitToMe_reflection_;
  delete CGTransmitToMember::default_instance_;
  delete CGTransmitToMember_reflection_;
  delete GCOpenChatHornUI::default_instance_;
  delete GCOpenChatHornUI_reflection_;
  delete GCSendOpenBoxEnd::default_instance_;
  delete GCSendOpenBoxEnd_reflection_;
  delete GCSendMakeAct::default_instance_;
  delete GCSendMakeAct_reflection_;
  delete ItemLimit::default_instance_;
  delete ItemLimit_reflection_;
  delete GCItemLimitBack::default_instance_;
  delete GCItemLimitBack_reflection_;
  delete NineMysteryItem::default_instance_;
  delete NineMysteryItem_reflection_;
  delete CGBackUseNineMystery::default_instance_;
  delete CGBackUseNineMystery_reflection_;
  delete CGUseNineMysteryIntoDungeon::default_instance_;
  delete CGUseNineMysteryIntoDungeon_reflection_;
  delete GCBackNineMystery::default_instance_;
  delete GCBackNineMystery_reflection_;
  delete CGComposeItems::default_instance_;
  delete CGComposeItems_reflection_;
  delete GCComposeItems::default_instance_;
  delete GCComposeItems_reflection_;
  delete CGSetAutoResolve::default_instance_;
  delete CGSetAutoResolve_reflection_;
  delete GCSetAutoResolve::default_instance_;
  delete GCSetAutoResolve_reflection_;
}

void protobuf_AddDesc_BackpackMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_EquipMessage_2eproto();
  ::protobuf_AddDesc_TreasureEquipMessage_2eproto();
  ::protobuf_AddDesc_TalismanMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025BackpackMessage.proto\032\022InnerMessage.pr"
    "oto\032\022EquipMessage.proto\032\032TreasureEquipMe"
    "ssage.proto\032\025TalismanMessage.proto\"\376\001\n\014B"
    "ackpackGrid\022\016\n\006gridID\030\001 \001(\005\022\014\n\004type\030\002 \001("
    "\005\022\016\n\006itemId\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\035\n\tequipI"
    "nfo\030\005 \001(\0132\n.EquipInfo\022\013\n\003pid\030\006 \001(\003\022\014\n\004bi"
    "nd\030\007 \001(\005\022)\n\rtreasureEquip\030\010 \001(\0132\022.Treasu"
    "reEquipData\022#\n\014talismanInfo\030\t \001(\0132\r.Tali"
    "smanInfo\022)\n\013treasureMap\030\n \001(\0132\024.Treasure"
    "MapDataInfo\"C\n\014BackpackItem\022\013\n\003bid\030\001 \001(\005"
    "\022\013\n\003sid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\014\n\004bind\030\004 \001(\005"
    "\"Q\n\016CGBackpackOper\022\017\n\007operate\030\001 \001(\005\022\013\n\003g"
    "id\030\002 \001(\005\022\016\n\006addNum\030\003 \001(\005\022\021\n\tresolveId\030\004 "
    "\003(\005\"Q\n\016GCBackpackOper\022\017\n\007operate\030\001 \001(\005\022\013"
    "\n\003gid\030\002 \001(\005\022\016\n\006addNum\030\003 \001(\005\022\021\n\tresolveId"
    "\030\004 \003(\005\"`\n\rGCPutBackpack\022\017\n\007operate\030\001 \001(\005"
    "\022\034\n\005items\030\002 \003(\0132\r.BackpackGrid\022\017\n\007gridNu"
    "m\030\003 \001(\005\022\017\n\007gridMax\030\004 \001(\005\"_\n\014GCPutStorage"
    "\022\017\n\007operate\030\001 \001(\005\022\034\n\005items\030\002 \003(\0132\r.Backp"
    "ackGrid\022\017\n\007gridNum\030\003 \001(\005\022\017\n\007gridMax\030\004 \001("
    "\005\"[\n\021CGBackpackSpecial\022\020\n\010playerId\030\001 \001(\003"
    "\022\017\n\007operate\030\002 \001(\005\022#\n\014backpackItem\030\003 \003(\0132"
    "\r.BackpackItem\"]\n\023TreasureMapDataInfo\022\013\n"
    "\003pid\030\001 \001(\003\022\022\n\nlocationId\030\002 \001(\005\022\021\n\teventT"
    "ype\030\003 \001(\005\022\022\n\neventParam\030\004 \001(\005\"4\n\021GCBackT"
    "reasureMap\022\016\n\006result\030\001 \001(\005\022\017\n\007operate\030\002 "
    "\001(\005\"9\n\013TreasureMap\022\013\n\003pid\030\001 \001(\003\022\r\n\005mapID"
    "\030\002 \001(\005\022\016\n\006funcID\030\003 \001(\005\"+\n\014CGBackUseMap\022\016"
    "\n\006gridID\030\001 \001(\005\022\013\n\003pid\030\002 \001(\003\"f\n\020GCBackPus"
    "eUseMap\022\016\n\006result\030\001 \001(\005\022!\n\013treasureMap\030\002"
    " \003(\0132\014.TreasureMap\022\014\n\004type\030\003 \001(\005\022\021\n\tmons"
    "terID\030\004 \001(\003\"M\n\022GCSendTransmitToMe\022\020\n\010pla"
    "yerID\030\001 \001(\003\022\021\n\tlimitTime\030\002 \001(\005\022\022\n\nplayer"
    "Name\030\003 \001(\t\"&\n\022CGTransmitToMember\022\020\n\010play"
    "erID\030\001 \001(\003\"%\n\020GCOpenChatHornUI\022\021\n\terrorC"
    "ode\030\001 \001(\005\"E\n\020GCSendOpenBoxEnd\022\036\n\007rewards"
    "\030\001 \003(\0132\r.BackpackItem\022\021\n\terrorCode\030\002 \001(\005"
    "\"0\n\rGCSendMakeAct\022\r\n\005actID\030\001 \001(\005\022\020\n\010play"
    "erID\030\002 \001(\003\"&\n\tItemLimit\022\014\n\004type\030\001 \001(\005\022\013\n"
    "\003num\030\002 \001(\005\"1\n\017GCItemLimitBack\022\036\n\nitemLim"
    "its\030\001 \003(\0132\n.ItemLimit\"O\n\017NineMysteryItem"
    "\022\013\n\003pid\030\001 \001(\003\022\r\n\005mapID\030\002 \001(\005\022\021\n\teventTyp"
    "e\030\003 \001(\005\022\r\n\005param\030\004 \001(\t\"3\n\024CGBackUseNineM"
    "ystery\022\016\n\006gridID\030\001 \001(\005\022\013\n\003pid\030\002 \001(\003\".\n\033C"
    "GUseNineMysteryIntoDungeon\022\017\n\007dungeon\030\001 "
    "\001(\t\"\177\n\021GCBackNineMystery\022\016\n\006result\030\001 \001(\005"
    "\022)\n\017nineMysteryItem\030\002 \003(\0132\020.NineMysteryI"
    "tem\022\013\n\003pid\030\003 \001(\003\022\017\n\007operate\030\004 \001(\005\022\021\n\tmon"
    "sterID\030\005 \001(\003\"D\n\016CGComposeItems\022\n\n\002id\030\001 \001"
    "(\005\022\021\n\ttargetNum\030\002 \001(\005\022\023\n\013selectBound\030\003 \001"
    "(\005\"R\n\016GCComposeItems\022\n\n\002id\030\001 \001(\005\022\021\n\ttarg"
    "etNum\030\002 \001(\005\022\023\n\013selectBound\030\003 \001(\005\022\014\n\004flag"
    "\030\004 \001(\005\"%\n\020CGSetAutoResolve\022\021\n\tresolveId\030"
    "\001 \001(\005\"%\n\020GCSetAutoResolve\022\021\n\tresolveId\030\001"
    " \001(\005B\031\n\027com.mile.common.message", 2191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BackpackMessage.proto", &protobuf_RegisterTypes);
  BackpackGrid::default_instance_ = new BackpackGrid();
  BackpackItem::default_instance_ = new BackpackItem();
  CGBackpackOper::default_instance_ = new CGBackpackOper();
  GCBackpackOper::default_instance_ = new GCBackpackOper();
  GCPutBackpack::default_instance_ = new GCPutBackpack();
  GCPutStorage::default_instance_ = new GCPutStorage();
  CGBackpackSpecial::default_instance_ = new CGBackpackSpecial();
  TreasureMapDataInfo::default_instance_ = new TreasureMapDataInfo();
  GCBackTreasureMap::default_instance_ = new GCBackTreasureMap();
  TreasureMap::default_instance_ = new TreasureMap();
  CGBackUseMap::default_instance_ = new CGBackUseMap();
  GCBackPuseUseMap::default_instance_ = new GCBackPuseUseMap();
  GCSendTransmitToMe::default_instance_ = new GCSendTransmitToMe();
  CGTransmitToMember::default_instance_ = new CGTransmitToMember();
  GCOpenChatHornUI::default_instance_ = new GCOpenChatHornUI();
  GCSendOpenBoxEnd::default_instance_ = new GCSendOpenBoxEnd();
  GCSendMakeAct::default_instance_ = new GCSendMakeAct();
  ItemLimit::default_instance_ = new ItemLimit();
  GCItemLimitBack::default_instance_ = new GCItemLimitBack();
  NineMysteryItem::default_instance_ = new NineMysteryItem();
  CGBackUseNineMystery::default_instance_ = new CGBackUseNineMystery();
  CGUseNineMysteryIntoDungeon::default_instance_ = new CGUseNineMysteryIntoDungeon();
  GCBackNineMystery::default_instance_ = new GCBackNineMystery();
  CGComposeItems::default_instance_ = new CGComposeItems();
  GCComposeItems::default_instance_ = new GCComposeItems();
  CGSetAutoResolve::default_instance_ = new CGSetAutoResolve();
  GCSetAutoResolve::default_instance_ = new GCSetAutoResolve();
  BackpackGrid::default_instance_->InitAsDefaultInstance();
  BackpackItem::default_instance_->InitAsDefaultInstance();
  CGBackpackOper::default_instance_->InitAsDefaultInstance();
  GCBackpackOper::default_instance_->InitAsDefaultInstance();
  GCPutBackpack::default_instance_->InitAsDefaultInstance();
  GCPutStorage::default_instance_->InitAsDefaultInstance();
  CGBackpackSpecial::default_instance_->InitAsDefaultInstance();
  TreasureMapDataInfo::default_instance_->InitAsDefaultInstance();
  GCBackTreasureMap::default_instance_->InitAsDefaultInstance();
  TreasureMap::default_instance_->InitAsDefaultInstance();
  CGBackUseMap::default_instance_->InitAsDefaultInstance();
  GCBackPuseUseMap::default_instance_->InitAsDefaultInstance();
  GCSendTransmitToMe::default_instance_->InitAsDefaultInstance();
  CGTransmitToMember::default_instance_->InitAsDefaultInstance();
  GCOpenChatHornUI::default_instance_->InitAsDefaultInstance();
  GCSendOpenBoxEnd::default_instance_->InitAsDefaultInstance();
  GCSendMakeAct::default_instance_->InitAsDefaultInstance();
  ItemLimit::default_instance_->InitAsDefaultInstance();
  GCItemLimitBack::default_instance_->InitAsDefaultInstance();
  NineMysteryItem::default_instance_->InitAsDefaultInstance();
  CGBackUseNineMystery::default_instance_->InitAsDefaultInstance();
  CGUseNineMysteryIntoDungeon::default_instance_->InitAsDefaultInstance();
  GCBackNineMystery::default_instance_->InitAsDefaultInstance();
  CGComposeItems::default_instance_->InitAsDefaultInstance();
  GCComposeItems::default_instance_->InitAsDefaultInstance();
  CGSetAutoResolve::default_instance_->InitAsDefaultInstance();
  GCSetAutoResolve::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BackpackMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BackpackMessage_2eproto {
  StaticDescriptorInitializer_BackpackMessage_2eproto() {
    protobuf_AddDesc_BackpackMessage_2eproto();
  }
} static_descriptor_initializer_BackpackMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BackpackGrid::kGridIDFieldNumber;
const int BackpackGrid::kTypeFieldNumber;
const int BackpackGrid::kItemIdFieldNumber;
const int BackpackGrid::kNumFieldNumber;
const int BackpackGrid::kEquipInfoFieldNumber;
const int BackpackGrid::kPidFieldNumber;
const int BackpackGrid::kBindFieldNumber;
const int BackpackGrid::kTreasureEquipFieldNumber;
const int BackpackGrid::kTalismanInfoFieldNumber;
const int BackpackGrid::kTreasureMapFieldNumber;
#endif  // !_MSC_VER

BackpackGrid::BackpackGrid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackpackGrid)
}

void BackpackGrid::InitAsDefaultInstance() {
  equipinfo_ = const_cast< ::EquipInfo*>(&::EquipInfo::default_instance());
  treasureequip_ = const_cast< ::TreasureEquipData*>(&::TreasureEquipData::default_instance());
  talismaninfo_ = const_cast< ::TalismanInfo*>(&::TalismanInfo::default_instance());
  treasuremap_ = const_cast< ::TreasureMapDataInfo*>(&::TreasureMapDataInfo::default_instance());
}

BackpackGrid::BackpackGrid(const BackpackGrid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackpackGrid)
}

void BackpackGrid::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0;
  type_ = 0;
  itemid_ = 0;
  num_ = 0;
  equipinfo_ = NULL;
  pid_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  treasureequip_ = NULL;
  talismaninfo_ = NULL;
  treasuremap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackpackGrid::~BackpackGrid() {
  // @@protoc_insertion_point(destructor:BackpackGrid)
  SharedDtor();
}

void BackpackGrid::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
    delete treasureequip_;
    delete talismaninfo_;
    delete treasuremap_;
  }
}

void BackpackGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackpackGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackpackGrid_descriptor_;
}

const BackpackGrid& BackpackGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

BackpackGrid* BackpackGrid::default_instance_ = NULL;

BackpackGrid* BackpackGrid::New() const {
  return new BackpackGrid;
}

void BackpackGrid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackpackGrid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gridid_, num_);
    if (has_equipinfo()) {
      if (equipinfo_ != NULL) equipinfo_->::EquipInfo::Clear();
    }
    pid_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
    if (has_treasureequip()) {
      if (treasureequip_ != NULL) treasureequip_->::TreasureEquipData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_talismaninfo()) {
      if (talismaninfo_ != NULL) talismaninfo_->::TalismanInfo::Clear();
    }
    if (has_treasuremap()) {
      if (treasuremap_ != NULL) treasuremap_->::TreasureMapDataInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackpackGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackpackGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gridID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipInfo;
        break;
      }

      // optional .EquipInfo equipInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_equipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pid;
        break;
      }

      // optional int64 pid = 6;
      case 6: {
        if (tag == 48) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bind;
        break;
      }

      // optional int32 bind = 7;
      case 7: {
        if (tag == 56) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_treasureEquip;
        break;
      }

      // optional .TreasureEquipData treasureEquip = 8;
      case 8: {
        if (tag == 66) {
         parse_treasureEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasureequip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_talismanInfo;
        break;
      }

      // optional .TalismanInfo talismanInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_talismanInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talismaninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_treasureMap;
        break;
      }

      // optional .TreasureMapDataInfo treasureMap = 10;
      case 10: {
        if (tag == 82) {
         parse_treasureMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasuremap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackpackGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackpackGrid)
  return false;
#undef DO_
}

void BackpackGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackpackGrid)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gridid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional .EquipInfo equipInfo = 5;
  if (has_equipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipinfo(), output);
  }

  // optional int64 pid = 6;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->pid(), output);
  }

  // optional int32 bind = 7;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bind(), output);
  }

  // optional .TreasureEquipData treasureEquip = 8;
  if (has_treasureequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->treasureequip(), output);
  }

  // optional .TalismanInfo talismanInfo = 9;
  if (has_talismaninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->talismaninfo(), output);
  }

  // optional .TreasureMapDataInfo treasureMap = 10;
  if (has_treasuremap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->treasuremap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackpackGrid)
}

::google::protobuf::uint8* BackpackGrid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackpackGrid)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gridid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional .EquipInfo equipInfo = 5;
  if (has_equipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipinfo(), target);
  }

  // optional int64 pid = 6;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->pid(), target);
  }

  // optional int32 bind = 7;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bind(), target);
  }

  // optional .TreasureEquipData treasureEquip = 8;
  if (has_treasureequip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->treasureequip(), target);
  }

  // optional .TalismanInfo talismanInfo = 9;
  if (has_talismaninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->talismaninfo(), target);
  }

  // optional .TreasureMapDataInfo treasureMap = 10;
  if (has_treasuremap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->treasuremap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackpackGrid)
  return target;
}

int BackpackGrid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gridID = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .EquipInfo equipInfo = 5;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipinfo());
    }

    // optional int64 pid = 6;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 bind = 7;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional .TreasureEquipData treasureEquip = 8;
    if (has_treasureequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasureequip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TalismanInfo talismanInfo = 9;
    if (has_talismaninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talismaninfo());
    }

    // optional .TreasureMapDataInfo treasureMap = 10;
    if (has_treasuremap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treasuremap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackpackGrid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackpackGrid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackpackGrid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackpackGrid::MergeFrom(const BackpackGrid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_equipinfo()) {
      mutable_equipinfo()->::EquipInfo::MergeFrom(from.equipinfo());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_treasureequip()) {
      mutable_treasureequip()->::TreasureEquipData::MergeFrom(from.treasureequip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_talismaninfo()) {
      mutable_talismaninfo()->::TalismanInfo::MergeFrom(from.talismaninfo());
    }
    if (from.has_treasuremap()) {
      mutable_treasuremap()->::TreasureMapDataInfo::MergeFrom(from.treasuremap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackpackGrid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackpackGrid::CopyFrom(const BackpackGrid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackpackGrid::IsInitialized() const {

  return true;
}

void BackpackGrid::Swap(BackpackGrid* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(pid_, other->pid_);
    std::swap(bind_, other->bind_);
    std::swap(treasureequip_, other->treasureequip_);
    std::swap(talismaninfo_, other->talismaninfo_);
    std::swap(treasuremap_, other->treasuremap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackpackGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackpackGrid_descriptor_;
  metadata.reflection = BackpackGrid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackpackItem::kBidFieldNumber;
const int BackpackItem::kSidFieldNumber;
const int BackpackItem::kNumFieldNumber;
const int BackpackItem::kBindFieldNumber;
#endif  // !_MSC_VER

BackpackItem::BackpackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackpackItem)
}

void BackpackItem::InitAsDefaultInstance() {
}

BackpackItem::BackpackItem(const BackpackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackpackItem)
}

void BackpackItem::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackpackItem::~BackpackItem() {
  // @@protoc_insertion_point(destructor:BackpackItem)
  SharedDtor();
}

void BackpackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackpackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackpackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackpackItem_descriptor_;
}

const BackpackItem& BackpackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

BackpackItem* BackpackItem::default_instance_ = NULL;

BackpackItem* BackpackItem::New() const {
  return new BackpackItem;
}

void BackpackItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackpackItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, bind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackpackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackpackItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional int32 bind = 4;
      case 4: {
        if (tag == 32) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackpackItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackpackItem)
  return false;
#undef DO_
}

void BackpackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackpackItem)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackpackItem)
}

::google::protobuf::uint8* BackpackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackpackItem)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackpackItem)
  return target;
}

int BackpackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackpackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackpackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackpackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackpackItem::MergeFrom(const BackpackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackpackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackpackItem::CopyFrom(const BackpackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackpackItem::IsInitialized() const {

  return true;
}

void BackpackItem::Swap(BackpackItem* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackpackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackpackItem_descriptor_;
  metadata.reflection = BackpackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBackpackOper::kOperateFieldNumber;
const int CGBackpackOper::kGidFieldNumber;
const int CGBackpackOper::kAddNumFieldNumber;
const int CGBackpackOper::kResolveIdFieldNumber;
#endif  // !_MSC_VER

CGBackpackOper::CGBackpackOper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBackpackOper)
}

void CGBackpackOper::InitAsDefaultInstance() {
}

CGBackpackOper::CGBackpackOper(const CGBackpackOper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBackpackOper)
}

void CGBackpackOper::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gid_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBackpackOper::~CGBackpackOper() {
  // @@protoc_insertion_point(destructor:CGBackpackOper)
  SharedDtor();
}

void CGBackpackOper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBackpackOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBackpackOper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBackpackOper_descriptor_;
}

const CGBackpackOper& CGBackpackOper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGBackpackOper* CGBackpackOper::default_instance_ = NULL;

CGBackpackOper* CGBackpackOper::New() const {
  return new CGBackpackOper;
}

void CGBackpackOper::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBackpackOper*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(operate_, gid_);
    addnum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  resolveid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBackpackOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBackpackOper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addNum;
        break;
      }

      // optional int32 addNum = 3;
      case 3: {
        if (tag == 24) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resolveId;
        break;
      }

      // repeated int32 resolveId = 4;
      case 4: {
        if (tag == 32) {
         parse_resolveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_resolveid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_resolveid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resolveId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBackpackOper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBackpackOper)
  return false;
#undef DO_
}

void CGBackpackOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBackpackOper)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // optional int32 addNum = 3;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addnum(), output);
  }

  // repeated int32 resolveId = 4;
  for (int i = 0; i < this->resolveid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->resolveid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBackpackOper)
}

::google::protobuf::uint8* CGBackpackOper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBackpackOper)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // optional int32 addNum = 3;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addnum(), target);
  }

  // repeated int32 resolveId = 4;
  for (int i = 0; i < this->resolveid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->resolveid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBackpackOper)
  return target;
}

int CGBackpackOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional int32 addNum = 3;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  // repeated int32 resolveId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->resolveid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->resolveid(i));
    }
    total_size += 1 * this->resolveid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBackpackOper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBackpackOper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBackpackOper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBackpackOper::MergeFrom(const CGBackpackOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  resolveid_.MergeFrom(from.resolveid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBackpackOper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBackpackOper::CopyFrom(const CGBackpackOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBackpackOper::IsInitialized() const {

  return true;
}

void CGBackpackOper::Swap(CGBackpackOper* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(gid_, other->gid_);
    std::swap(addnum_, other->addnum_);
    resolveid_.Swap(&other->resolveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBackpackOper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBackpackOper_descriptor_;
  metadata.reflection = CGBackpackOper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBackpackOper::kOperateFieldNumber;
const int GCBackpackOper::kGidFieldNumber;
const int GCBackpackOper::kAddNumFieldNumber;
const int GCBackpackOper::kResolveIdFieldNumber;
#endif  // !_MSC_VER

GCBackpackOper::GCBackpackOper()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBackpackOper)
}

void GCBackpackOper::InitAsDefaultInstance() {
}

GCBackpackOper::GCBackpackOper(const GCBackpackOper& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBackpackOper)
}

void GCBackpackOper::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gid_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBackpackOper::~GCBackpackOper() {
  // @@protoc_insertion_point(destructor:GCBackpackOper)
  SharedDtor();
}

void GCBackpackOper::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBackpackOper::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBackpackOper::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBackpackOper_descriptor_;
}

const GCBackpackOper& GCBackpackOper::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCBackpackOper* GCBackpackOper::default_instance_ = NULL;

GCBackpackOper* GCBackpackOper::New() const {
  return new GCBackpackOper;
}

void GCBackpackOper::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBackpackOper*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(operate_, gid_);
    addnum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  resolveid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBackpackOper::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBackpackOper)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // optional int32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addNum;
        break;
      }

      // optional int32 addNum = 3;
      case 3: {
        if (tag == 24) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resolveId;
        break;
      }

      // repeated int32 resolveId = 4;
      case 4: {
        if (tag == 32) {
         parse_resolveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_resolveid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_resolveid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resolveId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBackpackOper)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBackpackOper)
  return false;
#undef DO_
}

void GCBackpackOper::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBackpackOper)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gid(), output);
  }

  // optional int32 addNum = 3;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addnum(), output);
  }

  // repeated int32 resolveId = 4;
  for (int i = 0; i < this->resolveid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->resolveid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBackpackOper)
}

::google::protobuf::uint8* GCBackpackOper::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBackpackOper)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gid(), target);
  }

  // optional int32 addNum = 3;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addnum(), target);
  }

  // repeated int32 resolveId = 4;
  for (int i = 0; i < this->resolveid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->resolveid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBackpackOper)
  return target;
}

int GCBackpackOper::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional int32 addNum = 3;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  // repeated int32 resolveId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->resolveid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->resolveid(i));
    }
    total_size += 1 * this->resolveid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBackpackOper::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBackpackOper* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBackpackOper*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBackpackOper::MergeFrom(const GCBackpackOper& from) {
  GOOGLE_CHECK_NE(&from, this);
  resolveid_.MergeFrom(from.resolveid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBackpackOper::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBackpackOper::CopyFrom(const GCBackpackOper& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBackpackOper::IsInitialized() const {

  return true;
}

void GCBackpackOper::Swap(GCBackpackOper* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(gid_, other->gid_);
    std::swap(addnum_, other->addnum_);
    resolveid_.Swap(&other->resolveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBackpackOper::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBackpackOper_descriptor_;
  metadata.reflection = GCBackpackOper_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPutBackpack::kOperateFieldNumber;
const int GCPutBackpack::kItemsFieldNumber;
const int GCPutBackpack::kGridNumFieldNumber;
const int GCPutBackpack::kGridMaxFieldNumber;
#endif  // !_MSC_VER

GCPutBackpack::GCPutBackpack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPutBackpack)
}

void GCPutBackpack::InitAsDefaultInstance() {
}

GCPutBackpack::GCPutBackpack(const GCPutBackpack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPutBackpack)
}

void GCPutBackpack::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gridnum_ = 0;
  gridmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPutBackpack::~GCPutBackpack() {
  // @@protoc_insertion_point(destructor:GCPutBackpack)
  SharedDtor();
}

void GCPutBackpack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPutBackpack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPutBackpack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPutBackpack_descriptor_;
}

const GCPutBackpack& GCPutBackpack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCPutBackpack* GCPutBackpack::default_instance_ = NULL;

GCPutBackpack* GCPutBackpack::New() const {
  return new GCPutBackpack;
}

void GCPutBackpack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPutBackpack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, gridmax_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPutBackpack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPutBackpack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .BackpackGrid items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_gridNum;
        break;
      }

      // optional int32 gridNum = 3;
      case 3: {
        if (tag == 24) {
         parse_gridNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridnum_)));
          set_has_gridnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gridMax;
        break;
      }

      // optional int32 gridMax = 4;
      case 4: {
        if (tag == 32) {
         parse_gridMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridmax_)));
          set_has_gridmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPutBackpack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPutBackpack)
  return false;
#undef DO_
}

void GCPutBackpack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPutBackpack)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .BackpackGrid items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional int32 gridNum = 3;
  if (has_gridnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gridnum(), output);
  }

  // optional int32 gridMax = 4;
  if (has_gridmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gridmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPutBackpack)
}

::google::protobuf::uint8* GCPutBackpack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPutBackpack)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .BackpackGrid items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional int32 gridNum = 3;
  if (has_gridnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gridnum(), target);
  }

  // optional int32 gridMax = 4;
  if (has_gridmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gridmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPutBackpack)
  return target;
}

int GCPutBackpack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gridNum = 3;
    if (has_gridnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridnum());
    }

    // optional int32 gridMax = 4;
    if (has_gridmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridmax());
    }

  }
  // repeated .BackpackGrid items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPutBackpack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPutBackpack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPutBackpack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPutBackpack::MergeFrom(const GCPutBackpack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gridnum()) {
      set_gridnum(from.gridnum());
    }
    if (from.has_gridmax()) {
      set_gridmax(from.gridmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPutBackpack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPutBackpack::CopyFrom(const GCPutBackpack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPutBackpack::IsInitialized() const {

  return true;
}

void GCPutBackpack::Swap(GCPutBackpack* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    items_.Swap(&other->items_);
    std::swap(gridnum_, other->gridnum_);
    std::swap(gridmax_, other->gridmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPutBackpack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPutBackpack_descriptor_;
  metadata.reflection = GCPutBackpack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPutStorage::kOperateFieldNumber;
const int GCPutStorage::kItemsFieldNumber;
const int GCPutStorage::kGridNumFieldNumber;
const int GCPutStorage::kGridMaxFieldNumber;
#endif  // !_MSC_VER

GCPutStorage::GCPutStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPutStorage)
}

void GCPutStorage::InitAsDefaultInstance() {
}

GCPutStorage::GCPutStorage(const GCPutStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPutStorage)
}

void GCPutStorage::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gridnum_ = 0;
  gridmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPutStorage::~GCPutStorage() {
  // @@protoc_insertion_point(destructor:GCPutStorage)
  SharedDtor();
}

void GCPutStorage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPutStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPutStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPutStorage_descriptor_;
}

const GCPutStorage& GCPutStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCPutStorage* GCPutStorage::default_instance_ = NULL;

GCPutStorage* GCPutStorage::New() const {
  return new GCPutStorage;
}

void GCPutStorage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPutStorage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, gridmax_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPutStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPutStorage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .BackpackGrid items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_gridNum;
        break;
      }

      // optional int32 gridNum = 3;
      case 3: {
        if (tag == 24) {
         parse_gridNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridnum_)));
          set_has_gridnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gridMax;
        break;
      }

      // optional int32 gridMax = 4;
      case 4: {
        if (tag == 32) {
         parse_gridMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridmax_)));
          set_has_gridmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPutStorage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPutStorage)
  return false;
#undef DO_
}

void GCPutStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPutStorage)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .BackpackGrid items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional int32 gridNum = 3;
  if (has_gridnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gridnum(), output);
  }

  // optional int32 gridMax = 4;
  if (has_gridmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gridmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPutStorage)
}

::google::protobuf::uint8* GCPutStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPutStorage)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .BackpackGrid items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional int32 gridNum = 3;
  if (has_gridnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gridnum(), target);
  }

  // optional int32 gridMax = 4;
  if (has_gridmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gridmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPutStorage)
  return target;
}

int GCPutStorage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gridNum = 3;
    if (has_gridnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridnum());
    }

    // optional int32 gridMax = 4;
    if (has_gridmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridmax());
    }

  }
  // repeated .BackpackGrid items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPutStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPutStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPutStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPutStorage::MergeFrom(const GCPutStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gridnum()) {
      set_gridnum(from.gridnum());
    }
    if (from.has_gridmax()) {
      set_gridmax(from.gridmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPutStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPutStorage::CopyFrom(const GCPutStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPutStorage::IsInitialized() const {

  return true;
}

void GCPutStorage::Swap(GCPutStorage* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    items_.Swap(&other->items_);
    std::swap(gridnum_, other->gridnum_);
    std::swap(gridmax_, other->gridmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPutStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPutStorage_descriptor_;
  metadata.reflection = GCPutStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBackpackSpecial::kPlayerIdFieldNumber;
const int CGBackpackSpecial::kOperateFieldNumber;
const int CGBackpackSpecial::kBackpackItemFieldNumber;
#endif  // !_MSC_VER

CGBackpackSpecial::CGBackpackSpecial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBackpackSpecial)
}

void CGBackpackSpecial::InitAsDefaultInstance() {
}

CGBackpackSpecial::CGBackpackSpecial(const CGBackpackSpecial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBackpackSpecial)
}

void CGBackpackSpecial::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBackpackSpecial::~CGBackpackSpecial() {
  // @@protoc_insertion_point(destructor:CGBackpackSpecial)
  SharedDtor();
}

void CGBackpackSpecial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBackpackSpecial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBackpackSpecial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBackpackSpecial_descriptor_;
}

const CGBackpackSpecial& CGBackpackSpecial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGBackpackSpecial* CGBackpackSpecial::default_instance_ = NULL;

CGBackpackSpecial* CGBackpackSpecial::New() const {
  return new CGBackpackSpecial;
}

void CGBackpackSpecial::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    playerid_ = GOOGLE_LONGLONG(0);
    operate_ = 0;
  }
  backpackitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBackpackSpecial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBackpackSpecial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_backpackItem;
        break;
      }

      // repeated .BackpackItem backpackItem = 3;
      case 3: {
        if (tag == 26) {
         parse_backpackItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backpackitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_backpackItem;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBackpackSpecial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBackpackSpecial)
  return false;
#undef DO_
}

void CGBackpackSpecial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBackpackSpecial)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // repeated .BackpackItem backpackItem = 3;
  for (int i = 0; i < this->backpackitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->backpackitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBackpackSpecial)
}

::google::protobuf::uint8* CGBackpackSpecial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBackpackSpecial)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // repeated .BackpackItem backpackItem = 3;
  for (int i = 0; i < this->backpackitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->backpackitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBackpackSpecial)
  return target;
}

int CGBackpackSpecial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  // repeated .BackpackItem backpackItem = 3;
  total_size += 1 * this->backpackitem_size();
  for (int i = 0; i < this->backpackitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backpackitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBackpackSpecial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBackpackSpecial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBackpackSpecial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBackpackSpecial::MergeFrom(const CGBackpackSpecial& from) {
  GOOGLE_CHECK_NE(&from, this);
  backpackitem_.MergeFrom(from.backpackitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBackpackSpecial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBackpackSpecial::CopyFrom(const CGBackpackSpecial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBackpackSpecial::IsInitialized() const {

  return true;
}

void CGBackpackSpecial::Swap(CGBackpackSpecial* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(operate_, other->operate_);
    backpackitem_.Swap(&other->backpackitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBackpackSpecial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBackpackSpecial_descriptor_;
  metadata.reflection = CGBackpackSpecial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureMapDataInfo::kPidFieldNumber;
const int TreasureMapDataInfo::kLocationIdFieldNumber;
const int TreasureMapDataInfo::kEventTypeFieldNumber;
const int TreasureMapDataInfo::kEventParamFieldNumber;
#endif  // !_MSC_VER

TreasureMapDataInfo::TreasureMapDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TreasureMapDataInfo)
}

void TreasureMapDataInfo::InitAsDefaultInstance() {
}

TreasureMapDataInfo::TreasureMapDataInfo(const TreasureMapDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TreasureMapDataInfo)
}

void TreasureMapDataInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  locationid_ = 0;
  eventtype_ = 0;
  eventparam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureMapDataInfo::~TreasureMapDataInfo() {
  // @@protoc_insertion_point(destructor:TreasureMapDataInfo)
  SharedDtor();
}

void TreasureMapDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureMapDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureMapDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureMapDataInfo_descriptor_;
}

const TreasureMapDataInfo& TreasureMapDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

TreasureMapDataInfo* TreasureMapDataInfo::default_instance_ = NULL;

TreasureMapDataInfo* TreasureMapDataInfo::New() const {
  return new TreasureMapDataInfo;
}

void TreasureMapDataInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreasureMapDataInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, eventparam_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureMapDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TreasureMapDataInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_locationId;
        break;
      }

      // optional int32 locationId = 2;
      case 2: {
        if (tag == 16) {
         parse_locationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locationid_)));
          set_has_locationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // optional int32 eventType = 3;
      case 3: {
        if (tag == 24) {
         parse_eventType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eventParam;
        break;
      }

      // optional int32 eventParam = 4;
      case 4: {
        if (tag == 32) {
         parse_eventParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventparam_)));
          set_has_eventparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TreasureMapDataInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TreasureMapDataInfo)
  return false;
#undef DO_
}

void TreasureMapDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TreasureMapDataInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 locationId = 2;
  if (has_locationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->locationid(), output);
  }

  // optional int32 eventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eventtype(), output);
  }

  // optional int32 eventParam = 4;
  if (has_eventparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->eventparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TreasureMapDataInfo)
}

::google::protobuf::uint8* TreasureMapDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreasureMapDataInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 locationId = 2;
  if (has_locationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->locationid(), target);
  }

  // optional int32 eventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eventtype(), target);
  }

  // optional int32 eventParam = 4;
  if (has_eventparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->eventparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreasureMapDataInfo)
  return target;
}

int TreasureMapDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 locationId = 2;
    if (has_locationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locationid());
    }

    // optional int32 eventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventtype());
    }

    // optional int32 eventParam = 4;
    if (has_eventparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureMapDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureMapDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureMapDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureMapDataInfo::MergeFrom(const TreasureMapDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_locationid()) {
      set_locationid(from.locationid());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_eventparam()) {
      set_eventparam(from.eventparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureMapDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureMapDataInfo::CopyFrom(const TreasureMapDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureMapDataInfo::IsInitialized() const {

  return true;
}

void TreasureMapDataInfo::Swap(TreasureMapDataInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(locationid_, other->locationid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(eventparam_, other->eventparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureMapDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureMapDataInfo_descriptor_;
  metadata.reflection = TreasureMapDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBackTreasureMap::kResultFieldNumber;
const int GCBackTreasureMap::kOperateFieldNumber;
#endif  // !_MSC_VER

GCBackTreasureMap::GCBackTreasureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBackTreasureMap)
}

void GCBackTreasureMap::InitAsDefaultInstance() {
}

GCBackTreasureMap::GCBackTreasureMap(const GCBackTreasureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBackTreasureMap)
}

void GCBackTreasureMap::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBackTreasureMap::~GCBackTreasureMap() {
  // @@protoc_insertion_point(destructor:GCBackTreasureMap)
  SharedDtor();
}

void GCBackTreasureMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBackTreasureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBackTreasureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBackTreasureMap_descriptor_;
}

const GCBackTreasureMap& GCBackTreasureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCBackTreasureMap* GCBackTreasureMap::default_instance_ = NULL;

GCBackTreasureMap* GCBackTreasureMap::New() const {
  return new GCBackTreasureMap;
}

void GCBackTreasureMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBackTreasureMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBackTreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBackTreasureMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBackTreasureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBackTreasureMap)
  return false;
#undef DO_
}

void GCBackTreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBackTreasureMap)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBackTreasureMap)
}

::google::protobuf::uint8* GCBackTreasureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBackTreasureMap)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBackTreasureMap)
  return target;
}

int GCBackTreasureMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBackTreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBackTreasureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBackTreasureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBackTreasureMap::MergeFrom(const GCBackTreasureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBackTreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBackTreasureMap::CopyFrom(const GCBackTreasureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBackTreasureMap::IsInitialized() const {

  return true;
}

void GCBackTreasureMap::Swap(GCBackTreasureMap* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBackTreasureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBackTreasureMap_descriptor_;
  metadata.reflection = GCBackTreasureMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureMap::kPidFieldNumber;
const int TreasureMap::kMapIDFieldNumber;
const int TreasureMap::kFuncIDFieldNumber;
#endif  // !_MSC_VER

TreasureMap::TreasureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TreasureMap)
}

void TreasureMap::InitAsDefaultInstance() {
}

TreasureMap::TreasureMap(const TreasureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TreasureMap)
}

void TreasureMap::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  funcid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureMap::~TreasureMap() {
  // @@protoc_insertion_point(destructor:TreasureMap)
  SharedDtor();
}

void TreasureMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreasureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureMap_descriptor_;
}

const TreasureMap& TreasureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

TreasureMap* TreasureMap::default_instance_ = NULL;

TreasureMap* TreasureMap::New() const {
  return new TreasureMap;
}

void TreasureMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreasureMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, funcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TreasureMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapID;
        break;
      }

      // optional int32 mapID = 2;
      case 2: {
        if (tag == 16) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_funcID;
        break;
      }

      // optional int32 funcID = 3;
      case 3: {
        if (tag == 24) {
         parse_funcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
          set_has_funcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TreasureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TreasureMap)
  return false;
#undef DO_
}

void TreasureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TreasureMap)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 mapID = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int32 funcID = 3;
  if (has_funcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->funcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TreasureMap)
}

::google::protobuf::uint8* TreasureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TreasureMap)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 mapID = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int32 funcID = 3;
  if (has_funcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->funcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TreasureMap)
  return target;
}

int TreasureMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 mapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 funcID = 3;
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureMap::MergeFrom(const TreasureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_funcid()) {
      set_funcid(from.funcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureMap::CopyFrom(const TreasureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureMap::IsInitialized() const {

  return true;
}

void TreasureMap::Swap(TreasureMap* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(mapid_, other->mapid_);
    std::swap(funcid_, other->funcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureMap_descriptor_;
  metadata.reflection = TreasureMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBackUseMap::kGridIDFieldNumber;
const int CGBackUseMap::kPidFieldNumber;
#endif  // !_MSC_VER

CGBackUseMap::CGBackUseMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBackUseMap)
}

void CGBackUseMap::InitAsDefaultInstance() {
}

CGBackUseMap::CGBackUseMap(const CGBackUseMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBackUseMap)
}

void CGBackUseMap::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBackUseMap::~CGBackUseMap() {
  // @@protoc_insertion_point(destructor:CGBackUseMap)
  SharedDtor();
}

void CGBackUseMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBackUseMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBackUseMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBackUseMap_descriptor_;
}

const CGBackUseMap& CGBackUseMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGBackUseMap* CGBackUseMap::default_instance_ = NULL;

CGBackUseMap* CGBackUseMap::New() const {
  return new CGBackUseMap;
}

void CGBackUseMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBackUseMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, gridid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBackUseMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBackUseMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gridID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBackUseMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBackUseMap)
  return false;
#undef DO_
}

void CGBackUseMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBackUseMap)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gridid(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBackUseMap)
}

::google::protobuf::uint8* CGBackUseMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBackUseMap)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gridid(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBackUseMap)
  return target;
}

int CGBackUseMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gridID = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBackUseMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBackUseMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBackUseMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBackUseMap::MergeFrom(const CGBackUseMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBackUseMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBackUseMap::CopyFrom(const CGBackUseMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBackUseMap::IsInitialized() const {

  return true;
}

void CGBackUseMap::Swap(CGBackUseMap* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBackUseMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBackUseMap_descriptor_;
  metadata.reflection = CGBackUseMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBackPuseUseMap::kResultFieldNumber;
const int GCBackPuseUseMap::kTreasureMapFieldNumber;
const int GCBackPuseUseMap::kTypeFieldNumber;
const int GCBackPuseUseMap::kMonsterIDFieldNumber;
#endif  // !_MSC_VER

GCBackPuseUseMap::GCBackPuseUseMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBackPuseUseMap)
}

void GCBackPuseUseMap::InitAsDefaultInstance() {
}

GCBackPuseUseMap::GCBackPuseUseMap(const GCBackPuseUseMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBackPuseUseMap)
}

void GCBackPuseUseMap::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBackPuseUseMap::~GCBackPuseUseMap() {
  // @@protoc_insertion_point(destructor:GCBackPuseUseMap)
  SharedDtor();
}

void GCBackPuseUseMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBackPuseUseMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBackPuseUseMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBackPuseUseMap_descriptor_;
}

const GCBackPuseUseMap& GCBackPuseUseMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCBackPuseUseMap* GCBackPuseUseMap::default_instance_ = NULL;

GCBackPuseUseMap* GCBackPuseUseMap::New() const {
  return new GCBackPuseUseMap;
}

void GCBackPuseUseMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBackPuseUseMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, monsterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  treasuremap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBackPuseUseMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBackPuseUseMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_treasureMap;
        break;
      }

      // repeated .TreasureMap treasureMap = 2;
      case 2: {
        if (tag == 18) {
         parse_treasureMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasuremap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_treasureMap;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_monsterID;
        break;
      }

      // optional int64 monsterID = 4;
      case 4: {
        if (tag == 32) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBackPuseUseMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBackPuseUseMap)
  return false;
#undef DO_
}

void GCBackPuseUseMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBackPuseUseMap)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .TreasureMap treasureMap = 2;
  for (int i = 0; i < this->treasuremap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treasuremap(i), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 monsterID = 4;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBackPuseUseMap)
}

::google::protobuf::uint8* GCBackPuseUseMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBackPuseUseMap)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .TreasureMap treasureMap = 2;
  for (int i = 0; i < this->treasuremap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treasuremap(i), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 monsterID = 4;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBackPuseUseMap)
  return target;
}

int GCBackPuseUseMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 monsterID = 4;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

  }
  // repeated .TreasureMap treasureMap = 2;
  total_size += 1 * this->treasuremap_size();
  for (int i = 0; i < this->treasuremap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasuremap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBackPuseUseMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBackPuseUseMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBackPuseUseMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBackPuseUseMap::MergeFrom(const GCBackPuseUseMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasuremap_.MergeFrom(from.treasuremap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBackPuseUseMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBackPuseUseMap::CopyFrom(const GCBackPuseUseMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBackPuseUseMap::IsInitialized() const {

  return true;
}

void GCBackPuseUseMap::Swap(GCBackPuseUseMap* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    treasuremap_.Swap(&other->treasuremap_);
    std::swap(type_, other->type_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBackPuseUseMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBackPuseUseMap_descriptor_;
  metadata.reflection = GCBackPuseUseMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendTransmitToMe::kPlayerIDFieldNumber;
const int GCSendTransmitToMe::kLimitTimeFieldNumber;
const int GCSendTransmitToMe::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GCSendTransmitToMe::GCSendTransmitToMe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendTransmitToMe)
}

void GCSendTransmitToMe::InitAsDefaultInstance() {
}

GCSendTransmitToMe::GCSendTransmitToMe(const GCSendTransmitToMe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendTransmitToMe)
}

void GCSendTransmitToMe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  limittime_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendTransmitToMe::~GCSendTransmitToMe() {
  // @@protoc_insertion_point(destructor:GCSendTransmitToMe)
  SharedDtor();
}

void GCSendTransmitToMe::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GCSendTransmitToMe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendTransmitToMe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendTransmitToMe_descriptor_;
}

const GCSendTransmitToMe& GCSendTransmitToMe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCSendTransmitToMe* GCSendTransmitToMe::default_instance_ = NULL;

GCSendTransmitToMe* GCSendTransmitToMe::New() const {
  return new GCSendTransmitToMe;
}

void GCSendTransmitToMe::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    playerid_ = GOOGLE_LONGLONG(0);
    limittime_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendTransmitToMe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendTransmitToMe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limitTime;
        break;
      }

      // optional int32 limitTime = 2;
      case 2: {
        if (tag == 16) {
         parse_limitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limittime_)));
          set_has_limittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendTransmitToMe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendTransmitToMe)
  return false;
#undef DO_
}

void GCSendTransmitToMe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendTransmitToMe)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 limitTime = 2;
  if (has_limittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limittime(), output);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendTransmitToMe)
}

::google::protobuf::uint8* GCSendTransmitToMe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendTransmitToMe)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 limitTime = 2;
  if (has_limittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limittime(), target);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendTransmitToMe)
  return target;
}

int GCSendTransmitToMe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 limitTime = 2;
    if (has_limittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limittime());
    }

    // optional string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendTransmitToMe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendTransmitToMe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendTransmitToMe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendTransmitToMe::MergeFrom(const GCSendTransmitToMe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_limittime()) {
      set_limittime(from.limittime());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendTransmitToMe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendTransmitToMe::CopyFrom(const GCSendTransmitToMe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendTransmitToMe::IsInitialized() const {

  return true;
}

void GCSendTransmitToMe::Swap(GCSendTransmitToMe* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(limittime_, other->limittime_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendTransmitToMe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendTransmitToMe_descriptor_;
  metadata.reflection = GCSendTransmitToMe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTransmitToMember::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGTransmitToMember::CGTransmitToMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTransmitToMember)
}

void CGTransmitToMember::InitAsDefaultInstance() {
}

CGTransmitToMember::CGTransmitToMember(const CGTransmitToMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTransmitToMember)
}

void CGTransmitToMember::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTransmitToMember::~CGTransmitToMember() {
  // @@protoc_insertion_point(destructor:CGTransmitToMember)
  SharedDtor();
}

void CGTransmitToMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTransmitToMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTransmitToMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTransmitToMember_descriptor_;
}

const CGTransmitToMember& CGTransmitToMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGTransmitToMember* CGTransmitToMember::default_instance_ = NULL;

CGTransmitToMember* CGTransmitToMember::New() const {
  return new CGTransmitToMember;
}

void CGTransmitToMember::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTransmitToMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTransmitToMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTransmitToMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTransmitToMember)
  return false;
#undef DO_
}

void CGTransmitToMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTransmitToMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTransmitToMember)
}

::google::protobuf::uint8* CGTransmitToMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTransmitToMember)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTransmitToMember)
  return target;
}

int CGTransmitToMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTransmitToMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTransmitToMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTransmitToMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTransmitToMember::MergeFrom(const CGTransmitToMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTransmitToMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTransmitToMember::CopyFrom(const CGTransmitToMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTransmitToMember::IsInitialized() const {

  return true;
}

void CGTransmitToMember::Swap(CGTransmitToMember* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTransmitToMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTransmitToMember_descriptor_;
  metadata.reflection = CGTransmitToMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenChatHornUI::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GCOpenChatHornUI::GCOpenChatHornUI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenChatHornUI)
}

void GCOpenChatHornUI::InitAsDefaultInstance() {
}

GCOpenChatHornUI::GCOpenChatHornUI(const GCOpenChatHornUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenChatHornUI)
}

void GCOpenChatHornUI::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenChatHornUI::~GCOpenChatHornUI() {
  // @@protoc_insertion_point(destructor:GCOpenChatHornUI)
  SharedDtor();
}

void GCOpenChatHornUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpenChatHornUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenChatHornUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenChatHornUI_descriptor_;
}

const GCOpenChatHornUI& GCOpenChatHornUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCOpenChatHornUI* GCOpenChatHornUI::default_instance_ = NULL;

GCOpenChatHornUI* GCOpenChatHornUI::New() const {
  return new GCOpenChatHornUI;
}

void GCOpenChatHornUI::Clear() {
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenChatHornUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenChatHornUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenChatHornUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenChatHornUI)
  return false;
#undef DO_
}

void GCOpenChatHornUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenChatHornUI)
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenChatHornUI)
}

::google::protobuf::uint8* GCOpenChatHornUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenChatHornUI)
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenChatHornUI)
  return target;
}

int GCOpenChatHornUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenChatHornUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenChatHornUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenChatHornUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenChatHornUI::MergeFrom(const GCOpenChatHornUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenChatHornUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenChatHornUI::CopyFrom(const GCOpenChatHornUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenChatHornUI::IsInitialized() const {

  return true;
}

void GCOpenChatHornUI::Swap(GCOpenChatHornUI* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenChatHornUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenChatHornUI_descriptor_;
  metadata.reflection = GCOpenChatHornUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendOpenBoxEnd::kRewardsFieldNumber;
const int GCSendOpenBoxEnd::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GCSendOpenBoxEnd::GCSendOpenBoxEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendOpenBoxEnd)
}

void GCSendOpenBoxEnd::InitAsDefaultInstance() {
}

GCSendOpenBoxEnd::GCSendOpenBoxEnd(const GCSendOpenBoxEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendOpenBoxEnd)
}

void GCSendOpenBoxEnd::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendOpenBoxEnd::~GCSendOpenBoxEnd() {
  // @@protoc_insertion_point(destructor:GCSendOpenBoxEnd)
  SharedDtor();
}

void GCSendOpenBoxEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendOpenBoxEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendOpenBoxEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendOpenBoxEnd_descriptor_;
}

const GCSendOpenBoxEnd& GCSendOpenBoxEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCSendOpenBoxEnd* GCSendOpenBoxEnd::default_instance_ = NULL;

GCSendOpenBoxEnd* GCSendOpenBoxEnd::New() const {
  return new GCSendOpenBoxEnd;
}

void GCSendOpenBoxEnd::Clear() {
  errorcode_ = 0;
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendOpenBoxEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendOpenBoxEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BackpackItem rewards = 1;
      case 1: {
        if (tag == 10) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectTag(16)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 2;
      case 2: {
        if (tag == 16) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendOpenBoxEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendOpenBoxEnd)
  return false;
#undef DO_
}

void GCSendOpenBoxEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendOpenBoxEnd)
  // repeated .BackpackItem rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  // optional int32 errorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendOpenBoxEnd)
}

::google::protobuf::uint8* GCSendOpenBoxEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendOpenBoxEnd)
  // repeated .BackpackItem rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  // optional int32 errorCode = 2;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendOpenBoxEnd)
  return target;
}

int GCSendOpenBoxEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 errorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated .BackpackItem rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendOpenBoxEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendOpenBoxEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendOpenBoxEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendOpenBoxEnd::MergeFrom(const GCSendOpenBoxEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendOpenBoxEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendOpenBoxEnd::CopyFrom(const GCSendOpenBoxEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendOpenBoxEnd::IsInitialized() const {

  return true;
}

void GCSendOpenBoxEnd::Swap(GCSendOpenBoxEnd* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendOpenBoxEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendOpenBoxEnd_descriptor_;
  metadata.reflection = GCSendOpenBoxEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendMakeAct::kActIDFieldNumber;
const int GCSendMakeAct::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

GCSendMakeAct::GCSendMakeAct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendMakeAct)
}

void GCSendMakeAct::InitAsDefaultInstance() {
}

GCSendMakeAct::GCSendMakeAct(const GCSendMakeAct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendMakeAct)
}

void GCSendMakeAct::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendMakeAct::~GCSendMakeAct() {
  // @@protoc_insertion_point(destructor:GCSendMakeAct)
  SharedDtor();
}

void GCSendMakeAct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendMakeAct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendMakeAct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendMakeAct_descriptor_;
}

const GCSendMakeAct& GCSendMakeAct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCSendMakeAct* GCSendMakeAct::default_instance_ = NULL;

GCSendMakeAct* GCSendMakeAct::New() const {
  return new GCSendMakeAct;
}

void GCSendMakeAct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendMakeAct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, actid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendMakeAct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendMakeAct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 2;
      case 2: {
        if (tag == 16) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendMakeAct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendMakeAct)
  return false;
#undef DO_
}

void GCSendMakeAct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendMakeAct)
  // optional int32 actID = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // optional int64 playerID = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendMakeAct)
}

::google::protobuf::uint8* GCSendMakeAct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendMakeAct)
  // optional int32 actID = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // optional int64 playerID = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendMakeAct)
  return target;
}

int GCSendMakeAct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actID = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional int64 playerID = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendMakeAct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendMakeAct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendMakeAct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendMakeAct::MergeFrom(const GCSendMakeAct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendMakeAct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendMakeAct::CopyFrom(const GCSendMakeAct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendMakeAct::IsInitialized() const {

  return true;
}

void GCSendMakeAct::Swap(GCSendMakeAct* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendMakeAct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendMakeAct_descriptor_;
  metadata.reflection = GCSendMakeAct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemLimit::kTypeFieldNumber;
const int ItemLimit::kNumFieldNumber;
#endif  // !_MSC_VER

ItemLimit::ItemLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemLimit)
}

void ItemLimit::InitAsDefaultInstance() {
}

ItemLimit::ItemLimit(const ItemLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemLimit)
}

void ItemLimit::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemLimit::~ItemLimit() {
  // @@protoc_insertion_point(destructor:ItemLimit)
  SharedDtor();
}

void ItemLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemLimit_descriptor_;
}

const ItemLimit& ItemLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

ItemLimit* ItemLimit::default_instance_ = NULL;

ItemLimit* ItemLimit::New() const {
  return new ItemLimit;
}

void ItemLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemLimit)
  return false;
#undef DO_
}

void ItemLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemLimit)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ItemLimit)
}

::google::protobuf::uint8* ItemLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemLimit)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemLimit)
  return target;
}

int ItemLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemLimit::MergeFrom(const ItemLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemLimit::CopyFrom(const ItemLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLimit::IsInitialized() const {

  return true;
}

void ItemLimit::Swap(ItemLimit* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemLimit_descriptor_;
  metadata.reflection = ItemLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCItemLimitBack::kItemLimitsFieldNumber;
#endif  // !_MSC_VER

GCItemLimitBack::GCItemLimitBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCItemLimitBack)
}

void GCItemLimitBack::InitAsDefaultInstance() {
}

GCItemLimitBack::GCItemLimitBack(const GCItemLimitBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCItemLimitBack)
}

void GCItemLimitBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCItemLimitBack::~GCItemLimitBack() {
  // @@protoc_insertion_point(destructor:GCItemLimitBack)
  SharedDtor();
}

void GCItemLimitBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCItemLimitBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCItemLimitBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCItemLimitBack_descriptor_;
}

const GCItemLimitBack& GCItemLimitBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCItemLimitBack* GCItemLimitBack::default_instance_ = NULL;

GCItemLimitBack* GCItemLimitBack::New() const {
  return new GCItemLimitBack;
}

void GCItemLimitBack::Clear() {
  itemlimits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCItemLimitBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCItemLimitBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemLimit itemLimits = 1;
      case 1: {
        if (tag == 10) {
         parse_itemLimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlimits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_itemLimits;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCItemLimitBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCItemLimitBack)
  return false;
#undef DO_
}

void GCItemLimitBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCItemLimitBack)
  // repeated .ItemLimit itemLimits = 1;
  for (int i = 0; i < this->itemlimits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlimits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCItemLimitBack)
}

::google::protobuf::uint8* GCItemLimitBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCItemLimitBack)
  // repeated .ItemLimit itemLimits = 1;
  for (int i = 0; i < this->itemlimits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlimits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCItemLimitBack)
  return target;
}

int GCItemLimitBack::ByteSize() const {
  int total_size = 0;

  // repeated .ItemLimit itemLimits = 1;
  total_size += 1 * this->itemlimits_size();
  for (int i = 0; i < this->itemlimits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlimits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCItemLimitBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCItemLimitBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCItemLimitBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCItemLimitBack::MergeFrom(const GCItemLimitBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlimits_.MergeFrom(from.itemlimits_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCItemLimitBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCItemLimitBack::CopyFrom(const GCItemLimitBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCItemLimitBack::IsInitialized() const {

  return true;
}

void GCItemLimitBack::Swap(GCItemLimitBack* other) {
  if (other != this) {
    itemlimits_.Swap(&other->itemlimits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCItemLimitBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCItemLimitBack_descriptor_;
  metadata.reflection = GCItemLimitBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NineMysteryItem::kPidFieldNumber;
const int NineMysteryItem::kMapIDFieldNumber;
const int NineMysteryItem::kEventTypeFieldNumber;
const int NineMysteryItem::kParamFieldNumber;
#endif  // !_MSC_VER

NineMysteryItem::NineMysteryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NineMysteryItem)
}

void NineMysteryItem::InitAsDefaultInstance() {
}

NineMysteryItem::NineMysteryItem(const NineMysteryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NineMysteryItem)
}

void NineMysteryItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  eventtype_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NineMysteryItem::~NineMysteryItem() {
  // @@protoc_insertion_point(destructor:NineMysteryItem)
  SharedDtor();
}

void NineMysteryItem::SharedDtor() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void NineMysteryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NineMysteryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NineMysteryItem_descriptor_;
}

const NineMysteryItem& NineMysteryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

NineMysteryItem* NineMysteryItem::default_instance_ = NULL;

NineMysteryItem* NineMysteryItem::New() const {
  return new NineMysteryItem;
}

void NineMysteryItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NineMysteryItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pid_, eventtype_);
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NineMysteryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NineMysteryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapID;
        break;
      }

      // optional int32 mapID = 2;
      case 2: {
        if (tag == 16) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // optional int32 eventType = 3;
      case 3: {
        if (tag == 24) {
         parse_eventType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventtype_)));
          set_has_eventtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_param;
        break;
      }

      // optional string param = 4;
      case 4: {
        if (tag == 34) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NineMysteryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NineMysteryItem)
  return false;
#undef DO_
}

void NineMysteryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NineMysteryItem)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 mapID = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int32 eventType = 3;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->eventtype(), output);
  }

  // optional string param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NineMysteryItem)
}

::google::protobuf::uint8* NineMysteryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NineMysteryItem)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 mapID = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int32 eventType = 3;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->eventtype(), target);
  }

  // optional string param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NineMysteryItem)
  return target;
}

int NineMysteryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 mapID = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 eventType = 3;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventtype());
    }

    // optional string param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NineMysteryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NineMysteryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NineMysteryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NineMysteryItem::MergeFrom(const NineMysteryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NineMysteryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NineMysteryItem::CopyFrom(const NineMysteryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NineMysteryItem::IsInitialized() const {

  return true;
}

void NineMysteryItem::Swap(NineMysteryItem* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(mapid_, other->mapid_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NineMysteryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NineMysteryItem_descriptor_;
  metadata.reflection = NineMysteryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBackUseNineMystery::kGridIDFieldNumber;
const int CGBackUseNineMystery::kPidFieldNumber;
#endif  // !_MSC_VER

CGBackUseNineMystery::CGBackUseNineMystery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBackUseNineMystery)
}

void CGBackUseNineMystery::InitAsDefaultInstance() {
}

CGBackUseNineMystery::CGBackUseNineMystery(const CGBackUseNineMystery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBackUseNineMystery)
}

void CGBackUseNineMystery::SharedCtor() {
  _cached_size_ = 0;
  gridid_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBackUseNineMystery::~CGBackUseNineMystery() {
  // @@protoc_insertion_point(destructor:CGBackUseNineMystery)
  SharedDtor();
}

void CGBackUseNineMystery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBackUseNineMystery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBackUseNineMystery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBackUseNineMystery_descriptor_;
}

const CGBackUseNineMystery& CGBackUseNineMystery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGBackUseNineMystery* CGBackUseNineMystery::default_instance_ = NULL;

CGBackUseNineMystery* CGBackUseNineMystery::New() const {
  return new CGBackUseNineMystery;
}

void CGBackUseNineMystery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBackUseNineMystery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, gridid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBackUseNineMystery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBackUseNineMystery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gridID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int64 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBackUseNineMystery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBackUseNineMystery)
  return false;
#undef DO_
}

void CGBackUseNineMystery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBackUseNineMystery)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gridid(), output);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBackUseNineMystery)
}

::google::protobuf::uint8* CGBackUseNineMystery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBackUseNineMystery)
  // optional int32 gridID = 1;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gridid(), target);
  }

  // optional int64 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBackUseNineMystery)
  return target;
}

int CGBackUseNineMystery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gridID = 1;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // optional int64 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBackUseNineMystery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBackUseNineMystery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBackUseNineMystery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBackUseNineMystery::MergeFrom(const CGBackUseNineMystery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBackUseNineMystery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBackUseNineMystery::CopyFrom(const CGBackUseNineMystery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBackUseNineMystery::IsInitialized() const {

  return true;
}

void CGBackUseNineMystery::Swap(CGBackUseNineMystery* other) {
  if (other != this) {
    std::swap(gridid_, other->gridid_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBackUseNineMystery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBackUseNineMystery_descriptor_;
  metadata.reflection = CGBackUseNineMystery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUseNineMysteryIntoDungeon::kDungeonFieldNumber;
#endif  // !_MSC_VER

CGUseNineMysteryIntoDungeon::CGUseNineMysteryIntoDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUseNineMysteryIntoDungeon)
}

void CGUseNineMysteryIntoDungeon::InitAsDefaultInstance() {
}

CGUseNineMysteryIntoDungeon::CGUseNineMysteryIntoDungeon(const CGUseNineMysteryIntoDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUseNineMysteryIntoDungeon)
}

void CGUseNineMysteryIntoDungeon::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dungeon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUseNineMysteryIntoDungeon::~CGUseNineMysteryIntoDungeon() {
  // @@protoc_insertion_point(destructor:CGUseNineMysteryIntoDungeon)
  SharedDtor();
}

void CGUseNineMysteryIntoDungeon::SharedDtor() {
  if (dungeon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dungeon_;
  }
  if (this != default_instance_) {
  }
}

void CGUseNineMysteryIntoDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUseNineMysteryIntoDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUseNineMysteryIntoDungeon_descriptor_;
}

const CGUseNineMysteryIntoDungeon& CGUseNineMysteryIntoDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGUseNineMysteryIntoDungeon* CGUseNineMysteryIntoDungeon::default_instance_ = NULL;

CGUseNineMysteryIntoDungeon* CGUseNineMysteryIntoDungeon::New() const {
  return new CGUseNineMysteryIntoDungeon;
}

void CGUseNineMysteryIntoDungeon::Clear() {
  if (has_dungeon()) {
    if (dungeon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dungeon_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUseNineMysteryIntoDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUseNineMysteryIntoDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dungeon = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dungeon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dungeon().data(), this->dungeon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dungeon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUseNineMysteryIntoDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUseNineMysteryIntoDungeon)
  return false;
#undef DO_
}

void CGUseNineMysteryIntoDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUseNineMysteryIntoDungeon)
  // optional string dungeon = 1;
  if (has_dungeon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeon().data(), this->dungeon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dungeon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dungeon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUseNineMysteryIntoDungeon)
}

::google::protobuf::uint8* CGUseNineMysteryIntoDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUseNineMysteryIntoDungeon)
  // optional string dungeon = 1;
  if (has_dungeon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dungeon().data(), this->dungeon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dungeon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dungeon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUseNineMysteryIntoDungeon)
  return target;
}

int CGUseNineMysteryIntoDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dungeon = 1;
    if (has_dungeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dungeon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUseNineMysteryIntoDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUseNineMysteryIntoDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUseNineMysteryIntoDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUseNineMysteryIntoDungeon::MergeFrom(const CGUseNineMysteryIntoDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon()) {
      set_dungeon(from.dungeon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUseNineMysteryIntoDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUseNineMysteryIntoDungeon::CopyFrom(const CGUseNineMysteryIntoDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseNineMysteryIntoDungeon::IsInitialized() const {

  return true;
}

void CGUseNineMysteryIntoDungeon::Swap(CGUseNineMysteryIntoDungeon* other) {
  if (other != this) {
    std::swap(dungeon_, other->dungeon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUseNineMysteryIntoDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUseNineMysteryIntoDungeon_descriptor_;
  metadata.reflection = CGUseNineMysteryIntoDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBackNineMystery::kResultFieldNumber;
const int GCBackNineMystery::kNineMysteryItemFieldNumber;
const int GCBackNineMystery::kPidFieldNumber;
const int GCBackNineMystery::kOperateFieldNumber;
const int GCBackNineMystery::kMonsterIDFieldNumber;
#endif  // !_MSC_VER

GCBackNineMystery::GCBackNineMystery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBackNineMystery)
}

void GCBackNineMystery::InitAsDefaultInstance() {
}

GCBackNineMystery::GCBackNineMystery(const GCBackNineMystery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBackNineMystery)
}

void GCBackNineMystery::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  operate_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBackNineMystery::~GCBackNineMystery() {
  // @@protoc_insertion_point(destructor:GCBackNineMystery)
  SharedDtor();
}

void GCBackNineMystery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBackNineMystery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBackNineMystery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBackNineMystery_descriptor_;
}

const GCBackNineMystery& GCBackNineMystery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCBackNineMystery* GCBackNineMystery::default_instance_ = NULL;

GCBackNineMystery* GCBackNineMystery::New() const {
  return new GCBackNineMystery;
}

void GCBackNineMystery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBackNineMystery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, monsterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ninemysteryitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBackNineMystery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBackNineMystery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nineMysteryItem;
        break;
      }

      // repeated .NineMysteryItem nineMysteryItem = 2;
      case 2: {
        if (tag == 18) {
         parse_nineMysteryItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ninemysteryitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nineMysteryItem;
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operate;
        break;
      }

      // optional int32 operate = 4;
      case 4: {
        if (tag == 32) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_monsterID;
        break;
      }

      // optional int64 monsterID = 5;
      case 5: {
        if (tag == 40) {
         parse_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBackNineMystery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBackNineMystery)
  return false;
#undef DO_
}

void GCBackNineMystery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBackNineMystery)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // repeated .NineMysteryItem nineMysteryItem = 2;
  for (int i = 0; i < this->ninemysteryitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ninemysteryitem(i), output);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  // optional int32 operate = 4;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operate(), output);
  }

  // optional int64 monsterID = 5;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBackNineMystery)
}

::google::protobuf::uint8* GCBackNineMystery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBackNineMystery)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // repeated .NineMysteryItem nineMysteryItem = 2;
  for (int i = 0; i < this->ninemysteryitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ninemysteryitem(i), target);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  // optional int32 operate = 4;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operate(), target);
  }

  // optional int64 monsterID = 5;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBackNineMystery)
  return target;
}

int GCBackNineMystery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 operate = 4;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int64 monsterID = 5;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

  }
  // repeated .NineMysteryItem nineMysteryItem = 2;
  total_size += 1 * this->ninemysteryitem_size();
  for (int i = 0; i < this->ninemysteryitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ninemysteryitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBackNineMystery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBackNineMystery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBackNineMystery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBackNineMystery::MergeFrom(const GCBackNineMystery& from) {
  GOOGLE_CHECK_NE(&from, this);
  ninemysteryitem_.MergeFrom(from.ninemysteryitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBackNineMystery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBackNineMystery::CopyFrom(const GCBackNineMystery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBackNineMystery::IsInitialized() const {

  return true;
}

void GCBackNineMystery::Swap(GCBackNineMystery* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    ninemysteryitem_.Swap(&other->ninemysteryitem_);
    std::swap(pid_, other->pid_);
    std::swap(operate_, other->operate_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBackNineMystery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBackNineMystery_descriptor_;
  metadata.reflection = GCBackNineMystery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGComposeItems::kIdFieldNumber;
const int CGComposeItems::kTargetNumFieldNumber;
const int CGComposeItems::kSelectBoundFieldNumber;
#endif  // !_MSC_VER

CGComposeItems::CGComposeItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGComposeItems)
}

void CGComposeItems::InitAsDefaultInstance() {
}

CGComposeItems::CGComposeItems(const CGComposeItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGComposeItems)
}

void CGComposeItems::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  targetnum_ = 0;
  selectbound_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGComposeItems::~CGComposeItems() {
  // @@protoc_insertion_point(destructor:CGComposeItems)
  SharedDtor();
}

void CGComposeItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGComposeItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGComposeItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGComposeItems_descriptor_;
}

const CGComposeItems& CGComposeItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGComposeItems* CGComposeItems::default_instance_ = NULL;

CGComposeItems* CGComposeItems::New() const {
  return new CGComposeItems;
}

void CGComposeItems::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGComposeItems*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, selectbound_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGComposeItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGComposeItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetNum;
        break;
      }

      // optional int32 targetNum = 2;
      case 2: {
        if (tag == 16) {
         parse_targetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetnum_)));
          set_has_targetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selectBound;
        break;
      }

      // optional int32 selectBound = 3;
      case 3: {
        if (tag == 24) {
         parse_selectBound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectbound_)));
          set_has_selectbound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGComposeItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGComposeItems)
  return false;
#undef DO_
}

void CGComposeItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGComposeItems)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 targetNum = 2;
  if (has_targetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetnum(), output);
  }

  // optional int32 selectBound = 3;
  if (has_selectbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selectbound(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGComposeItems)
}

::google::protobuf::uint8* CGComposeItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGComposeItems)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 targetNum = 2;
  if (has_targetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetnum(), target);
  }

  // optional int32 selectBound = 3;
  if (has_selectbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selectbound(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGComposeItems)
  return target;
}

int CGComposeItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 targetNum = 2;
    if (has_targetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetnum());
    }

    // optional int32 selectBound = 3;
    if (has_selectbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectbound());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGComposeItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGComposeItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGComposeItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGComposeItems::MergeFrom(const CGComposeItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targetnum()) {
      set_targetnum(from.targetnum());
    }
    if (from.has_selectbound()) {
      set_selectbound(from.selectbound());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGComposeItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGComposeItems::CopyFrom(const CGComposeItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGComposeItems::IsInitialized() const {

  return true;
}

void CGComposeItems::Swap(CGComposeItems* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(targetnum_, other->targetnum_);
    std::swap(selectbound_, other->selectbound_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGComposeItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGComposeItems_descriptor_;
  metadata.reflection = CGComposeItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCComposeItems::kIdFieldNumber;
const int GCComposeItems::kTargetNumFieldNumber;
const int GCComposeItems::kSelectBoundFieldNumber;
const int GCComposeItems::kFlagFieldNumber;
#endif  // !_MSC_VER

GCComposeItems::GCComposeItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCComposeItems)
}

void GCComposeItems::InitAsDefaultInstance() {
}

GCComposeItems::GCComposeItems(const GCComposeItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCComposeItems)
}

void GCComposeItems::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  targetnum_ = 0;
  selectbound_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCComposeItems::~GCComposeItems() {
  // @@protoc_insertion_point(destructor:GCComposeItems)
  SharedDtor();
}

void GCComposeItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCComposeItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCComposeItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCComposeItems_descriptor_;
}

const GCComposeItems& GCComposeItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCComposeItems* GCComposeItems::default_instance_ = NULL;

GCComposeItems* GCComposeItems::New() const {
  return new GCComposeItems;
}

void GCComposeItems::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCComposeItems*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCComposeItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCComposeItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetNum;
        break;
      }

      // optional int32 targetNum = 2;
      case 2: {
        if (tag == 16) {
         parse_targetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetnum_)));
          set_has_targetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selectBound;
        break;
      }

      // optional int32 selectBound = 3;
      case 3: {
        if (tag == 24) {
         parse_selectBound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectbound_)));
          set_has_selectbound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCComposeItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCComposeItems)
  return false;
#undef DO_
}

void GCComposeItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCComposeItems)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 targetNum = 2;
  if (has_targetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetnum(), output);
  }

  // optional int32 selectBound = 3;
  if (has_selectbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selectbound(), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCComposeItems)
}

::google::protobuf::uint8* GCComposeItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCComposeItems)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 targetNum = 2;
  if (has_targetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetnum(), target);
  }

  // optional int32 selectBound = 3;
  if (has_selectbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selectbound(), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCComposeItems)
  return target;
}

int GCComposeItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 targetNum = 2;
    if (has_targetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetnum());
    }

    // optional int32 selectBound = 3;
    if (has_selectbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectbound());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCComposeItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCComposeItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCComposeItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCComposeItems::MergeFrom(const GCComposeItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targetnum()) {
      set_targetnum(from.targetnum());
    }
    if (from.has_selectbound()) {
      set_selectbound(from.selectbound());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCComposeItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCComposeItems::CopyFrom(const GCComposeItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCComposeItems::IsInitialized() const {

  return true;
}

void GCComposeItems::Swap(GCComposeItems* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(targetnum_, other->targetnum_);
    std::swap(selectbound_, other->selectbound_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCComposeItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCComposeItems_descriptor_;
  metadata.reflection = GCComposeItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSetAutoResolve::kResolveIdFieldNumber;
#endif  // !_MSC_VER

CGSetAutoResolve::CGSetAutoResolve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSetAutoResolve)
}

void CGSetAutoResolve::InitAsDefaultInstance() {
}

CGSetAutoResolve::CGSetAutoResolve(const CGSetAutoResolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSetAutoResolve)
}

void CGSetAutoResolve::SharedCtor() {
  _cached_size_ = 0;
  resolveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSetAutoResolve::~CGSetAutoResolve() {
  // @@protoc_insertion_point(destructor:CGSetAutoResolve)
  SharedDtor();
}

void CGSetAutoResolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSetAutoResolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSetAutoResolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSetAutoResolve_descriptor_;
}

const CGSetAutoResolve& CGSetAutoResolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

CGSetAutoResolve* CGSetAutoResolve::default_instance_ = NULL;

CGSetAutoResolve* CGSetAutoResolve::New() const {
  return new CGSetAutoResolve;
}

void CGSetAutoResolve::Clear() {
  resolveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSetAutoResolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSetAutoResolve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resolveId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolveid_)));
          set_has_resolveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSetAutoResolve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSetAutoResolve)
  return false;
#undef DO_
}

void CGSetAutoResolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSetAutoResolve)
  // optional int32 resolveId = 1;
  if (has_resolveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resolveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSetAutoResolve)
}

::google::protobuf::uint8* CGSetAutoResolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSetAutoResolve)
  // optional int32 resolveId = 1;
  if (has_resolveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resolveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSetAutoResolve)
  return target;
}

int CGSetAutoResolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resolveId = 1;
    if (has_resolveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSetAutoResolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSetAutoResolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSetAutoResolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSetAutoResolve::MergeFrom(const CGSetAutoResolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolveid()) {
      set_resolveid(from.resolveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSetAutoResolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSetAutoResolve::CopyFrom(const CGSetAutoResolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSetAutoResolve::IsInitialized() const {

  return true;
}

void CGSetAutoResolve::Swap(CGSetAutoResolve* other) {
  if (other != this) {
    std::swap(resolveid_, other->resolveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSetAutoResolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSetAutoResolve_descriptor_;
  metadata.reflection = CGSetAutoResolve_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSetAutoResolve::kResolveIdFieldNumber;
#endif  // !_MSC_VER

GCSetAutoResolve::GCSetAutoResolve()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSetAutoResolve)
}

void GCSetAutoResolve::InitAsDefaultInstance() {
}

GCSetAutoResolve::GCSetAutoResolve(const GCSetAutoResolve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSetAutoResolve)
}

void GCSetAutoResolve::SharedCtor() {
  _cached_size_ = 0;
  resolveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSetAutoResolve::~GCSetAutoResolve() {
  // @@protoc_insertion_point(destructor:GCSetAutoResolve)
  SharedDtor();
}

void GCSetAutoResolve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSetAutoResolve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSetAutoResolve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSetAutoResolve_descriptor_;
}

const GCSetAutoResolve& GCSetAutoResolve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BackpackMessage_2eproto();
  return *default_instance_;
}

GCSetAutoResolve* GCSetAutoResolve::default_instance_ = NULL;

GCSetAutoResolve* GCSetAutoResolve::New() const {
  return new GCSetAutoResolve;
}

void GCSetAutoResolve::Clear() {
  resolveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSetAutoResolve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSetAutoResolve)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resolveId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolveid_)));
          set_has_resolveid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSetAutoResolve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSetAutoResolve)
  return false;
#undef DO_
}

void GCSetAutoResolve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSetAutoResolve)
  // optional int32 resolveId = 1;
  if (has_resolveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resolveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSetAutoResolve)
}

::google::protobuf::uint8* GCSetAutoResolve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSetAutoResolve)
  // optional int32 resolveId = 1;
  if (has_resolveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resolveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSetAutoResolve)
  return target;
}

int GCSetAutoResolve::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resolveId = 1;
    if (has_resolveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resolveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSetAutoResolve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSetAutoResolve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSetAutoResolve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSetAutoResolve::MergeFrom(const GCSetAutoResolve& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolveid()) {
      set_resolveid(from.resolveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSetAutoResolve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSetAutoResolve::CopyFrom(const GCSetAutoResolve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSetAutoResolve::IsInitialized() const {

  return true;
}

void GCSetAutoResolve::Swap(GCSetAutoResolve* other) {
  if (other != this) {
    std::swap(resolveid_, other->resolveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSetAutoResolve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSetAutoResolve_descriptor_;
  metadata.reflection = GCSetAutoResolve_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
