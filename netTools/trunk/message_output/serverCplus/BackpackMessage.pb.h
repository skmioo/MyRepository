// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BackpackMessage.proto

#ifndef PROTOBUF_BackpackMessage_2eproto__INCLUDED
#define PROTOBUF_BackpackMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
#include "EquipMessage.pb.h"
#include "TreasureEquipMessage.pb.h"
#include "TalismanMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BackpackMessage_2eproto();
void protobuf_AssignDesc_BackpackMessage_2eproto();
void protobuf_ShutdownFile_BackpackMessage_2eproto();

class BackpackGrid;
class BackpackItem;
class CGBackpackOper;
class GCBackpackOper;
class GCPutBackpack;
class GCPutStorage;
class CGBackpackSpecial;
class TreasureMapDataInfo;
class GCBackTreasureMap;
class TreasureMap;
class CGBackUseMap;
class GCBackPuseUseMap;
class GCSendTransmitToMe;
class CGTransmitToMember;
class GCOpenChatHornUI;
class GCSendOpenBoxEnd;
class GCSendMakeAct;
class ItemLimit;
class GCItemLimitBack;
class NineMysteryItem;
class CGBackUseNineMystery;
class CGUseNineMysteryIntoDungeon;
class GCBackNineMystery;
class CGComposeItems;
class GCComposeItems;
class CGSetAutoResolve;
class GCSetAutoResolve;

// ===================================================================

class BackpackGrid : public ::google::protobuf::Message {
 public:
  BackpackGrid();
  virtual ~BackpackGrid();

  BackpackGrid(const BackpackGrid& from);

  inline BackpackGrid& operator=(const BackpackGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackpackGrid& default_instance();

  void Swap(BackpackGrid* other);

  // implements Message ----------------------------------------------

  BackpackGrid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackpackGrid& from);
  void MergeFrom(const BackpackGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gridID = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGridIDFieldNumber = 1;
  inline ::google::protobuf::int32 gridid() const;
  inline void set_gridid(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional .EquipInfo equipInfo = 5;
  inline bool has_equipinfo() const;
  inline void clear_equipinfo();
  static const int kEquipInfoFieldNumber = 5;
  inline const ::EquipInfo& equipinfo() const;
  inline ::EquipInfo* mutable_equipinfo();
  inline ::EquipInfo* release_equipinfo();
  inline void set_allocated_equipinfo(::EquipInfo* equipinfo);

  // optional int64 pid = 6;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 6;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 bind = 7;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 7;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);

  // optional .TreasureEquipData treasureEquip = 8;
  inline bool has_treasureequip() const;
  inline void clear_treasureequip();
  static const int kTreasureEquipFieldNumber = 8;
  inline const ::TreasureEquipData& treasureequip() const;
  inline ::TreasureEquipData* mutable_treasureequip();
  inline ::TreasureEquipData* release_treasureequip();
  inline void set_allocated_treasureequip(::TreasureEquipData* treasureequip);

  // optional .TalismanInfo talismanInfo = 9;
  inline bool has_talismaninfo() const;
  inline void clear_talismaninfo();
  static const int kTalismanInfoFieldNumber = 9;
  inline const ::TalismanInfo& talismaninfo() const;
  inline ::TalismanInfo* mutable_talismaninfo();
  inline ::TalismanInfo* release_talismaninfo();
  inline void set_allocated_talismaninfo(::TalismanInfo* talismaninfo);

  // optional .TreasureMapDataInfo treasureMap = 10;
  inline bool has_treasuremap() const;
  inline void clear_treasuremap();
  static const int kTreasureMapFieldNumber = 10;
  inline const ::TreasureMapDataInfo& treasuremap() const;
  inline ::TreasureMapDataInfo* mutable_treasuremap();
  inline ::TreasureMapDataInfo* release_treasuremap();
  inline void set_allocated_treasuremap(::TreasureMapDataInfo* treasuremap);

  // @@protoc_insertion_point(class_scope:BackpackGrid)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_equipinfo();
  inline void clear_has_equipinfo();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_bind();
  inline void clear_has_bind();
  inline void set_has_treasureequip();
  inline void clear_has_treasureequip();
  inline void set_has_talismaninfo();
  inline void clear_has_talismaninfo();
  inline void set_has_treasuremap();
  inline void clear_has_treasuremap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gridid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;
  ::EquipInfo* equipinfo_;
  ::google::protobuf::int64 pid_;
  ::TreasureEquipData* treasureequip_;
  ::TalismanInfo* talismaninfo_;
  ::TreasureMapDataInfo* treasuremap_;
  ::google::protobuf::int32 bind_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static BackpackGrid* default_instance_;
};
// -------------------------------------------------------------------

class BackpackItem : public ::google::protobuf::Message {
 public:
  BackpackItem();
  virtual ~BackpackItem();

  BackpackItem(const BackpackItem& from);

  inline BackpackItem& operator=(const BackpackItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackpackItem& default_instance();

  void Swap(BackpackItem* other);

  // implements Message ----------------------------------------------

  BackpackItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackpackItem& from);
  void MergeFrom(const BackpackItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::int32 bid() const;
  inline void set_bid(::google::protobuf::int32 value);

  // optional int32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 bind = 4;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 4;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BackpackItem)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_bind();
  inline void clear_has_bind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 bind_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static BackpackItem* default_instance_;
};
// -------------------------------------------------------------------

class CGBackpackOper : public ::google::protobuf::Message {
 public:
  CGBackpackOper();
  virtual ~CGBackpackOper();

  CGBackpackOper(const CGBackpackOper& from);

  inline CGBackpackOper& operator=(const CGBackpackOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBackpackOper& default_instance();

  void Swap(CGBackpackOper* other);

  // implements Message ----------------------------------------------

  CGBackpackOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBackpackOper& from);
  void MergeFrom(const CGBackpackOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);

  // optional int32 addNum = 3;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 3;
  inline ::google::protobuf::int32 addnum() const;
  inline void set_addnum(::google::protobuf::int32 value);

  // repeated int32 resolveId = 4;
  inline int resolveid_size() const;
  inline void clear_resolveid();
  static const int kResolveIdFieldNumber = 4;
  inline ::google::protobuf::int32 resolveid(int index) const;
  inline void set_resolveid(int index, ::google::protobuf::int32 value);
  inline void add_resolveid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resolveid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resolveid();

  // @@protoc_insertion_point(class_scope:CGBackpackOper)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_addnum();
  inline void clear_has_addnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resolveid_;
  ::google::protobuf::int32 addnum_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBackpackOper* default_instance_;
};
// -------------------------------------------------------------------

class GCBackpackOper : public ::google::protobuf::Message {
 public:
  GCBackpackOper();
  virtual ~GCBackpackOper();

  GCBackpackOper(const GCBackpackOper& from);

  inline GCBackpackOper& operator=(const GCBackpackOper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBackpackOper& default_instance();

  void Swap(GCBackpackOper* other);

  // implements Message ----------------------------------------------

  GCBackpackOper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBackpackOper& from);
  void MergeFrom(const GCBackpackOper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 gid = 2;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 2;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);

  // optional int32 addNum = 3;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 3;
  inline ::google::protobuf::int32 addnum() const;
  inline void set_addnum(::google::protobuf::int32 value);

  // repeated int32 resolveId = 4;
  inline int resolveid_size() const;
  inline void clear_resolveid();
  static const int kResolveIdFieldNumber = 4;
  inline ::google::protobuf::int32 resolveid(int index) const;
  inline void set_resolveid(int index, ::google::protobuf::int32 value);
  inline void add_resolveid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resolveid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resolveid();

  // @@protoc_insertion_point(class_scope:GCBackpackOper)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_addnum();
  inline void clear_has_addnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resolveid_;
  ::google::protobuf::int32 addnum_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBackpackOper* default_instance_;
};
// -------------------------------------------------------------------

class GCPutBackpack : public ::google::protobuf::Message {
 public:
  GCPutBackpack();
  virtual ~GCPutBackpack();

  GCPutBackpack(const GCPutBackpack& from);

  inline GCPutBackpack& operator=(const GCPutBackpack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPutBackpack& default_instance();

  void Swap(GCPutBackpack* other);

  // implements Message ----------------------------------------------

  GCPutBackpack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPutBackpack& from);
  void MergeFrom(const GCPutBackpack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .BackpackGrid items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::BackpackGrid& items(int index) const;
  inline ::BackpackGrid* mutable_items(int index);
  inline ::BackpackGrid* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BackpackGrid >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BackpackGrid >*
      mutable_items();

  // optional int32 gridNum = 3;
  inline bool has_gridnum() const;
  inline void clear_gridnum();
  static const int kGridNumFieldNumber = 3;
  inline ::google::protobuf::int32 gridnum() const;
  inline void set_gridnum(::google::protobuf::int32 value);

  // optional int32 gridMax = 4;
  inline bool has_gridmax() const;
  inline void clear_gridmax();
  static const int kGridMaxFieldNumber = 4;
  inline ::google::protobuf::int32 gridmax() const;
  inline void set_gridmax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCPutBackpack)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_gridnum();
  inline void clear_has_gridnum();
  inline void set_has_gridmax();
  inline void clear_has_gridmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BackpackGrid > items_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 gridnum_;
  ::google::protobuf::int32 gridmax_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPutBackpack* default_instance_;
};
// -------------------------------------------------------------------

class GCPutStorage : public ::google::protobuf::Message {
 public:
  GCPutStorage();
  virtual ~GCPutStorage();

  GCPutStorage(const GCPutStorage& from);

  inline GCPutStorage& operator=(const GCPutStorage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPutStorage& default_instance();

  void Swap(GCPutStorage* other);

  // implements Message ----------------------------------------------

  GCPutStorage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPutStorage& from);
  void MergeFrom(const GCPutStorage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .BackpackGrid items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::BackpackGrid& items(int index) const;
  inline ::BackpackGrid* mutable_items(int index);
  inline ::BackpackGrid* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BackpackGrid >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BackpackGrid >*
      mutable_items();

  // optional int32 gridNum = 3;
  inline bool has_gridnum() const;
  inline void clear_gridnum();
  static const int kGridNumFieldNumber = 3;
  inline ::google::protobuf::int32 gridnum() const;
  inline void set_gridnum(::google::protobuf::int32 value);

  // optional int32 gridMax = 4;
  inline bool has_gridmax() const;
  inline void clear_gridmax();
  static const int kGridMaxFieldNumber = 4;
  inline ::google::protobuf::int32 gridmax() const;
  inline void set_gridmax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCPutStorage)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_gridnum();
  inline void clear_has_gridnum();
  inline void set_has_gridmax();
  inline void clear_has_gridmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BackpackGrid > items_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 gridnum_;
  ::google::protobuf::int32 gridmax_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPutStorage* default_instance_;
};
// -------------------------------------------------------------------

class CGBackpackSpecial : public ::google::protobuf::Message {
 public:
  CGBackpackSpecial();
  virtual ~CGBackpackSpecial();

  CGBackpackSpecial(const CGBackpackSpecial& from);

  inline CGBackpackSpecial& operator=(const CGBackpackSpecial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBackpackSpecial& default_instance();

  void Swap(CGBackpackSpecial* other);

  // implements Message ----------------------------------------------

  CGBackpackSpecial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBackpackSpecial& from);
  void MergeFrom(const CGBackpackSpecial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 operate = 2;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 2;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .BackpackItem backpackItem = 3;
  inline int backpackitem_size() const;
  inline void clear_backpackitem();
  static const int kBackpackItemFieldNumber = 3;
  inline const ::BackpackItem& backpackitem(int index) const;
  inline ::BackpackItem* mutable_backpackitem(int index);
  inline ::BackpackItem* add_backpackitem();
  inline const ::google::protobuf::RepeatedPtrField< ::BackpackItem >&
      backpackitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::BackpackItem >*
      mutable_backpackitem();

  // @@protoc_insertion_point(class_scope:CGBackpackSpecial)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_operate();
  inline void clear_has_operate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::RepeatedPtrField< ::BackpackItem > backpackitem_;
  ::google::protobuf::int32 operate_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBackpackSpecial* default_instance_;
};
// -------------------------------------------------------------------

class TreasureMapDataInfo : public ::google::protobuf::Message {
 public:
  TreasureMapDataInfo();
  virtual ~TreasureMapDataInfo();

  TreasureMapDataInfo(const TreasureMapDataInfo& from);

  inline TreasureMapDataInfo& operator=(const TreasureMapDataInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureMapDataInfo& default_instance();

  void Swap(TreasureMapDataInfo* other);

  // implements Message ----------------------------------------------

  TreasureMapDataInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureMapDataInfo& from);
  void MergeFrom(const TreasureMapDataInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 locationId = 2;
  inline bool has_locationid() const;
  inline void clear_locationid();
  static const int kLocationIdFieldNumber = 2;
  inline ::google::protobuf::int32 locationid() const;
  inline void set_locationid(::google::protobuf::int32 value);

  // optional int32 eventType = 3;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::int32 eventtype() const;
  inline void set_eventtype(::google::protobuf::int32 value);

  // optional int32 eventParam = 4;
  inline bool has_eventparam() const;
  inline void clear_eventparam();
  static const int kEventParamFieldNumber = 4;
  inline ::google::protobuf::int32 eventparam() const;
  inline void set_eventparam(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TreasureMapDataInfo)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_locationid();
  inline void clear_has_locationid();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_eventparam();
  inline void clear_has_eventparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 locationid_;
  ::google::protobuf::int32 eventtype_;
  ::google::protobuf::int32 eventparam_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static TreasureMapDataInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCBackTreasureMap : public ::google::protobuf::Message {
 public:
  GCBackTreasureMap();
  virtual ~GCBackTreasureMap();

  GCBackTreasureMap(const GCBackTreasureMap& from);

  inline GCBackTreasureMap& operator=(const GCBackTreasureMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBackTreasureMap& default_instance();

  void Swap(GCBackTreasureMap* other);

  // implements Message ----------------------------------------------

  GCBackTreasureMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBackTreasureMap& from);
  void MergeFrom(const GCBackTreasureMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 operate = 2;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 2;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCBackTreasureMap)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_operate();
  inline void clear_has_operate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operate_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBackTreasureMap* default_instance_;
};
// -------------------------------------------------------------------

class TreasureMap : public ::google::protobuf::Message {
 public:
  TreasureMap();
  virtual ~TreasureMap();

  TreasureMap(const TreasureMap& from);

  inline TreasureMap& operator=(const TreasureMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureMap& default_instance();

  void Swap(TreasureMap* other);

  // implements Message ----------------------------------------------

  TreasureMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureMap& from);
  void MergeFrom(const TreasureMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 mapID = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 funcID = 3;
  inline bool has_funcid() const;
  inline void clear_funcid();
  static const int kFuncIDFieldNumber = 3;
  inline ::google::protobuf::int32 funcid() const;
  inline void set_funcid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TreasureMap)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_funcid();
  inline void clear_has_funcid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 funcid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static TreasureMap* default_instance_;
};
// -------------------------------------------------------------------

class CGBackUseMap : public ::google::protobuf::Message {
 public:
  CGBackUseMap();
  virtual ~CGBackUseMap();

  CGBackUseMap(const CGBackUseMap& from);

  inline CGBackUseMap& operator=(const CGBackUseMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBackUseMap& default_instance();

  void Swap(CGBackUseMap* other);

  // implements Message ----------------------------------------------

  CGBackUseMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBackUseMap& from);
  void MergeFrom(const CGBackUseMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gridID = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGridIDFieldNumber = 1;
  inline ::google::protobuf::int32 gridid() const;
  inline void set_gridid(::google::protobuf::int32 value);

  // optional int64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGBackUseMap)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 gridid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBackUseMap* default_instance_;
};
// -------------------------------------------------------------------

class GCBackPuseUseMap : public ::google::protobuf::Message {
 public:
  GCBackPuseUseMap();
  virtual ~GCBackPuseUseMap();

  GCBackPuseUseMap(const GCBackPuseUseMap& from);

  inline GCBackPuseUseMap& operator=(const GCBackPuseUseMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBackPuseUseMap& default_instance();

  void Swap(GCBackPuseUseMap* other);

  // implements Message ----------------------------------------------

  GCBackPuseUseMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBackPuseUseMap& from);
  void MergeFrom(const GCBackPuseUseMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .TreasureMap treasureMap = 2;
  inline int treasuremap_size() const;
  inline void clear_treasuremap();
  static const int kTreasureMapFieldNumber = 2;
  inline const ::TreasureMap& treasuremap(int index) const;
  inline ::TreasureMap* mutable_treasuremap(int index);
  inline ::TreasureMap* add_treasuremap();
  inline const ::google::protobuf::RepeatedPtrField< ::TreasureMap >&
      treasuremap() const;
  inline ::google::protobuf::RepeatedPtrField< ::TreasureMap >*
      mutable_treasuremap();

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 monsterID = 4;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 4;
  inline ::google::protobuf::int64 monsterid() const;
  inline void set_monsterid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCBackPuseUseMap)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TreasureMap > treasuremap_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 monsterid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBackPuseUseMap* default_instance_;
};
// -------------------------------------------------------------------

class GCSendTransmitToMe : public ::google::protobuf::Message {
 public:
  GCSendTransmitToMe();
  virtual ~GCSendTransmitToMe();

  GCSendTransmitToMe(const GCSendTransmitToMe& from);

  inline GCSendTransmitToMe& operator=(const GCSendTransmitToMe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSendTransmitToMe& default_instance();

  void Swap(GCSendTransmitToMe* other);

  // implements Message ----------------------------------------------

  GCSendTransmitToMe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSendTransmitToMe& from);
  void MergeFrom(const GCSendTransmitToMe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 limitTime = 2;
  inline bool has_limittime() const;
  inline void clear_limittime();
  static const int kLimitTimeFieldNumber = 2;
  inline ::google::protobuf::int32 limittime() const;
  inline void set_limittime(::google::protobuf::int32 value);

  // optional string playerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:GCSendTransmitToMe)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_limittime();
  inline void clear_has_limittime();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 limittime_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSendTransmitToMe* default_instance_;
};
// -------------------------------------------------------------------

class CGTransmitToMember : public ::google::protobuf::Message {
 public:
  CGTransmitToMember();
  virtual ~CGTransmitToMember();

  CGTransmitToMember(const CGTransmitToMember& from);

  inline CGTransmitToMember& operator=(const CGTransmitToMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGTransmitToMember& default_instance();

  void Swap(CGTransmitToMember* other);

  // implements Message ----------------------------------------------

  CGTransmitToMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGTransmitToMember& from);
  void MergeFrom(const CGTransmitToMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGTransmitToMember)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGTransmitToMember* default_instance_;
};
// -------------------------------------------------------------------

class GCOpenChatHornUI : public ::google::protobuf::Message {
 public:
  GCOpenChatHornUI();
  virtual ~GCOpenChatHornUI();

  GCOpenChatHornUI(const GCOpenChatHornUI& from);

  inline GCOpenChatHornUI& operator=(const GCOpenChatHornUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCOpenChatHornUI& default_instance();

  void Swap(GCOpenChatHornUI* other);

  // implements Message ----------------------------------------------

  GCOpenChatHornUI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCOpenChatHornUI& from);
  void MergeFrom(const GCOpenChatHornUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCOpenChatHornUI)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCOpenChatHornUI* default_instance_;
};
// -------------------------------------------------------------------

class GCSendOpenBoxEnd : public ::google::protobuf::Message {
 public:
  GCSendOpenBoxEnd();
  virtual ~GCSendOpenBoxEnd();

  GCSendOpenBoxEnd(const GCSendOpenBoxEnd& from);

  inline GCSendOpenBoxEnd& operator=(const GCSendOpenBoxEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSendOpenBoxEnd& default_instance();

  void Swap(GCSendOpenBoxEnd* other);

  // implements Message ----------------------------------------------

  GCSendOpenBoxEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSendOpenBoxEnd& from);
  void MergeFrom(const GCSendOpenBoxEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BackpackItem rewards = 1;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 1;
  inline const ::BackpackItem& rewards(int index) const;
  inline ::BackpackItem* mutable_rewards(int index);
  inline ::BackpackItem* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::BackpackItem >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::BackpackItem >*
      mutable_rewards();

  // optional int32 errorCode = 2;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCSendOpenBoxEnd)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::BackpackItem > rewards_;
  ::google::protobuf::int32 errorcode_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSendOpenBoxEnd* default_instance_;
};
// -------------------------------------------------------------------

class GCSendMakeAct : public ::google::protobuf::Message {
 public:
  GCSendMakeAct();
  virtual ~GCSendMakeAct();

  GCSendMakeAct(const GCSendMakeAct& from);

  inline GCSendMakeAct& operator=(const GCSendMakeAct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSendMakeAct& default_instance();

  void Swap(GCSendMakeAct* other);

  // implements Message ----------------------------------------------

  GCSendMakeAct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSendMakeAct& from);
  void MergeFrom(const GCSendMakeAct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 actID = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIDFieldNumber = 1;
  inline ::google::protobuf::int32 actid() const;
  inline void set_actid(::google::protobuf::int32 value);

  // optional int64 playerID = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCSendMakeAct)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 actid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSendMakeAct* default_instance_;
};
// -------------------------------------------------------------------

class ItemLimit : public ::google::protobuf::Message {
 public:
  ItemLimit();
  virtual ~ItemLimit();

  ItemLimit(const ItemLimit& from);

  inline ItemLimit& operator=(const ItemLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemLimit& default_instance();

  void Swap(ItemLimit* other);

  // implements Message ----------------------------------------------

  ItemLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemLimit& from);
  void MergeFrom(const ItemLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ItemLimit)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static ItemLimit* default_instance_;
};
// -------------------------------------------------------------------

class GCItemLimitBack : public ::google::protobuf::Message {
 public:
  GCItemLimitBack();
  virtual ~GCItemLimitBack();

  GCItemLimitBack(const GCItemLimitBack& from);

  inline GCItemLimitBack& operator=(const GCItemLimitBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCItemLimitBack& default_instance();

  void Swap(GCItemLimitBack* other);

  // implements Message ----------------------------------------------

  GCItemLimitBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCItemLimitBack& from);
  void MergeFrom(const GCItemLimitBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ItemLimit itemLimits = 1;
  inline int itemlimits_size() const;
  inline void clear_itemlimits();
  static const int kItemLimitsFieldNumber = 1;
  inline const ::ItemLimit& itemlimits(int index) const;
  inline ::ItemLimit* mutable_itemlimits(int index);
  inline ::ItemLimit* add_itemlimits();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemLimit >&
      itemlimits() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemLimit >*
      mutable_itemlimits();

  // @@protoc_insertion_point(class_scope:GCItemLimitBack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ItemLimit > itemlimits_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCItemLimitBack* default_instance_;
};
// -------------------------------------------------------------------

class NineMysteryItem : public ::google::protobuf::Message {
 public:
  NineMysteryItem();
  virtual ~NineMysteryItem();

  NineMysteryItem(const NineMysteryItem& from);

  inline NineMysteryItem& operator=(const NineMysteryItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NineMysteryItem& default_instance();

  void Swap(NineMysteryItem* other);

  // implements Message ----------------------------------------------

  NineMysteryItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NineMysteryItem& from);
  void MergeFrom(const NineMysteryItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 mapID = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 eventType = 3;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::int32 eventtype() const;
  inline void set_eventtype(::google::protobuf::int32 value);

  // optional string param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::std::string& param() const;
  inline void set_param(const ::std::string& value);
  inline void set_param(const char* value);
  inline void set_param(const char* value, size_t size);
  inline ::std::string* mutable_param();
  inline ::std::string* release_param();
  inline void set_allocated_param(::std::string* param);

  // @@protoc_insertion_point(class_scope:NineMysteryItem)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 eventtype_;
  ::std::string* param_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static NineMysteryItem* default_instance_;
};
// -------------------------------------------------------------------

class CGBackUseNineMystery : public ::google::protobuf::Message {
 public:
  CGBackUseNineMystery();
  virtual ~CGBackUseNineMystery();

  CGBackUseNineMystery(const CGBackUseNineMystery& from);

  inline CGBackUseNineMystery& operator=(const CGBackUseNineMystery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBackUseNineMystery& default_instance();

  void Swap(CGBackUseNineMystery* other);

  // implements Message ----------------------------------------------

  CGBackUseNineMystery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBackUseNineMystery& from);
  void MergeFrom(const CGBackUseNineMystery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gridID = 1;
  inline bool has_gridid() const;
  inline void clear_gridid();
  static const int kGridIDFieldNumber = 1;
  inline ::google::protobuf::int32 gridid() const;
  inline void set_gridid(::google::protobuf::int32 value);

  // optional int64 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGBackUseNineMystery)
 private:
  inline void set_has_gridid();
  inline void clear_has_gridid();
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int32 gridid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBackUseNineMystery* default_instance_;
};
// -------------------------------------------------------------------

class CGUseNineMysteryIntoDungeon : public ::google::protobuf::Message {
 public:
  CGUseNineMysteryIntoDungeon();
  virtual ~CGUseNineMysteryIntoDungeon();

  CGUseNineMysteryIntoDungeon(const CGUseNineMysteryIntoDungeon& from);

  inline CGUseNineMysteryIntoDungeon& operator=(const CGUseNineMysteryIntoDungeon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGUseNineMysteryIntoDungeon& default_instance();

  void Swap(CGUseNineMysteryIntoDungeon* other);

  // implements Message ----------------------------------------------

  CGUseNineMysteryIntoDungeon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGUseNineMysteryIntoDungeon& from);
  void MergeFrom(const CGUseNineMysteryIntoDungeon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string dungeon = 1;
  inline bool has_dungeon() const;
  inline void clear_dungeon();
  static const int kDungeonFieldNumber = 1;
  inline const ::std::string& dungeon() const;
  inline void set_dungeon(const ::std::string& value);
  inline void set_dungeon(const char* value);
  inline void set_dungeon(const char* value, size_t size);
  inline ::std::string* mutable_dungeon();
  inline ::std::string* release_dungeon();
  inline void set_allocated_dungeon(::std::string* dungeon);

  // @@protoc_insertion_point(class_scope:CGUseNineMysteryIntoDungeon)
 private:
  inline void set_has_dungeon();
  inline void clear_has_dungeon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* dungeon_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGUseNineMysteryIntoDungeon* default_instance_;
};
// -------------------------------------------------------------------

class GCBackNineMystery : public ::google::protobuf::Message {
 public:
  GCBackNineMystery();
  virtual ~GCBackNineMystery();

  GCBackNineMystery(const GCBackNineMystery& from);

  inline GCBackNineMystery& operator=(const GCBackNineMystery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBackNineMystery& default_instance();

  void Swap(GCBackNineMystery* other);

  // implements Message ----------------------------------------------

  GCBackNineMystery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBackNineMystery& from);
  void MergeFrom(const GCBackNineMystery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .NineMysteryItem nineMysteryItem = 2;
  inline int ninemysteryitem_size() const;
  inline void clear_ninemysteryitem();
  static const int kNineMysteryItemFieldNumber = 2;
  inline const ::NineMysteryItem& ninemysteryitem(int index) const;
  inline ::NineMysteryItem* mutable_ninemysteryitem(int index);
  inline ::NineMysteryItem* add_ninemysteryitem();
  inline const ::google::protobuf::RepeatedPtrField< ::NineMysteryItem >&
      ninemysteryitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::NineMysteryItem >*
      mutable_ninemysteryitem();

  // optional int64 pid = 3;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline ::google::protobuf::int64 pid() const;
  inline void set_pid(::google::protobuf::int64 value);

  // optional int32 operate = 4;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 4;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int64 monsterID = 5;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 5;
  inline ::google::protobuf::int64 monsterid() const;
  inline void set_monsterid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCBackNineMystery)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NineMysteryItem > ninemysteryitem_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int64 monsterid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBackNineMystery* default_instance_;
};
// -------------------------------------------------------------------

class CGComposeItems : public ::google::protobuf::Message {
 public:
  CGComposeItems();
  virtual ~CGComposeItems();

  CGComposeItems(const CGComposeItems& from);

  inline CGComposeItems& operator=(const CGComposeItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGComposeItems& default_instance();

  void Swap(CGComposeItems* other);

  // implements Message ----------------------------------------------

  CGComposeItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGComposeItems& from);
  void MergeFrom(const CGComposeItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 targetNum = 2;
  inline bool has_targetnum() const;
  inline void clear_targetnum();
  static const int kTargetNumFieldNumber = 2;
  inline ::google::protobuf::int32 targetnum() const;
  inline void set_targetnum(::google::protobuf::int32 value);

  // optional int32 selectBound = 3;
  inline bool has_selectbound() const;
  inline void clear_selectbound();
  static const int kSelectBoundFieldNumber = 3;
  inline ::google::protobuf::int32 selectbound() const;
  inline void set_selectbound(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGComposeItems)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_targetnum();
  inline void clear_has_targetnum();
  inline void set_has_selectbound();
  inline void clear_has_selectbound();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 targetnum_;
  ::google::protobuf::int32 selectbound_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGComposeItems* default_instance_;
};
// -------------------------------------------------------------------

class GCComposeItems : public ::google::protobuf::Message {
 public:
  GCComposeItems();
  virtual ~GCComposeItems();

  GCComposeItems(const GCComposeItems& from);

  inline GCComposeItems& operator=(const GCComposeItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCComposeItems& default_instance();

  void Swap(GCComposeItems* other);

  // implements Message ----------------------------------------------

  GCComposeItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCComposeItems& from);
  void MergeFrom(const GCComposeItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 targetNum = 2;
  inline bool has_targetnum() const;
  inline void clear_targetnum();
  static const int kTargetNumFieldNumber = 2;
  inline ::google::protobuf::int32 targetnum() const;
  inline void set_targetnum(::google::protobuf::int32 value);

  // optional int32 selectBound = 3;
  inline bool has_selectbound() const;
  inline void clear_selectbound();
  static const int kSelectBoundFieldNumber = 3;
  inline ::google::protobuf::int32 selectbound() const;
  inline void set_selectbound(::google::protobuf::int32 value);

  // optional int32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCComposeItems)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_targetnum();
  inline void clear_has_targetnum();
  inline void set_has_selectbound();
  inline void clear_has_selectbound();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 targetnum_;
  ::google::protobuf::int32 selectbound_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCComposeItems* default_instance_;
};
// -------------------------------------------------------------------

class CGSetAutoResolve : public ::google::protobuf::Message {
 public:
  CGSetAutoResolve();
  virtual ~CGSetAutoResolve();

  CGSetAutoResolve(const CGSetAutoResolve& from);

  inline CGSetAutoResolve& operator=(const CGSetAutoResolve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSetAutoResolve& default_instance();

  void Swap(CGSetAutoResolve* other);

  // implements Message ----------------------------------------------

  CGSetAutoResolve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSetAutoResolve& from);
  void MergeFrom(const CGSetAutoResolve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resolveId = 1;
  inline bool has_resolveid() const;
  inline void clear_resolveid();
  static const int kResolveIdFieldNumber = 1;
  inline ::google::protobuf::int32 resolveid() const;
  inline void set_resolveid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGSetAutoResolve)
 private:
  inline void set_has_resolveid();
  inline void clear_has_resolveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 resolveid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSetAutoResolve* default_instance_;
};
// -------------------------------------------------------------------

class GCSetAutoResolve : public ::google::protobuf::Message {
 public:
  GCSetAutoResolve();
  virtual ~GCSetAutoResolve();

  GCSetAutoResolve(const GCSetAutoResolve& from);

  inline GCSetAutoResolve& operator=(const GCSetAutoResolve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSetAutoResolve& default_instance();

  void Swap(GCSetAutoResolve* other);

  // implements Message ----------------------------------------------

  GCSetAutoResolve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSetAutoResolve& from);
  void MergeFrom(const GCSetAutoResolve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resolveId = 1;
  inline bool has_resolveid() const;
  inline void clear_resolveid();
  static const int kResolveIdFieldNumber = 1;
  inline ::google::protobuf::int32 resolveid() const;
  inline void set_resolveid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCSetAutoResolve)
 private:
  inline void set_has_resolveid();
  inline void clear_has_resolveid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 resolveid_;
  friend void  protobuf_AddDesc_BackpackMessage_2eproto();
  friend void protobuf_AssignDesc_BackpackMessage_2eproto();
  friend void protobuf_ShutdownFile_BackpackMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSetAutoResolve* default_instance_;
};
// ===================================================================


// ===================================================================

// BackpackGrid

// optional int32 gridID = 1;
inline bool BackpackGrid::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackpackGrid::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackpackGrid::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackpackGrid::clear_gridid() {
  gridid_ = 0;
  clear_has_gridid();
}
inline ::google::protobuf::int32 BackpackGrid::gridid() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.gridID)
  return gridid_;
}
inline void BackpackGrid::set_gridid(::google::protobuf::int32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.gridID)
}

// optional int32 type = 2;
inline bool BackpackGrid::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackpackGrid::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackpackGrid::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackpackGrid::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BackpackGrid::type() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.type)
  return type_;
}
inline void BackpackGrid::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.type)
}

// optional int32 itemId = 3;
inline bool BackpackGrid::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackpackGrid::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackpackGrid::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackpackGrid::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 BackpackGrid::itemid() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.itemId)
  return itemid_;
}
inline void BackpackGrid::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.itemId)
}

// optional int32 num = 4;
inline bool BackpackGrid::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackpackGrid::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackpackGrid::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackpackGrid::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BackpackGrid::num() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.num)
  return num_;
}
inline void BackpackGrid::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.num)
}

// optional .EquipInfo equipInfo = 5;
inline bool BackpackGrid::has_equipinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BackpackGrid::set_has_equipinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BackpackGrid::clear_has_equipinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BackpackGrid::clear_equipinfo() {
  if (equipinfo_ != NULL) equipinfo_->::EquipInfo::Clear();
  clear_has_equipinfo();
}
inline const ::EquipInfo& BackpackGrid::equipinfo() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.equipInfo)
  return equipinfo_ != NULL ? *equipinfo_ : *default_instance_->equipinfo_;
}
inline ::EquipInfo* BackpackGrid::mutable_equipinfo() {
  set_has_equipinfo();
  if (equipinfo_ == NULL) equipinfo_ = new ::EquipInfo;
  // @@protoc_insertion_point(field_mutable:BackpackGrid.equipInfo)
  return equipinfo_;
}
inline ::EquipInfo* BackpackGrid::release_equipinfo() {
  clear_has_equipinfo();
  ::EquipInfo* temp = equipinfo_;
  equipinfo_ = NULL;
  return temp;
}
inline void BackpackGrid::set_allocated_equipinfo(::EquipInfo* equipinfo) {
  delete equipinfo_;
  equipinfo_ = equipinfo;
  if (equipinfo) {
    set_has_equipinfo();
  } else {
    clear_has_equipinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:BackpackGrid.equipInfo)
}

// optional int64 pid = 6;
inline bool BackpackGrid::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BackpackGrid::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BackpackGrid::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BackpackGrid::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 BackpackGrid::pid() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.pid)
  return pid_;
}
inline void BackpackGrid::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.pid)
}

// optional int32 bind = 7;
inline bool BackpackGrid::has_bind() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BackpackGrid::set_has_bind() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BackpackGrid::clear_has_bind() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BackpackGrid::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 BackpackGrid::bind() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.bind)
  return bind_;
}
inline void BackpackGrid::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
  // @@protoc_insertion_point(field_set:BackpackGrid.bind)
}

// optional .TreasureEquipData treasureEquip = 8;
inline bool BackpackGrid::has_treasureequip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BackpackGrid::set_has_treasureequip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BackpackGrid::clear_has_treasureequip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BackpackGrid::clear_treasureequip() {
  if (treasureequip_ != NULL) treasureequip_->::TreasureEquipData::Clear();
  clear_has_treasureequip();
}
inline const ::TreasureEquipData& BackpackGrid::treasureequip() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.treasureEquip)
  return treasureequip_ != NULL ? *treasureequip_ : *default_instance_->treasureequip_;
}
inline ::TreasureEquipData* BackpackGrid::mutable_treasureequip() {
  set_has_treasureequip();
  if (treasureequip_ == NULL) treasureequip_ = new ::TreasureEquipData;
  // @@protoc_insertion_point(field_mutable:BackpackGrid.treasureEquip)
  return treasureequip_;
}
inline ::TreasureEquipData* BackpackGrid::release_treasureequip() {
  clear_has_treasureequip();
  ::TreasureEquipData* temp = treasureequip_;
  treasureequip_ = NULL;
  return temp;
}
inline void BackpackGrid::set_allocated_treasureequip(::TreasureEquipData* treasureequip) {
  delete treasureequip_;
  treasureequip_ = treasureequip;
  if (treasureequip) {
    set_has_treasureequip();
  } else {
    clear_has_treasureequip();
  }
  // @@protoc_insertion_point(field_set_allocated:BackpackGrid.treasureEquip)
}

// optional .TalismanInfo talismanInfo = 9;
inline bool BackpackGrid::has_talismaninfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BackpackGrid::set_has_talismaninfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BackpackGrid::clear_has_talismaninfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BackpackGrid::clear_talismaninfo() {
  if (talismaninfo_ != NULL) talismaninfo_->::TalismanInfo::Clear();
  clear_has_talismaninfo();
}
inline const ::TalismanInfo& BackpackGrid::talismaninfo() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.talismanInfo)
  return talismaninfo_ != NULL ? *talismaninfo_ : *default_instance_->talismaninfo_;
}
inline ::TalismanInfo* BackpackGrid::mutable_talismaninfo() {
  set_has_talismaninfo();
  if (talismaninfo_ == NULL) talismaninfo_ = new ::TalismanInfo;
  // @@protoc_insertion_point(field_mutable:BackpackGrid.talismanInfo)
  return talismaninfo_;
}
inline ::TalismanInfo* BackpackGrid::release_talismaninfo() {
  clear_has_talismaninfo();
  ::TalismanInfo* temp = talismaninfo_;
  talismaninfo_ = NULL;
  return temp;
}
inline void BackpackGrid::set_allocated_talismaninfo(::TalismanInfo* talismaninfo) {
  delete talismaninfo_;
  talismaninfo_ = talismaninfo;
  if (talismaninfo) {
    set_has_talismaninfo();
  } else {
    clear_has_talismaninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:BackpackGrid.talismanInfo)
}

// optional .TreasureMapDataInfo treasureMap = 10;
inline bool BackpackGrid::has_treasuremap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BackpackGrid::set_has_treasuremap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BackpackGrid::clear_has_treasuremap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BackpackGrid::clear_treasuremap() {
  if (treasuremap_ != NULL) treasuremap_->::TreasureMapDataInfo::Clear();
  clear_has_treasuremap();
}
inline const ::TreasureMapDataInfo& BackpackGrid::treasuremap() const {
  // @@protoc_insertion_point(field_get:BackpackGrid.treasureMap)
  return treasuremap_ != NULL ? *treasuremap_ : *default_instance_->treasuremap_;
}
inline ::TreasureMapDataInfo* BackpackGrid::mutable_treasuremap() {
  set_has_treasuremap();
  if (treasuremap_ == NULL) treasuremap_ = new ::TreasureMapDataInfo;
  // @@protoc_insertion_point(field_mutable:BackpackGrid.treasureMap)
  return treasuremap_;
}
inline ::TreasureMapDataInfo* BackpackGrid::release_treasuremap() {
  clear_has_treasuremap();
  ::TreasureMapDataInfo* temp = treasuremap_;
  treasuremap_ = NULL;
  return temp;
}
inline void BackpackGrid::set_allocated_treasuremap(::TreasureMapDataInfo* treasuremap) {
  delete treasuremap_;
  treasuremap_ = treasuremap;
  if (treasuremap) {
    set_has_treasuremap();
  } else {
    clear_has_treasuremap();
  }
  // @@protoc_insertion_point(field_set_allocated:BackpackGrid.treasureMap)
}

// -------------------------------------------------------------------

// BackpackItem

// optional int32 bid = 1;
inline bool BackpackItem::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackpackItem::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackpackItem::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackpackItem::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline ::google::protobuf::int32 BackpackItem::bid() const {
  // @@protoc_insertion_point(field_get:BackpackItem.bid)
  return bid_;
}
inline void BackpackItem::set_bid(::google::protobuf::int32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:BackpackItem.bid)
}

// optional int32 sid = 2;
inline bool BackpackItem::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackpackItem::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackpackItem::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackpackItem::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 BackpackItem::sid() const {
  // @@protoc_insertion_point(field_get:BackpackItem.sid)
  return sid_;
}
inline void BackpackItem::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:BackpackItem.sid)
}

// optional int32 num = 3;
inline bool BackpackItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BackpackItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BackpackItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BackpackItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BackpackItem::num() const {
  // @@protoc_insertion_point(field_get:BackpackItem.num)
  return num_;
}
inline void BackpackItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:BackpackItem.num)
}

// optional int32 bind = 4;
inline bool BackpackItem::has_bind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BackpackItem::set_has_bind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BackpackItem::clear_has_bind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BackpackItem::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 BackpackItem::bind() const {
  // @@protoc_insertion_point(field_get:BackpackItem.bind)
  return bind_;
}
inline void BackpackItem::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
  // @@protoc_insertion_point(field_set:BackpackItem.bind)
}

// -------------------------------------------------------------------

// CGBackpackOper

// optional int32 operate = 1;
inline bool CGBackpackOper::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBackpackOper::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBackpackOper::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBackpackOper::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGBackpackOper::operate() const {
  // @@protoc_insertion_point(field_get:CGBackpackOper.operate)
  return operate_;
}
inline void CGBackpackOper::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGBackpackOper.operate)
}

// optional int32 gid = 2;
inline bool CGBackpackOper::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBackpackOper::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBackpackOper::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBackpackOper::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 CGBackpackOper::gid() const {
  // @@protoc_insertion_point(field_get:CGBackpackOper.gid)
  return gid_;
}
inline void CGBackpackOper::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:CGBackpackOper.gid)
}

// optional int32 addNum = 3;
inline bool CGBackpackOper::has_addnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGBackpackOper::set_has_addnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGBackpackOper::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGBackpackOper::clear_addnum() {
  addnum_ = 0;
  clear_has_addnum();
}
inline ::google::protobuf::int32 CGBackpackOper::addnum() const {
  // @@protoc_insertion_point(field_get:CGBackpackOper.addNum)
  return addnum_;
}
inline void CGBackpackOper::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:CGBackpackOper.addNum)
}

// repeated int32 resolveId = 4;
inline int CGBackpackOper::resolveid_size() const {
  return resolveid_.size();
}
inline void CGBackpackOper::clear_resolveid() {
  resolveid_.Clear();
}
inline ::google::protobuf::int32 CGBackpackOper::resolveid(int index) const {
  // @@protoc_insertion_point(field_get:CGBackpackOper.resolveId)
  return resolveid_.Get(index);
}
inline void CGBackpackOper::set_resolveid(int index, ::google::protobuf::int32 value) {
  resolveid_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGBackpackOper.resolveId)
}
inline void CGBackpackOper::add_resolveid(::google::protobuf::int32 value) {
  resolveid_.Add(value);
  // @@protoc_insertion_point(field_add:CGBackpackOper.resolveId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGBackpackOper::resolveid() const {
  // @@protoc_insertion_point(field_list:CGBackpackOper.resolveId)
  return resolveid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGBackpackOper::mutable_resolveid() {
  // @@protoc_insertion_point(field_mutable_list:CGBackpackOper.resolveId)
  return &resolveid_;
}

// -------------------------------------------------------------------

// GCBackpackOper

// optional int32 operate = 1;
inline bool GCBackpackOper::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBackpackOper::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBackpackOper::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBackpackOper::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCBackpackOper::operate() const {
  // @@protoc_insertion_point(field_get:GCBackpackOper.operate)
  return operate_;
}
inline void GCBackpackOper::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCBackpackOper.operate)
}

// optional int32 gid = 2;
inline bool GCBackpackOper::has_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCBackpackOper::set_has_gid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCBackpackOper::clear_has_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCBackpackOper::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 GCBackpackOper::gid() const {
  // @@protoc_insertion_point(field_get:GCBackpackOper.gid)
  return gid_;
}
inline void GCBackpackOper::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:GCBackpackOper.gid)
}

// optional int32 addNum = 3;
inline bool GCBackpackOper::has_addnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCBackpackOper::set_has_addnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCBackpackOper::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCBackpackOper::clear_addnum() {
  addnum_ = 0;
  clear_has_addnum();
}
inline ::google::protobuf::int32 GCBackpackOper::addnum() const {
  // @@protoc_insertion_point(field_get:GCBackpackOper.addNum)
  return addnum_;
}
inline void GCBackpackOper::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:GCBackpackOper.addNum)
}

// repeated int32 resolveId = 4;
inline int GCBackpackOper::resolveid_size() const {
  return resolveid_.size();
}
inline void GCBackpackOper::clear_resolveid() {
  resolveid_.Clear();
}
inline ::google::protobuf::int32 GCBackpackOper::resolveid(int index) const {
  // @@protoc_insertion_point(field_get:GCBackpackOper.resolveId)
  return resolveid_.Get(index);
}
inline void GCBackpackOper::set_resolveid(int index, ::google::protobuf::int32 value) {
  resolveid_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCBackpackOper.resolveId)
}
inline void GCBackpackOper::add_resolveid(::google::protobuf::int32 value) {
  resolveid_.Add(value);
  // @@protoc_insertion_point(field_add:GCBackpackOper.resolveId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCBackpackOper::resolveid() const {
  // @@protoc_insertion_point(field_list:GCBackpackOper.resolveId)
  return resolveid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCBackpackOper::mutable_resolveid() {
  // @@protoc_insertion_point(field_mutable_list:GCBackpackOper.resolveId)
  return &resolveid_;
}

// -------------------------------------------------------------------

// GCPutBackpack

// optional int32 operate = 1;
inline bool GCPutBackpack::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPutBackpack::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPutBackpack::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPutBackpack::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCPutBackpack::operate() const {
  // @@protoc_insertion_point(field_get:GCPutBackpack.operate)
  return operate_;
}
inline void GCPutBackpack::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCPutBackpack.operate)
}

// repeated .BackpackGrid items = 2;
inline int GCPutBackpack::items_size() const {
  return items_.size();
}
inline void GCPutBackpack::clear_items() {
  items_.Clear();
}
inline const ::BackpackGrid& GCPutBackpack::items(int index) const {
  // @@protoc_insertion_point(field_get:GCPutBackpack.items)
  return items_.Get(index);
}
inline ::BackpackGrid* GCPutBackpack::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:GCPutBackpack.items)
  return items_.Mutable(index);
}
inline ::BackpackGrid* GCPutBackpack::add_items() {
  // @@protoc_insertion_point(field_add:GCPutBackpack.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BackpackGrid >&
GCPutBackpack::items() const {
  // @@protoc_insertion_point(field_list:GCPutBackpack.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BackpackGrid >*
GCPutBackpack::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:GCPutBackpack.items)
  return &items_;
}

// optional int32 gridNum = 3;
inline bool GCPutBackpack::has_gridnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCPutBackpack::set_has_gridnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCPutBackpack::clear_has_gridnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCPutBackpack::clear_gridnum() {
  gridnum_ = 0;
  clear_has_gridnum();
}
inline ::google::protobuf::int32 GCPutBackpack::gridnum() const {
  // @@protoc_insertion_point(field_get:GCPutBackpack.gridNum)
  return gridnum_;
}
inline void GCPutBackpack::set_gridnum(::google::protobuf::int32 value) {
  set_has_gridnum();
  gridnum_ = value;
  // @@protoc_insertion_point(field_set:GCPutBackpack.gridNum)
}

// optional int32 gridMax = 4;
inline bool GCPutBackpack::has_gridmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCPutBackpack::set_has_gridmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCPutBackpack::clear_has_gridmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCPutBackpack::clear_gridmax() {
  gridmax_ = 0;
  clear_has_gridmax();
}
inline ::google::protobuf::int32 GCPutBackpack::gridmax() const {
  // @@protoc_insertion_point(field_get:GCPutBackpack.gridMax)
  return gridmax_;
}
inline void GCPutBackpack::set_gridmax(::google::protobuf::int32 value) {
  set_has_gridmax();
  gridmax_ = value;
  // @@protoc_insertion_point(field_set:GCPutBackpack.gridMax)
}

// -------------------------------------------------------------------

// GCPutStorage

// optional int32 operate = 1;
inline bool GCPutStorage::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPutStorage::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPutStorage::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPutStorage::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCPutStorage::operate() const {
  // @@protoc_insertion_point(field_get:GCPutStorage.operate)
  return operate_;
}
inline void GCPutStorage::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCPutStorage.operate)
}

// repeated .BackpackGrid items = 2;
inline int GCPutStorage::items_size() const {
  return items_.size();
}
inline void GCPutStorage::clear_items() {
  items_.Clear();
}
inline const ::BackpackGrid& GCPutStorage::items(int index) const {
  // @@protoc_insertion_point(field_get:GCPutStorage.items)
  return items_.Get(index);
}
inline ::BackpackGrid* GCPutStorage::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:GCPutStorage.items)
  return items_.Mutable(index);
}
inline ::BackpackGrid* GCPutStorage::add_items() {
  // @@protoc_insertion_point(field_add:GCPutStorage.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BackpackGrid >&
GCPutStorage::items() const {
  // @@protoc_insertion_point(field_list:GCPutStorage.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BackpackGrid >*
GCPutStorage::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:GCPutStorage.items)
  return &items_;
}

// optional int32 gridNum = 3;
inline bool GCPutStorage::has_gridnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCPutStorage::set_has_gridnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCPutStorage::clear_has_gridnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCPutStorage::clear_gridnum() {
  gridnum_ = 0;
  clear_has_gridnum();
}
inline ::google::protobuf::int32 GCPutStorage::gridnum() const {
  // @@protoc_insertion_point(field_get:GCPutStorage.gridNum)
  return gridnum_;
}
inline void GCPutStorage::set_gridnum(::google::protobuf::int32 value) {
  set_has_gridnum();
  gridnum_ = value;
  // @@protoc_insertion_point(field_set:GCPutStorage.gridNum)
}

// optional int32 gridMax = 4;
inline bool GCPutStorage::has_gridmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCPutStorage::set_has_gridmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCPutStorage::clear_has_gridmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCPutStorage::clear_gridmax() {
  gridmax_ = 0;
  clear_has_gridmax();
}
inline ::google::protobuf::int32 GCPutStorage::gridmax() const {
  // @@protoc_insertion_point(field_get:GCPutStorage.gridMax)
  return gridmax_;
}
inline void GCPutStorage::set_gridmax(::google::protobuf::int32 value) {
  set_has_gridmax();
  gridmax_ = value;
  // @@protoc_insertion_point(field_set:GCPutStorage.gridMax)
}

// -------------------------------------------------------------------

// CGBackpackSpecial

// optional int64 playerId = 1;
inline bool CGBackpackSpecial::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBackpackSpecial::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBackpackSpecial::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBackpackSpecial::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGBackpackSpecial::playerid() const {
  // @@protoc_insertion_point(field_get:CGBackpackSpecial.playerId)
  return playerid_;
}
inline void CGBackpackSpecial::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGBackpackSpecial.playerId)
}

// optional int32 operate = 2;
inline bool CGBackpackSpecial::has_operate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBackpackSpecial::set_has_operate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBackpackSpecial::clear_has_operate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBackpackSpecial::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGBackpackSpecial::operate() const {
  // @@protoc_insertion_point(field_get:CGBackpackSpecial.operate)
  return operate_;
}
inline void CGBackpackSpecial::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGBackpackSpecial.operate)
}

// repeated .BackpackItem backpackItem = 3;
inline int CGBackpackSpecial::backpackitem_size() const {
  return backpackitem_.size();
}
inline void CGBackpackSpecial::clear_backpackitem() {
  backpackitem_.Clear();
}
inline const ::BackpackItem& CGBackpackSpecial::backpackitem(int index) const {
  // @@protoc_insertion_point(field_get:CGBackpackSpecial.backpackItem)
  return backpackitem_.Get(index);
}
inline ::BackpackItem* CGBackpackSpecial::mutable_backpackitem(int index) {
  // @@protoc_insertion_point(field_mutable:CGBackpackSpecial.backpackItem)
  return backpackitem_.Mutable(index);
}
inline ::BackpackItem* CGBackpackSpecial::add_backpackitem() {
  // @@protoc_insertion_point(field_add:CGBackpackSpecial.backpackItem)
  return backpackitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BackpackItem >&
CGBackpackSpecial::backpackitem() const {
  // @@protoc_insertion_point(field_list:CGBackpackSpecial.backpackItem)
  return backpackitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::BackpackItem >*
CGBackpackSpecial::mutable_backpackitem() {
  // @@protoc_insertion_point(field_mutable_list:CGBackpackSpecial.backpackItem)
  return &backpackitem_;
}

// -------------------------------------------------------------------

// TreasureMapDataInfo

// optional int64 pid = 1;
inline bool TreasureMapDataInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureMapDataInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureMapDataInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureMapDataInfo::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 TreasureMapDataInfo::pid() const {
  // @@protoc_insertion_point(field_get:TreasureMapDataInfo.pid)
  return pid_;
}
inline void TreasureMapDataInfo::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:TreasureMapDataInfo.pid)
}

// optional int32 locationId = 2;
inline bool TreasureMapDataInfo::has_locationid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureMapDataInfo::set_has_locationid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureMapDataInfo::clear_has_locationid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureMapDataInfo::clear_locationid() {
  locationid_ = 0;
  clear_has_locationid();
}
inline ::google::protobuf::int32 TreasureMapDataInfo::locationid() const {
  // @@protoc_insertion_point(field_get:TreasureMapDataInfo.locationId)
  return locationid_;
}
inline void TreasureMapDataInfo::set_locationid(::google::protobuf::int32 value) {
  set_has_locationid();
  locationid_ = value;
  // @@protoc_insertion_point(field_set:TreasureMapDataInfo.locationId)
}

// optional int32 eventType = 3;
inline bool TreasureMapDataInfo::has_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureMapDataInfo::set_has_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureMapDataInfo::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureMapDataInfo::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::google::protobuf::int32 TreasureMapDataInfo::eventtype() const {
  // @@protoc_insertion_point(field_get:TreasureMapDataInfo.eventType)
  return eventtype_;
}
inline void TreasureMapDataInfo::set_eventtype(::google::protobuf::int32 value) {
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:TreasureMapDataInfo.eventType)
}

// optional int32 eventParam = 4;
inline bool TreasureMapDataInfo::has_eventparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureMapDataInfo::set_has_eventparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureMapDataInfo::clear_has_eventparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureMapDataInfo::clear_eventparam() {
  eventparam_ = 0;
  clear_has_eventparam();
}
inline ::google::protobuf::int32 TreasureMapDataInfo::eventparam() const {
  // @@protoc_insertion_point(field_get:TreasureMapDataInfo.eventParam)
  return eventparam_;
}
inline void TreasureMapDataInfo::set_eventparam(::google::protobuf::int32 value) {
  set_has_eventparam();
  eventparam_ = value;
  // @@protoc_insertion_point(field_set:TreasureMapDataInfo.eventParam)
}

// -------------------------------------------------------------------

// GCBackTreasureMap

// optional int32 result = 1;
inline bool GCBackTreasureMap::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBackTreasureMap::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBackTreasureMap::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBackTreasureMap::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCBackTreasureMap::result() const {
  // @@protoc_insertion_point(field_get:GCBackTreasureMap.result)
  return result_;
}
inline void GCBackTreasureMap::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCBackTreasureMap.result)
}

// optional int32 operate = 2;
inline bool GCBackTreasureMap::has_operate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCBackTreasureMap::set_has_operate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCBackTreasureMap::clear_has_operate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCBackTreasureMap::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCBackTreasureMap::operate() const {
  // @@protoc_insertion_point(field_get:GCBackTreasureMap.operate)
  return operate_;
}
inline void GCBackTreasureMap::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCBackTreasureMap.operate)
}

// -------------------------------------------------------------------

// TreasureMap

// optional int64 pid = 1;
inline bool TreasureMap::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureMap::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureMap::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureMap::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 TreasureMap::pid() const {
  // @@protoc_insertion_point(field_get:TreasureMap.pid)
  return pid_;
}
inline void TreasureMap::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:TreasureMap.pid)
}

// optional int32 mapID = 2;
inline bool TreasureMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureMap::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 TreasureMap::mapid() const {
  // @@protoc_insertion_point(field_get:TreasureMap.mapID)
  return mapid_;
}
inline void TreasureMap::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:TreasureMap.mapID)
}

// optional int32 funcID = 3;
inline bool TreasureMap::has_funcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureMap::set_has_funcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureMap::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureMap::clear_funcid() {
  funcid_ = 0;
  clear_has_funcid();
}
inline ::google::protobuf::int32 TreasureMap::funcid() const {
  // @@protoc_insertion_point(field_get:TreasureMap.funcID)
  return funcid_;
}
inline void TreasureMap::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
  // @@protoc_insertion_point(field_set:TreasureMap.funcID)
}

// -------------------------------------------------------------------

// CGBackUseMap

// optional int32 gridID = 1;
inline bool CGBackUseMap::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBackUseMap::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBackUseMap::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBackUseMap::clear_gridid() {
  gridid_ = 0;
  clear_has_gridid();
}
inline ::google::protobuf::int32 CGBackUseMap::gridid() const {
  // @@protoc_insertion_point(field_get:CGBackUseMap.gridID)
  return gridid_;
}
inline void CGBackUseMap::set_gridid(::google::protobuf::int32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:CGBackUseMap.gridID)
}

// optional int64 pid = 2;
inline bool CGBackUseMap::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBackUseMap::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBackUseMap::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBackUseMap::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CGBackUseMap::pid() const {
  // @@protoc_insertion_point(field_get:CGBackUseMap.pid)
  return pid_;
}
inline void CGBackUseMap::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:CGBackUseMap.pid)
}

// -------------------------------------------------------------------

// GCBackPuseUseMap

// optional int32 result = 1;
inline bool GCBackPuseUseMap::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBackPuseUseMap::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBackPuseUseMap::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBackPuseUseMap::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCBackPuseUseMap::result() const {
  // @@protoc_insertion_point(field_get:GCBackPuseUseMap.result)
  return result_;
}
inline void GCBackPuseUseMap::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCBackPuseUseMap.result)
}

// repeated .TreasureMap treasureMap = 2;
inline int GCBackPuseUseMap::treasuremap_size() const {
  return treasuremap_.size();
}
inline void GCBackPuseUseMap::clear_treasuremap() {
  treasuremap_.Clear();
}
inline const ::TreasureMap& GCBackPuseUseMap::treasuremap(int index) const {
  // @@protoc_insertion_point(field_get:GCBackPuseUseMap.treasureMap)
  return treasuremap_.Get(index);
}
inline ::TreasureMap* GCBackPuseUseMap::mutable_treasuremap(int index) {
  // @@protoc_insertion_point(field_mutable:GCBackPuseUseMap.treasureMap)
  return treasuremap_.Mutable(index);
}
inline ::TreasureMap* GCBackPuseUseMap::add_treasuremap() {
  // @@protoc_insertion_point(field_add:GCBackPuseUseMap.treasureMap)
  return treasuremap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TreasureMap >&
GCBackPuseUseMap::treasuremap() const {
  // @@protoc_insertion_point(field_list:GCBackPuseUseMap.treasureMap)
  return treasuremap_;
}
inline ::google::protobuf::RepeatedPtrField< ::TreasureMap >*
GCBackPuseUseMap::mutable_treasuremap() {
  // @@protoc_insertion_point(field_mutable_list:GCBackPuseUseMap.treasureMap)
  return &treasuremap_;
}

// optional int32 type = 3;
inline bool GCBackPuseUseMap::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCBackPuseUseMap::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCBackPuseUseMap::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCBackPuseUseMap::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCBackPuseUseMap::type() const {
  // @@protoc_insertion_point(field_get:GCBackPuseUseMap.type)
  return type_;
}
inline void GCBackPuseUseMap::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCBackPuseUseMap.type)
}

// optional int64 monsterID = 4;
inline bool GCBackPuseUseMap::has_monsterid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCBackPuseUseMap::set_has_monsterid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCBackPuseUseMap::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCBackPuseUseMap::clear_monsterid() {
  monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_monsterid();
}
inline ::google::protobuf::int64 GCBackPuseUseMap::monsterid() const {
  // @@protoc_insertion_point(field_get:GCBackPuseUseMap.monsterID)
  return monsterid_;
}
inline void GCBackPuseUseMap::set_monsterid(::google::protobuf::int64 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:GCBackPuseUseMap.monsterID)
}

// -------------------------------------------------------------------

// GCSendTransmitToMe

// optional int64 playerID = 1;
inline bool GCSendTransmitToMe::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSendTransmitToMe::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSendTransmitToMe::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSendTransmitToMe::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCSendTransmitToMe::playerid() const {
  // @@protoc_insertion_point(field_get:GCSendTransmitToMe.playerID)
  return playerid_;
}
inline void GCSendTransmitToMe::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCSendTransmitToMe.playerID)
}

// optional int32 limitTime = 2;
inline bool GCSendTransmitToMe::has_limittime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSendTransmitToMe::set_has_limittime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSendTransmitToMe::clear_has_limittime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSendTransmitToMe::clear_limittime() {
  limittime_ = 0;
  clear_has_limittime();
}
inline ::google::protobuf::int32 GCSendTransmitToMe::limittime() const {
  // @@protoc_insertion_point(field_get:GCSendTransmitToMe.limitTime)
  return limittime_;
}
inline void GCSendTransmitToMe::set_limittime(::google::protobuf::int32 value) {
  set_has_limittime();
  limittime_ = value;
  // @@protoc_insertion_point(field_set:GCSendTransmitToMe.limitTime)
}

// optional string playerName = 3;
inline bool GCSendTransmitToMe::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCSendTransmitToMe::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCSendTransmitToMe::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCSendTransmitToMe::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GCSendTransmitToMe::playername() const {
  // @@protoc_insertion_point(field_get:GCSendTransmitToMe.playerName)
  return *playername_;
}
inline void GCSendTransmitToMe::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:GCSendTransmitToMe.playerName)
}
inline void GCSendTransmitToMe::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCSendTransmitToMe.playerName)
}
inline void GCSendTransmitToMe::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCSendTransmitToMe.playerName)
}
inline ::std::string* GCSendTransmitToMe::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCSendTransmitToMe.playerName)
  return playername_;
}
inline ::std::string* GCSendTransmitToMe::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCSendTransmitToMe::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCSendTransmitToMe.playerName)
}

// -------------------------------------------------------------------

// CGTransmitToMember

// optional int64 playerID = 1;
inline bool CGTransmitToMember::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGTransmitToMember::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGTransmitToMember::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGTransmitToMember::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGTransmitToMember::playerid() const {
  // @@protoc_insertion_point(field_get:CGTransmitToMember.playerID)
  return playerid_;
}
inline void CGTransmitToMember::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGTransmitToMember.playerID)
}

// -------------------------------------------------------------------

// GCOpenChatHornUI

// optional int32 errorCode = 1;
inline bool GCOpenChatHornUI::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCOpenChatHornUI::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCOpenChatHornUI::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCOpenChatHornUI::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 GCOpenChatHornUI::errorcode() const {
  // @@protoc_insertion_point(field_get:GCOpenChatHornUI.errorCode)
  return errorcode_;
}
inline void GCOpenChatHornUI::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:GCOpenChatHornUI.errorCode)
}

// -------------------------------------------------------------------

// GCSendOpenBoxEnd

// repeated .BackpackItem rewards = 1;
inline int GCSendOpenBoxEnd::rewards_size() const {
  return rewards_.size();
}
inline void GCSendOpenBoxEnd::clear_rewards() {
  rewards_.Clear();
}
inline const ::BackpackItem& GCSendOpenBoxEnd::rewards(int index) const {
  // @@protoc_insertion_point(field_get:GCSendOpenBoxEnd.rewards)
  return rewards_.Get(index);
}
inline ::BackpackItem* GCSendOpenBoxEnd::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCSendOpenBoxEnd.rewards)
  return rewards_.Mutable(index);
}
inline ::BackpackItem* GCSendOpenBoxEnd::add_rewards() {
  // @@protoc_insertion_point(field_add:GCSendOpenBoxEnd.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BackpackItem >&
GCSendOpenBoxEnd::rewards() const {
  // @@protoc_insertion_point(field_list:GCSendOpenBoxEnd.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::BackpackItem >*
GCSendOpenBoxEnd::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:GCSendOpenBoxEnd.rewards)
  return &rewards_;
}

// optional int32 errorCode = 2;
inline bool GCSendOpenBoxEnd::has_errorcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSendOpenBoxEnd::set_has_errorcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSendOpenBoxEnd::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSendOpenBoxEnd::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 GCSendOpenBoxEnd::errorcode() const {
  // @@protoc_insertion_point(field_get:GCSendOpenBoxEnd.errorCode)
  return errorcode_;
}
inline void GCSendOpenBoxEnd::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:GCSendOpenBoxEnd.errorCode)
}

// -------------------------------------------------------------------

// GCSendMakeAct

// optional int32 actID = 1;
inline bool GCSendMakeAct::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSendMakeAct::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSendMakeAct::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSendMakeAct::clear_actid() {
  actid_ = 0;
  clear_has_actid();
}
inline ::google::protobuf::int32 GCSendMakeAct::actid() const {
  // @@protoc_insertion_point(field_get:GCSendMakeAct.actID)
  return actid_;
}
inline void GCSendMakeAct::set_actid(::google::protobuf::int32 value) {
  set_has_actid();
  actid_ = value;
  // @@protoc_insertion_point(field_set:GCSendMakeAct.actID)
}

// optional int64 playerID = 2;
inline bool GCSendMakeAct::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSendMakeAct::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSendMakeAct::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSendMakeAct::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCSendMakeAct::playerid() const {
  // @@protoc_insertion_point(field_get:GCSendMakeAct.playerID)
  return playerid_;
}
inline void GCSendMakeAct::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCSendMakeAct.playerID)
}

// -------------------------------------------------------------------

// ItemLimit

// optional int32 type = 1;
inline bool ItemLimit::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemLimit::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemLimit::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemLimit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ItemLimit::type() const {
  // @@protoc_insertion_point(field_get:ItemLimit.type)
  return type_;
}
inline void ItemLimit::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ItemLimit.type)
}

// optional int32 num = 2;
inline bool ItemLimit::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemLimit::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemLimit::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemLimit::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ItemLimit::num() const {
  // @@protoc_insertion_point(field_get:ItemLimit.num)
  return num_;
}
inline void ItemLimit::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ItemLimit.num)
}

// -------------------------------------------------------------------

// GCItemLimitBack

// repeated .ItemLimit itemLimits = 1;
inline int GCItemLimitBack::itemlimits_size() const {
  return itemlimits_.size();
}
inline void GCItemLimitBack::clear_itemlimits() {
  itemlimits_.Clear();
}
inline const ::ItemLimit& GCItemLimitBack::itemlimits(int index) const {
  // @@protoc_insertion_point(field_get:GCItemLimitBack.itemLimits)
  return itemlimits_.Get(index);
}
inline ::ItemLimit* GCItemLimitBack::mutable_itemlimits(int index) {
  // @@protoc_insertion_point(field_mutable:GCItemLimitBack.itemLimits)
  return itemlimits_.Mutable(index);
}
inline ::ItemLimit* GCItemLimitBack::add_itemlimits() {
  // @@protoc_insertion_point(field_add:GCItemLimitBack.itemLimits)
  return itemlimits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemLimit >&
GCItemLimitBack::itemlimits() const {
  // @@protoc_insertion_point(field_list:GCItemLimitBack.itemLimits)
  return itemlimits_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemLimit >*
GCItemLimitBack::mutable_itemlimits() {
  // @@protoc_insertion_point(field_mutable_list:GCItemLimitBack.itemLimits)
  return &itemlimits_;
}

// -------------------------------------------------------------------

// NineMysteryItem

// optional int64 pid = 1;
inline bool NineMysteryItem::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NineMysteryItem::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NineMysteryItem::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NineMysteryItem::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 NineMysteryItem::pid() const {
  // @@protoc_insertion_point(field_get:NineMysteryItem.pid)
  return pid_;
}
inline void NineMysteryItem::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:NineMysteryItem.pid)
}

// optional int32 mapID = 2;
inline bool NineMysteryItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NineMysteryItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NineMysteryItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NineMysteryItem::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 NineMysteryItem::mapid() const {
  // @@protoc_insertion_point(field_get:NineMysteryItem.mapID)
  return mapid_;
}
inline void NineMysteryItem::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:NineMysteryItem.mapID)
}

// optional int32 eventType = 3;
inline bool NineMysteryItem::has_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NineMysteryItem::set_has_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NineMysteryItem::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NineMysteryItem::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::google::protobuf::int32 NineMysteryItem::eventtype() const {
  // @@protoc_insertion_point(field_get:NineMysteryItem.eventType)
  return eventtype_;
}
inline void NineMysteryItem::set_eventtype(::google::protobuf::int32 value) {
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NineMysteryItem.eventType)
}

// optional string param = 4;
inline bool NineMysteryItem::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NineMysteryItem::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NineMysteryItem::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NineMysteryItem::clear_param() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_->clear();
  }
  clear_has_param();
}
inline const ::std::string& NineMysteryItem::param() const {
  // @@protoc_insertion_point(field_get:NineMysteryItem.param)
  return *param_;
}
inline void NineMysteryItem::set_param(const ::std::string& value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set:NineMysteryItem.param)
}
inline void NineMysteryItem::set_param(const char* value) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(value);
  // @@protoc_insertion_point(field_set_char:NineMysteryItem.param)
}
inline void NineMysteryItem::set_param(const char* value, size_t size) {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  param_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NineMysteryItem.param)
}
inline ::std::string* NineMysteryItem::mutable_param() {
  set_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NineMysteryItem.param)
  return param_;
}
inline ::std::string* NineMysteryItem::release_param() {
  clear_has_param();
  if (param_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_;
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NineMysteryItem::set_allocated_param(::std::string* param) {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (param) {
    set_has_param();
    param_ = param;
  } else {
    clear_has_param();
    param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NineMysteryItem.param)
}

// -------------------------------------------------------------------

// CGBackUseNineMystery

// optional int32 gridID = 1;
inline bool CGBackUseNineMystery::has_gridid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBackUseNineMystery::set_has_gridid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBackUseNineMystery::clear_has_gridid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBackUseNineMystery::clear_gridid() {
  gridid_ = 0;
  clear_has_gridid();
}
inline ::google::protobuf::int32 CGBackUseNineMystery::gridid() const {
  // @@protoc_insertion_point(field_get:CGBackUseNineMystery.gridID)
  return gridid_;
}
inline void CGBackUseNineMystery::set_gridid(::google::protobuf::int32 value) {
  set_has_gridid();
  gridid_ = value;
  // @@protoc_insertion_point(field_set:CGBackUseNineMystery.gridID)
}

// optional int64 pid = 2;
inline bool CGBackUseNineMystery::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBackUseNineMystery::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBackUseNineMystery::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBackUseNineMystery::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 CGBackUseNineMystery::pid() const {
  // @@protoc_insertion_point(field_get:CGBackUseNineMystery.pid)
  return pid_;
}
inline void CGBackUseNineMystery::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:CGBackUseNineMystery.pid)
}

// -------------------------------------------------------------------

// CGUseNineMysteryIntoDungeon

// optional string dungeon = 1;
inline bool CGUseNineMysteryIntoDungeon::has_dungeon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGUseNineMysteryIntoDungeon::set_has_dungeon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGUseNineMysteryIntoDungeon::clear_has_dungeon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGUseNineMysteryIntoDungeon::clear_dungeon() {
  if (dungeon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dungeon_->clear();
  }
  clear_has_dungeon();
}
inline const ::std::string& CGUseNineMysteryIntoDungeon::dungeon() const {
  // @@protoc_insertion_point(field_get:CGUseNineMysteryIntoDungeon.dungeon)
  return *dungeon_;
}
inline void CGUseNineMysteryIntoDungeon::set_dungeon(const ::std::string& value) {
  set_has_dungeon();
  if (dungeon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dungeon_ = new ::std::string;
  }
  dungeon_->assign(value);
  // @@protoc_insertion_point(field_set:CGUseNineMysteryIntoDungeon.dungeon)
}
inline void CGUseNineMysteryIntoDungeon::set_dungeon(const char* value) {
  set_has_dungeon();
  if (dungeon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dungeon_ = new ::std::string;
  }
  dungeon_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGUseNineMysteryIntoDungeon.dungeon)
}
inline void CGUseNineMysteryIntoDungeon::set_dungeon(const char* value, size_t size) {
  set_has_dungeon();
  if (dungeon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dungeon_ = new ::std::string;
  }
  dungeon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGUseNineMysteryIntoDungeon.dungeon)
}
inline ::std::string* CGUseNineMysteryIntoDungeon::mutable_dungeon() {
  set_has_dungeon();
  if (dungeon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dungeon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGUseNineMysteryIntoDungeon.dungeon)
  return dungeon_;
}
inline ::std::string* CGUseNineMysteryIntoDungeon::release_dungeon() {
  clear_has_dungeon();
  if (dungeon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dungeon_;
    dungeon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGUseNineMysteryIntoDungeon::set_allocated_dungeon(::std::string* dungeon) {
  if (dungeon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dungeon_;
  }
  if (dungeon) {
    set_has_dungeon();
    dungeon_ = dungeon;
  } else {
    clear_has_dungeon();
    dungeon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGUseNineMysteryIntoDungeon.dungeon)
}

// -------------------------------------------------------------------

// GCBackNineMystery

// optional int32 result = 1;
inline bool GCBackNineMystery::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBackNineMystery::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBackNineMystery::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBackNineMystery::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCBackNineMystery::result() const {
  // @@protoc_insertion_point(field_get:GCBackNineMystery.result)
  return result_;
}
inline void GCBackNineMystery::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCBackNineMystery.result)
}

// repeated .NineMysteryItem nineMysteryItem = 2;
inline int GCBackNineMystery::ninemysteryitem_size() const {
  return ninemysteryitem_.size();
}
inline void GCBackNineMystery::clear_ninemysteryitem() {
  ninemysteryitem_.Clear();
}
inline const ::NineMysteryItem& GCBackNineMystery::ninemysteryitem(int index) const {
  // @@protoc_insertion_point(field_get:GCBackNineMystery.nineMysteryItem)
  return ninemysteryitem_.Get(index);
}
inline ::NineMysteryItem* GCBackNineMystery::mutable_ninemysteryitem(int index) {
  // @@protoc_insertion_point(field_mutable:GCBackNineMystery.nineMysteryItem)
  return ninemysteryitem_.Mutable(index);
}
inline ::NineMysteryItem* GCBackNineMystery::add_ninemysteryitem() {
  // @@protoc_insertion_point(field_add:GCBackNineMystery.nineMysteryItem)
  return ninemysteryitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NineMysteryItem >&
GCBackNineMystery::ninemysteryitem() const {
  // @@protoc_insertion_point(field_list:GCBackNineMystery.nineMysteryItem)
  return ninemysteryitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::NineMysteryItem >*
GCBackNineMystery::mutable_ninemysteryitem() {
  // @@protoc_insertion_point(field_mutable_list:GCBackNineMystery.nineMysteryItem)
  return &ninemysteryitem_;
}

// optional int64 pid = 3;
inline bool GCBackNineMystery::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCBackNineMystery::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCBackNineMystery::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCBackNineMystery::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::int64 GCBackNineMystery::pid() const {
  // @@protoc_insertion_point(field_get:GCBackNineMystery.pid)
  return pid_;
}
inline void GCBackNineMystery::set_pid(::google::protobuf::int64 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:GCBackNineMystery.pid)
}

// optional int32 operate = 4;
inline bool GCBackNineMystery::has_operate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCBackNineMystery::set_has_operate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCBackNineMystery::clear_has_operate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCBackNineMystery::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCBackNineMystery::operate() const {
  // @@protoc_insertion_point(field_get:GCBackNineMystery.operate)
  return operate_;
}
inline void GCBackNineMystery::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCBackNineMystery.operate)
}

// optional int64 monsterID = 5;
inline bool GCBackNineMystery::has_monsterid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCBackNineMystery::set_has_monsterid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCBackNineMystery::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCBackNineMystery::clear_monsterid() {
  monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_monsterid();
}
inline ::google::protobuf::int64 GCBackNineMystery::monsterid() const {
  // @@protoc_insertion_point(field_get:GCBackNineMystery.monsterID)
  return monsterid_;
}
inline void GCBackNineMystery::set_monsterid(::google::protobuf::int64 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:GCBackNineMystery.monsterID)
}

// -------------------------------------------------------------------

// CGComposeItems

// optional int32 id = 1;
inline bool CGComposeItems::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGComposeItems::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGComposeItems::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGComposeItems::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGComposeItems::id() const {
  // @@protoc_insertion_point(field_get:CGComposeItems.id)
  return id_;
}
inline void CGComposeItems::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGComposeItems.id)
}

// optional int32 targetNum = 2;
inline bool CGComposeItems::has_targetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGComposeItems::set_has_targetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGComposeItems::clear_has_targetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGComposeItems::clear_targetnum() {
  targetnum_ = 0;
  clear_has_targetnum();
}
inline ::google::protobuf::int32 CGComposeItems::targetnum() const {
  // @@protoc_insertion_point(field_get:CGComposeItems.targetNum)
  return targetnum_;
}
inline void CGComposeItems::set_targetnum(::google::protobuf::int32 value) {
  set_has_targetnum();
  targetnum_ = value;
  // @@protoc_insertion_point(field_set:CGComposeItems.targetNum)
}

// optional int32 selectBound = 3;
inline bool CGComposeItems::has_selectbound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGComposeItems::set_has_selectbound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGComposeItems::clear_has_selectbound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGComposeItems::clear_selectbound() {
  selectbound_ = 0;
  clear_has_selectbound();
}
inline ::google::protobuf::int32 CGComposeItems::selectbound() const {
  // @@protoc_insertion_point(field_get:CGComposeItems.selectBound)
  return selectbound_;
}
inline void CGComposeItems::set_selectbound(::google::protobuf::int32 value) {
  set_has_selectbound();
  selectbound_ = value;
  // @@protoc_insertion_point(field_set:CGComposeItems.selectBound)
}

// -------------------------------------------------------------------

// GCComposeItems

// optional int32 id = 1;
inline bool GCComposeItems::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCComposeItems::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCComposeItems::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCComposeItems::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GCComposeItems::id() const {
  // @@protoc_insertion_point(field_get:GCComposeItems.id)
  return id_;
}
inline void GCComposeItems::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:GCComposeItems.id)
}

// optional int32 targetNum = 2;
inline bool GCComposeItems::has_targetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCComposeItems::set_has_targetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCComposeItems::clear_has_targetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCComposeItems::clear_targetnum() {
  targetnum_ = 0;
  clear_has_targetnum();
}
inline ::google::protobuf::int32 GCComposeItems::targetnum() const {
  // @@protoc_insertion_point(field_get:GCComposeItems.targetNum)
  return targetnum_;
}
inline void GCComposeItems::set_targetnum(::google::protobuf::int32 value) {
  set_has_targetnum();
  targetnum_ = value;
  // @@protoc_insertion_point(field_set:GCComposeItems.targetNum)
}

// optional int32 selectBound = 3;
inline bool GCComposeItems::has_selectbound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCComposeItems::set_has_selectbound() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCComposeItems::clear_has_selectbound() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCComposeItems::clear_selectbound() {
  selectbound_ = 0;
  clear_has_selectbound();
}
inline ::google::protobuf::int32 GCComposeItems::selectbound() const {
  // @@protoc_insertion_point(field_get:GCComposeItems.selectBound)
  return selectbound_;
}
inline void GCComposeItems::set_selectbound(::google::protobuf::int32 value) {
  set_has_selectbound();
  selectbound_ = value;
  // @@protoc_insertion_point(field_set:GCComposeItems.selectBound)
}

// optional int32 flag = 4;
inline bool GCComposeItems::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCComposeItems::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCComposeItems::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCComposeItems::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCComposeItems::flag() const {
  // @@protoc_insertion_point(field_get:GCComposeItems.flag)
  return flag_;
}
inline void GCComposeItems::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCComposeItems.flag)
}

// -------------------------------------------------------------------

// CGSetAutoResolve

// optional int32 resolveId = 1;
inline bool CGSetAutoResolve::has_resolveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGSetAutoResolve::set_has_resolveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGSetAutoResolve::clear_has_resolveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGSetAutoResolve::clear_resolveid() {
  resolveid_ = 0;
  clear_has_resolveid();
}
inline ::google::protobuf::int32 CGSetAutoResolve::resolveid() const {
  // @@protoc_insertion_point(field_get:CGSetAutoResolve.resolveId)
  return resolveid_;
}
inline void CGSetAutoResolve::set_resolveid(::google::protobuf::int32 value) {
  set_has_resolveid();
  resolveid_ = value;
  // @@protoc_insertion_point(field_set:CGSetAutoResolve.resolveId)
}

// -------------------------------------------------------------------

// GCSetAutoResolve

// optional int32 resolveId = 1;
inline bool GCSetAutoResolve::has_resolveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSetAutoResolve::set_has_resolveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSetAutoResolve::clear_has_resolveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSetAutoResolve::clear_resolveid() {
  resolveid_ = 0;
  clear_has_resolveid();
}
inline ::google::protobuf::int32 GCSetAutoResolve::resolveid() const {
  // @@protoc_insertion_point(field_get:GCSetAutoResolve.resolveId)
  return resolveid_;
}
inline void GCSetAutoResolve::set_resolveid(::google::protobuf::int32 value) {
  set_has_resolveid();
  resolveid_ = value;
  // @@protoc_insertion_point(field_set:GCSetAutoResolve.resolveId)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BackpackMessage_2eproto__INCLUDED
