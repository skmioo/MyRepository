// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BadValleyMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BadValleyMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGBadvellyOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBadvellyOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBadvellyOperateBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBadvellyOperateBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BadValleyMessage_2eproto() {
  protobuf_AddDesc_BadValleyMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BadValleyMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGBadvellyOperate_descriptor_ = file->message_type(0);
  static const int CGBadvellyOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBadvellyOperate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBadvellyOperate, missionid_),
  };
  CGBadvellyOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBadvellyOperate_descriptor_,
      CGBadvellyOperate::default_instance_,
      CGBadvellyOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBadvellyOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBadvellyOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBadvellyOperate));
  GCBadvellyOperateBack_descriptor_ = file->message_type(1);
  static const int GCBadvellyOperateBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, scenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, langueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, missionid_),
  };
  GCBadvellyOperateBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBadvellyOperateBack_descriptor_,
      GCBadvellyOperateBack::default_instance_,
      GCBadvellyOperateBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBadvellyOperateBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBadvellyOperateBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BadValleyMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBadvellyOperate_descriptor_, &CGBadvellyOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBadvellyOperateBack_descriptor_, &GCBadvellyOperateBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BadValleyMessage_2eproto() {
  delete CGBadvellyOperate::default_instance_;
  delete CGBadvellyOperate_reflection_;
  delete GCBadvellyOperateBack::default_instance_;
  delete GCBadvellyOperateBack_reflection_;
}

void protobuf_AddDesc_BadValleyMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BadValleyMessage.proto\032\022InnerMessage.p"
    "roto\"4\n\021CGBadvellyOperate\022\014\n\004type\030\001 \001(\005\022"
    "\021\n\tmissionId\030\002 \001(\005\"\215\001\n\025GCBadvellyOperate"
    "Back\022\014\n\004type\030\001 \001(\005\022\020\n\010scenceId\030\002 \001(\005\022\037\n\t"
    "targetPos\030\003 \001(\0132\014.Vector3Info\022\020\n\010langueI"
    "d\030\004 \001(\005\022\016\n\006result\030\005 \001(\005\022\021\n\tmissionId\030\006 \001"
    "(\005B\031\n\027com.mile.common.message", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BadValleyMessage.proto", &protobuf_RegisterTypes);
  CGBadvellyOperate::default_instance_ = new CGBadvellyOperate();
  GCBadvellyOperateBack::default_instance_ = new GCBadvellyOperateBack();
  CGBadvellyOperate::default_instance_->InitAsDefaultInstance();
  GCBadvellyOperateBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BadValleyMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BadValleyMessage_2eproto {
  StaticDescriptorInitializer_BadValleyMessage_2eproto() {
    protobuf_AddDesc_BadValleyMessage_2eproto();
  }
} static_descriptor_initializer_BadValleyMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGBadvellyOperate::kTypeFieldNumber;
const int CGBadvellyOperate::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CGBadvellyOperate::CGBadvellyOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBadvellyOperate)
}

void CGBadvellyOperate::InitAsDefaultInstance() {
}

CGBadvellyOperate::CGBadvellyOperate(const CGBadvellyOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBadvellyOperate)
}

void CGBadvellyOperate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBadvellyOperate::~CGBadvellyOperate() {
  // @@protoc_insertion_point(destructor:CGBadvellyOperate)
  SharedDtor();
}

void CGBadvellyOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBadvellyOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBadvellyOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBadvellyOperate_descriptor_;
}

const CGBadvellyOperate& CGBadvellyOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BadValleyMessage_2eproto();
  return *default_instance_;
}

CGBadvellyOperate* CGBadvellyOperate::default_instance_ = NULL;

CGBadvellyOperate* CGBadvellyOperate::New() const {
  return new CGBadvellyOperate;
}

void CGBadvellyOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBadvellyOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, missionid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBadvellyOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBadvellyOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_missionId;
        break;
      }

      // optional int32 missionId = 2;
      case 2: {
        if (tag == 16) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBadvellyOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBadvellyOperate)
  return false;
#undef DO_
}

void CGBadvellyOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBadvellyOperate)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 missionId = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBadvellyOperate)
}

::google::protobuf::uint8* CGBadvellyOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBadvellyOperate)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 missionId = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBadvellyOperate)
  return target;
}

int CGBadvellyOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 missionId = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBadvellyOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBadvellyOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBadvellyOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBadvellyOperate::MergeFrom(const CGBadvellyOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBadvellyOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBadvellyOperate::CopyFrom(const CGBadvellyOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBadvellyOperate::IsInitialized() const {

  return true;
}

void CGBadvellyOperate::Swap(CGBadvellyOperate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBadvellyOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBadvellyOperate_descriptor_;
  metadata.reflection = CGBadvellyOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBadvellyOperateBack::kTypeFieldNumber;
const int GCBadvellyOperateBack::kScenceIdFieldNumber;
const int GCBadvellyOperateBack::kTargetPosFieldNumber;
const int GCBadvellyOperateBack::kLangueIdFieldNumber;
const int GCBadvellyOperateBack::kResultFieldNumber;
const int GCBadvellyOperateBack::kMissionIdFieldNumber;
#endif  // !_MSC_VER

GCBadvellyOperateBack::GCBadvellyOperateBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBadvellyOperateBack)
}

void GCBadvellyOperateBack::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCBadvellyOperateBack::GCBadvellyOperateBack(const GCBadvellyOperateBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBadvellyOperateBack)
}

void GCBadvellyOperateBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  scenceid_ = 0;
  targetpos_ = NULL;
  langueid_ = 0;
  result_ = 0;
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBadvellyOperateBack::~GCBadvellyOperateBack() {
  // @@protoc_insertion_point(destructor:GCBadvellyOperateBack)
  SharedDtor();
}

void GCBadvellyOperateBack::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void GCBadvellyOperateBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBadvellyOperateBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBadvellyOperateBack_descriptor_;
}

const GCBadvellyOperateBack& GCBadvellyOperateBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BadValleyMessage_2eproto();
  return *default_instance_;
}

GCBadvellyOperateBack* GCBadvellyOperateBack::default_instance_ = NULL;

GCBadvellyOperateBack* GCBadvellyOperateBack::New() const {
  return new GCBadvellyOperateBack;
}

void GCBadvellyOperateBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBadvellyOperateBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, scenceid_);
    ZR_(langueid_, missionid_);
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBadvellyOperateBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBadvellyOperateBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scenceId;
        break;
      }

      // optional int32 scenceId = 2;
      case 2: {
        if (tag == 16) {
         parse_scenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scenceid_)));
          set_has_scenceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 3;
      case 3: {
        if (tag == 26) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_langueId;
        break;
      }

      // optional int32 langueId = 4;
      case 4: {
        if (tag == 32) {
         parse_langueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &langueid_)));
          set_has_langueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_missionId;
        break;
      }

      // optional int32 missionId = 6;
      case 6: {
        if (tag == 48) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBadvellyOperateBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBadvellyOperateBack)
  return false;
#undef DO_
}

void GCBadvellyOperateBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBadvellyOperateBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 scenceId = 2;
  if (has_scenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scenceid(), output);
  }

  // optional .Vector3Info targetPos = 3;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetpos(), output);
  }

  // optional int32 langueId = 4;
  if (has_langueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->langueid(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional int32 missionId = 6;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBadvellyOperateBack)
}

::google::protobuf::uint8* GCBadvellyOperateBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBadvellyOperateBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 scenceId = 2;
  if (has_scenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scenceid(), target);
  }

  // optional .Vector3Info targetPos = 3;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetpos(), target);
  }

  // optional int32 langueId = 4;
  if (has_langueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->langueid(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional int32 missionId = 6;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBadvellyOperateBack)
  return target;
}

int GCBadvellyOperateBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 scenceId = 2;
    if (has_scenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scenceid());
    }

    // optional .Vector3Info targetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional int32 langueId = 4;
    if (has_langueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->langueid());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 missionId = 6;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBadvellyOperateBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBadvellyOperateBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBadvellyOperateBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBadvellyOperateBack::MergeFrom(const GCBadvellyOperateBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scenceid()) {
      set_scenceid(from.scenceid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
    if (from.has_langueid()) {
      set_langueid(from.langueid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBadvellyOperateBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBadvellyOperateBack::CopyFrom(const GCBadvellyOperateBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBadvellyOperateBack::IsInitialized() const {

  return true;
}

void GCBadvellyOperateBack::Swap(GCBadvellyOperateBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scenceid_, other->scenceid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(langueid_, other->langueid_);
    std::swap(result_, other->result_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBadvellyOperateBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBadvellyOperateBack_descriptor_;
  metadata.reflection = GCBadvellyOperateBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
