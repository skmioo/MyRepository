// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BaseMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCErrorBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCErrorBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGheartbeatClientSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGheartbeatClientSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCheartbeatServerBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCheartbeatServerBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCServerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCServerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCloseOldSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCloseOldSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLogMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLogMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BaseMessage_2eproto() {
  protobuf_AddDesc_BaseMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BaseMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCErrorBack_descriptor_ = file->message_type(0);
  static const int GCErrorBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErrorBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErrorBack, revmsgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErrorBack, parm_),
  };
  GCErrorBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCErrorBack_descriptor_,
      GCErrorBack::default_instance_,
      GCErrorBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErrorBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErrorBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCErrorBack));
  CGheartbeatClientSend_descriptor_ = file->message_type(1);
  static const int CGheartbeatClientSend_offsets_[1] = {
  };
  CGheartbeatClientSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGheartbeatClientSend_descriptor_,
      CGheartbeatClientSend::default_instance_,
      CGheartbeatClientSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGheartbeatClientSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGheartbeatClientSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGheartbeatClientSend));
  GCheartbeatServerBack_descriptor_ = file->message_type(2);
  static const int GCheartbeatServerBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCheartbeatServerBack, servertime_),
  };
  GCheartbeatServerBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCheartbeatServerBack_descriptor_,
      GCheartbeatServerBack::default_instance_,
      GCheartbeatServerBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCheartbeatServerBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCheartbeatServerBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCheartbeatServerBack));
  GCServerMsg_descriptor_ = file->message_type(3);
  static const int GCServerMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCServerMsg, innerpackets_),
  };
  GCServerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCServerMsg_descriptor_,
      GCServerMsg::default_instance_,
      GCServerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCServerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCServerMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCServerMsg));
  GCCloseOldSession_descriptor_ = file->message_type(4);
  static const int GCCloseOldSession_offsets_[1] = {
  };
  GCCloseOldSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCloseOldSession_descriptor_,
      GCCloseOldSession::default_instance_,
      GCCloseOldSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCloseOldSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCloseOldSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCloseOldSession));
  GCLogMsg_descriptor_ = file->message_type(5);
  static const int GCLogMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLogMsg, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLogMsg, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLogMsg, type_),
  };
  GCLogMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLogMsg_descriptor_,
      GCLogMsg::default_instance_,
      GCLogMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLogMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLogMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLogMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BaseMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCErrorBack_descriptor_, &GCErrorBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGheartbeatClientSend_descriptor_, &CGheartbeatClientSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCheartbeatServerBack_descriptor_, &GCheartbeatServerBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCServerMsg_descriptor_, &GCServerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCloseOldSession_descriptor_, &GCCloseOldSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLogMsg_descriptor_, &GCLogMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BaseMessage_2eproto() {
  delete GCErrorBack::default_instance_;
  delete GCErrorBack_reflection_;
  delete CGheartbeatClientSend::default_instance_;
  delete CGheartbeatClientSend_reflection_;
  delete GCheartbeatServerBack::default_instance_;
  delete GCheartbeatServerBack_reflection_;
  delete GCServerMsg::default_instance_;
  delete GCServerMsg_reflection_;
  delete GCCloseOldSession::default_instance_;
  delete GCCloseOldSession_reflection_;
  delete GCLogMsg::default_instance_;
  delete GCLogMsg_reflection_;
}

void protobuf_AddDesc_BaseMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021BaseMessage.proto\";\n\013GCErrorBack\022\014\n\004ty"
    "pe\030\001 \001(\005\022\020\n\010revMsgId\030\002 \001(\005\022\014\n\004parm\030\003 \001(\t"
    "\"\027\n\025CGheartbeatClientSend\"+\n\025GCheartbeat"
    "ServerBack\022\022\n\nserverTime\030\001 \001(\003\"#\n\013GCServ"
    "erMsg\022\024\n\014innerPackets\030\001 \001(\014\"\023\n\021GCCloseOl"
    "dSession\"7\n\010GCLogMsg\022\014\n\004func\030\001 \001(\t\022\017\n\007co"
    "ntext\030\002 \001(\t\022\014\n\004type\030\003 \001(\005B\031\n\027com.mile.co"
    "mmon.message", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BaseMessage.proto", &protobuf_RegisterTypes);
  GCErrorBack::default_instance_ = new GCErrorBack();
  CGheartbeatClientSend::default_instance_ = new CGheartbeatClientSend();
  GCheartbeatServerBack::default_instance_ = new GCheartbeatServerBack();
  GCServerMsg::default_instance_ = new GCServerMsg();
  GCCloseOldSession::default_instance_ = new GCCloseOldSession();
  GCLogMsg::default_instance_ = new GCLogMsg();
  GCErrorBack::default_instance_->InitAsDefaultInstance();
  CGheartbeatClientSend::default_instance_->InitAsDefaultInstance();
  GCheartbeatServerBack::default_instance_->InitAsDefaultInstance();
  GCServerMsg::default_instance_->InitAsDefaultInstance();
  GCCloseOldSession::default_instance_->InitAsDefaultInstance();
  GCLogMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BaseMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BaseMessage_2eproto {
  StaticDescriptorInitializer_BaseMessage_2eproto() {
    protobuf_AddDesc_BaseMessage_2eproto();
  }
} static_descriptor_initializer_BaseMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCErrorBack::kTypeFieldNumber;
const int GCErrorBack::kRevMsgIdFieldNumber;
const int GCErrorBack::kParmFieldNumber;
#endif  // !_MSC_VER

GCErrorBack::GCErrorBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCErrorBack)
}

void GCErrorBack::InitAsDefaultInstance() {
}

GCErrorBack::GCErrorBack(const GCErrorBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCErrorBack)
}

void GCErrorBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  revmsgid_ = 0;
  parm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCErrorBack::~GCErrorBack() {
  // @@protoc_insertion_point(destructor:GCErrorBack)
  SharedDtor();
}

void GCErrorBack::SharedDtor() {
  if (parm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parm_;
  }
  if (this != default_instance_) {
  }
}

void GCErrorBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCErrorBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCErrorBack_descriptor_;
}

const GCErrorBack& GCErrorBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

GCErrorBack* GCErrorBack::default_instance_ = NULL;

GCErrorBack* GCErrorBack::New() const {
  return new GCErrorBack;
}

void GCErrorBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCErrorBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, revmsgid_);
    if (has_parm()) {
      if (parm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parm_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCErrorBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCErrorBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_revMsgId;
        break;
      }

      // optional int32 revMsgId = 2;
      case 2: {
        if (tag == 16) {
         parse_revMsgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revmsgid_)));
          set_has_revmsgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parm;
        break;
      }

      // optional string parm = 3;
      case 3: {
        if (tag == 26) {
         parse_parm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parm().data(), this->parm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCErrorBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCErrorBack)
  return false;
#undef DO_
}

void GCErrorBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCErrorBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 revMsgId = 2;
  if (has_revmsgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->revmsgid(), output);
  }

  // optional string parm = 3;
  if (has_parm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parm().data(), this->parm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCErrorBack)
}

::google::protobuf::uint8* GCErrorBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCErrorBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 revMsgId = 2;
  if (has_revmsgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->revmsgid(), target);
  }

  // optional string parm = 3;
  if (has_parm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parm().data(), this->parm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCErrorBack)
  return target;
}

int GCErrorBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 revMsgId = 2;
    if (has_revmsgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revmsgid());
    }

    // optional string parm = 3;
    if (has_parm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCErrorBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCErrorBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCErrorBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCErrorBack::MergeFrom(const GCErrorBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_revmsgid()) {
      set_revmsgid(from.revmsgid());
    }
    if (from.has_parm()) {
      set_parm(from.parm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCErrorBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCErrorBack::CopyFrom(const GCErrorBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCErrorBack::IsInitialized() const {

  return true;
}

void GCErrorBack::Swap(GCErrorBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(revmsgid_, other->revmsgid_);
    std::swap(parm_, other->parm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCErrorBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCErrorBack_descriptor_;
  metadata.reflection = GCErrorBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGheartbeatClientSend::CGheartbeatClientSend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGheartbeatClientSend)
}

void CGheartbeatClientSend::InitAsDefaultInstance() {
}

CGheartbeatClientSend::CGheartbeatClientSend(const CGheartbeatClientSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGheartbeatClientSend)
}

void CGheartbeatClientSend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGheartbeatClientSend::~CGheartbeatClientSend() {
  // @@protoc_insertion_point(destructor:CGheartbeatClientSend)
  SharedDtor();
}

void CGheartbeatClientSend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGheartbeatClientSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGheartbeatClientSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGheartbeatClientSend_descriptor_;
}

const CGheartbeatClientSend& CGheartbeatClientSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

CGheartbeatClientSend* CGheartbeatClientSend::default_instance_ = NULL;

CGheartbeatClientSend* CGheartbeatClientSend::New() const {
  return new CGheartbeatClientSend;
}

void CGheartbeatClientSend::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGheartbeatClientSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGheartbeatClientSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGheartbeatClientSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGheartbeatClientSend)
  return false;
#undef DO_
}

void CGheartbeatClientSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGheartbeatClientSend)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGheartbeatClientSend)
}

::google::protobuf::uint8* CGheartbeatClientSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGheartbeatClientSend)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGheartbeatClientSend)
  return target;
}

int CGheartbeatClientSend::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGheartbeatClientSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGheartbeatClientSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGheartbeatClientSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGheartbeatClientSend::MergeFrom(const CGheartbeatClientSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGheartbeatClientSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGheartbeatClientSend::CopyFrom(const CGheartbeatClientSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGheartbeatClientSend::IsInitialized() const {

  return true;
}

void CGheartbeatClientSend::Swap(CGheartbeatClientSend* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGheartbeatClientSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGheartbeatClientSend_descriptor_;
  metadata.reflection = CGheartbeatClientSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCheartbeatServerBack::kServerTimeFieldNumber;
#endif  // !_MSC_VER

GCheartbeatServerBack::GCheartbeatServerBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCheartbeatServerBack)
}

void GCheartbeatServerBack::InitAsDefaultInstance() {
}

GCheartbeatServerBack::GCheartbeatServerBack(const GCheartbeatServerBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCheartbeatServerBack)
}

void GCheartbeatServerBack::SharedCtor() {
  _cached_size_ = 0;
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCheartbeatServerBack::~GCheartbeatServerBack() {
  // @@protoc_insertion_point(destructor:GCheartbeatServerBack)
  SharedDtor();
}

void GCheartbeatServerBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCheartbeatServerBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCheartbeatServerBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCheartbeatServerBack_descriptor_;
}

const GCheartbeatServerBack& GCheartbeatServerBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

GCheartbeatServerBack* GCheartbeatServerBack::default_instance_ = NULL;

GCheartbeatServerBack* GCheartbeatServerBack::New() const {
  return new GCheartbeatServerBack;
}

void GCheartbeatServerBack::Clear() {
  servertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCheartbeatServerBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCheartbeatServerBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 serverTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCheartbeatServerBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCheartbeatServerBack)
  return false;
#undef DO_
}

void GCheartbeatServerBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCheartbeatServerBack)
  // optional int64 serverTime = 1;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCheartbeatServerBack)
}

::google::protobuf::uint8* GCheartbeatServerBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCheartbeatServerBack)
  // optional int64 serverTime = 1;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCheartbeatServerBack)
  return target;
}

int GCheartbeatServerBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 serverTime = 1;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->servertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCheartbeatServerBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCheartbeatServerBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCheartbeatServerBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCheartbeatServerBack::MergeFrom(const GCheartbeatServerBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCheartbeatServerBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCheartbeatServerBack::CopyFrom(const GCheartbeatServerBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCheartbeatServerBack::IsInitialized() const {

  return true;
}

void GCheartbeatServerBack::Swap(GCheartbeatServerBack* other) {
  if (other != this) {
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCheartbeatServerBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCheartbeatServerBack_descriptor_;
  metadata.reflection = GCheartbeatServerBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCServerMsg::kInnerPacketsFieldNumber;
#endif  // !_MSC_VER

GCServerMsg::GCServerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCServerMsg)
}

void GCServerMsg::InitAsDefaultInstance() {
}

GCServerMsg::GCServerMsg(const GCServerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCServerMsg)
}

void GCServerMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCServerMsg::~GCServerMsg() {
  // @@protoc_insertion_point(destructor:GCServerMsg)
  SharedDtor();
}

void GCServerMsg::SharedDtor() {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpackets_;
  }
  if (this != default_instance_) {
  }
}

void GCServerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCServerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCServerMsg_descriptor_;
}

const GCServerMsg& GCServerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

GCServerMsg* GCServerMsg::default_instance_ = NULL;

GCServerMsg* GCServerMsg::New() const {
  return new GCServerMsg;
}

void GCServerMsg::Clear() {
  if (has_innerpackets()) {
    if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      innerpackets_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCServerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCServerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes innerPackets = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpackets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCServerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCServerMsg)
  return false;
#undef DO_
}

void GCServerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCServerMsg)
  // optional bytes innerPackets = 1;
  if (has_innerpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->innerpackets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCServerMsg)
}

::google::protobuf::uint8* GCServerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCServerMsg)
  // optional bytes innerPackets = 1;
  if (has_innerpackets()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->innerpackets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCServerMsg)
  return target;
}

int GCServerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes innerPackets = 1;
    if (has_innerpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpackets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCServerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCServerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCServerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCServerMsg::MergeFrom(const GCServerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_innerpackets()) {
      set_innerpackets(from.innerpackets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCServerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCServerMsg::CopyFrom(const GCServerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCServerMsg::IsInitialized() const {

  return true;
}

void GCServerMsg::Swap(GCServerMsg* other) {
  if (other != this) {
    std::swap(innerpackets_, other->innerpackets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCServerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCServerMsg_descriptor_;
  metadata.reflection = GCServerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GCCloseOldSession::GCCloseOldSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCloseOldSession)
}

void GCCloseOldSession::InitAsDefaultInstance() {
}

GCCloseOldSession::GCCloseOldSession(const GCCloseOldSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCloseOldSession)
}

void GCCloseOldSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCloseOldSession::~GCCloseOldSession() {
  // @@protoc_insertion_point(destructor:GCCloseOldSession)
  SharedDtor();
}

void GCCloseOldSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCloseOldSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCloseOldSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCloseOldSession_descriptor_;
}

const GCCloseOldSession& GCCloseOldSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

GCCloseOldSession* GCCloseOldSession::default_instance_ = NULL;

GCCloseOldSession* GCCloseOldSession::New() const {
  return new GCCloseOldSession;
}

void GCCloseOldSession::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCloseOldSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCloseOldSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GCCloseOldSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCloseOldSession)
  return false;
#undef DO_
}

void GCCloseOldSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCloseOldSession)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCloseOldSession)
}

::google::protobuf::uint8* GCCloseOldSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCloseOldSession)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCloseOldSession)
  return target;
}

int GCCloseOldSession::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCloseOldSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCloseOldSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCloseOldSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCloseOldSession::MergeFrom(const GCCloseOldSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCloseOldSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCloseOldSession::CopyFrom(const GCCloseOldSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCloseOldSession::IsInitialized() const {

  return true;
}

void GCCloseOldSession::Swap(GCCloseOldSession* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCloseOldSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCloseOldSession_descriptor_;
  metadata.reflection = GCCloseOldSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLogMsg::kFuncFieldNumber;
const int GCLogMsg::kContextFieldNumber;
const int GCLogMsg::kTypeFieldNumber;
#endif  // !_MSC_VER

GCLogMsg::GCLogMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLogMsg)
}

void GCLogMsg::InitAsDefaultInstance() {
}

GCLogMsg::GCLogMsg(const GCLogMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLogMsg)
}

void GCLogMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  func_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLogMsg::~GCLogMsg() {
  // @@protoc_insertion_point(destructor:GCLogMsg)
  SharedDtor();
}

void GCLogMsg::SharedDtor() {
  if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete func_;
  }
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void GCLogMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLogMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLogMsg_descriptor_;
}

const GCLogMsg& GCLogMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BaseMessage_2eproto();
  return *default_instance_;
}

GCLogMsg* GCLogMsg::default_instance_ = NULL;

GCLogMsg* GCLogMsg::New() const {
  return new GCLogMsg;
}

void GCLogMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_func()) {
      if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        func_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLogMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLogMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string func = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "func");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional string context = 2;
      case 2: {
        if (tag == 18) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), this->context().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "context");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLogMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLogMsg)
  return false;
#undef DO_
}

void GCLogMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLogMsg)
  // optional string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->func(), output);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->context(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLogMsg)
}

::google::protobuf::uint8* GCLogMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLogMsg)
  // optional string func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func(), target);
  }

  // optional string context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), this->context().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->context(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLogMsg)
  return target;
}

int GCLogMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string func = 1;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func());
    }

    // optional string context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->context());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLogMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLogMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLogMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLogMsg::MergeFrom(const GCLogMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      set_func(from.func());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLogMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLogMsg::CopyFrom(const GCLogMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLogMsg::IsInitialized() const {

  return true;
}

void GCLogMsg::Swap(GCLogMsg* other) {
  if (other != this) {
    std::swap(func_, other->func_);
    std::swap(context_, other->context_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLogMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLogMsg_descriptor_;
  metadata.reflection = GCLogMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
