// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMessage.proto

#ifndef PROTOBUF_BaseMessage_2eproto__INCLUDED
#define PROTOBUF_BaseMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BaseMessage_2eproto();
void protobuf_AssignDesc_BaseMessage_2eproto();
void protobuf_ShutdownFile_BaseMessage_2eproto();

class GCErrorBack;
class CGheartbeatClientSend;
class GCheartbeatServerBack;
class GCServerMsg;
class GCCloseOldSession;
class GCLogMsg;

// ===================================================================

class GCErrorBack : public ::google::protobuf::Message {
 public:
  GCErrorBack();
  virtual ~GCErrorBack();

  GCErrorBack(const GCErrorBack& from);

  inline GCErrorBack& operator=(const GCErrorBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCErrorBack& default_instance();

  void Swap(GCErrorBack* other);

  // implements Message ----------------------------------------------

  GCErrorBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCErrorBack& from);
  void MergeFrom(const GCErrorBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 revMsgId = 2;
  inline bool has_revmsgid() const;
  inline void clear_revmsgid();
  static const int kRevMsgIdFieldNumber = 2;
  inline ::google::protobuf::int32 revmsgid() const;
  inline void set_revmsgid(::google::protobuf::int32 value);

  // optional string parm = 3;
  inline bool has_parm() const;
  inline void clear_parm();
  static const int kParmFieldNumber = 3;
  inline const ::std::string& parm() const;
  inline void set_parm(const ::std::string& value);
  inline void set_parm(const char* value);
  inline void set_parm(const char* value, size_t size);
  inline ::std::string* mutable_parm();
  inline ::std::string* release_parm();
  inline void set_allocated_parm(::std::string* parm);

  // @@protoc_insertion_point(class_scope:GCErrorBack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_revmsgid();
  inline void clear_has_revmsgid();
  inline void set_has_parm();
  inline void clear_has_parm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 revmsgid_;
  ::std::string* parm_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static GCErrorBack* default_instance_;
};
// -------------------------------------------------------------------

class CGheartbeatClientSend : public ::google::protobuf::Message {
 public:
  CGheartbeatClientSend();
  virtual ~CGheartbeatClientSend();

  CGheartbeatClientSend(const CGheartbeatClientSend& from);

  inline CGheartbeatClientSend& operator=(const CGheartbeatClientSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGheartbeatClientSend& default_instance();

  void Swap(CGheartbeatClientSend* other);

  // implements Message ----------------------------------------------

  CGheartbeatClientSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGheartbeatClientSend& from);
  void MergeFrom(const CGheartbeatClientSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGheartbeatClientSend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static CGheartbeatClientSend* default_instance_;
};
// -------------------------------------------------------------------

class GCheartbeatServerBack : public ::google::protobuf::Message {
 public:
  GCheartbeatServerBack();
  virtual ~GCheartbeatServerBack();

  GCheartbeatServerBack(const GCheartbeatServerBack& from);

  inline GCheartbeatServerBack& operator=(const GCheartbeatServerBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCheartbeatServerBack& default_instance();

  void Swap(GCheartbeatServerBack* other);

  // implements Message ----------------------------------------------

  GCheartbeatServerBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCheartbeatServerBack& from);
  void MergeFrom(const GCheartbeatServerBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 serverTime = 1;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::int64 servertime() const;
  inline void set_servertime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCheartbeatServerBack)
 private:
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 servertime_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static GCheartbeatServerBack* default_instance_;
};
// -------------------------------------------------------------------

class GCServerMsg : public ::google::protobuf::Message {
 public:
  GCServerMsg();
  virtual ~GCServerMsg();

  GCServerMsg(const GCServerMsg& from);

  inline GCServerMsg& operator=(const GCServerMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCServerMsg& default_instance();

  void Swap(GCServerMsg* other);

  // implements Message ----------------------------------------------

  GCServerMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCServerMsg& from);
  void MergeFrom(const GCServerMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes innerPackets = 1;
  inline bool has_innerpackets() const;
  inline void clear_innerpackets();
  static const int kInnerPacketsFieldNumber = 1;
  inline const ::std::string& innerpackets() const;
  inline void set_innerpackets(const ::std::string& value);
  inline void set_innerpackets(const char* value);
  inline void set_innerpackets(const void* value, size_t size);
  inline ::std::string* mutable_innerpackets();
  inline ::std::string* release_innerpackets();
  inline void set_allocated_innerpackets(::std::string* innerpackets);

  // @@protoc_insertion_point(class_scope:GCServerMsg)
 private:
  inline void set_has_innerpackets();
  inline void clear_has_innerpackets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* innerpackets_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static GCServerMsg* default_instance_;
};
// -------------------------------------------------------------------

class GCCloseOldSession : public ::google::protobuf::Message {
 public:
  GCCloseOldSession();
  virtual ~GCCloseOldSession();

  GCCloseOldSession(const GCCloseOldSession& from);

  inline GCCloseOldSession& operator=(const GCCloseOldSession& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCloseOldSession& default_instance();

  void Swap(GCCloseOldSession* other);

  // implements Message ----------------------------------------------

  GCCloseOldSession* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCloseOldSession& from);
  void MergeFrom(const GCCloseOldSession& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GCCloseOldSession)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCloseOldSession* default_instance_;
};
// -------------------------------------------------------------------

class GCLogMsg : public ::google::protobuf::Message {
 public:
  GCLogMsg();
  virtual ~GCLogMsg();

  GCLogMsg(const GCLogMsg& from);

  inline GCLogMsg& operator=(const GCLogMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCLogMsg& default_instance();

  void Swap(GCLogMsg* other);

  // implements Message ----------------------------------------------

  GCLogMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCLogMsg& from);
  void MergeFrom(const GCLogMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string func = 1;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 1;
  inline const ::std::string& func() const;
  inline void set_func(const ::std::string& value);
  inline void set_func(const char* value);
  inline void set_func(const char* value, size_t size);
  inline ::std::string* mutable_func();
  inline ::std::string* release_func();
  inline void set_allocated_func(::std::string* func);

  // optional string context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline const ::std::string& context() const;
  inline void set_context(const ::std::string& value);
  inline void set_context(const char* value);
  inline void set_context(const char* value, size_t size);
  inline ::std::string* mutable_context();
  inline ::std::string* release_context();
  inline void set_allocated_context(::std::string* context);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCLogMsg)
 private:
  inline void set_has_func();
  inline void clear_has_func();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* func_;
  ::std::string* context_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_BaseMessage_2eproto();
  friend void protobuf_AssignDesc_BaseMessage_2eproto();
  friend void protobuf_ShutdownFile_BaseMessage_2eproto();

  void InitAsDefaultInstance();
  static GCLogMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// GCErrorBack

// optional int32 type = 1;
inline bool GCErrorBack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCErrorBack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCErrorBack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCErrorBack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCErrorBack::type() const {
  // @@protoc_insertion_point(field_get:GCErrorBack.type)
  return type_;
}
inline void GCErrorBack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCErrorBack.type)
}

// optional int32 revMsgId = 2;
inline bool GCErrorBack::has_revmsgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCErrorBack::set_has_revmsgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCErrorBack::clear_has_revmsgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCErrorBack::clear_revmsgid() {
  revmsgid_ = 0;
  clear_has_revmsgid();
}
inline ::google::protobuf::int32 GCErrorBack::revmsgid() const {
  // @@protoc_insertion_point(field_get:GCErrorBack.revMsgId)
  return revmsgid_;
}
inline void GCErrorBack::set_revmsgid(::google::protobuf::int32 value) {
  set_has_revmsgid();
  revmsgid_ = value;
  // @@protoc_insertion_point(field_set:GCErrorBack.revMsgId)
}

// optional string parm = 3;
inline bool GCErrorBack::has_parm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCErrorBack::set_has_parm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCErrorBack::clear_has_parm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCErrorBack::clear_parm() {
  if (parm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parm_->clear();
  }
  clear_has_parm();
}
inline const ::std::string& GCErrorBack::parm() const {
  // @@protoc_insertion_point(field_get:GCErrorBack.parm)
  return *parm_;
}
inline void GCErrorBack::set_parm(const ::std::string& value) {
  set_has_parm();
  if (parm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parm_ = new ::std::string;
  }
  parm_->assign(value);
  // @@protoc_insertion_point(field_set:GCErrorBack.parm)
}
inline void GCErrorBack::set_parm(const char* value) {
  set_has_parm();
  if (parm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parm_ = new ::std::string;
  }
  parm_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCErrorBack.parm)
}
inline void GCErrorBack::set_parm(const char* value, size_t size) {
  set_has_parm();
  if (parm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parm_ = new ::std::string;
  }
  parm_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCErrorBack.parm)
}
inline ::std::string* GCErrorBack::mutable_parm() {
  set_has_parm();
  if (parm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    parm_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCErrorBack.parm)
  return parm_;
}
inline ::std::string* GCErrorBack::release_parm() {
  clear_has_parm();
  if (parm_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = parm_;
    parm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCErrorBack::set_allocated_parm(::std::string* parm) {
  if (parm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parm_;
  }
  if (parm) {
    set_has_parm();
    parm_ = parm;
  } else {
    clear_has_parm();
    parm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCErrorBack.parm)
}

// -------------------------------------------------------------------

// CGheartbeatClientSend

// -------------------------------------------------------------------

// GCheartbeatServerBack

// optional int64 serverTime = 1;
inline bool GCheartbeatServerBack::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCheartbeatServerBack::set_has_servertime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCheartbeatServerBack::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCheartbeatServerBack::clear_servertime() {
  servertime_ = GOOGLE_LONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::int64 GCheartbeatServerBack::servertime() const {
  // @@protoc_insertion_point(field_get:GCheartbeatServerBack.serverTime)
  return servertime_;
}
inline void GCheartbeatServerBack::set_servertime(::google::protobuf::int64 value) {
  set_has_servertime();
  servertime_ = value;
  // @@protoc_insertion_point(field_set:GCheartbeatServerBack.serverTime)
}

// -------------------------------------------------------------------

// GCServerMsg

// optional bytes innerPackets = 1;
inline bool GCServerMsg::has_innerpackets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCServerMsg::set_has_innerpackets() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCServerMsg::clear_has_innerpackets() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCServerMsg::clear_innerpackets() {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_->clear();
  }
  clear_has_innerpackets();
}
inline const ::std::string& GCServerMsg::innerpackets() const {
  // @@protoc_insertion_point(field_get:GCServerMsg.innerPackets)
  return *innerpackets_;
}
inline void GCServerMsg::set_innerpackets(const ::std::string& value) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(value);
  // @@protoc_insertion_point(field_set:GCServerMsg.innerPackets)
}
inline void GCServerMsg::set_innerpackets(const char* value) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCServerMsg.innerPackets)
}
inline void GCServerMsg::set_innerpackets(const void* value, size_t size) {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  innerpackets_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCServerMsg.innerPackets)
}
inline ::std::string* GCServerMsg::mutable_innerpackets() {
  set_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    innerpackets_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCServerMsg.innerPackets)
  return innerpackets_;
}
inline ::std::string* GCServerMsg::release_innerpackets() {
  clear_has_innerpackets();
  if (innerpackets_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = innerpackets_;
    innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCServerMsg::set_allocated_innerpackets(::std::string* innerpackets) {
  if (innerpackets_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpackets_;
  }
  if (innerpackets) {
    set_has_innerpackets();
    innerpackets_ = innerpackets;
  } else {
    clear_has_innerpackets();
    innerpackets_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCServerMsg.innerPackets)
}

// -------------------------------------------------------------------

// GCCloseOldSession

// -------------------------------------------------------------------

// GCLogMsg

// optional string func = 1;
inline bool GCLogMsg::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCLogMsg::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCLogMsg::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCLogMsg::clear_func() {
  if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    func_->clear();
  }
  clear_has_func();
}
inline const ::std::string& GCLogMsg::func() const {
  // @@protoc_insertion_point(field_get:GCLogMsg.func)
  return *func_;
}
inline void GCLogMsg::set_func(const ::std::string& value) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    func_ = new ::std::string;
  }
  func_->assign(value);
  // @@protoc_insertion_point(field_set:GCLogMsg.func)
}
inline void GCLogMsg::set_func(const char* value) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    func_ = new ::std::string;
  }
  func_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCLogMsg.func)
}
inline void GCLogMsg::set_func(const char* value, size_t size) {
  set_has_func();
  if (func_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    func_ = new ::std::string;
  }
  func_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCLogMsg.func)
}
inline ::std::string* GCLogMsg::mutable_func() {
  set_has_func();
  if (func_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    func_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCLogMsg.func)
  return func_;
}
inline ::std::string* GCLogMsg::release_func() {
  clear_has_func();
  if (func_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = func_;
    func_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCLogMsg::set_allocated_func(::std::string* func) {
  if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete func_;
  }
  if (func) {
    set_has_func();
    func_ = func;
  } else {
    clear_has_func();
    func_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCLogMsg.func)
}

// optional string context = 2;
inline bool GCLogMsg::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCLogMsg::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCLogMsg::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCLogMsg::clear_context() {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_->clear();
  }
  clear_has_context();
}
inline const ::std::string& GCLogMsg::context() const {
  // @@protoc_insertion_point(field_get:GCLogMsg.context)
  return *context_;
}
inline void GCLogMsg::set_context(const ::std::string& value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set:GCLogMsg.context)
}
inline void GCLogMsg::set_context(const char* value) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCLogMsg.context)
}
inline void GCLogMsg::set_context(const char* value, size_t size) {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  context_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCLogMsg.context)
}
inline ::std::string* GCLogMsg::mutable_context() {
  set_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    context_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCLogMsg.context)
  return context_;
}
inline ::std::string* GCLogMsg::release_context() {
  clear_has_context();
  if (context_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = context_;
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCLogMsg::set_allocated_context(::std::string* context) {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (context) {
    set_has_context();
    context_ = context;
  } else {
    clear_has_context();
    context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCLogMsg.context)
}

// optional int32 type = 3;
inline bool GCLogMsg::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCLogMsg::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCLogMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCLogMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCLogMsg::type() const {
  // @@protoc_insertion_point(field_get:GCLogMsg.type)
  return type_;
}
inline void GCLogMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCLogMsg.type)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseMessage_2eproto__INCLUDED
