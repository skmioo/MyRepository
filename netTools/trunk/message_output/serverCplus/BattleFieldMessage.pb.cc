// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleFieldMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleFieldMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBattleField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleFieldMessage_2eproto() {
  protobuf_AddDesc_BattleFieldMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleFieldMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCBattleField_descriptor_ = file->message_type(0);
  static const int GCBattleField_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, killpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, diepuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, camp1info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, camp2info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, selfrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, fightrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, selfindex_),
  };
  GCBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBattleField_descriptor_,
      GCBattleField::default_instance_,
      GCBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBattleField));
  CGBattleField_descriptor_ = file->message_type(1);
  static const int CGBattleField_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBattleField, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBattleField, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBattleField, itemid_),
  };
  CGBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBattleField_descriptor_,
      CGBattleField::default_instance_,
      CGBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBattleField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleFieldMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBattleField_descriptor_, &GCBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBattleField_descriptor_, &CGBattleField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleFieldMessage_2eproto() {
  delete GCBattleField::default_instance_;
  delete GCBattleField_reflection_;
  delete CGBattleField::default_instance_;
  delete CGBattleField_reflection_;
}

void protobuf_AddDesc_BattleFieldMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030BattleFieldMessage.proto\032\023CommonMessag"
    "e.proto\"\277\002\n\rGCBattleField\022\017\n\007operate\030\001 \001"
    "(\005\022\014\n\004time\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022\r\n\005param"
    "\030\004 \001(\005\022\036\n\010itemInfo\030\005 \001(\0132\014.EntryIntInt\022\036"
    "\n\010itemList\030\006 \003(\0132\014.EntryIntInt\022\020\n\010killPu"
    "id\030\007 \001(\003\022\017\n\007diePuid\030\010 \001(\003\022\r\n\005npcID\030\t \001(\005"
    "\022\016\n\006result\030\n \001(\005\022\021\n\tcamp1Info\030\013 \003(\005\022\021\n\tc"
    "amp2Info\030\014 \003(\005\022\022\n\nselfRecord\030\r \003(\005\022\"\n\013fi"
    "ghtRecord\030\016 \003(\0132\r.EntryLongAry\022\021\n\tselfIn"
    "dex\030\017 \001(\005\"\?\n\rCGBattleField\022\017\n\007operate\030\001 "
    "\001(\005\022\r\n\005state\030\002 \001(\005\022\016\n\006itemId\030\003 \001(\005B\031\n\027co"
    "m.mile.common.message", 461);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleFieldMessage.proto", &protobuf_RegisterTypes);
  GCBattleField::default_instance_ = new GCBattleField();
  CGBattleField::default_instance_ = new CGBattleField();
  GCBattleField::default_instance_->InitAsDefaultInstance();
  CGBattleField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleFieldMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleFieldMessage_2eproto {
  StaticDescriptorInitializer_BattleFieldMessage_2eproto() {
    protobuf_AddDesc_BattleFieldMessage_2eproto();
  }
} static_descriptor_initializer_BattleFieldMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCBattleField::kOperateFieldNumber;
const int GCBattleField::kTimeFieldNumber;
const int GCBattleField::kStateFieldNumber;
const int GCBattleField::kParamFieldNumber;
const int GCBattleField::kItemInfoFieldNumber;
const int GCBattleField::kItemListFieldNumber;
const int GCBattleField::kKillPuidFieldNumber;
const int GCBattleField::kDiePuidFieldNumber;
const int GCBattleField::kNpcIDFieldNumber;
const int GCBattleField::kResultFieldNumber;
const int GCBattleField::kCamp1InfoFieldNumber;
const int GCBattleField::kCamp2InfoFieldNumber;
const int GCBattleField::kSelfRecordFieldNumber;
const int GCBattleField::kFightRecordFieldNumber;
const int GCBattleField::kSelfIndexFieldNumber;
#endif  // !_MSC_VER

GCBattleField::GCBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBattleField)
}

void GCBattleField::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::EntryIntInt*>(&::EntryIntInt::default_instance());
}

GCBattleField::GCBattleField(const GCBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBattleField)
}

void GCBattleField::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  time_ = 0;
  state_ = 0;
  param_ = 0;
  iteminfo_ = NULL;
  killpuid_ = GOOGLE_LONGLONG(0);
  diepuid_ = GOOGLE_LONGLONG(0);
  npcid_ = 0;
  result_ = 0;
  selfindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBattleField::~GCBattleField() {
  // @@protoc_insertion_point(destructor:GCBattleField)
  SharedDtor();
}

void GCBattleField::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void GCBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBattleField_descriptor_;
}

const GCBattleField& GCBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleFieldMessage_2eproto();
  return *default_instance_;
}

GCBattleField* GCBattleField::default_instance_ = NULL;

GCBattleField* GCBattleField::New() const {
  return new GCBattleField;
}

void GCBattleField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBattleField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(operate_, param_);
    ZR_(killpuid_, diepuid_);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::EntryIntInt::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 17152) {
    ZR_(npcid_, result_);
    selfindex_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemlist_.Clear();
  camp1info_.Clear();
  camp2info_.Clear();
  selfrecord_.Clear();
  fightrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBattleField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }

      // optional int32 param = 4;
      case 4: {
        if (tag == 32) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        break;
      }

      // optional .EntryIntInt itemInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemList;
        break;
      }

      // repeated .EntryIntInt itemList = 6;
      case 6: {
        if (tag == 50) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_itemList;
        if (input->ExpectTag(56)) goto parse_killPuid;
        break;
      }

      // optional int64 killPuid = 7;
      case 7: {
        if (tag == 56) {
         parse_killPuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killpuid_)));
          set_has_killpuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_diePuid;
        break;
      }

      // optional int64 diePuid = 8;
      case 8: {
        if (tag == 64) {
         parse_diePuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diepuid_)));
          set_has_diepuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_npcID;
        break;
      }

      // optional int32 npcID = 9;
      case 9: {
        if (tag == 72) {
         parse_npcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }

      // optional int32 result = 10;
      case 10: {
        if (tag == 80) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_camp1Info;
        break;
      }

      // repeated int32 camp1Info = 11;
      case 11: {
        if (tag == 88) {
         parse_camp1Info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_camp1info())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_camp1info())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_camp1Info;
        if (input->ExpectTag(96)) goto parse_camp2Info;
        break;
      }

      // repeated int32 camp2Info = 12;
      case 12: {
        if (tag == 96) {
         parse_camp2Info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_camp2info())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_camp2info())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_camp2Info;
        if (input->ExpectTag(104)) goto parse_selfRecord;
        break;
      }

      // repeated int32 selfRecord = 13;
      case 13: {
        if (tag == 104) {
         parse_selfRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_selfrecord())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_selfrecord())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_selfRecord;
        if (input->ExpectTag(114)) goto parse_fightRecord;
        break;
      }

      // repeated .EntryLongAry fightRecord = 14;
      case 14: {
        if (tag == 114) {
         parse_fightRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_fightRecord;
        if (input->ExpectTag(120)) goto parse_selfIndex;
        break;
      }

      // optional int32 selfIndex = 15;
      case 15: {
        if (tag == 120) {
         parse_selfIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfindex_)));
          set_has_selfindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBattleField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBattleField)
  return false;
#undef DO_
}

void GCBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBattleField)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // optional int32 param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param(), output);
  }

  // optional .EntryIntInt itemInfo = 5;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->iteminfo(), output);
  }

  // repeated .EntryIntInt itemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemlist(i), output);
  }

  // optional int64 killPuid = 7;
  if (has_killpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->killpuid(), output);
  }

  // optional int64 diePuid = 8;
  if (has_diepuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->diepuid(), output);
  }

  // optional int32 npcID = 9;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->npcid(), output);
  }

  // optional int32 result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->result(), output);
  }

  // repeated int32 camp1Info = 11;
  for (int i = 0; i < this->camp1info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->camp1info(i), output);
  }

  // repeated int32 camp2Info = 12;
  for (int i = 0; i < this->camp2info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->camp2info(i), output);
  }

  // repeated int32 selfRecord = 13;
  for (int i = 0; i < this->selfrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->selfrecord(i), output);
  }

  // repeated .EntryLongAry fightRecord = 14;
  for (int i = 0; i < this->fightrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->fightrecord(i), output);
  }

  // optional int32 selfIndex = 15;
  if (has_selfindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->selfindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBattleField)
}

::google::protobuf::uint8* GCBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBattleField)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // optional int32 param = 4;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param(), target);
  }

  // optional .EntryIntInt itemInfo = 5;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->iteminfo(), target);
  }

  // repeated .EntryIntInt itemList = 6;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemlist(i), target);
  }

  // optional int64 killPuid = 7;
  if (has_killpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->killpuid(), target);
  }

  // optional int64 diePuid = 8;
  if (has_diepuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->diepuid(), target);
  }

  // optional int32 npcID = 9;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->npcid(), target);
  }

  // optional int32 result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->result(), target);
  }

  // repeated int32 camp1Info = 11;
  for (int i = 0; i < this->camp1info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->camp1info(i), target);
  }

  // repeated int32 camp2Info = 12;
  for (int i = 0; i < this->camp2info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->camp2info(i), target);
  }

  // repeated int32 selfRecord = 13;
  for (int i = 0; i < this->selfrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->selfrecord(i), target);
  }

  // repeated .EntryLongAry fightRecord = 14;
  for (int i = 0; i < this->fightrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->fightrecord(i), target);
  }

  // optional int32 selfIndex = 15;
  if (has_selfindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->selfindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBattleField)
  return target;
}

int GCBattleField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional .EntryIntInt itemInfo = 5;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int64 killPuid = 7;
    if (has_killpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killpuid());
    }

    // optional int64 diePuid = 8;
    if (has_diepuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diepuid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 npcID = 9;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

    // optional int32 result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 selfIndex = 15;
    if (has_selfindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfindex());
    }

  }
  // repeated .EntryIntInt itemList = 6;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  // repeated int32 camp1Info = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->camp1info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->camp1info(i));
    }
    total_size += 1 * this->camp1info_size() + data_size;
  }

  // repeated int32 camp2Info = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->camp2info_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->camp2info(i));
    }
    total_size += 1 * this->camp2info_size() + data_size;
  }

  // repeated int32 selfRecord = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->selfrecord_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->selfrecord(i));
    }
    total_size += 1 * this->selfrecord_size() + data_size;
  }

  // repeated .EntryLongAry fightRecord = 14;
  total_size += 1 * this->fightrecord_size();
  for (int i = 0; i < this->fightrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightrecord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBattleField::MergeFrom(const GCBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  camp1info_.MergeFrom(from.camp1info_);
  camp2info_.MergeFrom(from.camp2info_);
  selfrecord_.MergeFrom(from.selfrecord_);
  fightrecord_.MergeFrom(from.fightrecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::EntryIntInt::MergeFrom(from.iteminfo());
    }
    if (from.has_killpuid()) {
      set_killpuid(from.killpuid());
    }
    if (from.has_diepuid()) {
      set_diepuid(from.diepuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_selfindex()) {
      set_selfindex(from.selfindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBattleField::CopyFrom(const GCBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBattleField::IsInitialized() const {

  return true;
}

void GCBattleField::Swap(GCBattleField* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(time_, other->time_);
    std::swap(state_, other->state_);
    std::swap(param_, other->param_);
    std::swap(iteminfo_, other->iteminfo_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(killpuid_, other->killpuid_);
    std::swap(diepuid_, other->diepuid_);
    std::swap(npcid_, other->npcid_);
    std::swap(result_, other->result_);
    camp1info_.Swap(&other->camp1info_);
    camp2info_.Swap(&other->camp2info_);
    selfrecord_.Swap(&other->selfrecord_);
    fightrecord_.Swap(&other->fightrecord_);
    std::swap(selfindex_, other->selfindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBattleField_descriptor_;
  metadata.reflection = GCBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBattleField::kOperateFieldNumber;
const int CGBattleField::kStateFieldNumber;
const int CGBattleField::kItemIdFieldNumber;
#endif  // !_MSC_VER

CGBattleField::CGBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBattleField)
}

void CGBattleField::InitAsDefaultInstance() {
}

CGBattleField::CGBattleField(const CGBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBattleField)
}

void CGBattleField::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  state_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBattleField::~CGBattleField() {
  // @@protoc_insertion_point(destructor:CGBattleField)
  SharedDtor();
}

void CGBattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBattleField_descriptor_;
}

const CGBattleField& CGBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleFieldMessage_2eproto();
  return *default_instance_;
}

CGBattleField* CGBattleField::default_instance_ = NULL;

CGBattleField* CGBattleField::New() const {
  return new CGBattleField;
}

void CGBattleField::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBattleField*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, itemid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBattleField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBattleField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBattleField)
  return false;
#undef DO_
}

void CGBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBattleField)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBattleField)
}

::google::protobuf::uint8* CGBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBattleField)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBattleField)
  return target;
}

int CGBattleField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBattleField::MergeFrom(const CGBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBattleField::CopyFrom(const CGBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBattleField::IsInitialized() const {

  return true;
}

void CGBattleField::Swap(CGBattleField* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(state_, other->state_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBattleField_descriptor_;
  metadata.reflection = CGBattleField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
