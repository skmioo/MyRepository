// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleTaskMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleTaskMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BattleTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBattleTaskListBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBattleTaskListBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBattleTaskInforBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBattleTaskInforBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleTaskMessage_2eproto() {
  protobuf_AddDesc_BattleTaskMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleTaskMessage.proto");
  GOOGLE_CHECK(file != NULL);
  BattleTask_descriptor_ = file->message_type(0);
  static const int BattleTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, type_),
  };
  BattleTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleTask_descriptor_,
      BattleTask::default_instance_,
      BattleTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleTask));
  GCBattleTaskListBack_descriptor_ = file->message_type(1);
  static const int GCBattleTaskListBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskListBack, battletasks_),
  };
  GCBattleTaskListBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBattleTaskListBack_descriptor_,
      GCBattleTaskListBack::default_instance_,
      GCBattleTaskListBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskListBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskListBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBattleTaskListBack));
  GCBattleTaskInforBack_descriptor_ = file->message_type(2);
  static const int GCBattleTaskInforBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, battletask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, oldtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, taskstatus_),
  };
  GCBattleTaskInforBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBattleTaskInforBack_descriptor_,
      GCBattleTaskInforBack::default_instance_,
      GCBattleTaskInforBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBattleTaskInforBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBattleTaskInforBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleTaskMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleTask_descriptor_, &BattleTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBattleTaskListBack_descriptor_, &GCBattleTaskListBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBattleTaskInforBack_descriptor_, &GCBattleTaskInforBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleTaskMessage_2eproto() {
  delete BattleTask::default_instance_;
  delete BattleTask_reflection_;
  delete GCBattleTaskListBack::default_instance_;
  delete GCBattleTaskListBack_reflection_;
  delete GCBattleTaskInforBack::default_instance_;
  delete GCBattleTaskInforBack_reflection_;
}

void protobuf_AddDesc_BattleTaskMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027BattleTaskMessage.proto\"G\n\nBattleTask\022"
    "\016\n\006taskID\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\013\n\003num\030\003"
    " \001(\005\022\014\n\004type\030\004 \001(\005\"8\n\024GCBattleTaskListBa"
    "ck\022 \n\013battleTasks\030\001 \003(\0132\013.BattleTask\"m\n\025"
    "GCBattleTaskInforBack\022\037\n\nbattleTask\030\001 \001("
    "\0132\013.BattleTask\022\014\n\004type\030\002 \001(\005\022\021\n\toldTaskI"
    "D\030\003 \001(\005\022\022\n\ntaskStatus\030\004 \001(\005B\031\n\027com.mile."
    "common.message", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleTaskMessage.proto", &protobuf_RegisterTypes);
  BattleTask::default_instance_ = new BattleTask();
  GCBattleTaskListBack::default_instance_ = new GCBattleTaskListBack();
  GCBattleTaskInforBack::default_instance_ = new GCBattleTaskInforBack();
  BattleTask::default_instance_->InitAsDefaultInstance();
  GCBattleTaskListBack::default_instance_->InitAsDefaultInstance();
  GCBattleTaskInforBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleTaskMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleTaskMessage_2eproto {
  StaticDescriptorInitializer_BattleTaskMessage_2eproto() {
    protobuf_AddDesc_BattleTaskMessage_2eproto();
  }
} static_descriptor_initializer_BattleTaskMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleTask::kTaskIDFieldNumber;
const int BattleTask::kStatusFieldNumber;
const int BattleTask::kNumFieldNumber;
const int BattleTask::kTypeFieldNumber;
#endif  // !_MSC_VER

BattleTask::BattleTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BattleTask)
}

void BattleTask::InitAsDefaultInstance() {
}

BattleTask::BattleTask(const BattleTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BattleTask)
}

void BattleTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  status_ = 0;
  num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTask::~BattleTask() {
  // @@protoc_insertion_point(destructor:BattleTask)
  SharedDtor();
}

void BattleTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleTask_descriptor_;
}

const BattleTask& BattleTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleTaskMessage_2eproto();
  return *default_instance_;
}

BattleTask* BattleTask::default_instance_ = NULL;

BattleTask* BattleTask::New() const {
  return new BattleTask;
}

void BattleTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BattleTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BattleTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BattleTask)
  return false;
#undef DO_
}

void BattleTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BattleTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BattleTask)
}

::google::protobuf::uint8* BattleTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BattleTask)
  // optional int32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BattleTask)
  return target;
}

int BattleTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleTask::MergeFrom(const BattleTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTask::CopyFrom(const BattleTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTask::IsInitialized() const {

  return true;
}

void BattleTask::Swap(BattleTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(status_, other->status_);
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleTask_descriptor_;
  metadata.reflection = BattleTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBattleTaskListBack::kBattleTasksFieldNumber;
#endif  // !_MSC_VER

GCBattleTaskListBack::GCBattleTaskListBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBattleTaskListBack)
}

void GCBattleTaskListBack::InitAsDefaultInstance() {
}

GCBattleTaskListBack::GCBattleTaskListBack(const GCBattleTaskListBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBattleTaskListBack)
}

void GCBattleTaskListBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBattleTaskListBack::~GCBattleTaskListBack() {
  // @@protoc_insertion_point(destructor:GCBattleTaskListBack)
  SharedDtor();
}

void GCBattleTaskListBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBattleTaskListBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBattleTaskListBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBattleTaskListBack_descriptor_;
}

const GCBattleTaskListBack& GCBattleTaskListBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleTaskMessage_2eproto();
  return *default_instance_;
}

GCBattleTaskListBack* GCBattleTaskListBack::default_instance_ = NULL;

GCBattleTaskListBack* GCBattleTaskListBack::New() const {
  return new GCBattleTaskListBack;
}

void GCBattleTaskListBack::Clear() {
  battletasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBattleTaskListBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBattleTaskListBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BattleTask battleTasks = 1;
      case 1: {
        if (tag == 10) {
         parse_battleTasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battletasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battleTasks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBattleTaskListBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBattleTaskListBack)
  return false;
#undef DO_
}

void GCBattleTaskListBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBattleTaskListBack)
  // repeated .BattleTask battleTasks = 1;
  for (int i = 0; i < this->battletasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battletasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBattleTaskListBack)
}

::google::protobuf::uint8* GCBattleTaskListBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBattleTaskListBack)
  // repeated .BattleTask battleTasks = 1;
  for (int i = 0; i < this->battletasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battletasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBattleTaskListBack)
  return target;
}

int GCBattleTaskListBack::ByteSize() const {
  int total_size = 0;

  // repeated .BattleTask battleTasks = 1;
  total_size += 1 * this->battletasks_size();
  for (int i = 0; i < this->battletasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battletasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBattleTaskListBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBattleTaskListBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBattleTaskListBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBattleTaskListBack::MergeFrom(const GCBattleTaskListBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  battletasks_.MergeFrom(from.battletasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBattleTaskListBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBattleTaskListBack::CopyFrom(const GCBattleTaskListBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBattleTaskListBack::IsInitialized() const {

  return true;
}

void GCBattleTaskListBack::Swap(GCBattleTaskListBack* other) {
  if (other != this) {
    battletasks_.Swap(&other->battletasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBattleTaskListBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBattleTaskListBack_descriptor_;
  metadata.reflection = GCBattleTaskListBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBattleTaskInforBack::kBattleTaskFieldNumber;
const int GCBattleTaskInforBack::kTypeFieldNumber;
const int GCBattleTaskInforBack::kOldTaskIDFieldNumber;
const int GCBattleTaskInforBack::kTaskStatusFieldNumber;
#endif  // !_MSC_VER

GCBattleTaskInforBack::GCBattleTaskInforBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBattleTaskInforBack)
}

void GCBattleTaskInforBack::InitAsDefaultInstance() {
  battletask_ = const_cast< ::BattleTask*>(&::BattleTask::default_instance());
}

GCBattleTaskInforBack::GCBattleTaskInforBack(const GCBattleTaskInforBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBattleTaskInforBack)
}

void GCBattleTaskInforBack::SharedCtor() {
  _cached_size_ = 0;
  battletask_ = NULL;
  type_ = 0;
  oldtaskid_ = 0;
  taskstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBattleTaskInforBack::~GCBattleTaskInforBack() {
  // @@protoc_insertion_point(destructor:GCBattleTaskInforBack)
  SharedDtor();
}

void GCBattleTaskInforBack::SharedDtor() {
  if (this != default_instance_) {
    delete battletask_;
  }
}

void GCBattleTaskInforBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBattleTaskInforBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBattleTaskInforBack_descriptor_;
}

const GCBattleTaskInforBack& GCBattleTaskInforBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleTaskMessage_2eproto();
  return *default_instance_;
}

GCBattleTaskInforBack* GCBattleTaskInforBack::default_instance_ = NULL;

GCBattleTaskInforBack* GCBattleTaskInforBack::New() const {
  return new GCBattleTaskInforBack;
}

void GCBattleTaskInforBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBattleTaskInforBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, taskstatus_);
    if (has_battletask()) {
      if (battletask_ != NULL) battletask_->::BattleTask::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBattleTaskInforBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBattleTaskInforBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BattleTask battleTask = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battletask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_oldTaskID;
        break;
      }

      // optional int32 oldTaskID = 3;
      case 3: {
        if (tag == 24) {
         parse_oldTaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oldtaskid_)));
          set_has_oldtaskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_taskStatus;
        break;
      }

      // optional int32 taskStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_taskStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskstatus_)));
          set_has_taskstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBattleTaskInforBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBattleTaskInforBack)
  return false;
#undef DO_
}

void GCBattleTaskInforBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBattleTaskInforBack)
  // optional .BattleTask battleTask = 1;
  if (has_battletask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battletask(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 oldTaskID = 3;
  if (has_oldtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oldtaskid(), output);
  }

  // optional int32 taskStatus = 4;
  if (has_taskstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->taskstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBattleTaskInforBack)
}

::google::protobuf::uint8* GCBattleTaskInforBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBattleTaskInforBack)
  // optional .BattleTask battleTask = 1;
  if (has_battletask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battletask(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 oldTaskID = 3;
  if (has_oldtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oldtaskid(), target);
  }

  // optional int32 taskStatus = 4;
  if (has_taskstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->taskstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBattleTaskInforBack)
  return target;
}

int GCBattleTaskInforBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BattleTask battleTask = 1;
    if (has_battletask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battletask());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 oldTaskID = 3;
    if (has_oldtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oldtaskid());
    }

    // optional int32 taskStatus = 4;
    if (has_taskstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBattleTaskInforBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBattleTaskInforBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBattleTaskInforBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBattleTaskInforBack::MergeFrom(const GCBattleTaskInforBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battletask()) {
      mutable_battletask()->::BattleTask::MergeFrom(from.battletask());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oldtaskid()) {
      set_oldtaskid(from.oldtaskid());
    }
    if (from.has_taskstatus()) {
      set_taskstatus(from.taskstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBattleTaskInforBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBattleTaskInforBack::CopyFrom(const GCBattleTaskInforBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBattleTaskInforBack::IsInitialized() const {

  return true;
}

void GCBattleTaskInforBack::Swap(GCBattleTaskInforBack* other) {
  if (other != this) {
    std::swap(battletask_, other->battletask_);
    std::swap(type_, other->type_);
    std::swap(oldtaskid_, other->oldtaskid_);
    std::swap(taskstatus_, other->taskstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBattleTaskInforBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBattleTaskInforBack_descriptor_;
  metadata.reflection = GCBattleTaskInforBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
