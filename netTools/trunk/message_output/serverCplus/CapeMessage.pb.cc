// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CapeMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CapeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CapeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCapeLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCapeLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCapeLevelUpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCapeLevelUpResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CapeMessage_2eproto() {
  protobuf_AddDesc_CapeMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CapeMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CapeInfo_descriptor_ = file->message_type(0);
  static const int CapeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapeInfo, capelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapeInfo, luckvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapeInfo, maxluck_),
  };
  CapeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapeInfo_descriptor_,
      CapeInfo::default_instance_,
      CapeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapeInfo));
  CGCapeLevelUp_descriptor_ = file->message_type(1);
  static const int CGCapeLevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCapeLevelUp, autoreplace_),
  };
  CGCapeLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCapeLevelUp_descriptor_,
      CGCapeLevelUp::default_instance_,
      CGCapeLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCapeLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCapeLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCapeLevelUp));
  GCCapeLevelUpResult_descriptor_ = file->message_type(2);
  static const int GCCapeLevelUpResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCapeLevelUpResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCapeLevelUpResult, capeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCapeLevelUpResult, operate_),
  };
  GCCapeLevelUpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCapeLevelUpResult_descriptor_,
      GCCapeLevelUpResult::default_instance_,
      GCCapeLevelUpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCapeLevelUpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCapeLevelUpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCapeLevelUpResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CapeMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapeInfo_descriptor_, &CapeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCapeLevelUp_descriptor_, &CGCapeLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCapeLevelUpResult_descriptor_, &GCCapeLevelUpResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CapeMessage_2eproto() {
  delete CapeInfo::default_instance_;
  delete CapeInfo_reflection_;
  delete CGCapeLevelUp::default_instance_;
  delete CGCapeLevelUp_reflection_;
  delete GCCapeLevelUpResult::default_instance_;
  delete GCCapeLevelUpResult_reflection_;
}

void protobuf_AddDesc_CapeMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CapeMessage.proto\"A\n\010CapeInfo\022\021\n\tcapeL"
    "evel\030\001 \001(\005\022\021\n\tluckValue\030\002 \001(\005\022\017\n\007maxLuck"
    "\030\003 \001(\005\"$\n\rCGCapeLevelUp\022\023\n\013autoReplace\030\001"
    " \001(\005\"S\n\023GCCapeLevelUpResult\022\016\n\006result\030\001 "
    "\001(\005\022\033\n\010capeInfo\030\002 \001(\0132\t.CapeInfo\022\017\n\007oper"
    "ate\030\003 \001(\005B\031\n\027com.mile.common.message", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CapeMessage.proto", &protobuf_RegisterTypes);
  CapeInfo::default_instance_ = new CapeInfo();
  CGCapeLevelUp::default_instance_ = new CGCapeLevelUp();
  GCCapeLevelUpResult::default_instance_ = new GCCapeLevelUpResult();
  CapeInfo::default_instance_->InitAsDefaultInstance();
  CGCapeLevelUp::default_instance_->InitAsDefaultInstance();
  GCCapeLevelUpResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CapeMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CapeMessage_2eproto {
  StaticDescriptorInitializer_CapeMessage_2eproto() {
    protobuf_AddDesc_CapeMessage_2eproto();
  }
} static_descriptor_initializer_CapeMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CapeInfo::kCapeLevelFieldNumber;
const int CapeInfo::kLuckValueFieldNumber;
const int CapeInfo::kMaxLuckFieldNumber;
#endif  // !_MSC_VER

CapeInfo::CapeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CapeInfo)
}

void CapeInfo::InitAsDefaultInstance() {
}

CapeInfo::CapeInfo(const CapeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CapeInfo)
}

void CapeInfo::SharedCtor() {
  _cached_size_ = 0;
  capelevel_ = 0;
  luckvalue_ = 0;
  maxluck_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapeInfo::~CapeInfo() {
  // @@protoc_insertion_point(destructor:CapeInfo)
  SharedDtor();
}

void CapeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CapeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapeInfo_descriptor_;
}

const CapeInfo& CapeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CapeMessage_2eproto();
  return *default_instance_;
}

CapeInfo* CapeInfo::default_instance_ = NULL;

CapeInfo* CapeInfo::New() const {
  return new CapeInfo;
}

void CapeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CapeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(capelevel_, maxluck_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CapeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CapeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 capeLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capelevel_)));
          set_has_capelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_luckValue;
        break;
      }

      // optional int32 luckValue = 2;
      case 2: {
        if (tag == 16) {
         parse_luckValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckvalue_)));
          set_has_luckvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxLuck;
        break;
      }

      // optional int32 maxLuck = 3;
      case 3: {
        if (tag == 24) {
         parse_maxLuck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxluck_)));
          set_has_maxluck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CapeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CapeInfo)
  return false;
#undef DO_
}

void CapeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CapeInfo)
  // optional int32 capeLevel = 1;
  if (has_capelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->capelevel(), output);
  }

  // optional int32 luckValue = 2;
  if (has_luckvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->luckvalue(), output);
  }

  // optional int32 maxLuck = 3;
  if (has_maxluck()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxluck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CapeInfo)
}

::google::protobuf::uint8* CapeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CapeInfo)
  // optional int32 capeLevel = 1;
  if (has_capelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->capelevel(), target);
  }

  // optional int32 luckValue = 2;
  if (has_luckvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->luckvalue(), target);
  }

  // optional int32 maxLuck = 3;
  if (has_maxluck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxluck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CapeInfo)
  return target;
}

int CapeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 capeLevel = 1;
    if (has_capelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capelevel());
    }

    // optional int32 luckValue = 2;
    if (has_luckvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luckvalue());
    }

    // optional int32 maxLuck = 3;
    if (has_maxluck()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxluck());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CapeInfo::MergeFrom(const CapeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capelevel()) {
      set_capelevel(from.capelevel());
    }
    if (from.has_luckvalue()) {
      set_luckvalue(from.luckvalue());
    }
    if (from.has_maxluck()) {
      set_maxluck(from.maxluck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CapeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CapeInfo::CopyFrom(const CapeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapeInfo::IsInitialized() const {

  return true;
}

void CapeInfo::Swap(CapeInfo* other) {
  if (other != this) {
    std::swap(capelevel_, other->capelevel_);
    std::swap(luckvalue_, other->luckvalue_);
    std::swap(maxluck_, other->maxluck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CapeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapeInfo_descriptor_;
  metadata.reflection = CapeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCapeLevelUp::kAutoReplaceFieldNumber;
#endif  // !_MSC_VER

CGCapeLevelUp::CGCapeLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCapeLevelUp)
}

void CGCapeLevelUp::InitAsDefaultInstance() {
}

CGCapeLevelUp::CGCapeLevelUp(const CGCapeLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCapeLevelUp)
}

void CGCapeLevelUp::SharedCtor() {
  _cached_size_ = 0;
  autoreplace_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCapeLevelUp::~CGCapeLevelUp() {
  // @@protoc_insertion_point(destructor:CGCapeLevelUp)
  SharedDtor();
}

void CGCapeLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCapeLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCapeLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCapeLevelUp_descriptor_;
}

const CGCapeLevelUp& CGCapeLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CapeMessage_2eproto();
  return *default_instance_;
}

CGCapeLevelUp* CGCapeLevelUp::default_instance_ = NULL;

CGCapeLevelUp* CGCapeLevelUp::New() const {
  return new CGCapeLevelUp;
}

void CGCapeLevelUp::Clear() {
  autoreplace_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCapeLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCapeLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoReplace = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoreplace_)));
          set_has_autoreplace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCapeLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCapeLevelUp)
  return false;
#undef DO_
}

void CGCapeLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCapeLevelUp)
  // optional int32 autoReplace = 1;
  if (has_autoreplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autoreplace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCapeLevelUp)
}

::google::protobuf::uint8* CGCapeLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCapeLevelUp)
  // optional int32 autoReplace = 1;
  if (has_autoreplace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autoreplace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCapeLevelUp)
  return target;
}

int CGCapeLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoReplace = 1;
    if (has_autoreplace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoreplace());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCapeLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCapeLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCapeLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCapeLevelUp::MergeFrom(const CGCapeLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autoreplace()) {
      set_autoreplace(from.autoreplace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCapeLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCapeLevelUp::CopyFrom(const CGCapeLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCapeLevelUp::IsInitialized() const {

  return true;
}

void CGCapeLevelUp::Swap(CGCapeLevelUp* other) {
  if (other != this) {
    std::swap(autoreplace_, other->autoreplace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCapeLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCapeLevelUp_descriptor_;
  metadata.reflection = CGCapeLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCapeLevelUpResult::kResultFieldNumber;
const int GCCapeLevelUpResult::kCapeInfoFieldNumber;
const int GCCapeLevelUpResult::kOperateFieldNumber;
#endif  // !_MSC_VER

GCCapeLevelUpResult::GCCapeLevelUpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCapeLevelUpResult)
}

void GCCapeLevelUpResult::InitAsDefaultInstance() {
  capeinfo_ = const_cast< ::CapeInfo*>(&::CapeInfo::default_instance());
}

GCCapeLevelUpResult::GCCapeLevelUpResult(const GCCapeLevelUpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCapeLevelUpResult)
}

void GCCapeLevelUpResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  capeinfo_ = NULL;
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCapeLevelUpResult::~GCCapeLevelUpResult() {
  // @@protoc_insertion_point(destructor:GCCapeLevelUpResult)
  SharedDtor();
}

void GCCapeLevelUpResult::SharedDtor() {
  if (this != default_instance_) {
    delete capeinfo_;
  }
}

void GCCapeLevelUpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCapeLevelUpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCapeLevelUpResult_descriptor_;
}

const GCCapeLevelUpResult& GCCapeLevelUpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CapeMessage_2eproto();
  return *default_instance_;
}

GCCapeLevelUpResult* GCCapeLevelUpResult::default_instance_ = NULL;

GCCapeLevelUpResult* GCCapeLevelUpResult::New() const {
  return new GCCapeLevelUpResult;
}

void GCCapeLevelUpResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCapeLevelUpResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, operate_);
    if (has_capeinfo()) {
      if (capeinfo_ != NULL) capeinfo_->::CapeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCapeLevelUpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCapeLevelUpResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_capeInfo;
        break;
      }

      // optional .CapeInfo capeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_capeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // optional int32 operate = 3;
      case 3: {
        if (tag == 24) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCapeLevelUpResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCapeLevelUpResult)
  return false;
#undef DO_
}

void GCCapeLevelUpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCapeLevelUpResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .CapeInfo capeInfo = 2;
  if (has_capeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->capeinfo(), output);
  }

  // optional int32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCapeLevelUpResult)
}

::google::protobuf::uint8* GCCapeLevelUpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCapeLevelUpResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .CapeInfo capeInfo = 2;
  if (has_capeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->capeinfo(), target);
  }

  // optional int32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCapeLevelUpResult)
  return target;
}

int GCCapeLevelUpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .CapeInfo capeInfo = 2;
    if (has_capeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->capeinfo());
    }

    // optional int32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCapeLevelUpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCapeLevelUpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCapeLevelUpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCapeLevelUpResult::MergeFrom(const GCCapeLevelUpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_capeinfo()) {
      mutable_capeinfo()->::CapeInfo::MergeFrom(from.capeinfo());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCapeLevelUpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCapeLevelUpResult::CopyFrom(const GCCapeLevelUpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCapeLevelUpResult::IsInitialized() const {

  return true;
}

void GCCapeLevelUpResult::Swap(GCCapeLevelUpResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(capeinfo_, other->capeinfo_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCapeLevelUpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCapeLevelUpResult_descriptor_;
  metadata.reflection = GCCapeLevelUpResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
