// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CapeMessage.proto

#ifndef PROTOBUF_CapeMessage_2eproto__INCLUDED
#define PROTOBUF_CapeMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CapeMessage_2eproto();
void protobuf_AssignDesc_CapeMessage_2eproto();
void protobuf_ShutdownFile_CapeMessage_2eproto();

class CapeInfo;
class CGCapeLevelUp;
class GCCapeLevelUpResult;

// ===================================================================

class CapeInfo : public ::google::protobuf::Message {
 public:
  CapeInfo();
  virtual ~CapeInfo();

  CapeInfo(const CapeInfo& from);

  inline CapeInfo& operator=(const CapeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapeInfo& default_instance();

  void Swap(CapeInfo* other);

  // implements Message ----------------------------------------------

  CapeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapeInfo& from);
  void MergeFrom(const CapeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 capeLevel = 1;
  inline bool has_capelevel() const;
  inline void clear_capelevel();
  static const int kCapeLevelFieldNumber = 1;
  inline ::google::protobuf::int32 capelevel() const;
  inline void set_capelevel(::google::protobuf::int32 value);

  // optional int32 luckValue = 2;
  inline bool has_luckvalue() const;
  inline void clear_luckvalue();
  static const int kLuckValueFieldNumber = 2;
  inline ::google::protobuf::int32 luckvalue() const;
  inline void set_luckvalue(::google::protobuf::int32 value);

  // optional int32 maxLuck = 3;
  inline bool has_maxluck() const;
  inline void clear_maxluck();
  static const int kMaxLuckFieldNumber = 3;
  inline ::google::protobuf::int32 maxluck() const;
  inline void set_maxluck(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CapeInfo)
 private:
  inline void set_has_capelevel();
  inline void clear_has_capelevel();
  inline void set_has_luckvalue();
  inline void clear_has_luckvalue();
  inline void set_has_maxluck();
  inline void clear_has_maxluck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 capelevel_;
  ::google::protobuf::int32 luckvalue_;
  ::google::protobuf::int32 maxluck_;
  friend void  protobuf_AddDesc_CapeMessage_2eproto();
  friend void protobuf_AssignDesc_CapeMessage_2eproto();
  friend void protobuf_ShutdownFile_CapeMessage_2eproto();

  void InitAsDefaultInstance();
  static CapeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGCapeLevelUp : public ::google::protobuf::Message {
 public:
  CGCapeLevelUp();
  virtual ~CGCapeLevelUp();

  CGCapeLevelUp(const CGCapeLevelUp& from);

  inline CGCapeLevelUp& operator=(const CGCapeLevelUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCapeLevelUp& default_instance();

  void Swap(CGCapeLevelUp* other);

  // implements Message ----------------------------------------------

  CGCapeLevelUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCapeLevelUp& from);
  void MergeFrom(const CGCapeLevelUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 autoReplace = 1;
  inline bool has_autoreplace() const;
  inline void clear_autoreplace();
  static const int kAutoReplaceFieldNumber = 1;
  inline ::google::protobuf::int32 autoreplace() const;
  inline void set_autoreplace(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGCapeLevelUp)
 private:
  inline void set_has_autoreplace();
  inline void clear_has_autoreplace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 autoreplace_;
  friend void  protobuf_AddDesc_CapeMessage_2eproto();
  friend void protobuf_AssignDesc_CapeMessage_2eproto();
  friend void protobuf_ShutdownFile_CapeMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCapeLevelUp* default_instance_;
};
// -------------------------------------------------------------------

class GCCapeLevelUpResult : public ::google::protobuf::Message {
 public:
  GCCapeLevelUpResult();
  virtual ~GCCapeLevelUpResult();

  GCCapeLevelUpResult(const GCCapeLevelUpResult& from);

  inline GCCapeLevelUpResult& operator=(const GCCapeLevelUpResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCapeLevelUpResult& default_instance();

  void Swap(GCCapeLevelUpResult* other);

  // implements Message ----------------------------------------------

  GCCapeLevelUpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCapeLevelUpResult& from);
  void MergeFrom(const GCCapeLevelUpResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .CapeInfo capeInfo = 2;
  inline bool has_capeinfo() const;
  inline void clear_capeinfo();
  static const int kCapeInfoFieldNumber = 2;
  inline const ::CapeInfo& capeinfo() const;
  inline ::CapeInfo* mutable_capeinfo();
  inline ::CapeInfo* release_capeinfo();
  inline void set_allocated_capeinfo(::CapeInfo* capeinfo);

  // optional int32 operate = 3;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 3;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCCapeLevelUpResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_capeinfo();
  inline void clear_has_capeinfo();
  inline void set_has_operate();
  inline void clear_has_operate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CapeInfo* capeinfo_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 operate_;
  friend void  protobuf_AddDesc_CapeMessage_2eproto();
  friend void protobuf_AssignDesc_CapeMessage_2eproto();
  friend void protobuf_ShutdownFile_CapeMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCapeLevelUpResult* default_instance_;
};
// ===================================================================


// ===================================================================

// CapeInfo

// optional int32 capeLevel = 1;
inline bool CapeInfo::has_capelevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapeInfo::set_has_capelevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapeInfo::clear_has_capelevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapeInfo::clear_capelevel() {
  capelevel_ = 0;
  clear_has_capelevel();
}
inline ::google::protobuf::int32 CapeInfo::capelevel() const {
  // @@protoc_insertion_point(field_get:CapeInfo.capeLevel)
  return capelevel_;
}
inline void CapeInfo::set_capelevel(::google::protobuf::int32 value) {
  set_has_capelevel();
  capelevel_ = value;
  // @@protoc_insertion_point(field_set:CapeInfo.capeLevel)
}

// optional int32 luckValue = 2;
inline bool CapeInfo::has_luckvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapeInfo::set_has_luckvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CapeInfo::clear_has_luckvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CapeInfo::clear_luckvalue() {
  luckvalue_ = 0;
  clear_has_luckvalue();
}
inline ::google::protobuf::int32 CapeInfo::luckvalue() const {
  // @@protoc_insertion_point(field_get:CapeInfo.luckValue)
  return luckvalue_;
}
inline void CapeInfo::set_luckvalue(::google::protobuf::int32 value) {
  set_has_luckvalue();
  luckvalue_ = value;
  // @@protoc_insertion_point(field_set:CapeInfo.luckValue)
}

// optional int32 maxLuck = 3;
inline bool CapeInfo::has_maxluck() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapeInfo::set_has_maxluck() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CapeInfo::clear_has_maxluck() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CapeInfo::clear_maxluck() {
  maxluck_ = 0;
  clear_has_maxluck();
}
inline ::google::protobuf::int32 CapeInfo::maxluck() const {
  // @@protoc_insertion_point(field_get:CapeInfo.maxLuck)
  return maxluck_;
}
inline void CapeInfo::set_maxluck(::google::protobuf::int32 value) {
  set_has_maxluck();
  maxluck_ = value;
  // @@protoc_insertion_point(field_set:CapeInfo.maxLuck)
}

// -------------------------------------------------------------------

// CGCapeLevelUp

// optional int32 autoReplace = 1;
inline bool CGCapeLevelUp::has_autoreplace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCapeLevelUp::set_has_autoreplace() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCapeLevelUp::clear_has_autoreplace() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCapeLevelUp::clear_autoreplace() {
  autoreplace_ = 0;
  clear_has_autoreplace();
}
inline ::google::protobuf::int32 CGCapeLevelUp::autoreplace() const {
  // @@protoc_insertion_point(field_get:CGCapeLevelUp.autoReplace)
  return autoreplace_;
}
inline void CGCapeLevelUp::set_autoreplace(::google::protobuf::int32 value) {
  set_has_autoreplace();
  autoreplace_ = value;
  // @@protoc_insertion_point(field_set:CGCapeLevelUp.autoReplace)
}

// -------------------------------------------------------------------

// GCCapeLevelUpResult

// optional int32 result = 1;
inline bool GCCapeLevelUpResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCapeLevelUpResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCapeLevelUpResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCapeLevelUpResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCCapeLevelUpResult::result() const {
  // @@protoc_insertion_point(field_get:GCCapeLevelUpResult.result)
  return result_;
}
inline void GCCapeLevelUpResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCCapeLevelUpResult.result)
}

// optional .CapeInfo capeInfo = 2;
inline bool GCCapeLevelUpResult::has_capeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCCapeLevelUpResult::set_has_capeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCCapeLevelUpResult::clear_has_capeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCCapeLevelUpResult::clear_capeinfo() {
  if (capeinfo_ != NULL) capeinfo_->::CapeInfo::Clear();
  clear_has_capeinfo();
}
inline const ::CapeInfo& GCCapeLevelUpResult::capeinfo() const {
  // @@protoc_insertion_point(field_get:GCCapeLevelUpResult.capeInfo)
  return capeinfo_ != NULL ? *capeinfo_ : *default_instance_->capeinfo_;
}
inline ::CapeInfo* GCCapeLevelUpResult::mutable_capeinfo() {
  set_has_capeinfo();
  if (capeinfo_ == NULL) capeinfo_ = new ::CapeInfo;
  // @@protoc_insertion_point(field_mutable:GCCapeLevelUpResult.capeInfo)
  return capeinfo_;
}
inline ::CapeInfo* GCCapeLevelUpResult::release_capeinfo() {
  clear_has_capeinfo();
  ::CapeInfo* temp = capeinfo_;
  capeinfo_ = NULL;
  return temp;
}
inline void GCCapeLevelUpResult::set_allocated_capeinfo(::CapeInfo* capeinfo) {
  delete capeinfo_;
  capeinfo_ = capeinfo;
  if (capeinfo) {
    set_has_capeinfo();
  } else {
    clear_has_capeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCCapeLevelUpResult.capeInfo)
}

// optional int32 operate = 3;
inline bool GCCapeLevelUpResult::has_operate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCCapeLevelUpResult::set_has_operate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCCapeLevelUpResult::clear_has_operate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCCapeLevelUpResult::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCCapeLevelUpResult::operate() const {
  // @@protoc_insertion_point(field_get:GCCapeLevelUpResult.operate)
  return operate_;
}
inline void GCCapeLevelUpResult::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCCapeLevelUpResult.operate)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CapeMessage_2eproto__INCLUDED
