// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChallengeBatchMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChallengeBatchMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGChallengeBatchOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChallengeBatchOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChallengeBatchOperateBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChallengeBatchOperateBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChallengeBatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChallengeBatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChallengeBatchReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChallengeBatchReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChallengeBatchRefreshTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChallengeBatchRefreshTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChallengeBatchMessage_2eproto() {
  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChallengeBatchMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGChallengeBatchOperate_descriptor_ = file->message_type(0);
  static const int CGChallengeBatchOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChallengeBatchOperate, type_),
  };
  CGChallengeBatchOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChallengeBatchOperate_descriptor_,
      CGChallengeBatchOperate::default_instance_,
      CGChallengeBatchOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChallengeBatchOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChallengeBatchOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChallengeBatchOperate));
  GCChallengeBatchOperateBack_descriptor_ = file->message_type(1);
  static const int GCChallengeBatchOperateBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchOperateBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchOperateBack, result_),
  };
  GCChallengeBatchOperateBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChallengeBatchOperateBack_descriptor_,
      GCChallengeBatchOperateBack::default_instance_,
      GCChallengeBatchOperateBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchOperateBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchOperateBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChallengeBatchOperateBack));
  GCChallengeBatchInfo_descriptor_ = file->message_type(2);
  static const int GCChallengeBatchInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, bo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, mopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, maxbo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, maxmopnum_),
  };
  GCChallengeBatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChallengeBatchInfo_descriptor_,
      GCChallengeBatchInfo::default_instance_,
      GCChallengeBatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChallengeBatchInfo));
  GCChallengeBatchReward_descriptor_ = file->message_type(3);
  static const int GCChallengeBatchReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, bo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, mopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, rewarditems_),
  };
  GCChallengeBatchReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChallengeBatchReward_descriptor_,
      GCChallengeBatchReward::default_instance_,
      GCChallengeBatchReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChallengeBatchReward));
  GCChallengeBatchRefreshTime_descriptor_ = file->message_type(4);
  static const int GCChallengeBatchRefreshTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchRefreshTime, totaltime_),
  };
  GCChallengeBatchRefreshTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChallengeBatchRefreshTime_descriptor_,
      GCChallengeBatchRefreshTime::default_instance_,
      GCChallengeBatchRefreshTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchRefreshTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChallengeBatchRefreshTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChallengeBatchRefreshTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChallengeBatchMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChallengeBatchOperate_descriptor_, &CGChallengeBatchOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChallengeBatchOperateBack_descriptor_, &GCChallengeBatchOperateBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChallengeBatchInfo_descriptor_, &GCChallengeBatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChallengeBatchReward_descriptor_, &GCChallengeBatchReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChallengeBatchRefreshTime_descriptor_, &GCChallengeBatchRefreshTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto() {
  delete CGChallengeBatchOperate::default_instance_;
  delete CGChallengeBatchOperate_reflection_;
  delete GCChallengeBatchOperateBack::default_instance_;
  delete GCChallengeBatchOperateBack_reflection_;
  delete GCChallengeBatchInfo::default_instance_;
  delete GCChallengeBatchInfo_reflection_;
  delete GCChallengeBatchReward::default_instance_;
  delete GCChallengeBatchReward_reflection_;
  delete GCChallengeBatchRefreshTime::default_instance_;
  delete GCChallengeBatchRefreshTime_reflection_;
}

void protobuf_AddDesc_ChallengeBatchMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ChallengeBatchMessage.proto\032\022InnerMess"
    "age.proto\"\'\n\027CGChallengeBatchOperate\022\014\n\004"
    "type\030\001 \001(\005\";\n\033GCChallengeBatchOperateBac"
    "k\022\014\n\004type\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\"T\n\024GCCha"
    "llengeBatchInfo\022\n\n\002bo\030\001 \001(\005\022\016\n\006mopNum\030\002 "
    "\001(\005\022\r\n\005maxBo\030\003 \001(\005\022\021\n\tmaxMopNum\030\004 \001(\005\"u\n"
    "\026GCChallengeBatchReward\022\017\n\007operate\030\001 \001(\005"
    "\022\016\n\006result\030\002 \001(\005\022\n\n\002bo\030\003 \001(\005\022\016\n\006mopNum\030\004"
    " \001(\005\022\036\n\013rewardItems\030\005 \003(\0132\t.Iteminfo\"0\n\033"
    "GCChallengeBatchRefreshTime\022\021\n\ttotalTime"
    "\030\001 \001(\005B\031\n\027com.mile.common.message", 433);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChallengeBatchMessage.proto", &protobuf_RegisterTypes);
  CGChallengeBatchOperate::default_instance_ = new CGChallengeBatchOperate();
  GCChallengeBatchOperateBack::default_instance_ = new GCChallengeBatchOperateBack();
  GCChallengeBatchInfo::default_instance_ = new GCChallengeBatchInfo();
  GCChallengeBatchReward::default_instance_ = new GCChallengeBatchReward();
  GCChallengeBatchRefreshTime::default_instance_ = new GCChallengeBatchRefreshTime();
  CGChallengeBatchOperate::default_instance_->InitAsDefaultInstance();
  GCChallengeBatchOperateBack::default_instance_->InitAsDefaultInstance();
  GCChallengeBatchInfo::default_instance_->InitAsDefaultInstance();
  GCChallengeBatchReward::default_instance_->InitAsDefaultInstance();
  GCChallengeBatchRefreshTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChallengeBatchMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChallengeBatchMessage_2eproto {
  StaticDescriptorInitializer_ChallengeBatchMessage_2eproto() {
    protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  }
} static_descriptor_initializer_ChallengeBatchMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGChallengeBatchOperate::kTypeFieldNumber;
#endif  // !_MSC_VER

CGChallengeBatchOperate::CGChallengeBatchOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChallengeBatchOperate)
}

void CGChallengeBatchOperate::InitAsDefaultInstance() {
}

CGChallengeBatchOperate::CGChallengeBatchOperate(const CGChallengeBatchOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChallengeBatchOperate)
}

void CGChallengeBatchOperate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChallengeBatchOperate::~CGChallengeBatchOperate() {
  // @@protoc_insertion_point(destructor:CGChallengeBatchOperate)
  SharedDtor();
}

void CGChallengeBatchOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChallengeBatchOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChallengeBatchOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChallengeBatchOperate_descriptor_;
}

const CGChallengeBatchOperate& CGChallengeBatchOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  return *default_instance_;
}

CGChallengeBatchOperate* CGChallengeBatchOperate::default_instance_ = NULL;

CGChallengeBatchOperate* CGChallengeBatchOperate::New() const {
  return new CGChallengeBatchOperate;
}

void CGChallengeBatchOperate::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChallengeBatchOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChallengeBatchOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChallengeBatchOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChallengeBatchOperate)
  return false;
#undef DO_
}

void CGChallengeBatchOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChallengeBatchOperate)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChallengeBatchOperate)
}

::google::protobuf::uint8* CGChallengeBatchOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChallengeBatchOperate)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChallengeBatchOperate)
  return target;
}

int CGChallengeBatchOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChallengeBatchOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChallengeBatchOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChallengeBatchOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChallengeBatchOperate::MergeFrom(const CGChallengeBatchOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChallengeBatchOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChallengeBatchOperate::CopyFrom(const CGChallengeBatchOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChallengeBatchOperate::IsInitialized() const {

  return true;
}

void CGChallengeBatchOperate::Swap(CGChallengeBatchOperate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChallengeBatchOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChallengeBatchOperate_descriptor_;
  metadata.reflection = CGChallengeBatchOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChallengeBatchOperateBack::kTypeFieldNumber;
const int GCChallengeBatchOperateBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCChallengeBatchOperateBack::GCChallengeBatchOperateBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChallengeBatchOperateBack)
}

void GCChallengeBatchOperateBack::InitAsDefaultInstance() {
}

GCChallengeBatchOperateBack::GCChallengeBatchOperateBack(const GCChallengeBatchOperateBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChallengeBatchOperateBack)
}

void GCChallengeBatchOperateBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChallengeBatchOperateBack::~GCChallengeBatchOperateBack() {
  // @@protoc_insertion_point(destructor:GCChallengeBatchOperateBack)
  SharedDtor();
}

void GCChallengeBatchOperateBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChallengeBatchOperateBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChallengeBatchOperateBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChallengeBatchOperateBack_descriptor_;
}

const GCChallengeBatchOperateBack& GCChallengeBatchOperateBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  return *default_instance_;
}

GCChallengeBatchOperateBack* GCChallengeBatchOperateBack::default_instance_ = NULL;

GCChallengeBatchOperateBack* GCChallengeBatchOperateBack::New() const {
  return new GCChallengeBatchOperateBack;
}

void GCChallengeBatchOperateBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChallengeBatchOperateBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChallengeBatchOperateBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChallengeBatchOperateBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChallengeBatchOperateBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChallengeBatchOperateBack)
  return false;
#undef DO_
}

void GCChallengeBatchOperateBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChallengeBatchOperateBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChallengeBatchOperateBack)
}

::google::protobuf::uint8* GCChallengeBatchOperateBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChallengeBatchOperateBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChallengeBatchOperateBack)
  return target;
}

int GCChallengeBatchOperateBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChallengeBatchOperateBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChallengeBatchOperateBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChallengeBatchOperateBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChallengeBatchOperateBack::MergeFrom(const GCChallengeBatchOperateBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChallengeBatchOperateBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChallengeBatchOperateBack::CopyFrom(const GCChallengeBatchOperateBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChallengeBatchOperateBack::IsInitialized() const {

  return true;
}

void GCChallengeBatchOperateBack::Swap(GCChallengeBatchOperateBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChallengeBatchOperateBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChallengeBatchOperateBack_descriptor_;
  metadata.reflection = GCChallengeBatchOperateBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChallengeBatchInfo::kBoFieldNumber;
const int GCChallengeBatchInfo::kMopNumFieldNumber;
const int GCChallengeBatchInfo::kMaxBoFieldNumber;
const int GCChallengeBatchInfo::kMaxMopNumFieldNumber;
#endif  // !_MSC_VER

GCChallengeBatchInfo::GCChallengeBatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChallengeBatchInfo)
}

void GCChallengeBatchInfo::InitAsDefaultInstance() {
}

GCChallengeBatchInfo::GCChallengeBatchInfo(const GCChallengeBatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChallengeBatchInfo)
}

void GCChallengeBatchInfo::SharedCtor() {
  _cached_size_ = 0;
  bo_ = 0;
  mopnum_ = 0;
  maxbo_ = 0;
  maxmopnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChallengeBatchInfo::~GCChallengeBatchInfo() {
  // @@protoc_insertion_point(destructor:GCChallengeBatchInfo)
  SharedDtor();
}

void GCChallengeBatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChallengeBatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChallengeBatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChallengeBatchInfo_descriptor_;
}

const GCChallengeBatchInfo& GCChallengeBatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  return *default_instance_;
}

GCChallengeBatchInfo* GCChallengeBatchInfo::default_instance_ = NULL;

GCChallengeBatchInfo* GCChallengeBatchInfo::New() const {
  return new GCChallengeBatchInfo;
}

void GCChallengeBatchInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChallengeBatchInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bo_, maxmopnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChallengeBatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChallengeBatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bo_)));
          set_has_bo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mopNum;
        break;
      }

      // optional int32 mopNum = 2;
      case 2: {
        if (tag == 16) {
         parse_mopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopnum_)));
          set_has_mopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxBo;
        break;
      }

      // optional int32 maxBo = 3;
      case 3: {
        if (tag == 24) {
         parse_maxBo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbo_)));
          set_has_maxbo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxMopNum;
        break;
      }

      // optional int32 maxMopNum = 4;
      case 4: {
        if (tag == 32) {
         parse_maxMopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmopnum_)));
          set_has_maxmopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChallengeBatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChallengeBatchInfo)
  return false;
#undef DO_
}

void GCChallengeBatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChallengeBatchInfo)
  // optional int32 bo = 1;
  if (has_bo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bo(), output);
  }

  // optional int32 mopNum = 2;
  if (has_mopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mopnum(), output);
  }

  // optional int32 maxBo = 3;
  if (has_maxbo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxbo(), output);
  }

  // optional int32 maxMopNum = 4;
  if (has_maxmopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxmopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChallengeBatchInfo)
}

::google::protobuf::uint8* GCChallengeBatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChallengeBatchInfo)
  // optional int32 bo = 1;
  if (has_bo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bo(), target);
  }

  // optional int32 mopNum = 2;
  if (has_mopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mopnum(), target);
  }

  // optional int32 maxBo = 3;
  if (has_maxbo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxbo(), target);
  }

  // optional int32 maxMopNum = 4;
  if (has_maxmopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxmopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChallengeBatchInfo)
  return target;
}

int GCChallengeBatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bo = 1;
    if (has_bo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bo());
    }

    // optional int32 mopNum = 2;
    if (has_mopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopnum());
    }

    // optional int32 maxBo = 3;
    if (has_maxbo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbo());
    }

    // optional int32 maxMopNum = 4;
    if (has_maxmopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChallengeBatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChallengeBatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChallengeBatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChallengeBatchInfo::MergeFrom(const GCChallengeBatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bo()) {
      set_bo(from.bo());
    }
    if (from.has_mopnum()) {
      set_mopnum(from.mopnum());
    }
    if (from.has_maxbo()) {
      set_maxbo(from.maxbo());
    }
    if (from.has_maxmopnum()) {
      set_maxmopnum(from.maxmopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChallengeBatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChallengeBatchInfo::CopyFrom(const GCChallengeBatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChallengeBatchInfo::IsInitialized() const {

  return true;
}

void GCChallengeBatchInfo::Swap(GCChallengeBatchInfo* other) {
  if (other != this) {
    std::swap(bo_, other->bo_);
    std::swap(mopnum_, other->mopnum_);
    std::swap(maxbo_, other->maxbo_);
    std::swap(maxmopnum_, other->maxmopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChallengeBatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChallengeBatchInfo_descriptor_;
  metadata.reflection = GCChallengeBatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChallengeBatchReward::kOperateFieldNumber;
const int GCChallengeBatchReward::kResultFieldNumber;
const int GCChallengeBatchReward::kBoFieldNumber;
const int GCChallengeBatchReward::kMopNumFieldNumber;
const int GCChallengeBatchReward::kRewardItemsFieldNumber;
#endif  // !_MSC_VER

GCChallengeBatchReward::GCChallengeBatchReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChallengeBatchReward)
}

void GCChallengeBatchReward::InitAsDefaultInstance() {
}

GCChallengeBatchReward::GCChallengeBatchReward(const GCChallengeBatchReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChallengeBatchReward)
}

void GCChallengeBatchReward::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  result_ = 0;
  bo_ = 0;
  mopnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChallengeBatchReward::~GCChallengeBatchReward() {
  // @@protoc_insertion_point(destructor:GCChallengeBatchReward)
  SharedDtor();
}

void GCChallengeBatchReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChallengeBatchReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChallengeBatchReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChallengeBatchReward_descriptor_;
}

const GCChallengeBatchReward& GCChallengeBatchReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  return *default_instance_;
}

GCChallengeBatchReward* GCChallengeBatchReward::default_instance_ = NULL;

GCChallengeBatchReward* GCChallengeBatchReward::New() const {
  return new GCChallengeBatchReward;
}

void GCChallengeBatchReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChallengeBatchReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, mopnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewarditems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChallengeBatchReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChallengeBatchReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bo;
        break;
      }

      // optional int32 bo = 3;
      case 3: {
        if (tag == 24) {
         parse_bo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bo_)));
          set_has_bo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mopNum;
        break;
      }

      // optional int32 mopNum = 4;
      case 4: {
        if (tag == 32) {
         parse_mopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopnum_)));
          set_has_mopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewardItems;
        break;
      }

      // repeated .Iteminfo rewardItems = 5;
      case 5: {
        if (tag == 42) {
         parse_rewardItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarditems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rewardItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChallengeBatchReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChallengeBatchReward)
  return false;
#undef DO_
}

void GCChallengeBatchReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChallengeBatchReward)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 bo = 3;
  if (has_bo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bo(), output);
  }

  // optional int32 mopNum = 4;
  if (has_mopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mopnum(), output);
  }

  // repeated .Iteminfo rewardItems = 5;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewarditems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChallengeBatchReward)
}

::google::protobuf::uint8* GCChallengeBatchReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChallengeBatchReward)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 bo = 3;
  if (has_bo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bo(), target);
  }

  // optional int32 mopNum = 4;
  if (has_mopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mopnum(), target);
  }

  // repeated .Iteminfo rewardItems = 5;
  for (int i = 0; i < this->rewarditems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewarditems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChallengeBatchReward)
  return target;
}

int GCChallengeBatchReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 bo = 3;
    if (has_bo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bo());
    }

    // optional int32 mopNum = 4;
    if (has_mopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopnum());
    }

  }
  // repeated .Iteminfo rewardItems = 5;
  total_size += 1 * this->rewarditems_size();
  for (int i = 0; i < this->rewarditems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarditems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChallengeBatchReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChallengeBatchReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChallengeBatchReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChallengeBatchReward::MergeFrom(const GCChallengeBatchReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarditems_.MergeFrom(from.rewarditems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bo()) {
      set_bo(from.bo());
    }
    if (from.has_mopnum()) {
      set_mopnum(from.mopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChallengeBatchReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChallengeBatchReward::CopyFrom(const GCChallengeBatchReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChallengeBatchReward::IsInitialized() const {

  return true;
}

void GCChallengeBatchReward::Swap(GCChallengeBatchReward* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(result_, other->result_);
    std::swap(bo_, other->bo_);
    std::swap(mopnum_, other->mopnum_);
    rewarditems_.Swap(&other->rewarditems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChallengeBatchReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChallengeBatchReward_descriptor_;
  metadata.reflection = GCChallengeBatchReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChallengeBatchRefreshTime::kTotalTimeFieldNumber;
#endif  // !_MSC_VER

GCChallengeBatchRefreshTime::GCChallengeBatchRefreshTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChallengeBatchRefreshTime)
}

void GCChallengeBatchRefreshTime::InitAsDefaultInstance() {
}

GCChallengeBatchRefreshTime::GCChallengeBatchRefreshTime(const GCChallengeBatchRefreshTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChallengeBatchRefreshTime)
}

void GCChallengeBatchRefreshTime::SharedCtor() {
  _cached_size_ = 0;
  totaltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChallengeBatchRefreshTime::~GCChallengeBatchRefreshTime() {
  // @@protoc_insertion_point(destructor:GCChallengeBatchRefreshTime)
  SharedDtor();
}

void GCChallengeBatchRefreshTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChallengeBatchRefreshTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChallengeBatchRefreshTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChallengeBatchRefreshTime_descriptor_;
}

const GCChallengeBatchRefreshTime& GCChallengeBatchRefreshTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  return *default_instance_;
}

GCChallengeBatchRefreshTime* GCChallengeBatchRefreshTime::default_instance_ = NULL;

GCChallengeBatchRefreshTime* GCChallengeBatchRefreshTime::New() const {
  return new GCChallengeBatchRefreshTime;
}

void GCChallengeBatchRefreshTime::Clear() {
  totaltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChallengeBatchRefreshTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChallengeBatchRefreshTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChallengeBatchRefreshTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChallengeBatchRefreshTime)
  return false;
#undef DO_
}

void GCChallengeBatchRefreshTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChallengeBatchRefreshTime)
  // optional int32 totalTime = 1;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totaltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChallengeBatchRefreshTime)
}

::google::protobuf::uint8* GCChallengeBatchRefreshTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChallengeBatchRefreshTime)
  // optional int32 totalTime = 1;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totaltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChallengeBatchRefreshTime)
  return target;
}

int GCChallengeBatchRefreshTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalTime = 1;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChallengeBatchRefreshTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChallengeBatchRefreshTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChallengeBatchRefreshTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChallengeBatchRefreshTime::MergeFrom(const GCChallengeBatchRefreshTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChallengeBatchRefreshTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChallengeBatchRefreshTime::CopyFrom(const GCChallengeBatchRefreshTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChallengeBatchRefreshTime::IsInitialized() const {

  return true;
}

void GCChallengeBatchRefreshTime::Swap(GCChallengeBatchRefreshTime* other) {
  if (other != this) {
    std::swap(totaltime_, other->totaltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChallengeBatchRefreshTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChallengeBatchRefreshTime_descriptor_;
  metadata.reflection = GCChallengeBatchRefreshTime_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
