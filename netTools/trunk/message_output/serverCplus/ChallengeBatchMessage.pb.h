// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChallengeBatchMessage.proto

#ifndef PROTOBUF_ChallengeBatchMessage_2eproto__INCLUDED
#define PROTOBUF_ChallengeBatchMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

class CGChallengeBatchOperate;
class GCChallengeBatchOperateBack;
class GCChallengeBatchInfo;
class GCChallengeBatchReward;
class GCChallengeBatchRefreshTime;

// ===================================================================

class CGChallengeBatchOperate : public ::google::protobuf::Message {
 public:
  CGChallengeBatchOperate();
  virtual ~CGChallengeBatchOperate();

  CGChallengeBatchOperate(const CGChallengeBatchOperate& from);

  inline CGChallengeBatchOperate& operator=(const CGChallengeBatchOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGChallengeBatchOperate& default_instance();

  void Swap(CGChallengeBatchOperate* other);

  // implements Message ----------------------------------------------

  CGChallengeBatchOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGChallengeBatchOperate& from);
  void MergeFrom(const CGChallengeBatchOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGChallengeBatchOperate)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

  void InitAsDefaultInstance();
  static CGChallengeBatchOperate* default_instance_;
};
// -------------------------------------------------------------------

class GCChallengeBatchOperateBack : public ::google::protobuf::Message {
 public:
  GCChallengeBatchOperateBack();
  virtual ~GCChallengeBatchOperateBack();

  GCChallengeBatchOperateBack(const GCChallengeBatchOperateBack& from);

  inline GCChallengeBatchOperateBack& operator=(const GCChallengeBatchOperateBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChallengeBatchOperateBack& default_instance();

  void Swap(GCChallengeBatchOperateBack* other);

  // implements Message ----------------------------------------------

  GCChallengeBatchOperateBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChallengeBatchOperateBack& from);
  void MergeFrom(const GCChallengeBatchOperateBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCChallengeBatchOperateBack)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChallengeBatchOperateBack* default_instance_;
};
// -------------------------------------------------------------------

class GCChallengeBatchInfo : public ::google::protobuf::Message {
 public:
  GCChallengeBatchInfo();
  virtual ~GCChallengeBatchInfo();

  GCChallengeBatchInfo(const GCChallengeBatchInfo& from);

  inline GCChallengeBatchInfo& operator=(const GCChallengeBatchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChallengeBatchInfo& default_instance();

  void Swap(GCChallengeBatchInfo* other);

  // implements Message ----------------------------------------------

  GCChallengeBatchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChallengeBatchInfo& from);
  void MergeFrom(const GCChallengeBatchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bo = 1;
  inline bool has_bo() const;
  inline void clear_bo();
  static const int kBoFieldNumber = 1;
  inline ::google::protobuf::int32 bo() const;
  inline void set_bo(::google::protobuf::int32 value);

  // optional int32 mopNum = 2;
  inline bool has_mopnum() const;
  inline void clear_mopnum();
  static const int kMopNumFieldNumber = 2;
  inline ::google::protobuf::int32 mopnum() const;
  inline void set_mopnum(::google::protobuf::int32 value);

  // optional int32 maxBo = 3;
  inline bool has_maxbo() const;
  inline void clear_maxbo();
  static const int kMaxBoFieldNumber = 3;
  inline ::google::protobuf::int32 maxbo() const;
  inline void set_maxbo(::google::protobuf::int32 value);

  // optional int32 maxMopNum = 4;
  inline bool has_maxmopnum() const;
  inline void clear_maxmopnum();
  static const int kMaxMopNumFieldNumber = 4;
  inline ::google::protobuf::int32 maxmopnum() const;
  inline void set_maxmopnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCChallengeBatchInfo)
 private:
  inline void set_has_bo();
  inline void clear_has_bo();
  inline void set_has_mopnum();
  inline void clear_has_mopnum();
  inline void set_has_maxbo();
  inline void clear_has_maxbo();
  inline void set_has_maxmopnum();
  inline void clear_has_maxmopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bo_;
  ::google::protobuf::int32 mopnum_;
  ::google::protobuf::int32 maxbo_;
  ::google::protobuf::int32 maxmopnum_;
  friend void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChallengeBatchInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCChallengeBatchReward : public ::google::protobuf::Message {
 public:
  GCChallengeBatchReward();
  virtual ~GCChallengeBatchReward();

  GCChallengeBatchReward(const GCChallengeBatchReward& from);

  inline GCChallengeBatchReward& operator=(const GCChallengeBatchReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChallengeBatchReward& default_instance();

  void Swap(GCChallengeBatchReward* other);

  // implements Message ----------------------------------------------

  GCChallengeBatchReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChallengeBatchReward& from);
  void MergeFrom(const GCChallengeBatchReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 bo = 3;
  inline bool has_bo() const;
  inline void clear_bo();
  static const int kBoFieldNumber = 3;
  inline ::google::protobuf::int32 bo() const;
  inline void set_bo(::google::protobuf::int32 value);

  // optional int32 mopNum = 4;
  inline bool has_mopnum() const;
  inline void clear_mopnum();
  static const int kMopNumFieldNumber = 4;
  inline ::google::protobuf::int32 mopnum() const;
  inline void set_mopnum(::google::protobuf::int32 value);

  // repeated .Iteminfo rewardItems = 5;
  inline int rewarditems_size() const;
  inline void clear_rewarditems();
  static const int kRewardItemsFieldNumber = 5;
  inline const ::Iteminfo& rewarditems(int index) const;
  inline ::Iteminfo* mutable_rewarditems(int index);
  inline ::Iteminfo* add_rewarditems();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      rewarditems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_rewarditems();

  // @@protoc_insertion_point(class_scope:GCChallengeBatchReward)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bo();
  inline void clear_has_bo();
  inline void set_has_mopnum();
  inline void clear_has_mopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 bo_;
  ::google::protobuf::int32 mopnum_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > rewarditems_;
  friend void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChallengeBatchReward* default_instance_;
};
// -------------------------------------------------------------------

class GCChallengeBatchRefreshTime : public ::google::protobuf::Message {
 public:
  GCChallengeBatchRefreshTime();
  virtual ~GCChallengeBatchRefreshTime();

  GCChallengeBatchRefreshTime(const GCChallengeBatchRefreshTime& from);

  inline GCChallengeBatchRefreshTime& operator=(const GCChallengeBatchRefreshTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChallengeBatchRefreshTime& default_instance();

  void Swap(GCChallengeBatchRefreshTime* other);

  // implements Message ----------------------------------------------

  GCChallengeBatchRefreshTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChallengeBatchRefreshTime& from);
  void MergeFrom(const GCChallengeBatchRefreshTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 totalTime = 1;
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotalTimeFieldNumber = 1;
  inline ::google::protobuf::int32 totaltime() const;
  inline void set_totaltime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCChallengeBatchRefreshTime)
 private:
  inline void set_has_totaltime();
  inline void clear_has_totaltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 totaltime_;
  friend void  protobuf_AddDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_AssignDesc_ChallengeBatchMessage_2eproto();
  friend void protobuf_ShutdownFile_ChallengeBatchMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChallengeBatchRefreshTime* default_instance_;
};
// ===================================================================


// ===================================================================

// CGChallengeBatchOperate

// optional int32 type = 1;
inline bool CGChallengeBatchOperate::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGChallengeBatchOperate::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGChallengeBatchOperate::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGChallengeBatchOperate::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGChallengeBatchOperate::type() const {
  // @@protoc_insertion_point(field_get:CGChallengeBatchOperate.type)
  return type_;
}
inline void CGChallengeBatchOperate::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGChallengeBatchOperate.type)
}

// -------------------------------------------------------------------

// GCChallengeBatchOperateBack

// optional int32 type = 1;
inline bool GCChallengeBatchOperateBack::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChallengeBatchOperateBack::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChallengeBatchOperateBack::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChallengeBatchOperateBack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCChallengeBatchOperateBack::type() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchOperateBack.type)
  return type_;
}
inline void GCChallengeBatchOperateBack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchOperateBack.type)
}

// optional int32 result = 2;
inline bool GCChallengeBatchOperateBack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCChallengeBatchOperateBack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCChallengeBatchOperateBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCChallengeBatchOperateBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCChallengeBatchOperateBack::result() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchOperateBack.result)
  return result_;
}
inline void GCChallengeBatchOperateBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchOperateBack.result)
}

// -------------------------------------------------------------------

// GCChallengeBatchInfo

// optional int32 bo = 1;
inline bool GCChallengeBatchInfo::has_bo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChallengeBatchInfo::set_has_bo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChallengeBatchInfo::clear_has_bo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChallengeBatchInfo::clear_bo() {
  bo_ = 0;
  clear_has_bo();
}
inline ::google::protobuf::int32 GCChallengeBatchInfo::bo() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchInfo.bo)
  return bo_;
}
inline void GCChallengeBatchInfo::set_bo(::google::protobuf::int32 value) {
  set_has_bo();
  bo_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchInfo.bo)
}

// optional int32 mopNum = 2;
inline bool GCChallengeBatchInfo::has_mopnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCChallengeBatchInfo::set_has_mopnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCChallengeBatchInfo::clear_has_mopnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCChallengeBatchInfo::clear_mopnum() {
  mopnum_ = 0;
  clear_has_mopnum();
}
inline ::google::protobuf::int32 GCChallengeBatchInfo::mopnum() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchInfo.mopNum)
  return mopnum_;
}
inline void GCChallengeBatchInfo::set_mopnum(::google::protobuf::int32 value) {
  set_has_mopnum();
  mopnum_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchInfo.mopNum)
}

// optional int32 maxBo = 3;
inline bool GCChallengeBatchInfo::has_maxbo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCChallengeBatchInfo::set_has_maxbo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCChallengeBatchInfo::clear_has_maxbo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCChallengeBatchInfo::clear_maxbo() {
  maxbo_ = 0;
  clear_has_maxbo();
}
inline ::google::protobuf::int32 GCChallengeBatchInfo::maxbo() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchInfo.maxBo)
  return maxbo_;
}
inline void GCChallengeBatchInfo::set_maxbo(::google::protobuf::int32 value) {
  set_has_maxbo();
  maxbo_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchInfo.maxBo)
}

// optional int32 maxMopNum = 4;
inline bool GCChallengeBatchInfo::has_maxmopnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCChallengeBatchInfo::set_has_maxmopnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCChallengeBatchInfo::clear_has_maxmopnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCChallengeBatchInfo::clear_maxmopnum() {
  maxmopnum_ = 0;
  clear_has_maxmopnum();
}
inline ::google::protobuf::int32 GCChallengeBatchInfo::maxmopnum() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchInfo.maxMopNum)
  return maxmopnum_;
}
inline void GCChallengeBatchInfo::set_maxmopnum(::google::protobuf::int32 value) {
  set_has_maxmopnum();
  maxmopnum_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchInfo.maxMopNum)
}

// -------------------------------------------------------------------

// GCChallengeBatchReward

// optional int32 operate = 1;
inline bool GCChallengeBatchReward::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChallengeBatchReward::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChallengeBatchReward::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChallengeBatchReward::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCChallengeBatchReward::operate() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchReward.operate)
  return operate_;
}
inline void GCChallengeBatchReward::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchReward.operate)
}

// optional int32 result = 2;
inline bool GCChallengeBatchReward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCChallengeBatchReward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCChallengeBatchReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCChallengeBatchReward::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCChallengeBatchReward::result() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchReward.result)
  return result_;
}
inline void GCChallengeBatchReward::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchReward.result)
}

// optional int32 bo = 3;
inline bool GCChallengeBatchReward::has_bo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCChallengeBatchReward::set_has_bo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCChallengeBatchReward::clear_has_bo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCChallengeBatchReward::clear_bo() {
  bo_ = 0;
  clear_has_bo();
}
inline ::google::protobuf::int32 GCChallengeBatchReward::bo() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchReward.bo)
  return bo_;
}
inline void GCChallengeBatchReward::set_bo(::google::protobuf::int32 value) {
  set_has_bo();
  bo_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchReward.bo)
}

// optional int32 mopNum = 4;
inline bool GCChallengeBatchReward::has_mopnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCChallengeBatchReward::set_has_mopnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCChallengeBatchReward::clear_has_mopnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCChallengeBatchReward::clear_mopnum() {
  mopnum_ = 0;
  clear_has_mopnum();
}
inline ::google::protobuf::int32 GCChallengeBatchReward::mopnum() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchReward.mopNum)
  return mopnum_;
}
inline void GCChallengeBatchReward::set_mopnum(::google::protobuf::int32 value) {
  set_has_mopnum();
  mopnum_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchReward.mopNum)
}

// repeated .Iteminfo rewardItems = 5;
inline int GCChallengeBatchReward::rewarditems_size() const {
  return rewarditems_.size();
}
inline void GCChallengeBatchReward::clear_rewarditems() {
  rewarditems_.Clear();
}
inline const ::Iteminfo& GCChallengeBatchReward::rewarditems(int index) const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchReward.rewardItems)
  return rewarditems_.Get(index);
}
inline ::Iteminfo* GCChallengeBatchReward::mutable_rewarditems(int index) {
  // @@protoc_insertion_point(field_mutable:GCChallengeBatchReward.rewardItems)
  return rewarditems_.Mutable(index);
}
inline ::Iteminfo* GCChallengeBatchReward::add_rewarditems() {
  // @@protoc_insertion_point(field_add:GCChallengeBatchReward.rewardItems)
  return rewarditems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
GCChallengeBatchReward::rewarditems() const {
  // @@protoc_insertion_point(field_list:GCChallengeBatchReward.rewardItems)
  return rewarditems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
GCChallengeBatchReward::mutable_rewarditems() {
  // @@protoc_insertion_point(field_mutable_list:GCChallengeBatchReward.rewardItems)
  return &rewarditems_;
}

// -------------------------------------------------------------------

// GCChallengeBatchRefreshTime

// optional int32 totalTime = 1;
inline bool GCChallengeBatchRefreshTime::has_totaltime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCChallengeBatchRefreshTime::set_has_totaltime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCChallengeBatchRefreshTime::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCChallengeBatchRefreshTime::clear_totaltime() {
  totaltime_ = 0;
  clear_has_totaltime();
}
inline ::google::protobuf::int32 GCChallengeBatchRefreshTime::totaltime() const {
  // @@protoc_insertion_point(field_get:GCChallengeBatchRefreshTime.totalTime)
  return totaltime_;
}
inline void GCChallengeBatchRefreshTime::set_totaltime(::google::protobuf::int32 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:GCChallengeBatchRefreshTime.totalTime)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChallengeBatchMessage_2eproto__INCLUDED
