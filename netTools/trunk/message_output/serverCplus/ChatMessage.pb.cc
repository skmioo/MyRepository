// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGSendChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSendChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChatSeting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChatSeting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChatSeting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChatSeting_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBlackChatSeting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBlackChatSeting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBlackChatSeting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBlackChatSeting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatMessage_2eproto() {
  protobuf_AddDesc_ChatMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGSendChatMsg_descriptor_ = file->message_type(0);
  static const int CGSendChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendChatMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendChatMsg, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendChatMsg, content_),
  };
  CGSendChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSendChatMsg_descriptor_,
      CGSendChatMsg::default_instance_,
      CGSendChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSendChatMsg));
  ChatInfo_descriptor_ = file->message_type(1);
  static const int ChatInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, horn_),
  };
  ChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatInfo_descriptor_,
      ChatInfo::default_instance_,
      ChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatInfo));
  GCPushChatMsg_descriptor_ = file->message_type(2);
  static const int GCPushChatMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushChatMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushChatMsg, chatinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushChatMsg, targetid_),
  };
  GCPushChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushChatMsg_descriptor_,
      GCPushChatMsg::default_instance_,
      GCPushChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushChatMsg));
  CGChatSeting_descriptor_ = file->message_type(3);
  static const int CGChatSeting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatSeting, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatSeting, autoaudio_),
  };
  CGChatSeting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChatSeting_descriptor_,
      CGChatSeting::default_instance_,
      CGChatSeting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatSeting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatSeting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChatSeting));
  GCChatSeting_descriptor_ = file->message_type(4);
  static const int GCChatSeting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatSeting, channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatSeting, autoaudio_),
  };
  GCChatSeting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChatSeting_descriptor_,
      GCChatSeting::default_instance_,
      GCChatSeting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatSeting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatSeting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChatSeting));
  CGBlackChatSeting_descriptor_ = file->message_type(5);
  static const int CGBlackChatSeting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBlackChatSeting, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBlackChatSeting, playerid_),
  };
  CGBlackChatSeting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBlackChatSeting_descriptor_,
      CGBlackChatSeting::default_instance_,
      CGBlackChatSeting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBlackChatSeting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBlackChatSeting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBlackChatSeting));
  GCBlackChatSeting_descriptor_ = file->message_type(6);
  static const int GCBlackChatSeting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBlackChatSeting, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBlackChatSeting, playerids_),
  };
  GCBlackChatSeting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBlackChatSeting_descriptor_,
      GCBlackChatSeting::default_instance_,
      GCBlackChatSeting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBlackChatSeting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBlackChatSeting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBlackChatSeting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSendChatMsg_descriptor_, &CGSendChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatInfo_descriptor_, &ChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushChatMsg_descriptor_, &GCPushChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChatSeting_descriptor_, &CGChatSeting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChatSeting_descriptor_, &GCChatSeting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBlackChatSeting_descriptor_, &CGBlackChatSeting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBlackChatSeting_descriptor_, &GCBlackChatSeting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatMessage_2eproto() {
  delete CGSendChatMsg::default_instance_;
  delete CGSendChatMsg_reflection_;
  delete ChatInfo::default_instance_;
  delete ChatInfo_reflection_;
  delete GCPushChatMsg::default_instance_;
  delete GCPushChatMsg_reflection_;
  delete CGChatSeting::default_instance_;
  delete CGChatSeting_reflection_;
  delete GCChatSeting::default_instance_;
  delete GCChatSeting_reflection_;
  delete CGBlackChatSeting::default_instance_;
  delete CGBlackChatSeting_reflection_;
  delete GCBlackChatSeting::default_instance_;
  delete GCBlackChatSeting_reflection_;
}

void protobuf_AddDesc_ChatMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ChatMessage.proto\"C\n\rCGSendChatMsg\022\017\n\007"
    "channel\030\001 \001(\005\022\020\n\010targetId\030\002 \001(\003\022\017\n\007conte"
    "nt\030\003 \001(\t\";\n\010ChatInfo\022\020\n\010sendTime\030\001 \001(\003\022\017"
    "\n\007content\030\002 \001(\t\022\014\n\004horn\030\004 \001(\005\"P\n\rGCPushC"
    "hatMsg\022\017\n\007channel\030\001 \001(\005\022\034\n\tchatInfos\030\002 \003"
    "(\0132\t.ChatInfo\022\020\n\010targetId\030\003 \001(\003\"3\n\014CGCha"
    "tSeting\022\020\n\010channels\030\001 \003(\005\022\021\n\tautoAudio\030\002"
    " \003(\005\"3\n\014GCChatSeting\022\020\n\010channels\030\001 \003(\005\022\021"
    "\n\tautoAudio\030\002 \003(\005\"3\n\021CGBlackChatSeting\022\014"
    "\n\004flag\030\001 \001(\005\022\020\n\010playerId\030\002 \001(\003\"4\n\021GCBlac"
    "kChatSeting\022\014\n\004flag\030\001 \001(\005\022\021\n\tplayerIds\030\002"
    " \003(\003B\031\n\027com.mile.common.message", 471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatMessage.proto", &protobuf_RegisterTypes);
  CGSendChatMsg::default_instance_ = new CGSendChatMsg();
  ChatInfo::default_instance_ = new ChatInfo();
  GCPushChatMsg::default_instance_ = new GCPushChatMsg();
  CGChatSeting::default_instance_ = new CGChatSeting();
  GCChatSeting::default_instance_ = new GCChatSeting();
  CGBlackChatSeting::default_instance_ = new CGBlackChatSeting();
  GCBlackChatSeting::default_instance_ = new GCBlackChatSeting();
  CGSendChatMsg::default_instance_->InitAsDefaultInstance();
  ChatInfo::default_instance_->InitAsDefaultInstance();
  GCPushChatMsg::default_instance_->InitAsDefaultInstance();
  CGChatSeting::default_instance_->InitAsDefaultInstance();
  GCChatSeting::default_instance_->InitAsDefaultInstance();
  CGBlackChatSeting::default_instance_->InitAsDefaultInstance();
  GCBlackChatSeting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatMessage_2eproto {
  StaticDescriptorInitializer_ChatMessage_2eproto() {
    protobuf_AddDesc_ChatMessage_2eproto();
  }
} static_descriptor_initializer_ChatMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGSendChatMsg::kChannelFieldNumber;
const int CGSendChatMsg::kTargetIdFieldNumber;
const int CGSendChatMsg::kContentFieldNumber;
#endif  // !_MSC_VER

CGSendChatMsg::CGSendChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSendChatMsg)
}

void CGSendChatMsg::InitAsDefaultInstance() {
}

CGSendChatMsg::CGSendChatMsg(const CGSendChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSendChatMsg)
}

void CGSendChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSendChatMsg::~CGSendChatMsg() {
  // @@protoc_insertion_point(destructor:CGSendChatMsg)
  SharedDtor();
}

void CGSendChatMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CGSendChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSendChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSendChatMsg_descriptor_;
}

const CGSendChatMsg& CGSendChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

CGSendChatMsg* CGSendChatMsg::default_instance_ = NULL;

CGSendChatMsg* CGSendChatMsg::New() const {
  return new CGSendChatMsg;
}

void CGSendChatMsg::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    channel_ = 0;
    targetid_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSendChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSendChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int64 targetId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSendChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSendChatMsg)
  return false;
#undef DO_
}

void CGSendChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSendChatMsg)
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // optional int64 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetid(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSendChatMsg)
}

::google::protobuf::uint8* CGSendChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSendChatMsg)
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // optional int64 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetid(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSendChatMsg)
  return target;
}

int CGSendChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int64 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSendChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSendChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSendChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSendChatMsg::MergeFrom(const CGSendChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSendChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSendChatMsg::CopyFrom(const CGSendChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSendChatMsg::IsInitialized() const {

  return true;
}

void CGSendChatMsg::Swap(CGSendChatMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(targetid_, other->targetid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSendChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSendChatMsg_descriptor_;
  metadata.reflection = CGSendChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatInfo::kSendTimeFieldNumber;
const int ChatInfo::kContentFieldNumber;
const int ChatInfo::kHornFieldNumber;
#endif  // !_MSC_VER

ChatInfo::ChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatInfo)
}

void ChatInfo::InitAsDefaultInstance() {
}

ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatInfo)
}

void ChatInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendtime_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfo::~ChatInfo() {
  // @@protoc_insertion_point(destructor:ChatInfo)
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_descriptor_;
}

const ChatInfo& ChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

ChatInfo* ChatInfo::default_instance_ = NULL;

ChatInfo* ChatInfo::New() const {
  return new ChatInfo;
}

void ChatInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    sendtime_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    horn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sendTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_horn;
        break;
      }

      // optional int32 horn = 4;
      case 4: {
        if (tag == 32) {
         parse_horn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horn_)));
          set_has_horn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatInfo)
  return false;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatInfo)
  // optional int64 sendTime = 1;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sendtime(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 horn = 4;
  if (has_horn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->horn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChatInfo)
}

::google::protobuf::uint8* ChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatInfo)
  // optional int64 sendTime = 1;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sendtime(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int32 horn = 4;
  if (has_horn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->horn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatInfo)
  return target;
}

int ChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sendTime = 1;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 horn = 4;
    if (has_horn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_horn()) {
      set_horn(from.horn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {

  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other != this) {
    std::swap(sendtime_, other->sendtime_);
    std::swap(content_, other->content_);
    std::swap(horn_, other->horn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfo_descriptor_;
  metadata.reflection = ChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushChatMsg::kChannelFieldNumber;
const int GCPushChatMsg::kChatInfosFieldNumber;
const int GCPushChatMsg::kTargetIdFieldNumber;
#endif  // !_MSC_VER

GCPushChatMsg::GCPushChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushChatMsg)
}

void GCPushChatMsg::InitAsDefaultInstance() {
}

GCPushChatMsg::GCPushChatMsg(const GCPushChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushChatMsg)
}

void GCPushChatMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushChatMsg::~GCPushChatMsg() {
  // @@protoc_insertion_point(destructor:GCPushChatMsg)
  SharedDtor();
}

void GCPushChatMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushChatMsg_descriptor_;
}

const GCPushChatMsg& GCPushChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

GCPushChatMsg* GCPushChatMsg::default_instance_ = NULL;

GCPushChatMsg* GCPushChatMsg::New() const {
  return new GCPushChatMsg;
}

void GCPushChatMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushChatMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetid_, channel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  chatinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatInfos;
        break;
      }

      // repeated .ChatInfo chatInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_chatInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatInfos;
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional int64 targetId = 3;
      case 3: {
        if (tag == 24) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushChatMsg)
  return false;
#undef DO_
}

void GCPushChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushChatMsg)
  // optional int32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // repeated .ChatInfo chatInfos = 2;
  for (int i = 0; i < this->chatinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatinfos(i), output);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushChatMsg)
}

::google::protobuf::uint8* GCPushChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushChatMsg)
  // optional int32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // repeated .ChatInfo chatInfos = 2;
  for (int i = 0; i < this->chatinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatinfos(i), target);
  }

  // optional int64 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushChatMsg)
  return target;
}

int GCPushChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // optional int64 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

  }
  // repeated .ChatInfo chatInfos = 2;
  total_size += 1 * this->chatinfos_size();
  for (int i = 0; i < this->chatinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushChatMsg::MergeFrom(const GCPushChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfos_.MergeFrom(from.chatinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushChatMsg::CopyFrom(const GCPushChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushChatMsg::IsInitialized() const {

  return true;
}

void GCPushChatMsg::Swap(GCPushChatMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    chatinfos_.Swap(&other->chatinfos_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushChatMsg_descriptor_;
  metadata.reflection = GCPushChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChatSeting::kChannelsFieldNumber;
const int CGChatSeting::kAutoAudioFieldNumber;
#endif  // !_MSC_VER

CGChatSeting::CGChatSeting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChatSeting)
}

void CGChatSeting::InitAsDefaultInstance() {
}

CGChatSeting::CGChatSeting(const CGChatSeting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChatSeting)
}

void CGChatSeting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChatSeting::~CGChatSeting() {
  // @@protoc_insertion_point(destructor:CGChatSeting)
  SharedDtor();
}

void CGChatSeting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChatSeting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChatSeting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChatSeting_descriptor_;
}

const CGChatSeting& CGChatSeting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

CGChatSeting* CGChatSeting::default_instance_ = NULL;

CGChatSeting* CGChatSeting::New() const {
  return new CGChatSeting;
}

void CGChatSeting::Clear() {
  channels_.Clear();
  autoaudio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChatSeting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChatSeting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 channels = 1;
      case 1: {
        if (tag == 8) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_channels())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_channels;
        if (input->ExpectTag(16)) goto parse_autoAudio;
        break;
      }

      // repeated int32 autoAudio = 2;
      case 2: {
        if (tag == 16) {
         parse_autoAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_autoaudio())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_autoaudio())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_autoAudio;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChatSeting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChatSeting)
  return false;
#undef DO_
}

void CGChatSeting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChatSeting)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->channels(i), output);
  }

  // repeated int32 autoAudio = 2;
  for (int i = 0; i < this->autoaudio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->autoaudio(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChatSeting)
}

::google::protobuf::uint8* CGChatSeting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChatSeting)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->channels(i), target);
  }

  // repeated int32 autoAudio = 2;
  for (int i = 0; i < this->autoaudio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->autoaudio(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChatSeting)
  return target;
}

int CGChatSeting::ByteSize() const {
  int total_size = 0;

  // repeated int32 channels = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->channels(i));
    }
    total_size += 1 * this->channels_size() + data_size;
  }

  // repeated int32 autoAudio = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->autoaudio_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->autoaudio(i));
    }
    total_size += 1 * this->autoaudio_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChatSeting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChatSeting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChatSeting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChatSeting::MergeFrom(const CGChatSeting& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  autoaudio_.MergeFrom(from.autoaudio_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChatSeting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChatSeting::CopyFrom(const CGChatSeting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChatSeting::IsInitialized() const {

  return true;
}

void CGChatSeting::Swap(CGChatSeting* other) {
  if (other != this) {
    channels_.Swap(&other->channels_);
    autoaudio_.Swap(&other->autoaudio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChatSeting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChatSeting_descriptor_;
  metadata.reflection = CGChatSeting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChatSeting::kChannelsFieldNumber;
const int GCChatSeting::kAutoAudioFieldNumber;
#endif  // !_MSC_VER

GCChatSeting::GCChatSeting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChatSeting)
}

void GCChatSeting::InitAsDefaultInstance() {
}

GCChatSeting::GCChatSeting(const GCChatSeting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChatSeting)
}

void GCChatSeting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChatSeting::~GCChatSeting() {
  // @@protoc_insertion_point(destructor:GCChatSeting)
  SharedDtor();
}

void GCChatSeting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChatSeting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChatSeting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChatSeting_descriptor_;
}

const GCChatSeting& GCChatSeting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

GCChatSeting* GCChatSeting::default_instance_ = NULL;

GCChatSeting* GCChatSeting::New() const {
  return new GCChatSeting;
}

void GCChatSeting::Clear() {
  channels_.Clear();
  autoaudio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChatSeting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChatSeting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 channels = 1;
      case 1: {
        if (tag == 8) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_channels())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_channels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_channels;
        if (input->ExpectTag(16)) goto parse_autoAudio;
        break;
      }

      // repeated int32 autoAudio = 2;
      case 2: {
        if (tag == 16) {
         parse_autoAudio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_autoaudio())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_autoaudio())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_autoAudio;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChatSeting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChatSeting)
  return false;
#undef DO_
}

void GCChatSeting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChatSeting)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->channels(i), output);
  }

  // repeated int32 autoAudio = 2;
  for (int i = 0; i < this->autoaudio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->autoaudio(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChatSeting)
}

::google::protobuf::uint8* GCChatSeting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChatSeting)
  // repeated int32 channels = 1;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->channels(i), target);
  }

  // repeated int32 autoAudio = 2;
  for (int i = 0; i < this->autoaudio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->autoaudio(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChatSeting)
  return target;
}

int GCChatSeting::ByteSize() const {
  int total_size = 0;

  // repeated int32 channels = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->channels(i));
    }
    total_size += 1 * this->channels_size() + data_size;
  }

  // repeated int32 autoAudio = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->autoaudio_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->autoaudio(i));
    }
    total_size += 1 * this->autoaudio_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChatSeting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChatSeting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChatSeting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChatSeting::MergeFrom(const GCChatSeting& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  autoaudio_.MergeFrom(from.autoaudio_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChatSeting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChatSeting::CopyFrom(const GCChatSeting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChatSeting::IsInitialized() const {

  return true;
}

void GCChatSeting::Swap(GCChatSeting* other) {
  if (other != this) {
    channels_.Swap(&other->channels_);
    autoaudio_.Swap(&other->autoaudio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChatSeting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChatSeting_descriptor_;
  metadata.reflection = GCChatSeting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBlackChatSeting::kFlagFieldNumber;
const int CGBlackChatSeting::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGBlackChatSeting::CGBlackChatSeting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBlackChatSeting)
}

void CGBlackChatSeting::InitAsDefaultInstance() {
}

CGBlackChatSeting::CGBlackChatSeting(const CGBlackChatSeting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBlackChatSeting)
}

void CGBlackChatSeting::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBlackChatSeting::~CGBlackChatSeting() {
  // @@protoc_insertion_point(destructor:CGBlackChatSeting)
  SharedDtor();
}

void CGBlackChatSeting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBlackChatSeting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBlackChatSeting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBlackChatSeting_descriptor_;
}

const CGBlackChatSeting& CGBlackChatSeting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

CGBlackChatSeting* CGBlackChatSeting::default_instance_ = NULL;

CGBlackChatSeting* CGBlackChatSeting::New() const {
  return new CGBlackChatSeting;
}

void CGBlackChatSeting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBlackChatSeting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBlackChatSeting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBlackChatSeting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 2;
      case 2: {
        if (tag == 16) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBlackChatSeting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBlackChatSeting)
  return false;
#undef DO_
}

void CGBlackChatSeting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBlackChatSeting)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBlackChatSeting)
}

::google::protobuf::uint8* CGBlackChatSeting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBlackChatSeting)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int64 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBlackChatSeting)
  return target;
}

int CGBlackChatSeting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBlackChatSeting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBlackChatSeting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBlackChatSeting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBlackChatSeting::MergeFrom(const CGBlackChatSeting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBlackChatSeting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBlackChatSeting::CopyFrom(const CGBlackChatSeting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBlackChatSeting::IsInitialized() const {

  return true;
}

void CGBlackChatSeting::Swap(CGBlackChatSeting* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBlackChatSeting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBlackChatSeting_descriptor_;
  metadata.reflection = CGBlackChatSeting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBlackChatSeting::kFlagFieldNumber;
const int GCBlackChatSeting::kPlayerIdsFieldNumber;
#endif  // !_MSC_VER

GCBlackChatSeting::GCBlackChatSeting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBlackChatSeting)
}

void GCBlackChatSeting::InitAsDefaultInstance() {
}

GCBlackChatSeting::GCBlackChatSeting(const GCBlackChatSeting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBlackChatSeting)
}

void GCBlackChatSeting::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBlackChatSeting::~GCBlackChatSeting() {
  // @@protoc_insertion_point(destructor:GCBlackChatSeting)
  SharedDtor();
}

void GCBlackChatSeting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBlackChatSeting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBlackChatSeting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBlackChatSeting_descriptor_;
}

const GCBlackChatSeting& GCBlackChatSeting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

GCBlackChatSeting* GCBlackChatSeting::default_instance_ = NULL;

GCBlackChatSeting* GCBlackChatSeting::New() const {
  return new GCBlackChatSeting;
}

void GCBlackChatSeting::Clear() {
  flag_ = 0;
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBlackChatSeting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBlackChatSeting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerIds;
        break;
      }

      // repeated int64 playerIds = 2;
      case 2: {
        if (tag == 16) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_playerids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBlackChatSeting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBlackChatSeting)
  return false;
#undef DO_
}

void GCBlackChatSeting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBlackChatSeting)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated int64 playerIds = 2;
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->playerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBlackChatSeting)
}

::google::protobuf::uint8* GCBlackChatSeting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBlackChatSeting)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated int64 playerIds = 2;
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->playerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBlackChatSeting)
  return target;
}

int GCBlackChatSeting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated int64 playerIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerids(i));
    }
    total_size += 1 * this->playerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBlackChatSeting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBlackChatSeting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBlackChatSeting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBlackChatSeting::MergeFrom(const GCBlackChatSeting& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBlackChatSeting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBlackChatSeting::CopyFrom(const GCBlackChatSeting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBlackChatSeting::IsInitialized() const {

  return true;
}

void GCBlackChatSeting::Swap(GCBlackChatSeting* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    playerids_.Swap(&other->playerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBlackChatSeting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBlackChatSeting_descriptor_;
  metadata.reflection = GCBlackChatSeting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
