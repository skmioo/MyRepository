// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMessage.proto

#ifndef PROTOBUF_ChatMessage_2eproto__INCLUDED
#define PROTOBUF_ChatMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChatMessage_2eproto();
void protobuf_AssignDesc_ChatMessage_2eproto();
void protobuf_ShutdownFile_ChatMessage_2eproto();

class CGSendChatMsg;
class ChatInfo;
class GCPushChatMsg;
class CGChatSeting;
class GCChatSeting;
class CGBlackChatSeting;
class GCBlackChatSeting;

// ===================================================================

class CGSendChatMsg : public ::google::protobuf::Message {
 public:
  CGSendChatMsg();
  virtual ~CGSendChatMsg();

  CGSendChatMsg(const CGSendChatMsg& from);

  inline CGSendChatMsg& operator=(const CGSendChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSendChatMsg& default_instance();

  void Swap(CGSendChatMsg* other);

  // implements Message ----------------------------------------------

  CGSendChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSendChatMsg& from);
  void MergeFrom(const CGSendChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int64 targetId = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetid() const;
  inline void set_targetid(::google::protobuf::int64 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:CGSendChatMsg)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 targetid_;
  ::std::string* content_;
  ::google::protobuf::int32 channel_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSendChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class ChatInfo : public ::google::protobuf::Message {
 public:
  ChatInfo();
  virtual ~ChatInfo();

  ChatInfo(const ChatInfo& from);

  inline ChatInfo& operator=(const ChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfo& default_instance();

  void Swap(ChatInfo* other);

  // implements Message ----------------------------------------------

  ChatInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatInfo& from);
  void MergeFrom(const ChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sendTime = 1;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 1;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 horn = 4;
  inline bool has_horn() const;
  inline void clear_horn();
  static const int kHornFieldNumber = 4;
  inline ::google::protobuf::int32 horn() const;
  inline void set_horn(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChatInfo)
 private:
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_horn();
  inline void clear_has_horn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sendtime_;
  ::std::string* content_;
  ::google::protobuf::int32 horn_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static ChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCPushChatMsg : public ::google::protobuf::Message {
 public:
  GCPushChatMsg();
  virtual ~GCPushChatMsg();

  GCPushChatMsg(const GCPushChatMsg& from);

  inline GCPushChatMsg& operator=(const GCPushChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPushChatMsg& default_instance();

  void Swap(GCPushChatMsg* other);

  // implements Message ----------------------------------------------

  GCPushChatMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPushChatMsg& from);
  void MergeFrom(const GCPushChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // repeated .ChatInfo chatInfos = 2;
  inline int chatinfos_size() const;
  inline void clear_chatinfos();
  static const int kChatInfosFieldNumber = 2;
  inline const ::ChatInfo& chatinfos(int index) const;
  inline ::ChatInfo* mutable_chatinfos(int index);
  inline ::ChatInfo* add_chatinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
      chatinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
      mutable_chatinfos();

  // optional int64 targetId = 3;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::int64 targetid() const;
  inline void set_targetid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCPushChatMsg)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ChatInfo > chatinfos_;
  ::google::protobuf::int64 targetid_;
  ::google::protobuf::int32 channel_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPushChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class CGChatSeting : public ::google::protobuf::Message {
 public:
  CGChatSeting();
  virtual ~CGChatSeting();

  CGChatSeting(const CGChatSeting& from);

  inline CGChatSeting& operator=(const CGChatSeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGChatSeting& default_instance();

  void Swap(CGChatSeting* other);

  // implements Message ----------------------------------------------

  CGChatSeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGChatSeting& from);
  void MergeFrom(const CGChatSeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 channels = 1;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::int32 value);
  inline void add_channels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channels();

  // repeated int32 autoAudio = 2;
  inline int autoaudio_size() const;
  inline void clear_autoaudio();
  static const int kAutoAudioFieldNumber = 2;
  inline ::google::protobuf::int32 autoaudio(int index) const;
  inline void set_autoaudio(int index, ::google::protobuf::int32 value);
  inline void add_autoaudio(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      autoaudio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_autoaudio();

  // @@protoc_insertion_point(class_scope:CGChatSeting)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > autoaudio_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGChatSeting* default_instance_;
};
// -------------------------------------------------------------------

class GCChatSeting : public ::google::protobuf::Message {
 public:
  GCChatSeting();
  virtual ~GCChatSeting();

  GCChatSeting(const GCChatSeting& from);

  inline GCChatSeting& operator=(const GCChatSeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCChatSeting& default_instance();

  void Swap(GCChatSeting* other);

  // implements Message ----------------------------------------------

  GCChatSeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCChatSeting& from);
  void MergeFrom(const GCChatSeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 channels = 1;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::int32 value);
  inline void add_channels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_channels();

  // repeated int32 autoAudio = 2;
  inline int autoaudio_size() const;
  inline void clear_autoaudio();
  static const int kAutoAudioFieldNumber = 2;
  inline ::google::protobuf::int32 autoaudio(int index) const;
  inline void set_autoaudio(int index, ::google::protobuf::int32 value);
  inline void add_autoaudio(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      autoaudio() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_autoaudio();

  // @@protoc_insertion_point(class_scope:GCChatSeting)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > autoaudio_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCChatSeting* default_instance_;
};
// -------------------------------------------------------------------

class CGBlackChatSeting : public ::google::protobuf::Message {
 public:
  CGBlackChatSeting();
  virtual ~CGBlackChatSeting();

  CGBlackChatSeting(const CGBlackChatSeting& from);

  inline CGBlackChatSeting& operator=(const CGBlackChatSeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBlackChatSeting& default_instance();

  void Swap(CGBlackChatSeting* other);

  // implements Message ----------------------------------------------

  CGBlackChatSeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBlackChatSeting& from);
  void MergeFrom(const CGBlackChatSeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int64 playerId = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGBlackChatSeting)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBlackChatSeting* default_instance_;
};
// -------------------------------------------------------------------

class GCBlackChatSeting : public ::google::protobuf::Message {
 public:
  GCBlackChatSeting();
  virtual ~GCBlackChatSeting();

  GCBlackChatSeting(const GCBlackChatSeting& from);

  inline GCBlackChatSeting& operator=(const GCBlackChatSeting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBlackChatSeting& default_instance();

  void Swap(GCBlackChatSeting* other);

  // implements Message ----------------------------------------------

  GCBlackChatSeting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBlackChatSeting& from);
  void MergeFrom(const GCBlackChatSeting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // repeated int64 playerIds = 2;
  inline int playerids_size() const;
  inline void clear_playerids();
  static const int kPlayerIdsFieldNumber = 2;
  inline ::google::protobuf::int64 playerids(int index) const;
  inline void set_playerids(int index, ::google::protobuf::int64 value);
  inline void add_playerids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      playerids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_playerids();

  // @@protoc_insertion_point(class_scope:GCBlackChatSeting)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > playerids_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_ChatMessage_2eproto();
  friend void protobuf_AssignDesc_ChatMessage_2eproto();
  friend void protobuf_ShutdownFile_ChatMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBlackChatSeting* default_instance_;
};
// ===================================================================


// ===================================================================

// CGSendChatMsg

// optional int32 channel = 1;
inline bool CGSendChatMsg::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGSendChatMsg::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGSendChatMsg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGSendChatMsg::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 CGSendChatMsg::channel() const {
  // @@protoc_insertion_point(field_get:CGSendChatMsg.channel)
  return channel_;
}
inline void CGSendChatMsg::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:CGSendChatMsg.channel)
}

// optional int64 targetId = 2;
inline bool CGSendChatMsg::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGSendChatMsg::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGSendChatMsg::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGSendChatMsg::clear_targetid() {
  targetid_ = GOOGLE_LONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::int64 CGSendChatMsg::targetid() const {
  // @@protoc_insertion_point(field_get:CGSendChatMsg.targetId)
  return targetid_;
}
inline void CGSendChatMsg::set_targetid(::google::protobuf::int64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:CGSendChatMsg.targetId)
}

// optional string content = 3;
inline bool CGSendChatMsg::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGSendChatMsg::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGSendChatMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGSendChatMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CGSendChatMsg::content() const {
  // @@protoc_insertion_point(field_get:CGSendChatMsg.content)
  return *content_;
}
inline void CGSendChatMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:CGSendChatMsg.content)
}
inline void CGSendChatMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGSendChatMsg.content)
}
inline void CGSendChatMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGSendChatMsg.content)
}
inline ::std::string* CGSendChatMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGSendChatMsg.content)
  return content_;
}
inline ::std::string* CGSendChatMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGSendChatMsg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGSendChatMsg.content)
}

// -------------------------------------------------------------------

// ChatInfo

// optional int64 sendTime = 1;
inline bool ChatInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatInfo::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 ChatInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:ChatInfo.sendTime)
  return sendtime_;
}
inline void ChatInfo::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:ChatInfo.sendTime)
}

// optional string content = 2;
inline bool ChatInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ChatInfo::content() const {
  // @@protoc_insertion_point(field_get:ChatInfo.content)
  return *content_;
}
inline void ChatInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:ChatInfo.content)
}
inline void ChatInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatInfo.content)
}
inline void ChatInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatInfo.content)
}
inline ::std::string* ChatInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ChatInfo.content)
  return content_;
}
inline ::std::string* ChatInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatInfo.content)
}

// optional int32 horn = 4;
inline bool ChatInfo::has_horn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatInfo::set_has_horn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatInfo::clear_has_horn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatInfo::clear_horn() {
  horn_ = 0;
  clear_has_horn();
}
inline ::google::protobuf::int32 ChatInfo::horn() const {
  // @@protoc_insertion_point(field_get:ChatInfo.horn)
  return horn_;
}
inline void ChatInfo::set_horn(::google::protobuf::int32 value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:ChatInfo.horn)
}

// -------------------------------------------------------------------

// GCPushChatMsg

// optional int32 channel = 1;
inline bool GCPushChatMsg::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPushChatMsg::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPushChatMsg::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPushChatMsg::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 GCPushChatMsg::channel() const {
  // @@protoc_insertion_point(field_get:GCPushChatMsg.channel)
  return channel_;
}
inline void GCPushChatMsg::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:GCPushChatMsg.channel)
}

// repeated .ChatInfo chatInfos = 2;
inline int GCPushChatMsg::chatinfos_size() const {
  return chatinfos_.size();
}
inline void GCPushChatMsg::clear_chatinfos() {
  chatinfos_.Clear();
}
inline const ::ChatInfo& GCPushChatMsg::chatinfos(int index) const {
  // @@protoc_insertion_point(field_get:GCPushChatMsg.chatInfos)
  return chatinfos_.Get(index);
}
inline ::ChatInfo* GCPushChatMsg::mutable_chatinfos(int index) {
  // @@protoc_insertion_point(field_mutable:GCPushChatMsg.chatInfos)
  return chatinfos_.Mutable(index);
}
inline ::ChatInfo* GCPushChatMsg::add_chatinfos() {
  // @@protoc_insertion_point(field_add:GCPushChatMsg.chatInfos)
  return chatinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatInfo >&
GCPushChatMsg::chatinfos() const {
  // @@protoc_insertion_point(field_list:GCPushChatMsg.chatInfos)
  return chatinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::ChatInfo >*
GCPushChatMsg::mutable_chatinfos() {
  // @@protoc_insertion_point(field_mutable_list:GCPushChatMsg.chatInfos)
  return &chatinfos_;
}

// optional int64 targetId = 3;
inline bool GCPushChatMsg::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCPushChatMsg::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCPushChatMsg::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCPushChatMsg::clear_targetid() {
  targetid_ = GOOGLE_LONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::int64 GCPushChatMsg::targetid() const {
  // @@protoc_insertion_point(field_get:GCPushChatMsg.targetId)
  return targetid_;
}
inline void GCPushChatMsg::set_targetid(::google::protobuf::int64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:GCPushChatMsg.targetId)
}

// -------------------------------------------------------------------

// CGChatSeting

// repeated int32 channels = 1;
inline int CGChatSeting::channels_size() const {
  return channels_.size();
}
inline void CGChatSeting::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::int32 CGChatSeting::channels(int index) const {
  // @@protoc_insertion_point(field_get:CGChatSeting.channels)
  return channels_.Get(index);
}
inline void CGChatSeting::set_channels(int index, ::google::protobuf::int32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGChatSeting.channels)
}
inline void CGChatSeting::add_channels(::google::protobuf::int32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:CGChatSeting.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGChatSeting::channels() const {
  // @@protoc_insertion_point(field_list:CGChatSeting.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGChatSeting::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:CGChatSeting.channels)
  return &channels_;
}

// repeated int32 autoAudio = 2;
inline int CGChatSeting::autoaudio_size() const {
  return autoaudio_.size();
}
inline void CGChatSeting::clear_autoaudio() {
  autoaudio_.Clear();
}
inline ::google::protobuf::int32 CGChatSeting::autoaudio(int index) const {
  // @@protoc_insertion_point(field_get:CGChatSeting.autoAudio)
  return autoaudio_.Get(index);
}
inline void CGChatSeting::set_autoaudio(int index, ::google::protobuf::int32 value) {
  autoaudio_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGChatSeting.autoAudio)
}
inline void CGChatSeting::add_autoaudio(::google::protobuf::int32 value) {
  autoaudio_.Add(value);
  // @@protoc_insertion_point(field_add:CGChatSeting.autoAudio)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGChatSeting::autoaudio() const {
  // @@protoc_insertion_point(field_list:CGChatSeting.autoAudio)
  return autoaudio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGChatSeting::mutable_autoaudio() {
  // @@protoc_insertion_point(field_mutable_list:CGChatSeting.autoAudio)
  return &autoaudio_;
}

// -------------------------------------------------------------------

// GCChatSeting

// repeated int32 channels = 1;
inline int GCChatSeting::channels_size() const {
  return channels_.size();
}
inline void GCChatSeting::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::int32 GCChatSeting::channels(int index) const {
  // @@protoc_insertion_point(field_get:GCChatSeting.channels)
  return channels_.Get(index);
}
inline void GCChatSeting::set_channels(int index, ::google::protobuf::int32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCChatSeting.channels)
}
inline void GCChatSeting::add_channels(::google::protobuf::int32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:GCChatSeting.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCChatSeting::channels() const {
  // @@protoc_insertion_point(field_list:GCChatSeting.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCChatSeting::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:GCChatSeting.channels)
  return &channels_;
}

// repeated int32 autoAudio = 2;
inline int GCChatSeting::autoaudio_size() const {
  return autoaudio_.size();
}
inline void GCChatSeting::clear_autoaudio() {
  autoaudio_.Clear();
}
inline ::google::protobuf::int32 GCChatSeting::autoaudio(int index) const {
  // @@protoc_insertion_point(field_get:GCChatSeting.autoAudio)
  return autoaudio_.Get(index);
}
inline void GCChatSeting::set_autoaudio(int index, ::google::protobuf::int32 value) {
  autoaudio_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCChatSeting.autoAudio)
}
inline void GCChatSeting::add_autoaudio(::google::protobuf::int32 value) {
  autoaudio_.Add(value);
  // @@protoc_insertion_point(field_add:GCChatSeting.autoAudio)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCChatSeting::autoaudio() const {
  // @@protoc_insertion_point(field_list:GCChatSeting.autoAudio)
  return autoaudio_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCChatSeting::mutable_autoaudio() {
  // @@protoc_insertion_point(field_mutable_list:GCChatSeting.autoAudio)
  return &autoaudio_;
}

// -------------------------------------------------------------------

// CGBlackChatSeting

// optional int32 flag = 1;
inline bool CGBlackChatSeting::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBlackChatSeting::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBlackChatSeting::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBlackChatSeting::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 CGBlackChatSeting::flag() const {
  // @@protoc_insertion_point(field_get:CGBlackChatSeting.flag)
  return flag_;
}
inline void CGBlackChatSeting::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:CGBlackChatSeting.flag)
}

// optional int64 playerId = 2;
inline bool CGBlackChatSeting::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBlackChatSeting::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBlackChatSeting::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBlackChatSeting::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGBlackChatSeting::playerid() const {
  // @@protoc_insertion_point(field_get:CGBlackChatSeting.playerId)
  return playerid_;
}
inline void CGBlackChatSeting::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGBlackChatSeting.playerId)
}

// -------------------------------------------------------------------

// GCBlackChatSeting

// optional int32 flag = 1;
inline bool GCBlackChatSeting::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBlackChatSeting::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBlackChatSeting::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBlackChatSeting::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCBlackChatSeting::flag() const {
  // @@protoc_insertion_point(field_get:GCBlackChatSeting.flag)
  return flag_;
}
inline void GCBlackChatSeting::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCBlackChatSeting.flag)
}

// repeated int64 playerIds = 2;
inline int GCBlackChatSeting::playerids_size() const {
  return playerids_.size();
}
inline void GCBlackChatSeting::clear_playerids() {
  playerids_.Clear();
}
inline ::google::protobuf::int64 GCBlackChatSeting::playerids(int index) const {
  // @@protoc_insertion_point(field_get:GCBlackChatSeting.playerIds)
  return playerids_.Get(index);
}
inline void GCBlackChatSeting::set_playerids(int index, ::google::protobuf::int64 value) {
  playerids_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCBlackChatSeting.playerIds)
}
inline void GCBlackChatSeting::add_playerids(::google::protobuf::int64 value) {
  playerids_.Add(value);
  // @@protoc_insertion_point(field_add:GCBlackChatSeting.playerIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GCBlackChatSeting::playerids() const {
  // @@protoc_insertion_point(field_list:GCBlackChatSeting.playerIds)
  return playerids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GCBlackChatSeting::mutable_playerids() {
  // @@protoc_insertion_point(field_mutable_list:GCBlackChatSeting.playerIds)
  return &playerids_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChatMessage_2eproto__INCLUDED
