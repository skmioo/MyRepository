// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CombineActivityMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CombineActivityMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CombineActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCombineActivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCombineActivityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineActivityListItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineActivityListItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineActivityExchangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineActivityExchangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineActivityBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineActivityBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetCombineActivityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetCombineActivityReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetCombineActivityRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetCombineActivityRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCombineActivityItemUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCombineActivityItemUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CombineActivityMessage_2eproto() {
  protobuf_AddDesc_CombineActivityMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CombineActivityMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CombineActivityInfo_descriptor_ = file->message_type(0);
  static const int CombineActivityInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, tabid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, tabimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, tabdesc_),
  };
  CombineActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineActivityInfo_descriptor_,
      CombineActivityInfo::default_instance_,
      CombineActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineActivityInfo));
  CombineActivity_descriptor_ = file->message_type(1);
  static const int CombineActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivity, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivity, infolist_),
  };
  CombineActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineActivity_descriptor_,
      CombineActivity::default_instance_,
      CombineActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineActivity));
  GCCombineActivityList_descriptor_ = file->message_type(2);
  static const int GCCombineActivityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityList, activitylist_),
  };
  GCCombineActivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCombineActivityList_descriptor_,
      GCCombineActivityList::default_instance_,
      GCCombineActivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCombineActivityList));
  CombineActivityListItem_descriptor_ = file->message_type(3);
  static const int CombineActivityListItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, progresstext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, needvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, gettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, gettimeslimit_),
  };
  CombineActivityListItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineActivityListItem_descriptor_,
      CombineActivityListItem::default_instance_,
      CombineActivityListItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityListItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineActivityListItem));
  CombineActivityExchangeItem_descriptor_ = file->message_type(4);
  static const int CombineActivityExchangeItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, needitemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, gettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, gettimeslimit_),
  };
  CombineActivityExchangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineActivityExchangeItem_descriptor_,
      CombineActivityExchangeItem::default_instance_,
      CombineActivityExchangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityExchangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineActivityExchangeItem));
  CombineActivityBuyItem_descriptor_ = file->message_type(5);
  static const int CombineActivityBuyItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, gettimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, gettimeslimit_),
  };
  CombineActivityBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineActivityBuyItem_descriptor_,
      CombineActivityBuyItem::default_instance_,
      CombineActivityBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineActivityBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineActivityBuyItem));
  CGGetCombineActivityReward_descriptor_ = file->message_type(6);
  static const int CGGetCombineActivityReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCombineActivityReward, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCombineActivityReward, id_),
  };
  CGGetCombineActivityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetCombineActivityReward_descriptor_,
      CGGetCombineActivityReward::default_instance_,
      CGGetCombineActivityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCombineActivityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetCombineActivityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetCombineActivityReward));
  GCGetCombineActivityRewardBack_descriptor_ = file->message_type(7);
  static const int GCGetCombineActivityRewardBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, gettimes_),
  };
  GCGetCombineActivityRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetCombineActivityRewardBack_descriptor_,
      GCGetCombineActivityRewardBack::default_instance_,
      GCGetCombineActivityRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetCombineActivityRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetCombineActivityRewardBack));
  GCCombineActivityItemUpdate_descriptor_ = file->message_type(8);
  static const int GCCombineActivityItemUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, listitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, exchangeitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, buyitems_),
  };
  GCCombineActivityItemUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCombineActivityItemUpdate_descriptor_,
      GCCombineActivityItemUpdate::default_instance_,
      GCCombineActivityItemUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombineActivityItemUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCombineActivityItemUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CombineActivityMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineActivityInfo_descriptor_, &CombineActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineActivity_descriptor_, &CombineActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCombineActivityList_descriptor_, &GCCombineActivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineActivityListItem_descriptor_, &CombineActivityListItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineActivityExchangeItem_descriptor_, &CombineActivityExchangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineActivityBuyItem_descriptor_, &CombineActivityBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetCombineActivityReward_descriptor_, &CGGetCombineActivityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetCombineActivityRewardBack_descriptor_, &GCGetCombineActivityRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCombineActivityItemUpdate_descriptor_, &GCCombineActivityItemUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CombineActivityMessage_2eproto() {
  delete CombineActivityInfo::default_instance_;
  delete CombineActivityInfo_reflection_;
  delete CombineActivity::default_instance_;
  delete CombineActivity_reflection_;
  delete GCCombineActivityList::default_instance_;
  delete GCCombineActivityList_reflection_;
  delete CombineActivityListItem::default_instance_;
  delete CombineActivityListItem_reflection_;
  delete CombineActivityExchangeItem::default_instance_;
  delete CombineActivityExchangeItem_reflection_;
  delete CombineActivityBuyItem::default_instance_;
  delete CombineActivityBuyItem_reflection_;
  delete CGGetCombineActivityReward::default_instance_;
  delete CGGetCombineActivityReward_reflection_;
  delete GCGetCombineActivityRewardBack::default_instance_;
  delete GCGetCombineActivityRewardBack_reflection_;
  delete GCCombineActivityItemUpdate::default_instance_;
  delete GCCombineActivityItemUpdate_reflection_;
}

void protobuf_AddDesc_CombineActivityMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CombineActivityMessage.proto\032\023CommonMe"
    "ssage.proto\032\022InnerMessage.proto\"b\n\023Combi"
    "neActivityInfo\022\r\n\005actId\030\001 \001(\005\022\014\n\004name\030\002 "
    "\001(\t\022\r\n\005tabid\030\003 \001(\005\022\016\n\006tabimg\030\004 \001(\t\022\017\n\007ta"
    "bDesc\030\005 \001(\t\"H\n\017CombineActivity\022\r\n\005actId\030"
    "\001 \001(\005\022&\n\010infoList\030\002 \003(\0132\024.CombineActivit"
    "yInfo\"\?\n\025GCCombineActivityList\022&\n\014activi"
    "tyList\030\001 \003(\0132\020.CombineActivity\"\253\001\n\027Combi"
    "neActivityListItem\022\n\n\002id\030\001 \001(\005\022\014\n\004desc\030\002"
    " \001(\t\022\022\n\nrewardInfo\030\003 \001(\t\022\024\n\014progressText"
    "\030\004 \001(\t\022\020\n\010curValue\030\005 \001(\005\022\021\n\tneedValue\030\006 "
    "\001(\005\022\020\n\010getTimes\030\007 \001(\005\022\025\n\rgetTimesLimit\030\010"
    " \001(\005\"\212\001\n\033CombineActivityExchangeItem\022\n\n\002"
    "id\030\001 \001(\005\022\014\n\004desc\030\002 \001(\t\022\022\n\nrewardInfo\030\003 \001"
    "(\t\022\024\n\014needItemList\030\004 \001(\t\022\020\n\010getTimes\030\005 \001"
    "(\005\022\025\n\rgetTimesLimit\030\006 \001(\005\"\202\001\n\026CombineAct"
    "ivityBuyItem\022\n\n\002id\030\001 \001(\005\022\014\n\004desc\030\002 \001(\t\022\022"
    "\n\nrewardInfo\030\003 \001(\t\022\021\n\tneedMoney\030\004 \001(\t\022\020\n"
    "\010getTimes\030\005 \001(\005\022\025\n\rgetTimesLimit\030\006 \001(\005\"7"
    "\n\032CGGetCombineActivityReward\022\r\n\005actId\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\005\"]\n\036GCGetCombineActivityR"
    "ewardBack\022\016\n\006result\030\001 \001(\005\022\r\n\005actId\030\002 \001(\005"
    "\022\n\n\002id\030\003 \001(\005\022\020\n\010getTimes\030\004 \001(\005\"\312\001\n\033GCCom"
    "bineActivityItemUpdate\022\r\n\005actId\030\001 \001(\005\022\017\n"
    "\007operate\030\002 \001(\005\022+\n\tlistItems\030\003 \003(\0132\030.Comb"
    "ineActivityListItem\0223\n\rexchangeItems\030\004 \003"
    "(\0132\034.CombineActivityExchangeItem\022)\n\010buyI"
    "tems\030\005 \003(\0132\027.CombineActivityBuyItemB\031\n\027c"
    "om.mile.common.message", 1142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CombineActivityMessage.proto", &protobuf_RegisterTypes);
  CombineActivityInfo::default_instance_ = new CombineActivityInfo();
  CombineActivity::default_instance_ = new CombineActivity();
  GCCombineActivityList::default_instance_ = new GCCombineActivityList();
  CombineActivityListItem::default_instance_ = new CombineActivityListItem();
  CombineActivityExchangeItem::default_instance_ = new CombineActivityExchangeItem();
  CombineActivityBuyItem::default_instance_ = new CombineActivityBuyItem();
  CGGetCombineActivityReward::default_instance_ = new CGGetCombineActivityReward();
  GCGetCombineActivityRewardBack::default_instance_ = new GCGetCombineActivityRewardBack();
  GCCombineActivityItemUpdate::default_instance_ = new GCCombineActivityItemUpdate();
  CombineActivityInfo::default_instance_->InitAsDefaultInstance();
  CombineActivity::default_instance_->InitAsDefaultInstance();
  GCCombineActivityList::default_instance_->InitAsDefaultInstance();
  CombineActivityListItem::default_instance_->InitAsDefaultInstance();
  CombineActivityExchangeItem::default_instance_->InitAsDefaultInstance();
  CombineActivityBuyItem::default_instance_->InitAsDefaultInstance();
  CGGetCombineActivityReward::default_instance_->InitAsDefaultInstance();
  GCGetCombineActivityRewardBack::default_instance_->InitAsDefaultInstance();
  GCCombineActivityItemUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CombineActivityMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CombineActivityMessage_2eproto {
  StaticDescriptorInitializer_CombineActivityMessage_2eproto() {
    protobuf_AddDesc_CombineActivityMessage_2eproto();
  }
} static_descriptor_initializer_CombineActivityMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CombineActivityInfo::kActIdFieldNumber;
const int CombineActivityInfo::kNameFieldNumber;
const int CombineActivityInfo::kTabidFieldNumber;
const int CombineActivityInfo::kTabimgFieldNumber;
const int CombineActivityInfo::kTabDescFieldNumber;
#endif  // !_MSC_VER

CombineActivityInfo::CombineActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombineActivityInfo)
}

void CombineActivityInfo::InitAsDefaultInstance() {
}

CombineActivityInfo::CombineActivityInfo(const CombineActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombineActivityInfo)
}

void CombineActivityInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  actid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tabid_ = 0;
  tabimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tabdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineActivityInfo::~CombineActivityInfo() {
  // @@protoc_insertion_point(destructor:CombineActivityInfo)
  SharedDtor();
}

void CombineActivityInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (tabimg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tabimg_;
  }
  if (tabdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tabdesc_;
  }
  if (this != default_instance_) {
  }
}

void CombineActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineActivityInfo_descriptor_;
}

const CombineActivityInfo& CombineActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CombineActivityInfo* CombineActivityInfo::default_instance_ = NULL;

CombineActivityInfo* CombineActivityInfo::New() const {
  return new CombineActivityInfo;
}

void CombineActivityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CombineActivityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(actid_, tabid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_tabimg()) {
      if (tabimg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tabimg_->clear();
      }
    }
    if (has_tabdesc()) {
      if (tabdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tabdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombineActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tabid;
        break;
      }

      // optional int32 tabid = 3;
      case 3: {
        if (tag == 24) {
         parse_tabid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabid_)));
          set_has_tabid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tabimg;
        break;
      }

      // optional string tabimg = 4;
      case 4: {
        if (tag == 34) {
         parse_tabimg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabimg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tabimg().data(), this->tabimg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tabimg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tabDesc;
        break;
      }

      // optional string tabDesc = 5;
      case 5: {
        if (tag == 42) {
         parse_tabDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tabdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tabdesc().data(), this->tabdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tabdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombineActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombineActivityInfo)
  return false;
#undef DO_
}

void CombineActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombineActivityInfo)
  // optional int32 actId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 tabid = 3;
  if (has_tabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tabid(), output);
  }

  // optional string tabimg = 4;
  if (has_tabimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tabimg().data(), this->tabimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tabimg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tabimg(), output);
  }

  // optional string tabDesc = 5;
  if (has_tabdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tabdesc().data(), this->tabdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tabdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tabdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombineActivityInfo)
}

::google::protobuf::uint8* CombineActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombineActivityInfo)
  // optional int32 actId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 tabid = 3;
  if (has_tabid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tabid(), target);
  }

  // optional string tabimg = 4;
  if (has_tabimg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tabimg().data(), this->tabimg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tabimg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tabimg(), target);
  }

  // optional string tabDesc = 5;
  if (has_tabdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tabdesc().data(), this->tabdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tabdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tabdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombineActivityInfo)
  return target;
}

int CombineActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 tabid = 3;
    if (has_tabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabid());
    }

    // optional string tabimg = 4;
    if (has_tabimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabimg());
    }

    // optional string tabDesc = 5;
    if (has_tabdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tabdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineActivityInfo::MergeFrom(const CombineActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tabid()) {
      set_tabid(from.tabid());
    }
    if (from.has_tabimg()) {
      set_tabimg(from.tabimg());
    }
    if (from.has_tabdesc()) {
      set_tabdesc(from.tabdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineActivityInfo::CopyFrom(const CombineActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineActivityInfo::IsInitialized() const {

  return true;
}

void CombineActivityInfo::Swap(CombineActivityInfo* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(name_, other->name_);
    std::swap(tabid_, other->tabid_);
    std::swap(tabimg_, other->tabimg_);
    std::swap(tabdesc_, other->tabdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineActivityInfo_descriptor_;
  metadata.reflection = CombineActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineActivity::kActIdFieldNumber;
const int CombineActivity::kInfoListFieldNumber;
#endif  // !_MSC_VER

CombineActivity::CombineActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombineActivity)
}

void CombineActivity::InitAsDefaultInstance() {
}

CombineActivity::CombineActivity(const CombineActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombineActivity)
}

void CombineActivity::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineActivity::~CombineActivity() {
  // @@protoc_insertion_point(destructor:CombineActivity)
  SharedDtor();
}

void CombineActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombineActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineActivity_descriptor_;
}

const CombineActivity& CombineActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CombineActivity* CombineActivity::default_instance_ = NULL;

CombineActivity* CombineActivity::New() const {
  return new CombineActivity;
}

void CombineActivity::Clear() {
  actid_ = 0;
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombineActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infoList;
        break;
      }

      // repeated .CombineActivityInfo infoList = 2;
      case 2: {
        if (tag == 18) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infoList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombineActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombineActivity)
  return false;
#undef DO_
}

void CombineActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombineActivity)
  // optional int32 actId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // repeated .CombineActivityInfo infoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombineActivity)
}

::google::protobuf::uint8* CombineActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombineActivity)
  // optional int32 actId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // repeated .CombineActivityInfo infoList = 2;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombineActivity)
  return target;
}

int CombineActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

  }
  // repeated .CombineActivityInfo infoList = 2;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineActivity::MergeFrom(const CombineActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineActivity::CopyFrom(const CombineActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineActivity::IsInitialized() const {

  return true;
}

void CombineActivity::Swap(CombineActivity* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineActivity_descriptor_;
  metadata.reflection = CombineActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCombineActivityList::kActivityListFieldNumber;
#endif  // !_MSC_VER

GCCombineActivityList::GCCombineActivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCombineActivityList)
}

void GCCombineActivityList::InitAsDefaultInstance() {
}

GCCombineActivityList::GCCombineActivityList(const GCCombineActivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCombineActivityList)
}

void GCCombineActivityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCombineActivityList::~GCCombineActivityList() {
  // @@protoc_insertion_point(destructor:GCCombineActivityList)
  SharedDtor();
}

void GCCombineActivityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCombineActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCombineActivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCombineActivityList_descriptor_;
}

const GCCombineActivityList& GCCombineActivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

GCCombineActivityList* GCCombineActivityList::default_instance_ = NULL;

GCCombineActivityList* GCCombineActivityList::New() const {
  return new GCCombineActivityList;
}

void GCCombineActivityList::Clear() {
  activitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCombineActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCombineActivityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CombineActivity activityList = 1;
      case 1: {
        if (tag == 10) {
         parse_activityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activityList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCombineActivityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCombineActivityList)
  return false;
#undef DO_
}

void GCCombineActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCombineActivityList)
  // repeated .CombineActivity activityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activitylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCombineActivityList)
}

::google::protobuf::uint8* GCCombineActivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCombineActivityList)
  // repeated .CombineActivity activityList = 1;
  for (int i = 0; i < this->activitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activitylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCombineActivityList)
  return target;
}

int GCCombineActivityList::ByteSize() const {
  int total_size = 0;

  // repeated .CombineActivity activityList = 1;
  total_size += 1 * this->activitylist_size();
  for (int i = 0; i < this->activitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCombineActivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCombineActivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCombineActivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCombineActivityList::MergeFrom(const GCCombineActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylist_.MergeFrom(from.activitylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCombineActivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCombineActivityList::CopyFrom(const GCCombineActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCombineActivityList::IsInitialized() const {

  return true;
}

void GCCombineActivityList::Swap(GCCombineActivityList* other) {
  if (other != this) {
    activitylist_.Swap(&other->activitylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCombineActivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCombineActivityList_descriptor_;
  metadata.reflection = GCCombineActivityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineActivityListItem::kIdFieldNumber;
const int CombineActivityListItem::kDescFieldNumber;
const int CombineActivityListItem::kRewardInfoFieldNumber;
const int CombineActivityListItem::kProgressTextFieldNumber;
const int CombineActivityListItem::kCurValueFieldNumber;
const int CombineActivityListItem::kNeedValueFieldNumber;
const int CombineActivityListItem::kGetTimesFieldNumber;
const int CombineActivityListItem::kGetTimesLimitFieldNumber;
#endif  // !_MSC_VER

CombineActivityListItem::CombineActivityListItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombineActivityListItem)
}

void CombineActivityListItem::InitAsDefaultInstance() {
}

CombineActivityListItem::CombineActivityListItem(const CombineActivityListItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombineActivityListItem)
}

void CombineActivityListItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  progresstext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curvalue_ = 0;
  needvalue_ = 0;
  gettimes_ = 0;
  gettimeslimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineActivityListItem::~CombineActivityListItem() {
  // @@protoc_insertion_point(destructor:CombineActivityListItem)
  SharedDtor();
}

void CombineActivityListItem::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardinfo_;
  }
  if (progresstext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete progresstext_;
  }
  if (this != default_instance_) {
  }
}

void CombineActivityListItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineActivityListItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineActivityListItem_descriptor_;
}

const CombineActivityListItem& CombineActivityListItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CombineActivityListItem* CombineActivityListItem::default_instance_ = NULL;

CombineActivityListItem* CombineActivityListItem::New() const {
  return new CombineActivityListItem;
}

void CombineActivityListItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CombineActivityListItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, curvalue_);
    ZR_(needvalue_, gettimeslimit_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_rewardinfo()) {
      if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewardinfo_->clear();
      }
    }
    if (has_progresstext()) {
      if (progresstext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        progresstext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineActivityListItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombineActivityListItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardInfo;
        break;
      }

      // optional string rewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewardinfo().data(), this->rewardinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewardinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_progressText;
        break;
      }

      // optional string progressText = 4;
      case 4: {
        if (tag == 34) {
         parse_progressText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_progresstext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->progresstext().data(), this->progresstext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "progresstext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curValue;
        break;
      }

      // optional int32 curValue = 5;
      case 5: {
        if (tag == 40) {
         parse_curValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_needValue;
        break;
      }

      // optional int32 needValue = 6;
      case 6: {
        if (tag == 48) {
         parse_needValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needvalue_)));
          set_has_needvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_getTimes;
        break;
      }

      // optional int32 getTimes = 7;
      case 7: {
        if (tag == 56) {
         parse_getTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimes_)));
          set_has_gettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_getTimesLimit;
        break;
      }

      // optional int32 getTimesLimit = 8;
      case 8: {
        if (tag == 64) {
         parse_getTimesLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimeslimit_)));
          set_has_gettimeslimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombineActivityListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombineActivityListItem)
  return false;
#undef DO_
}

void CombineActivityListItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombineActivityListItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rewardinfo(), output);
  }

  // optional string progressText = 4;
  if (has_progresstext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->progresstext().data(), this->progresstext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "progresstext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->progresstext(), output);
  }

  // optional int32 curValue = 5;
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->curvalue(), output);
  }

  // optional int32 needValue = 6;
  if (has_needvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->needvalue(), output);
  }

  // optional int32 getTimes = 7;
  if (has_gettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gettimes(), output);
  }

  // optional int32 getTimesLimit = 8;
  if (has_gettimeslimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gettimeslimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombineActivityListItem)
}

::google::protobuf::uint8* CombineActivityListItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombineActivityListItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewardinfo(), target);
  }

  // optional string progressText = 4;
  if (has_progresstext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->progresstext().data(), this->progresstext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "progresstext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->progresstext(), target);
  }

  // optional int32 curValue = 5;
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->curvalue(), target);
  }

  // optional int32 needValue = 6;
  if (has_needvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->needvalue(), target);
  }

  // optional int32 getTimes = 7;
  if (has_gettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gettimes(), target);
  }

  // optional int32 getTimesLimit = 8;
  if (has_gettimeslimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gettimeslimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombineActivityListItem)
  return target;
}

int CombineActivityListItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string rewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardinfo());
    }

    // optional string progressText = 4;
    if (has_progresstext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->progresstext());
    }

    // optional int32 curValue = 5;
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvalue());
    }

    // optional int32 needValue = 6;
    if (has_needvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needvalue());
    }

    // optional int32 getTimes = 7;
    if (has_gettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimes());
    }

    // optional int32 getTimesLimit = 8;
    if (has_gettimeslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimeslimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineActivityListItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineActivityListItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineActivityListItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineActivityListItem::MergeFrom(const CombineActivityListItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
    if (from.has_progresstext()) {
      set_progresstext(from.progresstext());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_needvalue()) {
      set_needvalue(from.needvalue());
    }
    if (from.has_gettimes()) {
      set_gettimes(from.gettimes());
    }
    if (from.has_gettimeslimit()) {
      set_gettimeslimit(from.gettimeslimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineActivityListItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineActivityListItem::CopyFrom(const CombineActivityListItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineActivityListItem::IsInitialized() const {

  return true;
}

void CombineActivityListItem::Swap(CombineActivityListItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(progresstext_, other->progresstext_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(needvalue_, other->needvalue_);
    std::swap(gettimes_, other->gettimes_);
    std::swap(gettimeslimit_, other->gettimeslimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineActivityListItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineActivityListItem_descriptor_;
  metadata.reflection = CombineActivityListItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineActivityExchangeItem::kIdFieldNumber;
const int CombineActivityExchangeItem::kDescFieldNumber;
const int CombineActivityExchangeItem::kRewardInfoFieldNumber;
const int CombineActivityExchangeItem::kNeedItemListFieldNumber;
const int CombineActivityExchangeItem::kGetTimesFieldNumber;
const int CombineActivityExchangeItem::kGetTimesLimitFieldNumber;
#endif  // !_MSC_VER

CombineActivityExchangeItem::CombineActivityExchangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombineActivityExchangeItem)
}

void CombineActivityExchangeItem::InitAsDefaultInstance() {
}

CombineActivityExchangeItem::CombineActivityExchangeItem(const CombineActivityExchangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombineActivityExchangeItem)
}

void CombineActivityExchangeItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needitemlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gettimes_ = 0;
  gettimeslimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineActivityExchangeItem::~CombineActivityExchangeItem() {
  // @@protoc_insertion_point(destructor:CombineActivityExchangeItem)
  SharedDtor();
}

void CombineActivityExchangeItem::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardinfo_;
  }
  if (needitemlist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete needitemlist_;
  }
  if (this != default_instance_) {
  }
}

void CombineActivityExchangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineActivityExchangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineActivityExchangeItem_descriptor_;
}

const CombineActivityExchangeItem& CombineActivityExchangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CombineActivityExchangeItem* CombineActivityExchangeItem::default_instance_ = NULL;

CombineActivityExchangeItem* CombineActivityExchangeItem::New() const {
  return new CombineActivityExchangeItem;
}

void CombineActivityExchangeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CombineActivityExchangeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, gettimes_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_rewardinfo()) {
      if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewardinfo_->clear();
      }
    }
    if (has_needitemlist()) {
      if (needitemlist_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        needitemlist_->clear();
      }
    }
    gettimeslimit_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineActivityExchangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombineActivityExchangeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardInfo;
        break;
      }

      // optional string rewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewardinfo().data(), this->rewardinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewardinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_needItemList;
        break;
      }

      // optional string needItemList = 4;
      case 4: {
        if (tag == 34) {
         parse_needItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needitemlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->needitemlist().data(), this->needitemlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "needitemlist");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_getTimes;
        break;
      }

      // optional int32 getTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_getTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimes_)));
          set_has_gettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_getTimesLimit;
        break;
      }

      // optional int32 getTimesLimit = 6;
      case 6: {
        if (tag == 48) {
         parse_getTimesLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimeslimit_)));
          set_has_gettimeslimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombineActivityExchangeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombineActivityExchangeItem)
  return false;
#undef DO_
}

void CombineActivityExchangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombineActivityExchangeItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rewardinfo(), output);
  }

  // optional string needItemList = 4;
  if (has_needitemlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needitemlist().data(), this->needitemlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needitemlist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->needitemlist(), output);
  }

  // optional int32 getTimes = 5;
  if (has_gettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gettimes(), output);
  }

  // optional int32 getTimesLimit = 6;
  if (has_gettimeslimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gettimeslimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombineActivityExchangeItem)
}

::google::protobuf::uint8* CombineActivityExchangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombineActivityExchangeItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewardinfo(), target);
  }

  // optional string needItemList = 4;
  if (has_needitemlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needitemlist().data(), this->needitemlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needitemlist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->needitemlist(), target);
  }

  // optional int32 getTimes = 5;
  if (has_gettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gettimes(), target);
  }

  // optional int32 getTimesLimit = 6;
  if (has_gettimeslimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gettimeslimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombineActivityExchangeItem)
  return target;
}

int CombineActivityExchangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string rewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardinfo());
    }

    // optional string needItemList = 4;
    if (has_needitemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needitemlist());
    }

    // optional int32 getTimes = 5;
    if (has_gettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimes());
    }

    // optional int32 getTimesLimit = 6;
    if (has_gettimeslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimeslimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineActivityExchangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineActivityExchangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineActivityExchangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineActivityExchangeItem::MergeFrom(const CombineActivityExchangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
    if (from.has_needitemlist()) {
      set_needitemlist(from.needitemlist());
    }
    if (from.has_gettimes()) {
      set_gettimes(from.gettimes());
    }
    if (from.has_gettimeslimit()) {
      set_gettimeslimit(from.gettimeslimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineActivityExchangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineActivityExchangeItem::CopyFrom(const CombineActivityExchangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineActivityExchangeItem::IsInitialized() const {

  return true;
}

void CombineActivityExchangeItem::Swap(CombineActivityExchangeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(needitemlist_, other->needitemlist_);
    std::swap(gettimes_, other->gettimes_);
    std::swap(gettimeslimit_, other->gettimeslimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineActivityExchangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineActivityExchangeItem_descriptor_;
  metadata.reflection = CombineActivityExchangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineActivityBuyItem::kIdFieldNumber;
const int CombineActivityBuyItem::kDescFieldNumber;
const int CombineActivityBuyItem::kRewardInfoFieldNumber;
const int CombineActivityBuyItem::kNeedMoneyFieldNumber;
const int CombineActivityBuyItem::kGetTimesFieldNumber;
const int CombineActivityBuyItem::kGetTimesLimitFieldNumber;
#endif  // !_MSC_VER

CombineActivityBuyItem::CombineActivityBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombineActivityBuyItem)
}

void CombineActivityBuyItem::InitAsDefaultInstance() {
}

CombineActivityBuyItem::CombineActivityBuyItem(const CombineActivityBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombineActivityBuyItem)
}

void CombineActivityBuyItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewardinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  needmoney_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gettimes_ = 0;
  gettimeslimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineActivityBuyItem::~CombineActivityBuyItem() {
  // @@protoc_insertion_point(destructor:CombineActivityBuyItem)
  SharedDtor();
}

void CombineActivityBuyItem::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewardinfo_;
  }
  if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete needmoney_;
  }
  if (this != default_instance_) {
  }
}

void CombineActivityBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineActivityBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineActivityBuyItem_descriptor_;
}

const CombineActivityBuyItem& CombineActivityBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CombineActivityBuyItem* CombineActivityBuyItem::default_instance_ = NULL;

CombineActivityBuyItem* CombineActivityBuyItem::New() const {
  return new CombineActivityBuyItem;
}

void CombineActivityBuyItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CombineActivityBuyItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, gettimes_);
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    if (has_rewardinfo()) {
      if (rewardinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewardinfo_->clear();
      }
    }
    if (has_needmoney()) {
      if (needmoney_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        needmoney_->clear();
      }
    }
    gettimeslimit_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineActivityBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombineActivityBuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (tag == 18) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewardInfo;
        break;
      }

      // optional string rewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_rewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewardinfo().data(), this->rewardinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewardinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_needMoney;
        break;
      }

      // optional string needMoney = 4;
      case 4: {
        if (tag == 34) {
         parse_needMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needmoney()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->needmoney().data(), this->needmoney().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "needmoney");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_getTimes;
        break;
      }

      // optional int32 getTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_getTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimes_)));
          set_has_gettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_getTimesLimit;
        break;
      }

      // optional int32 getTimesLimit = 6;
      case 6: {
        if (tag == 48) {
         parse_getTimesLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimeslimit_)));
          set_has_gettimeslimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombineActivityBuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombineActivityBuyItem)
  return false;
#undef DO_
}

void CombineActivityBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombineActivityBuyItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->desc(), output);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rewardinfo(), output);
  }

  // optional string needMoney = 4;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needmoney().data(), this->needmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needmoney");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->needmoney(), output);
  }

  // optional int32 getTimes = 5;
  if (has_gettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gettimes(), output);
  }

  // optional int32 getTimesLimit = 6;
  if (has_gettimeslimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gettimeslimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombineActivityBuyItem)
}

::google::protobuf::uint8* CombineActivityBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombineActivityBuyItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string rewardInfo = 3;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewardinfo().data(), this->rewardinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewardinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewardinfo(), target);
  }

  // optional string needMoney = 4;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->needmoney().data(), this->needmoney().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "needmoney");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->needmoney(), target);
  }

  // optional int32 getTimes = 5;
  if (has_gettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gettimes(), target);
  }

  // optional int32 getTimesLimit = 6;
  if (has_gettimeslimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gettimeslimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombineActivityBuyItem)
  return target;
}

int CombineActivityBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string rewardInfo = 3;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardinfo());
    }

    // optional string needMoney = 4;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needmoney());
    }

    // optional int32 getTimes = 5;
    if (has_gettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimes());
    }

    // optional int32 getTimesLimit = 6;
    if (has_gettimeslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimeslimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineActivityBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineActivityBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineActivityBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineActivityBuyItem::MergeFrom(const CombineActivityBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
    if (from.has_needmoney()) {
      set_needmoney(from.needmoney());
    }
    if (from.has_gettimes()) {
      set_gettimes(from.gettimes());
    }
    if (from.has_gettimeslimit()) {
      set_gettimeslimit(from.gettimeslimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineActivityBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineActivityBuyItem::CopyFrom(const CombineActivityBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineActivityBuyItem::IsInitialized() const {

  return true;
}

void CombineActivityBuyItem::Swap(CombineActivityBuyItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(gettimes_, other->gettimes_);
    std::swap(gettimeslimit_, other->gettimeslimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineActivityBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineActivityBuyItem_descriptor_;
  metadata.reflection = CombineActivityBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetCombineActivityReward::kActIdFieldNumber;
const int CGGetCombineActivityReward::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetCombineActivityReward::CGGetCombineActivityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetCombineActivityReward)
}

void CGGetCombineActivityReward::InitAsDefaultInstance() {
}

CGGetCombineActivityReward::CGGetCombineActivityReward(const CGGetCombineActivityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetCombineActivityReward)
}

void CGGetCombineActivityReward::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetCombineActivityReward::~CGGetCombineActivityReward() {
  // @@protoc_insertion_point(destructor:CGGetCombineActivityReward)
  SharedDtor();
}

void CGGetCombineActivityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetCombineActivityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetCombineActivityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetCombineActivityReward_descriptor_;
}

const CGGetCombineActivityReward& CGGetCombineActivityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

CGGetCombineActivityReward* CGGetCombineActivityReward::default_instance_ = NULL;

CGGetCombineActivityReward* CGGetCombineActivityReward::New() const {
  return new CGGetCombineActivityReward;
}

void CGGetCombineActivityReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetCombineActivityReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actid_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetCombineActivityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetCombineActivityReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetCombineActivityReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetCombineActivityReward)
  return false;
#undef DO_
}

void CGGetCombineActivityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetCombineActivityReward)
  // optional int32 actId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetCombineActivityReward)
}

::google::protobuf::uint8* CGGetCombineActivityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetCombineActivityReward)
  // optional int32 actId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetCombineActivityReward)
  return target;
}

int CGGetCombineActivityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetCombineActivityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetCombineActivityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetCombineActivityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetCombineActivityReward::MergeFrom(const CGGetCombineActivityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetCombineActivityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetCombineActivityReward::CopyFrom(const CGGetCombineActivityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetCombineActivityReward::IsInitialized() const {

  return true;
}

void CGGetCombineActivityReward::Swap(CGGetCombineActivityReward* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetCombineActivityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetCombineActivityReward_descriptor_;
  metadata.reflection = CGGetCombineActivityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetCombineActivityRewardBack::kResultFieldNumber;
const int GCGetCombineActivityRewardBack::kActIdFieldNumber;
const int GCGetCombineActivityRewardBack::kIdFieldNumber;
const int GCGetCombineActivityRewardBack::kGetTimesFieldNumber;
#endif  // !_MSC_VER

GCGetCombineActivityRewardBack::GCGetCombineActivityRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetCombineActivityRewardBack)
}

void GCGetCombineActivityRewardBack::InitAsDefaultInstance() {
}

GCGetCombineActivityRewardBack::GCGetCombineActivityRewardBack(const GCGetCombineActivityRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetCombineActivityRewardBack)
}

void GCGetCombineActivityRewardBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  actid_ = 0;
  id_ = 0;
  gettimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetCombineActivityRewardBack::~GCGetCombineActivityRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetCombineActivityRewardBack)
  SharedDtor();
}

void GCGetCombineActivityRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetCombineActivityRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetCombineActivityRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetCombineActivityRewardBack_descriptor_;
}

const GCGetCombineActivityRewardBack& GCGetCombineActivityRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

GCGetCombineActivityRewardBack* GCGetCombineActivityRewardBack::default_instance_ = NULL;

GCGetCombineActivityRewardBack* GCGetCombineActivityRewardBack::New() const {
  return new GCGetCombineActivityRewardBack;
}

void GCGetCombineActivityRewardBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetCombineActivityRewardBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, gettimes_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetCombineActivityRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetCombineActivityRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actId;
        break;
      }

      // optional int32 actId = 2;
      case 2: {
        if (tag == 16) {
         parse_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_getTimes;
        break;
      }

      // optional int32 getTimes = 4;
      case 4: {
        if (tag == 32) {
         parse_getTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettimes_)));
          set_has_gettimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetCombineActivityRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetCombineActivityRewardBack)
  return false;
#undef DO_
}

void GCGetCombineActivityRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetCombineActivityRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 actId = 2;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actid(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 getTimes = 4;
  if (has_gettimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gettimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetCombineActivityRewardBack)
}

::google::protobuf::uint8* GCGetCombineActivityRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetCombineActivityRewardBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 actId = 2;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actid(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 getTimes = 4;
  if (has_gettimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gettimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetCombineActivityRewardBack)
  return target;
}

int GCGetCombineActivityRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 actId = 2;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 getTimes = 4;
    if (has_gettimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetCombineActivityRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetCombineActivityRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetCombineActivityRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetCombineActivityRewardBack::MergeFrom(const GCGetCombineActivityRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gettimes()) {
      set_gettimes(from.gettimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetCombineActivityRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetCombineActivityRewardBack::CopyFrom(const GCGetCombineActivityRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetCombineActivityRewardBack::IsInitialized() const {

  return true;
}

void GCGetCombineActivityRewardBack::Swap(GCGetCombineActivityRewardBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(actid_, other->actid_);
    std::swap(id_, other->id_);
    std::swap(gettimes_, other->gettimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetCombineActivityRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetCombineActivityRewardBack_descriptor_;
  metadata.reflection = GCGetCombineActivityRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCombineActivityItemUpdate::kActIdFieldNumber;
const int GCCombineActivityItemUpdate::kOperateFieldNumber;
const int GCCombineActivityItemUpdate::kListItemsFieldNumber;
const int GCCombineActivityItemUpdate::kExchangeItemsFieldNumber;
const int GCCombineActivityItemUpdate::kBuyItemsFieldNumber;
#endif  // !_MSC_VER

GCCombineActivityItemUpdate::GCCombineActivityItemUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCombineActivityItemUpdate)
}

void GCCombineActivityItemUpdate::InitAsDefaultInstance() {
}

GCCombineActivityItemUpdate::GCCombineActivityItemUpdate(const GCCombineActivityItemUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCombineActivityItemUpdate)
}

void GCCombineActivityItemUpdate::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0;
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCombineActivityItemUpdate::~GCCombineActivityItemUpdate() {
  // @@protoc_insertion_point(destructor:GCCombineActivityItemUpdate)
  SharedDtor();
}

void GCCombineActivityItemUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCombineActivityItemUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCombineActivityItemUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCombineActivityItemUpdate_descriptor_;
}

const GCCombineActivityItemUpdate& GCCombineActivityItemUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CombineActivityMessage_2eproto();
  return *default_instance_;
}

GCCombineActivityItemUpdate* GCCombineActivityItemUpdate::default_instance_ = NULL;

GCCombineActivityItemUpdate* GCCombineActivityItemUpdate::New() const {
  return new GCCombineActivityItemUpdate;
}

void GCCombineActivityItemUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCombineActivityItemUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(actid_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  listitems_.Clear();
  exchangeitems_.Clear();
  buyitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCombineActivityItemUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCombineActivityItemUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 actId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_listItems;
        break;
      }

      // repeated .CombineActivityListItem listItems = 3;
      case 3: {
        if (tag == 26) {
         parse_listItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_listItems;
        if (input->ExpectTag(34)) goto parse_exchangeItems;
        break;
      }

      // repeated .CombineActivityExchangeItem exchangeItems = 4;
      case 4: {
        if (tag == 34) {
         parse_exchangeItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchangeitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exchangeItems;
        if (input->ExpectTag(42)) goto parse_buyItems;
        break;
      }

      // repeated .CombineActivityBuyItem buyItems = 5;
      case 5: {
        if (tag == 42) {
         parse_buyItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buyItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCombineActivityItemUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCombineActivityItemUpdate)
  return false;
#undef DO_
}

void GCCombineActivityItemUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCombineActivityItemUpdate)
  // optional int32 actId = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actid(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // repeated .CombineActivityListItem listItems = 3;
  for (int i = 0; i < this->listitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->listitems(i), output);
  }

  // repeated .CombineActivityExchangeItem exchangeItems = 4;
  for (int i = 0; i < this->exchangeitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exchangeitems(i), output);
  }

  // repeated .CombineActivityBuyItem buyItems = 5;
  for (int i = 0; i < this->buyitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buyitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCombineActivityItemUpdate)
}

::google::protobuf::uint8* GCCombineActivityItemUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCombineActivityItemUpdate)
  // optional int32 actId = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actid(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // repeated .CombineActivityListItem listItems = 3;
  for (int i = 0; i < this->listitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->listitems(i), target);
  }

  // repeated .CombineActivityExchangeItem exchangeItems = 4;
  for (int i = 0; i < this->exchangeitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exchangeitems(i), target);
  }

  // repeated .CombineActivityBuyItem buyItems = 5;
  for (int i = 0; i < this->buyitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buyitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCombineActivityItemUpdate)
  return target;
}

int GCCombineActivityItemUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 actId = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actid());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  // repeated .CombineActivityListItem listItems = 3;
  total_size += 1 * this->listitems_size();
  for (int i = 0; i < this->listitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listitems(i));
  }

  // repeated .CombineActivityExchangeItem exchangeItems = 4;
  total_size += 1 * this->exchangeitems_size();
  for (int i = 0; i < this->exchangeitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchangeitems(i));
  }

  // repeated .CombineActivityBuyItem buyItems = 5;
  total_size += 1 * this->buyitems_size();
  for (int i = 0; i < this->buyitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCombineActivityItemUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCombineActivityItemUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCombineActivityItemUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCombineActivityItemUpdate::MergeFrom(const GCCombineActivityItemUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  listitems_.MergeFrom(from.listitems_);
  exchangeitems_.MergeFrom(from.exchangeitems_);
  buyitems_.MergeFrom(from.buyitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCombineActivityItemUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCombineActivityItemUpdate::CopyFrom(const GCCombineActivityItemUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCombineActivityItemUpdate::IsInitialized() const {

  return true;
}

void GCCombineActivityItemUpdate::Swap(GCCombineActivityItemUpdate* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(operate_, other->operate_);
    listitems_.Swap(&other->listitems_);
    exchangeitems_.Swap(&other->exchangeitems_);
    buyitems_.Swap(&other->buyitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCombineActivityItemUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCombineActivityItemUpdate_descriptor_;
  metadata.reflection = GCCombineActivityItemUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
