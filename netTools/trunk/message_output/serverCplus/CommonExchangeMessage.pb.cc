// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonExchangeMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonExchangeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CommonExchangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonExchangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonExchangeListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonExchangeListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRefreshCommonExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRefreshCommonExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshCommonExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshCommonExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCommonExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCommonExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCommonExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCommonExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshHistory_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonExchangeMessage_2eproto() {
  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonExchangeMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CommonExchangeInfo_descriptor_ = file->message_type(0);
  static const int CommonExchangeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeInfo, num_),
  };
  CommonExchangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonExchangeInfo_descriptor_,
      CommonExchangeInfo::default_instance_,
      CommonExchangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonExchangeInfo));
  CommonExchangeListInfo_descriptor_ = file->message_type(1);
  static const int CommonExchangeListInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, beex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, hasnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, shoptypename_),
  };
  CommonExchangeListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonExchangeListInfo_descriptor_,
      CommonExchangeListInfo::default_instance_,
      CommonExchangeListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonExchangeListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonExchangeListInfo));
  CGRefreshCommonExchange_descriptor_ = file->message_type(2);
  static const int CGRefreshCommonExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshCommonExchange, playerid_),
  };
  CGRefreshCommonExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRefreshCommonExchange_descriptor_,
      CGRefreshCommonExchange::default_instance_,
      CGRefreshCommonExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshCommonExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshCommonExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRefreshCommonExchange));
  GCRefreshCommonExchange_descriptor_ = file->message_type(3);
  static const int GCRefreshCommonExchange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCommonExchange, exs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCommonExchange, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCommonExchange, information_),
  };
  GCRefreshCommonExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshCommonExchange_descriptor_,
      GCRefreshCommonExchange::default_instance_,
      GCRefreshCommonExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCommonExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCommonExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshCommonExchange));
  CGCommonExchange_descriptor_ = file->message_type(4);
  static const int CGCommonExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonExchange, id_),
  };
  CGCommonExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCommonExchange_descriptor_,
      CGCommonExchange::default_instance_,
      CGCommonExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCommonExchange));
  GCCommonExchange_descriptor_ = file->message_type(5);
  static const int GCCommonExchange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, hasnum_),
  };
  GCCommonExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCommonExchange_descriptor_,
      GCCommonExchange::default_instance_,
      GCCommonExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCommonExchange));
  GCRefreshHistory_descriptor_ = file->message_type(6);
  static const int GCRefreshHistory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshHistory, history_),
  };
  GCRefreshHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshHistory_descriptor_,
      GCRefreshHistory::default_instance_,
      GCRefreshHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshHistory));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonExchangeMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonExchangeInfo_descriptor_, &CommonExchangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonExchangeListInfo_descriptor_, &CommonExchangeListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRefreshCommonExchange_descriptor_, &CGRefreshCommonExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshCommonExchange_descriptor_, &GCRefreshCommonExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCommonExchange_descriptor_, &CGCommonExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCommonExchange_descriptor_, &GCCommonExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshHistory_descriptor_, &GCRefreshHistory::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonExchangeMessage_2eproto() {
  delete CommonExchangeInfo::default_instance_;
  delete CommonExchangeInfo_reflection_;
  delete CommonExchangeListInfo::default_instance_;
  delete CommonExchangeListInfo_reflection_;
  delete CGRefreshCommonExchange::default_instance_;
  delete CGRefreshCommonExchange_reflection_;
  delete GCRefreshCommonExchange::default_instance_;
  delete GCRefreshCommonExchange_reflection_;
  delete CGCommonExchange::default_instance_;
  delete CGCommonExchange_reflection_;
  delete GCCommonExchange::default_instance_;
  delete GCCommonExchange_reflection_;
  delete GCRefreshHistory::default_instance_;
  delete GCRefreshHistory_reflection_;
}

void protobuf_AddDesc_CommonExchangeMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033CommonExchangeMessage.proto\";\n\022CommonE"
    "xchangeInfo\022\013\n\003bid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\022\013\n"
    "\003num\030\003 \001(\005\"\262\001\n\026CommonExchangeListInfo\022\n\n"
    "\002id\030\001 \001(\005\022\037\n\002ex\030\002 \003(\0132\023.CommonExchangeIn"
    "fo\022!\n\004beEx\030\003 \001(\0132\023.CommonExchangeInfo\022\020\n"
    "\010totalNum\030\004 \001(\005\022\016\n\006hasNum\030\005 \001(\005\022\020\n\010shopT"
    "ype\030\006 \001(\005\022\024\n\014shopTypeName\030\007 \001(\t\"+\n\027CGRef"
    "reshCommonExchange\022\020\n\010playerId\030\001 \001(\003\"e\n\027"
    "GCRefreshCommonExchange\022$\n\003exs\030\001 \003(\0132\027.C"
    "ommonExchangeListInfo\022\017\n\007history\030\002 \003(\t\022\023"
    "\n\013information\030\003 \001(\t\"\036\n\020CGCommonExchange\022"
    "\n\n\002id\030\001 \001(\005\"X\n\020GCCommonExchange\022\016\n\006resul"
    "t\030\001 \001(\005\022\022\n\ntemplateId\030\002 \001(\005\022\020\n\010totalNum\030"
    "\003 \001(\005\022\016\n\006hasNum\030\004 \001(\005\"#\n\020GCRefreshHistor"
    "y\022\017\n\007history\030\001 \003(\tB\031\n\027com.mile.common.me"
    "ssage", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonExchangeMessage.proto", &protobuf_RegisterTypes);
  CommonExchangeInfo::default_instance_ = new CommonExchangeInfo();
  CommonExchangeListInfo::default_instance_ = new CommonExchangeListInfo();
  CGRefreshCommonExchange::default_instance_ = new CGRefreshCommonExchange();
  GCRefreshCommonExchange::default_instance_ = new GCRefreshCommonExchange();
  CGCommonExchange::default_instance_ = new CGCommonExchange();
  GCCommonExchange::default_instance_ = new GCCommonExchange();
  GCRefreshHistory::default_instance_ = new GCRefreshHistory();
  CommonExchangeInfo::default_instance_->InitAsDefaultInstance();
  CommonExchangeListInfo::default_instance_->InitAsDefaultInstance();
  CGRefreshCommonExchange::default_instance_->InitAsDefaultInstance();
  GCRefreshCommonExchange::default_instance_->InitAsDefaultInstance();
  CGCommonExchange::default_instance_->InitAsDefaultInstance();
  GCCommonExchange::default_instance_->InitAsDefaultInstance();
  GCRefreshHistory::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonExchangeMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonExchangeMessage_2eproto {
  StaticDescriptorInitializer_CommonExchangeMessage_2eproto() {
    protobuf_AddDesc_CommonExchangeMessage_2eproto();
  }
} static_descriptor_initializer_CommonExchangeMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommonExchangeInfo::kBidFieldNumber;
const int CommonExchangeInfo::kSidFieldNumber;
const int CommonExchangeInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CommonExchangeInfo::CommonExchangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommonExchangeInfo)
}

void CommonExchangeInfo::InitAsDefaultInstance() {
}

CommonExchangeInfo::CommonExchangeInfo(const CommonExchangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommonExchangeInfo)
}

void CommonExchangeInfo::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonExchangeInfo::~CommonExchangeInfo() {
  // @@protoc_insertion_point(destructor:CommonExchangeInfo)
  SharedDtor();
}

void CommonExchangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonExchangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonExchangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonExchangeInfo_descriptor_;
}

const CommonExchangeInfo& CommonExchangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

CommonExchangeInfo* CommonExchangeInfo::default_instance_ = NULL;

CommonExchangeInfo* CommonExchangeInfo::New() const {
  return new CommonExchangeInfo;
}

void CommonExchangeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonExchangeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonExchangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommonExchangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommonExchangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommonExchangeInfo)
  return false;
#undef DO_
}

void CommonExchangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommonExchangeInfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommonExchangeInfo)
}

::google::protobuf::uint8* CommonExchangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonExchangeInfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonExchangeInfo)
  return target;
}

int CommonExchangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonExchangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonExchangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonExchangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonExchangeInfo::MergeFrom(const CommonExchangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonExchangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonExchangeInfo::CopyFrom(const CommonExchangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonExchangeInfo::IsInitialized() const {

  return true;
}

void CommonExchangeInfo::Swap(CommonExchangeInfo* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonExchangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonExchangeInfo_descriptor_;
  metadata.reflection = CommonExchangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonExchangeListInfo::kIdFieldNumber;
const int CommonExchangeListInfo::kExFieldNumber;
const int CommonExchangeListInfo::kBeExFieldNumber;
const int CommonExchangeListInfo::kTotalNumFieldNumber;
const int CommonExchangeListInfo::kHasNumFieldNumber;
const int CommonExchangeListInfo::kShopTypeFieldNumber;
const int CommonExchangeListInfo::kShopTypeNameFieldNumber;
#endif  // !_MSC_VER

CommonExchangeListInfo::CommonExchangeListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommonExchangeListInfo)
}

void CommonExchangeListInfo::InitAsDefaultInstance() {
  beex_ = const_cast< ::CommonExchangeInfo*>(&::CommonExchangeInfo::default_instance());
}

CommonExchangeListInfo::CommonExchangeListInfo(const CommonExchangeListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommonExchangeListInfo)
}

void CommonExchangeListInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  beex_ = NULL;
  totalnum_ = 0;
  hasnum_ = 0;
  shoptype_ = 0;
  shoptypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonExchangeListInfo::~CommonExchangeListInfo() {
  // @@protoc_insertion_point(destructor:CommonExchangeListInfo)
  SharedDtor();
}

void CommonExchangeListInfo::SharedDtor() {
  if (shoptypename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shoptypename_;
  }
  if (this != default_instance_) {
    delete beex_;
  }
}

void CommonExchangeListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonExchangeListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonExchangeListInfo_descriptor_;
}

const CommonExchangeListInfo& CommonExchangeListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

CommonExchangeListInfo* CommonExchangeListInfo::default_instance_ = NULL;

CommonExchangeListInfo* CommonExchangeListInfo::New() const {
  return new CommonExchangeListInfo;
}

void CommonExchangeListInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CommonExchangeListInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(id_, totalnum_);
    ZR_(hasnum_, shoptype_);
    if (has_beex()) {
      if (beex_ != NULL) beex_->::CommonExchangeInfo::Clear();
    }
    if (has_shoptypename()) {
      if (shoptypename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shoptypename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonExchangeListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommonExchangeListInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ex;
        break;
      }

      // repeated .CommonExchangeInfo ex = 2;
      case 2: {
        if (tag == 18) {
         parse_ex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ex;
        if (input->ExpectTag(26)) goto parse_beEx;
        break;
      }

      // optional .CommonExchangeInfo beEx = 3;
      case 3: {
        if (tag == 26) {
         parse_beEx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totalNum;
        break;
      }

      // optional int32 totalNum = 4;
      case 4: {
        if (tag == 32) {
         parse_totalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hasNum;
        break;
      }

      // optional int32 hasNum = 5;
      case 5: {
        if (tag == 40) {
         parse_hasNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasnum_)));
          set_has_hasnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shopType;
        break;
      }

      // optional int32 shopType = 6;
      case 6: {
        if (tag == 48) {
         parse_shopType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_shopTypeName;
        break;
      }

      // optional string shopTypeName = 7;
      case 7: {
        if (tag == 58) {
         parse_shopTypeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shoptypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shoptypename().data(), this->shoptypename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shoptypename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommonExchangeListInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommonExchangeListInfo)
  return false;
#undef DO_
}

void CommonExchangeListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommonExchangeListInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .CommonExchangeInfo ex = 2;
  for (int i = 0; i < this->ex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ex(i), output);
  }

  // optional .CommonExchangeInfo beEx = 3;
  if (has_beex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beex(), output);
  }

  // optional int32 totalNum = 4;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalnum(), output);
  }

  // optional int32 hasNum = 5;
  if (has_hasnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hasnum(), output);
  }

  // optional int32 shopType = 6;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shoptype(), output);
  }

  // optional string shopTypeName = 7;
  if (has_shoptypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shoptypename().data(), this->shoptypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shoptypename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->shoptypename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommonExchangeListInfo)
}

::google::protobuf::uint8* CommonExchangeListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommonExchangeListInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .CommonExchangeInfo ex = 2;
  for (int i = 0; i < this->ex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ex(i), target);
  }

  // optional .CommonExchangeInfo beEx = 3;
  if (has_beex()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beex(), target);
  }

  // optional int32 totalNum = 4;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalnum(), target);
  }

  // optional int32 hasNum = 5;
  if (has_hasnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hasnum(), target);
  }

  // optional int32 shopType = 6;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shoptype(), target);
  }

  // optional string shopTypeName = 7;
  if (has_shoptypename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shoptypename().data(), this->shoptypename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shoptypename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->shoptypename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommonExchangeListInfo)
  return target;
}

int CommonExchangeListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .CommonExchangeInfo beEx = 3;
    if (has_beex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beex());
    }

    // optional int32 totalNum = 4;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }

    // optional int32 hasNum = 5;
    if (has_hasnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasnum());
    }

    // optional int32 shopType = 6;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoptype());
    }

    // optional string shopTypeName = 7;
    if (has_shoptypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shoptypename());
    }

  }
  // repeated .CommonExchangeInfo ex = 2;
  total_size += 1 * this->ex_size();
  for (int i = 0; i < this->ex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ex(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonExchangeListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonExchangeListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonExchangeListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonExchangeListInfo::MergeFrom(const CommonExchangeListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ex_.MergeFrom(from.ex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_beex()) {
      mutable_beex()->::CommonExchangeInfo::MergeFrom(from.beex());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_hasnum()) {
      set_hasnum(from.hasnum());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_shoptypename()) {
      set_shoptypename(from.shoptypename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonExchangeListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonExchangeListInfo::CopyFrom(const CommonExchangeListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonExchangeListInfo::IsInitialized() const {

  return true;
}

void CommonExchangeListInfo::Swap(CommonExchangeListInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    ex_.Swap(&other->ex_);
    std::swap(beex_, other->beex_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(hasnum_, other->hasnum_);
    std::swap(shoptype_, other->shoptype_);
    std::swap(shoptypename_, other->shoptypename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonExchangeListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonExchangeListInfo_descriptor_;
  metadata.reflection = CommonExchangeListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRefreshCommonExchange::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGRefreshCommonExchange::CGRefreshCommonExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRefreshCommonExchange)
}

void CGRefreshCommonExchange::InitAsDefaultInstance() {
}

CGRefreshCommonExchange::CGRefreshCommonExchange(const CGRefreshCommonExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRefreshCommonExchange)
}

void CGRefreshCommonExchange::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRefreshCommonExchange::~CGRefreshCommonExchange() {
  // @@protoc_insertion_point(destructor:CGRefreshCommonExchange)
  SharedDtor();
}

void CGRefreshCommonExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRefreshCommonExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRefreshCommonExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRefreshCommonExchange_descriptor_;
}

const CGRefreshCommonExchange& CGRefreshCommonExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

CGRefreshCommonExchange* CGRefreshCommonExchange::default_instance_ = NULL;

CGRefreshCommonExchange* CGRefreshCommonExchange::New() const {
  return new CGRefreshCommonExchange;
}

void CGRefreshCommonExchange::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRefreshCommonExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRefreshCommonExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRefreshCommonExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRefreshCommonExchange)
  return false;
#undef DO_
}

void CGRefreshCommonExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRefreshCommonExchange)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRefreshCommonExchange)
}

::google::protobuf::uint8* CGRefreshCommonExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRefreshCommonExchange)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRefreshCommonExchange)
  return target;
}

int CGRefreshCommonExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRefreshCommonExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRefreshCommonExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRefreshCommonExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRefreshCommonExchange::MergeFrom(const CGRefreshCommonExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRefreshCommonExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRefreshCommonExchange::CopyFrom(const CGRefreshCommonExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRefreshCommonExchange::IsInitialized() const {

  return true;
}

void CGRefreshCommonExchange::Swap(CGRefreshCommonExchange* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRefreshCommonExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRefreshCommonExchange_descriptor_;
  metadata.reflection = CGRefreshCommonExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshCommonExchange::kExsFieldNumber;
const int GCRefreshCommonExchange::kHistoryFieldNumber;
const int GCRefreshCommonExchange::kInformationFieldNumber;
#endif  // !_MSC_VER

GCRefreshCommonExchange::GCRefreshCommonExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshCommonExchange)
}

void GCRefreshCommonExchange::InitAsDefaultInstance() {
}

GCRefreshCommonExchange::GCRefreshCommonExchange(const GCRefreshCommonExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshCommonExchange)
}

void GCRefreshCommonExchange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  information_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshCommonExchange::~GCRefreshCommonExchange() {
  // @@protoc_insertion_point(destructor:GCRefreshCommonExchange)
  SharedDtor();
}

void GCRefreshCommonExchange::SharedDtor() {
  if (information_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete information_;
  }
  if (this != default_instance_) {
  }
}

void GCRefreshCommonExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshCommonExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshCommonExchange_descriptor_;
}

const GCRefreshCommonExchange& GCRefreshCommonExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

GCRefreshCommonExchange* GCRefreshCommonExchange::default_instance_ = NULL;

GCRefreshCommonExchange* GCRefreshCommonExchange::New() const {
  return new GCRefreshCommonExchange;
}

void GCRefreshCommonExchange::Clear() {
  if (has_information()) {
    if (information_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      information_->clear();
    }
  }
  exs_.Clear();
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshCommonExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshCommonExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CommonExchangeListInfo exs = 1;
      case 1: {
        if (tag == 10) {
         parse_exs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_exs;
        if (input->ExpectTag(18)) goto parse_history;
        break;
      }

      // repeated string history = 2;
      case 2: {
        if (tag == 18) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->history(this->history_size() - 1).data(),
            this->history(this->history_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "history");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history;
        if (input->ExpectTag(26)) goto parse_information;
        break;
      }

      // optional string information = 3;
      case 3: {
        if (tag == 26) {
         parse_information:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_information()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->information().data(), this->information().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "information");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshCommonExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshCommonExchange)
  return false;
#undef DO_
}

void GCRefreshCommonExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshCommonExchange)
  // repeated .CommonExchangeListInfo exs = 1;
  for (int i = 0; i < this->exs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exs(i), output);
  }

  // repeated string history = 2;
  for (int i = 0; i < this->history_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->history(i).data(), this->history(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "history");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->history(i), output);
  }

  // optional string information = 3;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "information");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->information(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshCommonExchange)
}

::google::protobuf::uint8* GCRefreshCommonExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshCommonExchange)
  // repeated .CommonExchangeListInfo exs = 1;
  for (int i = 0; i < this->exs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exs(i), target);
  }

  // repeated string history = 2;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->history(i).data(), this->history(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "history");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->history(i), target);
  }

  // optional string information = 3;
  if (has_information()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "information");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->information(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshCommonExchange)
  return target;
}

int GCRefreshCommonExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string information = 3;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->information());
    }

  }
  // repeated .CommonExchangeListInfo exs = 1;
  total_size += 1 * this->exs_size();
  for (int i = 0; i < this->exs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exs(i));
  }

  // repeated string history = 2;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshCommonExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshCommonExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshCommonExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshCommonExchange::MergeFrom(const GCRefreshCommonExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  exs_.MergeFrom(from.exs_);
  history_.MergeFrom(from.history_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_information()) {
      set_information(from.information());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshCommonExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshCommonExchange::CopyFrom(const GCRefreshCommonExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshCommonExchange::IsInitialized() const {

  return true;
}

void GCRefreshCommonExchange::Swap(GCRefreshCommonExchange* other) {
  if (other != this) {
    exs_.Swap(&other->exs_);
    history_.Swap(&other->history_);
    std::swap(information_, other->information_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshCommonExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshCommonExchange_descriptor_;
  metadata.reflection = GCRefreshCommonExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCommonExchange::kIdFieldNumber;
#endif  // !_MSC_VER

CGCommonExchange::CGCommonExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCommonExchange)
}

void CGCommonExchange::InitAsDefaultInstance() {
}

CGCommonExchange::CGCommonExchange(const CGCommonExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCommonExchange)
}

void CGCommonExchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCommonExchange::~CGCommonExchange() {
  // @@protoc_insertion_point(destructor:CGCommonExchange)
  SharedDtor();
}

void CGCommonExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCommonExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCommonExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCommonExchange_descriptor_;
}

const CGCommonExchange& CGCommonExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

CGCommonExchange* CGCommonExchange::default_instance_ = NULL;

CGCommonExchange* CGCommonExchange::New() const {
  return new CGCommonExchange;
}

void CGCommonExchange::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCommonExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCommonExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCommonExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCommonExchange)
  return false;
#undef DO_
}

void CGCommonExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCommonExchange)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCommonExchange)
}

::google::protobuf::uint8* CGCommonExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCommonExchange)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCommonExchange)
  return target;
}

int CGCommonExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCommonExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCommonExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCommonExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCommonExchange::MergeFrom(const CGCommonExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCommonExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCommonExchange::CopyFrom(const CGCommonExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCommonExchange::IsInitialized() const {

  return true;
}

void CGCommonExchange::Swap(CGCommonExchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCommonExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCommonExchange_descriptor_;
  metadata.reflection = CGCommonExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCommonExchange::kResultFieldNumber;
const int GCCommonExchange::kTemplateIdFieldNumber;
const int GCCommonExchange::kTotalNumFieldNumber;
const int GCCommonExchange::kHasNumFieldNumber;
#endif  // !_MSC_VER

GCCommonExchange::GCCommonExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCommonExchange)
}

void GCCommonExchange::InitAsDefaultInstance() {
}

GCCommonExchange::GCCommonExchange(const GCCommonExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCommonExchange)
}

void GCCommonExchange::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  templateid_ = 0;
  totalnum_ = 0;
  hasnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCommonExchange::~GCCommonExchange() {
  // @@protoc_insertion_point(destructor:GCCommonExchange)
  SharedDtor();
}

void GCCommonExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCommonExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCommonExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCommonExchange_descriptor_;
}

const GCCommonExchange& GCCommonExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

GCCommonExchange* GCCommonExchange::default_instance_ = NULL;

GCCommonExchange* GCCommonExchange::New() const {
  return new GCCommonExchange;
}

void GCCommonExchange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCommonExchange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, hasnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCommonExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCommonExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_templateId;
        break;
      }

      // optional int32 templateId = 2;
      case 2: {
        if (tag == 16) {
         parse_templateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalNum;
        break;
      }

      // optional int32 totalNum = 3;
      case 3: {
        if (tag == 24) {
         parse_totalNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hasNum;
        break;
      }

      // optional int32 hasNum = 4;
      case 4: {
        if (tag == 32) {
         parse_hasNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasnum_)));
          set_has_hasnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCommonExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCommonExchange)
  return false;
#undef DO_
}

void GCCommonExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCommonExchange)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 templateId = 2;
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->templateid(), output);
  }

  // optional int32 totalNum = 3;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalnum(), output);
  }

  // optional int32 hasNum = 4;
  if (has_hasnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hasnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCommonExchange)
}

::google::protobuf::uint8* GCCommonExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCommonExchange)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 templateId = 2;
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->templateid(), target);
  }

  // optional int32 totalNum = 3;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalnum(), target);
  }

  // optional int32 hasNum = 4;
  if (has_hasnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hasnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCommonExchange)
  return target;
}

int GCCommonExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 templateId = 2;
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->templateid());
    }

    // optional int32 totalNum = 3;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnum());
    }

    // optional int32 hasNum = 4;
    if (has_hasnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCommonExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCommonExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCommonExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCommonExchange::MergeFrom(const GCCommonExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_hasnum()) {
      set_hasnum(from.hasnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCommonExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCommonExchange::CopyFrom(const GCCommonExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCommonExchange::IsInitialized() const {

  return true;
}

void GCCommonExchange::Swap(GCCommonExchange* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(templateid_, other->templateid_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(hasnum_, other->hasnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCommonExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCommonExchange_descriptor_;
  metadata.reflection = GCCommonExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshHistory::kHistoryFieldNumber;
#endif  // !_MSC_VER

GCRefreshHistory::GCRefreshHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshHistory)
}

void GCRefreshHistory::InitAsDefaultInstance() {
}

GCRefreshHistory::GCRefreshHistory(const GCRefreshHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshHistory)
}

void GCRefreshHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshHistory::~GCRefreshHistory() {
  // @@protoc_insertion_point(destructor:GCRefreshHistory)
  SharedDtor();
}

void GCRefreshHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshHistory_descriptor_;
}

const GCRefreshHistory& GCRefreshHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonExchangeMessage_2eproto();
  return *default_instance_;
}

GCRefreshHistory* GCRefreshHistory::default_instance_ = NULL;

GCRefreshHistory* GCRefreshHistory::New() const {
  return new GCRefreshHistory;
}

void GCRefreshHistory::Clear() {
  history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string history = 1;
      case 1: {
        if (tag == 10) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_history()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->history(this->history_size() - 1).data(),
            this->history(this->history_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "history");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_history;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshHistory)
  return false;
#undef DO_
}

void GCRefreshHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshHistory)
  // repeated string history = 1;
  for (int i = 0; i < this->history_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->history(i).data(), this->history(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "history");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->history(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshHistory)
}

::google::protobuf::uint8* GCRefreshHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshHistory)
  // repeated string history = 1;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->history(i).data(), this->history(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "history");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->history(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshHistory)
  return target;
}

int GCRefreshHistory::ByteSize() const {
  int total_size = 0;

  // repeated string history = 1;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->history(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshHistory::MergeFrom(const GCRefreshHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshHistory::CopyFrom(const GCRefreshHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshHistory::IsInitialized() const {

  return true;
}

void GCRefreshHistory::Swap(GCRefreshHistory* other) {
  if (other != this) {
    history_.Swap(&other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshHistory_descriptor_;
  metadata.reflection = GCRefreshHistory_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
