// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonExchangeMessage.proto

#ifndef PROTOBUF_CommonExchangeMessage_2eproto__INCLUDED
#define PROTOBUF_CommonExchangeMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

class CommonExchangeInfo;
class CommonExchangeListInfo;
class CGRefreshCommonExchange;
class GCRefreshCommonExchange;
class CGCommonExchange;
class GCCommonExchange;
class GCRefreshHistory;

// ===================================================================

class CommonExchangeInfo : public ::google::protobuf::Message {
 public:
  CommonExchangeInfo();
  virtual ~CommonExchangeInfo();

  CommonExchangeInfo(const CommonExchangeInfo& from);

  inline CommonExchangeInfo& operator=(const CommonExchangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonExchangeInfo& default_instance();

  void Swap(CommonExchangeInfo* other);

  // implements Message ----------------------------------------------

  CommonExchangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonExchangeInfo& from);
  void MergeFrom(const CommonExchangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::int32 bid() const;
  inline void set_bid(::google::protobuf::int32 value);

  // optional int32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CommonExchangeInfo)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static CommonExchangeInfo* default_instance_;
};
// -------------------------------------------------------------------

class CommonExchangeListInfo : public ::google::protobuf::Message {
 public:
  CommonExchangeListInfo();
  virtual ~CommonExchangeListInfo();

  CommonExchangeListInfo(const CommonExchangeListInfo& from);

  inline CommonExchangeListInfo& operator=(const CommonExchangeListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonExchangeListInfo& default_instance();

  void Swap(CommonExchangeListInfo* other);

  // implements Message ----------------------------------------------

  CommonExchangeListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonExchangeListInfo& from);
  void MergeFrom(const CommonExchangeListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .CommonExchangeInfo ex = 2;
  inline int ex_size() const;
  inline void clear_ex();
  static const int kExFieldNumber = 2;
  inline const ::CommonExchangeInfo& ex(int index) const;
  inline ::CommonExchangeInfo* mutable_ex(int index);
  inline ::CommonExchangeInfo* add_ex();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonExchangeInfo >&
      ex() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonExchangeInfo >*
      mutable_ex();

  // optional .CommonExchangeInfo beEx = 3;
  inline bool has_beex() const;
  inline void clear_beex();
  static const int kBeExFieldNumber = 3;
  inline const ::CommonExchangeInfo& beex() const;
  inline ::CommonExchangeInfo* mutable_beex();
  inline ::CommonExchangeInfo* release_beex();
  inline void set_allocated_beex(::CommonExchangeInfo* beex);

  // optional int32 totalNum = 4;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 4;
  inline ::google::protobuf::int32 totalnum() const;
  inline void set_totalnum(::google::protobuf::int32 value);

  // optional int32 hasNum = 5;
  inline bool has_hasnum() const;
  inline void clear_hasnum();
  static const int kHasNumFieldNumber = 5;
  inline ::google::protobuf::int32 hasnum() const;
  inline void set_hasnum(::google::protobuf::int32 value);

  // optional int32 shopType = 6;
  inline bool has_shoptype() const;
  inline void clear_shoptype();
  static const int kShopTypeFieldNumber = 6;
  inline ::google::protobuf::int32 shoptype() const;
  inline void set_shoptype(::google::protobuf::int32 value);

  // optional string shopTypeName = 7;
  inline bool has_shoptypename() const;
  inline void clear_shoptypename();
  static const int kShopTypeNameFieldNumber = 7;
  inline const ::std::string& shoptypename() const;
  inline void set_shoptypename(const ::std::string& value);
  inline void set_shoptypename(const char* value);
  inline void set_shoptypename(const char* value, size_t size);
  inline ::std::string* mutable_shoptypename();
  inline ::std::string* release_shoptypename();
  inline void set_allocated_shoptypename(::std::string* shoptypename);

  // @@protoc_insertion_point(class_scope:CommonExchangeListInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_beex();
  inline void clear_has_beex();
  inline void set_has_totalnum();
  inline void clear_has_totalnum();
  inline void set_has_hasnum();
  inline void clear_has_hasnum();
  inline void set_has_shoptype();
  inline void clear_has_shoptype();
  inline void set_has_shoptypename();
  inline void clear_has_shoptypename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonExchangeInfo > ex_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 totalnum_;
  ::CommonExchangeInfo* beex_;
  ::google::protobuf::int32 hasnum_;
  ::google::protobuf::int32 shoptype_;
  ::std::string* shoptypename_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static CommonExchangeListInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGRefreshCommonExchange : public ::google::protobuf::Message {
 public:
  CGRefreshCommonExchange();
  virtual ~CGRefreshCommonExchange();

  CGRefreshCommonExchange(const CGRefreshCommonExchange& from);

  inline CGRefreshCommonExchange& operator=(const CGRefreshCommonExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGRefreshCommonExchange& default_instance();

  void Swap(CGRefreshCommonExchange* other);

  // implements Message ----------------------------------------------

  CGRefreshCommonExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGRefreshCommonExchange& from);
  void MergeFrom(const CGRefreshCommonExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGRefreshCommonExchange)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static CGRefreshCommonExchange* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshCommonExchange : public ::google::protobuf::Message {
 public:
  GCRefreshCommonExchange();
  virtual ~GCRefreshCommonExchange();

  GCRefreshCommonExchange(const GCRefreshCommonExchange& from);

  inline GCRefreshCommonExchange& operator=(const GCRefreshCommonExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshCommonExchange& default_instance();

  void Swap(GCRefreshCommonExchange* other);

  // implements Message ----------------------------------------------

  GCRefreshCommonExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshCommonExchange& from);
  void MergeFrom(const GCRefreshCommonExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CommonExchangeListInfo exs = 1;
  inline int exs_size() const;
  inline void clear_exs();
  static const int kExsFieldNumber = 1;
  inline const ::CommonExchangeListInfo& exs(int index) const;
  inline ::CommonExchangeListInfo* mutable_exs(int index);
  inline ::CommonExchangeListInfo* add_exs();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonExchangeListInfo >&
      exs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonExchangeListInfo >*
      mutable_exs();

  // repeated string history = 2;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 2;
  inline const ::std::string& history(int index) const;
  inline ::std::string* mutable_history(int index);
  inline void set_history(int index, const ::std::string& value);
  inline void set_history(int index, const char* value);
  inline void set_history(int index, const char* value, size_t size);
  inline ::std::string* add_history();
  inline void add_history(const ::std::string& value);
  inline void add_history(const char* value);
  inline void add_history(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& history() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_history();

  // optional string information = 3;
  inline bool has_information() const;
  inline void clear_information();
  static const int kInformationFieldNumber = 3;
  inline const ::std::string& information() const;
  inline void set_information(const ::std::string& value);
  inline void set_information(const char* value);
  inline void set_information(const char* value, size_t size);
  inline ::std::string* mutable_information();
  inline ::std::string* release_information();
  inline void set_allocated_information(::std::string* information);

  // @@protoc_insertion_point(class_scope:GCRefreshCommonExchange)
 private:
  inline void set_has_information();
  inline void clear_has_information();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CommonExchangeListInfo > exs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> history_;
  ::std::string* information_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshCommonExchange* default_instance_;
};
// -------------------------------------------------------------------

class CGCommonExchange : public ::google::protobuf::Message {
 public:
  CGCommonExchange();
  virtual ~CGCommonExchange();

  CGCommonExchange(const CGCommonExchange& from);

  inline CGCommonExchange& operator=(const CGCommonExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCommonExchange& default_instance();

  void Swap(CGCommonExchange* other);

  // implements Message ----------------------------------------------

  CGCommonExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCommonExchange& from);
  void MergeFrom(const CGCommonExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGCommonExchange)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCommonExchange* default_instance_;
};
// -------------------------------------------------------------------

class GCCommonExchange : public ::google::protobuf::Message {
 public:
  GCCommonExchange();
  virtual ~GCCommonExchange();

  GCCommonExchange(const GCCommonExchange& from);

  inline GCCommonExchange& operator=(const GCCommonExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCommonExchange& default_instance();

  void Swap(GCCommonExchange* other);

  // implements Message ----------------------------------------------

  GCCommonExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCommonExchange& from);
  void MergeFrom(const GCCommonExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 templateId = 2;
  inline bool has_templateid() const;
  inline void clear_templateid();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 templateid() const;
  inline void set_templateid(::google::protobuf::int32 value);

  // optional int32 totalNum = 3;
  inline bool has_totalnum() const;
  inline void clear_totalnum();
  static const int kTotalNumFieldNumber = 3;
  inline ::google::protobuf::int32 totalnum() const;
  inline void set_totalnum(::google::protobuf::int32 value);

  // optional int32 hasNum = 4;
  inline bool has_hasnum() const;
  inline void clear_hasnum();
  static const int kHasNumFieldNumber = 4;
  inline ::google::protobuf::int32 hasnum() const;
  inline void set_hasnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCCommonExchange)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_templateid();
  inline void clear_has_templateid();
  inline void set_has_totalnum();
  inline void clear_has_totalnum();
  inline void set_has_hasnum();
  inline void clear_has_hasnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 templateid_;
  ::google::protobuf::int32 totalnum_;
  ::google::protobuf::int32 hasnum_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCommonExchange* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshHistory : public ::google::protobuf::Message {
 public:
  GCRefreshHistory();
  virtual ~GCRefreshHistory();

  GCRefreshHistory(const GCRefreshHistory& from);

  inline GCRefreshHistory& operator=(const GCRefreshHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshHistory& default_instance();

  void Swap(GCRefreshHistory* other);

  // implements Message ----------------------------------------------

  GCRefreshHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshHistory& from);
  void MergeFrom(const GCRefreshHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string history = 1;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 1;
  inline const ::std::string& history(int index) const;
  inline ::std::string* mutable_history(int index);
  inline void set_history(int index, const ::std::string& value);
  inline void set_history(int index, const char* value);
  inline void set_history(int index, const char* value, size_t size);
  inline ::std::string* add_history();
  inline void add_history(const ::std::string& value);
  inline void add_history(const char* value);
  inline void add_history(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& history() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_history();

  // @@protoc_insertion_point(class_scope:GCRefreshHistory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> history_;
  friend void  protobuf_AddDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_AssignDesc_CommonExchangeMessage_2eproto();
  friend void protobuf_ShutdownFile_CommonExchangeMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshHistory* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonExchangeInfo

// optional int32 bid = 1;
inline bool CommonExchangeInfo::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonExchangeInfo::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonExchangeInfo::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonExchangeInfo::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline ::google::protobuf::int32 CommonExchangeInfo::bid() const {
  // @@protoc_insertion_point(field_get:CommonExchangeInfo.bid)
  return bid_;
}
inline void CommonExchangeInfo::set_bid(::google::protobuf::int32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeInfo.bid)
}

// optional int32 sid = 2;
inline bool CommonExchangeInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonExchangeInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonExchangeInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonExchangeInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 CommonExchangeInfo::sid() const {
  // @@protoc_insertion_point(field_get:CommonExchangeInfo.sid)
  return sid_;
}
inline void CommonExchangeInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeInfo.sid)
}

// optional int32 num = 3;
inline bool CommonExchangeInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonExchangeInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonExchangeInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonExchangeInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CommonExchangeInfo::num() const {
  // @@protoc_insertion_point(field_get:CommonExchangeInfo.num)
  return num_;
}
inline void CommonExchangeInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeInfo.num)
}

// -------------------------------------------------------------------

// CommonExchangeListInfo

// optional int32 id = 1;
inline bool CommonExchangeListInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonExchangeListInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonExchangeListInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonExchangeListInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CommonExchangeListInfo::id() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.id)
  return id_;
}
inline void CommonExchangeListInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeListInfo.id)
}

// repeated .CommonExchangeInfo ex = 2;
inline int CommonExchangeListInfo::ex_size() const {
  return ex_.size();
}
inline void CommonExchangeListInfo::clear_ex() {
  ex_.Clear();
}
inline const ::CommonExchangeInfo& CommonExchangeListInfo::ex(int index) const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.ex)
  return ex_.Get(index);
}
inline ::CommonExchangeInfo* CommonExchangeListInfo::mutable_ex(int index) {
  // @@protoc_insertion_point(field_mutable:CommonExchangeListInfo.ex)
  return ex_.Mutable(index);
}
inline ::CommonExchangeInfo* CommonExchangeListInfo::add_ex() {
  // @@protoc_insertion_point(field_add:CommonExchangeListInfo.ex)
  return ex_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonExchangeInfo >&
CommonExchangeListInfo::ex() const {
  // @@protoc_insertion_point(field_list:CommonExchangeListInfo.ex)
  return ex_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonExchangeInfo >*
CommonExchangeListInfo::mutable_ex() {
  // @@protoc_insertion_point(field_mutable_list:CommonExchangeListInfo.ex)
  return &ex_;
}

// optional .CommonExchangeInfo beEx = 3;
inline bool CommonExchangeListInfo::has_beex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonExchangeListInfo::set_has_beex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonExchangeListInfo::clear_has_beex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonExchangeListInfo::clear_beex() {
  if (beex_ != NULL) beex_->::CommonExchangeInfo::Clear();
  clear_has_beex();
}
inline const ::CommonExchangeInfo& CommonExchangeListInfo::beex() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.beEx)
  return beex_ != NULL ? *beex_ : *default_instance_->beex_;
}
inline ::CommonExchangeInfo* CommonExchangeListInfo::mutable_beex() {
  set_has_beex();
  if (beex_ == NULL) beex_ = new ::CommonExchangeInfo;
  // @@protoc_insertion_point(field_mutable:CommonExchangeListInfo.beEx)
  return beex_;
}
inline ::CommonExchangeInfo* CommonExchangeListInfo::release_beex() {
  clear_has_beex();
  ::CommonExchangeInfo* temp = beex_;
  beex_ = NULL;
  return temp;
}
inline void CommonExchangeListInfo::set_allocated_beex(::CommonExchangeInfo* beex) {
  delete beex_;
  beex_ = beex;
  if (beex) {
    set_has_beex();
  } else {
    clear_has_beex();
  }
  // @@protoc_insertion_point(field_set_allocated:CommonExchangeListInfo.beEx)
}

// optional int32 totalNum = 4;
inline bool CommonExchangeListInfo::has_totalnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonExchangeListInfo::set_has_totalnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonExchangeListInfo::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonExchangeListInfo::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 CommonExchangeListInfo::totalnum() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.totalNum)
  return totalnum_;
}
inline void CommonExchangeListInfo::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeListInfo.totalNum)
}

// optional int32 hasNum = 5;
inline bool CommonExchangeListInfo::has_hasnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonExchangeListInfo::set_has_hasnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonExchangeListInfo::clear_has_hasnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonExchangeListInfo::clear_hasnum() {
  hasnum_ = 0;
  clear_has_hasnum();
}
inline ::google::protobuf::int32 CommonExchangeListInfo::hasnum() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.hasNum)
  return hasnum_;
}
inline void CommonExchangeListInfo::set_hasnum(::google::protobuf::int32 value) {
  set_has_hasnum();
  hasnum_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeListInfo.hasNum)
}

// optional int32 shopType = 6;
inline bool CommonExchangeListInfo::has_shoptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonExchangeListInfo::set_has_shoptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonExchangeListInfo::clear_has_shoptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonExchangeListInfo::clear_shoptype() {
  shoptype_ = 0;
  clear_has_shoptype();
}
inline ::google::protobuf::int32 CommonExchangeListInfo::shoptype() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.shopType)
  return shoptype_;
}
inline void CommonExchangeListInfo::set_shoptype(::google::protobuf::int32 value) {
  set_has_shoptype();
  shoptype_ = value;
  // @@protoc_insertion_point(field_set:CommonExchangeListInfo.shopType)
}

// optional string shopTypeName = 7;
inline bool CommonExchangeListInfo::has_shoptypename() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonExchangeListInfo::set_has_shoptypename() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonExchangeListInfo::clear_has_shoptypename() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonExchangeListInfo::clear_shoptypename() {
  if (shoptypename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shoptypename_->clear();
  }
  clear_has_shoptypename();
}
inline const ::std::string& CommonExchangeListInfo::shoptypename() const {
  // @@protoc_insertion_point(field_get:CommonExchangeListInfo.shopTypeName)
  return *shoptypename_;
}
inline void CommonExchangeListInfo::set_shoptypename(const ::std::string& value) {
  set_has_shoptypename();
  if (shoptypename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shoptypename_ = new ::std::string;
  }
  shoptypename_->assign(value);
  // @@protoc_insertion_point(field_set:CommonExchangeListInfo.shopTypeName)
}
inline void CommonExchangeListInfo::set_shoptypename(const char* value) {
  set_has_shoptypename();
  if (shoptypename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shoptypename_ = new ::std::string;
  }
  shoptypename_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommonExchangeListInfo.shopTypeName)
}
inline void CommonExchangeListInfo::set_shoptypename(const char* value, size_t size) {
  set_has_shoptypename();
  if (shoptypename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shoptypename_ = new ::std::string;
  }
  shoptypename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommonExchangeListInfo.shopTypeName)
}
inline ::std::string* CommonExchangeListInfo::mutable_shoptypename() {
  set_has_shoptypename();
  if (shoptypename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    shoptypename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommonExchangeListInfo.shopTypeName)
  return shoptypename_;
}
inline ::std::string* CommonExchangeListInfo::release_shoptypename() {
  clear_has_shoptypename();
  if (shoptypename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = shoptypename_;
    shoptypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommonExchangeListInfo::set_allocated_shoptypename(::std::string* shoptypename) {
  if (shoptypename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shoptypename_;
  }
  if (shoptypename) {
    set_has_shoptypename();
    shoptypename_ = shoptypename;
  } else {
    clear_has_shoptypename();
    shoptypename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommonExchangeListInfo.shopTypeName)
}

// -------------------------------------------------------------------

// CGRefreshCommonExchange

// optional int64 playerId = 1;
inline bool CGRefreshCommonExchange::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGRefreshCommonExchange::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGRefreshCommonExchange::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGRefreshCommonExchange::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGRefreshCommonExchange::playerid() const {
  // @@protoc_insertion_point(field_get:CGRefreshCommonExchange.playerId)
  return playerid_;
}
inline void CGRefreshCommonExchange::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGRefreshCommonExchange.playerId)
}

// -------------------------------------------------------------------

// GCRefreshCommonExchange

// repeated .CommonExchangeListInfo exs = 1;
inline int GCRefreshCommonExchange::exs_size() const {
  return exs_.size();
}
inline void GCRefreshCommonExchange::clear_exs() {
  exs_.Clear();
}
inline const ::CommonExchangeListInfo& GCRefreshCommonExchange::exs(int index) const {
  // @@protoc_insertion_point(field_get:GCRefreshCommonExchange.exs)
  return exs_.Get(index);
}
inline ::CommonExchangeListInfo* GCRefreshCommonExchange::mutable_exs(int index) {
  // @@protoc_insertion_point(field_mutable:GCRefreshCommonExchange.exs)
  return exs_.Mutable(index);
}
inline ::CommonExchangeListInfo* GCRefreshCommonExchange::add_exs() {
  // @@protoc_insertion_point(field_add:GCRefreshCommonExchange.exs)
  return exs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonExchangeListInfo >&
GCRefreshCommonExchange::exs() const {
  // @@protoc_insertion_point(field_list:GCRefreshCommonExchange.exs)
  return exs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonExchangeListInfo >*
GCRefreshCommonExchange::mutable_exs() {
  // @@protoc_insertion_point(field_mutable_list:GCRefreshCommonExchange.exs)
  return &exs_;
}

// repeated string history = 2;
inline int GCRefreshCommonExchange::history_size() const {
  return history_.size();
}
inline void GCRefreshCommonExchange::clear_history() {
  history_.Clear();
}
inline const ::std::string& GCRefreshCommonExchange::history(int index) const {
  // @@protoc_insertion_point(field_get:GCRefreshCommonExchange.history)
  return history_.Get(index);
}
inline ::std::string* GCRefreshCommonExchange::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:GCRefreshCommonExchange.history)
  return history_.Mutable(index);
}
inline void GCRefreshCommonExchange::set_history(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GCRefreshCommonExchange.history)
  history_.Mutable(index)->assign(value);
}
inline void GCRefreshCommonExchange::set_history(int index, const char* value) {
  history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshCommonExchange.history)
}
inline void GCRefreshCommonExchange::set_history(int index, const char* value, size_t size) {
  history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshCommonExchange.history)
}
inline ::std::string* GCRefreshCommonExchange::add_history() {
  return history_.Add();
}
inline void GCRefreshCommonExchange::add_history(const ::std::string& value) {
  history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GCRefreshCommonExchange.history)
}
inline void GCRefreshCommonExchange::add_history(const char* value) {
  history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GCRefreshCommonExchange.history)
}
inline void GCRefreshCommonExchange::add_history(const char* value, size_t size) {
  history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GCRefreshCommonExchange.history)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCRefreshCommonExchange::history() const {
  // @@protoc_insertion_point(field_list:GCRefreshCommonExchange.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCRefreshCommonExchange::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:GCRefreshCommonExchange.history)
  return &history_;
}

// optional string information = 3;
inline bool GCRefreshCommonExchange::has_information() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCRefreshCommonExchange::set_has_information() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCRefreshCommonExchange::clear_has_information() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCRefreshCommonExchange::clear_information() {
  if (information_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    information_->clear();
  }
  clear_has_information();
}
inline const ::std::string& GCRefreshCommonExchange::information() const {
  // @@protoc_insertion_point(field_get:GCRefreshCommonExchange.information)
  return *information_;
}
inline void GCRefreshCommonExchange::set_information(const ::std::string& value) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    information_ = new ::std::string;
  }
  information_->assign(value);
  // @@protoc_insertion_point(field_set:GCRefreshCommonExchange.information)
}
inline void GCRefreshCommonExchange::set_information(const char* value) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    information_ = new ::std::string;
  }
  information_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshCommonExchange.information)
}
inline void GCRefreshCommonExchange::set_information(const char* value, size_t size) {
  set_has_information();
  if (information_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    information_ = new ::std::string;
  }
  information_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshCommonExchange.information)
}
inline ::std::string* GCRefreshCommonExchange::mutable_information() {
  set_has_information();
  if (information_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    information_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCRefreshCommonExchange.information)
  return information_;
}
inline ::std::string* GCRefreshCommonExchange::release_information() {
  clear_has_information();
  if (information_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = information_;
    information_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCRefreshCommonExchange::set_allocated_information(::std::string* information) {
  if (information_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete information_;
  }
  if (information) {
    set_has_information();
    information_ = information;
  } else {
    clear_has_information();
    information_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCRefreshCommonExchange.information)
}

// -------------------------------------------------------------------

// CGCommonExchange

// optional int32 id = 1;
inline bool CGCommonExchange::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCommonExchange::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCommonExchange::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCommonExchange::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CGCommonExchange::id() const {
  // @@protoc_insertion_point(field_get:CGCommonExchange.id)
  return id_;
}
inline void CGCommonExchange::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CGCommonExchange.id)
}

// -------------------------------------------------------------------

// GCCommonExchange

// optional int32 result = 1;
inline bool GCCommonExchange::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCommonExchange::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCommonExchange::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCommonExchange::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCCommonExchange::result() const {
  // @@protoc_insertion_point(field_get:GCCommonExchange.result)
  return result_;
}
inline void GCCommonExchange::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCCommonExchange.result)
}

// optional int32 templateId = 2;
inline bool GCCommonExchange::has_templateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCCommonExchange::set_has_templateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCCommonExchange::clear_has_templateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCCommonExchange::clear_templateid() {
  templateid_ = 0;
  clear_has_templateid();
}
inline ::google::protobuf::int32 GCCommonExchange::templateid() const {
  // @@protoc_insertion_point(field_get:GCCommonExchange.templateId)
  return templateid_;
}
inline void GCCommonExchange::set_templateid(::google::protobuf::int32 value) {
  set_has_templateid();
  templateid_ = value;
  // @@protoc_insertion_point(field_set:GCCommonExchange.templateId)
}

// optional int32 totalNum = 3;
inline bool GCCommonExchange::has_totalnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCCommonExchange::set_has_totalnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCCommonExchange::clear_has_totalnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCCommonExchange::clear_totalnum() {
  totalnum_ = 0;
  clear_has_totalnum();
}
inline ::google::protobuf::int32 GCCommonExchange::totalnum() const {
  // @@protoc_insertion_point(field_get:GCCommonExchange.totalNum)
  return totalnum_;
}
inline void GCCommonExchange::set_totalnum(::google::protobuf::int32 value) {
  set_has_totalnum();
  totalnum_ = value;
  // @@protoc_insertion_point(field_set:GCCommonExchange.totalNum)
}

// optional int32 hasNum = 4;
inline bool GCCommonExchange::has_hasnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCCommonExchange::set_has_hasnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCCommonExchange::clear_has_hasnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCCommonExchange::clear_hasnum() {
  hasnum_ = 0;
  clear_has_hasnum();
}
inline ::google::protobuf::int32 GCCommonExchange::hasnum() const {
  // @@protoc_insertion_point(field_get:GCCommonExchange.hasNum)
  return hasnum_;
}
inline void GCCommonExchange::set_hasnum(::google::protobuf::int32 value) {
  set_has_hasnum();
  hasnum_ = value;
  // @@protoc_insertion_point(field_set:GCCommonExchange.hasNum)
}

// -------------------------------------------------------------------

// GCRefreshHistory

// repeated string history = 1;
inline int GCRefreshHistory::history_size() const {
  return history_.size();
}
inline void GCRefreshHistory::clear_history() {
  history_.Clear();
}
inline const ::std::string& GCRefreshHistory::history(int index) const {
  // @@protoc_insertion_point(field_get:GCRefreshHistory.history)
  return history_.Get(index);
}
inline ::std::string* GCRefreshHistory::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:GCRefreshHistory.history)
  return history_.Mutable(index);
}
inline void GCRefreshHistory::set_history(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GCRefreshHistory.history)
  history_.Mutable(index)->assign(value);
}
inline void GCRefreshHistory::set_history(int index, const char* value) {
  history_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GCRefreshHistory.history)
}
inline void GCRefreshHistory::set_history(int index, const char* value, size_t size) {
  history_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCRefreshHistory.history)
}
inline ::std::string* GCRefreshHistory::add_history() {
  return history_.Add();
}
inline void GCRefreshHistory::add_history(const ::std::string& value) {
  history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GCRefreshHistory.history)
}
inline void GCRefreshHistory::add_history(const char* value) {
  history_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GCRefreshHistory.history)
}
inline void GCRefreshHistory::add_history(const char* value, size_t size) {
  history_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GCRefreshHistory.history)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCRefreshHistory::history() const {
  // @@protoc_insertion_point(field_list:GCRefreshHistory.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCRefreshHistory::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:GCRefreshHistory.history)
  return &history_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonExchangeMessage_2eproto__INCLUDED
