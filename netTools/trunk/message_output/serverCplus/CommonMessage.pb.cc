// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EntryStrStr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryStrStr_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryStringInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryStringInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryLongInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryLongInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryIntInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryIntInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryLongAry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryLongAry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapStrStr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapStrStr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapLongAry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapLongAry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRegistBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRegistBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSendVilicode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSendVilicode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGReLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGReLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSyncInnerPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSyncInnerPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackSyncInnerPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackSyncInnerPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqServerProperties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqServerProperties_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertiesInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertiesInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPropertiesBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPropertiesBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFunctionOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFunctionOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFunctionOpenList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFunctionOpenList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonMessage_2eproto() {
  protobuf_AddDesc_CommonMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonMessage.proto");
  GOOGLE_CHECK(file != NULL);
  EntryStrStr_descriptor_ = file->message_type(0);
  static const int EntryStrStr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStrStr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStrStr, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStrStr, type_),
  };
  EntryStrStr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryStrStr_descriptor_,
      EntryStrStr::default_instance_,
      EntryStrStr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStrStr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStrStr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryStrStr));
  EntryStringInt_descriptor_ = file->message_type(1);
  static const int EntryStringInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStringInt, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStringInt, value_),
  };
  EntryStringInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryStringInt_descriptor_,
      EntryStringInt::default_instance_,
      EntryStringInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStringInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryStringInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryStringInt));
  EntryLongInt_descriptor_ = file->message_type(2);
  static const int EntryLongInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongInt, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongInt, value_),
  };
  EntryLongInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryLongInt_descriptor_,
      EntryLongInt::default_instance_,
      EntryLongInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryLongInt));
  EntryIntInt_descriptor_ = file->message_type(3);
  static const int EntryIntInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryIntInt, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryIntInt, value_),
  };
  EntryIntInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryIntInt_descriptor_,
      EntryIntInt::default_instance_,
      EntryIntInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryIntInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryIntInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryIntInt));
  EntryLongAry_descriptor_ = file->message_type(4);
  static const int EntryLongAry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongAry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongAry, strary_),
  };
  EntryLongAry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntryLongAry_descriptor_,
      EntryLongAry::default_instance_,
      EntryLongAry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongAry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryLongAry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntryLongAry));
  MapStrStr_descriptor_ = file->message_type(5);
  static const int MapStrStr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStrStr, entry_),
  };
  MapStrStr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapStrStr_descriptor_,
      MapStrStr::default_instance_,
      MapStrStr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStrStr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapStrStr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapStrStr));
  MapLongAry_descriptor_ = file->message_type(6);
  static const int MapLongAry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLongAry, entry_),
  };
  MapLongAry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapLongAry_descriptor_,
      MapLongAry::default_instance_,
      MapLongAry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLongAry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapLongAry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapLongAry));
  ServerRegist_descriptor_ = file->message_type(7);
  static const int ServerRegist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegist, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegist, servertype_),
  };
  ServerRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerRegist_descriptor_,
      ServerRegist::default_instance_,
      ServerRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerRegist));
  LoginRegistBack_descriptor_ = file->message_type(8);
  static const int LoginRegistBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, onlinenum_),
  };
  LoginRegistBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRegistBack_descriptor_,
      LoginRegistBack::default_instance_,
      LoginRegistBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRegistBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRegistBack));
  LoginSendVilicode_descriptor_ = file->message_type(9);
  static const int LoginSendVilicode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendVilicode, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendVilicode, vilicode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendVilicode, invalidtime_),
  };
  LoginSendVilicode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSendVilicode_descriptor_,
      LoginSendVilicode::default_instance_,
      LoginSendVilicode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendVilicode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendVilicode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSendVilicode));
  CGReLogin_descriptor_ = file->message_type(10);
  static const int CGReLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, authkey_),
  };
  CGReLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGReLogin_descriptor_,
      CGReLogin::default_instance_,
      CGReLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGReLogin));
  GCReLogin_descriptor_ = file->message_type(11);
  static const int GCReLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLogin, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLogin, eniqueid_),
  };
  GCReLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReLogin_descriptor_,
      GCReLogin::default_instance_,
      GCReLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReLogin));
  SendSyncInnerPacket_descriptor_ = file->message_type(12);
  static const int SendSyncInnerPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSyncInnerPacket, exchagerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSyncInnerPacket, innerpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSyncInnerPacket, innerpacket_),
  };
  SendSyncInnerPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSyncInnerPacket_descriptor_,
      SendSyncInnerPacket::default_instance_,
      SendSyncInnerPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSyncInnerPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSyncInnerPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSyncInnerPacket));
  BackSyncInnerPacket_descriptor_ = file->message_type(13);
  static const int BackSyncInnerPacket_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, exchagerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, innerpacketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, innerpacket_),
  };
  BackSyncInnerPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackSyncInnerPacket_descriptor_,
      BackSyncInnerPacket::default_instance_,
      BackSyncInnerPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackSyncInnerPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackSyncInnerPacket));
  ReqServerProperties_descriptor_ = file->message_type(14);
  static const int ReqServerProperties_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerProperties, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerProperties, propfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerProperties, needmongodb_),
  };
  ReqServerProperties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqServerProperties_descriptor_,
      ReqServerProperties::default_instance_,
      ReqServerProperties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerProperties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqServerProperties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqServerProperties));
  PropertiesInfo_descriptor_ = file->message_type(15);
  static const int PropertiesInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesInfo, value_),
  };
  PropertiesInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertiesInfo_descriptor_,
      PropertiesInfo::default_instance_,
      PropertiesInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertiesInfo));
  ServerPropertiesBack_descriptor_ = file->message_type(16);
  static const int ServerPropertiesBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPropertiesBack, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPropertiesBack, servergroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPropertiesBack, propinfoarr_),
  };
  ServerPropertiesBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPropertiesBack_descriptor_,
      ServerPropertiesBack::default_instance_,
      ServerPropertiesBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPropertiesBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPropertiesBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPropertiesBack));
  GCFunctionOpen_descriptor_ = file->message_type(17);
  static const int GCFunctionOpen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpen, functionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpen, functionval_),
  };
  GCFunctionOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFunctionOpen_descriptor_,
      GCFunctionOpen::default_instance_,
      GCFunctionOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFunctionOpen));
  GCFunctionOpenList_descriptor_ = file->message_type(18);
  static const int GCFunctionOpenList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpenList, functions_),
  };
  GCFunctionOpenList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFunctionOpenList_descriptor_,
      GCFunctionOpenList::default_instance_,
      GCFunctionOpenList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpenList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFunctionOpenList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFunctionOpenList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryStrStr_descriptor_, &EntryStrStr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryStringInt_descriptor_, &EntryStringInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryLongInt_descriptor_, &EntryLongInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryIntInt_descriptor_, &EntryIntInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntryLongAry_descriptor_, &EntryLongAry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapStrStr_descriptor_, &MapStrStr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapLongAry_descriptor_, &MapLongAry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerRegist_descriptor_, &ServerRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRegistBack_descriptor_, &LoginRegistBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSendVilicode_descriptor_, &LoginSendVilicode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGReLogin_descriptor_, &CGReLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReLogin_descriptor_, &GCReLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSyncInnerPacket_descriptor_, &SendSyncInnerPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackSyncInnerPacket_descriptor_, &BackSyncInnerPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqServerProperties_descriptor_, &ReqServerProperties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertiesInfo_descriptor_, &PropertiesInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPropertiesBack_descriptor_, &ServerPropertiesBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFunctionOpen_descriptor_, &GCFunctionOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFunctionOpenList_descriptor_, &GCFunctionOpenList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonMessage_2eproto() {
  delete EntryStrStr::default_instance_;
  delete EntryStrStr_reflection_;
  delete EntryStringInt::default_instance_;
  delete EntryStringInt_reflection_;
  delete EntryLongInt::default_instance_;
  delete EntryLongInt_reflection_;
  delete EntryIntInt::default_instance_;
  delete EntryIntInt_reflection_;
  delete EntryLongAry::default_instance_;
  delete EntryLongAry_reflection_;
  delete MapStrStr::default_instance_;
  delete MapStrStr_reflection_;
  delete MapLongAry::default_instance_;
  delete MapLongAry_reflection_;
  delete ServerRegist::default_instance_;
  delete ServerRegist_reflection_;
  delete LoginRegistBack::default_instance_;
  delete LoginRegistBack_reflection_;
  delete LoginSendVilicode::default_instance_;
  delete LoginSendVilicode_reflection_;
  delete CGReLogin::default_instance_;
  delete CGReLogin_reflection_;
  delete GCReLogin::default_instance_;
  delete GCReLogin_reflection_;
  delete SendSyncInnerPacket::default_instance_;
  delete SendSyncInnerPacket_reflection_;
  delete BackSyncInnerPacket::default_instance_;
  delete BackSyncInnerPacket_reflection_;
  delete ReqServerProperties::default_instance_;
  delete ReqServerProperties_reflection_;
  delete PropertiesInfo::default_instance_;
  delete PropertiesInfo_reflection_;
  delete ServerPropertiesBack::default_instance_;
  delete ServerPropertiesBack_reflection_;
  delete GCFunctionOpen::default_instance_;
  delete GCFunctionOpen_reflection_;
  delete GCFunctionOpenList::default_instance_;
  delete GCFunctionOpenList_reflection_;
}

void protobuf_AddDesc_CommonMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023CommonMessage.proto\"7\n\013EntryStrStr\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\","
    "\n\016EntryStringInt\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
    " \001(\005\"*\n\014EntryLongInt\022\013\n\003key\030\001 \001(\003\022\r\n\005val"
    "ue\030\002 \001(\005\")\n\013EntryIntInt\022\013\n\003key\030\001 \001(\005\022\r\n\005"
    "value\030\002 \001(\005\"+\n\014EntryLongAry\022\013\n\003key\030\001 \001(\003"
    "\022\016\n\006strAry\030\002 \003(\t\"(\n\tMapStrStr\022\033\n\005entry\030\001"
    " \003(\0132\014.EntryStrStr\"*\n\nMapLongAry\022\034\n\005entr"
    "y\030\001 \003(\0132\r.EntryLongAry\"4\n\014ServerRegist\022\020"
    "\n\010serverId\030\001 \001(\005\022\022\n\nserverType\030\002 \001(\005\"X\n\017"
    "LoginRegistBack\022\014\n\004code\030\001 \001(\005\022\020\n\010serverI"
    "D\030\002 \001(\005\022\022\n\nserverName\030\003 \001(\t\022\021\n\tonlineNum"
    "\030\004 \001(\005\"G\n\021LoginSendVilicode\022\013\n\003uid\030\001 \001(\t"
    "\022\020\n\010viliCode\030\002 \001(\t\022\023\n\013invalidTime\030\003 \001(\003\""
    "N\n\tCGReLogin\022\021\n\taccountID\030\001 \001(\003\022\013\n\003uid\030\002"
    " \001(\t\022\020\n\010platForm\030\003 \001(\t\022\017\n\007authKey\030\004 \001(\t\""
    "-\n\tGCReLogin\022\016\n\006result\030\001 \001(\005\022\020\n\010eniqueID"
    "\030\002 \001(\003\"U\n\023SendSyncInnerPacket\022\022\n\nexchage"
    "rId\030\001 \001(\003\022\025\n\rinnerPacketId\030\002 \001(\005\022\023\n\013inne"
    "rPacket\030\003 \001(\014\"e\n\023BackSyncInnerPacket\022\022\n\n"
    "exchagerId\030\001 \001(\003\022\016\n\006result\030\002 \001(\005\022\025\n\rinne"
    "rPacketId\030\003 \001(\005\022\023\n\013innerPacket\030\004 \001(\014\"T\n\023"
    "ReqServerProperties\022\022\n\nserverType\030\001 \001(\005\022"
    "\024\n\014propFileName\030\002 \003(\t\022\023\n\013needMongodb\030\003 \001"
    "(\005\",\n\016PropertiesInfo\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
    "ue\030\002 \003(\t\"g\n\024ServerPropertiesBack\022\022\n\nserv"
    "erType\030\001 \001(\005\022\025\n\rserverGroupId\030\002 \001(\005\022$\n\013p"
    "ropInfoArr\030\003 \003(\0132\017.PropertiesInfo\"9\n\016GCF"
    "unctionOpen\022\022\n\nfunctionId\030\001 \001(\005\022\023\n\013funct"
    "ionVal\030\002 \001(\005\"8\n\022GCFunctionOpenList\022\"\n\tfu"
    "nctions\030\001 \003(\0132\017.GCFunctionOpenB\031\n\027com.mi"
    "le.common.message", 1257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonMessage.proto", &protobuf_RegisterTypes);
  EntryStrStr::default_instance_ = new EntryStrStr();
  EntryStringInt::default_instance_ = new EntryStringInt();
  EntryLongInt::default_instance_ = new EntryLongInt();
  EntryIntInt::default_instance_ = new EntryIntInt();
  EntryLongAry::default_instance_ = new EntryLongAry();
  MapStrStr::default_instance_ = new MapStrStr();
  MapLongAry::default_instance_ = new MapLongAry();
  ServerRegist::default_instance_ = new ServerRegist();
  LoginRegistBack::default_instance_ = new LoginRegistBack();
  LoginSendVilicode::default_instance_ = new LoginSendVilicode();
  CGReLogin::default_instance_ = new CGReLogin();
  GCReLogin::default_instance_ = new GCReLogin();
  SendSyncInnerPacket::default_instance_ = new SendSyncInnerPacket();
  BackSyncInnerPacket::default_instance_ = new BackSyncInnerPacket();
  ReqServerProperties::default_instance_ = new ReqServerProperties();
  PropertiesInfo::default_instance_ = new PropertiesInfo();
  ServerPropertiesBack::default_instance_ = new ServerPropertiesBack();
  GCFunctionOpen::default_instance_ = new GCFunctionOpen();
  GCFunctionOpenList::default_instance_ = new GCFunctionOpenList();
  EntryStrStr::default_instance_->InitAsDefaultInstance();
  EntryStringInt::default_instance_->InitAsDefaultInstance();
  EntryLongInt::default_instance_->InitAsDefaultInstance();
  EntryIntInt::default_instance_->InitAsDefaultInstance();
  EntryLongAry::default_instance_->InitAsDefaultInstance();
  MapStrStr::default_instance_->InitAsDefaultInstance();
  MapLongAry::default_instance_->InitAsDefaultInstance();
  ServerRegist::default_instance_->InitAsDefaultInstance();
  LoginRegistBack::default_instance_->InitAsDefaultInstance();
  LoginSendVilicode::default_instance_->InitAsDefaultInstance();
  CGReLogin::default_instance_->InitAsDefaultInstance();
  GCReLogin::default_instance_->InitAsDefaultInstance();
  SendSyncInnerPacket::default_instance_->InitAsDefaultInstance();
  BackSyncInnerPacket::default_instance_->InitAsDefaultInstance();
  ReqServerProperties::default_instance_->InitAsDefaultInstance();
  PropertiesInfo::default_instance_->InitAsDefaultInstance();
  ServerPropertiesBack::default_instance_->InitAsDefaultInstance();
  GCFunctionOpen::default_instance_->InitAsDefaultInstance();
  GCFunctionOpenList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonMessage_2eproto {
  StaticDescriptorInitializer_CommonMessage_2eproto() {
    protobuf_AddDesc_CommonMessage_2eproto();
  }
} static_descriptor_initializer_CommonMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EntryStrStr::kKeyFieldNumber;
const int EntryStrStr::kValueFieldNumber;
const int EntryStrStr::kTypeFieldNumber;
#endif  // !_MSC_VER

EntryStrStr::EntryStrStr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntryStrStr)
}

void EntryStrStr::InitAsDefaultInstance() {
}

EntryStrStr::EntryStrStr(const EntryStrStr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntryStrStr)
}

void EntryStrStr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryStrStr::~EntryStrStr() {
  // @@protoc_insertion_point(destructor:EntryStrStr)
  SharedDtor();
}

void EntryStrStr::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void EntryStrStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryStrStr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryStrStr_descriptor_;
}

const EntryStrStr& EntryStrStr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

EntryStrStr* EntryStrStr::default_instance_ = NULL;

EntryStrStr* EntryStrStr::New() const {
  return new EntryStrStr;
}

void EntryStrStr::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryStrStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntryStrStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntryStrStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntryStrStr)
  return false;
#undef DO_
}

void EntryStrStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntryStrStr)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntryStrStr)
}

::google::protobuf::uint8* EntryStrStr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryStrStr)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryStrStr)
  return target;
}

int EntryStrStr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryStrStr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryStrStr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryStrStr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryStrStr::MergeFrom(const EntryStrStr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryStrStr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryStrStr::CopyFrom(const EntryStrStr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryStrStr::IsInitialized() const {

  return true;
}

void EntryStrStr::Swap(EntryStrStr* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryStrStr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryStrStr_descriptor_;
  metadata.reflection = EntryStrStr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntryStringInt::kKeyFieldNumber;
const int EntryStringInt::kValueFieldNumber;
#endif  // !_MSC_VER

EntryStringInt::EntryStringInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntryStringInt)
}

void EntryStringInt::InitAsDefaultInstance() {
}

EntryStringInt::EntryStringInt(const EntryStringInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntryStringInt)
}

void EntryStringInt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryStringInt::~EntryStringInt() {
  // @@protoc_insertion_point(destructor:EntryStringInt)
  SharedDtor();
}

void EntryStringInt::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void EntryStringInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryStringInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryStringInt_descriptor_;
}

const EntryStringInt& EntryStringInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

EntryStringInt* EntryStringInt::default_instance_ = NULL;

EntryStringInt* EntryStringInt::New() const {
  return new EntryStringInt;
}

void EntryStringInt::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryStringInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntryStringInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntryStringInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntryStringInt)
  return false;
#undef DO_
}

void EntryStringInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntryStringInt)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntryStringInt)
}

::google::protobuf::uint8* EntryStringInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryStringInt)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryStringInt)
  return target;
}

int EntryStringInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryStringInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryStringInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryStringInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryStringInt::MergeFrom(const EntryStringInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryStringInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryStringInt::CopyFrom(const EntryStringInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryStringInt::IsInitialized() const {

  return true;
}

void EntryStringInt::Swap(EntryStringInt* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryStringInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryStringInt_descriptor_;
  metadata.reflection = EntryStringInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntryLongInt::kKeyFieldNumber;
const int EntryLongInt::kValueFieldNumber;
#endif  // !_MSC_VER

EntryLongInt::EntryLongInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntryLongInt)
}

void EntryLongInt::InitAsDefaultInstance() {
}

EntryLongInt::EntryLongInt(const EntryLongInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntryLongInt)
}

void EntryLongInt::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryLongInt::~EntryLongInt() {
  // @@protoc_insertion_point(destructor:EntryLongInt)
  SharedDtor();
}

void EntryLongInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntryLongInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryLongInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryLongInt_descriptor_;
}

const EntryLongInt& EntryLongInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

EntryLongInt* EntryLongInt::default_instance_ = NULL;

EntryLongInt* EntryLongInt::New() const {
  return new EntryLongInt;
}

void EntryLongInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EntryLongInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryLongInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntryLongInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntryLongInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntryLongInt)
  return false;
#undef DO_
}

void EntryLongInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntryLongInt)
  // optional int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntryLongInt)
}

::google::protobuf::uint8* EntryLongInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryLongInt)
  // optional int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryLongInt)
  return target;
}

int EntryLongInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryLongInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryLongInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryLongInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryLongInt::MergeFrom(const EntryLongInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryLongInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryLongInt::CopyFrom(const EntryLongInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryLongInt::IsInitialized() const {

  return true;
}

void EntryLongInt::Swap(EntryLongInt* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryLongInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryLongInt_descriptor_;
  metadata.reflection = EntryLongInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntryIntInt::kKeyFieldNumber;
const int EntryIntInt::kValueFieldNumber;
#endif  // !_MSC_VER

EntryIntInt::EntryIntInt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntryIntInt)
}

void EntryIntInt::InitAsDefaultInstance() {
}

EntryIntInt::EntryIntInt(const EntryIntInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntryIntInt)
}

void EntryIntInt::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryIntInt::~EntryIntInt() {
  // @@protoc_insertion_point(destructor:EntryIntInt)
  SharedDtor();
}

void EntryIntInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntryIntInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryIntInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryIntInt_descriptor_;
}

const EntryIntInt& EntryIntInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

EntryIntInt* EntryIntInt::default_instance_ = NULL;

EntryIntInt* EntryIntInt::New() const {
  return new EntryIntInt;
}

void EntryIntInt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EntryIntInt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryIntInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntryIntInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntryIntInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntryIntInt)
  return false;
#undef DO_
}

void EntryIntInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntryIntInt)
  // optional int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntryIntInt)
}

::google::protobuf::uint8* EntryIntInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryIntInt)
  // optional int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryIntInt)
  return target;
}

int EntryIntInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryIntInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryIntInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryIntInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryIntInt::MergeFrom(const EntryIntInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryIntInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryIntInt::CopyFrom(const EntryIntInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryIntInt::IsInitialized() const {

  return true;
}

void EntryIntInt::Swap(EntryIntInt* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryIntInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryIntInt_descriptor_;
  metadata.reflection = EntryIntInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntryLongAry::kKeyFieldNumber;
const int EntryLongAry::kStrAryFieldNumber;
#endif  // !_MSC_VER

EntryLongAry::EntryLongAry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntryLongAry)
}

void EntryLongAry::InitAsDefaultInstance() {
}

EntryLongAry::EntryLongAry(const EntryLongAry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntryLongAry)
}

void EntryLongAry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryLongAry::~EntryLongAry() {
  // @@protoc_insertion_point(destructor:EntryLongAry)
  SharedDtor();
}

void EntryLongAry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntryLongAry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryLongAry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryLongAry_descriptor_;
}

const EntryLongAry& EntryLongAry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

EntryLongAry* EntryLongAry::default_instance_ = NULL;

EntryLongAry* EntryLongAry::New() const {
  return new EntryLongAry;
}

void EntryLongAry::Clear() {
  key_ = GOOGLE_LONGLONG(0);
  strary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntryLongAry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntryLongAry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strAry;
        break;
      }

      // repeated string strAry = 2;
      case 2: {
        if (tag == 18) {
         parse_strAry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strary(this->strary_size() - 1).data(),
            this->strary(this->strary_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strAry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntryLongAry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntryLongAry)
  return false;
#undef DO_
}

void EntryLongAry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntryLongAry)
  // optional int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // repeated string strAry = 2;
  for (int i = 0; i < this->strary_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->strary(i).data(), this->strary(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "strary");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strary(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EntryLongAry)
}

::google::protobuf::uint8* EntryLongAry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntryLongAry)
  // optional int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // repeated string strAry = 2;
  for (int i = 0; i < this->strary_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strary(i).data(), this->strary(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strary");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->strary(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EntryLongAry)
  return target;
}

int EntryLongAry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

  }
  // repeated string strAry = 2;
  total_size += 1 * this->strary_size();
  for (int i = 0; i < this->strary_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryLongAry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntryLongAry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntryLongAry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntryLongAry::MergeFrom(const EntryLongAry& from) {
  GOOGLE_CHECK_NE(&from, this);
  strary_.MergeFrom(from.strary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntryLongAry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryLongAry::CopyFrom(const EntryLongAry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryLongAry::IsInitialized() const {

  return true;
}

void EntryLongAry::Swap(EntryLongAry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    strary_.Swap(&other->strary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntryLongAry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryLongAry_descriptor_;
  metadata.reflection = EntryLongAry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapStrStr::kEntryFieldNumber;
#endif  // !_MSC_VER

MapStrStr::MapStrStr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapStrStr)
}

void MapStrStr::InitAsDefaultInstance() {
}

MapStrStr::MapStrStr(const MapStrStr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapStrStr)
}

void MapStrStr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapStrStr::~MapStrStr() {
  // @@protoc_insertion_point(destructor:MapStrStr)
  SharedDtor();
}

void MapStrStr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapStrStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapStrStr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapStrStr_descriptor_;
}

const MapStrStr& MapStrStr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

MapStrStr* MapStrStr::default_instance_ = NULL;

MapStrStr* MapStrStr::New() const {
  return new MapStrStr;
}

void MapStrStr::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapStrStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapStrStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EntryStrStr entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapStrStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapStrStr)
  return false;
#undef DO_
}

void MapStrStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapStrStr)
  // repeated .EntryStrStr entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapStrStr)
}

::google::protobuf::uint8* MapStrStr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapStrStr)
  // repeated .EntryStrStr entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapStrStr)
  return target;
}

int MapStrStr::ByteSize() const {
  int total_size = 0;

  // repeated .EntryStrStr entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapStrStr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapStrStr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapStrStr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapStrStr::MergeFrom(const MapStrStr& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapStrStr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapStrStr::CopyFrom(const MapStrStr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapStrStr::IsInitialized() const {

  return true;
}

void MapStrStr::Swap(MapStrStr* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapStrStr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapStrStr_descriptor_;
  metadata.reflection = MapStrStr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapLongAry::kEntryFieldNumber;
#endif  // !_MSC_VER

MapLongAry::MapLongAry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapLongAry)
}

void MapLongAry::InitAsDefaultInstance() {
}

MapLongAry::MapLongAry(const MapLongAry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapLongAry)
}

void MapLongAry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapLongAry::~MapLongAry() {
  // @@protoc_insertion_point(destructor:MapLongAry)
  SharedDtor();
}

void MapLongAry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapLongAry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapLongAry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapLongAry_descriptor_;
}

const MapLongAry& MapLongAry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

MapLongAry* MapLongAry::default_instance_ = NULL;

MapLongAry* MapLongAry::New() const {
  return new MapLongAry;
}

void MapLongAry::Clear() {
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapLongAry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapLongAry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EntryLongAry entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapLongAry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapLongAry)
  return false;
#undef DO_
}

void MapLongAry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapLongAry)
  // repeated .EntryLongAry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapLongAry)
}

::google::protobuf::uint8* MapLongAry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapLongAry)
  // repeated .EntryLongAry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapLongAry)
  return target;
}

int MapLongAry::ByteSize() const {
  int total_size = 0;

  // repeated .EntryLongAry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLongAry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapLongAry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapLongAry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapLongAry::MergeFrom(const MapLongAry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapLongAry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLongAry::CopyFrom(const MapLongAry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLongAry::IsInitialized() const {

  return true;
}

void MapLongAry::Swap(MapLongAry* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapLongAry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapLongAry_descriptor_;
  metadata.reflection = MapLongAry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerRegist::kServerIdFieldNumber;
const int ServerRegist::kServerTypeFieldNumber;
#endif  // !_MSC_VER

ServerRegist::ServerRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerRegist)
}

void ServerRegist::InitAsDefaultInstance() {
}

ServerRegist::ServerRegist(const ServerRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerRegist)
}

void ServerRegist::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  servertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerRegist::~ServerRegist() {
  // @@protoc_insertion_point(destructor:ServerRegist)
  SharedDtor();
}

void ServerRegist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerRegist_descriptor_;
}

const ServerRegist& ServerRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

ServerRegist* ServerRegist::default_instance_ = NULL;

ServerRegist* ServerRegist::New() const {
  return new ServerRegist;
}

void ServerRegist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerRegist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serverid_, servertype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverType;
        break;
      }

      // optional int32 serverType = 2;
      case 2: {
        if (tag == 16) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerRegist)
  return false;
#undef DO_
}

void ServerRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerRegist)
  // optional int32 serverId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // optional int32 serverType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerRegist)
}

::google::protobuf::uint8* ServerRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerRegist)
  // optional int32 serverId = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // optional int32 serverType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerRegist)
  return target;
}

int ServerRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 serverType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerRegist::MergeFrom(const ServerRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerRegist::CopyFrom(const ServerRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerRegist::IsInitialized() const {

  return true;
}

void ServerRegist::Swap(ServerRegist* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerRegist_descriptor_;
  metadata.reflection = ServerRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRegistBack::kCodeFieldNumber;
const int LoginRegistBack::kServerIDFieldNumber;
const int LoginRegistBack::kServerNameFieldNumber;
const int LoginRegistBack::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

LoginRegistBack::LoginRegistBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRegistBack)
}

void LoginRegistBack::InitAsDefaultInstance() {
}

LoginRegistBack::LoginRegistBack(const LoginRegistBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRegistBack)
}

void LoginRegistBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  serverid_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRegistBack::~LoginRegistBack() {
  // @@protoc_insertion_point(destructor:LoginRegistBack)
  SharedDtor();
}

void LoginRegistBack::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void LoginRegistBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRegistBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRegistBack_descriptor_;
}

const LoginRegistBack& LoginRegistBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

LoginRegistBack* LoginRegistBack::default_instance_ = NULL;

LoginRegistBack* LoginRegistBack::New() const {
  return new LoginRegistBack;
}

void LoginRegistBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginRegistBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(code_, serverid_);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    onlinenum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRegistBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRegistBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverID;
        break;
      }

      // optional int32 serverID = 2;
      case 2: {
        if (tag == 16) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serverName;
        break;
      }

      // optional string serverName = 3;
      case 3: {
        if (tag == 26) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_onlineNum;
        break;
      }

      // optional int32 onlineNum = 4;
      case 4: {
        if (tag == 32) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRegistBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRegistBack)
  return false;
#undef DO_
}

void LoginRegistBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRegistBack)
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 serverID = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  // optional string serverName = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servername(), output);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRegistBack)
}

::google::protobuf::uint8* LoginRegistBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRegistBack)
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 serverID = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  // optional string serverName = 3;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servername(), target);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRegistBack)
  return target;
}

int LoginRegistBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 serverID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional string serverName = 3;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional int32 onlineNum = 4;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRegistBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRegistBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRegistBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRegistBack::MergeFrom(const LoginRegistBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRegistBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRegistBack::CopyFrom(const LoginRegistBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRegistBack::IsInitialized() const {

  return true;
}

void LoginRegistBack::Swap(LoginRegistBack* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRegistBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRegistBack_descriptor_;
  metadata.reflection = LoginRegistBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSendVilicode::kUidFieldNumber;
const int LoginSendVilicode::kViliCodeFieldNumber;
const int LoginSendVilicode::kInvalidTimeFieldNumber;
#endif  // !_MSC_VER

LoginSendVilicode::LoginSendVilicode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginSendVilicode)
}

void LoginSendVilicode::InitAsDefaultInstance() {
}

LoginSendVilicode::LoginSendVilicode(const LoginSendVilicode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginSendVilicode)
}

void LoginSendVilicode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilicode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invalidtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSendVilicode::~LoginSendVilicode() {
  // @@protoc_insertion_point(destructor:LoginSendVilicode)
  SharedDtor();
}

void LoginSendVilicode::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilicode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilicode_;
  }
  if (this != default_instance_) {
  }
}

void LoginSendVilicode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSendVilicode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSendVilicode_descriptor_;
}

const LoginSendVilicode& LoginSendVilicode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

LoginSendVilicode* LoginSendVilicode::default_instance_ = NULL;

LoginSendVilicode* LoginSendVilicode::New() const {
  return new LoginSendVilicode;
}

void LoginSendVilicode::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilicode()) {
      if (vilicode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilicode_->clear();
      }
    }
    invalidtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSendVilicode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginSendVilicode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_viliCode;
        break;
      }

      // optional string viliCode = 2;
      case 2: {
        if (tag == 18) {
         parse_viliCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilicode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilicode().data(), this->vilicode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilicode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invalidTime;
        break;
      }

      // optional int64 invalidTime = 3;
      case 3: {
        if (tag == 24) {
         parse_invalidTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invalidtime_)));
          set_has_invalidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginSendVilicode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginSendVilicode)
  return false;
#undef DO_
}

void LoginSendVilicode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginSendVilicode)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional string viliCode = 2;
  if (has_vilicode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilicode().data(), this->vilicode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilicode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vilicode(), output);
  }

  // optional int64 invalidTime = 3;
  if (has_invalidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->invalidtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginSendVilicode)
}

::google::protobuf::uint8* LoginSendVilicode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginSendVilicode)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string viliCode = 2;
  if (has_vilicode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilicode().data(), this->vilicode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilicode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vilicode(), target);
  }

  // optional int64 invalidTime = 3;
  if (has_invalidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->invalidtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginSendVilicode)
  return target;
}

int LoginSendVilicode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string viliCode = 2;
    if (has_vilicode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilicode());
    }

    // optional int64 invalidTime = 3;
    if (has_invalidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invalidtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSendVilicode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSendVilicode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSendVilicode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSendVilicode::MergeFrom(const LoginSendVilicode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilicode()) {
      set_vilicode(from.vilicode());
    }
    if (from.has_invalidtime()) {
      set_invalidtime(from.invalidtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSendVilicode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSendVilicode::CopyFrom(const LoginSendVilicode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendVilicode::IsInitialized() const {

  return true;
}

void LoginSendVilicode::Swap(LoginSendVilicode* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vilicode_, other->vilicode_);
    std::swap(invalidtime_, other->invalidtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSendVilicode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSendVilicode_descriptor_;
  metadata.reflection = LoginSendVilicode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGReLogin::kAccountIDFieldNumber;
const int CGReLogin::kUidFieldNumber;
const int CGReLogin::kPlatFormFieldNumber;
const int CGReLogin::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

CGReLogin::CGReLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGReLogin)
}

void CGReLogin::InitAsDefaultInstance() {
}

CGReLogin::CGReLogin(const CGReLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGReLogin)
}

void CGReLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGReLogin::~CGReLogin() {
  // @@protoc_insertion_point(destructor:CGReLogin)
  SharedDtor();
}

void CGReLogin::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void CGReLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGReLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGReLogin_descriptor_;
}

const CGReLogin& CGReLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

CGReLogin* CGReLogin::default_instance_ = NULL;

CGReLogin* CGReLogin::New() const {
  return new CGReLogin;
}

void CGReLogin::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGReLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGReLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 accountID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platForm;
        break;
      }

      // optional string platForm = 3;
      case 3: {
        if (tag == 26) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_authKey;
        break;
      }

      // optional string authKey = 4;
      case 4: {
        if (tag == 34) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGReLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGReLogin)
  return false;
#undef DO_
}

void CGReLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGReLogin)
  // optional int64 accountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->accountid(), output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // optional string authKey = 4;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGReLogin)
}

::google::protobuf::uint8* CGReLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGReLogin)
  // optional int64 accountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->accountid(), target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional string authKey = 4;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGReLogin)
  return target;
}

int CGReLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 accountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string platForm = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string authKey = 4;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGReLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGReLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGReLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGReLogin::MergeFrom(const CGReLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGReLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGReLogin::CopyFrom(const CGReLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReLogin::IsInitialized() const {

  return true;
}

void CGReLogin::Swap(CGReLogin* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(uid_, other->uid_);
    std::swap(platform_, other->platform_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGReLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGReLogin_descriptor_;
  metadata.reflection = CGReLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReLogin::kResultFieldNumber;
const int GCReLogin::kEniqueIDFieldNumber;
#endif  // !_MSC_VER

GCReLogin::GCReLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCReLogin)
}

void GCReLogin::InitAsDefaultInstance() {
}

GCReLogin::GCReLogin(const GCReLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCReLogin)
}

void GCReLogin::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  eniqueid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReLogin::~GCReLogin() {
  // @@protoc_insertion_point(destructor:GCReLogin)
  SharedDtor();
}

void GCReLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCReLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReLogin_descriptor_;
}

const GCReLogin& GCReLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

GCReLogin* GCReLogin::default_instance_ = NULL;

GCReLogin* GCReLogin::New() const {
  return new GCReLogin;
}

void GCReLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCReLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eniqueid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCReLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eniqueID;
        break;
      }

      // optional int64 eniqueID = 2;
      case 2: {
        if (tag == 16) {
         parse_eniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eniqueid_)));
          set_has_eniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCReLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCReLogin)
  return false;
#undef DO_
}

void GCReLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCReLogin)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 eniqueID = 2;
  if (has_eniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->eniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCReLogin)
}

::google::protobuf::uint8* GCReLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCReLogin)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 eniqueID = 2;
  if (has_eniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->eniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCReLogin)
  return target;
}

int GCReLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 eniqueID = 2;
    if (has_eniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReLogin::MergeFrom(const GCReLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_eniqueid()) {
      set_eniqueid(from.eniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReLogin::CopyFrom(const GCReLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReLogin::IsInitialized() const {

  return true;
}

void GCReLogin::Swap(GCReLogin* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(eniqueid_, other->eniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReLogin_descriptor_;
  metadata.reflection = GCReLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSyncInnerPacket::kExchagerIdFieldNumber;
const int SendSyncInnerPacket::kInnerPacketIdFieldNumber;
const int SendSyncInnerPacket::kInnerPacketFieldNumber;
#endif  // !_MSC_VER

SendSyncInnerPacket::SendSyncInnerPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendSyncInnerPacket)
}

void SendSyncInnerPacket::InitAsDefaultInstance() {
}

SendSyncInnerPacket::SendSyncInnerPacket(const SendSyncInnerPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SendSyncInnerPacket)
}

void SendSyncInnerPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchagerid_ = GOOGLE_LONGLONG(0);
  innerpacketid_ = 0;
  innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSyncInnerPacket::~SendSyncInnerPacket() {
  // @@protoc_insertion_point(destructor:SendSyncInnerPacket)
  SharedDtor();
}

void SendSyncInnerPacket::SharedDtor() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (this != default_instance_) {
  }
}

void SendSyncInnerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSyncInnerPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSyncInnerPacket_descriptor_;
}

const SendSyncInnerPacket& SendSyncInnerPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

SendSyncInnerPacket* SendSyncInnerPacket::default_instance_ = NULL;

SendSyncInnerPacket* SendSyncInnerPacket::New() const {
  return new SendSyncInnerPacket;
}

void SendSyncInnerPacket::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    exchagerid_ = GOOGLE_LONGLONG(0);
    innerpacketid_ = 0;
    if (has_innerpacket()) {
      if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        innerpacket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSyncInnerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SendSyncInnerPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exchagerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchagerid_)));
          set_has_exchagerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_innerPacketId;
        break;
      }

      // optional int32 innerPacketId = 2;
      case 2: {
        if (tag == 16) {
         parse_innerPacketId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innerpacketid_)));
          set_has_innerpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_innerPacket;
        break;
      }

      // optional bytes innerPacket = 3;
      case 3: {
        if (tag == 26) {
         parse_innerPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SendSyncInnerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SendSyncInnerPacket)
  return false;
#undef DO_
}

void SendSyncInnerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SendSyncInnerPacket)
  // optional int64 exchagerId = 1;
  if (has_exchagerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exchagerid(), output);
  }

  // optional int32 innerPacketId = 2;
  if (has_innerpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->innerpacketid(), output);
  }

  // optional bytes innerPacket = 3;
  if (has_innerpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->innerpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SendSyncInnerPacket)
}

::google::protobuf::uint8* SendSyncInnerPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendSyncInnerPacket)
  // optional int64 exchagerId = 1;
  if (has_exchagerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exchagerid(), target);
  }

  // optional int32 innerPacketId = 2;
  if (has_innerpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->innerpacketid(), target);
  }

  // optional bytes innerPacket = 3;
  if (has_innerpacket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->innerpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendSyncInnerPacket)
  return target;
}

int SendSyncInnerPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exchagerId = 1;
    if (has_exchagerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchagerid());
    }

    // optional int32 innerPacketId = 2;
    if (has_innerpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innerpacketid());
    }

    // optional bytes innerPacket = 3;
    if (has_innerpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpacket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSyncInnerPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSyncInnerPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSyncInnerPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSyncInnerPacket::MergeFrom(const SendSyncInnerPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchagerid()) {
      set_exchagerid(from.exchagerid());
    }
    if (from.has_innerpacketid()) {
      set_innerpacketid(from.innerpacketid());
    }
    if (from.has_innerpacket()) {
      set_innerpacket(from.innerpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSyncInnerPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSyncInnerPacket::CopyFrom(const SendSyncInnerPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSyncInnerPacket::IsInitialized() const {

  return true;
}

void SendSyncInnerPacket::Swap(SendSyncInnerPacket* other) {
  if (other != this) {
    std::swap(exchagerid_, other->exchagerid_);
    std::swap(innerpacketid_, other->innerpacketid_);
    std::swap(innerpacket_, other->innerpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSyncInnerPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSyncInnerPacket_descriptor_;
  metadata.reflection = SendSyncInnerPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackSyncInnerPacket::kExchagerIdFieldNumber;
const int BackSyncInnerPacket::kResultFieldNumber;
const int BackSyncInnerPacket::kInnerPacketIdFieldNumber;
const int BackSyncInnerPacket::kInnerPacketFieldNumber;
#endif  // !_MSC_VER

BackSyncInnerPacket::BackSyncInnerPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackSyncInnerPacket)
}

void BackSyncInnerPacket::InitAsDefaultInstance() {
}

BackSyncInnerPacket::BackSyncInnerPacket(const BackSyncInnerPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackSyncInnerPacket)
}

void BackSyncInnerPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exchagerid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  innerpacketid_ = 0;
  innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackSyncInnerPacket::~BackSyncInnerPacket() {
  // @@protoc_insertion_point(destructor:BackSyncInnerPacket)
  SharedDtor();
}

void BackSyncInnerPacket::SharedDtor() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (this != default_instance_) {
  }
}

void BackSyncInnerPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackSyncInnerPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackSyncInnerPacket_descriptor_;
}

const BackSyncInnerPacket& BackSyncInnerPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

BackSyncInnerPacket* BackSyncInnerPacket::default_instance_ = NULL;

BackSyncInnerPacket* BackSyncInnerPacket::New() const {
  return new BackSyncInnerPacket;
}

void BackSyncInnerPacket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BackSyncInnerPacket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(exchagerid_, innerpacketid_);
    if (has_innerpacket()) {
      if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        innerpacket_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackSyncInnerPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackSyncInnerPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 exchagerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchagerid_)));
          set_has_exchagerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_innerPacketId;
        break;
      }

      // optional int32 innerPacketId = 3;
      case 3: {
        if (tag == 24) {
         parse_innerPacketId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &innerpacketid_)));
          set_has_innerpacketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_innerPacket;
        break;
      }

      // optional bytes innerPacket = 4;
      case 4: {
        if (tag == 34) {
         parse_innerPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackSyncInnerPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackSyncInnerPacket)
  return false;
#undef DO_
}

void BackSyncInnerPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackSyncInnerPacket)
  // optional int64 exchagerId = 1;
  if (has_exchagerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exchagerid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 innerPacketId = 3;
  if (has_innerpacketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->innerpacketid(), output);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->innerpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackSyncInnerPacket)
}

::google::protobuf::uint8* BackSyncInnerPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackSyncInnerPacket)
  // optional int64 exchagerId = 1;
  if (has_exchagerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exchagerid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 innerPacketId = 3;
  if (has_innerpacketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->innerpacketid(), target);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->innerpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackSyncInnerPacket)
  return target;
}

int BackSyncInnerPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 exchagerId = 1;
    if (has_exchagerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchagerid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 innerPacketId = 3;
    if (has_innerpacketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->innerpacketid());
    }

    // optional bytes innerPacket = 4;
    if (has_innerpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpacket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackSyncInnerPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackSyncInnerPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackSyncInnerPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackSyncInnerPacket::MergeFrom(const BackSyncInnerPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchagerid()) {
      set_exchagerid(from.exchagerid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_innerpacketid()) {
      set_innerpacketid(from.innerpacketid());
    }
    if (from.has_innerpacket()) {
      set_innerpacket(from.innerpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackSyncInnerPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackSyncInnerPacket::CopyFrom(const BackSyncInnerPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackSyncInnerPacket::IsInitialized() const {

  return true;
}

void BackSyncInnerPacket::Swap(BackSyncInnerPacket* other) {
  if (other != this) {
    std::swap(exchagerid_, other->exchagerid_);
    std::swap(result_, other->result_);
    std::swap(innerpacketid_, other->innerpacketid_);
    std::swap(innerpacket_, other->innerpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackSyncInnerPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackSyncInnerPacket_descriptor_;
  metadata.reflection = BackSyncInnerPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqServerProperties::kServerTypeFieldNumber;
const int ReqServerProperties::kPropFileNameFieldNumber;
const int ReqServerProperties::kNeedMongodbFieldNumber;
#endif  // !_MSC_VER

ReqServerProperties::ReqServerProperties()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReqServerProperties)
}

void ReqServerProperties::InitAsDefaultInstance() {
}

ReqServerProperties::ReqServerProperties(const ReqServerProperties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReqServerProperties)
}

void ReqServerProperties::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servertype_ = 0;
  needmongodb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqServerProperties::~ReqServerProperties() {
  // @@protoc_insertion_point(destructor:ReqServerProperties)
  SharedDtor();
}

void ReqServerProperties::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqServerProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqServerProperties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqServerProperties_descriptor_;
}

const ReqServerProperties& ReqServerProperties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

ReqServerProperties* ReqServerProperties::default_instance_ = NULL;

ReqServerProperties* ReqServerProperties::New() const {
  return new ReqServerProperties;
}

void ReqServerProperties::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqServerProperties*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(servertype_, needmongodb_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  propfilename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqServerProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReqServerProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_propFileName;
        break;
      }

      // repeated string propFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_propFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_propfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propfilename(this->propfilename_size() - 1).data(),
            this->propfilename(this->propfilename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "propfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_propFileName;
        if (input->ExpectTag(24)) goto parse_needMongodb;
        break;
      }

      // optional int32 needMongodb = 3;
      case 3: {
        if (tag == 24) {
         parse_needMongodb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmongodb_)));
          set_has_needmongodb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReqServerProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReqServerProperties)
  return false;
#undef DO_
}

void ReqServerProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReqServerProperties)
  // optional int32 serverType = 1;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertype(), output);
  }

  // repeated string propFileName = 2;
  for (int i = 0; i < this->propfilename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->propfilename(i).data(), this->propfilename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "propfilename");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->propfilename(i), output);
  }

  // optional int32 needMongodb = 3;
  if (has_needmongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->needmongodb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReqServerProperties)
}

::google::protobuf::uint8* ReqServerProperties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReqServerProperties)
  // optional int32 serverType = 1;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servertype(), target);
  }

  // repeated string propFileName = 2;
  for (int i = 0; i < this->propfilename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propfilename(i).data(), this->propfilename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "propfilename");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->propfilename(i), target);
  }

  // optional int32 needMongodb = 3;
  if (has_needmongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->needmongodb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReqServerProperties)
  return target;
}

int ReqServerProperties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional int32 needMongodb = 3;
    if (has_needmongodb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmongodb());
    }

  }
  // repeated string propFileName = 2;
  total_size += 1 * this->propfilename_size();
  for (int i = 0; i < this->propfilename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->propfilename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqServerProperties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqServerProperties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqServerProperties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqServerProperties::MergeFrom(const ReqServerProperties& from) {
  GOOGLE_CHECK_NE(&from, this);
  propfilename_.MergeFrom(from.propfilename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_needmongodb()) {
      set_needmongodb(from.needmongodb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqServerProperties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqServerProperties::CopyFrom(const ReqServerProperties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqServerProperties::IsInitialized() const {

  return true;
}

void ReqServerProperties::Swap(ReqServerProperties* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    propfilename_.Swap(&other->propfilename_);
    std::swap(needmongodb_, other->needmongodb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqServerProperties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqServerProperties_descriptor_;
  metadata.reflection = ReqServerProperties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertiesInfo::kKeyFieldNumber;
const int PropertiesInfo::kValueFieldNumber;
#endif  // !_MSC_VER

PropertiesInfo::PropertiesInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertiesInfo)
}

void PropertiesInfo::InitAsDefaultInstance() {
}

PropertiesInfo::PropertiesInfo(const PropertiesInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertiesInfo)
}

void PropertiesInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertiesInfo::~PropertiesInfo() {
  // @@protoc_insertion_point(destructor:PropertiesInfo)
  SharedDtor();
}

void PropertiesInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void PropertiesInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertiesInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertiesInfo_descriptor_;
}

const PropertiesInfo& PropertiesInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

PropertiesInfo* PropertiesInfo::default_instance_ = NULL;

PropertiesInfo* PropertiesInfo::New() const {
  return new PropertiesInfo;
}

void PropertiesInfo::Clear() {
  if (has_key()) {
    if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      key_->clear();
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertiesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertiesInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertiesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertiesInfo)
  return false;
#undef DO_
}

void PropertiesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertiesInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PropertiesInfo)
}

::google::protobuf::uint8* PropertiesInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertiesInfo)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PropertiesInfo)
  return target;
}

int PropertiesInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated string value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertiesInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertiesInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertiesInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertiesInfo::MergeFrom(const PropertiesInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertiesInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertiesInfo::CopyFrom(const PropertiesInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertiesInfo::IsInitialized() const {

  return true;
}

void PropertiesInfo::Swap(PropertiesInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertiesInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertiesInfo_descriptor_;
  metadata.reflection = PropertiesInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPropertiesBack::kServerTypeFieldNumber;
const int ServerPropertiesBack::kServerGroupIdFieldNumber;
const int ServerPropertiesBack::kPropInfoArrFieldNumber;
#endif  // !_MSC_VER

ServerPropertiesBack::ServerPropertiesBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerPropertiesBack)
}

void ServerPropertiesBack::InitAsDefaultInstance() {
}

ServerPropertiesBack::ServerPropertiesBack(const ServerPropertiesBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerPropertiesBack)
}

void ServerPropertiesBack::SharedCtor() {
  _cached_size_ = 0;
  servertype_ = 0;
  servergroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPropertiesBack::~ServerPropertiesBack() {
  // @@protoc_insertion_point(destructor:ServerPropertiesBack)
  SharedDtor();
}

void ServerPropertiesBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerPropertiesBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPropertiesBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPropertiesBack_descriptor_;
}

const ServerPropertiesBack& ServerPropertiesBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

ServerPropertiesBack* ServerPropertiesBack::default_instance_ = NULL;

ServerPropertiesBack* ServerPropertiesBack::New() const {
  return new ServerPropertiesBack;
}

void ServerPropertiesBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServerPropertiesBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(servertype_, servergroupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  propinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPropertiesBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerPropertiesBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serverType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverGroupId;
        break;
      }

      // optional int32 serverGroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_serverGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servergroupid_)));
          set_has_servergroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_propInfoArr;
        break;
      }

      // repeated .PropertiesInfo propInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_propInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_propInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerPropertiesBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerPropertiesBack)
  return false;
#undef DO_
}

void ServerPropertiesBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerPropertiesBack)
  // optional int32 serverType = 1;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servertype(), output);
  }

  // optional int32 serverGroupId = 2;
  if (has_servergroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servergroupid(), output);
  }

  // repeated .PropertiesInfo propInfoArr = 3;
  for (int i = 0; i < this->propinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->propinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerPropertiesBack)
}

::google::protobuf::uint8* ServerPropertiesBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerPropertiesBack)
  // optional int32 serverType = 1;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servertype(), target);
  }

  // optional int32 serverGroupId = 2;
  if (has_servergroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servergroupid(), target);
  }

  // repeated .PropertiesInfo propInfoArr = 3;
  for (int i = 0; i < this->propinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->propinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerPropertiesBack)
  return target;
}

int ServerPropertiesBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 serverType = 1;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional int32 serverGroupId = 2;
    if (has_servergroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servergroupid());
    }

  }
  // repeated .PropertiesInfo propInfoArr = 3;
  total_size += 1 * this->propinfoarr_size();
  for (int i = 0; i < this->propinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPropertiesBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPropertiesBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPropertiesBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPropertiesBack::MergeFrom(const ServerPropertiesBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  propinfoarr_.MergeFrom(from.propinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_servergroupid()) {
      set_servergroupid(from.servergroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPropertiesBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPropertiesBack::CopyFrom(const ServerPropertiesBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPropertiesBack::IsInitialized() const {

  return true;
}

void ServerPropertiesBack::Swap(ServerPropertiesBack* other) {
  if (other != this) {
    std::swap(servertype_, other->servertype_);
    std::swap(servergroupid_, other->servergroupid_);
    propinfoarr_.Swap(&other->propinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPropertiesBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPropertiesBack_descriptor_;
  metadata.reflection = ServerPropertiesBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFunctionOpen::kFunctionIdFieldNumber;
const int GCFunctionOpen::kFunctionValFieldNumber;
#endif  // !_MSC_VER

GCFunctionOpen::GCFunctionOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFunctionOpen)
}

void GCFunctionOpen::InitAsDefaultInstance() {
}

GCFunctionOpen::GCFunctionOpen(const GCFunctionOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFunctionOpen)
}

void GCFunctionOpen::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = 0;
  functionval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFunctionOpen::~GCFunctionOpen() {
  // @@protoc_insertion_point(destructor:GCFunctionOpen)
  SharedDtor();
}

void GCFunctionOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFunctionOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFunctionOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFunctionOpen_descriptor_;
}

const GCFunctionOpen& GCFunctionOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

GCFunctionOpen* GCFunctionOpen::default_instance_ = NULL;

GCFunctionOpen* GCFunctionOpen::New() const {
  return new GCFunctionOpen;
}

void GCFunctionOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFunctionOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(functionid_, functionval_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFunctionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFunctionOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 functionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_functionVal;
        break;
      }

      // optional int32 functionVal = 2;
      case 2: {
        if (tag == 16) {
         parse_functionVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionval_)));
          set_has_functionval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFunctionOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFunctionOpen)
  return false;
#undef DO_
}

void GCFunctionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFunctionOpen)
  // optional int32 functionId = 1;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->functionid(), output);
  }

  // optional int32 functionVal = 2;
  if (has_functionval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->functionval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFunctionOpen)
}

::google::protobuf::uint8* GCFunctionOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFunctionOpen)
  // optional int32 functionId = 1;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->functionid(), target);
  }

  // optional int32 functionVal = 2;
  if (has_functionval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->functionval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFunctionOpen)
  return target;
}

int GCFunctionOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 functionId = 1;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionid());
    }

    // optional int32 functionVal = 2;
    if (has_functionval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFunctionOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFunctionOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFunctionOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFunctionOpen::MergeFrom(const GCFunctionOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
    if (from.has_functionval()) {
      set_functionval(from.functionval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFunctionOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFunctionOpen::CopyFrom(const GCFunctionOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFunctionOpen::IsInitialized() const {

  return true;
}

void GCFunctionOpen::Swap(GCFunctionOpen* other) {
  if (other != this) {
    std::swap(functionid_, other->functionid_);
    std::swap(functionval_, other->functionval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFunctionOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFunctionOpen_descriptor_;
  metadata.reflection = GCFunctionOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFunctionOpenList::kFunctionsFieldNumber;
#endif  // !_MSC_VER

GCFunctionOpenList::GCFunctionOpenList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFunctionOpenList)
}

void GCFunctionOpenList::InitAsDefaultInstance() {
}

GCFunctionOpenList::GCFunctionOpenList(const GCFunctionOpenList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFunctionOpenList)
}

void GCFunctionOpenList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFunctionOpenList::~GCFunctionOpenList() {
  // @@protoc_insertion_point(destructor:GCFunctionOpenList)
  SharedDtor();
}

void GCFunctionOpenList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFunctionOpenList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFunctionOpenList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFunctionOpenList_descriptor_;
}

const GCFunctionOpenList& GCFunctionOpenList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonMessage_2eproto();
  return *default_instance_;
}

GCFunctionOpenList* GCFunctionOpenList::default_instance_ = NULL;

GCFunctionOpenList* GCFunctionOpenList::New() const {
  return new GCFunctionOpenList;
}

void GCFunctionOpenList::Clear() {
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFunctionOpenList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFunctionOpenList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GCFunctionOpen functions = 1;
      case 1: {
        if (tag == 10) {
         parse_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_functions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFunctionOpenList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFunctionOpenList)
  return false;
#undef DO_
}

void GCFunctionOpenList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFunctionOpenList)
  // repeated .GCFunctionOpen functions = 1;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFunctionOpenList)
}

::google::protobuf::uint8* GCFunctionOpenList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFunctionOpenList)
  // repeated .GCFunctionOpen functions = 1;
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->functions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFunctionOpenList)
  return target;
}

int GCFunctionOpenList::ByteSize() const {
  int total_size = 0;

  // repeated .GCFunctionOpen functions = 1;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFunctionOpenList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFunctionOpenList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFunctionOpenList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFunctionOpenList::MergeFrom(const GCFunctionOpenList& from) {
  GOOGLE_CHECK_NE(&from, this);
  functions_.MergeFrom(from.functions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFunctionOpenList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFunctionOpenList::CopyFrom(const GCFunctionOpenList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFunctionOpenList::IsInitialized() const {

  return true;
}

void GCFunctionOpenList::Swap(GCFunctionOpenList* other) {
  if (other != this) {
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFunctionOpenList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFunctionOpenList_descriptor_;
  metadata.reflection = GCFunctionOpenList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
