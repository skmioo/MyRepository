// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CurcyIntegralMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CurcyIntegralMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IntegralRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurcyIntegralItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurcyIntegralItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGIntegralOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGIntegralOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCIntegralResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCIntegralResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CurcyIntegralMessage_2eproto() {
  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CurcyIntegralMessage.proto");
  GOOGLE_CHECK(file != NULL);
  IntegralRankInfo_descriptor_ = file->message_type(0);
  static const int IntegralRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRankInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRankInfo, name_),
  };
  IntegralRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralRankInfo_descriptor_,
      IntegralRankInfo::default_instance_,
      IntegralRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralRankInfo));
  CurcyIntegralItemInfo_descriptor_ = file->message_type(1);
  static const int CurcyIntegralItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurcyIntegralItemInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurcyIntegralItemInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurcyIntegralItemInfo, num_),
  };
  CurcyIntegralItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurcyIntegralItemInfo_descriptor_,
      CurcyIntegralItemInfo::default_instance_,
      CurcyIntegralItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurcyIntegralItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurcyIntegralItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurcyIntegralItemInfo));
  IntegralRewardInfo_descriptor_ = file->message_type(2);
  static const int IntegralRewardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, playername_),
  };
  IntegralRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralRewardInfo_descriptor_,
      IntegralRewardInfo::default_instance_,
      IntegralRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralRewardInfo));
  CGIntegralOperate_descriptor_ = file->message_type(3);
  static const int CGIntegralOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGIntegralOperate, playerid_),
  };
  CGIntegralOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGIntegralOperate_descriptor_,
      CGIntegralOperate::default_instance_,
      CGIntegralOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGIntegralOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGIntegralOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGIntegralOperate));
  GCIntegralResult_descriptor_ = file->message_type(4);
  static const int GCIntegralResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, rankinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, rewardinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, rankreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, integralspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, uiid_),
  };
  GCIntegralResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCIntegralResult_descriptor_,
      GCIntegralResult::default_instance_,
      GCIntegralResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCIntegralResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCIntegralResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CurcyIntegralMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralRankInfo_descriptor_, &IntegralRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurcyIntegralItemInfo_descriptor_, &CurcyIntegralItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralRewardInfo_descriptor_, &IntegralRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGIntegralOperate_descriptor_, &CGIntegralOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCIntegralResult_descriptor_, &GCIntegralResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto() {
  delete IntegralRankInfo::default_instance_;
  delete IntegralRankInfo_reflection_;
  delete CurcyIntegralItemInfo::default_instance_;
  delete CurcyIntegralItemInfo_reflection_;
  delete IntegralRewardInfo::default_instance_;
  delete IntegralRewardInfo_reflection_;
  delete CGIntegralOperate::default_instance_;
  delete CGIntegralOperate_reflection_;
  delete GCIntegralResult::default_instance_;
  delete GCIntegralResult_reflection_;
}

void protobuf_AddDesc_CurcyIntegralMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032CurcyIntegralMessage.proto\"@\n\020Integral"
    "RankInfo\022\020\n\010playerId\030\001 \001(\003\022\014\n\004rank\030\002 \001(\005"
    "\022\014\n\004name\030\003 \001(\t\">\n\025CurcyIntegralItemInfo\022"
    "\013\n\003bid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\177"
    "\n\022IntegralRewardInfo\022\r\n\005stage\030\001 \001(\005\022\020\n\010i"
    "ntegral\030\002 \001(\005\022&\n\006reward\030\003 \003(\0132\026.CurcyInt"
    "egralItemInfo\022\014\n\004icon\030\004 \001(\t\022\022\n\nplayerNam"
    "e\030\005 \001(\t\"%\n\021CGIntegralOperate\022\020\n\010playerId"
    "\030\001 \001(\003\"\273\001\n\020GCIntegralResult\022$\n\trankInfos"
    "\030\001 \003(\0132\021.IntegralRankInfo\022(\n\013rewardInfos"
    "\030\002 \003(\0132\023.IntegralRewardInfo\022\014\n\004rank\030\003 \001("
    "\005\022\022\n\nrankReward\030\004 \001(\005\022\020\n\010integral\030\005 \001(\005\022"
    "\025\n\rintegralSpace\030\006 \001(\005\022\014\n\004uiId\030\007 \001(\tB\031\n\027"
    "com.mile.common.message", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CurcyIntegralMessage.proto", &protobuf_RegisterTypes);
  IntegralRankInfo::default_instance_ = new IntegralRankInfo();
  CurcyIntegralItemInfo::default_instance_ = new CurcyIntegralItemInfo();
  IntegralRewardInfo::default_instance_ = new IntegralRewardInfo();
  CGIntegralOperate::default_instance_ = new CGIntegralOperate();
  GCIntegralResult::default_instance_ = new GCIntegralResult();
  IntegralRankInfo::default_instance_->InitAsDefaultInstance();
  CurcyIntegralItemInfo::default_instance_->InitAsDefaultInstance();
  IntegralRewardInfo::default_instance_->InitAsDefaultInstance();
  CGIntegralOperate::default_instance_->InitAsDefaultInstance();
  GCIntegralResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CurcyIntegralMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CurcyIntegralMessage_2eproto {
  StaticDescriptorInitializer_CurcyIntegralMessage_2eproto() {
    protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  }
} static_descriptor_initializer_CurcyIntegralMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IntegralRankInfo::kPlayerIdFieldNumber;
const int IntegralRankInfo::kRankFieldNumber;
const int IntegralRankInfo::kNameFieldNumber;
#endif  // !_MSC_VER

IntegralRankInfo::IntegralRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IntegralRankInfo)
}

void IntegralRankInfo::InitAsDefaultInstance() {
}

IntegralRankInfo::IntegralRankInfo(const IntegralRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IntegralRankInfo)
}

void IntegralRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralRankInfo::~IntegralRankInfo() {
  // @@protoc_insertion_point(destructor:IntegralRankInfo)
  SharedDtor();
}

void IntegralRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IntegralRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralRankInfo_descriptor_;
}

const IntegralRankInfo& IntegralRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  return *default_instance_;
}

IntegralRankInfo* IntegralRankInfo::default_instance_ = NULL;

IntegralRankInfo* IntegralRankInfo::New() const {
  return new IntegralRankInfo;
}

void IntegralRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    playerid_ = GOOGLE_LONGLONG(0);
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IntegralRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IntegralRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IntegralRankInfo)
  return false;
#undef DO_
}

void IntegralRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IntegralRankInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IntegralRankInfo)
}

::google::protobuf::uint8* IntegralRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntegralRankInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntegralRankInfo)
  return target;
}

int IntegralRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralRankInfo::MergeFrom(const IntegralRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralRankInfo::CopyFrom(const IntegralRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralRankInfo::IsInitialized() const {

  return true;
}

void IntegralRankInfo::Swap(IntegralRankInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralRankInfo_descriptor_;
  metadata.reflection = IntegralRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurcyIntegralItemInfo::kBidFieldNumber;
const int CurcyIntegralItemInfo::kSidFieldNumber;
const int CurcyIntegralItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

CurcyIntegralItemInfo::CurcyIntegralItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CurcyIntegralItemInfo)
}

void CurcyIntegralItemInfo::InitAsDefaultInstance() {
}

CurcyIntegralItemInfo::CurcyIntegralItemInfo(const CurcyIntegralItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CurcyIntegralItemInfo)
}

void CurcyIntegralItemInfo::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurcyIntegralItemInfo::~CurcyIntegralItemInfo() {
  // @@protoc_insertion_point(destructor:CurcyIntegralItemInfo)
  SharedDtor();
}

void CurcyIntegralItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurcyIntegralItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurcyIntegralItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurcyIntegralItemInfo_descriptor_;
}

const CurcyIntegralItemInfo& CurcyIntegralItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  return *default_instance_;
}

CurcyIntegralItemInfo* CurcyIntegralItemInfo::default_instance_ = NULL;

CurcyIntegralItemInfo* CurcyIntegralItemInfo::New() const {
  return new CurcyIntegralItemInfo;
}

void CurcyIntegralItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurcyIntegralItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurcyIntegralItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CurcyIntegralItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CurcyIntegralItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CurcyIntegralItemInfo)
  return false;
#undef DO_
}

void CurcyIntegralItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CurcyIntegralItemInfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CurcyIntegralItemInfo)
}

::google::protobuf::uint8* CurcyIntegralItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CurcyIntegralItemInfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CurcyIntegralItemInfo)
  return target;
}

int CurcyIntegralItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurcyIntegralItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurcyIntegralItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurcyIntegralItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurcyIntegralItemInfo::MergeFrom(const CurcyIntegralItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurcyIntegralItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurcyIntegralItemInfo::CopyFrom(const CurcyIntegralItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurcyIntegralItemInfo::IsInitialized() const {

  return true;
}

void CurcyIntegralItemInfo::Swap(CurcyIntegralItemInfo* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurcyIntegralItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurcyIntegralItemInfo_descriptor_;
  metadata.reflection = CurcyIntegralItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralRewardInfo::kStageFieldNumber;
const int IntegralRewardInfo::kIntegralFieldNumber;
const int IntegralRewardInfo::kRewardFieldNumber;
const int IntegralRewardInfo::kIconFieldNumber;
const int IntegralRewardInfo::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

IntegralRewardInfo::IntegralRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IntegralRewardInfo)
}

void IntegralRewardInfo::InitAsDefaultInstance() {
}

IntegralRewardInfo::IntegralRewardInfo(const IntegralRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IntegralRewardInfo)
}

void IntegralRewardInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stage_ = 0;
  integral_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralRewardInfo::~IntegralRewardInfo() {
  // @@protoc_insertion_point(destructor:IntegralRewardInfo)
  SharedDtor();
}

void IntegralRewardInfo::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void IntegralRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralRewardInfo_descriptor_;
}

const IntegralRewardInfo& IntegralRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  return *default_instance_;
}

IntegralRewardInfo* IntegralRewardInfo::default_instance_ = NULL;

IntegralRewardInfo* IntegralRewardInfo::New() const {
  return new IntegralRewardInfo;
}

void IntegralRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IntegralRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(stage_, integral_);
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IntegralRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional int32 integral = 2;
      case 2: {
        if (tag == 16) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .CurcyIntegralItemInfo reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_playerName;
        break;
      }

      // optional string playerName = 5;
      case 5: {
        if (tag == 42) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IntegralRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IntegralRewardInfo)
  return false;
#undef DO_
}

void IntegralRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IntegralRewardInfo)
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integral(), output);
  }

  // repeated .CurcyIntegralItemInfo reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // optional string playerName = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IntegralRewardInfo)
}

::google::protobuf::uint8* IntegralRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IntegralRewardInfo)
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integral(), target);
  }

  // repeated .CurcyIntegralItemInfo reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // optional string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional string playerName = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IntegralRewardInfo)
  return target;
}

int IntegralRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string playerName = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  // repeated .CurcyIntegralItemInfo reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralRewardInfo::MergeFrom(const IntegralRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralRewardInfo::CopyFrom(const IntegralRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralRewardInfo::IsInitialized() const {

  return true;
}

void IntegralRewardInfo::Swap(IntegralRewardInfo* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(integral_, other->integral_);
    reward_.Swap(&other->reward_);
    std::swap(icon_, other->icon_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralRewardInfo_descriptor_;
  metadata.reflection = IntegralRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGIntegralOperate::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGIntegralOperate::CGIntegralOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGIntegralOperate)
}

void CGIntegralOperate::InitAsDefaultInstance() {
}

CGIntegralOperate::CGIntegralOperate(const CGIntegralOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGIntegralOperate)
}

void CGIntegralOperate::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGIntegralOperate::~CGIntegralOperate() {
  // @@protoc_insertion_point(destructor:CGIntegralOperate)
  SharedDtor();
}

void CGIntegralOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGIntegralOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGIntegralOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGIntegralOperate_descriptor_;
}

const CGIntegralOperate& CGIntegralOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  return *default_instance_;
}

CGIntegralOperate* CGIntegralOperate::default_instance_ = NULL;

CGIntegralOperate* CGIntegralOperate::New() const {
  return new CGIntegralOperate;
}

void CGIntegralOperate::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGIntegralOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGIntegralOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGIntegralOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGIntegralOperate)
  return false;
#undef DO_
}

void CGIntegralOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGIntegralOperate)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGIntegralOperate)
}

::google::protobuf::uint8* CGIntegralOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGIntegralOperate)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGIntegralOperate)
  return target;
}

int CGIntegralOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGIntegralOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGIntegralOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGIntegralOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGIntegralOperate::MergeFrom(const CGIntegralOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGIntegralOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGIntegralOperate::CopyFrom(const CGIntegralOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGIntegralOperate::IsInitialized() const {

  return true;
}

void CGIntegralOperate::Swap(CGIntegralOperate* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGIntegralOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGIntegralOperate_descriptor_;
  metadata.reflection = CGIntegralOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCIntegralResult::kRankInfosFieldNumber;
const int GCIntegralResult::kRewardInfosFieldNumber;
const int GCIntegralResult::kRankFieldNumber;
const int GCIntegralResult::kRankRewardFieldNumber;
const int GCIntegralResult::kIntegralFieldNumber;
const int GCIntegralResult::kIntegralSpaceFieldNumber;
const int GCIntegralResult::kUiIdFieldNumber;
#endif  // !_MSC_VER

GCIntegralResult::GCIntegralResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCIntegralResult)
}

void GCIntegralResult::InitAsDefaultInstance() {
}

GCIntegralResult::GCIntegralResult(const GCIntegralResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCIntegralResult)
}

void GCIntegralResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0;
  rankreward_ = 0;
  integral_ = 0;
  integralspace_ = 0;
  uiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCIntegralResult::~GCIntegralResult() {
  // @@protoc_insertion_point(destructor:GCIntegralResult)
  SharedDtor();
}

void GCIntegralResult::SharedDtor() {
  if (uiid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uiid_;
  }
  if (this != default_instance_) {
  }
}

void GCIntegralResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCIntegralResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCIntegralResult_descriptor_;
}

const GCIntegralResult& GCIntegralResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  return *default_instance_;
}

GCIntegralResult* GCIntegralResult::default_instance_ = NULL;

GCIntegralResult* GCIntegralResult::New() const {
  return new GCIntegralResult;
}

void GCIntegralResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCIntegralResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 124) {
    ZR_(rank_, integralspace_);
    if (has_uiid()) {
      if (uiid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uiid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankinfos_.Clear();
  rewardinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCIntegralResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCIntegralResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IntegralRankInfo rankInfos = 1;
      case 1: {
        if (tag == 10) {
         parse_rankInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rankInfos;
        if (input->ExpectTag(18)) goto parse_rewardInfos;
        break;
      }

      // repeated .IntegralRewardInfo rewardInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_rewardInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewardInfos;
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional int32 rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rankReward;
        break;
      }

      // optional int32 rankReward = 4;
      case 4: {
        if (tag == 32) {
         parse_rankReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankreward_)));
          set_has_rankreward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_integral;
        break;
      }

      // optional int32 integral = 5;
      case 5: {
        if (tag == 40) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_integralSpace;
        break;
      }

      // optional int32 integralSpace = 6;
      case 6: {
        if (tag == 48) {
         parse_integralSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integralspace_)));
          set_has_integralspace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_uiId;
        break;
      }

      // optional string uiId = 7;
      case 7: {
        if (tag == 58) {
         parse_uiId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uiid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uiid().data(), this->uiid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uiid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCIntegralResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCIntegralResult)
  return false;
#undef DO_
}

void GCIntegralResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCIntegralResult)
  // repeated .IntegralRankInfo rankInfos = 1;
  for (int i = 0; i < this->rankinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfos(i), output);
  }

  // repeated .IntegralRewardInfo rewardInfos = 2;
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfos(i), output);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank(), output);
  }

  // optional int32 rankReward = 4;
  if (has_rankreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankreward(), output);
  }

  // optional int32 integral = 5;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integral(), output);
  }

  // optional int32 integralSpace = 6;
  if (has_integralspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->integralspace(), output);
  }

  // optional string uiId = 7;
  if (has_uiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uiid().data(), this->uiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uiid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->uiid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCIntegralResult)
}

::google::protobuf::uint8* GCIntegralResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCIntegralResult)
  // repeated .IntegralRankInfo rankInfos = 1;
  for (int i = 0; i < this->rankinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfos(i), target);
  }

  // repeated .IntegralRewardInfo rewardInfos = 2;
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfos(i), target);
  }

  // optional int32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank(), target);
  }

  // optional int32 rankReward = 4;
  if (has_rankreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankreward(), target);
  }

  // optional int32 integral = 5;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integral(), target);
  }

  // optional int32 integralSpace = 6;
  if (has_integralspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->integralspace(), target);
  }

  // optional string uiId = 7;
  if (has_uiid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uiid().data(), this->uiid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uiid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uiid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCIntegralResult)
  return target;
}

int GCIntegralResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 rankReward = 4;
    if (has_rankreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankreward());
    }

    // optional int32 integral = 5;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 integralSpace = 6;
    if (has_integralspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integralspace());
    }

    // optional string uiId = 7;
    if (has_uiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uiid());
    }

  }
  // repeated .IntegralRankInfo rankInfos = 1;
  total_size += 1 * this->rankinfos_size();
  for (int i = 0; i < this->rankinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfos(i));
  }

  // repeated .IntegralRewardInfo rewardInfos = 2;
  total_size += 1 * this->rewardinfos_size();
  for (int i = 0; i < this->rewardinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCIntegralResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCIntegralResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCIntegralResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCIntegralResult::MergeFrom(const GCIntegralResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfos_.MergeFrom(from.rankinfos_);
  rewardinfos_.MergeFrom(from.rewardinfos_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_rankreward()) {
      set_rankreward(from.rankreward());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_integralspace()) {
      set_integralspace(from.integralspace());
    }
    if (from.has_uiid()) {
      set_uiid(from.uiid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCIntegralResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCIntegralResult::CopyFrom(const GCIntegralResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCIntegralResult::IsInitialized() const {

  return true;
}

void GCIntegralResult::Swap(GCIntegralResult* other) {
  if (other != this) {
    rankinfos_.Swap(&other->rankinfos_);
    rewardinfos_.Swap(&other->rewardinfos_);
    std::swap(rank_, other->rank_);
    std::swap(rankreward_, other->rankreward_);
    std::swap(integral_, other->integral_);
    std::swap(integralspace_, other->integralspace_);
    std::swap(uiid_, other->uiid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCIntegralResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCIntegralResult_descriptor_;
  metadata.reflection = GCIntegralResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
