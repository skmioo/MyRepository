// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CurcyIntegralMessage.proto

#ifndef PROTOBUF_CurcyIntegralMessage_2eproto__INCLUDED
#define PROTOBUF_CurcyIntegralMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

class IntegralRankInfo;
class CurcyIntegralItemInfo;
class IntegralRewardInfo;
class CGIntegralOperate;
class GCIntegralResult;

// ===================================================================

class IntegralRankInfo : public ::google::protobuf::Message {
 public:
  IntegralRankInfo();
  virtual ~IntegralRankInfo();

  IntegralRankInfo(const IntegralRankInfo& from);

  inline IntegralRankInfo& operator=(const IntegralRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralRankInfo& default_instance();

  void Swap(IntegralRankInfo* other);

  // implements Message ----------------------------------------------

  IntegralRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralRankInfo& from);
  void MergeFrom(const IntegralRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:IntegralRankInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

  void InitAsDefaultInstance();
  static IntegralRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class CurcyIntegralItemInfo : public ::google::protobuf::Message {
 public:
  CurcyIntegralItemInfo();
  virtual ~CurcyIntegralItemInfo();

  CurcyIntegralItemInfo(const CurcyIntegralItemInfo& from);

  inline CurcyIntegralItemInfo& operator=(const CurcyIntegralItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurcyIntegralItemInfo& default_instance();

  void Swap(CurcyIntegralItemInfo* other);

  // implements Message ----------------------------------------------

  CurcyIntegralItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurcyIntegralItemInfo& from);
  void MergeFrom(const CurcyIntegralItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::int32 bid() const;
  inline void set_bid(::google::protobuf::int32 value);

  // optional int32 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CurcyIntegralItemInfo)
 private:
  inline void set_has_bid();
  inline void clear_has_bid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bid_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

  void InitAsDefaultInstance();
  static CurcyIntegralItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class IntegralRewardInfo : public ::google::protobuf::Message {
 public:
  IntegralRewardInfo();
  virtual ~IntegralRewardInfo();

  IntegralRewardInfo(const IntegralRewardInfo& from);

  inline IntegralRewardInfo& operator=(const IntegralRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralRewardInfo& default_instance();

  void Swap(IntegralRewardInfo* other);

  // implements Message ----------------------------------------------

  IntegralRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralRewardInfo& from);
  void MergeFrom(const IntegralRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // optional int32 integral = 2;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 2;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // repeated .CurcyIntegralItemInfo reward = 3;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::CurcyIntegralItemInfo& reward(int index) const;
  inline ::CurcyIntegralItemInfo* mutable_reward(int index);
  inline ::CurcyIntegralItemInfo* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CurcyIntegralItemInfo >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CurcyIntegralItemInfo >*
      mutable_reward();

  // optional string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string playerName = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:IntegralRewardInfo)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::RepeatedPtrField< ::CurcyIntegralItemInfo > reward_;
  ::std::string* icon_;
  ::std::string* playername_;
  friend void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

  void InitAsDefaultInstance();
  static IntegralRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGIntegralOperate : public ::google::protobuf::Message {
 public:
  CGIntegralOperate();
  virtual ~CGIntegralOperate();

  CGIntegralOperate(const CGIntegralOperate& from);

  inline CGIntegralOperate& operator=(const CGIntegralOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGIntegralOperate& default_instance();

  void Swap(CGIntegralOperate* other);

  // implements Message ----------------------------------------------

  CGIntegralOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGIntegralOperate& from);
  void MergeFrom(const CGIntegralOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGIntegralOperate)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

  void InitAsDefaultInstance();
  static CGIntegralOperate* default_instance_;
};
// -------------------------------------------------------------------

class GCIntegralResult : public ::google::protobuf::Message {
 public:
  GCIntegralResult();
  virtual ~GCIntegralResult();

  GCIntegralResult(const GCIntegralResult& from);

  inline GCIntegralResult& operator=(const GCIntegralResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCIntegralResult& default_instance();

  void Swap(GCIntegralResult* other);

  // implements Message ----------------------------------------------

  GCIntegralResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCIntegralResult& from);
  void MergeFrom(const GCIntegralResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IntegralRankInfo rankInfos = 1;
  inline int rankinfos_size() const;
  inline void clear_rankinfos();
  static const int kRankInfosFieldNumber = 1;
  inline const ::IntegralRankInfo& rankinfos(int index) const;
  inline ::IntegralRankInfo* mutable_rankinfos(int index);
  inline ::IntegralRankInfo* add_rankinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::IntegralRankInfo >&
      rankinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::IntegralRankInfo >*
      mutable_rankinfos();

  // repeated .IntegralRewardInfo rewardInfos = 2;
  inline int rewardinfos_size() const;
  inline void clear_rewardinfos();
  static const int kRewardInfosFieldNumber = 2;
  inline const ::IntegralRewardInfo& rewardinfos(int index) const;
  inline ::IntegralRewardInfo* mutable_rewardinfos(int index);
  inline ::IntegralRewardInfo* add_rewardinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::IntegralRewardInfo >&
      rewardinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::IntegralRewardInfo >*
      mutable_rewardinfos();

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 rankReward = 4;
  inline bool has_rankreward() const;
  inline void clear_rankreward();
  static const int kRankRewardFieldNumber = 4;
  inline ::google::protobuf::int32 rankreward() const;
  inline void set_rankreward(::google::protobuf::int32 value);

  // optional int32 integral = 5;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 5;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 integralSpace = 6;
  inline bool has_integralspace() const;
  inline void clear_integralspace();
  static const int kIntegralSpaceFieldNumber = 6;
  inline ::google::protobuf::int32 integralspace() const;
  inline void set_integralspace(::google::protobuf::int32 value);

  // optional string uiId = 7;
  inline bool has_uiid() const;
  inline void clear_uiid();
  static const int kUiIdFieldNumber = 7;
  inline const ::std::string& uiid() const;
  inline void set_uiid(const ::std::string& value);
  inline void set_uiid(const char* value);
  inline void set_uiid(const char* value, size_t size);
  inline ::std::string* mutable_uiid();
  inline ::std::string* release_uiid();
  inline void set_allocated_uiid(::std::string* uiid);

  // @@protoc_insertion_point(class_scope:GCIntegralResult)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_rankreward();
  inline void clear_has_rankreward();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_integralspace();
  inline void clear_has_integralspace();
  inline void set_has_uiid();
  inline void clear_has_uiid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::IntegralRankInfo > rankinfos_;
  ::google::protobuf::RepeatedPtrField< ::IntegralRewardInfo > rewardinfos_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 rankreward_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 integralspace_;
  ::std::string* uiid_;
  friend void  protobuf_AddDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_AssignDesc_CurcyIntegralMessage_2eproto();
  friend void protobuf_ShutdownFile_CurcyIntegralMessage_2eproto();

  void InitAsDefaultInstance();
  static GCIntegralResult* default_instance_;
};
// ===================================================================


// ===================================================================

// IntegralRankInfo

// optional int64 playerId = 1;
inline bool IntegralRankInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegralRankInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegralRankInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegralRankInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 IntegralRankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:IntegralRankInfo.playerId)
  return playerid_;
}
inline void IntegralRankInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:IntegralRankInfo.playerId)
}

// optional int32 rank = 2;
inline bool IntegralRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegralRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegralRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegralRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 IntegralRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:IntegralRankInfo.rank)
  return rank_;
}
inline void IntegralRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:IntegralRankInfo.rank)
}

// optional string name = 3;
inline bool IntegralRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntegralRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IntegralRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IntegralRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IntegralRankInfo::name() const {
  // @@protoc_insertion_point(field_get:IntegralRankInfo.name)
  return *name_;
}
inline void IntegralRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:IntegralRankInfo.name)
}
inline void IntegralRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IntegralRankInfo.name)
}
inline void IntegralRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IntegralRankInfo.name)
}
inline ::std::string* IntegralRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IntegralRankInfo.name)
  return name_;
}
inline ::std::string* IntegralRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IntegralRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IntegralRankInfo.name)
}

// -------------------------------------------------------------------

// CurcyIntegralItemInfo

// optional int32 bid = 1;
inline bool CurcyIntegralItemInfo::has_bid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurcyIntegralItemInfo::set_has_bid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurcyIntegralItemInfo::clear_has_bid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurcyIntegralItemInfo::clear_bid() {
  bid_ = 0;
  clear_has_bid();
}
inline ::google::protobuf::int32 CurcyIntegralItemInfo::bid() const {
  // @@protoc_insertion_point(field_get:CurcyIntegralItemInfo.bid)
  return bid_;
}
inline void CurcyIntegralItemInfo::set_bid(::google::protobuf::int32 value) {
  set_has_bid();
  bid_ = value;
  // @@protoc_insertion_point(field_set:CurcyIntegralItemInfo.bid)
}

// optional int32 sid = 2;
inline bool CurcyIntegralItemInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurcyIntegralItemInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurcyIntegralItemInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurcyIntegralItemInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 CurcyIntegralItemInfo::sid() const {
  // @@protoc_insertion_point(field_get:CurcyIntegralItemInfo.sid)
  return sid_;
}
inline void CurcyIntegralItemInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:CurcyIntegralItemInfo.sid)
}

// optional int32 num = 3;
inline bool CurcyIntegralItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurcyIntegralItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurcyIntegralItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurcyIntegralItemInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CurcyIntegralItemInfo::num() const {
  // @@protoc_insertion_point(field_get:CurcyIntegralItemInfo.num)
  return num_;
}
inline void CurcyIntegralItemInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:CurcyIntegralItemInfo.num)
}

// -------------------------------------------------------------------

// IntegralRewardInfo

// optional int32 stage = 1;
inline bool IntegralRewardInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegralRewardInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegralRewardInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegralRewardInfo::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 IntegralRewardInfo::stage() const {
  // @@protoc_insertion_point(field_get:IntegralRewardInfo.stage)
  return stage_;
}
inline void IntegralRewardInfo::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
  // @@protoc_insertion_point(field_set:IntegralRewardInfo.stage)
}

// optional int32 integral = 2;
inline bool IntegralRewardInfo::has_integral() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegralRewardInfo::set_has_integral() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegralRewardInfo::clear_has_integral() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegralRewardInfo::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 IntegralRewardInfo::integral() const {
  // @@protoc_insertion_point(field_get:IntegralRewardInfo.integral)
  return integral_;
}
inline void IntegralRewardInfo::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
  // @@protoc_insertion_point(field_set:IntegralRewardInfo.integral)
}

// repeated .CurcyIntegralItemInfo reward = 3;
inline int IntegralRewardInfo::reward_size() const {
  return reward_.size();
}
inline void IntegralRewardInfo::clear_reward() {
  reward_.Clear();
}
inline const ::CurcyIntegralItemInfo& IntegralRewardInfo::reward(int index) const {
  // @@protoc_insertion_point(field_get:IntegralRewardInfo.reward)
  return reward_.Get(index);
}
inline ::CurcyIntegralItemInfo* IntegralRewardInfo::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:IntegralRewardInfo.reward)
  return reward_.Mutable(index);
}
inline ::CurcyIntegralItemInfo* IntegralRewardInfo::add_reward() {
  // @@protoc_insertion_point(field_add:IntegralRewardInfo.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CurcyIntegralItemInfo >&
IntegralRewardInfo::reward() const {
  // @@protoc_insertion_point(field_list:IntegralRewardInfo.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CurcyIntegralItemInfo >*
IntegralRewardInfo::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:IntegralRewardInfo.reward)
  return &reward_;
}

// optional string icon = 4;
inline bool IntegralRewardInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IntegralRewardInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IntegralRewardInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IntegralRewardInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& IntegralRewardInfo::icon() const {
  // @@protoc_insertion_point(field_get:IntegralRewardInfo.icon)
  return *icon_;
}
inline void IntegralRewardInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set:IntegralRewardInfo.icon)
}
inline void IntegralRewardInfo::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
  // @@protoc_insertion_point(field_set_char:IntegralRewardInfo.icon)
}
inline void IntegralRewardInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IntegralRewardInfo.icon)
}
inline ::std::string* IntegralRewardInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    icon_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IntegralRewardInfo.icon)
  return icon_;
}
inline ::std::string* IntegralRewardInfo::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IntegralRewardInfo::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IntegralRewardInfo.icon)
}

// optional string playerName = 5;
inline bool IntegralRewardInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IntegralRewardInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IntegralRewardInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IntegralRewardInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& IntegralRewardInfo::playername() const {
  // @@protoc_insertion_point(field_get:IntegralRewardInfo.playerName)
  return *playername_;
}
inline void IntegralRewardInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:IntegralRewardInfo.playerName)
}
inline void IntegralRewardInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:IntegralRewardInfo.playerName)
}
inline void IntegralRewardInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IntegralRewardInfo.playerName)
}
inline ::std::string* IntegralRewardInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IntegralRewardInfo.playerName)
  return playername_;
}
inline ::std::string* IntegralRewardInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IntegralRewardInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IntegralRewardInfo.playerName)
}

// -------------------------------------------------------------------

// CGIntegralOperate

// optional int64 playerId = 1;
inline bool CGIntegralOperate::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGIntegralOperate::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGIntegralOperate::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGIntegralOperate::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGIntegralOperate::playerid() const {
  // @@protoc_insertion_point(field_get:CGIntegralOperate.playerId)
  return playerid_;
}
inline void CGIntegralOperate::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGIntegralOperate.playerId)
}

// -------------------------------------------------------------------

// GCIntegralResult

// repeated .IntegralRankInfo rankInfos = 1;
inline int GCIntegralResult::rankinfos_size() const {
  return rankinfos_.size();
}
inline void GCIntegralResult::clear_rankinfos() {
  rankinfos_.Clear();
}
inline const ::IntegralRankInfo& GCIntegralResult::rankinfos(int index) const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.rankInfos)
  return rankinfos_.Get(index);
}
inline ::IntegralRankInfo* GCIntegralResult::mutable_rankinfos(int index) {
  // @@protoc_insertion_point(field_mutable:GCIntegralResult.rankInfos)
  return rankinfos_.Mutable(index);
}
inline ::IntegralRankInfo* GCIntegralResult::add_rankinfos() {
  // @@protoc_insertion_point(field_add:GCIntegralResult.rankInfos)
  return rankinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IntegralRankInfo >&
GCIntegralResult::rankinfos() const {
  // @@protoc_insertion_point(field_list:GCIntegralResult.rankInfos)
  return rankinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::IntegralRankInfo >*
GCIntegralResult::mutable_rankinfos() {
  // @@protoc_insertion_point(field_mutable_list:GCIntegralResult.rankInfos)
  return &rankinfos_;
}

// repeated .IntegralRewardInfo rewardInfos = 2;
inline int GCIntegralResult::rewardinfos_size() const {
  return rewardinfos_.size();
}
inline void GCIntegralResult::clear_rewardinfos() {
  rewardinfos_.Clear();
}
inline const ::IntegralRewardInfo& GCIntegralResult::rewardinfos(int index) const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.rewardInfos)
  return rewardinfos_.Get(index);
}
inline ::IntegralRewardInfo* GCIntegralResult::mutable_rewardinfos(int index) {
  // @@protoc_insertion_point(field_mutable:GCIntegralResult.rewardInfos)
  return rewardinfos_.Mutable(index);
}
inline ::IntegralRewardInfo* GCIntegralResult::add_rewardinfos() {
  // @@protoc_insertion_point(field_add:GCIntegralResult.rewardInfos)
  return rewardinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IntegralRewardInfo >&
GCIntegralResult::rewardinfos() const {
  // @@protoc_insertion_point(field_list:GCIntegralResult.rewardInfos)
  return rewardinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::IntegralRewardInfo >*
GCIntegralResult::mutable_rewardinfos() {
  // @@protoc_insertion_point(field_mutable_list:GCIntegralResult.rewardInfos)
  return &rewardinfos_;
}

// optional int32 rank = 3;
inline bool GCIntegralResult::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCIntegralResult::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCIntegralResult::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCIntegralResult::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 GCIntegralResult::rank() const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.rank)
  return rank_;
}
inline void GCIntegralResult::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:GCIntegralResult.rank)
}

// optional int32 rankReward = 4;
inline bool GCIntegralResult::has_rankreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCIntegralResult::set_has_rankreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCIntegralResult::clear_has_rankreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCIntegralResult::clear_rankreward() {
  rankreward_ = 0;
  clear_has_rankreward();
}
inline ::google::protobuf::int32 GCIntegralResult::rankreward() const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.rankReward)
  return rankreward_;
}
inline void GCIntegralResult::set_rankreward(::google::protobuf::int32 value) {
  set_has_rankreward();
  rankreward_ = value;
  // @@protoc_insertion_point(field_set:GCIntegralResult.rankReward)
}

// optional int32 integral = 5;
inline bool GCIntegralResult::has_integral() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCIntegralResult::set_has_integral() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCIntegralResult::clear_has_integral() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCIntegralResult::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 GCIntegralResult::integral() const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.integral)
  return integral_;
}
inline void GCIntegralResult::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
  // @@protoc_insertion_point(field_set:GCIntegralResult.integral)
}

// optional int32 integralSpace = 6;
inline bool GCIntegralResult::has_integralspace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCIntegralResult::set_has_integralspace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCIntegralResult::clear_has_integralspace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCIntegralResult::clear_integralspace() {
  integralspace_ = 0;
  clear_has_integralspace();
}
inline ::google::protobuf::int32 GCIntegralResult::integralspace() const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.integralSpace)
  return integralspace_;
}
inline void GCIntegralResult::set_integralspace(::google::protobuf::int32 value) {
  set_has_integralspace();
  integralspace_ = value;
  // @@protoc_insertion_point(field_set:GCIntegralResult.integralSpace)
}

// optional string uiId = 7;
inline bool GCIntegralResult::has_uiid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCIntegralResult::set_has_uiid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCIntegralResult::clear_has_uiid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCIntegralResult::clear_uiid() {
  if (uiid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uiid_->clear();
  }
  clear_has_uiid();
}
inline const ::std::string& GCIntegralResult::uiid() const {
  // @@protoc_insertion_point(field_get:GCIntegralResult.uiId)
  return *uiid_;
}
inline void GCIntegralResult::set_uiid(const ::std::string& value) {
  set_has_uiid();
  if (uiid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uiid_ = new ::std::string;
  }
  uiid_->assign(value);
  // @@protoc_insertion_point(field_set:GCIntegralResult.uiId)
}
inline void GCIntegralResult::set_uiid(const char* value) {
  set_has_uiid();
  if (uiid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uiid_ = new ::std::string;
  }
  uiid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCIntegralResult.uiId)
}
inline void GCIntegralResult::set_uiid(const char* value, size_t size) {
  set_has_uiid();
  if (uiid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uiid_ = new ::std::string;
  }
  uiid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCIntegralResult.uiId)
}
inline ::std::string* GCIntegralResult::mutable_uiid() {
  set_has_uiid();
  if (uiid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uiid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCIntegralResult.uiId)
  return uiid_;
}
inline ::std::string* GCIntegralResult::release_uiid() {
  clear_has_uiid();
  if (uiid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uiid_;
    uiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCIntegralResult::set_allocated_uiid(::std::string* uiid) {
  if (uiid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uiid_;
  }
  if (uiid) {
    set_has_uiid();
    uiid_ = uiid;
  } else {
    clear_has_uiid();
    uiid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCIntegralResult.uiId)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CurcyIntegralMessage_2eproto__INCLUDED
