// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DungeonMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DungeonMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEnterInstancing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterInstancing_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterInstancing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterInstancing_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAllMenusDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAllMenusDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMenusData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMenusData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFastestPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFastestPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInstancingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInstancingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DungeonItemsRwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DungeonItemsRwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDungeonEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDungeonEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChangeSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChangeSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChangeGuideId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChangeGuideId_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInstancingStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInstancingStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAskEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAskEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGResponseEnterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGResponseEnterDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExitDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExitDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuyDungeonNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuyDungeonNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSweepDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSweepDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSweepDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSweepDungeon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSweepTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSweepTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInstancingRwdSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInstancingRwdSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCInstancingErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCInstancingErrorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterBossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetBossView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetBossView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetBossView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetBossView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeBossStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeBossStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPkBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPkBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetBossRanks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetBossRanks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetBossRanks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetBossRanks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPKBossResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPKBossResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPackRwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPackRwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExitPersonBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExitPersonBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossOpenSts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossOpenSts_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPersonBossOpenSts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPersonBossOpenSts_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCClearBossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCClearBossData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DungeonMessage_2eproto() {
  protobuf_AddDesc_DungeonMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DungeonMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEnterInstancing_descriptor_ = file->message_type(0);
  static const int CGEnterInstancing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterInstancing, id_),
  };
  CGEnterInstancing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterInstancing_descriptor_,
      CGEnterInstancing::default_instance_,
      CGEnterInstancing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterInstancing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterInstancing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterInstancing));
  GCEnterInstancing_descriptor_ = file->message_type(1);
  static const int GCEnterInstancing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterInstancing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterInstancing, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterInstancing, guideids_),
  };
  GCEnterInstancing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterInstancing_descriptor_,
      GCEnterInstancing::default_instance_,
      GCEnterInstancing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterInstancing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterInstancing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterInstancing));
  GCAllMenusDatas_descriptor_ = file->message_type(2);
  static const int GCAllMenusDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllMenusDatas, menus_),
  };
  GCAllMenusDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAllMenusDatas_descriptor_,
      GCAllMenusDatas::default_instance_,
      GCAllMenusDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllMenusDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAllMenusDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAllMenusDatas));
  GCMenusData_descriptor_ = file->message_type(3);
  static const int GCMenusData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, instancingdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, players_),
  };
  GCMenusData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMenusData_descriptor_,
      GCMenusData::default_instance_,
      GCMenusData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMenusData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMenusData));
  GCFastestPlayer_descriptor_ = file->message_type(4);
  static const int GCFastestPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFastestPlayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFastestPlayer, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFastestPlayer, passtimename_),
  };
  GCFastestPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFastestPlayer_descriptor_,
      GCFastestPlayer::default_instance_,
      GCFastestPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFastestPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFastestPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFastestPlayer));
  GCInstancingData_descriptor_ = file->message_type(5);
  static const int GCInstancingData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, currnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, selfpasstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, canenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, cansweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, ispass_),
  };
  GCInstancingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInstancingData_descriptor_,
      GCInstancingData::default_instance_,
      GCInstancingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInstancingData));
  DungeonItemsRwd_descriptor_ = file->message_type(6);
  static const int DungeonItemsRwd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonItemsRwd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonItemsRwd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonItemsRwd, bind_),
  };
  DungeonItemsRwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DungeonItemsRwd_descriptor_,
      DungeonItemsRwd::default_instance_,
      DungeonItemsRwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonItemsRwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonItemsRwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DungeonItemsRwd));
  GCDungeonEnd_descriptor_ = file->message_type(7);
  static const int GCDungeonEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, rwds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, menus_),
  };
  GCDungeonEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDungeonEnd_descriptor_,
      GCDungeonEnd::default_instance_,
      GCDungeonEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDungeonEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDungeonEnd));
  CGChangeSchedule_descriptor_ = file->message_type(8);
  static const int CGChangeSchedule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSchedule, schedule_),
  };
  CGChangeSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChangeSchedule_descriptor_,
      CGChangeSchedule::default_instance_,
      CGChangeSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChangeSchedule));
  GCChangeSchedule_descriptor_ = file->message_type(9);
  static const int GCChangeSchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSchedule, schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSchedule, changetime_),
  };
  GCChangeSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeSchedule_descriptor_,
      GCChangeSchedule::default_instance_,
      GCChangeSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeSchedule));
  CGChangeGuideId_descriptor_ = file->message_type(10);
  static const int CGChangeGuideId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeGuideId, guideid_),
  };
  CGChangeGuideId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChangeGuideId_descriptor_,
      CGChangeGuideId::default_instance_,
      CGChangeGuideId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeGuideId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeGuideId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChangeGuideId));
  GCInstancingStart_descriptor_ = file->message_type(11);
  static const int GCInstancingStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingStart, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingStart, time_),
  };
  GCInstancingStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInstancingStart_descriptor_,
      GCInstancingStart::default_instance_,
      GCInstancingStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInstancingStart));
  GCAskEnterDungeon_descriptor_ = file->message_type(12);
  static const int GCAskEnterDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAskEnterDungeon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAskEnterDungeon, playername_),
  };
  GCAskEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAskEnterDungeon_descriptor_,
      GCAskEnterDungeon::default_instance_,
      GCAskEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAskEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAskEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAskEnterDungeon));
  CGResponseEnterDungeon_descriptor_ = file->message_type(13);
  static const int CGResponseEnterDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResponseEnterDungeon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResponseEnterDungeon, sts_),
  };
  CGResponseEnterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGResponseEnterDungeon_descriptor_,
      CGResponseEnterDungeon::default_instance_,
      CGResponseEnterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResponseEnterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGResponseEnterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGResponseEnterDungeon));
  CGExitDungeon_descriptor_ = file->message_type(14);
  static const int CGExitDungeon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitDungeon, id_),
  };
  CGExitDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExitDungeon_descriptor_,
      CGExitDungeon::default_instance_,
      CGExitDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExitDungeon));
  CGBuyDungeonNum_descriptor_ = file->message_type(15);
  static const int CGBuyDungeonNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyDungeonNum, menus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyDungeonNum, buynum_),
  };
  CGBuyDungeonNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuyDungeonNum_descriptor_,
      CGBuyDungeonNum::default_instance_,
      CGBuyDungeonNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyDungeonNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyDungeonNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuyDungeonNum));
  CGSweepDungeon_descriptor_ = file->message_type(16);
  static const int CGSweepDungeon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweepDungeon, sweeptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweepDungeon, id_),
  };
  CGSweepDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSweepDungeon_descriptor_,
      CGSweepDungeon::default_instance_,
      CGSweepDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweepDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSweepDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSweepDungeon));
  GCSweepDungeon_descriptor_ = file->message_type(17);
  static const int GCSweepDungeon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepDungeon, rwds_),
  };
  GCSweepDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSweepDungeon_descriptor_,
      GCSweepDungeon::default_instance_,
      GCSweepDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSweepDungeon));
  GCSweepTower_descriptor_ = file->message_type(18);
  static const int GCSweepTower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepTower, rwds_),
  };
  GCSweepTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSweepTower_descriptor_,
      GCSweepTower::default_instance_,
      GCSweepTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSweepTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSweepTower));
  GCInstancingRwdSchedule_descriptor_ = file->message_type(19);
  static const int GCInstancingRwdSchedule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, bonum_),
  };
  GCInstancingRwdSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInstancingRwdSchedule_descriptor_,
      GCInstancingRwdSchedule::default_instance_,
      GCInstancingRwdSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingRwdSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInstancingRwdSchedule));
  GCInstancingErrorMessage_descriptor_ = file->message_type(20);
  static const int GCInstancingErrorMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, paramtype_),
  };
  GCInstancingErrorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCInstancingErrorMessage_descriptor_,
      GCInstancingErrorMessage::default_instance_,
      GCInstancingErrorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCInstancingErrorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCInstancingErrorMessage));
  BossData_descriptor_ = file->message_type(21);
  static const int BossData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, datepk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, unlockbosssts_),
  };
  BossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossData_descriptor_,
      BossData::default_instance_,
      BossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossData));
  ChapterBossData_descriptor_ = file->message_type(22);
  static const int ChapterBossData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, bosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, packstarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, packrwdstatus_),
  };
  ChapterBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterBossData_descriptor_,
      ChapterBossData::default_instance_,
      ChapterBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterBossData));
  CGGetBossView_descriptor_ = file->message_type(23);
  static const int CGGetBossView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossView, chapterid_),
  };
  CGGetBossView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetBossView_descriptor_,
      CGGetBossView::default_instance_,
      CGGetBossView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetBossView));
  GCGetBossView_descriptor_ = file->message_type(24);
  static const int GCGetBossView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossView, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossView, chapterlist_),
  };
  GCGetBossView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetBossView_descriptor_,
      GCGetBossView::default_instance_,
      GCGetBossView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetBossView));
  GCChangeBossStar_descriptor_ = file->message_type(25);
  static const int GCChangeBossStar_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, bosslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, packstartnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, rewardsts_),
  };
  GCChangeBossStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeBossStar_descriptor_,
      GCChangeBossStar::default_instance_,
      GCChangeBossStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeBossStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeBossStar));
  CGPkBoss_descriptor_ = file->message_type(26);
  static const int CGPkBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPkBoss, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPkBoss, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPkBoss, bossid_),
  };
  CGPkBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPkBoss_descriptor_,
      CGPkBoss::default_instance_,
      CGPkBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPkBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPkBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPkBoss));
  BossRank_descriptor_ = file->message_type(27);
  static const int BossRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, useseconds_),
  };
  BossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossRank_descriptor_,
      BossRank::default_instance_,
      BossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossRank));
  CGGetBossRanks_descriptor_ = file->message_type(28);
  static const int CGGetBossRanks_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossRanks, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossRanks, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossRanks, bossid_),
  };
  CGGetBossRanks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetBossRanks_descriptor_,
      CGGetBossRanks::default_instance_,
      CGGetBossRanks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossRanks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetBossRanks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetBossRanks));
  GCGetBossRanks_descriptor_ = file->message_type(29);
  static const int GCGetBossRanks_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, ranks_),
  };
  GCGetBossRanks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetBossRanks_descriptor_,
      GCGetBossRanks::default_instance_,
      GCGetBossRanks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetBossRanks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetBossRanks));
  GCPKBossResult_descriptor_ = file->message_type(30);
  static const int GCPKBossResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, useseconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, bossid_),
  };
  GCPKBossResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPKBossResult_descriptor_,
      GCPKBossResult::default_instance_,
      GCPKBossResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPKBossResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPKBossResult));
  CGGetPackRwd_descriptor_ = file->message_type(31);
  static const int CGGetPackRwd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPackRwd, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPackRwd, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPackRwd, bossid_),
  };
  CGGetPackRwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPackRwd_descriptor_,
      CGGetPackRwd::default_instance_,
      CGGetPackRwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPackRwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPackRwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPackRwd));
  CGExitPersonBoss_descriptor_ = file->message_type(32);
  static const int CGExitPersonBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitPersonBoss, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitPersonBoss, childchapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitPersonBoss, bossid_),
  };
  CGExitPersonBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExitPersonBoss_descriptor_,
      CGExitPersonBoss::default_instance_,
      CGExitPersonBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitPersonBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExitPersonBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExitPersonBoss));
  BossOpenSts_descriptor_ = file->message_type(33);
  static const int BossOpenSts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossOpenSts, chapterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossOpenSts, sts_),
  };
  BossOpenSts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossOpenSts_descriptor_,
      BossOpenSts::default_instance_,
      BossOpenSts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossOpenSts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossOpenSts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossOpenSts));
  GCPersonBossOpenSts_descriptor_ = file->message_type(34);
  static const int GCPersonBossOpenSts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPersonBossOpenSts, stslist_),
  };
  GCPersonBossOpenSts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPersonBossOpenSts_descriptor_,
      GCPersonBossOpenSts::default_instance_,
      GCPersonBossOpenSts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPersonBossOpenSts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPersonBossOpenSts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPersonBossOpenSts));
  GCClearBossData_descriptor_ = file->message_type(35);
  static const int GCClearBossData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCClearBossData, chapterid_),
  };
  GCClearBossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCClearBossData_descriptor_,
      GCClearBossData::default_instance_,
      GCClearBossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCClearBossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCClearBossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCClearBossData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DungeonMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterInstancing_descriptor_, &CGEnterInstancing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterInstancing_descriptor_, &GCEnterInstancing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAllMenusDatas_descriptor_, &GCAllMenusDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMenusData_descriptor_, &GCMenusData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFastestPlayer_descriptor_, &GCFastestPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInstancingData_descriptor_, &GCInstancingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DungeonItemsRwd_descriptor_, &DungeonItemsRwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDungeonEnd_descriptor_, &GCDungeonEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChangeSchedule_descriptor_, &CGChangeSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeSchedule_descriptor_, &GCChangeSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChangeGuideId_descriptor_, &CGChangeGuideId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInstancingStart_descriptor_, &GCInstancingStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAskEnterDungeon_descriptor_, &GCAskEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGResponseEnterDungeon_descriptor_, &CGResponseEnterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExitDungeon_descriptor_, &CGExitDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuyDungeonNum_descriptor_, &CGBuyDungeonNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSweepDungeon_descriptor_, &CGSweepDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSweepDungeon_descriptor_, &GCSweepDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSweepTower_descriptor_, &GCSweepTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInstancingRwdSchedule_descriptor_, &GCInstancingRwdSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCInstancingErrorMessage_descriptor_, &GCInstancingErrorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossData_descriptor_, &BossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterBossData_descriptor_, &ChapterBossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetBossView_descriptor_, &CGGetBossView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetBossView_descriptor_, &GCGetBossView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeBossStar_descriptor_, &GCChangeBossStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPkBoss_descriptor_, &CGPkBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossRank_descriptor_, &BossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetBossRanks_descriptor_, &CGGetBossRanks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetBossRanks_descriptor_, &GCGetBossRanks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPKBossResult_descriptor_, &GCPKBossResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPackRwd_descriptor_, &CGGetPackRwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExitPersonBoss_descriptor_, &CGExitPersonBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossOpenSts_descriptor_, &BossOpenSts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPersonBossOpenSts_descriptor_, &GCPersonBossOpenSts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCClearBossData_descriptor_, &GCClearBossData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DungeonMessage_2eproto() {
  delete CGEnterInstancing::default_instance_;
  delete CGEnterInstancing_reflection_;
  delete GCEnterInstancing::default_instance_;
  delete GCEnterInstancing_reflection_;
  delete GCAllMenusDatas::default_instance_;
  delete GCAllMenusDatas_reflection_;
  delete GCMenusData::default_instance_;
  delete GCMenusData_reflection_;
  delete GCFastestPlayer::default_instance_;
  delete GCFastestPlayer_reflection_;
  delete GCInstancingData::default_instance_;
  delete GCInstancingData_reflection_;
  delete DungeonItemsRwd::default_instance_;
  delete DungeonItemsRwd_reflection_;
  delete GCDungeonEnd::default_instance_;
  delete GCDungeonEnd_reflection_;
  delete CGChangeSchedule::default_instance_;
  delete CGChangeSchedule_reflection_;
  delete GCChangeSchedule::default_instance_;
  delete GCChangeSchedule_reflection_;
  delete CGChangeGuideId::default_instance_;
  delete CGChangeGuideId_reflection_;
  delete GCInstancingStart::default_instance_;
  delete GCInstancingStart_reflection_;
  delete GCAskEnterDungeon::default_instance_;
  delete GCAskEnterDungeon_reflection_;
  delete CGResponseEnterDungeon::default_instance_;
  delete CGResponseEnterDungeon_reflection_;
  delete CGExitDungeon::default_instance_;
  delete CGExitDungeon_reflection_;
  delete CGBuyDungeonNum::default_instance_;
  delete CGBuyDungeonNum_reflection_;
  delete CGSweepDungeon::default_instance_;
  delete CGSweepDungeon_reflection_;
  delete GCSweepDungeon::default_instance_;
  delete GCSweepDungeon_reflection_;
  delete GCSweepTower::default_instance_;
  delete GCSweepTower_reflection_;
  delete GCInstancingRwdSchedule::default_instance_;
  delete GCInstancingRwdSchedule_reflection_;
  delete GCInstancingErrorMessage::default_instance_;
  delete GCInstancingErrorMessage_reflection_;
  delete BossData::default_instance_;
  delete BossData_reflection_;
  delete ChapterBossData::default_instance_;
  delete ChapterBossData_reflection_;
  delete CGGetBossView::default_instance_;
  delete CGGetBossView_reflection_;
  delete GCGetBossView::default_instance_;
  delete GCGetBossView_reflection_;
  delete GCChangeBossStar::default_instance_;
  delete GCChangeBossStar_reflection_;
  delete CGPkBoss::default_instance_;
  delete CGPkBoss_reflection_;
  delete BossRank::default_instance_;
  delete BossRank_reflection_;
  delete CGGetBossRanks::default_instance_;
  delete CGGetBossRanks_reflection_;
  delete GCGetBossRanks::default_instance_;
  delete GCGetBossRanks_reflection_;
  delete GCPKBossResult::default_instance_;
  delete GCPKBossResult_reflection_;
  delete CGGetPackRwd::default_instance_;
  delete CGGetPackRwd_reflection_;
  delete CGExitPersonBoss::default_instance_;
  delete CGExitPersonBoss_reflection_;
  delete BossOpenSts::default_instance_;
  delete BossOpenSts_reflection_;
  delete GCPersonBossOpenSts::default_instance_;
  delete GCPersonBossOpenSts_reflection_;
  delete GCClearBossData::default_instance_;
  delete GCClearBossData_reflection_;
}

void protobuf_AddDesc_DungeonMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024DungeonMessage.proto\"\037\n\021CGEnterInstanc"
    "ing\022\n\n\002id\030\001 \001(\005\"B\n\021GCEnterInstancing\022\n\n\002"
    "id\030\001 \001(\005\022\017\n\007endTime\030\002 \001(\003\022\020\n\010guideIds\030\003 "
    "\003(\005\".\n\017GCAllMenusDatas\022\033\n\005menus\030\001 \003(\0132\014."
    "GCMenusData\"\211\001\n\013GCMenusData\022\n\n\002id\030\001 \001(\005\022"
    "\017\n\007current\030\002 \001(\005\022\016\n\006buyNum\030\003 \001(\005\022*\n\017inst"
    "ancingDatas\030\004 \003(\0132\021.GCInstancingData\022!\n\007"
    "players\030\005 \003(\0132\020.GCFastestPlayer\"E\n\017GCFas"
    "testPlayer\022\n\n\002id\030\001 \001(\005\022\020\n\010passTime\030\002 \001(\005"
    "\022\024\n\014passTimeName\030\003 \001(\t\"y\n\020GCInstancingDa"
    "ta\022\n\n\002id\030\001 \001(\005\022\017\n\007currNum\030\002 \001(\005\022\024\n\014selfP"
    "assTime\030\003 \001(\005\022\020\n\010canEnter\030\004 \001(\005\022\020\n\010canSw"
    "eep\030\005 \001(\005\022\016\n\006isPass\030\006 \001(\005\"<\n\017DungeonItem"
    "sRwd\022\016\n\006itemId\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\022\014\n\004bin"
    "d\030\003 \001(\005\"V\n\014GCDungeonEnd\022\n\n\002id\030\001 \001(\005\022\013\n\003s"
    "ts\030\002 \001(\005\022\036\n\004rwds\030\003 \003(\0132\020.DungeonItemsRwd"
    "\022\r\n\005menus\030\004 \001(\005\"$\n\020CGChangeSchedule\022\020\n\010s"
    "chedule\030\001 \001(\005\"8\n\020GCChangeSchedule\022\020\n\010sch"
    "edule\030\001 \001(\005\022\022\n\nchangeTime\030\002 \001(\003\"\"\n\017CGCha"
    "ngeGuideId\022\017\n\007guideId\030\001 \001(\005\"-\n\021GCInstanc"
    "ingStart\022\n\n\002id\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"3\n\021GC"
    "AskEnterDungeon\022\n\n\002id\030\001 \001(\005\022\022\n\nplayerNam"
    "e\030\002 \001(\t\"1\n\026CGResponseEnterDungeon\022\n\n\002id\030"
    "\001 \001(\005\022\013\n\003sts\030\002 \001(\005\"\033\n\rCGExitDungeon\022\n\n\002i"
    "d\030\001 \001(\005\"0\n\017CGBuyDungeonNum\022\r\n\005menus\030\001 \001("
    "\005\022\016\n\006buyNum\030\002 \001(\005\"/\n\016CGSweepDungeon\022\021\n\ts"
    "weepType\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"0\n\016GCSweepDun"
    "geon\022\036\n\004rwds\030\001 \003(\0132\020.DungeonItemsRwd\"+\n\014"
    "GCSweepTower\022\033\n\004rwds\030\001 \003(\0132\r.GCDungeonEn"
    "d\"R\n\027GCInstancingRwdSchedule\022\n\n\002id\030\001 \001(\005"
    "\022\017\n\007killNum\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022\r\n\005boNum\030"
    "\004 \001(\005\"f\n\030GCInstancingErrorMessage\022\014\n\004typ"
    "e\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\r\n\005p"
    "aram\030\004 \001(\005\022\021\n\tparamType\030\005 \001(\005\"N\n\010BossDat"
    "a\022\n\n\002id\030\001 \001(\005\022\017\n\007starNum\030\002 \001(\005\022\016\n\006datePk"
    "\030\003 \001(\005\022\025\n\runLockBossSts\030\004 \001(\005\"r\n\017Chapter"
    "BossData\022\033\n\010bossList\030\001 \003(\0132\t.BossData\022\023\n"
    "\013packStarNum\030\002 \001(\005\022\026\n\016childChapterId\030\003 \001"
    "(\005\022\025\n\rpackRwdStatus\030\004 \001(\005\"\"\n\rCGGetBossVi"
    "ew\022\021\n\tchapterId\030\001 \001(\005\"I\n\rGCGetBossView\022\021"
    "\n\tchapterId\030\001 \001(\005\022%\n\013chapterList\030\002 \003(\0132\020"
    ".ChapterBossData\"\203\001\n\020GCChangeBossStar\022\033\n"
    "\010bossList\030\001 \003(\0132\t.BossData\022\021\n\tchapterId\030"
    "\002 \001(\005\022\026\n\016childChapterId\030\003 \001(\005\022\024\n\014packSta"
    "rtNum\030\004 \001(\005\022\021\n\trewardSts\030\005 \001(\005\"E\n\010CGPkBo"
    "ss\022\021\n\tchapterId\030\001 \001(\005\022\026\n\016childChapterId\030"
    "\002 \001(\005\022\016\n\006bossId\030\003 \001(\005\"O\n\010BossRank\022\016\n\006ran"
    "kId\030\001 \001(\005\022\013\n\003sid\030\002 \001(\003\022\022\n\nplayerName\030\003 \001"
    "(\t\022\022\n\nuseSeconds\030\004 \001(\005\"K\n\016CGGetBossRanks"
    "\022\021\n\tchapterId\030\001 \001(\005\022\026\n\016childChapterId\030\002 "
    "\001(\005\022\016\n\006bossId\030\003 \001(\005\"e\n\016GCGetBossRanks\022\021\n"
    "\tchapterId\030\001 \001(\005\022\026\n\016childChapterId\030\002 \001(\005"
    "\022\016\n\006bossId\030\003 \001(\005\022\030\n\005ranks\030\004 \003(\0132\t.BossRa"
    "nk\"\200\001\n\016GCPKBossResult\022\016\n\006result\030\001 \001(\005\022\017\n"
    "\007starNum\030\002 \001(\005\022\022\n\nuseSeconds\030\004 \001(\005\022\021\n\tch"
    "apterId\030\005 \001(\005\022\026\n\016childChapterId\030\006 \001(\005\022\016\n"
    "\006bossId\030\007 \001(\005\"I\n\014CGGetPackRwd\022\021\n\tchapter"
    "Id\030\001 \001(\005\022\026\n\016childChapterId\030\002 \001(\005\022\016\n\006boss"
    "Id\030\003 \001(\005\"M\n\020CGExitPersonBoss\022\021\n\tchapterI"
    "d\030\001 \001(\005\022\026\n\016childChapterId\030\002 \001(\005\022\016\n\006bossI"
    "d\030\003 \001(\005\"-\n\013BossOpenSts\022\021\n\tchapterId\030\001 \001("
    "\005\022\013\n\003sts\030\002 \001(\005\"4\n\023GCPersonBossOpenSts\022\035\n"
    "\007stsList\030\001 \003(\0132\014.BossOpenSts\"$\n\017GCClearB"
    "ossData\022\021\n\tchapterId\030\001 \001(\005B\031\n\027com.mile.c"
    "ommon.message", 2573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DungeonMessage.proto", &protobuf_RegisterTypes);
  CGEnterInstancing::default_instance_ = new CGEnterInstancing();
  GCEnterInstancing::default_instance_ = new GCEnterInstancing();
  GCAllMenusDatas::default_instance_ = new GCAllMenusDatas();
  GCMenusData::default_instance_ = new GCMenusData();
  GCFastestPlayer::default_instance_ = new GCFastestPlayer();
  GCInstancingData::default_instance_ = new GCInstancingData();
  DungeonItemsRwd::default_instance_ = new DungeonItemsRwd();
  GCDungeonEnd::default_instance_ = new GCDungeonEnd();
  CGChangeSchedule::default_instance_ = new CGChangeSchedule();
  GCChangeSchedule::default_instance_ = new GCChangeSchedule();
  CGChangeGuideId::default_instance_ = new CGChangeGuideId();
  GCInstancingStart::default_instance_ = new GCInstancingStart();
  GCAskEnterDungeon::default_instance_ = new GCAskEnterDungeon();
  CGResponseEnterDungeon::default_instance_ = new CGResponseEnterDungeon();
  CGExitDungeon::default_instance_ = new CGExitDungeon();
  CGBuyDungeonNum::default_instance_ = new CGBuyDungeonNum();
  CGSweepDungeon::default_instance_ = new CGSweepDungeon();
  GCSweepDungeon::default_instance_ = new GCSweepDungeon();
  GCSweepTower::default_instance_ = new GCSweepTower();
  GCInstancingRwdSchedule::default_instance_ = new GCInstancingRwdSchedule();
  GCInstancingErrorMessage::default_instance_ = new GCInstancingErrorMessage();
  BossData::default_instance_ = new BossData();
  ChapterBossData::default_instance_ = new ChapterBossData();
  CGGetBossView::default_instance_ = new CGGetBossView();
  GCGetBossView::default_instance_ = new GCGetBossView();
  GCChangeBossStar::default_instance_ = new GCChangeBossStar();
  CGPkBoss::default_instance_ = new CGPkBoss();
  BossRank::default_instance_ = new BossRank();
  CGGetBossRanks::default_instance_ = new CGGetBossRanks();
  GCGetBossRanks::default_instance_ = new GCGetBossRanks();
  GCPKBossResult::default_instance_ = new GCPKBossResult();
  CGGetPackRwd::default_instance_ = new CGGetPackRwd();
  CGExitPersonBoss::default_instance_ = new CGExitPersonBoss();
  BossOpenSts::default_instance_ = new BossOpenSts();
  GCPersonBossOpenSts::default_instance_ = new GCPersonBossOpenSts();
  GCClearBossData::default_instance_ = new GCClearBossData();
  CGEnterInstancing::default_instance_->InitAsDefaultInstance();
  GCEnterInstancing::default_instance_->InitAsDefaultInstance();
  GCAllMenusDatas::default_instance_->InitAsDefaultInstance();
  GCMenusData::default_instance_->InitAsDefaultInstance();
  GCFastestPlayer::default_instance_->InitAsDefaultInstance();
  GCInstancingData::default_instance_->InitAsDefaultInstance();
  DungeonItemsRwd::default_instance_->InitAsDefaultInstance();
  GCDungeonEnd::default_instance_->InitAsDefaultInstance();
  CGChangeSchedule::default_instance_->InitAsDefaultInstance();
  GCChangeSchedule::default_instance_->InitAsDefaultInstance();
  CGChangeGuideId::default_instance_->InitAsDefaultInstance();
  GCInstancingStart::default_instance_->InitAsDefaultInstance();
  GCAskEnterDungeon::default_instance_->InitAsDefaultInstance();
  CGResponseEnterDungeon::default_instance_->InitAsDefaultInstance();
  CGExitDungeon::default_instance_->InitAsDefaultInstance();
  CGBuyDungeonNum::default_instance_->InitAsDefaultInstance();
  CGSweepDungeon::default_instance_->InitAsDefaultInstance();
  GCSweepDungeon::default_instance_->InitAsDefaultInstance();
  GCSweepTower::default_instance_->InitAsDefaultInstance();
  GCInstancingRwdSchedule::default_instance_->InitAsDefaultInstance();
  GCInstancingErrorMessage::default_instance_->InitAsDefaultInstance();
  BossData::default_instance_->InitAsDefaultInstance();
  ChapterBossData::default_instance_->InitAsDefaultInstance();
  CGGetBossView::default_instance_->InitAsDefaultInstance();
  GCGetBossView::default_instance_->InitAsDefaultInstance();
  GCChangeBossStar::default_instance_->InitAsDefaultInstance();
  CGPkBoss::default_instance_->InitAsDefaultInstance();
  BossRank::default_instance_->InitAsDefaultInstance();
  CGGetBossRanks::default_instance_->InitAsDefaultInstance();
  GCGetBossRanks::default_instance_->InitAsDefaultInstance();
  GCPKBossResult::default_instance_->InitAsDefaultInstance();
  CGGetPackRwd::default_instance_->InitAsDefaultInstance();
  CGExitPersonBoss::default_instance_->InitAsDefaultInstance();
  BossOpenSts::default_instance_->InitAsDefaultInstance();
  GCPersonBossOpenSts::default_instance_->InitAsDefaultInstance();
  GCClearBossData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DungeonMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DungeonMessage_2eproto {
  StaticDescriptorInitializer_DungeonMessage_2eproto() {
    protobuf_AddDesc_DungeonMessage_2eproto();
  }
} static_descriptor_initializer_DungeonMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEnterInstancing::kIdFieldNumber;
#endif  // !_MSC_VER

CGEnterInstancing::CGEnterInstancing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterInstancing)
}

void CGEnterInstancing::InitAsDefaultInstance() {
}

CGEnterInstancing::CGEnterInstancing(const CGEnterInstancing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterInstancing)
}

void CGEnterInstancing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterInstancing::~CGEnterInstancing() {
  // @@protoc_insertion_point(destructor:CGEnterInstancing)
  SharedDtor();
}

void CGEnterInstancing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterInstancing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterInstancing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterInstancing_descriptor_;
}

const CGEnterInstancing& CGEnterInstancing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGEnterInstancing* CGEnterInstancing::default_instance_ = NULL;

CGEnterInstancing* CGEnterInstancing::New() const {
  return new CGEnterInstancing;
}

void CGEnterInstancing::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterInstancing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterInstancing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterInstancing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterInstancing)
  return false;
#undef DO_
}

void CGEnterInstancing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterInstancing)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterInstancing)
}

::google::protobuf::uint8* CGEnterInstancing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterInstancing)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterInstancing)
  return target;
}

int CGEnterInstancing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterInstancing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterInstancing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterInstancing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterInstancing::MergeFrom(const CGEnterInstancing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterInstancing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterInstancing::CopyFrom(const CGEnterInstancing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterInstancing::IsInitialized() const {

  return true;
}

void CGEnterInstancing::Swap(CGEnterInstancing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterInstancing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterInstancing_descriptor_;
  metadata.reflection = CGEnterInstancing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterInstancing::kIdFieldNumber;
const int GCEnterInstancing::kEndTimeFieldNumber;
const int GCEnterInstancing::kGuideIdsFieldNumber;
#endif  // !_MSC_VER

GCEnterInstancing::GCEnterInstancing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterInstancing)
}

void GCEnterInstancing::InitAsDefaultInstance() {
}

GCEnterInstancing::GCEnterInstancing(const GCEnterInstancing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterInstancing)
}

void GCEnterInstancing::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterInstancing::~GCEnterInstancing() {
  // @@protoc_insertion_point(destructor:GCEnterInstancing)
  SharedDtor();
}

void GCEnterInstancing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterInstancing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterInstancing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterInstancing_descriptor_;
}

const GCEnterInstancing& GCEnterInstancing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCEnterInstancing* GCEnterInstancing::default_instance_ = NULL;

GCEnterInstancing* GCEnterInstancing::New() const {
  return new GCEnterInstancing;
}

void GCEnterInstancing::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
  }
  guideids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterInstancing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterInstancing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (tag == 16) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guideIds;
        break;
      }

      // repeated int32 guideIds = 3;
      case 3: {
        if (tag == 24) {
         parse_guideIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_guideids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guideids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guideIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterInstancing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterInstancing)
  return false;
#undef DO_
}

void GCEnterInstancing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterInstancing)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // repeated int32 guideIds = 3;
  for (int i = 0; i < this->guideids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->guideids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterInstancing)
}

::google::protobuf::uint8* GCEnterInstancing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterInstancing)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // repeated int32 guideIds = 3;
  for (int i = 0; i < this->guideids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->guideids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterInstancing)
  return target;
}

int GCEnterInstancing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  // repeated int32 guideIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->guideids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guideids(i));
    }
    total_size += 1 * this->guideids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterInstancing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterInstancing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterInstancing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterInstancing::MergeFrom(const GCEnterInstancing& from) {
  GOOGLE_CHECK_NE(&from, this);
  guideids_.MergeFrom(from.guideids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterInstancing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterInstancing::CopyFrom(const GCEnterInstancing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterInstancing::IsInitialized() const {

  return true;
}

void GCEnterInstancing::Swap(GCEnterInstancing* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(endtime_, other->endtime_);
    guideids_.Swap(&other->guideids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterInstancing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterInstancing_descriptor_;
  metadata.reflection = GCEnterInstancing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAllMenusDatas::kMenusFieldNumber;
#endif  // !_MSC_VER

GCAllMenusDatas::GCAllMenusDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAllMenusDatas)
}

void GCAllMenusDatas::InitAsDefaultInstance() {
}

GCAllMenusDatas::GCAllMenusDatas(const GCAllMenusDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAllMenusDatas)
}

void GCAllMenusDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAllMenusDatas::~GCAllMenusDatas() {
  // @@protoc_insertion_point(destructor:GCAllMenusDatas)
  SharedDtor();
}

void GCAllMenusDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAllMenusDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAllMenusDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAllMenusDatas_descriptor_;
}

const GCAllMenusDatas& GCAllMenusDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCAllMenusDatas* GCAllMenusDatas::default_instance_ = NULL;

GCAllMenusDatas* GCAllMenusDatas::New() const {
  return new GCAllMenusDatas;
}

void GCAllMenusDatas::Clear() {
  menus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAllMenusDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAllMenusDatas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GCMenusData menus = 1;
      case 1: {
        if (tag == 10) {
         parse_menus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_menus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_menus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAllMenusDatas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAllMenusDatas)
  return false;
#undef DO_
}

void GCAllMenusDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAllMenusDatas)
  // repeated .GCMenusData menus = 1;
  for (int i = 0; i < this->menus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->menus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAllMenusDatas)
}

::google::protobuf::uint8* GCAllMenusDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAllMenusDatas)
  // repeated .GCMenusData menus = 1;
  for (int i = 0; i < this->menus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->menus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAllMenusDatas)
  return target;
}

int GCAllMenusDatas::ByteSize() const {
  int total_size = 0;

  // repeated .GCMenusData menus = 1;
  total_size += 1 * this->menus_size();
  for (int i = 0; i < this->menus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->menus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAllMenusDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAllMenusDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAllMenusDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAllMenusDatas::MergeFrom(const GCAllMenusDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  menus_.MergeFrom(from.menus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAllMenusDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAllMenusDatas::CopyFrom(const GCAllMenusDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAllMenusDatas::IsInitialized() const {

  return true;
}

void GCAllMenusDatas::Swap(GCAllMenusDatas* other) {
  if (other != this) {
    menus_.Swap(&other->menus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAllMenusDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAllMenusDatas_descriptor_;
  metadata.reflection = GCAllMenusDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMenusData::kIdFieldNumber;
const int GCMenusData::kCurrentFieldNumber;
const int GCMenusData::kBuyNumFieldNumber;
const int GCMenusData::kInstancingDatasFieldNumber;
const int GCMenusData::kPlayersFieldNumber;
#endif  // !_MSC_VER

GCMenusData::GCMenusData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMenusData)
}

void GCMenusData::InitAsDefaultInstance() {
}

GCMenusData::GCMenusData(const GCMenusData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMenusData)
}

void GCMenusData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  current_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMenusData::~GCMenusData() {
  // @@protoc_insertion_point(destructor:GCMenusData)
  SharedDtor();
}

void GCMenusData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMenusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMenusData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMenusData_descriptor_;
}

const GCMenusData& GCMenusData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCMenusData* GCMenusData::default_instance_ = NULL;

GCMenusData* GCMenusData::New() const {
  return new GCMenusData;
}

void GCMenusData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMenusData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, current_);
    buynum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  instancingdatas_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMenusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMenusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }

      // optional int32 current = 2;
      case 2: {
        if (tag == 16) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_instancingDatas;
        break;
      }

      // repeated .GCInstancingData instancingDatas = 4;
      case 4: {
        if (tag == 34) {
         parse_instancingDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instancingdatas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_instancingDatas;
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .GCFastestPlayer players = 5;
      case 5: {
        if (tag == 42) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMenusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMenusData)
  return false;
#undef DO_
}

void GCMenusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMenusData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current(), output);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buynum(), output);
  }

  // repeated .GCInstancingData instancingDatas = 4;
  for (int i = 0; i < this->instancingdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->instancingdatas(i), output);
  }

  // repeated .GCFastestPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMenusData)
}

::google::protobuf::uint8* GCMenusData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMenusData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current(), target);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buynum(), target);
  }

  // repeated .GCInstancingData instancingDatas = 4;
  for (int i = 0; i < this->instancingdatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->instancingdatas(i), target);
  }

  // repeated .GCFastestPlayer players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMenusData)
  return target;
}

int GCMenusData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 current = 2;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

    // optional int32 buyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  // repeated .GCInstancingData instancingDatas = 4;
  total_size += 1 * this->instancingdatas_size();
  for (int i = 0; i < this->instancingdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instancingdatas(i));
  }

  // repeated .GCFastestPlayer players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMenusData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMenusData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMenusData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMenusData::MergeFrom(const GCMenusData& from) {
  GOOGLE_CHECK_NE(&from, this);
  instancingdatas_.MergeFrom(from.instancingdatas_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMenusData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMenusData::CopyFrom(const GCMenusData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMenusData::IsInitialized() const {

  return true;
}

void GCMenusData::Swap(GCMenusData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(current_, other->current_);
    std::swap(buynum_, other->buynum_);
    instancingdatas_.Swap(&other->instancingdatas_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMenusData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMenusData_descriptor_;
  metadata.reflection = GCMenusData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFastestPlayer::kIdFieldNumber;
const int GCFastestPlayer::kPassTimeFieldNumber;
const int GCFastestPlayer::kPassTimeNameFieldNumber;
#endif  // !_MSC_VER

GCFastestPlayer::GCFastestPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFastestPlayer)
}

void GCFastestPlayer::InitAsDefaultInstance() {
}

GCFastestPlayer::GCFastestPlayer(const GCFastestPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFastestPlayer)
}

void GCFastestPlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  passtime_ = 0;
  passtimename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFastestPlayer::~GCFastestPlayer() {
  // @@protoc_insertion_point(destructor:GCFastestPlayer)
  SharedDtor();
}

void GCFastestPlayer::SharedDtor() {
  if (passtimename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete passtimename_;
  }
  if (this != default_instance_) {
  }
}

void GCFastestPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFastestPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFastestPlayer_descriptor_;
}

const GCFastestPlayer& GCFastestPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCFastestPlayer* GCFastestPlayer::default_instance_ = NULL;

GCFastestPlayer* GCFastestPlayer::New() const {
  return new GCFastestPlayer;
}

void GCFastestPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFastestPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, passtime_);
    if (has_passtimename()) {
      if (passtimename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        passtimename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFastestPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFastestPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_passTime;
        break;
      }

      // optional int32 passTime = 2;
      case 2: {
        if (tag == 16) {
         parse_passTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passTimeName;
        break;
      }

      // optional string passTimeName = 3;
      case 3: {
        if (tag == 26) {
         parse_passTimeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passtimename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passtimename().data(), this->passtimename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "passtimename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFastestPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFastestPlayer)
  return false;
#undef DO_
}

void GCFastestPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFastestPlayer)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 passTime = 2;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->passtime(), output);
  }

  // optional string passTimeName = 3;
  if (has_passtimename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passtimename().data(), this->passtimename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passtimename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passtimename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFastestPlayer)
}

::google::protobuf::uint8* GCFastestPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFastestPlayer)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 passTime = 2;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->passtime(), target);
  }

  // optional string passTimeName = 3;
  if (has_passtimename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passtimename().data(), this->passtimename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "passtimename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passtimename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFastestPlayer)
  return target;
}

int GCFastestPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 passTime = 2;
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtime());
    }

    // optional string passTimeName = 3;
    if (has_passtimename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passtimename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFastestPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFastestPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFastestPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFastestPlayer::MergeFrom(const GCFastestPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_passtimename()) {
      set_passtimename(from.passtimename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFastestPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFastestPlayer::CopyFrom(const GCFastestPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFastestPlayer::IsInitialized() const {

  return true;
}

void GCFastestPlayer::Swap(GCFastestPlayer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(passtime_, other->passtime_);
    std::swap(passtimename_, other->passtimename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFastestPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFastestPlayer_descriptor_;
  metadata.reflection = GCFastestPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInstancingData::kIdFieldNumber;
const int GCInstancingData::kCurrNumFieldNumber;
const int GCInstancingData::kSelfPassTimeFieldNumber;
const int GCInstancingData::kCanEnterFieldNumber;
const int GCInstancingData::kCanSweepFieldNumber;
const int GCInstancingData::kIsPassFieldNumber;
#endif  // !_MSC_VER

GCInstancingData::GCInstancingData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInstancingData)
}

void GCInstancingData::InitAsDefaultInstance() {
}

GCInstancingData::GCInstancingData(const GCInstancingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInstancingData)
}

void GCInstancingData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  currnum_ = 0;
  selfpasstime_ = 0;
  canenter_ = 0;
  cansweep_ = 0;
  ispass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInstancingData::~GCInstancingData() {
  // @@protoc_insertion_point(destructor:GCInstancingData)
  SharedDtor();
}

void GCInstancingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCInstancingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInstancingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInstancingData_descriptor_;
}

const GCInstancingData& GCInstancingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCInstancingData* GCInstancingData::default_instance_ = NULL;

GCInstancingData* GCInstancingData::New() const {
  return new GCInstancingData;
}

void GCInstancingData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInstancingData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, ispass_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInstancingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInstancingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currNum;
        break;
      }

      // optional int32 currNum = 2;
      case 2: {
        if (tag == 16) {
         parse_currNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currnum_)));
          set_has_currnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_selfPassTime;
        break;
      }

      // optional int32 selfPassTime = 3;
      case 3: {
        if (tag == 24) {
         parse_selfPassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfpasstime_)));
          set_has_selfpasstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_canEnter;
        break;
      }

      // optional int32 canEnter = 4;
      case 4: {
        if (tag == 32) {
         parse_canEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canenter_)));
          set_has_canenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_canSweep;
        break;
      }

      // optional int32 canSweep = 5;
      case 5: {
        if (tag == 40) {
         parse_canSweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cansweep_)));
          set_has_cansweep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isPass;
        break;
      }

      // optional int32 isPass = 6;
      case 6: {
        if (tag == 48) {
         parse_isPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ispass_)));
          set_has_ispass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInstancingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInstancingData)
  return false;
#undef DO_
}

void GCInstancingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInstancingData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 currNum = 2;
  if (has_currnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currnum(), output);
  }

  // optional int32 selfPassTime = 3;
  if (has_selfpasstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfpasstime(), output);
  }

  // optional int32 canEnter = 4;
  if (has_canenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->canenter(), output);
  }

  // optional int32 canSweep = 5;
  if (has_cansweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cansweep(), output);
  }

  // optional int32 isPass = 6;
  if (has_ispass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ispass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInstancingData)
}

::google::protobuf::uint8* GCInstancingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInstancingData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 currNum = 2;
  if (has_currnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currnum(), target);
  }

  // optional int32 selfPassTime = 3;
  if (has_selfpasstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfpasstime(), target);
  }

  // optional int32 canEnter = 4;
  if (has_canenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->canenter(), target);
  }

  // optional int32 canSweep = 5;
  if (has_cansweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cansweep(), target);
  }

  // optional int32 isPass = 6;
  if (has_ispass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ispass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInstancingData)
  return target;
}

int GCInstancingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 currNum = 2;
    if (has_currnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currnum());
    }

    // optional int32 selfPassTime = 3;
    if (has_selfpasstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfpasstime());
    }

    // optional int32 canEnter = 4;
    if (has_canenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canenter());
    }

    // optional int32 canSweep = 5;
    if (has_cansweep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cansweep());
    }

    // optional int32 isPass = 6;
    if (has_ispass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ispass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInstancingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInstancingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInstancingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInstancingData::MergeFrom(const GCInstancingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currnum()) {
      set_currnum(from.currnum());
    }
    if (from.has_selfpasstime()) {
      set_selfpasstime(from.selfpasstime());
    }
    if (from.has_canenter()) {
      set_canenter(from.canenter());
    }
    if (from.has_cansweep()) {
      set_cansweep(from.cansweep());
    }
    if (from.has_ispass()) {
      set_ispass(from.ispass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInstancingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInstancingData::CopyFrom(const GCInstancingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInstancingData::IsInitialized() const {

  return true;
}

void GCInstancingData::Swap(GCInstancingData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(currnum_, other->currnum_);
    std::swap(selfpasstime_, other->selfpasstime_);
    std::swap(canenter_, other->canenter_);
    std::swap(cansweep_, other->cansweep_);
    std::swap(ispass_, other->ispass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInstancingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInstancingData_descriptor_;
  metadata.reflection = GCInstancingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DungeonItemsRwd::kItemIdFieldNumber;
const int DungeonItemsRwd::kNumFieldNumber;
const int DungeonItemsRwd::kBindFieldNumber;
#endif  // !_MSC_VER

DungeonItemsRwd::DungeonItemsRwd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DungeonItemsRwd)
}

void DungeonItemsRwd::InitAsDefaultInstance() {
}

DungeonItemsRwd::DungeonItemsRwd(const DungeonItemsRwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DungeonItemsRwd)
}

void DungeonItemsRwd::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DungeonItemsRwd::~DungeonItemsRwd() {
  // @@protoc_insertion_point(destructor:DungeonItemsRwd)
  SharedDtor();
}

void DungeonItemsRwd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DungeonItemsRwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonItemsRwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DungeonItemsRwd_descriptor_;
}

const DungeonItemsRwd& DungeonItemsRwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

DungeonItemsRwd* DungeonItemsRwd::default_instance_ = NULL;

DungeonItemsRwd* DungeonItemsRwd::New() const {
  return new DungeonItemsRwd;
}

void DungeonItemsRwd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DungeonItemsRwd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, bind_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DungeonItemsRwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DungeonItemsRwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (tag == 24) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DungeonItemsRwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DungeonItemsRwd)
  return false;
#undef DO_
}

void DungeonItemsRwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DungeonItemsRwd)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DungeonItemsRwd)
}

::google::protobuf::uint8* DungeonItemsRwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DungeonItemsRwd)
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DungeonItemsRwd)
  return target;
}

int DungeonItemsRwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonItemsRwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DungeonItemsRwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DungeonItemsRwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DungeonItemsRwd::MergeFrom(const DungeonItemsRwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DungeonItemsRwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonItemsRwd::CopyFrom(const DungeonItemsRwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonItemsRwd::IsInitialized() const {

  return true;
}

void DungeonItemsRwd::Swap(DungeonItemsRwd* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DungeonItemsRwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DungeonItemsRwd_descriptor_;
  metadata.reflection = DungeonItemsRwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDungeonEnd::kIdFieldNumber;
const int GCDungeonEnd::kStsFieldNumber;
const int GCDungeonEnd::kRwdsFieldNumber;
const int GCDungeonEnd::kMenusFieldNumber;
#endif  // !_MSC_VER

GCDungeonEnd::GCDungeonEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDungeonEnd)
}

void GCDungeonEnd::InitAsDefaultInstance() {
}

GCDungeonEnd::GCDungeonEnd(const GCDungeonEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDungeonEnd)
}

void GCDungeonEnd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  sts_ = 0;
  menus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDungeonEnd::~GCDungeonEnd() {
  // @@protoc_insertion_point(destructor:GCDungeonEnd)
  SharedDtor();
}

void GCDungeonEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDungeonEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDungeonEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDungeonEnd_descriptor_;
}

const GCDungeonEnd& GCDungeonEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCDungeonEnd* GCDungeonEnd::default_instance_ = NULL;

GCDungeonEnd* GCDungeonEnd::New() const {
  return new GCDungeonEnd;
}

void GCDungeonEnd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCDungeonEnd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, sts_);
    menus_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rwds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDungeonEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDungeonEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sts;
        break;
      }

      // optional int32 sts = 2;
      case 2: {
        if (tag == 16) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rwds;
        break;
      }

      // repeated .DungeonItemsRwd rwds = 3;
      case 3: {
        if (tag == 26) {
         parse_rwds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rwds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rwds;
        if (input->ExpectTag(32)) goto parse_menus;
        break;
      }

      // optional int32 menus = 4;
      case 4: {
        if (tag == 32) {
         parse_menus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menus_)));
          set_has_menus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDungeonEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDungeonEnd)
  return false;
#undef DO_
}

void GCDungeonEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDungeonEnd)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sts(), output);
  }

  // repeated .DungeonItemsRwd rwds = 3;
  for (int i = 0; i < this->rwds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rwds(i), output);
  }

  // optional int32 menus = 4;
  if (has_menus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->menus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDungeonEnd)
}

::google::protobuf::uint8* GCDungeonEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDungeonEnd)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sts(), target);
  }

  // repeated .DungeonItemsRwd rwds = 3;
  for (int i = 0; i < this->rwds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rwds(i), target);
  }

  // optional int32 menus = 4;
  if (has_menus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->menus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDungeonEnd)
  return target;
}

int GCDungeonEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sts = 2;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

    // optional int32 menus = 4;
    if (has_menus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menus());
    }

  }
  // repeated .DungeonItemsRwd rwds = 3;
  total_size += 1 * this->rwds_size();
  for (int i = 0; i < this->rwds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rwds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDungeonEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDungeonEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDungeonEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDungeonEnd::MergeFrom(const GCDungeonEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rwds_.MergeFrom(from.rwds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
    if (from.has_menus()) {
      set_menus(from.menus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDungeonEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDungeonEnd::CopyFrom(const GCDungeonEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDungeonEnd::IsInitialized() const {

  return true;
}

void GCDungeonEnd::Swap(GCDungeonEnd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sts_, other->sts_);
    rwds_.Swap(&other->rwds_);
    std::swap(menus_, other->menus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDungeonEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDungeonEnd_descriptor_;
  metadata.reflection = GCDungeonEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChangeSchedule::kScheduleFieldNumber;
#endif  // !_MSC_VER

CGChangeSchedule::CGChangeSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChangeSchedule)
}

void CGChangeSchedule::InitAsDefaultInstance() {
}

CGChangeSchedule::CGChangeSchedule(const CGChangeSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChangeSchedule)
}

void CGChangeSchedule::SharedCtor() {
  _cached_size_ = 0;
  schedule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChangeSchedule::~CGChangeSchedule() {
  // @@protoc_insertion_point(destructor:CGChangeSchedule)
  SharedDtor();
}

void CGChangeSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChangeSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChangeSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChangeSchedule_descriptor_;
}

const CGChangeSchedule& CGChangeSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGChangeSchedule* CGChangeSchedule::default_instance_ = NULL;

CGChangeSchedule* CGChangeSchedule::New() const {
  return new CGChangeSchedule;
}

void CGChangeSchedule::Clear() {
  schedule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChangeSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChangeSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 schedule = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schedule_)));
          set_has_schedule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChangeSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChangeSchedule)
  return false;
#undef DO_
}

void CGChangeSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChangeSchedule)
  // optional int32 schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->schedule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChangeSchedule)
}

::google::protobuf::uint8* CGChangeSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChangeSchedule)
  // optional int32 schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->schedule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChangeSchedule)
  return target;
}

int CGChangeSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 schedule = 1;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schedule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChangeSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChangeSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChangeSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChangeSchedule::MergeFrom(const CGChangeSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedule()) {
      set_schedule(from.schedule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChangeSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChangeSchedule::CopyFrom(const CGChangeSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChangeSchedule::IsInitialized() const {

  return true;
}

void CGChangeSchedule::Swap(CGChangeSchedule* other) {
  if (other != this) {
    std::swap(schedule_, other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChangeSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChangeSchedule_descriptor_;
  metadata.reflection = CGChangeSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeSchedule::kScheduleFieldNumber;
const int GCChangeSchedule::kChangeTimeFieldNumber;
#endif  // !_MSC_VER

GCChangeSchedule::GCChangeSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeSchedule)
}

void GCChangeSchedule::InitAsDefaultInstance() {
}

GCChangeSchedule::GCChangeSchedule(const GCChangeSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeSchedule)
}

void GCChangeSchedule::SharedCtor() {
  _cached_size_ = 0;
  schedule_ = 0;
  changetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeSchedule::~GCChangeSchedule() {
  // @@protoc_insertion_point(destructor:GCChangeSchedule)
  SharedDtor();
}

void GCChangeSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChangeSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeSchedule_descriptor_;
}

const GCChangeSchedule& GCChangeSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCChangeSchedule* GCChangeSchedule::default_instance_ = NULL;

GCChangeSchedule* GCChangeSchedule::New() const {
  return new GCChangeSchedule;
}

void GCChangeSchedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChangeSchedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(changetime_, schedule_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 schedule = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &schedule_)));
          set_has_schedule();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_changeTime;
        break;
      }

      // optional int64 changeTime = 2;
      case 2: {
        if (tag == 16) {
         parse_changeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changetime_)));
          set_has_changetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeSchedule)
  return false;
#undef DO_
}

void GCChangeSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeSchedule)
  // optional int32 schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->schedule(), output);
  }

  // optional int64 changeTime = 2;
  if (has_changetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->changetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeSchedule)
}

::google::protobuf::uint8* GCChangeSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeSchedule)
  // optional int32 schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->schedule(), target);
  }

  // optional int64 changeTime = 2;
  if (has_changetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->changetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeSchedule)
  return target;
}

int GCChangeSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 schedule = 1;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->schedule());
    }

    // optional int64 changeTime = 2;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeSchedule::MergeFrom(const GCChangeSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedule()) {
      set_schedule(from.schedule());
    }
    if (from.has_changetime()) {
      set_changetime(from.changetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeSchedule::CopyFrom(const GCChangeSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeSchedule::IsInitialized() const {

  return true;
}

void GCChangeSchedule::Swap(GCChangeSchedule* other) {
  if (other != this) {
    std::swap(schedule_, other->schedule_);
    std::swap(changetime_, other->changetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeSchedule_descriptor_;
  metadata.reflection = GCChangeSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChangeGuideId::kGuideIdFieldNumber;
#endif  // !_MSC_VER

CGChangeGuideId::CGChangeGuideId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChangeGuideId)
}

void CGChangeGuideId::InitAsDefaultInstance() {
}

CGChangeGuideId::CGChangeGuideId(const CGChangeGuideId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChangeGuideId)
}

void CGChangeGuideId::SharedCtor() {
  _cached_size_ = 0;
  guideid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChangeGuideId::~CGChangeGuideId() {
  // @@protoc_insertion_point(destructor:CGChangeGuideId)
  SharedDtor();
}

void CGChangeGuideId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChangeGuideId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChangeGuideId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChangeGuideId_descriptor_;
}

const CGChangeGuideId& CGChangeGuideId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGChangeGuideId* CGChangeGuideId::default_instance_ = NULL;

CGChangeGuideId* CGChangeGuideId::New() const {
  return new CGChangeGuideId;
}

void CGChangeGuideId::Clear() {
  guideid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChangeGuideId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChangeGuideId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guideId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guideid_)));
          set_has_guideid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChangeGuideId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChangeGuideId)
  return false;
#undef DO_
}

void CGChangeGuideId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChangeGuideId)
  // optional int32 guideId = 1;
  if (has_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guideid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChangeGuideId)
}

::google::protobuf::uint8* CGChangeGuideId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChangeGuideId)
  // optional int32 guideId = 1;
  if (has_guideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guideid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChangeGuideId)
  return target;
}

int CGChangeGuideId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guideId = 1;
    if (has_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guideid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChangeGuideId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChangeGuideId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChangeGuideId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChangeGuideId::MergeFrom(const CGChangeGuideId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guideid()) {
      set_guideid(from.guideid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChangeGuideId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChangeGuideId::CopyFrom(const CGChangeGuideId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChangeGuideId::IsInitialized() const {

  return true;
}

void CGChangeGuideId::Swap(CGChangeGuideId* other) {
  if (other != this) {
    std::swap(guideid_, other->guideid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChangeGuideId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChangeGuideId_descriptor_;
  metadata.reflection = CGChangeGuideId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInstancingStart::kIdFieldNumber;
const int GCInstancingStart::kTimeFieldNumber;
#endif  // !_MSC_VER

GCInstancingStart::GCInstancingStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInstancingStart)
}

void GCInstancingStart::InitAsDefaultInstance() {
}

GCInstancingStart::GCInstancingStart(const GCInstancingStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInstancingStart)
}

void GCInstancingStart::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInstancingStart::~GCInstancingStart() {
  // @@protoc_insertion_point(destructor:GCInstancingStart)
  SharedDtor();
}

void GCInstancingStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCInstancingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInstancingStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInstancingStart_descriptor_;
}

const GCInstancingStart& GCInstancingStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCInstancingStart* GCInstancingStart::default_instance_ = NULL;

GCInstancingStart* GCInstancingStart::New() const {
  return new GCInstancingStart;
}

void GCInstancingStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInstancingStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInstancingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInstancingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInstancingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInstancingStart)
  return false;
#undef DO_
}

void GCInstancingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInstancingStart)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInstancingStart)
}

::google::protobuf::uint8* GCInstancingStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInstancingStart)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInstancingStart)
  return target;
}

int GCInstancingStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInstancingStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInstancingStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInstancingStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInstancingStart::MergeFrom(const GCInstancingStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInstancingStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInstancingStart::CopyFrom(const GCInstancingStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInstancingStart::IsInitialized() const {

  return true;
}

void GCInstancingStart::Swap(GCInstancingStart* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInstancingStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInstancingStart_descriptor_;
  metadata.reflection = GCInstancingStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAskEnterDungeon::kIdFieldNumber;
const int GCAskEnterDungeon::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GCAskEnterDungeon::GCAskEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAskEnterDungeon)
}

void GCAskEnterDungeon::InitAsDefaultInstance() {
}

GCAskEnterDungeon::GCAskEnterDungeon(const GCAskEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAskEnterDungeon)
}

void GCAskEnterDungeon::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAskEnterDungeon::~GCAskEnterDungeon() {
  // @@protoc_insertion_point(destructor:GCAskEnterDungeon)
  SharedDtor();
}

void GCAskEnterDungeon::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GCAskEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAskEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAskEnterDungeon_descriptor_;
}

const GCAskEnterDungeon& GCAskEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCAskEnterDungeon* GCAskEnterDungeon::default_instance_ = NULL;

GCAskEnterDungeon* GCAskEnterDungeon::New() const {
  return new GCAskEnterDungeon;
}

void GCAskEnterDungeon::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAskEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAskEnterDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAskEnterDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAskEnterDungeon)
  return false;
#undef DO_
}

void GCAskEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAskEnterDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAskEnterDungeon)
}

::google::protobuf::uint8* GCAskEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAskEnterDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAskEnterDungeon)
  return target;
}

int GCAskEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAskEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAskEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAskEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAskEnterDungeon::MergeFrom(const GCAskEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAskEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAskEnterDungeon::CopyFrom(const GCAskEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAskEnterDungeon::IsInitialized() const {

  return true;
}

void GCAskEnterDungeon::Swap(GCAskEnterDungeon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAskEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAskEnterDungeon_descriptor_;
  metadata.reflection = GCAskEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGResponseEnterDungeon::kIdFieldNumber;
const int CGResponseEnterDungeon::kStsFieldNumber;
#endif  // !_MSC_VER

CGResponseEnterDungeon::CGResponseEnterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGResponseEnterDungeon)
}

void CGResponseEnterDungeon::InitAsDefaultInstance() {
}

CGResponseEnterDungeon::CGResponseEnterDungeon(const CGResponseEnterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGResponseEnterDungeon)
}

void CGResponseEnterDungeon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGResponseEnterDungeon::~CGResponseEnterDungeon() {
  // @@protoc_insertion_point(destructor:CGResponseEnterDungeon)
  SharedDtor();
}

void CGResponseEnterDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGResponseEnterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGResponseEnterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGResponseEnterDungeon_descriptor_;
}

const CGResponseEnterDungeon& CGResponseEnterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGResponseEnterDungeon* CGResponseEnterDungeon::default_instance_ = NULL;

CGResponseEnterDungeon* CGResponseEnterDungeon::New() const {
  return new CGResponseEnterDungeon;
}

void CGResponseEnterDungeon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGResponseEnterDungeon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGResponseEnterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGResponseEnterDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sts;
        break;
      }

      // optional int32 sts = 2;
      case 2: {
        if (tag == 16) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGResponseEnterDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGResponseEnterDungeon)
  return false;
#undef DO_
}

void CGResponseEnterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGResponseEnterDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGResponseEnterDungeon)
}

::google::protobuf::uint8* CGResponseEnterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGResponseEnterDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGResponseEnterDungeon)
  return target;
}

int CGResponseEnterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 sts = 2;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGResponseEnterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGResponseEnterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGResponseEnterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGResponseEnterDungeon::MergeFrom(const CGResponseEnterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGResponseEnterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGResponseEnterDungeon::CopyFrom(const CGResponseEnterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGResponseEnterDungeon::IsInitialized() const {

  return true;
}

void CGResponseEnterDungeon::Swap(CGResponseEnterDungeon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGResponseEnterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGResponseEnterDungeon_descriptor_;
  metadata.reflection = CGResponseEnterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGExitDungeon::kIdFieldNumber;
#endif  // !_MSC_VER

CGExitDungeon::CGExitDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExitDungeon)
}

void CGExitDungeon::InitAsDefaultInstance() {
}

CGExitDungeon::CGExitDungeon(const CGExitDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExitDungeon)
}

void CGExitDungeon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExitDungeon::~CGExitDungeon() {
  // @@protoc_insertion_point(destructor:CGExitDungeon)
  SharedDtor();
}

void CGExitDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGExitDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExitDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExitDungeon_descriptor_;
}

const CGExitDungeon& CGExitDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGExitDungeon* CGExitDungeon::default_instance_ = NULL;

CGExitDungeon* CGExitDungeon::New() const {
  return new CGExitDungeon;
}

void CGExitDungeon::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExitDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExitDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGExitDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExitDungeon)
  return false;
#undef DO_
}

void CGExitDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExitDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExitDungeon)
}

::google::protobuf::uint8* CGExitDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExitDungeon)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExitDungeon)
  return target;
}

int CGExitDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExitDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExitDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExitDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExitDungeon::MergeFrom(const CGExitDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExitDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExitDungeon::CopyFrom(const CGExitDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExitDungeon::IsInitialized() const {

  return true;
}

void CGExitDungeon::Swap(CGExitDungeon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExitDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExitDungeon_descriptor_;
  metadata.reflection = CGExitDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuyDungeonNum::kMenusFieldNumber;
const int CGBuyDungeonNum::kBuyNumFieldNumber;
#endif  // !_MSC_VER

CGBuyDungeonNum::CGBuyDungeonNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuyDungeonNum)
}

void CGBuyDungeonNum::InitAsDefaultInstance() {
}

CGBuyDungeonNum::CGBuyDungeonNum(const CGBuyDungeonNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuyDungeonNum)
}

void CGBuyDungeonNum::SharedCtor() {
  _cached_size_ = 0;
  menus_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuyDungeonNum::~CGBuyDungeonNum() {
  // @@protoc_insertion_point(destructor:CGBuyDungeonNum)
  SharedDtor();
}

void CGBuyDungeonNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuyDungeonNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuyDungeonNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuyDungeonNum_descriptor_;
}

const CGBuyDungeonNum& CGBuyDungeonNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGBuyDungeonNum* CGBuyDungeonNum::default_instance_ = NULL;

CGBuyDungeonNum* CGBuyDungeonNum::New() const {
  return new CGBuyDungeonNum;
}

void CGBuyDungeonNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBuyDungeonNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(menus_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuyDungeonNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuyDungeonNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 menus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menus_)));
          set_has_menus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuyDungeonNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuyDungeonNum)
  return false;
#undef DO_
}

void CGBuyDungeonNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuyDungeonNum)
  // optional int32 menus = 1;
  if (has_menus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->menus(), output);
  }

  // optional int32 buyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuyDungeonNum)
}

::google::protobuf::uint8* CGBuyDungeonNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuyDungeonNum)
  // optional int32 menus = 1;
  if (has_menus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->menus(), target);
  }

  // optional int32 buyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuyDungeonNum)
  return target;
}

int CGBuyDungeonNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 menus = 1;
    if (has_menus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menus());
    }

    // optional int32 buyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuyDungeonNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuyDungeonNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuyDungeonNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuyDungeonNum::MergeFrom(const CGBuyDungeonNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_menus()) {
      set_menus(from.menus());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuyDungeonNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuyDungeonNum::CopyFrom(const CGBuyDungeonNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuyDungeonNum::IsInitialized() const {

  return true;
}

void CGBuyDungeonNum::Swap(CGBuyDungeonNum* other) {
  if (other != this) {
    std::swap(menus_, other->menus_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuyDungeonNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuyDungeonNum_descriptor_;
  metadata.reflection = CGBuyDungeonNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSweepDungeon::kSweepTypeFieldNumber;
const int CGSweepDungeon::kIdFieldNumber;
#endif  // !_MSC_VER

CGSweepDungeon::CGSweepDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSweepDungeon)
}

void CGSweepDungeon::InitAsDefaultInstance() {
}

CGSweepDungeon::CGSweepDungeon(const CGSweepDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSweepDungeon)
}

void CGSweepDungeon::SharedCtor() {
  _cached_size_ = 0;
  sweeptype_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSweepDungeon::~CGSweepDungeon() {
  // @@protoc_insertion_point(destructor:CGSweepDungeon)
  SharedDtor();
}

void CGSweepDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSweepDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSweepDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSweepDungeon_descriptor_;
}

const CGSweepDungeon& CGSweepDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGSweepDungeon* CGSweepDungeon::default_instance_ = NULL;

CGSweepDungeon* CGSweepDungeon::New() const {
  return new CGSweepDungeon;
}

void CGSweepDungeon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSweepDungeon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sweeptype_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSweepDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSweepDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sweepType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptype_)));
          set_has_sweeptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSweepDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSweepDungeon)
  return false;
#undef DO_
}

void CGSweepDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSweepDungeon)
  // optional int32 sweepType = 1;
  if (has_sweeptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sweeptype(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSweepDungeon)
}

::google::protobuf::uint8* CGSweepDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSweepDungeon)
  // optional int32 sweepType = 1;
  if (has_sweeptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sweeptype(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSweepDungeon)
  return target;
}

int CGSweepDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sweepType = 1;
    if (has_sweeptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptype());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSweepDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSweepDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSweepDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSweepDungeon::MergeFrom(const CGSweepDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sweeptype()) {
      set_sweeptype(from.sweeptype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSweepDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSweepDungeon::CopyFrom(const CGSweepDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSweepDungeon::IsInitialized() const {

  return true;
}

void CGSweepDungeon::Swap(CGSweepDungeon* other) {
  if (other != this) {
    std::swap(sweeptype_, other->sweeptype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSweepDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSweepDungeon_descriptor_;
  metadata.reflection = CGSweepDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSweepDungeon::kRwdsFieldNumber;
#endif  // !_MSC_VER

GCSweepDungeon::GCSweepDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSweepDungeon)
}

void GCSweepDungeon::InitAsDefaultInstance() {
}

GCSweepDungeon::GCSweepDungeon(const GCSweepDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSweepDungeon)
}

void GCSweepDungeon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSweepDungeon::~GCSweepDungeon() {
  // @@protoc_insertion_point(destructor:GCSweepDungeon)
  SharedDtor();
}

void GCSweepDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSweepDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSweepDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSweepDungeon_descriptor_;
}

const GCSweepDungeon& GCSweepDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCSweepDungeon* GCSweepDungeon::default_instance_ = NULL;

GCSweepDungeon* GCSweepDungeon::New() const {
  return new GCSweepDungeon;
}

void GCSweepDungeon::Clear() {
  rwds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSweepDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSweepDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DungeonItemsRwd rwds = 1;
      case 1: {
        if (tag == 10) {
         parse_rwds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rwds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rwds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSweepDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSweepDungeon)
  return false;
#undef DO_
}

void GCSweepDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSweepDungeon)
  // repeated .DungeonItemsRwd rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rwds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSweepDungeon)
}

::google::protobuf::uint8* GCSweepDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSweepDungeon)
  // repeated .DungeonItemsRwd rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rwds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSweepDungeon)
  return target;
}

int GCSweepDungeon::ByteSize() const {
  int total_size = 0;

  // repeated .DungeonItemsRwd rwds = 1;
  total_size += 1 * this->rwds_size();
  for (int i = 0; i < this->rwds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rwds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSweepDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSweepDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSweepDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSweepDungeon::MergeFrom(const GCSweepDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  rwds_.MergeFrom(from.rwds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSweepDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSweepDungeon::CopyFrom(const GCSweepDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSweepDungeon::IsInitialized() const {

  return true;
}

void GCSweepDungeon::Swap(GCSweepDungeon* other) {
  if (other != this) {
    rwds_.Swap(&other->rwds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSweepDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSweepDungeon_descriptor_;
  metadata.reflection = GCSweepDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSweepTower::kRwdsFieldNumber;
#endif  // !_MSC_VER

GCSweepTower::GCSweepTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSweepTower)
}

void GCSweepTower::InitAsDefaultInstance() {
}

GCSweepTower::GCSweepTower(const GCSweepTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSweepTower)
}

void GCSweepTower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSweepTower::~GCSweepTower() {
  // @@protoc_insertion_point(destructor:GCSweepTower)
  SharedDtor();
}

void GCSweepTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSweepTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSweepTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSweepTower_descriptor_;
}

const GCSweepTower& GCSweepTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCSweepTower* GCSweepTower::default_instance_ = NULL;

GCSweepTower* GCSweepTower::New() const {
  return new GCSweepTower;
}

void GCSweepTower::Clear() {
  rwds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSweepTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSweepTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GCDungeonEnd rwds = 1;
      case 1: {
        if (tag == 10) {
         parse_rwds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rwds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rwds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSweepTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSweepTower)
  return false;
#undef DO_
}

void GCSweepTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSweepTower)
  // repeated .GCDungeonEnd rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rwds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSweepTower)
}

::google::protobuf::uint8* GCSweepTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSweepTower)
  // repeated .GCDungeonEnd rwds = 1;
  for (int i = 0; i < this->rwds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rwds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSweepTower)
  return target;
}

int GCSweepTower::ByteSize() const {
  int total_size = 0;

  // repeated .GCDungeonEnd rwds = 1;
  total_size += 1 * this->rwds_size();
  for (int i = 0; i < this->rwds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rwds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSweepTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSweepTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSweepTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSweepTower::MergeFrom(const GCSweepTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  rwds_.MergeFrom(from.rwds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSweepTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSweepTower::CopyFrom(const GCSweepTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSweepTower::IsInitialized() const {

  return true;
}

void GCSweepTower::Swap(GCSweepTower* other) {
  if (other != this) {
    rwds_.Swap(&other->rwds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSweepTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSweepTower_descriptor_;
  metadata.reflection = GCSweepTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInstancingRwdSchedule::kIdFieldNumber;
const int GCInstancingRwdSchedule::kKillNumFieldNumber;
const int GCInstancingRwdSchedule::kExpFieldNumber;
const int GCInstancingRwdSchedule::kBoNumFieldNumber;
#endif  // !_MSC_VER

GCInstancingRwdSchedule::GCInstancingRwdSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInstancingRwdSchedule)
}

void GCInstancingRwdSchedule::InitAsDefaultInstance() {
}

GCInstancingRwdSchedule::GCInstancingRwdSchedule(const GCInstancingRwdSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInstancingRwdSchedule)
}

void GCInstancingRwdSchedule::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  killnum_ = 0;
  exp_ = 0;
  bonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInstancingRwdSchedule::~GCInstancingRwdSchedule() {
  // @@protoc_insertion_point(destructor:GCInstancingRwdSchedule)
  SharedDtor();
}

void GCInstancingRwdSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCInstancingRwdSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInstancingRwdSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInstancingRwdSchedule_descriptor_;
}

const GCInstancingRwdSchedule& GCInstancingRwdSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCInstancingRwdSchedule* GCInstancingRwdSchedule::default_instance_ = NULL;

GCInstancingRwdSchedule* GCInstancingRwdSchedule::New() const {
  return new GCInstancingRwdSchedule;
}

void GCInstancingRwdSchedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInstancingRwdSchedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, bonum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInstancingRwdSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInstancingRwdSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killNum;
        break;
      }

      // optional int32 killNum = 2;
      case 2: {
        if (tag == 16) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_boNum;
        break;
      }

      // optional int32 boNum = 4;
      case 4: {
        if (tag == 32) {
         parse_boNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonum_)));
          set_has_bonum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInstancingRwdSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInstancingRwdSchedule)
  return false;
#undef DO_
}

void GCInstancingRwdSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInstancingRwdSchedule)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 killNum = 2;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killnum(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 boNum = 4;
  if (has_bonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInstancingRwdSchedule)
}

::google::protobuf::uint8* GCInstancingRwdSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInstancingRwdSchedule)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 killNum = 2;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killnum(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 boNum = 4;
  if (has_bonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInstancingRwdSchedule)
  return target;
}

int GCInstancingRwdSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 killNum = 2;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 boNum = 4;
    if (has_bonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInstancingRwdSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInstancingRwdSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInstancingRwdSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInstancingRwdSchedule::MergeFrom(const GCInstancingRwdSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_bonum()) {
      set_bonum(from.bonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInstancingRwdSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInstancingRwdSchedule::CopyFrom(const GCInstancingRwdSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInstancingRwdSchedule::IsInitialized() const {

  return true;
}

void GCInstancingRwdSchedule::Swap(GCInstancingRwdSchedule* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(killnum_, other->killnum_);
    std::swap(exp_, other->exp_);
    std::swap(bonum_, other->bonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInstancingRwdSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInstancingRwdSchedule_descriptor_;
  metadata.reflection = GCInstancingRwdSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCInstancingErrorMessage::kTypeFieldNumber;
const int GCInstancingErrorMessage::kCodeFieldNumber;
const int GCInstancingErrorMessage::kNameFieldNumber;
const int GCInstancingErrorMessage::kParamFieldNumber;
const int GCInstancingErrorMessage::kParamTypeFieldNumber;
#endif  // !_MSC_VER

GCInstancingErrorMessage::GCInstancingErrorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCInstancingErrorMessage)
}

void GCInstancingErrorMessage::InitAsDefaultInstance() {
}

GCInstancingErrorMessage::GCInstancingErrorMessage(const GCInstancingErrorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCInstancingErrorMessage)
}

void GCInstancingErrorMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_ = 0;
  paramtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCInstancingErrorMessage::~GCInstancingErrorMessage() {
  // @@protoc_insertion_point(destructor:GCInstancingErrorMessage)
  SharedDtor();
}

void GCInstancingErrorMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GCInstancingErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCInstancingErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCInstancingErrorMessage_descriptor_;
}

const GCInstancingErrorMessage& GCInstancingErrorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCInstancingErrorMessage* GCInstancingErrorMessage::default_instance_ = NULL;

GCInstancingErrorMessage* GCInstancingErrorMessage::New() const {
  return new GCInstancingErrorMessage;
}

void GCInstancingErrorMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCInstancingErrorMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, code_);
    ZR_(param_, paramtype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCInstancingErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCInstancingErrorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }

      // optional int32 param = 4;
      case 4: {
        if (tag == 32) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_paramType;
        break;
      }

      // optional int32 paramType = 5;
      case 5: {
        if (tag == 40) {
         parse_paramType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramtype_)));
          set_has_paramtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCInstancingErrorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCInstancingErrorMessage)
  return false;
#undef DO_
}

void GCInstancingErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCInstancingErrorMessage)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 param = 4;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->param(), output);
  }

  // optional int32 paramType = 5;
  if (has_paramtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->paramtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCInstancingErrorMessage)
}

::google::protobuf::uint8* GCInstancingErrorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCInstancingErrorMessage)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 param = 4;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->param(), target);
  }

  // optional int32 paramType = 5;
  if (has_paramtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->paramtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCInstancingErrorMessage)
  return target;
}

int GCInstancingErrorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 param = 4;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // optional int32 paramType = 5;
    if (has_paramtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCInstancingErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCInstancingErrorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCInstancingErrorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCInstancingErrorMessage::MergeFrom(const GCInstancingErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_paramtype()) {
      set_paramtype(from.paramtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCInstancingErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCInstancingErrorMessage::CopyFrom(const GCInstancingErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCInstancingErrorMessage::IsInitialized() const {

  return true;
}

void GCInstancingErrorMessage::Swap(GCInstancingErrorMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(name_, other->name_);
    std::swap(param_, other->param_);
    std::swap(paramtype_, other->paramtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCInstancingErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCInstancingErrorMessage_descriptor_;
  metadata.reflection = GCInstancingErrorMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossData::kIdFieldNumber;
const int BossData::kStarNumFieldNumber;
const int BossData::kDatePkFieldNumber;
const int BossData::kUnLockBossStsFieldNumber;
#endif  // !_MSC_VER

BossData::BossData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BossData)
}

void BossData::InitAsDefaultInstance() {
}

BossData::BossData(const BossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BossData)
}

void BossData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  starnum_ = 0;
  datepk_ = 0;
  unlockbosssts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossData::~BossData() {
  // @@protoc_insertion_point(destructor:BossData)
  SharedDtor();
}

void BossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossData_descriptor_;
}

const BossData& BossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

BossData* BossData::default_instance_ = NULL;

BossData* BossData::New() const {
  return new BossData;
}

void BossData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, unlockbosssts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BossData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starNum;
        break;
      }

      // optional int32 starNum = 2;
      case 2: {
        if (tag == 16) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_datePk;
        break;
      }

      // optional int32 datePk = 3;
      case 3: {
        if (tag == 24) {
         parse_datePk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datepk_)));
          set_has_datepk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unLockBossSts;
        break;
      }

      // optional int32 unLockBossSts = 4;
      case 4: {
        if (tag == 32) {
         parse_unLockBossSts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockbosssts_)));
          set_has_unlockbosssts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BossData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BossData)
  return false;
#undef DO_
}

void BossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BossData)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starnum(), output);
  }

  // optional int32 datePk = 3;
  if (has_datepk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->datepk(), output);
  }

  // optional int32 unLockBossSts = 4;
  if (has_unlockbosssts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unlockbosssts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BossData)
}

::google::protobuf::uint8* BossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BossData)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starnum(), target);
  }

  // optional int32 datePk = 3;
  if (has_datepk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->datepk(), target);
  }

  // optional int32 unLockBossSts = 4;
  if (has_unlockbosssts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unlockbosssts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BossData)
  return target;
}

int BossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 starNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starnum());
    }

    // optional int32 datePk = 3;
    if (has_datepk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datepk());
    }

    // optional int32 unLockBossSts = 4;
    if (has_unlockbosssts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockbosssts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossData::MergeFrom(const BossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_datepk()) {
      set_datepk(from.datepk());
    }
    if (from.has_unlockbosssts()) {
      set_unlockbosssts(from.unlockbosssts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossData::CopyFrom(const BossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossData::IsInitialized() const {

  return true;
}

void BossData::Swap(BossData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starnum_, other->starnum_);
    std::swap(datepk_, other->datepk_);
    std::swap(unlockbosssts_, other->unlockbosssts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossData_descriptor_;
  metadata.reflection = BossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterBossData::kBossListFieldNumber;
const int ChapterBossData::kPackStarNumFieldNumber;
const int ChapterBossData::kChildChapterIdFieldNumber;
const int ChapterBossData::kPackRwdStatusFieldNumber;
#endif  // !_MSC_VER

ChapterBossData::ChapterBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChapterBossData)
}

void ChapterBossData::InitAsDefaultInstance() {
}

ChapterBossData::ChapterBossData(const ChapterBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChapterBossData)
}

void ChapterBossData::SharedCtor() {
  _cached_size_ = 0;
  packstarnum_ = 0;
  childchapterid_ = 0;
  packrwdstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterBossData::~ChapterBossData() {
  // @@protoc_insertion_point(destructor:ChapterBossData)
  SharedDtor();
}

void ChapterBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterBossData_descriptor_;
}

const ChapterBossData& ChapterBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

ChapterBossData* ChapterBossData::default_instance_ = NULL;

ChapterBossData* ChapterBossData::New() const {
  return new ChapterBossData;
}

void ChapterBossData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChapterBossData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(packstarnum_, packrwdstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bosslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChapterBossData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BossData bossList = 1;
      case 1: {
        if (tag == 10) {
         parse_bossList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bossList;
        if (input->ExpectTag(16)) goto parse_packStarNum;
        break;
      }

      // optional int32 packStarNum = 2;
      case 2: {
        if (tag == 16) {
         parse_packStarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packstarnum_)));
          set_has_packstarnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 3;
      case 3: {
        if (tag == 24) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packRwdStatus;
        break;
      }

      // optional int32 packRwdStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_packRwdStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packrwdstatus_)));
          set_has_packrwdstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChapterBossData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChapterBossData)
  return false;
#undef DO_
}

void ChapterBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChapterBossData)
  // repeated .BossData bossList = 1;
  for (int i = 0; i < this->bosslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bosslist(i), output);
  }

  // optional int32 packStarNum = 2;
  if (has_packstarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packstarnum(), output);
  }

  // optional int32 childChapterId = 3;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->childchapterid(), output);
  }

  // optional int32 packRwdStatus = 4;
  if (has_packrwdstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->packrwdstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChapterBossData)
}

::google::protobuf::uint8* ChapterBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChapterBossData)
  // repeated .BossData bossList = 1;
  for (int i = 0; i < this->bosslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bosslist(i), target);
  }

  // optional int32 packStarNum = 2;
  if (has_packstarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packstarnum(), target);
  }

  // optional int32 childChapterId = 3;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->childchapterid(), target);
  }

  // optional int32 packRwdStatus = 4;
  if (has_packrwdstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->packrwdstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChapterBossData)
  return target;
}

int ChapterBossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 packStarNum = 2;
    if (has_packstarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packstarnum());
    }

    // optional int32 childChapterId = 3;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 packRwdStatus = 4;
    if (has_packrwdstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packrwdstatus());
    }

  }
  // repeated .BossData bossList = 1;
  total_size += 1 * this->bosslist_size();
  for (int i = 0; i < this->bosslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterBossData::MergeFrom(const ChapterBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosslist_.MergeFrom(from.bosslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_packstarnum()) {
      set_packstarnum(from.packstarnum());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_packrwdstatus()) {
      set_packrwdstatus(from.packrwdstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterBossData::CopyFrom(const ChapterBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterBossData::IsInitialized() const {

  return true;
}

void ChapterBossData::Swap(ChapterBossData* other) {
  if (other != this) {
    bosslist_.Swap(&other->bosslist_);
    std::swap(packstarnum_, other->packstarnum_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(packrwdstatus_, other->packrwdstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterBossData_descriptor_;
  metadata.reflection = ChapterBossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetBossView::kChapterIdFieldNumber;
#endif  // !_MSC_VER

CGGetBossView::CGGetBossView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetBossView)
}

void CGGetBossView::InitAsDefaultInstance() {
}

CGGetBossView::CGGetBossView(const CGGetBossView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetBossView)
}

void CGGetBossView::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetBossView::~CGGetBossView() {
  // @@protoc_insertion_point(destructor:CGGetBossView)
  SharedDtor();
}

void CGGetBossView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetBossView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetBossView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetBossView_descriptor_;
}

const CGGetBossView& CGGetBossView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGGetBossView* CGGetBossView::default_instance_ = NULL;

CGGetBossView* CGGetBossView::New() const {
  return new CGGetBossView;
}

void CGGetBossView::Clear() {
  chapterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetBossView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetBossView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetBossView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetBossView)
  return false;
#undef DO_
}

void CGGetBossView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetBossView)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetBossView)
}

::google::protobuf::uint8* CGGetBossView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetBossView)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetBossView)
  return target;
}

int CGGetBossView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetBossView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetBossView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetBossView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetBossView::MergeFrom(const CGGetBossView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetBossView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetBossView::CopyFrom(const CGGetBossView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetBossView::IsInitialized() const {

  return true;
}

void CGGetBossView::Swap(CGGetBossView* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetBossView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetBossView_descriptor_;
  metadata.reflection = CGGetBossView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetBossView::kChapterIdFieldNumber;
const int GCGetBossView::kChapterListFieldNumber;
#endif  // !_MSC_VER

GCGetBossView::GCGetBossView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetBossView)
}

void GCGetBossView::InitAsDefaultInstance() {
}

GCGetBossView::GCGetBossView(const GCGetBossView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetBossView)
}

void GCGetBossView::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetBossView::~GCGetBossView() {
  // @@protoc_insertion_point(destructor:GCGetBossView)
  SharedDtor();
}

void GCGetBossView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetBossView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetBossView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetBossView_descriptor_;
}

const GCGetBossView& GCGetBossView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCGetBossView* GCGetBossView::default_instance_ = NULL;

GCGetBossView* GCGetBossView::New() const {
  return new GCGetBossView;
}

void GCGetBossView::Clear() {
  chapterid_ = 0;
  chapterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetBossView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetBossView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chapterList;
        break;
      }

      // repeated .ChapterBossData chapterList = 2;
      case 2: {
        if (tag == 18) {
         parse_chapterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapterlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chapterList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetBossView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetBossView)
  return false;
#undef DO_
}

void GCGetBossView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetBossView)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // repeated .ChapterBossData chapterList = 2;
  for (int i = 0; i < this->chapterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chapterlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetBossView)
}

::google::protobuf::uint8* GCGetBossView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetBossView)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // repeated .ChapterBossData chapterList = 2;
  for (int i = 0; i < this->chapterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chapterlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetBossView)
  return target;
}

int GCGetBossView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

  }
  // repeated .ChapterBossData chapterList = 2;
  total_size += 1 * this->chapterlist_size();
  for (int i = 0; i < this->chapterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapterlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetBossView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetBossView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetBossView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetBossView::MergeFrom(const GCGetBossView& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapterlist_.MergeFrom(from.chapterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetBossView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetBossView::CopyFrom(const GCGetBossView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetBossView::IsInitialized() const {

  return true;
}

void GCGetBossView::Swap(GCGetBossView* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    chapterlist_.Swap(&other->chapterlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetBossView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetBossView_descriptor_;
  metadata.reflection = GCGetBossView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeBossStar::kBossListFieldNumber;
const int GCChangeBossStar::kChapterIdFieldNumber;
const int GCChangeBossStar::kChildChapterIdFieldNumber;
const int GCChangeBossStar::kPackStartNumFieldNumber;
const int GCChangeBossStar::kRewardStsFieldNumber;
#endif  // !_MSC_VER

GCChangeBossStar::GCChangeBossStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeBossStar)
}

void GCChangeBossStar::InitAsDefaultInstance() {
}

GCChangeBossStar::GCChangeBossStar(const GCChangeBossStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeBossStar)
}

void GCChangeBossStar::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  packstartnum_ = 0;
  rewardsts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeBossStar::~GCChangeBossStar() {
  // @@protoc_insertion_point(destructor:GCChangeBossStar)
  SharedDtor();
}

void GCChangeBossStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChangeBossStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeBossStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeBossStar_descriptor_;
}

const GCChangeBossStar& GCChangeBossStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCChangeBossStar* GCChangeBossStar::default_instance_ = NULL;

GCChangeBossStar* GCChangeBossStar::New() const {
  return new GCChangeBossStar;
}

void GCChangeBossStar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChangeBossStar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, rewardsts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bosslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeBossStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeBossStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BossData bossList = 1;
      case 1: {
        if (tag == 10) {
         parse_bossList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bossList;
        if (input->ExpectTag(16)) goto parse_chapterId;
        break;
      }

      // optional int32 chapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_chapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 3;
      case 3: {
        if (tag == 24) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_packStartNum;
        break;
      }

      // optional int32 packStartNum = 4;
      case 4: {
        if (tag == 32) {
         parse_packStartNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packstartnum_)));
          set_has_packstartnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_rewardSts;
        break;
      }

      // optional int32 rewardSts = 5;
      case 5: {
        if (tag == 40) {
         parse_rewardSts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardsts_)));
          set_has_rewardsts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeBossStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeBossStar)
  return false;
#undef DO_
}

void GCChangeBossStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeBossStar)
  // repeated .BossData bossList = 1;
  for (int i = 0; i < this->bosslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bosslist(i), output);
  }

  // optional int32 chapterId = 2;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapterid(), output);
  }

  // optional int32 childChapterId = 3;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->childchapterid(), output);
  }

  // optional int32 packStartNum = 4;
  if (has_packstartnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->packstartnum(), output);
  }

  // optional int32 rewardSts = 5;
  if (has_rewardsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rewardsts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeBossStar)
}

::google::protobuf::uint8* GCChangeBossStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeBossStar)
  // repeated .BossData bossList = 1;
  for (int i = 0; i < this->bosslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bosslist(i), target);
  }

  // optional int32 chapterId = 2;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapterid(), target);
  }

  // optional int32 childChapterId = 3;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->childchapterid(), target);
  }

  // optional int32 packStartNum = 4;
  if (has_packstartnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->packstartnum(), target);
  }

  // optional int32 rewardSts = 5;
  if (has_rewardsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rewardsts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeBossStar)
  return target;
}

int GCChangeBossStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 chapterId = 2;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 3;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 packStartNum = 4;
    if (has_packstartnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packstartnum());
    }

    // optional int32 rewardSts = 5;
    if (has_rewardsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardsts());
    }

  }
  // repeated .BossData bossList = 1;
  total_size += 1 * this->bosslist_size();
  for (int i = 0; i < this->bosslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeBossStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeBossStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeBossStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeBossStar::MergeFrom(const GCChangeBossStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosslist_.MergeFrom(from.bosslist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_packstartnum()) {
      set_packstartnum(from.packstartnum());
    }
    if (from.has_rewardsts()) {
      set_rewardsts(from.rewardsts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeBossStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeBossStar::CopyFrom(const GCChangeBossStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeBossStar::IsInitialized() const {

  return true;
}

void GCChangeBossStar::Swap(GCChangeBossStar* other) {
  if (other != this) {
    bosslist_.Swap(&other->bosslist_);
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(packstartnum_, other->packstartnum_);
    std::swap(rewardsts_, other->rewardsts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeBossStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeBossStar_descriptor_;
  metadata.reflection = GCChangeBossStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPkBoss::kChapterIdFieldNumber;
const int CGPkBoss::kChildChapterIdFieldNumber;
const int CGPkBoss::kBossIdFieldNumber;
#endif  // !_MSC_VER

CGPkBoss::CGPkBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPkBoss)
}

void CGPkBoss::InitAsDefaultInstance() {
}

CGPkBoss::CGPkBoss(const CGPkBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPkBoss)
}

void CGPkBoss::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPkBoss::~CGPkBoss() {
  // @@protoc_insertion_point(destructor:CGPkBoss)
  SharedDtor();
}

void CGPkBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPkBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPkBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPkBoss_descriptor_;
}

const CGPkBoss& CGPkBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGPkBoss* CGPkBoss::default_instance_ = NULL;

CGPkBoss* CGPkBoss::New() const {
  return new CGPkBoss;
}

void CGPkBoss::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPkBoss*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPkBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPkBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 3;
      case 3: {
        if (tag == 24) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPkBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPkBoss)
  return false;
#undef DO_
}

void CGPkBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPkBoss)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childchapterid(), output);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPkBoss)
}

::google::protobuf::uint8* CGPkBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPkBoss)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->childchapterid(), target);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPkBoss)
  return target;
}

int CGPkBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 2;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPkBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPkBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPkBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPkBoss::MergeFrom(const CGPkBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPkBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPkBoss::CopyFrom(const CGPkBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPkBoss::IsInitialized() const {

  return true;
}

void CGPkBoss::Swap(CGPkBoss* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPkBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPkBoss_descriptor_;
  metadata.reflection = CGPkBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossRank::kRankIdFieldNumber;
const int BossRank::kSidFieldNumber;
const int BossRank::kPlayerNameFieldNumber;
const int BossRank::kUseSecondsFieldNumber;
#endif  // !_MSC_VER

BossRank::BossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BossRank)
}

void BossRank::InitAsDefaultInstance() {
}

BossRank::BossRank(const BossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BossRank)
}

void BossRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rankid_ = 0;
  sid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  useseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRank::~BossRank() {
  // @@protoc_insertion_point(destructor:BossRank)
  SharedDtor();
}

void BossRank::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void BossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossRank_descriptor_;
}

const BossRank& BossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

BossRank* BossRank::default_instance_ = NULL;

BossRank* BossRank::New() const {
  return new BossRank;
}

void BossRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sid_, useseconds_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BossRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int64 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_useSeconds;
        break;
      }

      // optional int32 useSeconds = 4;
      case 4: {
        if (tag == 32) {
         parse_useSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useseconds_)));
          set_has_useseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BossRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BossRank)
  return false;
#undef DO_
}

void BossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BossRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }

  // optional int64 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sid(), output);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  // optional int32 useSeconds = 4;
  if (has_useseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->useseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BossRank)
}

::google::protobuf::uint8* BossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BossRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }

  // optional int64 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sid(), target);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // optional int32 useSeconds = 4;
  if (has_useseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->useseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BossRank)
  return target;
}

int BossRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int64 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sid());
    }

    // optional string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 useSeconds = 4;
    if (has_useseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossRank::MergeFrom(const BossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_useseconds()) {
      set_useseconds(from.useseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossRank::CopyFrom(const BossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRank::IsInitialized() const {

  return true;
}

void BossRank::Swap(BossRank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(sid_, other->sid_);
    std::swap(playername_, other->playername_);
    std::swap(useseconds_, other->useseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossRank_descriptor_;
  metadata.reflection = BossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetBossRanks::kChapterIdFieldNumber;
const int CGGetBossRanks::kChildChapterIdFieldNumber;
const int CGGetBossRanks::kBossIdFieldNumber;
#endif  // !_MSC_VER

CGGetBossRanks::CGGetBossRanks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetBossRanks)
}

void CGGetBossRanks::InitAsDefaultInstance() {
}

CGGetBossRanks::CGGetBossRanks(const CGGetBossRanks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetBossRanks)
}

void CGGetBossRanks::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetBossRanks::~CGGetBossRanks() {
  // @@protoc_insertion_point(destructor:CGGetBossRanks)
  SharedDtor();
}

void CGGetBossRanks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetBossRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetBossRanks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetBossRanks_descriptor_;
}

const CGGetBossRanks& CGGetBossRanks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGGetBossRanks* CGGetBossRanks::default_instance_ = NULL;

CGGetBossRanks* CGGetBossRanks::New() const {
  return new CGGetBossRanks;
}

void CGGetBossRanks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetBossRanks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetBossRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetBossRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 3;
      case 3: {
        if (tag == 24) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetBossRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetBossRanks)
  return false;
#undef DO_
}

void CGGetBossRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetBossRanks)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childchapterid(), output);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetBossRanks)
}

::google::protobuf::uint8* CGGetBossRanks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetBossRanks)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->childchapterid(), target);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetBossRanks)
  return target;
}

int CGGetBossRanks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 2;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetBossRanks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetBossRanks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetBossRanks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetBossRanks::MergeFrom(const CGGetBossRanks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetBossRanks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetBossRanks::CopyFrom(const CGGetBossRanks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetBossRanks::IsInitialized() const {

  return true;
}

void CGGetBossRanks::Swap(CGGetBossRanks* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetBossRanks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetBossRanks_descriptor_;
  metadata.reflection = CGGetBossRanks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetBossRanks::kChapterIdFieldNumber;
const int GCGetBossRanks::kChildChapterIdFieldNumber;
const int GCGetBossRanks::kBossIdFieldNumber;
const int GCGetBossRanks::kRanksFieldNumber;
#endif  // !_MSC_VER

GCGetBossRanks::GCGetBossRanks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetBossRanks)
}

void GCGetBossRanks::InitAsDefaultInstance() {
}

GCGetBossRanks::GCGetBossRanks(const GCGetBossRanks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetBossRanks)
}

void GCGetBossRanks::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetBossRanks::~GCGetBossRanks() {
  // @@protoc_insertion_point(destructor:GCGetBossRanks)
  SharedDtor();
}

void GCGetBossRanks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetBossRanks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetBossRanks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetBossRanks_descriptor_;
}

const GCGetBossRanks& GCGetBossRanks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCGetBossRanks* GCGetBossRanks::default_instance_ = NULL;

GCGetBossRanks* GCGetBossRanks::New() const {
  return new GCGetBossRanks;
}

void GCGetBossRanks::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetBossRanks*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(chapterid_, childchapterid_);
    bossid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetBossRanks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetBossRanks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 3;
      case 3: {
        if (tag == 24) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ranks;
        break;
      }

      // repeated .BossRank ranks = 4;
      case 4: {
        if (tag == 34) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetBossRanks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetBossRanks)
  return false;
#undef DO_
}

void GCGetBossRanks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetBossRanks)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childchapterid(), output);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  // repeated .BossRank ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetBossRanks)
}

::google::protobuf::uint8* GCGetBossRanks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetBossRanks)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->childchapterid(), target);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  // repeated .BossRank ranks = 4;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetBossRanks)
  return target;
}

int GCGetBossRanks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 2;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  // repeated .BossRank ranks = 4;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetBossRanks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetBossRanks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetBossRanks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetBossRanks::MergeFrom(const GCGetBossRanks& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetBossRanks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetBossRanks::CopyFrom(const GCGetBossRanks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetBossRanks::IsInitialized() const {

  return true;
}

void GCGetBossRanks::Swap(GCGetBossRanks* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetBossRanks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetBossRanks_descriptor_;
  metadata.reflection = GCGetBossRanks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPKBossResult::kResultFieldNumber;
const int GCPKBossResult::kStarNumFieldNumber;
const int GCPKBossResult::kUseSecondsFieldNumber;
const int GCPKBossResult::kChapterIdFieldNumber;
const int GCPKBossResult::kChildChapterIdFieldNumber;
const int GCPKBossResult::kBossIdFieldNumber;
#endif  // !_MSC_VER

GCPKBossResult::GCPKBossResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPKBossResult)
}

void GCPKBossResult::InitAsDefaultInstance() {
}

GCPKBossResult::GCPKBossResult(const GCPKBossResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPKBossResult)
}

void GCPKBossResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  starnum_ = 0;
  useseconds_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPKBossResult::~GCPKBossResult() {
  // @@protoc_insertion_point(destructor:GCPKBossResult)
  SharedDtor();
}

void GCPKBossResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPKBossResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPKBossResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPKBossResult_descriptor_;
}

const GCPKBossResult& GCPKBossResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCPKBossResult* GCPKBossResult::default_instance_ = NULL;

GCPKBossResult* GCPKBossResult::New() const {
  return new GCPKBossResult;
}

void GCPKBossResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPKBossResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(result_, bossid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPKBossResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPKBossResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_starNum;
        break;
      }

      // optional int32 starNum = 2;
      case 2: {
        if (tag == 16) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_useSeconds;
        break;
      }

      // optional int32 useSeconds = 4;
      case 4: {
        if (tag == 32) {
         parse_useSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useseconds_)));
          set_has_useseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chapterId;
        break;
      }

      // optional int32 chapterId = 5;
      case 5: {
        if (tag == 40) {
         parse_chapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 6;
      case 6: {
        if (tag == 48) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 7;
      case 7: {
        if (tag == 56) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPKBossResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPKBossResult)
  return false;
#undef DO_
}

void GCPKBossResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPKBossResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starnum(), output);
  }

  // optional int32 useSeconds = 4;
  if (has_useseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->useseconds(), output);
  }

  // optional int32 chapterId = 5;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chapterid(), output);
  }

  // optional int32 childChapterId = 6;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->childchapterid(), output);
  }

  // optional int32 bossId = 7;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPKBossResult)
}

::google::protobuf::uint8* GCPKBossResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPKBossResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 starNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starnum(), target);
  }

  // optional int32 useSeconds = 4;
  if (has_useseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->useseconds(), target);
  }

  // optional int32 chapterId = 5;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chapterid(), target);
  }

  // optional int32 childChapterId = 6;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->childchapterid(), target);
  }

  // optional int32 bossId = 7;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPKBossResult)
  return target;
}

int GCPKBossResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 starNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starnum());
    }

    // optional int32 useSeconds = 4;
    if (has_useseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useseconds());
    }

    // optional int32 chapterId = 5;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 6;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 7;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPKBossResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPKBossResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPKBossResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPKBossResult::MergeFrom(const GCPKBossResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_useseconds()) {
      set_useseconds(from.useseconds());
    }
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPKBossResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPKBossResult::CopyFrom(const GCPKBossResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPKBossResult::IsInitialized() const {

  return true;
}

void GCPKBossResult::Swap(GCPKBossResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(starnum_, other->starnum_);
    std::swap(useseconds_, other->useseconds_);
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPKBossResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPKBossResult_descriptor_;
  metadata.reflection = GCPKBossResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetPackRwd::kChapterIdFieldNumber;
const int CGGetPackRwd::kChildChapterIdFieldNumber;
const int CGGetPackRwd::kBossIdFieldNumber;
#endif  // !_MSC_VER

CGGetPackRwd::CGGetPackRwd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPackRwd)
}

void CGGetPackRwd::InitAsDefaultInstance() {
}

CGGetPackRwd::CGGetPackRwd(const CGGetPackRwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPackRwd)
}

void CGGetPackRwd::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPackRwd::~CGGetPackRwd() {
  // @@protoc_insertion_point(destructor:CGGetPackRwd)
  SharedDtor();
}

void CGGetPackRwd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPackRwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPackRwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPackRwd_descriptor_;
}

const CGGetPackRwd& CGGetPackRwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGGetPackRwd* CGGetPackRwd::default_instance_ = NULL;

CGGetPackRwd* CGGetPackRwd::New() const {
  return new CGGetPackRwd;
}

void CGGetPackRwd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetPackRwd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPackRwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPackRwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 3;
      case 3: {
        if (tag == 24) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPackRwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPackRwd)
  return false;
#undef DO_
}

void CGGetPackRwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPackRwd)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childchapterid(), output);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPackRwd)
}

::google::protobuf::uint8* CGGetPackRwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPackRwd)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->childchapterid(), target);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPackRwd)
  return target;
}

int CGGetPackRwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 2;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPackRwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPackRwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPackRwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPackRwd::MergeFrom(const CGGetPackRwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPackRwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPackRwd::CopyFrom(const CGGetPackRwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPackRwd::IsInitialized() const {

  return true;
}

void CGGetPackRwd::Swap(CGGetPackRwd* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPackRwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPackRwd_descriptor_;
  metadata.reflection = CGGetPackRwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGExitPersonBoss::kChapterIdFieldNumber;
const int CGExitPersonBoss::kChildChapterIdFieldNumber;
const int CGExitPersonBoss::kBossIdFieldNumber;
#endif  // !_MSC_VER

CGExitPersonBoss::CGExitPersonBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExitPersonBoss)
}

void CGExitPersonBoss::InitAsDefaultInstance() {
}

CGExitPersonBoss::CGExitPersonBoss(const CGExitPersonBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExitPersonBoss)
}

void CGExitPersonBoss::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  childchapterid_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExitPersonBoss::~CGExitPersonBoss() {
  // @@protoc_insertion_point(destructor:CGExitPersonBoss)
  SharedDtor();
}

void CGExitPersonBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGExitPersonBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExitPersonBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExitPersonBoss_descriptor_;
}

const CGExitPersonBoss& CGExitPersonBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

CGExitPersonBoss* CGExitPersonBoss::default_instance_ = NULL;

CGExitPersonBoss* CGExitPersonBoss::New() const {
  return new CGExitPersonBoss;
}

void CGExitPersonBoss::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGExitPersonBoss*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExitPersonBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExitPersonBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_childChapterId;
        break;
      }

      // optional int32 childChapterId = 2;
      case 2: {
        if (tag == 16) {
         parse_childChapterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &childchapterid_)));
          set_has_childchapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional int32 bossId = 3;
      case 3: {
        if (tag == 24) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGExitPersonBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExitPersonBoss)
  return false;
#undef DO_
}

void CGExitPersonBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExitPersonBoss)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->childchapterid(), output);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExitPersonBoss)
}

::google::protobuf::uint8* CGExitPersonBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExitPersonBoss)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 childChapterId = 2;
  if (has_childchapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->childchapterid(), target);
  }

  // optional int32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExitPersonBoss)
  return target;
}

int CGExitPersonBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 childChapterId = 2;
    if (has_childchapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->childchapterid());
    }

    // optional int32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExitPersonBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExitPersonBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExitPersonBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExitPersonBoss::MergeFrom(const CGExitPersonBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_childchapterid()) {
      set_childchapterid(from.childchapterid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExitPersonBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExitPersonBoss::CopyFrom(const CGExitPersonBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExitPersonBoss::IsInitialized() const {

  return true;
}

void CGExitPersonBoss::Swap(CGExitPersonBoss* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(childchapterid_, other->childchapterid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExitPersonBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExitPersonBoss_descriptor_;
  metadata.reflection = CGExitPersonBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossOpenSts::kChapterIdFieldNumber;
const int BossOpenSts::kStsFieldNumber;
#endif  // !_MSC_VER

BossOpenSts::BossOpenSts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BossOpenSts)
}

void BossOpenSts::InitAsDefaultInstance() {
}

BossOpenSts::BossOpenSts(const BossOpenSts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BossOpenSts)
}

void BossOpenSts::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossOpenSts::~BossOpenSts() {
  // @@protoc_insertion_point(destructor:BossOpenSts)
  SharedDtor();
}

void BossOpenSts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossOpenSts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossOpenSts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossOpenSts_descriptor_;
}

const BossOpenSts& BossOpenSts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

BossOpenSts* BossOpenSts::default_instance_ = NULL;

BossOpenSts* BossOpenSts::New() const {
  return new BossOpenSts;
}

void BossOpenSts::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossOpenSts*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chapterid_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossOpenSts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BossOpenSts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sts;
        break;
      }

      // optional int32 sts = 2;
      case 2: {
        if (tag == 16) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BossOpenSts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BossOpenSts)
  return false;
#undef DO_
}

void BossOpenSts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BossOpenSts)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BossOpenSts)
}

::google::protobuf::uint8* BossOpenSts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BossOpenSts)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  // optional int32 sts = 2;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BossOpenSts)
  return target;
}

int BossOpenSts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

    // optional int32 sts = 2;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossOpenSts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossOpenSts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossOpenSts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossOpenSts::MergeFrom(const BossOpenSts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossOpenSts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossOpenSts::CopyFrom(const BossOpenSts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossOpenSts::IsInitialized() const {

  return true;
}

void BossOpenSts::Swap(BossOpenSts* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossOpenSts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossOpenSts_descriptor_;
  metadata.reflection = BossOpenSts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPersonBossOpenSts::kStsListFieldNumber;
#endif  // !_MSC_VER

GCPersonBossOpenSts::GCPersonBossOpenSts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPersonBossOpenSts)
}

void GCPersonBossOpenSts::InitAsDefaultInstance() {
}

GCPersonBossOpenSts::GCPersonBossOpenSts(const GCPersonBossOpenSts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPersonBossOpenSts)
}

void GCPersonBossOpenSts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPersonBossOpenSts::~GCPersonBossOpenSts() {
  // @@protoc_insertion_point(destructor:GCPersonBossOpenSts)
  SharedDtor();
}

void GCPersonBossOpenSts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPersonBossOpenSts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPersonBossOpenSts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPersonBossOpenSts_descriptor_;
}

const GCPersonBossOpenSts& GCPersonBossOpenSts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCPersonBossOpenSts* GCPersonBossOpenSts::default_instance_ = NULL;

GCPersonBossOpenSts* GCPersonBossOpenSts::New() const {
  return new GCPersonBossOpenSts;
}

void GCPersonBossOpenSts::Clear() {
  stslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPersonBossOpenSts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPersonBossOpenSts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BossOpenSts stsList = 1;
      case 1: {
        if (tag == 10) {
         parse_stsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stsList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPersonBossOpenSts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPersonBossOpenSts)
  return false;
#undef DO_
}

void GCPersonBossOpenSts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPersonBossOpenSts)
  // repeated .BossOpenSts stsList = 1;
  for (int i = 0; i < this->stslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPersonBossOpenSts)
}

::google::protobuf::uint8* GCPersonBossOpenSts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPersonBossOpenSts)
  // repeated .BossOpenSts stsList = 1;
  for (int i = 0; i < this->stslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPersonBossOpenSts)
  return target;
}

int GCPersonBossOpenSts::ByteSize() const {
  int total_size = 0;

  // repeated .BossOpenSts stsList = 1;
  total_size += 1 * this->stslist_size();
  for (int i = 0; i < this->stslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPersonBossOpenSts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPersonBossOpenSts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPersonBossOpenSts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPersonBossOpenSts::MergeFrom(const GCPersonBossOpenSts& from) {
  GOOGLE_CHECK_NE(&from, this);
  stslist_.MergeFrom(from.stslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPersonBossOpenSts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPersonBossOpenSts::CopyFrom(const GCPersonBossOpenSts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPersonBossOpenSts::IsInitialized() const {

  return true;
}

void GCPersonBossOpenSts::Swap(GCPersonBossOpenSts* other) {
  if (other != this) {
    stslist_.Swap(&other->stslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPersonBossOpenSts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPersonBossOpenSts_descriptor_;
  metadata.reflection = GCPersonBossOpenSts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCClearBossData::kChapterIdFieldNumber;
#endif  // !_MSC_VER

GCClearBossData::GCClearBossData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCClearBossData)
}

void GCClearBossData::InitAsDefaultInstance() {
}

GCClearBossData::GCClearBossData(const GCClearBossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCClearBossData)
}

void GCClearBossData::SharedCtor() {
  _cached_size_ = 0;
  chapterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCClearBossData::~GCClearBossData() {
  // @@protoc_insertion_point(destructor:GCClearBossData)
  SharedDtor();
}

void GCClearBossData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCClearBossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCClearBossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCClearBossData_descriptor_;
}

const GCClearBossData& GCClearBossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DungeonMessage_2eproto();
  return *default_instance_;
}

GCClearBossData* GCClearBossData::default_instance_ = NULL;

GCClearBossData* GCClearBossData::New() const {
  return new GCClearBossData;
}

void GCClearBossData::Clear() {
  chapterid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCClearBossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCClearBossData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chapterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapterid_)));
          set_has_chapterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCClearBossData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCClearBossData)
  return false;
#undef DO_
}

void GCClearBossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCClearBossData)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCClearBossData)
}

::google::protobuf::uint8* GCClearBossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCClearBossData)
  // optional int32 chapterId = 1;
  if (has_chapterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCClearBossData)
  return target;
}

int GCClearBossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chapterId = 1;
    if (has_chapterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCClearBossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCClearBossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCClearBossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCClearBossData::MergeFrom(const GCClearBossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapterid()) {
      set_chapterid(from.chapterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCClearBossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCClearBossData::CopyFrom(const GCClearBossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCClearBossData::IsInitialized() const {

  return true;
}

void GCClearBossData::Swap(GCClearBossData* other) {
  if (other != this) {
    std::swap(chapterid_, other->chapterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCClearBossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCClearBossData_descriptor_;
  metadata.reflection = GCClearBossData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
