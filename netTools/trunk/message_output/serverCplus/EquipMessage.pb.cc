// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipSlots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlots_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEquipOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEquipOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEquipOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEquipOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPlayerDetalitedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPlayerDetalitedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendPlayerDetalitedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendPlayerDetalitedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHorseEquipOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHorseEquipOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHorseEquipOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHorseEquipOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCreateEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCreateEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCreateEquipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCreateEquipResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipMessage_2eproto() {
  protobuf_AddDesc_EquipMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipMessage.proto");
  GOOGLE_CHECK(file != NULL);
  EquipSlots_descriptor_ = file->message_type(0);
  static const int EquipSlots_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, equipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, stonelist_),
  };
  EquipSlots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlots_descriptor_,
      EquipSlots::default_instance_,
      EquipSlots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlots));
  EquipInfo_descriptor_ = file->message_type(1);
  static const int EquipInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, isequiped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, equipattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, createname_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  EquipAttr_descriptor_ = file->message_type(2);
  static const int EquipAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, attrkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, viewflag_),
  };
  EquipAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipAttr_descriptor_,
      EquipAttr::default_instance_,
      EquipAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipAttr));
  CGEquipOperate_descriptor_ = file->message_type(3);
  static const int CGEquipOperate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, powertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, holeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, gempid_),
  };
  CGEquipOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEquipOperate_descriptor_,
      CGEquipOperate::default_instance_,
      CGEquipOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEquipOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEquipOperate));
  GCEquipOperateResult_descriptor_ = file->message_type(4);
  static const int GCEquipOperateResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEquipOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEquipOperateResult, equipslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEquipOperateResult, errorcode_),
  };
  GCEquipOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEquipOperateResult_descriptor_,
      GCEquipOperateResult::default_instance_,
      GCEquipOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEquipOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEquipOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEquipOperateResult));
  CGPlayerDetalitedInfo_descriptor_ = file->message_type(5);
  static const int CGPlayerDetalitedInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerDetalitedInfo, playerid_),
  };
  CGPlayerDetalitedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPlayerDetalitedInfo_descriptor_,
      CGPlayerDetalitedInfo::default_instance_,
      CGPlayerDetalitedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerDetalitedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerDetalitedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPlayerDetalitedInfo));
  GCSendPlayerDetalitedInfo_descriptor_ = file->message_type(6);
  static const int GCSendPlayerDetalitedInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, charattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, equipinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, gemeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, equipslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, sloteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, battlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, stoneslotlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, changeequipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, vipname_),
  };
  GCSendPlayerDetalitedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendPlayerDetalitedInfo_descriptor_,
      GCSendPlayerDetalitedInfo::default_instance_,
      GCSendPlayerDetalitedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerDetalitedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendPlayerDetalitedInfo));
  CGHorseEquipOperate_descriptor_ = file->message_type(7);
  static const int CGHorseEquipOperate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, gridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, autocost_),
  };
  CGHorseEquipOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHorseEquipOperate_descriptor_,
      CGHorseEquipOperate::default_instance_,
      CGHorseEquipOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHorseEquipOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHorseEquipOperate));
  GCHorseEquipOperateResult_descriptor_ = file->message_type(8);
  static const int GCHorseEquipOperateResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, equipinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, starsyms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, intensivesyms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, qualitysyms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, extendstate_),
  };
  GCHorseEquipOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHorseEquipOperateResult_descriptor_,
      GCHorseEquipOperateResult::default_instance_,
      GCHorseEquipOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHorseEquipOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHorseEquipOperateResult));
  CGCreateEquip_descriptor_ = file->message_type(9);
  static const int CGCreateEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateEquip, createlistid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateEquip, createtype_),
  };
  CGCreateEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCreateEquip_descriptor_,
      CGCreateEquip::default_instance_,
      CGCreateEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCreateEquip));
  GCCreateEquipResult_descriptor_ = file->message_type(10);
  static const int GCCreateEquipResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateEquipResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateEquipResult, equipinfo_),
  };
  GCCreateEquipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCreateEquipResult_descriptor_,
      GCCreateEquipResult::default_instance_,
      GCCreateEquipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateEquipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateEquipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCreateEquipResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlots_descriptor_, &EquipSlots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipAttr_descriptor_, &EquipAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEquipOperate_descriptor_, &CGEquipOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEquipOperateResult_descriptor_, &GCEquipOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPlayerDetalitedInfo_descriptor_, &CGPlayerDetalitedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendPlayerDetalitedInfo_descriptor_, &GCSendPlayerDetalitedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHorseEquipOperate_descriptor_, &CGHorseEquipOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHorseEquipOperateResult_descriptor_, &GCHorseEquipOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCreateEquip_descriptor_, &CGCreateEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCreateEquipResult_descriptor_, &GCCreateEquipResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipMessage_2eproto() {
  delete EquipSlots::default_instance_;
  delete EquipSlots_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete EquipAttr::default_instance_;
  delete EquipAttr_reflection_;
  delete CGEquipOperate::default_instance_;
  delete CGEquipOperate_reflection_;
  delete GCEquipOperateResult::default_instance_;
  delete GCEquipOperateResult_reflection_;
  delete CGPlayerDetalitedInfo::default_instance_;
  delete CGPlayerDetalitedInfo_reflection_;
  delete GCSendPlayerDetalitedInfo::default_instance_;
  delete GCSendPlayerDetalitedInfo_reflection_;
  delete CGHorseEquipOperate::default_instance_;
  delete CGHorseEquipOperate_reflection_;
  delete GCHorseEquipOperateResult::default_instance_;
  delete GCHorseEquipOperateResult_reflection_;
  delete CGCreateEquip::default_instance_;
  delete CGCreateEquip_reflection_;
  delete GCCreateEquipResult::default_instance_;
  delete GCCreateEquipResult_reflection_;
}

void protobuf_AddDesc_EquipMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_StoneMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022EquipMessage.proto\032\022InnerMessage.proto"
    "\032\022StoneMessage.proto\"g\n\nEquipSlots\022\014\n\004ty"
    "pe\030\001 \001(\005\022\035\n\tequipInfo\030\002 \001(\0132\n.EquipInfo\022"
    "\r\n\005level\030\003 \001(\005\022\035\n\tStoneList\030\004 \003(\0132\n.Ston"
    "eInfo\"z\n\tEquipInfo\022\013\n\003pid\030\001 \001(\003\022\013\n\003sid\030\002"
    " \001(\005\022\014\n\004bind\030\003 \001(\005\022\021\n\tisEquiped\030\004 \001(\005\022\036\n"
    "\nequipAttrs\030\005 \003(\0132\n.EquipAttr\022\022\n\ncreateN"
    "ame\030\006 \001(\t\"A\n\tEquipAttr\022\017\n\007attrkey\030\001 \001(\005\022"
    "\021\n\tattrvalue\030\002 \001(\005\022\020\n\010viewflag\030\003 \001(\005\"q\n\016"
    "CGEquipOperate\022\017\n\007operate\030\001 \001(\005\022\016\n\006gridI"
    "D\030\002 \001(\005\022\013\n\003pid\030\003 \001(\003\022\021\n\tpowertype\030\004 \001(\005\022"
    "\016\n\006holeId\030\005 \001(\005\022\016\n\006gemPid\030\006 \001(\003\"[\n\024GCEqu"
    "ipOperateResult\022\017\n\007operate\030\001 \001(\005\022\037\n\nequi"
    "pSlots\030\002 \003(\0132\013.EquipSlots\022\021\n\terrorCode\030\003"
    " \001(\005\")\n\025CGPlayerDetalitedInfo\022\020\n\010playerI"
    "D\030\001 \001(\003\"\232\003\n\031GCSendPlayerDetalitedInfo\022 \n"
    "\010charAttr\030\001 \003(\0132\016.CharacterAttr\022\036\n\nequip"
    "Infos\030\002 \003(\0132\n.EquipInfo\022\021\n\tgemEffect\030\003 \001"
    "(\005\022\037\n\nequipSlots\030\004 \003(\0132\013.EquipSlots\022\022\n\ns"
    "lotEffect\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\016\n\006iconid"
    "\030\007 \001(\005\022\020\n\010gangName\030\010 \001(\t\022\024\n\014professionId"
    "\030\t \001(\005\022\020\n\010vipLevel\030\n \001(\005\022\022\n\nplayerName\030\013"
    " \001(\t\022\021\n\tbattleNum\030\014 \001(\005\022%\n\rstoneSlotList"
    "\030\r \003(\0132\016.StoneSlotInfo\022)\n\017changeEquipInf"
    "o\030\016 \001(\0132\020.ChangeEquipInfo\022\020\n\010playerID\030\017 "
    "\001(\003\022\017\n\007vipName\030\020 \001(\t\"U\n\023CGHorseEquipOper"
    "ate\022\017\n\007operate\030\001 \001(\005\022\016\n\006gridID\030\002 \001(\005\022\013\n\003"
    "pid\030\003 \001(\003\022\020\n\010autoCost\030\004 \001(\005\"\262\001\n\031GCHorseE"
    "quipOperateResult\022\017\n\007operate\030\001 \001(\005\022\036\n\neq"
    "uipInfos\030\002 \003(\0132\n.EquipInfo\022\021\n\terrorCode\030"
    "\003 \001(\005\022\020\n\010starSyms\030\004 \003(\005\022\025\n\rintensiveSyms"
    "\030\005 \003(\005\022\023\n\013qualitySyms\030\006 \003(\005\022\023\n\013extendSta"
    "te\030\007 \001(\005\"9\n\rCGCreateEquip\022\024\n\014createListI"
    "D\030\001 \001(\005\022\022\n\ncreateType\030\002 \001(\005\"D\n\023GCCreateE"
    "quipResult\022\016\n\006result\030\001 \001(\005\022\035\n\tequipInfo\030"
    "\002 \001(\0132\n.EquipInfoB\031\n\027com.mile.common.mes"
    "sage", 1444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipMessage.proto", &protobuf_RegisterTypes);
  EquipSlots::default_instance_ = new EquipSlots();
  EquipInfo::default_instance_ = new EquipInfo();
  EquipAttr::default_instance_ = new EquipAttr();
  CGEquipOperate::default_instance_ = new CGEquipOperate();
  GCEquipOperateResult::default_instance_ = new GCEquipOperateResult();
  CGPlayerDetalitedInfo::default_instance_ = new CGPlayerDetalitedInfo();
  GCSendPlayerDetalitedInfo::default_instance_ = new GCSendPlayerDetalitedInfo();
  CGHorseEquipOperate::default_instance_ = new CGHorseEquipOperate();
  GCHorseEquipOperateResult::default_instance_ = new GCHorseEquipOperateResult();
  CGCreateEquip::default_instance_ = new CGCreateEquip();
  GCCreateEquipResult::default_instance_ = new GCCreateEquipResult();
  EquipSlots::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  EquipAttr::default_instance_->InitAsDefaultInstance();
  CGEquipOperate::default_instance_->InitAsDefaultInstance();
  GCEquipOperateResult::default_instance_->InitAsDefaultInstance();
  CGPlayerDetalitedInfo::default_instance_->InitAsDefaultInstance();
  GCSendPlayerDetalitedInfo::default_instance_->InitAsDefaultInstance();
  CGHorseEquipOperate::default_instance_->InitAsDefaultInstance();
  GCHorseEquipOperateResult::default_instance_->InitAsDefaultInstance();
  CGCreateEquip::default_instance_->InitAsDefaultInstance();
  GCCreateEquipResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipMessage_2eproto {
  StaticDescriptorInitializer_EquipMessage_2eproto() {
    protobuf_AddDesc_EquipMessage_2eproto();
  }
} static_descriptor_initializer_EquipMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipSlots::kTypeFieldNumber;
const int EquipSlots::kEquipInfoFieldNumber;
const int EquipSlots::kLevelFieldNumber;
const int EquipSlots::kStoneListFieldNumber;
#endif  // !_MSC_VER

EquipSlots::EquipSlots()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipSlots)
}

void EquipSlots::InitAsDefaultInstance() {
  equipinfo_ = const_cast< ::EquipInfo*>(&::EquipInfo::default_instance());
}

EquipSlots::EquipSlots(const EquipSlots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipSlots)
}

void EquipSlots::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  equipinfo_ = NULL;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlots::~EquipSlots() {
  // @@protoc_insertion_point(destructor:EquipSlots)
  SharedDtor();
}

void EquipSlots::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
  }
}

void EquipSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlots_descriptor_;
}

const EquipSlots& EquipSlots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

EquipSlots* EquipSlots::default_instance_ = NULL;

EquipSlots* EquipSlots::New() const {
  return new EquipSlots;
}

void EquipSlots::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipSlots*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, level_);
    if (has_equipinfo()) {
      if (equipinfo_ != NULL) equipinfo_->::EquipInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  stonelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipInfo;
        break;
      }

      // optional .EquipInfo equipInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_equipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StoneList;
        break;
      }

      // repeated .StoneInfo StoneList = 4;
      case 4: {
        if (tag == 34) {
         parse_StoneList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stonelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_StoneList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipSlots)
  return false;
#undef DO_
}

void EquipSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipSlots)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .EquipInfo equipInfo = 2;
  if (has_equipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipinfo(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // repeated .StoneInfo StoneList = 4;
  for (int i = 0; i < this->stonelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stonelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipSlots)
}

::google::protobuf::uint8* EquipSlots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipSlots)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .EquipInfo equipInfo = 2;
  if (has_equipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipinfo(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // repeated .StoneInfo StoneList = 4;
  for (int i = 0; i < this->stonelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stonelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipSlots)
  return target;
}

int EquipSlots::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .EquipInfo equipInfo = 2;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipinfo());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .StoneInfo StoneList = 4;
  total_size += 1 * this->stonelist_size();
  for (int i = 0; i < this->stonelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stonelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlots::MergeFrom(const EquipSlots& from) {
  GOOGLE_CHECK_NE(&from, this);
  stonelist_.MergeFrom(from.stonelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipinfo()) {
      mutable_equipinfo()->::EquipInfo::MergeFrom(from.equipinfo());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlots::CopyFrom(const EquipSlots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlots::IsInitialized() const {

  return true;
}

void EquipSlots::Swap(EquipSlots* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(level_, other->level_);
    stonelist_.Swap(&other->stonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlots_descriptor_;
  metadata.reflection = EquipSlots_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kPidFieldNumber;
const int EquipInfo::kSidFieldNumber;
const int EquipInfo::kBindFieldNumber;
const int EquipInfo::kIsEquipedFieldNumber;
const int EquipInfo::kEquipAttrsFieldNumber;
const int EquipInfo::kCreateNameFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipInfo)
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipInfo)
}

void EquipInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  bind_ = 0;
  isequiped_ = 0;
  createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  // @@protoc_insertion_point(destructor:EquipInfo)
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (createname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createname_;
  }
  if (this != default_instance_) {
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(pid_, bind_);
    isequiped_ = 0;
    if (has_createname()) {
      if (createname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equipattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (tag == 24) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isEquiped;
        break;
      }

      // optional int32 isEquiped = 4;
      case 4: {
        if (tag == 32) {
         parse_isEquiped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isequiped_)));
          set_has_isequiped();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipAttrs;
        break;
      }

      // repeated .EquipAttr equipAttrs = 5;
      case 5: {
        if (tag == 42) {
         parse_equipAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipattrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equipAttrs;
        if (input->ExpectTag(50)) goto parse_createName;
        break;
      }

      // optional string createName = 6;
      case 6: {
        if (tag == 50) {
         parse_createName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createname().data(), this->createname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipInfo)
  return false;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  // optional int32 isEquiped = 4;
  if (has_isequiped()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isequiped(), output);
  }

  // repeated .EquipAttr equipAttrs = 5;
  for (int i = 0; i < this->equipattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equipattrs(i), output);
  }

  // optional string createName = 6;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->createname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipInfo)
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  // optional int32 isEquiped = 4;
  if (has_isequiped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isequiped(), target);
  }

  // repeated .EquipAttr equipAttrs = 5;
  for (int i = 0; i < this->equipattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipattrs(i), target);
  }

  // optional string createName = 6;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->createname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipInfo)
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 isEquiped = 4;
    if (has_isequiped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isequiped());
    }

    // optional string createName = 6;
    if (has_createname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createname());
    }

  }
  // repeated .EquipAttr equipAttrs = 5;
  total_size += 1 * this->equipattrs_size();
  for (int i = 0; i < this->equipattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipattrs_.MergeFrom(from.equipattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_isequiped()) {
      set_isequiped(from.isequiped());
    }
    if (from.has_createname()) {
      set_createname(from.createname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {

  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(sid_, other->sid_);
    std::swap(bind_, other->bind_);
    std::swap(isequiped_, other->isequiped_);
    equipattrs_.Swap(&other->equipattrs_);
    std::swap(createname_, other->createname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipAttr::kAttrkeyFieldNumber;
const int EquipAttr::kAttrvalueFieldNumber;
const int EquipAttr::kViewflagFieldNumber;
#endif  // !_MSC_VER

EquipAttr::EquipAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipAttr)
}

void EquipAttr::InitAsDefaultInstance() {
}

EquipAttr::EquipAttr(const EquipAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipAttr)
}

void EquipAttr::SharedCtor() {
  _cached_size_ = 0;
  attrkey_ = 0;
  attrvalue_ = 0;
  viewflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAttr::~EquipAttr() {
  // @@protoc_insertion_point(destructor:EquipAttr)
  SharedDtor();
}

void EquipAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipAttr_descriptor_;
}

const EquipAttr& EquipAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

EquipAttr* EquipAttr::default_instance_ = NULL;

EquipAttr* EquipAttr::New() const {
  return new EquipAttr;
}

void EquipAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrkey_, viewflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrkey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrkey_)));
          set_has_attrkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attrvalue;
        break;
      }

      // optional int32 attrvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_viewflag;
        break;
      }

      // optional int32 viewflag = 3;
      case 3: {
        if (tag == 24) {
         parse_viewflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewflag_)));
          set_has_viewflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipAttr)
  return false;
#undef DO_
}

void EquipAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrkey(), output);
  }

  // optional int32 attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attrvalue(), output);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viewflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipAttr)
}

::google::protobuf::uint8* EquipAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrkey(), target);
  }

  // optional int32 attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attrvalue(), target);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viewflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipAttr)
  return target;
}

int EquipAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrkey = 1;
    if (has_attrkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrkey());
    }

    // optional int32 attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrvalue());
    }

    // optional int32 viewflag = 3;
    if (has_viewflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipAttr::MergeFrom(const EquipAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrkey()) {
      set_attrkey(from.attrkey());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
    if (from.has_viewflag()) {
      set_viewflag(from.viewflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipAttr::CopyFrom(const EquipAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAttr::IsInitialized() const {

  return true;
}

void EquipAttr::Swap(EquipAttr* other) {
  if (other != this) {
    std::swap(attrkey_, other->attrkey_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(viewflag_, other->viewflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipAttr_descriptor_;
  metadata.reflection = EquipAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEquipOperate::kOperateFieldNumber;
const int CGEquipOperate::kGridIDFieldNumber;
const int CGEquipOperate::kPidFieldNumber;
const int CGEquipOperate::kPowertypeFieldNumber;
const int CGEquipOperate::kHoleIdFieldNumber;
const int CGEquipOperate::kGemPidFieldNumber;
#endif  // !_MSC_VER

CGEquipOperate::CGEquipOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEquipOperate)
}

void CGEquipOperate::InitAsDefaultInstance() {
}

CGEquipOperate::CGEquipOperate(const CGEquipOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEquipOperate)
}

void CGEquipOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gridid_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  powertype_ = 0;
  holeid_ = 0;
  gempid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEquipOperate::~CGEquipOperate() {
  // @@protoc_insertion_point(destructor:CGEquipOperate)
  SharedDtor();
}

void CGEquipOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEquipOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEquipOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEquipOperate_descriptor_;
}

const CGEquipOperate& CGEquipOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

CGEquipOperate* CGEquipOperate::default_instance_ = NULL;

CGEquipOperate* CGEquipOperate::New() const {
  return new CGEquipOperate;
}

void CGEquipOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGEquipOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(operate_, gempid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEquipOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEquipOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gridID;
        break;
      }

      // optional int32 gridID = 2;
      case 2: {
        if (tag == 16) {
         parse_gridID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_powertype;
        break;
      }

      // optional int32 powertype = 4;
      case 4: {
        if (tag == 32) {
         parse_powertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powertype_)));
          set_has_powertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_holeId;
        break;
      }

      // optional int32 holeId = 5;
      case 5: {
        if (tag == 40) {
         parse_holeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &holeid_)));
          set_has_holeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gemPid;
        break;
      }

      // optional int64 gemPid = 6;
      case 6: {
        if (tag == 48) {
         parse_gemPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gempid_)));
          set_has_gempid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEquipOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEquipOperate)
  return false;
#undef DO_
}

void CGEquipOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEquipOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 gridID = 2;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridid(), output);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  // optional int32 powertype = 4;
  if (has_powertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->powertype(), output);
  }

  // optional int32 holeId = 5;
  if (has_holeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->holeid(), output);
  }

  // optional int64 gemPid = 6;
  if (has_gempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->gempid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEquipOperate)
}

::google::protobuf::uint8* CGEquipOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEquipOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 gridID = 2;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridid(), target);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  // optional int32 powertype = 4;
  if (has_powertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->powertype(), target);
  }

  // optional int32 holeId = 5;
  if (has_holeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->holeid(), target);
  }

  // optional int64 gemPid = 6;
  if (has_gempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->gempid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEquipOperate)
  return target;
}

int CGEquipOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gridID = 2;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // optional int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 powertype = 4;
    if (has_powertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powertype());
    }

    // optional int32 holeId = 5;
    if (has_holeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->holeid());
    }

    // optional int64 gemPid = 6;
    if (has_gempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gempid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEquipOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEquipOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEquipOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEquipOperate::MergeFrom(const CGEquipOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_powertype()) {
      set_powertype(from.powertype());
    }
    if (from.has_holeid()) {
      set_holeid(from.holeid());
    }
    if (from.has_gempid()) {
      set_gempid(from.gempid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEquipOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEquipOperate::CopyFrom(const CGEquipOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEquipOperate::IsInitialized() const {

  return true;
}

void CGEquipOperate::Swap(CGEquipOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(gridid_, other->gridid_);
    std::swap(pid_, other->pid_);
    std::swap(powertype_, other->powertype_);
    std::swap(holeid_, other->holeid_);
    std::swap(gempid_, other->gempid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEquipOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEquipOperate_descriptor_;
  metadata.reflection = CGEquipOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEquipOperateResult::kOperateFieldNumber;
const int GCEquipOperateResult::kEquipSlotsFieldNumber;
const int GCEquipOperateResult::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GCEquipOperateResult::GCEquipOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEquipOperateResult)
}

void GCEquipOperateResult::InitAsDefaultInstance() {
}

GCEquipOperateResult::GCEquipOperateResult(const GCEquipOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEquipOperateResult)
}

void GCEquipOperateResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEquipOperateResult::~GCEquipOperateResult() {
  // @@protoc_insertion_point(destructor:GCEquipOperateResult)
  SharedDtor();
}

void GCEquipOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEquipOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEquipOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEquipOperateResult_descriptor_;
}

const GCEquipOperateResult& GCEquipOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

GCEquipOperateResult* GCEquipOperateResult::default_instance_ = NULL;

GCEquipOperateResult* GCEquipOperateResult::New() const {
  return new GCEquipOperateResult;
}

void GCEquipOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCEquipOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, errorcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  equipslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEquipOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEquipOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipSlots;
        break;
      }

      // repeated .EquipSlots equipSlots = 2;
      case 2: {
        if (tag == 18) {
         parse_equipSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipSlots;
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEquipOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEquipOperateResult)
  return false;
#undef DO_
}

void GCEquipOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEquipOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .EquipSlots equipSlots = 2;
  for (int i = 0; i < this->equipslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipslots(i), output);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEquipOperateResult)
}

::google::protobuf::uint8* GCEquipOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEquipOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .EquipSlots equipSlots = 2;
  for (int i = 0; i < this->equipslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipslots(i), target);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEquipOperateResult)
  return target;
}

int GCEquipOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated .EquipSlots equipSlots = 2;
  total_size += 1 * this->equipslots_size();
  for (int i = 0; i < this->equipslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEquipOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEquipOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEquipOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEquipOperateResult::MergeFrom(const GCEquipOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipslots_.MergeFrom(from.equipslots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEquipOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEquipOperateResult::CopyFrom(const GCEquipOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEquipOperateResult::IsInitialized() const {

  return true;
}

void GCEquipOperateResult::Swap(GCEquipOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    equipslots_.Swap(&other->equipslots_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEquipOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEquipOperateResult_descriptor_;
  metadata.reflection = GCEquipOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPlayerDetalitedInfo::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGPlayerDetalitedInfo::CGPlayerDetalitedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPlayerDetalitedInfo)
}

void CGPlayerDetalitedInfo::InitAsDefaultInstance() {
}

CGPlayerDetalitedInfo::CGPlayerDetalitedInfo(const CGPlayerDetalitedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPlayerDetalitedInfo)
}

void CGPlayerDetalitedInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPlayerDetalitedInfo::~CGPlayerDetalitedInfo() {
  // @@protoc_insertion_point(destructor:CGPlayerDetalitedInfo)
  SharedDtor();
}

void CGPlayerDetalitedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPlayerDetalitedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPlayerDetalitedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPlayerDetalitedInfo_descriptor_;
}

const CGPlayerDetalitedInfo& CGPlayerDetalitedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

CGPlayerDetalitedInfo* CGPlayerDetalitedInfo::default_instance_ = NULL;

CGPlayerDetalitedInfo* CGPlayerDetalitedInfo::New() const {
  return new CGPlayerDetalitedInfo;
}

void CGPlayerDetalitedInfo::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPlayerDetalitedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPlayerDetalitedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPlayerDetalitedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPlayerDetalitedInfo)
  return false;
#undef DO_
}

void CGPlayerDetalitedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPlayerDetalitedInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPlayerDetalitedInfo)
}

::google::protobuf::uint8* CGPlayerDetalitedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPlayerDetalitedInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPlayerDetalitedInfo)
  return target;
}

int CGPlayerDetalitedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPlayerDetalitedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPlayerDetalitedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPlayerDetalitedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPlayerDetalitedInfo::MergeFrom(const CGPlayerDetalitedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPlayerDetalitedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPlayerDetalitedInfo::CopyFrom(const CGPlayerDetalitedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerDetalitedInfo::IsInitialized() const {

  return true;
}

void CGPlayerDetalitedInfo::Swap(CGPlayerDetalitedInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPlayerDetalitedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPlayerDetalitedInfo_descriptor_;
  metadata.reflection = CGPlayerDetalitedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendPlayerDetalitedInfo::kCharAttrFieldNumber;
const int GCSendPlayerDetalitedInfo::kEquipInfosFieldNumber;
const int GCSendPlayerDetalitedInfo::kGemEffectFieldNumber;
const int GCSendPlayerDetalitedInfo::kEquipSlotsFieldNumber;
const int GCSendPlayerDetalitedInfo::kSlotEffectFieldNumber;
const int GCSendPlayerDetalitedInfo::kLevelFieldNumber;
const int GCSendPlayerDetalitedInfo::kIconidFieldNumber;
const int GCSendPlayerDetalitedInfo::kGangNameFieldNumber;
const int GCSendPlayerDetalitedInfo::kProfessionIdFieldNumber;
const int GCSendPlayerDetalitedInfo::kVipLevelFieldNumber;
const int GCSendPlayerDetalitedInfo::kPlayerNameFieldNumber;
const int GCSendPlayerDetalitedInfo::kBattleNumFieldNumber;
const int GCSendPlayerDetalitedInfo::kStoneSlotListFieldNumber;
const int GCSendPlayerDetalitedInfo::kChangeEquipInfoFieldNumber;
const int GCSendPlayerDetalitedInfo::kPlayerIDFieldNumber;
const int GCSendPlayerDetalitedInfo::kVipNameFieldNumber;
#endif  // !_MSC_VER

GCSendPlayerDetalitedInfo::GCSendPlayerDetalitedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendPlayerDetalitedInfo)
}

void GCSendPlayerDetalitedInfo::InitAsDefaultInstance() {
  changeequipinfo_ = const_cast< ::ChangeEquipInfo*>(&::ChangeEquipInfo::default_instance());
}

GCSendPlayerDetalitedInfo::GCSendPlayerDetalitedInfo(const GCSendPlayerDetalitedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendPlayerDetalitedInfo)
}

void GCSendPlayerDetalitedInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gemeffect_ = 0;
  sloteffect_ = 0;
  level_ = 0;
  iconid_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  professionid_ = 0;
  viplevel_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlenum_ = 0;
  changeequipinfo_ = NULL;
  playerid_ = GOOGLE_LONGLONG(0);
  vipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendPlayerDetalitedInfo::~GCSendPlayerDetalitedInfo() {
  // @@protoc_insertion_point(destructor:GCSendPlayerDetalitedInfo)
  SharedDtor();
}

void GCSendPlayerDetalitedInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (vipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vipname_;
  }
  if (this != default_instance_) {
    delete changeequipinfo_;
  }
}

void GCSendPlayerDetalitedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendPlayerDetalitedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendPlayerDetalitedInfo_descriptor_;
}

const GCSendPlayerDetalitedInfo& GCSendPlayerDetalitedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

GCSendPlayerDetalitedInfo* GCSendPlayerDetalitedInfo::default_instance_ = NULL;

GCSendPlayerDetalitedInfo* GCSendPlayerDetalitedInfo::New() const {
  return new GCSendPlayerDetalitedInfo;
}

void GCSendPlayerDetalitedInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendPlayerDetalitedInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 244) {
    ZR_(gemeffect_, iconid_);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(professionid_, viplevel_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    battlenum_ = 0;
    if (has_changeequipinfo()) {
      if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
    }
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_vipname()) {
      if (vipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vipname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  charattr_.Clear();
  equipinfos_.Clear();
  equipslots_.Clear();
  stoneslotlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendPlayerDetalitedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendPlayerDetalitedInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharacterAttr charAttr = 1;
      case 1: {
        if (tag == 10) {
         parse_charAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charAttr;
        if (input->ExpectTag(18)) goto parse_equipInfos;
        break;
      }

      // repeated .EquipInfo equipInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_equipInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipInfos;
        if (input->ExpectTag(24)) goto parse_gemEffect;
        break;
      }

      // optional int32 gemEffect = 3;
      case 3: {
        if (tag == 24) {
         parse_gemEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemeffect_)));
          set_has_gemeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipSlots;
        break;
      }

      // repeated .EquipSlots equipSlots = 4;
      case 4: {
        if (tag == 34) {
         parse_equipSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipSlots;
        if (input->ExpectTag(40)) goto parse_slotEffect;
        break;
      }

      // optional int32 slotEffect = 5;
      case 5: {
        if (tag == 40) {
         parse_slotEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sloteffect_)));
          set_has_sloteffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_iconid;
        break;
      }

      // optional int32 iconid = 7;
      case 7: {
        if (tag == 56) {
         parse_iconid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_gangName;
        break;
      }

      // optional string gangName = 8;
      case 8: {
        if (tag == 66) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_professionId;
        break;
      }

      // optional int32 professionId = 9;
      case 9: {
        if (tag == 72) {
         parse_professionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_playerName;
        break;
      }

      // optional string playerName = 11;
      case 11: {
        if (tag == 90) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_battleNum;
        break;
      }

      // optional int32 battleNum = 12;
      case 12: {
        if (tag == 96) {
         parse_battleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlenum_)));
          set_has_battlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stoneSlotList;
        break;
      }

      // repeated .StoneSlotInfo stoneSlotList = 13;
      case 13: {
        if (tag == 106) {
         parse_stoneSlotList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stoneslotlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stoneSlotList;
        if (input->ExpectTag(114)) goto parse_changeEquipInfo;
        break;
      }

      // optional .ChangeEquipInfo changeEquipInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_changeEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeequipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 15;
      case 15: {
        if (tag == 120) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vipName;
        break;
      }

      // optional string vipName = 16;
      case 16: {
        if (tag == 130) {
         parse_vipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vipname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vipname().data(), this->vipname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vipname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendPlayerDetalitedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendPlayerDetalitedInfo)
  return false;
#undef DO_
}

void GCSendPlayerDetalitedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendPlayerDetalitedInfo)
  // repeated .CharacterAttr charAttr = 1;
  for (int i = 0; i < this->charattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charattr(i), output);
  }

  // repeated .EquipInfo equipInfos = 2;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipinfos(i), output);
  }

  // optional int32 gemEffect = 3;
  if (has_gemeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gemeffect(), output);
  }

  // repeated .EquipSlots equipSlots = 4;
  for (int i = 0; i < this->equipslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipslots(i), output);
  }

  // optional int32 slotEffect = 5;
  if (has_sloteffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sloteffect(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 iconid = 7;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iconid(), output);
  }

  // optional string gangName = 8;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->gangname(), output);
  }

  // optional int32 professionId = 9;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->professionid(), output);
  }

  // optional int32 vipLevel = 10;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->viplevel(), output);
  }

  // optional string playerName = 11;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->playername(), output);
  }

  // optional int32 battleNum = 12;
  if (has_battlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->battlenum(), output);
  }

  // repeated .StoneSlotInfo stoneSlotList = 13;
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stoneslotlist(i), output);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 14;
  if (has_changeequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->changeequipinfo(), output);
  }

  // optional int64 playerID = 15;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->playerid(), output);
  }

  // optional string vipName = 16;
  if (has_vipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vipname().data(), this->vipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vipname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->vipname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendPlayerDetalitedInfo)
}

::google::protobuf::uint8* GCSendPlayerDetalitedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendPlayerDetalitedInfo)
  // repeated .CharacterAttr charAttr = 1;
  for (int i = 0; i < this->charattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charattr(i), target);
  }

  // repeated .EquipInfo equipInfos = 2;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipinfos(i), target);
  }

  // optional int32 gemEffect = 3;
  if (has_gemeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gemeffect(), target);
  }

  // repeated .EquipSlots equipSlots = 4;
  for (int i = 0; i < this->equipslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equipslots(i), target);
  }

  // optional int32 slotEffect = 5;
  if (has_sloteffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sloteffect(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 iconid = 7;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iconid(), target);
  }

  // optional string gangName = 8;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->gangname(), target);
  }

  // optional int32 professionId = 9;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->professionid(), target);
  }

  // optional int32 vipLevel = 10;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->viplevel(), target);
  }

  // optional string playerName = 11;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->playername(), target);
  }

  // optional int32 battleNum = 12;
  if (has_battlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->battlenum(), target);
  }

  // repeated .StoneSlotInfo stoneSlotList = 13;
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stoneslotlist(i), target);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 14;
  if (has_changeequipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->changeequipinfo(), target);
  }

  // optional int64 playerID = 15;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->playerid(), target);
  }

  // optional string vipName = 16;
  if (has_vipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vipname().data(), this->vipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vipname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->vipname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendPlayerDetalitedInfo)
  return target;
}

int GCSendPlayerDetalitedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 gemEffect = 3;
    if (has_gemeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemeffect());
    }

    // optional int32 slotEffect = 5;
    if (has_sloteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sloteffect());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 iconid = 7;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

    // optional string gangName = 8;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 professionId = 9;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 vipLevel = 10;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional string playerName = 11;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 battleNum = 12;
    if (has_battlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlenum());
    }

    // optional .ChangeEquipInfo changeEquipInfo = 14;
    if (has_changeequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeequipinfo());
    }

    // optional int64 playerID = 15;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string vipName = 16;
    if (has_vipname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vipname());
    }

  }
  // repeated .CharacterAttr charAttr = 1;
  total_size += 1 * this->charattr_size();
  for (int i = 0; i < this->charattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charattr(i));
  }

  // repeated .EquipInfo equipInfos = 2;
  total_size += 1 * this->equipinfos_size();
  for (int i = 0; i < this->equipinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipinfos(i));
  }

  // repeated .EquipSlots equipSlots = 4;
  total_size += 1 * this->equipslots_size();
  for (int i = 0; i < this->equipslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslots(i));
  }

  // repeated .StoneSlotInfo stoneSlotList = 13;
  total_size += 1 * this->stoneslotlist_size();
  for (int i = 0; i < this->stoneslotlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stoneslotlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendPlayerDetalitedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendPlayerDetalitedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendPlayerDetalitedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendPlayerDetalitedInfo::MergeFrom(const GCSendPlayerDetalitedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charattr_.MergeFrom(from.charattr_);
  equipinfos_.MergeFrom(from.equipinfos_);
  equipslots_.MergeFrom(from.equipslots_);
  stoneslotlist_.MergeFrom(from.stoneslotlist_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_gemeffect()) {
      set_gemeffect(from.gemeffect());
    }
    if (from.has_sloteffect()) {
      set_sloteffect(from.sloteffect());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_battlenum()) {
      set_battlenum(from.battlenum());
    }
    if (from.has_changeequipinfo()) {
      mutable_changeequipinfo()->::ChangeEquipInfo::MergeFrom(from.changeequipinfo());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_vipname()) {
      set_vipname(from.vipname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendPlayerDetalitedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendPlayerDetalitedInfo::CopyFrom(const GCSendPlayerDetalitedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendPlayerDetalitedInfo::IsInitialized() const {

  return true;
}

void GCSendPlayerDetalitedInfo::Swap(GCSendPlayerDetalitedInfo* other) {
  if (other != this) {
    charattr_.Swap(&other->charattr_);
    equipinfos_.Swap(&other->equipinfos_);
    std::swap(gemeffect_, other->gemeffect_);
    equipslots_.Swap(&other->equipslots_);
    std::swap(sloteffect_, other->sloteffect_);
    std::swap(level_, other->level_);
    std::swap(iconid_, other->iconid_);
    std::swap(gangname_, other->gangname_);
    std::swap(professionid_, other->professionid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(playername_, other->playername_);
    std::swap(battlenum_, other->battlenum_);
    stoneslotlist_.Swap(&other->stoneslotlist_);
    std::swap(changeequipinfo_, other->changeequipinfo_);
    std::swap(playerid_, other->playerid_);
    std::swap(vipname_, other->vipname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendPlayerDetalitedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendPlayerDetalitedInfo_descriptor_;
  metadata.reflection = GCSendPlayerDetalitedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHorseEquipOperate::kOperateFieldNumber;
const int CGHorseEquipOperate::kGridIDFieldNumber;
const int CGHorseEquipOperate::kPidFieldNumber;
const int CGHorseEquipOperate::kAutoCostFieldNumber;
#endif  // !_MSC_VER

CGHorseEquipOperate::CGHorseEquipOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGHorseEquipOperate)
}

void CGHorseEquipOperate::InitAsDefaultInstance() {
}

CGHorseEquipOperate::CGHorseEquipOperate(const CGHorseEquipOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGHorseEquipOperate)
}

void CGHorseEquipOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  gridid_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  autocost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHorseEquipOperate::~CGHorseEquipOperate() {
  // @@protoc_insertion_point(destructor:CGHorseEquipOperate)
  SharedDtor();
}

void CGHorseEquipOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHorseEquipOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHorseEquipOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHorseEquipOperate_descriptor_;
}

const CGHorseEquipOperate& CGHorseEquipOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

CGHorseEquipOperate* CGHorseEquipOperate::default_instance_ = NULL;

CGHorseEquipOperate* CGHorseEquipOperate::New() const {
  return new CGHorseEquipOperate;
}

void CGHorseEquipOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGHorseEquipOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, autocost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHorseEquipOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGHorseEquipOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gridID;
        break;
      }

      // optional int32 gridID = 2;
      case 2: {
        if (tag == 16) {
         parse_gridID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridid_)));
          set_has_gridid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // optional int64 pid = 3;
      case 3: {
        if (tag == 24) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_autoCost;
        break;
      }

      // optional int32 autoCost = 4;
      case 4: {
        if (tag == 32) {
         parse_autoCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autocost_)));
          set_has_autocost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGHorseEquipOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGHorseEquipOperate)
  return false;
#undef DO_
}

void CGHorseEquipOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGHorseEquipOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 gridID = 2;
  if (has_gridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridid(), output);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pid(), output);
  }

  // optional int32 autoCost = 4;
  if (has_autocost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->autocost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGHorseEquipOperate)
}

::google::protobuf::uint8* CGHorseEquipOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGHorseEquipOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 gridID = 2;
  if (has_gridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridid(), target);
  }

  // optional int64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pid(), target);
  }

  // optional int32 autoCost = 4;
  if (has_autocost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->autocost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGHorseEquipOperate)
  return target;
}

int CGHorseEquipOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 gridID = 2;
    if (has_gridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridid());
    }

    // optional int64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

    // optional int32 autoCost = 4;
    if (has_autocost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autocost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHorseEquipOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHorseEquipOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHorseEquipOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHorseEquipOperate::MergeFrom(const CGHorseEquipOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_gridid()) {
      set_gridid(from.gridid());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_autocost()) {
      set_autocost(from.autocost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHorseEquipOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHorseEquipOperate::CopyFrom(const CGHorseEquipOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHorseEquipOperate::IsInitialized() const {

  return true;
}

void CGHorseEquipOperate::Swap(CGHorseEquipOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(gridid_, other->gridid_);
    std::swap(pid_, other->pid_);
    std::swap(autocost_, other->autocost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHorseEquipOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHorseEquipOperate_descriptor_;
  metadata.reflection = CGHorseEquipOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHorseEquipOperateResult::kOperateFieldNumber;
const int GCHorseEquipOperateResult::kEquipInfosFieldNumber;
const int GCHorseEquipOperateResult::kErrorCodeFieldNumber;
const int GCHorseEquipOperateResult::kStarSymsFieldNumber;
const int GCHorseEquipOperateResult::kIntensiveSymsFieldNumber;
const int GCHorseEquipOperateResult::kQualitySymsFieldNumber;
const int GCHorseEquipOperateResult::kExtendStateFieldNumber;
#endif  // !_MSC_VER

GCHorseEquipOperateResult::GCHorseEquipOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCHorseEquipOperateResult)
}

void GCHorseEquipOperateResult::InitAsDefaultInstance() {
}

GCHorseEquipOperateResult::GCHorseEquipOperateResult(const GCHorseEquipOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCHorseEquipOperateResult)
}

void GCHorseEquipOperateResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  errorcode_ = 0;
  extendstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHorseEquipOperateResult::~GCHorseEquipOperateResult() {
  // @@protoc_insertion_point(destructor:GCHorseEquipOperateResult)
  SharedDtor();
}

void GCHorseEquipOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHorseEquipOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHorseEquipOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHorseEquipOperateResult_descriptor_;
}

const GCHorseEquipOperateResult& GCHorseEquipOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

GCHorseEquipOperateResult* GCHorseEquipOperateResult::default_instance_ = NULL;

GCHorseEquipOperateResult* GCHorseEquipOperateResult::New() const {
  return new GCHorseEquipOperateResult;
}

void GCHorseEquipOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCHorseEquipOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 69) {
    ZR_(operate_, errorcode_);
    extendstate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equipinfos_.Clear();
  starsyms_.Clear();
  intensivesyms_.Clear();
  qualitysyms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHorseEquipOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCHorseEquipOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipInfos;
        break;
      }

      // repeated .EquipInfo equipInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_equipInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipInfos;
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starSyms;
        break;
      }

      // repeated int32 starSyms = 4;
      case 4: {
        if (tag == 32) {
         parse_starSyms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_starsyms())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_starsyms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starSyms;
        if (input->ExpectTag(40)) goto parse_intensiveSyms;
        break;
      }

      // repeated int32 intensiveSyms = 5;
      case 5: {
        if (tag == 40) {
         parse_intensiveSyms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_intensivesyms())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_intensivesyms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_intensiveSyms;
        if (input->ExpectTag(48)) goto parse_qualitySyms;
        break;
      }

      // repeated int32 qualitySyms = 6;
      case 6: {
        if (tag == 48) {
         parse_qualitySyms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_qualitysyms())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qualitysyms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_qualitySyms;
        if (input->ExpectTag(56)) goto parse_extendState;
        break;
      }

      // optional int32 extendState = 7;
      case 7: {
        if (tag == 56) {
         parse_extendState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extendstate_)));
          set_has_extendstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCHorseEquipOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCHorseEquipOperateResult)
  return false;
#undef DO_
}

void GCHorseEquipOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCHorseEquipOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .EquipInfo equipInfos = 2;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipinfos(i), output);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  // repeated int32 starSyms = 4;
  for (int i = 0; i < this->starsyms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->starsyms(i), output);
  }

  // repeated int32 intensiveSyms = 5;
  for (int i = 0; i < this->intensivesyms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->intensivesyms(i), output);
  }

  // repeated int32 qualitySyms = 6;
  for (int i = 0; i < this->qualitysyms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->qualitysyms(i), output);
  }

  // optional int32 extendState = 7;
  if (has_extendstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->extendstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCHorseEquipOperateResult)
}

::google::protobuf::uint8* GCHorseEquipOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCHorseEquipOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .EquipInfo equipInfos = 2;
  for (int i = 0; i < this->equipinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipinfos(i), target);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  // repeated int32 starSyms = 4;
  for (int i = 0; i < this->starsyms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->starsyms(i), target);
  }

  // repeated int32 intensiveSyms = 5;
  for (int i = 0; i < this->intensivesyms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->intensivesyms(i), target);
  }

  // repeated int32 qualitySyms = 6;
  for (int i = 0; i < this->qualitysyms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->qualitysyms(i), target);
  }

  // optional int32 extendState = 7;
  if (has_extendstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->extendstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCHorseEquipOperateResult)
  return target;
}

int GCHorseEquipOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 extendState = 7;
    if (has_extendstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extendstate());
    }

  }
  // repeated .EquipInfo equipInfos = 2;
  total_size += 1 * this->equipinfos_size();
  for (int i = 0; i < this->equipinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipinfos(i));
  }

  // repeated int32 starSyms = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->starsyms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->starsyms(i));
    }
    total_size += 1 * this->starsyms_size() + data_size;
  }

  // repeated int32 intensiveSyms = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->intensivesyms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->intensivesyms(i));
    }
    total_size += 1 * this->intensivesyms_size() + data_size;
  }

  // repeated int32 qualitySyms = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->qualitysyms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qualitysyms(i));
    }
    total_size += 1 * this->qualitysyms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHorseEquipOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHorseEquipOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHorseEquipOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHorseEquipOperateResult::MergeFrom(const GCHorseEquipOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipinfos_.MergeFrom(from.equipinfos_);
  starsyms_.MergeFrom(from.starsyms_);
  intensivesyms_.MergeFrom(from.intensivesyms_);
  qualitysyms_.MergeFrom(from.qualitysyms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_extendstate()) {
      set_extendstate(from.extendstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHorseEquipOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHorseEquipOperateResult::CopyFrom(const GCHorseEquipOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHorseEquipOperateResult::IsInitialized() const {

  return true;
}

void GCHorseEquipOperateResult::Swap(GCHorseEquipOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    equipinfos_.Swap(&other->equipinfos_);
    std::swap(errorcode_, other->errorcode_);
    starsyms_.Swap(&other->starsyms_);
    intensivesyms_.Swap(&other->intensivesyms_);
    qualitysyms_.Swap(&other->qualitysyms_);
    std::swap(extendstate_, other->extendstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHorseEquipOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHorseEquipOperateResult_descriptor_;
  metadata.reflection = GCHorseEquipOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCreateEquip::kCreateListIDFieldNumber;
const int CGCreateEquip::kCreateTypeFieldNumber;
#endif  // !_MSC_VER

CGCreateEquip::CGCreateEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCreateEquip)
}

void CGCreateEquip::InitAsDefaultInstance() {
}

CGCreateEquip::CGCreateEquip(const CGCreateEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCreateEquip)
}

void CGCreateEquip::SharedCtor() {
  _cached_size_ = 0;
  createlistid_ = 0;
  createtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCreateEquip::~CGCreateEquip() {
  // @@protoc_insertion_point(destructor:CGCreateEquip)
  SharedDtor();
}

void CGCreateEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCreateEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCreateEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCreateEquip_descriptor_;
}

const CGCreateEquip& CGCreateEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

CGCreateEquip* CGCreateEquip::default_instance_ = NULL;

CGCreateEquip* CGCreateEquip::New() const {
  return new CGCreateEquip;
}

void CGCreateEquip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGCreateEquip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(createlistid_, createtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCreateEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCreateEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 createListID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createlistid_)));
          set_has_createlistid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_createType;
        break;
      }

      // optional int32 createType = 2;
      case 2: {
        if (tag == 16) {
         parse_createType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtype_)));
          set_has_createtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCreateEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCreateEquip)
  return false;
#undef DO_
}

void CGCreateEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCreateEquip)
  // optional int32 createListID = 1;
  if (has_createlistid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->createlistid(), output);
  }

  // optional int32 createType = 2;
  if (has_createtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->createtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCreateEquip)
}

::google::protobuf::uint8* CGCreateEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCreateEquip)
  // optional int32 createListID = 1;
  if (has_createlistid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->createlistid(), target);
  }

  // optional int32 createType = 2;
  if (has_createtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->createtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCreateEquip)
  return target;
}

int CGCreateEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 createListID = 1;
    if (has_createlistid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createlistid());
    }

    // optional int32 createType = 2;
    if (has_createtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCreateEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCreateEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCreateEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCreateEquip::MergeFrom(const CGCreateEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_createlistid()) {
      set_createlistid(from.createlistid());
    }
    if (from.has_createtype()) {
      set_createtype(from.createtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCreateEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCreateEquip::CopyFrom(const CGCreateEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCreateEquip::IsInitialized() const {

  return true;
}

void CGCreateEquip::Swap(CGCreateEquip* other) {
  if (other != this) {
    std::swap(createlistid_, other->createlistid_);
    std::swap(createtype_, other->createtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCreateEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCreateEquip_descriptor_;
  metadata.reflection = CGCreateEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCreateEquipResult::kResultFieldNumber;
const int GCCreateEquipResult::kEquipInfoFieldNumber;
#endif  // !_MSC_VER

GCCreateEquipResult::GCCreateEquipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCreateEquipResult)
}

void GCCreateEquipResult::InitAsDefaultInstance() {
  equipinfo_ = const_cast< ::EquipInfo*>(&::EquipInfo::default_instance());
}

GCCreateEquipResult::GCCreateEquipResult(const GCCreateEquipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCreateEquipResult)
}

void GCCreateEquipResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  equipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCreateEquipResult::~GCCreateEquipResult() {
  // @@protoc_insertion_point(destructor:GCCreateEquipResult)
  SharedDtor();
}

void GCCreateEquipResult::SharedDtor() {
  if (this != default_instance_) {
    delete equipinfo_;
  }
}

void GCCreateEquipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCreateEquipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCreateEquipResult_descriptor_;
}

const GCCreateEquipResult& GCCreateEquipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipMessage_2eproto();
  return *default_instance_;
}

GCCreateEquipResult* GCCreateEquipResult::default_instance_ = NULL;

GCCreateEquipResult* GCCreateEquipResult::New() const {
  return new GCCreateEquipResult;
}

void GCCreateEquipResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0;
    if (has_equipinfo()) {
      if (equipinfo_ != NULL) equipinfo_->::EquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCreateEquipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCreateEquipResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipInfo;
        break;
      }

      // optional .EquipInfo equipInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_equipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCreateEquipResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCreateEquipResult)
  return false;
#undef DO_
}

void GCCreateEquipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCreateEquipResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .EquipInfo equipInfo = 2;
  if (has_equipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCreateEquipResult)
}

::google::protobuf::uint8* GCCreateEquipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCreateEquipResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .EquipInfo equipInfo = 2;
  if (has_equipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCreateEquipResult)
  return target;
}

int GCCreateEquipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .EquipInfo equipInfo = 2;
    if (has_equipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCreateEquipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCreateEquipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCreateEquipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCreateEquipResult::MergeFrom(const GCCreateEquipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_equipinfo()) {
      mutable_equipinfo()->::EquipInfo::MergeFrom(from.equipinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCreateEquipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCreateEquipResult::CopyFrom(const GCCreateEquipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreateEquipResult::IsInitialized() const {

  return true;
}

void GCCreateEquipResult::Swap(GCCreateEquipResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(equipinfo_, other->equipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCreateEquipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCreateEquipResult_descriptor_;
  metadata.reflection = GCCreateEquipResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
