// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EscortMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EscortMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEscortOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEscortOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEscortOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEscortOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFollowDart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFollowDart_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFollowDartResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFollowDartResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EscortMessage_2eproto() {
  protobuf_AddDesc_EscortMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EscortMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEscortOperate_descriptor_ = file->message_type(0);
  static const int CGEscortOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEscortOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEscortOperate, darttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEscortOperate, dartid_),
  };
  CGEscortOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEscortOperate_descriptor_,
      CGEscortOperate::default_instance_,
      CGEscortOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEscortOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEscortOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEscortOperate));
  GCEscortOperateResult_descriptor_ = file->message_type(1);
  static const int GCEscortOperateResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, escortcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, robcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, dartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, dartpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, failtime_),
  };
  GCEscortOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEscortOperateResult_descriptor_,
      GCEscortOperateResult::default_instance_,
      GCEscortOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEscortOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEscortOperateResult));
  CGFollowDart_descriptor_ = file->message_type(2);
  static const int CGFollowDart_offsets_[1] = {
  };
  CGFollowDart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFollowDart_descriptor_,
      CGFollowDart::default_instance_,
      CGFollowDart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFollowDart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFollowDart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFollowDart));
  GCFollowDartResult_descriptor_ = file->message_type(3);
  static const int GCFollowDartResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFollowDartResult, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFollowDartResult, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFollowDartResult, posz_),
  };
  GCFollowDartResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFollowDartResult_descriptor_,
      GCFollowDartResult::default_instance_,
      GCFollowDartResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFollowDartResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFollowDartResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFollowDartResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EscortMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEscortOperate_descriptor_, &CGEscortOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEscortOperateResult_descriptor_, &GCEscortOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFollowDart_descriptor_, &CGFollowDart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFollowDartResult_descriptor_, &GCFollowDartResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EscortMessage_2eproto() {
  delete CGEscortOperate::default_instance_;
  delete CGEscortOperate_reflection_;
  delete GCEscortOperateResult::default_instance_;
  delete GCEscortOperateResult_reflection_;
  delete CGFollowDart::default_instance_;
  delete CGFollowDart_reflection_;
  delete GCFollowDartResult::default_instance_;
  delete GCFollowDartResult_reflection_;
}

void protobuf_AddDesc_EscortMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023EscortMessage.proto\"D\n\017CGEscortOperate"
    "\022\017\n\007operate\030\001 \001(\005\022\020\n\010dartType\030\002 \001(\005\022\016\n\006d"
    "artID\030\003 \001(\005\"\263\001\n\025GCEscortOperateResult\022\017\n"
    "\007operate\030\001 \001(\005\022\021\n\tescortCnt\030\002 \001(\005\022\016\n\006rob"
    "Cnt\030\003 \001(\005\022\016\n\006dartID\030\004 \001(\005\022\016\n\006reward\030\005 \001("
    "\t\022\022\n\nplayerName\030\006 \001(\t\022\017\n\007dartPid\030\007 \001(\003\022\017"
    "\n\007endTime\030\010 \001(\003\022\020\n\010failTime\030\t \001(\003\"\016\n\014CGF"
    "ollowDart\"A\n\022GCFollowDartResult\022\017\n\007scene"
    "ID\030\001 \001(\005\022\014\n\004posX\030\002 \001(\005\022\014\n\004posZ\030\003 \001(\005B\031\n\027"
    "com.mile.common.message", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EscortMessage.proto", &protobuf_RegisterTypes);
  CGEscortOperate::default_instance_ = new CGEscortOperate();
  GCEscortOperateResult::default_instance_ = new GCEscortOperateResult();
  CGFollowDart::default_instance_ = new CGFollowDart();
  GCFollowDartResult::default_instance_ = new GCFollowDartResult();
  CGEscortOperate::default_instance_->InitAsDefaultInstance();
  GCEscortOperateResult::default_instance_->InitAsDefaultInstance();
  CGFollowDart::default_instance_->InitAsDefaultInstance();
  GCFollowDartResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EscortMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EscortMessage_2eproto {
  StaticDescriptorInitializer_EscortMessage_2eproto() {
    protobuf_AddDesc_EscortMessage_2eproto();
  }
} static_descriptor_initializer_EscortMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEscortOperate::kOperateFieldNumber;
const int CGEscortOperate::kDartTypeFieldNumber;
const int CGEscortOperate::kDartIDFieldNumber;
#endif  // !_MSC_VER

CGEscortOperate::CGEscortOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEscortOperate)
}

void CGEscortOperate::InitAsDefaultInstance() {
}

CGEscortOperate::CGEscortOperate(const CGEscortOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEscortOperate)
}

void CGEscortOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  darttype_ = 0;
  dartid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEscortOperate::~CGEscortOperate() {
  // @@protoc_insertion_point(destructor:CGEscortOperate)
  SharedDtor();
}

void CGEscortOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEscortOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEscortOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEscortOperate_descriptor_;
}

const CGEscortOperate& CGEscortOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EscortMessage_2eproto();
  return *default_instance_;
}

CGEscortOperate* CGEscortOperate::default_instance_ = NULL;

CGEscortOperate* CGEscortOperate::New() const {
  return new CGEscortOperate;
}

void CGEscortOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGEscortOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, dartid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEscortOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEscortOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dartType;
        break;
      }

      // optional int32 dartType = 2;
      case 2: {
        if (tag == 16) {
         parse_dartType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &darttype_)));
          set_has_darttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dartID;
        break;
      }

      // optional int32 dartID = 3;
      case 3: {
        if (tag == 24) {
         parse_dartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEscortOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEscortOperate)
  return false;
#undef DO_
}

void CGEscortOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEscortOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 dartType = 2;
  if (has_darttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->darttype(), output);
  }

  // optional int32 dartID = 3;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dartid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEscortOperate)
}

::google::protobuf::uint8* CGEscortOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEscortOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 dartType = 2;
  if (has_darttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->darttype(), target);
  }

  // optional int32 dartID = 3;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dartid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEscortOperate)
  return target;
}

int CGEscortOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 dartType = 2;
    if (has_darttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->darttype());
    }

    // optional int32 dartID = 3;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dartid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEscortOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEscortOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEscortOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEscortOperate::MergeFrom(const CGEscortOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_darttype()) {
      set_darttype(from.darttype());
    }
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEscortOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEscortOperate::CopyFrom(const CGEscortOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEscortOperate::IsInitialized() const {

  return true;
}

void CGEscortOperate::Swap(CGEscortOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(darttype_, other->darttype_);
    std::swap(dartid_, other->dartid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEscortOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEscortOperate_descriptor_;
  metadata.reflection = CGEscortOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEscortOperateResult::kOperateFieldNumber;
const int GCEscortOperateResult::kEscortCntFieldNumber;
const int GCEscortOperateResult::kRobCntFieldNumber;
const int GCEscortOperateResult::kDartIDFieldNumber;
const int GCEscortOperateResult::kRewardFieldNumber;
const int GCEscortOperateResult::kPlayerNameFieldNumber;
const int GCEscortOperateResult::kDartPidFieldNumber;
const int GCEscortOperateResult::kEndTimeFieldNumber;
const int GCEscortOperateResult::kFailTimeFieldNumber;
#endif  // !_MSC_VER

GCEscortOperateResult::GCEscortOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEscortOperateResult)
}

void GCEscortOperateResult::InitAsDefaultInstance() {
}

GCEscortOperateResult::GCEscortOperateResult(const GCEscortOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEscortOperateResult)
}

void GCEscortOperateResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = 0;
  escortcnt_ = 0;
  robcnt_ = 0;
  dartid_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dartpid_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  failtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEscortOperateResult::~GCEscortOperateResult() {
  // @@protoc_insertion_point(destructor:GCEscortOperateResult)
  SharedDtor();
}

void GCEscortOperateResult::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GCEscortOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEscortOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEscortOperateResult_descriptor_;
}

const GCEscortOperateResult& GCEscortOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EscortMessage_2eproto();
  return *default_instance_;
}

GCEscortOperateResult* GCEscortOperateResult::default_instance_ = NULL;

GCEscortOperateResult* GCEscortOperateResult::New() const {
  return new GCEscortOperateResult;
}

void GCEscortOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCEscortOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(operate_, dartid_);
    ZR_(dartpid_, endtime_);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  failtime_ = GOOGLE_LONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEscortOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEscortOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_escortCnt;
        break;
      }

      // optional int32 escortCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_escortCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escortcnt_)));
          set_has_escortcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_robCnt;
        break;
      }

      // optional int32 robCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_robCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robcnt_)));
          set_has_robcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dartID;
        break;
      }

      // optional int32 dartID = 4;
      case 4: {
        if (tag == 32) {
         parse_dartID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dartid_)));
          set_has_dartid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // optional string reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_playerName;
        break;
      }

      // optional string playerName = 6;
      case 6: {
        if (tag == 50) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dartPid;
        break;
      }

      // optional int64 dartPid = 7;
      case 7: {
        if (tag == 56) {
         parse_dartPid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dartpid_)));
          set_has_dartpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 8;
      case 8: {
        if (tag == 64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_failTime;
        break;
      }

      // optional int64 failTime = 9;
      case 9: {
        if (tag == 72) {
         parse_failTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &failtime_)));
          set_has_failtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEscortOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEscortOperateResult)
  return false;
#undef DO_
}

void GCEscortOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEscortOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 escortCnt = 2;
  if (has_escortcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->escortcnt(), output);
  }

  // optional int32 robCnt = 3;
  if (has_robcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robcnt(), output);
  }

  // optional int32 dartID = 4;
  if (has_dartid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dartid(), output);
  }

  // optional string reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reward(), output);
  }

  // optional string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->playername(), output);
  }

  // optional int64 dartPid = 7;
  if (has_dartpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->dartpid(), output);
  }

  // optional int64 endTime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->endtime(), output);
  }

  // optional int64 failTime = 9;
  if (has_failtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->failtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEscortOperateResult)
}

::google::protobuf::uint8* GCEscortOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEscortOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 escortCnt = 2;
  if (has_escortcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->escortcnt(), target);
  }

  // optional int32 robCnt = 3;
  if (has_robcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robcnt(), target);
  }

  // optional int32 dartID = 4;
  if (has_dartid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dartid(), target);
  }

  // optional string reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reward(), target);
  }

  // optional string playerName = 6;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->playername(), target);
  }

  // optional int64 dartPid = 7;
  if (has_dartpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->dartpid(), target);
  }

  // optional int64 endTime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->endtime(), target);
  }

  // optional int64 failTime = 9;
  if (has_failtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->failtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEscortOperateResult)
  return target;
}

int GCEscortOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 escortCnt = 2;
    if (has_escortcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escortcnt());
    }

    // optional int32 robCnt = 3;
    if (has_robcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robcnt());
    }

    // optional int32 dartID = 4;
    if (has_dartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dartid());
    }

    // optional string reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

    // optional string playerName = 6;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int64 dartPid = 7;
    if (has_dartpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dartpid());
    }

    // optional int64 endTime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 failTime = 9;
    if (has_failtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->failtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEscortOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEscortOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEscortOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEscortOperateResult::MergeFrom(const GCEscortOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_escortcnt()) {
      set_escortcnt(from.escortcnt());
    }
    if (from.has_robcnt()) {
      set_robcnt(from.robcnt());
    }
    if (from.has_dartid()) {
      set_dartid(from.dartid());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_dartpid()) {
      set_dartpid(from.dartpid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_failtime()) {
      set_failtime(from.failtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEscortOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEscortOperateResult::CopyFrom(const GCEscortOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEscortOperateResult::IsInitialized() const {

  return true;
}

void GCEscortOperateResult::Swap(GCEscortOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(escortcnt_, other->escortcnt_);
    std::swap(robcnt_, other->robcnt_);
    std::swap(dartid_, other->dartid_);
    std::swap(reward_, other->reward_);
    std::swap(playername_, other->playername_);
    std::swap(dartpid_, other->dartpid_);
    std::swap(endtime_, other->endtime_);
    std::swap(failtime_, other->failtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEscortOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEscortOperateResult_descriptor_;
  metadata.reflection = GCEscortOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGFollowDart::CGFollowDart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFollowDart)
}

void CGFollowDart::InitAsDefaultInstance() {
}

CGFollowDart::CGFollowDart(const CGFollowDart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFollowDart)
}

void CGFollowDart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFollowDart::~CGFollowDart() {
  // @@protoc_insertion_point(destructor:CGFollowDart)
  SharedDtor();
}

void CGFollowDart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFollowDart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFollowDart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFollowDart_descriptor_;
}

const CGFollowDart& CGFollowDart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EscortMessage_2eproto();
  return *default_instance_;
}

CGFollowDart* CGFollowDart::default_instance_ = NULL;

CGFollowDart* CGFollowDart::New() const {
  return new CGFollowDart;
}

void CGFollowDart::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFollowDart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFollowDart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGFollowDart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFollowDart)
  return false;
#undef DO_
}

void CGFollowDart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFollowDart)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFollowDart)
}

::google::protobuf::uint8* CGFollowDart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFollowDart)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFollowDart)
  return target;
}

int CGFollowDart::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFollowDart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFollowDart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFollowDart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFollowDart::MergeFrom(const CGFollowDart& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFollowDart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFollowDart::CopyFrom(const CGFollowDart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFollowDart::IsInitialized() const {

  return true;
}

void CGFollowDart::Swap(CGFollowDart* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFollowDart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFollowDart_descriptor_;
  metadata.reflection = CGFollowDart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFollowDartResult::kSceneIDFieldNumber;
const int GCFollowDartResult::kPosXFieldNumber;
const int GCFollowDartResult::kPosZFieldNumber;
#endif  // !_MSC_VER

GCFollowDartResult::GCFollowDartResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFollowDartResult)
}

void GCFollowDartResult::InitAsDefaultInstance() {
}

GCFollowDartResult::GCFollowDartResult(const GCFollowDartResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFollowDartResult)
}

void GCFollowDartResult::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  posx_ = 0;
  posz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFollowDartResult::~GCFollowDartResult() {
  // @@protoc_insertion_point(destructor:GCFollowDartResult)
  SharedDtor();
}

void GCFollowDartResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFollowDartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFollowDartResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFollowDartResult_descriptor_;
}

const GCFollowDartResult& GCFollowDartResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EscortMessage_2eproto();
  return *default_instance_;
}

GCFollowDartResult* GCFollowDartResult::default_instance_ = NULL;

GCFollowDartResult* GCFollowDartResult::New() const {
  return new GCFollowDartResult;
}

void GCFollowDartResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFollowDartResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sceneid_, posz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFollowDartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFollowDartResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_posX;
        break;
      }

      // optional int32 posX = 2;
      case 2: {
        if (tag == 16) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_posZ;
        break;
      }

      // optional int32 posZ = 3;
      case 3: {
        if (tag == 24) {
         parse_posZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFollowDartResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFollowDartResult)
  return false;
#undef DO_
}

void GCFollowDartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFollowDartResult)
  // optional int32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional int32 posX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 posZ = 3;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFollowDartResult)
}

::google::protobuf::uint8* GCFollowDartResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFollowDartResult)
  // optional int32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional int32 posX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 posZ = 3;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFollowDartResult)
  return target;
}

int GCFollowDartResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 posX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posZ = 3;
    if (has_posz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFollowDartResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFollowDartResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFollowDartResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFollowDartResult::MergeFrom(const GCFollowDartResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFollowDartResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFollowDartResult::CopyFrom(const GCFollowDartResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFollowDartResult::IsInitialized() const {

  return true;
}

void GCFollowDartResult::Swap(GCFollowDartResult* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(posx_, other->posx_);
    std::swap(posz_, other->posz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFollowDartResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFollowDartResult_descriptor_;
  metadata.reflection = GCFollowDartResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
