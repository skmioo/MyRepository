// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FateMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FateMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFateOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFateOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFateResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FateMessage_2eproto() {
  protobuf_AddDesc_FateMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FateMessage.proto");
  GOOGLE_CHECK(file != NULL);
  FateInfo_descriptor_ = file->message_type(0);
  static const int FateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FateInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FateInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FateInfo, type_),
  };
  FateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FateInfo_descriptor_,
      FateInfo::default_instance_,
      FateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FateInfo));
  SymInfo_descriptor_ = file->message_type(1);
  static const int SymInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymInfo, symid_),
  };
  SymInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymInfo_descriptor_,
      SymInfo::default_instance_,
      SymInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymInfo));
  CGFateOperate_descriptor_ = file->message_type(2);
  static const int CGFateOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFateOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFateOperate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFateOperate, type_),
  };
  CGFateOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFateOperate_descriptor_,
      CGFateOperate::default_instance_,
      CGFateOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFateOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFateOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFateOperate));
  GCFateResult_descriptor_ = file->message_type(3);
  static const int GCFateResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, syminfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, fateinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, markitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, transttype_),
  };
  GCFateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFateResult_descriptor_,
      GCFateResult::default_instance_,
      GCFateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFateResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FateMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FateInfo_descriptor_, &FateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymInfo_descriptor_, &SymInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFateOperate_descriptor_, &CGFateOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFateResult_descriptor_, &GCFateResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FateMessage_2eproto() {
  delete FateInfo::default_instance_;
  delete FateInfo_reflection_;
  delete SymInfo::default_instance_;
  delete SymInfo_reflection_;
  delete CGFateOperate::default_instance_;
  delete CGFateOperate_reflection_;
  delete GCFateResult::default_instance_;
  delete GCFateResult_reflection_;
}

void protobuf_AddDesc_FateMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BackpackMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FateMessage.proto\032\025BackpackMessage.pro"
    "to\"3\n\010FateInfo\022\n\n\002id\030\001 \001(\005\022\r\n\005level\030\002 \001("
    "\005\022\014\n\004type\030\003 \001(\005\"&\n\007SymInfo\022\014\n\004type\030\001 \001(\005"
    "\022\r\n\005symId\030\002 \001(\005\":\n\rCGFateOperate\022\017\n\007oper"
    "ate\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"\217\001\n\014"
    "GCFateResult\022\017\n\007operate\030\001 \001(\005\022\032\n\010symInfo"
    "s\030\002 \003(\0132\010.SymInfo\022\034\n\tfateInfos\030\003 \003(\0132\t.F"
    "ateInfo\022 \n\tmarkItems\030\004 \003(\0132\r.BackpackIte"
    "m\022\022\n\ntranstType\030\005 \001(\005B\031\n\027com.mile.common"
    ".message", 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FateMessage.proto", &protobuf_RegisterTypes);
  FateInfo::default_instance_ = new FateInfo();
  SymInfo::default_instance_ = new SymInfo();
  CGFateOperate::default_instance_ = new CGFateOperate();
  GCFateResult::default_instance_ = new GCFateResult();
  FateInfo::default_instance_->InitAsDefaultInstance();
  SymInfo::default_instance_->InitAsDefaultInstance();
  CGFateOperate::default_instance_->InitAsDefaultInstance();
  GCFateResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FateMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FateMessage_2eproto {
  StaticDescriptorInitializer_FateMessage_2eproto() {
    protobuf_AddDesc_FateMessage_2eproto();
  }
} static_descriptor_initializer_FateMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FateInfo::kIdFieldNumber;
const int FateInfo::kLevelFieldNumber;
const int FateInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

FateInfo::FateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FateInfo)
}

void FateInfo::InitAsDefaultInstance() {
}

FateInfo::FateInfo(const FateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FateInfo)
}

void FateInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FateInfo::~FateInfo() {
  // @@protoc_insertion_point(destructor:FateInfo)
  SharedDtor();
}

void FateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FateInfo_descriptor_;
}

const FateInfo& FateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FateMessage_2eproto();
  return *default_instance_;
}

FateInfo* FateInfo::default_instance_ = NULL;

FateInfo* FateInfo::New() const {
  return new FateInfo;
}

void FateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FateInfo)
  return false;
#undef DO_
}

void FateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FateInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FateInfo)
}

::google::protobuf::uint8* FateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FateInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FateInfo)
  return target;
}

int FateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FateInfo::MergeFrom(const FateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FateInfo::CopyFrom(const FateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FateInfo::IsInitialized() const {

  return true;
}

void FateInfo::Swap(FateInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FateInfo_descriptor_;
  metadata.reflection = FateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymInfo::kTypeFieldNumber;
const int SymInfo::kSymIdFieldNumber;
#endif  // !_MSC_VER

SymInfo::SymInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SymInfo)
}

void SymInfo::InitAsDefaultInstance() {
}

SymInfo::SymInfo(const SymInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SymInfo)
}

void SymInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  symid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymInfo::~SymInfo() {
  // @@protoc_insertion_point(destructor:SymInfo)
  SharedDtor();
}

void SymInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SymInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymInfo_descriptor_;
}

const SymInfo& SymInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FateMessage_2eproto();
  return *default_instance_;
}

SymInfo* SymInfo::default_instance_ = NULL;

SymInfo* SymInfo::New() const {
  return new SymInfo;
}

void SymInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SymInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, symid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SymInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_symId;
        break;
      }

      // optional int32 symId = 2;
      case 2: {
        if (tag == 16) {
         parse_symId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symid_)));
          set_has_symid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SymInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SymInfo)
  return false;
#undef DO_
}

void SymInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SymInfo)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 symId = 2;
  if (has_symid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->symid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SymInfo)
}

::google::protobuf::uint8* SymInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SymInfo)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 symId = 2;
  if (has_symid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->symid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SymInfo)
  return target;
}

int SymInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 symId = 2;
    if (has_symid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymInfo::MergeFrom(const SymInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_symid()) {
      set_symid(from.symid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymInfo::CopyFrom(const SymInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymInfo::IsInitialized() const {

  return true;
}

void SymInfo::Swap(SymInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(symid_, other->symid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymInfo_descriptor_;
  metadata.reflection = SymInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFateOperate::kOperateFieldNumber;
const int CGFateOperate::kIdFieldNumber;
const int CGFateOperate::kTypeFieldNumber;
#endif  // !_MSC_VER

CGFateOperate::CGFateOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFateOperate)
}

void CGFateOperate::InitAsDefaultInstance() {
}

CGFateOperate::CGFateOperate(const CGFateOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFateOperate)
}

void CGFateOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFateOperate::~CGFateOperate() {
  // @@protoc_insertion_point(destructor:CGFateOperate)
  SharedDtor();
}

void CGFateOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFateOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFateOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFateOperate_descriptor_;
}

const CGFateOperate& CGFateOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FateMessage_2eproto();
  return *default_instance_;
}

CGFateOperate* CGFateOperate::default_instance_ = NULL;

CGFateOperate* CGFateOperate::New() const {
  return new CGFateOperate;
}

void CGFateOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGFateOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFateOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFateOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFateOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFateOperate)
  return false;
#undef DO_
}

void CGFateOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFateOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFateOperate)
}

::google::protobuf::uint8* CGFateOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFateOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFateOperate)
  return target;
}

int CGFateOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFateOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFateOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFateOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFateOperate::MergeFrom(const CGFateOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFateOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFateOperate::CopyFrom(const CGFateOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFateOperate::IsInitialized() const {

  return true;
}

void CGFateOperate::Swap(CGFateOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFateOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFateOperate_descriptor_;
  metadata.reflection = CGFateOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFateResult::kOperateFieldNumber;
const int GCFateResult::kSymInfosFieldNumber;
const int GCFateResult::kFateInfosFieldNumber;
const int GCFateResult::kMarkItemsFieldNumber;
const int GCFateResult::kTranstTypeFieldNumber;
#endif  // !_MSC_VER

GCFateResult::GCFateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFateResult)
}

void GCFateResult::InitAsDefaultInstance() {
}

GCFateResult::GCFateResult(const GCFateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFateResult)
}

void GCFateResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  transttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFateResult::~GCFateResult() {
  // @@protoc_insertion_point(destructor:GCFateResult)
  SharedDtor();
}

void GCFateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFateResult_descriptor_;
}

const GCFateResult& GCFateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FateMessage_2eproto();
  return *default_instance_;
}

GCFateResult* GCFateResult::default_instance_ = NULL;

GCFateResult* GCFateResult::New() const {
  return new GCFateResult;
}

void GCFateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCFateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, transttype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  syminfos_.Clear();
  fateinfos_.Clear();
  markitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symInfos;
        break;
      }

      // repeated .SymInfo symInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_symInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syminfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symInfos;
        if (input->ExpectTag(26)) goto parse_fateInfos;
        break;
      }

      // repeated .FateInfo fateInfos = 3;
      case 3: {
        if (tag == 26) {
         parse_fateInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fateinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fateInfos;
        if (input->ExpectTag(34)) goto parse_markItems;
        break;
      }

      // repeated .BackpackItem markItems = 4;
      case 4: {
        if (tag == 34) {
         parse_markItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_markitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_markItems;
        if (input->ExpectTag(40)) goto parse_transtType;
        break;
      }

      // optional int32 transtType = 5;
      case 5: {
        if (tag == 40) {
         parse_transtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transttype_)));
          set_has_transttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFateResult)
  return false;
#undef DO_
}

void GCFateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .SymInfo symInfos = 2;
  for (int i = 0; i < this->syminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->syminfos(i), output);
  }

  // repeated .FateInfo fateInfos = 3;
  for (int i = 0; i < this->fateinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fateinfos(i), output);
  }

  // repeated .BackpackItem markItems = 4;
  for (int i = 0; i < this->markitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->markitems(i), output);
  }

  // optional int32 transtType = 5;
  if (has_transttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->transttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFateResult)
}

::google::protobuf::uint8* GCFateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .SymInfo symInfos = 2;
  for (int i = 0; i < this->syminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->syminfos(i), target);
  }

  // repeated .FateInfo fateInfos = 3;
  for (int i = 0; i < this->fateinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fateinfos(i), target);
  }

  // repeated .BackpackItem markItems = 4;
  for (int i = 0; i < this->markitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->markitems(i), target);
  }

  // optional int32 transtType = 5;
  if (has_transttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->transttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFateResult)
  return target;
}

int GCFateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 transtType = 5;
    if (has_transttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transttype());
    }

  }
  // repeated .SymInfo symInfos = 2;
  total_size += 1 * this->syminfos_size();
  for (int i = 0; i < this->syminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syminfos(i));
  }

  // repeated .FateInfo fateInfos = 3;
  total_size += 1 * this->fateinfos_size();
  for (int i = 0; i < this->fateinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fateinfos(i));
  }

  // repeated .BackpackItem markItems = 4;
  total_size += 1 * this->markitems_size();
  for (int i = 0; i < this->markitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->markitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFateResult::MergeFrom(const GCFateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  syminfos_.MergeFrom(from.syminfos_);
  fateinfos_.MergeFrom(from.fateinfos_);
  markitems_.MergeFrom(from.markitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_transttype()) {
      set_transttype(from.transttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFateResult::CopyFrom(const GCFateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFateResult::IsInitialized() const {

  return true;
}

void GCFateResult::Swap(GCFateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    syminfos_.Swap(&other->syminfos_);
    fateinfos_.Swap(&other->fateinfos_);
    markitems_.Swap(&other->markitems_);
    std::swap(transttype_, other->transttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFateResult_descriptor_;
  metadata.reflection = GCFateResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
