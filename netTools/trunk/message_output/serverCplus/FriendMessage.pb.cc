// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGFriendListData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFriendListData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCFriendListDataBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCFriendListDataBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOptionFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOptionFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOptionFriendBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOptionFriendBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushPersonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushPersonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetFriendDataBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetFriendDataBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFairy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFairy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTrackEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTrackEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTrackEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTrackEnemy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendMessage_2eproto() {
  protobuf_AddDesc_FriendMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGFriendListData_descriptor_ = file->message_type(0);
  static const int CGFriendListData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, gender_),
  };
  CGFriendListData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFriendListData_descriptor_,
      CGFriendListData::default_instance_,
      CGFriendListData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFriendListData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFriendListData));
  GCFriendListDataBack_descriptor_ = file->message_type(1);
  static const int GCFriendListDataBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFriendListDataBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFriendListDataBack, frienddata_),
  };
  GCFriendListDataBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCFriendListDataBack_descriptor_,
      GCFriendListDataBack::default_instance_,
      GCFriendListDataBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFriendListDataBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCFriendListDataBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCFriendListDataBack));
  CGOptionFriend_descriptor_ = file->message_type(2);
  static const int CGOptionFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOptionFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOptionFriend, objid_),
  };
  CGOptionFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOptionFriend_descriptor_,
      CGOptionFriend::default_instance_,
      CGOptionFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOptionFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOptionFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOptionFriend));
  GCOptionFriendBack_descriptor_ = file->message_type(3);
  static const int GCOptionFriendBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOptionFriendBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOptionFriendBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOptionFriendBack, frienddata_),
  };
  GCOptionFriendBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOptionFriendBack_descriptor_,
      GCOptionFriendBack::default_instance_,
      GCOptionFriendBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOptionFriendBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOptionFriendBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOptionFriendBack));
  GCPushAddFriend_descriptor_ = file->message_type(4);
  static const int GCPushAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAddFriend, frienddata_),
  };
  GCPushAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushAddFriend_descriptor_,
      GCPushAddFriend::default_instance_,
      GCPushAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushAddFriend));
  GCPushPersonMessage_descriptor_ = file->message_type(5);
  static const int GCPushPersonMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushPersonMessage, permsg_),
  };
  GCPushPersonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushPersonMessage_descriptor_,
      GCPushPersonMessage::default_instance_,
      GCPushPersonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushPersonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushPersonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushPersonMessage));
  CGGetFriendData_descriptor_ = file->message_type(6);
  static const int CGGetFriendData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFriendData, objid_),
  };
  CGGetFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetFriendData_descriptor_,
      CGGetFriendData::default_instance_,
      CGGetFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetFriendData));
  GCGetFriendDataBack_descriptor_ = file->message_type(7);
  static const int GCGetFriendDataBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFriendDataBack, frienddata_),
  };
  GCGetFriendDataBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetFriendDataBack_descriptor_,
      GCGetFriendDataBack::default_instance_,
      GCGetFriendDataBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFriendDataBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetFriendDataBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetFriendDataBack));
  CGFairy_descriptor_ = file->message_type(8);
  static const int CGFairy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFairy, content_),
  };
  CGFairy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFairy_descriptor_,
      CGFairy::default_instance_,
      CGFairy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFairy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFairy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFairy));
  CGTrackEnemy_descriptor_ = file->message_type(9);
  static const int CGTrackEnemy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTrackEnemy, enemyplayerid_),
  };
  CGTrackEnemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTrackEnemy_descriptor_,
      CGTrackEnemy::default_instance_,
      CGTrackEnemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTrackEnemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTrackEnemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTrackEnemy));
  GCTrackEnemy_descriptor_ = file->message_type(10);
  static const int GCTrackEnemy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrackEnemy, targetpos_),
  };
  GCTrackEnemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTrackEnemy_descriptor_,
      GCTrackEnemy::default_instance_,
      GCTrackEnemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrackEnemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrackEnemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTrackEnemy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFriendListData_descriptor_, &CGFriendListData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCFriendListDataBack_descriptor_, &GCFriendListDataBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOptionFriend_descriptor_, &CGOptionFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOptionFriendBack_descriptor_, &GCOptionFriendBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushAddFriend_descriptor_, &GCPushAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushPersonMessage_descriptor_, &GCPushPersonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetFriendData_descriptor_, &CGGetFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetFriendDataBack_descriptor_, &GCGetFriendDataBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFairy_descriptor_, &CGFairy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTrackEnemy_descriptor_, &CGTrackEnemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTrackEnemy_descriptor_, &GCTrackEnemy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendMessage_2eproto() {
  delete CGFriendListData::default_instance_;
  delete CGFriendListData_reflection_;
  delete GCFriendListDataBack::default_instance_;
  delete GCFriendListDataBack_reflection_;
  delete CGOptionFriend::default_instance_;
  delete CGOptionFriend_reflection_;
  delete GCOptionFriendBack::default_instance_;
  delete GCOptionFriendBack_reflection_;
  delete GCPushAddFriend::default_instance_;
  delete GCPushAddFriend_reflection_;
  delete GCPushPersonMessage::default_instance_;
  delete GCPushPersonMessage_reflection_;
  delete CGGetFriendData::default_instance_;
  delete CGGetFriendData_reflection_;
  delete GCGetFriendDataBack::default_instance_;
  delete GCGetFriendDataBack_reflection_;
  delete CGFairy::default_instance_;
  delete CGFairy_reflection_;
  delete CGTrackEnemy::default_instance_;
  delete CGTrackEnemy_reflection_;
  delete GCTrackEnemy::default_instance_;
  delete GCTrackEnemy_reflection_;
}

void protobuf_AddDesc_FriendMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FriendMessage.proto\032\022InnerMessage.prot"
    "o\"T\n\020CGFriendListData\022\014\n\004type\030\001 \001(\005\022\022\n\np"
    "layername\030\002 \001(\t\022\016\n\006region\030\003 \001(\005\022\016\n\006gende"
    "r\030\004 \001(\005\"E\n\024GCFriendListDataBack\022\014\n\004type\030"
    "\001 \001(\005\022\037\n\nfrienddata\030\002 \003(\0132\013.FriendData\"-"
    "\n\016CGOptionFriend\022\014\n\004type\030\001 \001(\005\022\r\n\005objId\030"
    "\002 \003(\003\"Q\n\022GCOptionFriendBack\022\014\n\004flag\030\001 \001("
    "\005\022\014\n\004type\030\002 \001(\005\022\037\n\nfrienddata\030\003 \003(\0132\013.Fr"
    "iendData\"2\n\017GCPushAddFriend\022\037\n\nfrienddat"
    "a\030\001 \003(\0132\013.FriendData\"9\n\023GCPushPersonMess"
    "age\022\"\n\006permsg\030\001 \003(\0132\022.PersonalMessagees\""
    " \n\017CGGetFriendData\022\r\n\005objId\030\001 \001(\003\"6\n\023GCG"
    "etFriendDataBack\022\037\n\nfrienddata\030\001 \001(\0132\013.F"
    "riendData\"\032\n\007CGFairy\022\017\n\007content\030\001 \001(\t\"%\n"
    "\014CGTrackEnemy\022\025\n\renemyPlayerId\030\001 \001(\003\"/\n\014"
    "GCTrackEnemy\022\037\n\ttargetPos\030\002 \001(\0132\014.Vector"
    "3InfoB\031\n\027com.mile.common.message", 672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendMessage.proto", &protobuf_RegisterTypes);
  CGFriendListData::default_instance_ = new CGFriendListData();
  GCFriendListDataBack::default_instance_ = new GCFriendListDataBack();
  CGOptionFriend::default_instance_ = new CGOptionFriend();
  GCOptionFriendBack::default_instance_ = new GCOptionFriendBack();
  GCPushAddFriend::default_instance_ = new GCPushAddFriend();
  GCPushPersonMessage::default_instance_ = new GCPushPersonMessage();
  CGGetFriendData::default_instance_ = new CGGetFriendData();
  GCGetFriendDataBack::default_instance_ = new GCGetFriendDataBack();
  CGFairy::default_instance_ = new CGFairy();
  CGTrackEnemy::default_instance_ = new CGTrackEnemy();
  GCTrackEnemy::default_instance_ = new GCTrackEnemy();
  CGFriendListData::default_instance_->InitAsDefaultInstance();
  GCFriendListDataBack::default_instance_->InitAsDefaultInstance();
  CGOptionFriend::default_instance_->InitAsDefaultInstance();
  GCOptionFriendBack::default_instance_->InitAsDefaultInstance();
  GCPushAddFriend::default_instance_->InitAsDefaultInstance();
  GCPushPersonMessage::default_instance_->InitAsDefaultInstance();
  CGGetFriendData::default_instance_->InitAsDefaultInstance();
  GCGetFriendDataBack::default_instance_->InitAsDefaultInstance();
  CGFairy::default_instance_->InitAsDefaultInstance();
  CGTrackEnemy::default_instance_->InitAsDefaultInstance();
  GCTrackEnemy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendMessage_2eproto {
  StaticDescriptorInitializer_FriendMessage_2eproto() {
    protobuf_AddDesc_FriendMessage_2eproto();
  }
} static_descriptor_initializer_FriendMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGFriendListData::kTypeFieldNumber;
const int CGFriendListData::kPlayernameFieldNumber;
const int CGFriendListData::kRegionFieldNumber;
const int CGFriendListData::kGenderFieldNumber;
#endif  // !_MSC_VER

CGFriendListData::CGFriendListData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFriendListData)
}

void CGFriendListData::InitAsDefaultInstance() {
}

CGFriendListData::CGFriendListData(const CGFriendListData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFriendListData)
}

void CGFriendListData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_ = 0;
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFriendListData::~CGFriendListData() {
  // @@protoc_insertion_point(destructor:CGFriendListData)
  SharedDtor();
}

void CGFriendListData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void CGFriendListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFriendListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFriendListData_descriptor_;
}

const CGFriendListData& CGFriendListData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

CGFriendListData* CGFriendListData::default_instance_ = NULL;

CGFriendListData* CGFriendListData::New() const {
  return new CGFriendListData;
}

void CGFriendListData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGFriendListData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, gender_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFriendListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFriendListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // optional string playername = 2;
      case 2: {
        if (tag == 18) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_region;
        break;
      }

      // optional int32 region = 3;
      case 3: {
        if (tag == 24) {
         parse_region:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
          set_has_region();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }

      // optional int32 gender = 4;
      case 4: {
        if (tag == 32) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFriendListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFriendListData)
  return false;
#undef DO_
}

void CGFriendListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFriendListData)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->region(), output);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFriendListData)
}

::google::protobuf::uint8* CGFriendListData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFriendListData)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 region = 3;
  if (has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->region(), target);
  }

  // optional int32 gender = 4;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFriendListData)
  return target;
}

int CGFriendListData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFriendListData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFriendListData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFriendListData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFriendListData::MergeFrom(const CGFriendListData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFriendListData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFriendListData::CopyFrom(const CGFriendListData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFriendListData::IsInitialized() const {

  return true;
}

void CGFriendListData::Swap(CGFriendListData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playername_, other->playername_);
    std::swap(region_, other->region_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFriendListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFriendListData_descriptor_;
  metadata.reflection = CGFriendListData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCFriendListDataBack::kTypeFieldNumber;
const int GCFriendListDataBack::kFrienddataFieldNumber;
#endif  // !_MSC_VER

GCFriendListDataBack::GCFriendListDataBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCFriendListDataBack)
}

void GCFriendListDataBack::InitAsDefaultInstance() {
}

GCFriendListDataBack::GCFriendListDataBack(const GCFriendListDataBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCFriendListDataBack)
}

void GCFriendListDataBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCFriendListDataBack::~GCFriendListDataBack() {
  // @@protoc_insertion_point(destructor:GCFriendListDataBack)
  SharedDtor();
}

void GCFriendListDataBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCFriendListDataBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCFriendListDataBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCFriendListDataBack_descriptor_;
}

const GCFriendListDataBack& GCFriendListDataBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCFriendListDataBack* GCFriendListDataBack::default_instance_ = NULL;

GCFriendListDataBack* GCFriendListDataBack::New() const {
  return new GCFriendListDataBack;
}

void GCFriendListDataBack::Clear() {
  type_ = 0;
  frienddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCFriendListDataBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCFriendListDataBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frienddata;
        break;
      }

      // repeated .FriendData frienddata = 2;
      case 2: {
        if (tag == 18) {
         parse_frienddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frienddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_frienddata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCFriendListDataBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCFriendListDataBack)
  return false;
#undef DO_
}

void GCFriendListDataBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCFriendListDataBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .FriendData frienddata = 2;
  for (int i = 0; i < this->frienddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frienddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCFriendListDataBack)
}

::google::protobuf::uint8* GCFriendListDataBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCFriendListDataBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .FriendData frienddata = 2;
  for (int i = 0; i < this->frienddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frienddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCFriendListDataBack)
  return target;
}

int GCFriendListDataBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .FriendData frienddata = 2;
  total_size += 1 * this->frienddata_size();
  for (int i = 0; i < this->frienddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frienddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCFriendListDataBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCFriendListDataBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCFriendListDataBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCFriendListDataBack::MergeFrom(const GCFriendListDataBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienddata_.MergeFrom(from.frienddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCFriendListDataBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCFriendListDataBack::CopyFrom(const GCFriendListDataBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCFriendListDataBack::IsInitialized() const {

  return true;
}

void GCFriendListDataBack::Swap(GCFriendListDataBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    frienddata_.Swap(&other->frienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCFriendListDataBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCFriendListDataBack_descriptor_;
  metadata.reflection = GCFriendListDataBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOptionFriend::kTypeFieldNumber;
const int CGOptionFriend::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGOptionFriend::CGOptionFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOptionFriend)
}

void CGOptionFriend::InitAsDefaultInstance() {
}

CGOptionFriend::CGOptionFriend(const CGOptionFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOptionFriend)
}

void CGOptionFriend::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOptionFriend::~CGOptionFriend() {
  // @@protoc_insertion_point(destructor:CGOptionFriend)
  SharedDtor();
}

void CGOptionFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOptionFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOptionFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOptionFriend_descriptor_;
}

const CGOptionFriend& CGOptionFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

CGOptionFriend* CGOptionFriend::default_instance_ = NULL;

CGOptionFriend* CGOptionFriend::New() const {
  return new CGOptionFriend;
}

void CGOptionFriend::Clear() {
  type_ = 0;
  objid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOptionFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOptionFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // repeated int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_objid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOptionFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOptionFriend)
  return false;
#undef DO_
}

void CGOptionFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOptionFriend)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->objid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOptionFriend)
}

::google::protobuf::uint8* CGOptionFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOptionFriend)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->objid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOptionFriend)
  return target;
}

int CGOptionFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int64 objId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objid(i));
    }
    total_size += 1 * this->objid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOptionFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOptionFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOptionFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOptionFriend::MergeFrom(const CGOptionFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  objid_.MergeFrom(from.objid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOptionFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOptionFriend::CopyFrom(const CGOptionFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOptionFriend::IsInitialized() const {

  return true;
}

void CGOptionFriend::Swap(CGOptionFriend* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    objid_.Swap(&other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOptionFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOptionFriend_descriptor_;
  metadata.reflection = CGOptionFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOptionFriendBack::kFlagFieldNumber;
const int GCOptionFriendBack::kTypeFieldNumber;
const int GCOptionFriendBack::kFrienddataFieldNumber;
#endif  // !_MSC_VER

GCOptionFriendBack::GCOptionFriendBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOptionFriendBack)
}

void GCOptionFriendBack::InitAsDefaultInstance() {
}

GCOptionFriendBack::GCOptionFriendBack(const GCOptionFriendBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOptionFriendBack)
}

void GCOptionFriendBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOptionFriendBack::~GCOptionFriendBack() {
  // @@protoc_insertion_point(destructor:GCOptionFriendBack)
  SharedDtor();
}

void GCOptionFriendBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOptionFriendBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOptionFriendBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOptionFriendBack_descriptor_;
}

const GCOptionFriendBack& GCOptionFriendBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCOptionFriendBack* GCOptionFriendBack::default_instance_ = NULL;

GCOptionFriendBack* GCOptionFriendBack::New() const {
  return new GCOptionFriendBack;
}

void GCOptionFriendBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCOptionFriendBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  frienddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOptionFriendBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOptionFriendBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frienddata;
        break;
      }

      // repeated .FriendData frienddata = 3;
      case 3: {
        if (tag == 26) {
         parse_frienddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frienddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_frienddata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOptionFriendBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOptionFriendBack)
  return false;
#undef DO_
}

void GCOptionFriendBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOptionFriendBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .FriendData frienddata = 3;
  for (int i = 0; i < this->frienddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->frienddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOptionFriendBack)
}

::google::protobuf::uint8* GCOptionFriendBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOptionFriendBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .FriendData frienddata = 3;
  for (int i = 0; i < this->frienddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->frienddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOptionFriendBack)
  return target;
}

int GCOptionFriendBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .FriendData frienddata = 3;
  total_size += 1 * this->frienddata_size();
  for (int i = 0; i < this->frienddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frienddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOptionFriendBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOptionFriendBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOptionFriendBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOptionFriendBack::MergeFrom(const GCOptionFriendBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienddata_.MergeFrom(from.frienddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOptionFriendBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOptionFriendBack::CopyFrom(const GCOptionFriendBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOptionFriendBack::IsInitialized() const {

  return true;
}

void GCOptionFriendBack::Swap(GCOptionFriendBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(type_, other->type_);
    frienddata_.Swap(&other->frienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOptionFriendBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOptionFriendBack_descriptor_;
  metadata.reflection = GCOptionFriendBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushAddFriend::kFrienddataFieldNumber;
#endif  // !_MSC_VER

GCPushAddFriend::GCPushAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushAddFriend)
}

void GCPushAddFriend::InitAsDefaultInstance() {
}

GCPushAddFriend::GCPushAddFriend(const GCPushAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushAddFriend)
}

void GCPushAddFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushAddFriend::~GCPushAddFriend() {
  // @@protoc_insertion_point(destructor:GCPushAddFriend)
  SharedDtor();
}

void GCPushAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushAddFriend_descriptor_;
}

const GCPushAddFriend& GCPushAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCPushAddFriend* GCPushAddFriend::default_instance_ = NULL;

GCPushAddFriend* GCPushAddFriend::New() const {
  return new GCPushAddFriend;
}

void GCPushAddFriend::Clear() {
  frienddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendData frienddata = 1;
      case 1: {
        if (tag == 10) {
         parse_frienddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frienddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_frienddata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushAddFriend)
  return false;
#undef DO_
}

void GCPushAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushAddFriend)
  // repeated .FriendData frienddata = 1;
  for (int i = 0; i < this->frienddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frienddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushAddFriend)
}

::google::protobuf::uint8* GCPushAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushAddFriend)
  // repeated .FriendData frienddata = 1;
  for (int i = 0; i < this->frienddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frienddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushAddFriend)
  return target;
}

int GCPushAddFriend::ByteSize() const {
  int total_size = 0;

  // repeated .FriendData frienddata = 1;
  total_size += 1 * this->frienddata_size();
  for (int i = 0; i < this->frienddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frienddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushAddFriend::MergeFrom(const GCPushAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienddata_.MergeFrom(from.frienddata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushAddFriend::CopyFrom(const GCPushAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushAddFriend::IsInitialized() const {

  return true;
}

void GCPushAddFriend::Swap(GCPushAddFriend* other) {
  if (other != this) {
    frienddata_.Swap(&other->frienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushAddFriend_descriptor_;
  metadata.reflection = GCPushAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushPersonMessage::kPermsgFieldNumber;
#endif  // !_MSC_VER

GCPushPersonMessage::GCPushPersonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushPersonMessage)
}

void GCPushPersonMessage::InitAsDefaultInstance() {
}

GCPushPersonMessage::GCPushPersonMessage(const GCPushPersonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushPersonMessage)
}

void GCPushPersonMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushPersonMessage::~GCPushPersonMessage() {
  // @@protoc_insertion_point(destructor:GCPushPersonMessage)
  SharedDtor();
}

void GCPushPersonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushPersonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushPersonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushPersonMessage_descriptor_;
}

const GCPushPersonMessage& GCPushPersonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCPushPersonMessage* GCPushPersonMessage::default_instance_ = NULL;

GCPushPersonMessage* GCPushPersonMessage::New() const {
  return new GCPushPersonMessage;
}

void GCPushPersonMessage::Clear() {
  permsg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushPersonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushPersonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PersonalMessagees permsg = 1;
      case 1: {
        if (tag == 10) {
         parse_permsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_permsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_permsg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushPersonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushPersonMessage)
  return false;
#undef DO_
}

void GCPushPersonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushPersonMessage)
  // repeated .PersonalMessagees permsg = 1;
  for (int i = 0; i < this->permsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->permsg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushPersonMessage)
}

::google::protobuf::uint8* GCPushPersonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushPersonMessage)
  // repeated .PersonalMessagees permsg = 1;
  for (int i = 0; i < this->permsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->permsg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushPersonMessage)
  return target;
}

int GCPushPersonMessage::ByteSize() const {
  int total_size = 0;

  // repeated .PersonalMessagees permsg = 1;
  total_size += 1 * this->permsg_size();
  for (int i = 0; i < this->permsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->permsg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushPersonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushPersonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushPersonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushPersonMessage::MergeFrom(const GCPushPersonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  permsg_.MergeFrom(from.permsg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushPersonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushPersonMessage::CopyFrom(const GCPushPersonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushPersonMessage::IsInitialized() const {

  return true;
}

void GCPushPersonMessage::Swap(GCPushPersonMessage* other) {
  if (other != this) {
    permsg_.Swap(&other->permsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushPersonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushPersonMessage_descriptor_;
  metadata.reflection = GCPushPersonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetFriendData::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGGetFriendData::CGGetFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetFriendData)
}

void CGGetFriendData::InitAsDefaultInstance() {
}

CGGetFriendData::CGGetFriendData(const CGGetFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetFriendData)
}

void CGGetFriendData::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetFriendData::~CGGetFriendData() {
  // @@protoc_insertion_point(destructor:CGGetFriendData)
  SharedDtor();
}

void CGGetFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetFriendData_descriptor_;
}

const CGGetFriendData& CGGetFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

CGGetFriendData* CGGetFriendData::default_instance_ = NULL;

CGGetFriendData* CGGetFriendData::New() const {
  return new CGGetFriendData;
}

void CGGetFriendData::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetFriendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetFriendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetFriendData)
  return false;
#undef DO_
}

void CGGetFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetFriendData)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetFriendData)
}

::google::protobuf::uint8* CGGetFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetFriendData)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetFriendData)
  return target;
}

int CGGetFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetFriendData::MergeFrom(const CGGetFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetFriendData::CopyFrom(const CGGetFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetFriendData::IsInitialized() const {

  return true;
}

void CGGetFriendData::Swap(CGGetFriendData* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetFriendData_descriptor_;
  metadata.reflection = CGGetFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetFriendDataBack::kFrienddataFieldNumber;
#endif  // !_MSC_VER

GCGetFriendDataBack::GCGetFriendDataBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetFriendDataBack)
}

void GCGetFriendDataBack::InitAsDefaultInstance() {
  frienddata_ = const_cast< ::FriendData*>(&::FriendData::default_instance());
}

GCGetFriendDataBack::GCGetFriendDataBack(const GCGetFriendDataBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetFriendDataBack)
}

void GCGetFriendDataBack::SharedCtor() {
  _cached_size_ = 0;
  frienddata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetFriendDataBack::~GCGetFriendDataBack() {
  // @@protoc_insertion_point(destructor:GCGetFriendDataBack)
  SharedDtor();
}

void GCGetFriendDataBack::SharedDtor() {
  if (this != default_instance_) {
    delete frienddata_;
  }
}

void GCGetFriendDataBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetFriendDataBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetFriendDataBack_descriptor_;
}

const GCGetFriendDataBack& GCGetFriendDataBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCGetFriendDataBack* GCGetFriendDataBack::default_instance_ = NULL;

GCGetFriendDataBack* GCGetFriendDataBack::New() const {
  return new GCGetFriendDataBack;
}

void GCGetFriendDataBack::Clear() {
  if (has_frienddata()) {
    if (frienddata_ != NULL) frienddata_->::FriendData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetFriendDataBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetFriendDataBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendData frienddata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frienddata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetFriendDataBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetFriendDataBack)
  return false;
#undef DO_
}

void GCGetFriendDataBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetFriendDataBack)
  // optional .FriendData frienddata = 1;
  if (has_frienddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frienddata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetFriendDataBack)
}

::google::protobuf::uint8* GCGetFriendDataBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetFriendDataBack)
  // optional .FriendData frienddata = 1;
  if (has_frienddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frienddata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetFriendDataBack)
  return target;
}

int GCGetFriendDataBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendData frienddata = 1;
    if (has_frienddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frienddata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetFriendDataBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetFriendDataBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetFriendDataBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetFriendDataBack::MergeFrom(const GCGetFriendDataBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frienddata()) {
      mutable_frienddata()->::FriendData::MergeFrom(from.frienddata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetFriendDataBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetFriendDataBack::CopyFrom(const GCGetFriendDataBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetFriendDataBack::IsInitialized() const {

  return true;
}

void GCGetFriendDataBack::Swap(GCGetFriendDataBack* other) {
  if (other != this) {
    std::swap(frienddata_, other->frienddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetFriendDataBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetFriendDataBack_descriptor_;
  metadata.reflection = GCGetFriendDataBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGFairy::kContentFieldNumber;
#endif  // !_MSC_VER

CGFairy::CGFairy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFairy)
}

void CGFairy::InitAsDefaultInstance() {
}

CGFairy::CGFairy(const CGFairy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFairy)
}

void CGFairy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFairy::~CGFairy() {
  // @@protoc_insertion_point(destructor:CGFairy)
  SharedDtor();
}

void CGFairy::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CGFairy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFairy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFairy_descriptor_;
}

const CGFairy& CGFairy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

CGFairy* CGFairy::default_instance_ = NULL;

CGFairy* CGFairy::New() const {
  return new CGFairy;
}

void CGFairy::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFairy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFairy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGFairy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFairy)
  return false;
#undef DO_
}

void CGFairy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFairy)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFairy)
}

::google::protobuf::uint8* CGFairy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFairy)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFairy)
  return target;
}

int CGFairy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFairy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFairy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFairy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFairy::MergeFrom(const CGFairy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFairy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFairy::CopyFrom(const CGFairy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFairy::IsInitialized() const {

  return true;
}

void CGFairy::Swap(CGFairy* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFairy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFairy_descriptor_;
  metadata.reflection = CGFairy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTrackEnemy::kEnemyPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGTrackEnemy::CGTrackEnemy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTrackEnemy)
}

void CGTrackEnemy::InitAsDefaultInstance() {
}

CGTrackEnemy::CGTrackEnemy(const CGTrackEnemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTrackEnemy)
}

void CGTrackEnemy::SharedCtor() {
  _cached_size_ = 0;
  enemyplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTrackEnemy::~CGTrackEnemy() {
  // @@protoc_insertion_point(destructor:CGTrackEnemy)
  SharedDtor();
}

void CGTrackEnemy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGTrackEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTrackEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTrackEnemy_descriptor_;
}

const CGTrackEnemy& CGTrackEnemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

CGTrackEnemy* CGTrackEnemy::default_instance_ = NULL;

CGTrackEnemy* CGTrackEnemy::New() const {
  return new CGTrackEnemy;
}

void CGTrackEnemy::Clear() {
  enemyplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTrackEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTrackEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 enemyPlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enemyplayerid_)));
          set_has_enemyplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTrackEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTrackEnemy)
  return false;
#undef DO_
}

void CGTrackEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTrackEnemy)
  // optional int64 enemyPlayerId = 1;
  if (has_enemyplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->enemyplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTrackEnemy)
}

::google::protobuf::uint8* CGTrackEnemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTrackEnemy)
  // optional int64 enemyPlayerId = 1;
  if (has_enemyplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->enemyplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTrackEnemy)
  return target;
}

int CGTrackEnemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 enemyPlayerId = 1;
    if (has_enemyplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enemyplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTrackEnemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTrackEnemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTrackEnemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTrackEnemy::MergeFrom(const CGTrackEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyplayerid()) {
      set_enemyplayerid(from.enemyplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTrackEnemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTrackEnemy::CopyFrom(const CGTrackEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTrackEnemy::IsInitialized() const {

  return true;
}

void CGTrackEnemy::Swap(CGTrackEnemy* other) {
  if (other != this) {
    std::swap(enemyplayerid_, other->enemyplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTrackEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTrackEnemy_descriptor_;
  metadata.reflection = CGTrackEnemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTrackEnemy::kTargetPosFieldNumber;
#endif  // !_MSC_VER

GCTrackEnemy::GCTrackEnemy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTrackEnemy)
}

void GCTrackEnemy::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCTrackEnemy::GCTrackEnemy(const GCTrackEnemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTrackEnemy)
}

void GCTrackEnemy::SharedCtor() {
  _cached_size_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTrackEnemy::~GCTrackEnemy() {
  // @@protoc_insertion_point(destructor:GCTrackEnemy)
  SharedDtor();
}

void GCTrackEnemy::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void GCTrackEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTrackEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTrackEnemy_descriptor_;
}

const GCTrackEnemy& GCTrackEnemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMessage_2eproto();
  return *default_instance_;
}

GCTrackEnemy* GCTrackEnemy::default_instance_ = NULL;

GCTrackEnemy* GCTrackEnemy::New() const {
  return new GCTrackEnemy;
}

void GCTrackEnemy::Clear() {
  if (has_targetpos()) {
    if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTrackEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTrackEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3Info targetPos = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTrackEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTrackEnemy)
  return false;
#undef DO_
}

void GCTrackEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTrackEnemy)
  // optional .Vector3Info targetPos = 2;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTrackEnemy)
}

::google::protobuf::uint8* GCTrackEnemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTrackEnemy)
  // optional .Vector3Info targetPos = 2;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTrackEnemy)
  return target;
}

int GCTrackEnemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3Info targetPos = 2;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTrackEnemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTrackEnemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTrackEnemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTrackEnemy::MergeFrom(const GCTrackEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTrackEnemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTrackEnemy::CopyFrom(const GCTrackEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTrackEnemy::IsInitialized() const {

  return true;
}

void GCTrackEnemy::Swap(GCTrackEnemy* other) {
  if (other != this) {
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTrackEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTrackEnemy_descriptor_;
  metadata.reflection = GCTrackEnemy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
