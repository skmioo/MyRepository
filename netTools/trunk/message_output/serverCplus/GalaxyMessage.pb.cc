// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GalaxyMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GalaxyMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* killBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  killBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* bossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGalaxyOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGalaxyOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSingleGalaxyOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSingleGalaxyOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSingleGalaxyOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSingleGalaxyOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGWorldGalaxyOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGWorldGalaxyOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCWorldGalaxyOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCWorldGalaxyOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGalaxyHomeOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGalaxyHomeOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGalaxyHomeOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGalaxyHomeOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBackLastScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBackLastScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGalaxyInviteGoHome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGalaxyInviteGoHome_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetTeamLeaderSceneID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetTeamLeaderSceneID_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetTeamLeaderSceneID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetTeamLeaderSceneID_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GalaxyMessage_2eproto() {
  protobuf_AddDesc_GalaxyMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GalaxyMessage.proto");
  GOOGLE_CHECK(file != NULL);
  killBossInfo_descriptor_ = file->message_type(0);
  static const int killBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(killBossInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(killBossInfo, time_),
  };
  killBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      killBossInfo_descriptor_,
      killBossInfo::default_instance_,
      killBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(killBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(killBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(killBossInfo));
  bossInfo_descriptor_ = file->message_type(1);
  static const int bossInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossInfo, relivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossInfo, killinfo_),
  };
  bossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bossInfo_descriptor_,
      bossInfo::default_instance_,
      bossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bossInfo));
  GCGalaxyOperateResult_descriptor_ = file->message_type(2);
  static const int GCGalaxyOperateResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, tired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, homeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, remaincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, boss_),
  };
  GCGalaxyOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGalaxyOperateResult_descriptor_,
      GCGalaxyOperateResult::default_instance_,
      GCGalaxyOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGalaxyOperateResult));
  CGSingleGalaxyOperate_descriptor_ = file->message_type(3);
  static const int CGSingleGalaxyOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSingleGalaxyOperate, dungeonid_),
  };
  CGSingleGalaxyOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSingleGalaxyOperate_descriptor_,
      CGSingleGalaxyOperate::default_instance_,
      CGSingleGalaxyOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSingleGalaxyOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSingleGalaxyOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSingleGalaxyOperate));
  GCSingleGalaxyOperate_descriptor_ = file->message_type(4);
  static const int GCSingleGalaxyOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSingleGalaxyOperate, dungeonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSingleGalaxyOperate, remaincnt_),
  };
  GCSingleGalaxyOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSingleGalaxyOperate_descriptor_,
      GCSingleGalaxyOperate::default_instance_,
      GCSingleGalaxyOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSingleGalaxyOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSingleGalaxyOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSingleGalaxyOperate));
  CGWorldGalaxyOperate_descriptor_ = file->message_type(5);
  static const int CGWorldGalaxyOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldGalaxyOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldGalaxyOperate, worldid_),
  };
  CGWorldGalaxyOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGWorldGalaxyOperate_descriptor_,
      CGWorldGalaxyOperate::default_instance_,
      CGWorldGalaxyOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldGalaxyOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGWorldGalaxyOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGWorldGalaxyOperate));
  GCWorldGalaxyOperate_descriptor_ = file->message_type(6);
  static const int GCWorldGalaxyOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldGalaxyOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldGalaxyOperate, worldid_),
  };
  GCWorldGalaxyOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCWorldGalaxyOperate_descriptor_,
      GCWorldGalaxyOperate::default_instance_,
      GCWorldGalaxyOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldGalaxyOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCWorldGalaxyOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCWorldGalaxyOperate));
  CGGalaxyHomeOperate_descriptor_ = file->message_type(7);
  static const int CGGalaxyHomeOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGalaxyHomeOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGalaxyHomeOperate, homeid_),
  };
  CGGalaxyHomeOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGalaxyHomeOperate_descriptor_,
      CGGalaxyHomeOperate::default_instance_,
      CGGalaxyHomeOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGalaxyHomeOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGalaxyHomeOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGalaxyHomeOperate));
  GCGalaxyHomeOperate_descriptor_ = file->message_type(8);
  static const int GCGalaxyHomeOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyHomeOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyHomeOperate, homeid_),
  };
  GCGalaxyHomeOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGalaxyHomeOperate_descriptor_,
      GCGalaxyHomeOperate::default_instance_,
      GCGalaxyHomeOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyHomeOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyHomeOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGalaxyHomeOperate));
  CGBackLastScene_descriptor_ = file->message_type(9);
  static const int CGBackLastScene_offsets_[1] = {
  };
  CGBackLastScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBackLastScene_descriptor_,
      CGBackLastScene::default_instance_,
      CGBackLastScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackLastScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBackLastScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBackLastScene));
  GCGalaxyInviteGoHome_descriptor_ = file->message_type(10);
  static const int GCGalaxyInviteGoHome_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyInviteGoHome, homeid_),
  };
  GCGalaxyInviteGoHome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGalaxyInviteGoHome_descriptor_,
      GCGalaxyInviteGoHome::default_instance_,
      GCGalaxyInviteGoHome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyInviteGoHome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGalaxyInviteGoHome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGalaxyInviteGoHome));
  CGGetTeamLeaderSceneID_descriptor_ = file->message_type(11);
  static const int CGGetTeamLeaderSceneID_offsets_[1] = {
  };
  CGGetTeamLeaderSceneID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetTeamLeaderSceneID_descriptor_,
      CGGetTeamLeaderSceneID::default_instance_,
      CGGetTeamLeaderSceneID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetTeamLeaderSceneID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetTeamLeaderSceneID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetTeamLeaderSceneID));
  GCGetTeamLeaderSceneID_descriptor_ = file->message_type(12);
  static const int GCGetTeamLeaderSceneID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetTeamLeaderSceneID, sceneid_),
  };
  GCGetTeamLeaderSceneID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetTeamLeaderSceneID_descriptor_,
      GCGetTeamLeaderSceneID::default_instance_,
      GCGetTeamLeaderSceneID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetTeamLeaderSceneID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetTeamLeaderSceneID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetTeamLeaderSceneID));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GalaxyMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    killBossInfo_descriptor_, &killBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bossInfo_descriptor_, &bossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGalaxyOperateResult_descriptor_, &GCGalaxyOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSingleGalaxyOperate_descriptor_, &CGSingleGalaxyOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSingleGalaxyOperate_descriptor_, &GCSingleGalaxyOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGWorldGalaxyOperate_descriptor_, &CGWorldGalaxyOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCWorldGalaxyOperate_descriptor_, &GCWorldGalaxyOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGalaxyHomeOperate_descriptor_, &CGGalaxyHomeOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGalaxyHomeOperate_descriptor_, &GCGalaxyHomeOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBackLastScene_descriptor_, &CGBackLastScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGalaxyInviteGoHome_descriptor_, &GCGalaxyInviteGoHome::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetTeamLeaderSceneID_descriptor_, &CGGetTeamLeaderSceneID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetTeamLeaderSceneID_descriptor_, &GCGetTeamLeaderSceneID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GalaxyMessage_2eproto() {
  delete killBossInfo::default_instance_;
  delete killBossInfo_reflection_;
  delete bossInfo::default_instance_;
  delete bossInfo_reflection_;
  delete GCGalaxyOperateResult::default_instance_;
  delete GCGalaxyOperateResult_reflection_;
  delete CGSingleGalaxyOperate::default_instance_;
  delete CGSingleGalaxyOperate_reflection_;
  delete GCSingleGalaxyOperate::default_instance_;
  delete GCSingleGalaxyOperate_reflection_;
  delete CGWorldGalaxyOperate::default_instance_;
  delete CGWorldGalaxyOperate_reflection_;
  delete GCWorldGalaxyOperate::default_instance_;
  delete GCWorldGalaxyOperate_reflection_;
  delete CGGalaxyHomeOperate::default_instance_;
  delete CGGalaxyHomeOperate_reflection_;
  delete GCGalaxyHomeOperate::default_instance_;
  delete GCGalaxyHomeOperate_reflection_;
  delete CGBackLastScene::default_instance_;
  delete CGBackLastScene_reflection_;
  delete GCGalaxyInviteGoHome::default_instance_;
  delete GCGalaxyInviteGoHome_reflection_;
  delete CGGetTeamLeaderSceneID::default_instance_;
  delete CGGetTeamLeaderSceneID_reflection_;
  delete GCGetTeamLeaderSceneID::default_instance_;
  delete GCGetTeamLeaderSceneID_reflection_;
}

void protobuf_AddDesc_GalaxyMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023GalaxyMessage.proto\"*\n\014killBossInfo\022\014\n"
    "\004name\030\001 \001(\t\022\014\n\004time\030\002 \001(\003\"O\n\010bossInfo\022\016\n"
    "\006bossID\030\001 \001(\005\022\022\n\nreliveTime\030\002 \001(\003\022\037\n\010kil"
    "lInfo\030\003 \003(\0132\r.killBossInfo\"s\n\025GCGalaxyOp"
    "erateResult\022\r\n\005tired\030\001 \001(\005\022\017\n\007worldID\030\002 "
    "\001(\005\022\016\n\006homeID\030\003 \001(\005\022\021\n\tremainCnt\030\004 \001(\005\022\027"
    "\n\004boss\030\005 \003(\0132\t.bossInfo\"*\n\025CGSingleGalax"
    "yOperate\022\021\n\tdungeonID\030\001 \001(\005\"=\n\025GCSingleG"
    "alaxyOperate\022\021\n\tdungeonID\030\001 \001(\005\022\021\n\tremai"
    "nCnt\030\002 \001(\005\"8\n\024CGWorldGalaxyOperate\022\017\n\007op"
    "erate\030\001 \001(\005\022\017\n\007worldID\030\002 \001(\005\"8\n\024GCWorldG"
    "alaxyOperate\022\017\n\007operate\030\001 \001(\005\022\017\n\007worldID"
    "\030\002 \001(\005\"6\n\023CGGalaxyHomeOperate\022\017\n\007operate"
    "\030\001 \001(\005\022\016\n\006homeID\030\002 \001(\005\"6\n\023GCGalaxyHomeOp"
    "erate\022\017\n\007operate\030\001 \001(\005\022\016\n\006homeID\030\002 \001(\005\"\021"
    "\n\017CGBackLastScene\"&\n\024GCGalaxyInviteGoHom"
    "e\022\016\n\006homeID\030\001 \001(\005\"\030\n\026CGGetTeamLeaderScen"
    "eID\")\n\026GCGetTeamLeaderSceneID\022\017\n\007sceneID"
    "\030\001 \001(\005B\031\n\027com.mile.common.message", 753);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GalaxyMessage.proto", &protobuf_RegisterTypes);
  killBossInfo::default_instance_ = new killBossInfo();
  bossInfo::default_instance_ = new bossInfo();
  GCGalaxyOperateResult::default_instance_ = new GCGalaxyOperateResult();
  CGSingleGalaxyOperate::default_instance_ = new CGSingleGalaxyOperate();
  GCSingleGalaxyOperate::default_instance_ = new GCSingleGalaxyOperate();
  CGWorldGalaxyOperate::default_instance_ = new CGWorldGalaxyOperate();
  GCWorldGalaxyOperate::default_instance_ = new GCWorldGalaxyOperate();
  CGGalaxyHomeOperate::default_instance_ = new CGGalaxyHomeOperate();
  GCGalaxyHomeOperate::default_instance_ = new GCGalaxyHomeOperate();
  CGBackLastScene::default_instance_ = new CGBackLastScene();
  GCGalaxyInviteGoHome::default_instance_ = new GCGalaxyInviteGoHome();
  CGGetTeamLeaderSceneID::default_instance_ = new CGGetTeamLeaderSceneID();
  GCGetTeamLeaderSceneID::default_instance_ = new GCGetTeamLeaderSceneID();
  killBossInfo::default_instance_->InitAsDefaultInstance();
  bossInfo::default_instance_->InitAsDefaultInstance();
  GCGalaxyOperateResult::default_instance_->InitAsDefaultInstance();
  CGSingleGalaxyOperate::default_instance_->InitAsDefaultInstance();
  GCSingleGalaxyOperate::default_instance_->InitAsDefaultInstance();
  CGWorldGalaxyOperate::default_instance_->InitAsDefaultInstance();
  GCWorldGalaxyOperate::default_instance_->InitAsDefaultInstance();
  CGGalaxyHomeOperate::default_instance_->InitAsDefaultInstance();
  GCGalaxyHomeOperate::default_instance_->InitAsDefaultInstance();
  CGBackLastScene::default_instance_->InitAsDefaultInstance();
  GCGalaxyInviteGoHome::default_instance_->InitAsDefaultInstance();
  CGGetTeamLeaderSceneID::default_instance_->InitAsDefaultInstance();
  GCGetTeamLeaderSceneID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GalaxyMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GalaxyMessage_2eproto {
  StaticDescriptorInitializer_GalaxyMessage_2eproto() {
    protobuf_AddDesc_GalaxyMessage_2eproto();
  }
} static_descriptor_initializer_GalaxyMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int killBossInfo::kNameFieldNumber;
const int killBossInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

killBossInfo::killBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:killBossInfo)
}

void killBossInfo::InitAsDefaultInstance() {
}

killBossInfo::killBossInfo(const killBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:killBossInfo)
}

void killBossInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

killBossInfo::~killBossInfo() {
  // @@protoc_insertion_point(destructor:killBossInfo)
  SharedDtor();
}

void killBossInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void killBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* killBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return killBossInfo_descriptor_;
}

const killBossInfo& killBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

killBossInfo* killBossInfo::default_instance_ = NULL;

killBossInfo* killBossInfo::New() const {
  return new killBossInfo;
}

void killBossInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool killBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killBossInfo)
  return false;
#undef DO_
}

void killBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killBossInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killBossInfo)
}

::google::protobuf::uint8* killBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:killBossInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killBossInfo)
  return target;
}

int killBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void killBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const killBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const killBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void killBossInfo::MergeFrom(const killBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void killBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void killBossInfo::CopyFrom(const killBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool killBossInfo::IsInitialized() const {

  return true;
}

void killBossInfo::Swap(killBossInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata killBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = killBossInfo_descriptor_;
  metadata.reflection = killBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bossInfo::kBossIDFieldNumber;
const int bossInfo::kReliveTimeFieldNumber;
const int bossInfo::kKillInfoFieldNumber;
#endif  // !_MSC_VER

bossInfo::bossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bossInfo)
}

void bossInfo::InitAsDefaultInstance() {
}

bossInfo::bossInfo(const bossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bossInfo)
}

void bossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  relivetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bossInfo::~bossInfo() {
  // @@protoc_insertion_point(destructor:bossInfo)
  SharedDtor();
}

void bossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bossInfo_descriptor_;
}

const bossInfo& bossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

bossInfo* bossInfo::default_instance_ = NULL;

bossInfo* bossInfo::New() const {
  return new bossInfo;
}

void bossInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0;
    relivetime_ = GOOGLE_LONGLONG(0);
  }
  killinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reliveTime;
        break;
      }

      // optional int64 reliveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_reliveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relivetime_)));
          set_has_relivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_killInfo;
        break;
      }

      // repeated .killBossInfo killInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_killInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_killInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bossInfo)
  return false;
#undef DO_
}

void bossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bossInfo)
  // optional int32 bossID = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // optional int64 reliveTime = 2;
  if (has_relivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->relivetime(), output);
  }

  // repeated .killBossInfo killInfo = 3;
  for (int i = 0; i < this->killinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->killinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bossInfo)
}

::google::protobuf::uint8* bossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bossInfo)
  // optional int32 bossID = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // optional int64 reliveTime = 2;
  if (has_relivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->relivetime(), target);
  }

  // repeated .killBossInfo killInfo = 3;
  for (int i = 0; i < this->killinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->killinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bossInfo)
  return target;
}

int bossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossID = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional int64 reliveTime = 2;
    if (has_relivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relivetime());
    }

  }
  // repeated .killBossInfo killInfo = 3;
  total_size += 1 * this->killinfo_size();
  for (int i = 0; i < this->killinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bossInfo::MergeFrom(const bossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  killinfo_.MergeFrom(from.killinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_relivetime()) {
      set_relivetime(from.relivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bossInfo::CopyFrom(const bossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bossInfo::IsInitialized() const {

  return true;
}

void bossInfo::Swap(bossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(relivetime_, other->relivetime_);
    killinfo_.Swap(&other->killinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bossInfo_descriptor_;
  metadata.reflection = bossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGalaxyOperateResult::kTiredFieldNumber;
const int GCGalaxyOperateResult::kWorldIDFieldNumber;
const int GCGalaxyOperateResult::kHomeIDFieldNumber;
const int GCGalaxyOperateResult::kRemainCntFieldNumber;
const int GCGalaxyOperateResult::kBossFieldNumber;
#endif  // !_MSC_VER

GCGalaxyOperateResult::GCGalaxyOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGalaxyOperateResult)
}

void GCGalaxyOperateResult::InitAsDefaultInstance() {
}

GCGalaxyOperateResult::GCGalaxyOperateResult(const GCGalaxyOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGalaxyOperateResult)
}

void GCGalaxyOperateResult::SharedCtor() {
  _cached_size_ = 0;
  tired_ = 0;
  worldid_ = 0;
  homeid_ = 0;
  remaincnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGalaxyOperateResult::~GCGalaxyOperateResult() {
  // @@protoc_insertion_point(destructor:GCGalaxyOperateResult)
  SharedDtor();
}

void GCGalaxyOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGalaxyOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGalaxyOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGalaxyOperateResult_descriptor_;
}

const GCGalaxyOperateResult& GCGalaxyOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCGalaxyOperateResult* GCGalaxyOperateResult::default_instance_ = NULL;

GCGalaxyOperateResult* GCGalaxyOperateResult::New() const {
  return new GCGalaxyOperateResult;
}

void GCGalaxyOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGalaxyOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tired_, remaincnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  boss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGalaxyOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGalaxyOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tired = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tired_)));
          set_has_tired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worldID;
        break;
      }

      // optional int32 worldID = 2;
      case 2: {
        if (tag == 16) {
         parse_worldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_homeID;
        break;
      }

      // optional int32 homeID = 3;
      case 3: {
        if (tag == 24) {
         parse_homeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeid_)));
          set_has_homeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remainCnt;
        break;
      }

      // optional int32 remainCnt = 4;
      case 4: {
        if (tag == 32) {
         parse_remainCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boss;
        break;
      }

      // repeated .bossInfo boss = 5;
      case 5: {
        if (tag == 42) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGalaxyOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGalaxyOperateResult)
  return false;
#undef DO_
}

void GCGalaxyOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGalaxyOperateResult)
  // optional int32 tired = 1;
  if (has_tired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tired(), output);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldid(), output);
  }

  // optional int32 homeID = 3;
  if (has_homeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->homeid(), output);
  }

  // optional int32 remainCnt = 4;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaincnt(), output);
  }

  // repeated .bossInfo boss = 5;
  for (int i = 0; i < this->boss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->boss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGalaxyOperateResult)
}

::google::protobuf::uint8* GCGalaxyOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGalaxyOperateResult)
  // optional int32 tired = 1;
  if (has_tired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tired(), target);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldid(), target);
  }

  // optional int32 homeID = 3;
  if (has_homeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->homeid(), target);
  }

  // optional int32 remainCnt = 4;
  if (has_remaincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remaincnt(), target);
  }

  // repeated .bossInfo boss = 5;
  for (int i = 0; i < this->boss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->boss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGalaxyOperateResult)
  return target;
}

int GCGalaxyOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tired = 1;
    if (has_tired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tired());
    }

    // optional int32 worldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldid());
    }

    // optional int32 homeID = 3;
    if (has_homeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homeid());
    }

    // optional int32 remainCnt = 4;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaincnt());
    }

  }
  // repeated .bossInfo boss = 5;
  total_size += 1 * this->boss_size();
  for (int i = 0; i < this->boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGalaxyOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGalaxyOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGalaxyOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGalaxyOperateResult::MergeFrom(const GCGalaxyOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  boss_.MergeFrom(from.boss_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tired()) {
      set_tired(from.tired());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_homeid()) {
      set_homeid(from.homeid());
    }
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGalaxyOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGalaxyOperateResult::CopyFrom(const GCGalaxyOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGalaxyOperateResult::IsInitialized() const {

  return true;
}

void GCGalaxyOperateResult::Swap(GCGalaxyOperateResult* other) {
  if (other != this) {
    std::swap(tired_, other->tired_);
    std::swap(worldid_, other->worldid_);
    std::swap(homeid_, other->homeid_);
    std::swap(remaincnt_, other->remaincnt_);
    boss_.Swap(&other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGalaxyOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGalaxyOperateResult_descriptor_;
  metadata.reflection = GCGalaxyOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSingleGalaxyOperate::kDungeonIDFieldNumber;
#endif  // !_MSC_VER

CGSingleGalaxyOperate::CGSingleGalaxyOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSingleGalaxyOperate)
}

void CGSingleGalaxyOperate::InitAsDefaultInstance() {
}

CGSingleGalaxyOperate::CGSingleGalaxyOperate(const CGSingleGalaxyOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSingleGalaxyOperate)
}

void CGSingleGalaxyOperate::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSingleGalaxyOperate::~CGSingleGalaxyOperate() {
  // @@protoc_insertion_point(destructor:CGSingleGalaxyOperate)
  SharedDtor();
}

void CGSingleGalaxyOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSingleGalaxyOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSingleGalaxyOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSingleGalaxyOperate_descriptor_;
}

const CGSingleGalaxyOperate& CGSingleGalaxyOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

CGSingleGalaxyOperate* CGSingleGalaxyOperate::default_instance_ = NULL;

CGSingleGalaxyOperate* CGSingleGalaxyOperate::New() const {
  return new CGSingleGalaxyOperate;
}

void CGSingleGalaxyOperate::Clear() {
  dungeonid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSingleGalaxyOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSingleGalaxyOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeonID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSingleGalaxyOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSingleGalaxyOperate)
  return false;
#undef DO_
}

void CGSingleGalaxyOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSingleGalaxyOperate)
  // optional int32 dungeonID = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeonid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSingleGalaxyOperate)
}

::google::protobuf::uint8* CGSingleGalaxyOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSingleGalaxyOperate)
  // optional int32 dungeonID = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeonid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSingleGalaxyOperate)
  return target;
}

int CGSingleGalaxyOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeonID = 1;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSingleGalaxyOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSingleGalaxyOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSingleGalaxyOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSingleGalaxyOperate::MergeFrom(const CGSingleGalaxyOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSingleGalaxyOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSingleGalaxyOperate::CopyFrom(const CGSingleGalaxyOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSingleGalaxyOperate::IsInitialized() const {

  return true;
}

void CGSingleGalaxyOperate::Swap(CGSingleGalaxyOperate* other) {
  if (other != this) {
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSingleGalaxyOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSingleGalaxyOperate_descriptor_;
  metadata.reflection = CGSingleGalaxyOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSingleGalaxyOperate::kDungeonIDFieldNumber;
const int GCSingleGalaxyOperate::kRemainCntFieldNumber;
#endif  // !_MSC_VER

GCSingleGalaxyOperate::GCSingleGalaxyOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSingleGalaxyOperate)
}

void GCSingleGalaxyOperate::InitAsDefaultInstance() {
}

GCSingleGalaxyOperate::GCSingleGalaxyOperate(const GCSingleGalaxyOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSingleGalaxyOperate)
}

void GCSingleGalaxyOperate::SharedCtor() {
  _cached_size_ = 0;
  dungeonid_ = 0;
  remaincnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSingleGalaxyOperate::~GCSingleGalaxyOperate() {
  // @@protoc_insertion_point(destructor:GCSingleGalaxyOperate)
  SharedDtor();
}

void GCSingleGalaxyOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSingleGalaxyOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSingleGalaxyOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSingleGalaxyOperate_descriptor_;
}

const GCSingleGalaxyOperate& GCSingleGalaxyOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCSingleGalaxyOperate* GCSingleGalaxyOperate::default_instance_ = NULL;

GCSingleGalaxyOperate* GCSingleGalaxyOperate::New() const {
  return new GCSingleGalaxyOperate;
}

void GCSingleGalaxyOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSingleGalaxyOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dungeonid_, remaincnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSingleGalaxyOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSingleGalaxyOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dungeonID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeonid_)));
          set_has_dungeonid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remainCnt;
        break;
      }

      // optional int32 remainCnt = 2;
      case 2: {
        if (tag == 16) {
         parse_remainCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSingleGalaxyOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSingleGalaxyOperate)
  return false;
#undef DO_
}

void GCSingleGalaxyOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSingleGalaxyOperate)
  // optional int32 dungeonID = 1;
  if (has_dungeonid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeonid(), output);
  }

  // optional int32 remainCnt = 2;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaincnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSingleGalaxyOperate)
}

::google::protobuf::uint8* GCSingleGalaxyOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSingleGalaxyOperate)
  // optional int32 dungeonID = 1;
  if (has_dungeonid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeonid(), target);
  }

  // optional int32 remainCnt = 2;
  if (has_remaincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remaincnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSingleGalaxyOperate)
  return target;
}

int GCSingleGalaxyOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dungeonID = 1;
    if (has_dungeonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeonid());
    }

    // optional int32 remainCnt = 2;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaincnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSingleGalaxyOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSingleGalaxyOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSingleGalaxyOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSingleGalaxyOperate::MergeFrom(const GCSingleGalaxyOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeonid()) {
      set_dungeonid(from.dungeonid());
    }
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSingleGalaxyOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSingleGalaxyOperate::CopyFrom(const GCSingleGalaxyOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSingleGalaxyOperate::IsInitialized() const {

  return true;
}

void GCSingleGalaxyOperate::Swap(GCSingleGalaxyOperate* other) {
  if (other != this) {
    std::swap(dungeonid_, other->dungeonid_);
    std::swap(remaincnt_, other->remaincnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSingleGalaxyOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSingleGalaxyOperate_descriptor_;
  metadata.reflection = GCSingleGalaxyOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGWorldGalaxyOperate::kOperateFieldNumber;
const int CGWorldGalaxyOperate::kWorldIDFieldNumber;
#endif  // !_MSC_VER

CGWorldGalaxyOperate::CGWorldGalaxyOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGWorldGalaxyOperate)
}

void CGWorldGalaxyOperate::InitAsDefaultInstance() {
}

CGWorldGalaxyOperate::CGWorldGalaxyOperate(const CGWorldGalaxyOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGWorldGalaxyOperate)
}

void CGWorldGalaxyOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  worldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGWorldGalaxyOperate::~CGWorldGalaxyOperate() {
  // @@protoc_insertion_point(destructor:CGWorldGalaxyOperate)
  SharedDtor();
}

void CGWorldGalaxyOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGWorldGalaxyOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGWorldGalaxyOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGWorldGalaxyOperate_descriptor_;
}

const CGWorldGalaxyOperate& CGWorldGalaxyOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

CGWorldGalaxyOperate* CGWorldGalaxyOperate::default_instance_ = NULL;

CGWorldGalaxyOperate* CGWorldGalaxyOperate::New() const {
  return new CGWorldGalaxyOperate;
}

void CGWorldGalaxyOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGWorldGalaxyOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, worldid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGWorldGalaxyOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGWorldGalaxyOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worldID;
        break;
      }

      // optional int32 worldID = 2;
      case 2: {
        if (tag == 16) {
         parse_worldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGWorldGalaxyOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGWorldGalaxyOperate)
  return false;
#undef DO_
}

void CGWorldGalaxyOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGWorldGalaxyOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGWorldGalaxyOperate)
}

::google::protobuf::uint8* CGWorldGalaxyOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGWorldGalaxyOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGWorldGalaxyOperate)
  return target;
}

int CGWorldGalaxyOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 worldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGWorldGalaxyOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGWorldGalaxyOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGWorldGalaxyOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGWorldGalaxyOperate::MergeFrom(const CGWorldGalaxyOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGWorldGalaxyOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGWorldGalaxyOperate::CopyFrom(const CGWorldGalaxyOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGWorldGalaxyOperate::IsInitialized() const {

  return true;
}

void CGWorldGalaxyOperate::Swap(CGWorldGalaxyOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGWorldGalaxyOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGWorldGalaxyOperate_descriptor_;
  metadata.reflection = CGWorldGalaxyOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCWorldGalaxyOperate::kOperateFieldNumber;
const int GCWorldGalaxyOperate::kWorldIDFieldNumber;
#endif  // !_MSC_VER

GCWorldGalaxyOperate::GCWorldGalaxyOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCWorldGalaxyOperate)
}

void GCWorldGalaxyOperate::InitAsDefaultInstance() {
}

GCWorldGalaxyOperate::GCWorldGalaxyOperate(const GCWorldGalaxyOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCWorldGalaxyOperate)
}

void GCWorldGalaxyOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  worldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCWorldGalaxyOperate::~GCWorldGalaxyOperate() {
  // @@protoc_insertion_point(destructor:GCWorldGalaxyOperate)
  SharedDtor();
}

void GCWorldGalaxyOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCWorldGalaxyOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCWorldGalaxyOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCWorldGalaxyOperate_descriptor_;
}

const GCWorldGalaxyOperate& GCWorldGalaxyOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCWorldGalaxyOperate* GCWorldGalaxyOperate::default_instance_ = NULL;

GCWorldGalaxyOperate* GCWorldGalaxyOperate::New() const {
  return new GCWorldGalaxyOperate;
}

void GCWorldGalaxyOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCWorldGalaxyOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, worldid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCWorldGalaxyOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCWorldGalaxyOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worldID;
        break;
      }

      // optional int32 worldID = 2;
      case 2: {
        if (tag == 16) {
         parse_worldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCWorldGalaxyOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCWorldGalaxyOperate)
  return false;
#undef DO_
}

void GCWorldGalaxyOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCWorldGalaxyOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCWorldGalaxyOperate)
}

::google::protobuf::uint8* GCWorldGalaxyOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCWorldGalaxyOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 worldID = 2;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCWorldGalaxyOperate)
  return target;
}

int GCWorldGalaxyOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 worldID = 2;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCWorldGalaxyOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCWorldGalaxyOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCWorldGalaxyOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCWorldGalaxyOperate::MergeFrom(const GCWorldGalaxyOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCWorldGalaxyOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCWorldGalaxyOperate::CopyFrom(const GCWorldGalaxyOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCWorldGalaxyOperate::IsInitialized() const {

  return true;
}

void GCWorldGalaxyOperate::Swap(GCWorldGalaxyOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(worldid_, other->worldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCWorldGalaxyOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCWorldGalaxyOperate_descriptor_;
  metadata.reflection = GCWorldGalaxyOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGalaxyHomeOperate::kOperateFieldNumber;
const int CGGalaxyHomeOperate::kHomeIDFieldNumber;
#endif  // !_MSC_VER

CGGalaxyHomeOperate::CGGalaxyHomeOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGalaxyHomeOperate)
}

void CGGalaxyHomeOperate::InitAsDefaultInstance() {
}

CGGalaxyHomeOperate::CGGalaxyHomeOperate(const CGGalaxyHomeOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGalaxyHomeOperate)
}

void CGGalaxyHomeOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  homeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGalaxyHomeOperate::~CGGalaxyHomeOperate() {
  // @@protoc_insertion_point(destructor:CGGalaxyHomeOperate)
  SharedDtor();
}

void CGGalaxyHomeOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGalaxyHomeOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGalaxyHomeOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGalaxyHomeOperate_descriptor_;
}

const CGGalaxyHomeOperate& CGGalaxyHomeOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

CGGalaxyHomeOperate* CGGalaxyHomeOperate::default_instance_ = NULL;

CGGalaxyHomeOperate* CGGalaxyHomeOperate::New() const {
  return new CGGalaxyHomeOperate;
}

void CGGalaxyHomeOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGalaxyHomeOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, homeid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGalaxyHomeOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGalaxyHomeOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_homeID;
        break;
      }

      // optional int32 homeID = 2;
      case 2: {
        if (tag == 16) {
         parse_homeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeid_)));
          set_has_homeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGalaxyHomeOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGalaxyHomeOperate)
  return false;
#undef DO_
}

void CGGalaxyHomeOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGalaxyHomeOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 homeID = 2;
  if (has_homeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->homeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGalaxyHomeOperate)
}

::google::protobuf::uint8* CGGalaxyHomeOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGalaxyHomeOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 homeID = 2;
  if (has_homeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->homeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGalaxyHomeOperate)
  return target;
}

int CGGalaxyHomeOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 homeID = 2;
    if (has_homeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGalaxyHomeOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGalaxyHomeOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGalaxyHomeOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGalaxyHomeOperate::MergeFrom(const CGGalaxyHomeOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_homeid()) {
      set_homeid(from.homeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGalaxyHomeOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGalaxyHomeOperate::CopyFrom(const CGGalaxyHomeOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGalaxyHomeOperate::IsInitialized() const {

  return true;
}

void CGGalaxyHomeOperate::Swap(CGGalaxyHomeOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(homeid_, other->homeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGalaxyHomeOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGalaxyHomeOperate_descriptor_;
  metadata.reflection = CGGalaxyHomeOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGalaxyHomeOperate::kOperateFieldNumber;
const int GCGalaxyHomeOperate::kHomeIDFieldNumber;
#endif  // !_MSC_VER

GCGalaxyHomeOperate::GCGalaxyHomeOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGalaxyHomeOperate)
}

void GCGalaxyHomeOperate::InitAsDefaultInstance() {
}

GCGalaxyHomeOperate::GCGalaxyHomeOperate(const GCGalaxyHomeOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGalaxyHomeOperate)
}

void GCGalaxyHomeOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  homeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGalaxyHomeOperate::~GCGalaxyHomeOperate() {
  // @@protoc_insertion_point(destructor:GCGalaxyHomeOperate)
  SharedDtor();
}

void GCGalaxyHomeOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGalaxyHomeOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGalaxyHomeOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGalaxyHomeOperate_descriptor_;
}

const GCGalaxyHomeOperate& GCGalaxyHomeOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCGalaxyHomeOperate* GCGalaxyHomeOperate::default_instance_ = NULL;

GCGalaxyHomeOperate* GCGalaxyHomeOperate::New() const {
  return new GCGalaxyHomeOperate;
}

void GCGalaxyHomeOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGalaxyHomeOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, homeid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGalaxyHomeOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGalaxyHomeOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_homeID;
        break;
      }

      // optional int32 homeID = 2;
      case 2: {
        if (tag == 16) {
         parse_homeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeid_)));
          set_has_homeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGalaxyHomeOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGalaxyHomeOperate)
  return false;
#undef DO_
}

void GCGalaxyHomeOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGalaxyHomeOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 homeID = 2;
  if (has_homeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->homeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGalaxyHomeOperate)
}

::google::protobuf::uint8* GCGalaxyHomeOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGalaxyHomeOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 homeID = 2;
  if (has_homeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->homeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGalaxyHomeOperate)
  return target;
}

int GCGalaxyHomeOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 homeID = 2;
    if (has_homeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGalaxyHomeOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGalaxyHomeOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGalaxyHomeOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGalaxyHomeOperate::MergeFrom(const GCGalaxyHomeOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_homeid()) {
      set_homeid(from.homeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGalaxyHomeOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGalaxyHomeOperate::CopyFrom(const GCGalaxyHomeOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGalaxyHomeOperate::IsInitialized() const {

  return true;
}

void GCGalaxyHomeOperate::Swap(GCGalaxyHomeOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(homeid_, other->homeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGalaxyHomeOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGalaxyHomeOperate_descriptor_;
  metadata.reflection = GCGalaxyHomeOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGBackLastScene::CGBackLastScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBackLastScene)
}

void CGBackLastScene::InitAsDefaultInstance() {
}

CGBackLastScene::CGBackLastScene(const CGBackLastScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBackLastScene)
}

void CGBackLastScene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBackLastScene::~CGBackLastScene() {
  // @@protoc_insertion_point(destructor:CGBackLastScene)
  SharedDtor();
}

void CGBackLastScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBackLastScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBackLastScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBackLastScene_descriptor_;
}

const CGBackLastScene& CGBackLastScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

CGBackLastScene* CGBackLastScene::default_instance_ = NULL;

CGBackLastScene* CGBackLastScene::New() const {
  return new CGBackLastScene;
}

void CGBackLastScene::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBackLastScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBackLastScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGBackLastScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBackLastScene)
  return false;
#undef DO_
}

void CGBackLastScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBackLastScene)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBackLastScene)
}

::google::protobuf::uint8* CGBackLastScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBackLastScene)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBackLastScene)
  return target;
}

int CGBackLastScene::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBackLastScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBackLastScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBackLastScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBackLastScene::MergeFrom(const CGBackLastScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBackLastScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBackLastScene::CopyFrom(const CGBackLastScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBackLastScene::IsInitialized() const {

  return true;
}

void CGBackLastScene::Swap(CGBackLastScene* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBackLastScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBackLastScene_descriptor_;
  metadata.reflection = CGBackLastScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGalaxyInviteGoHome::kHomeIDFieldNumber;
#endif  // !_MSC_VER

GCGalaxyInviteGoHome::GCGalaxyInviteGoHome()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGalaxyInviteGoHome)
}

void GCGalaxyInviteGoHome::InitAsDefaultInstance() {
}

GCGalaxyInviteGoHome::GCGalaxyInviteGoHome(const GCGalaxyInviteGoHome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGalaxyInviteGoHome)
}

void GCGalaxyInviteGoHome::SharedCtor() {
  _cached_size_ = 0;
  homeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGalaxyInviteGoHome::~GCGalaxyInviteGoHome() {
  // @@protoc_insertion_point(destructor:GCGalaxyInviteGoHome)
  SharedDtor();
}

void GCGalaxyInviteGoHome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGalaxyInviteGoHome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGalaxyInviteGoHome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGalaxyInviteGoHome_descriptor_;
}

const GCGalaxyInviteGoHome& GCGalaxyInviteGoHome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCGalaxyInviteGoHome* GCGalaxyInviteGoHome::default_instance_ = NULL;

GCGalaxyInviteGoHome* GCGalaxyInviteGoHome::New() const {
  return new GCGalaxyInviteGoHome;
}

void GCGalaxyInviteGoHome::Clear() {
  homeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGalaxyInviteGoHome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGalaxyInviteGoHome)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 homeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &homeid_)));
          set_has_homeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGalaxyInviteGoHome)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGalaxyInviteGoHome)
  return false;
#undef DO_
}

void GCGalaxyInviteGoHome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGalaxyInviteGoHome)
  // optional int32 homeID = 1;
  if (has_homeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->homeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGalaxyInviteGoHome)
}

::google::protobuf::uint8* GCGalaxyInviteGoHome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGalaxyInviteGoHome)
  // optional int32 homeID = 1;
  if (has_homeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->homeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGalaxyInviteGoHome)
  return target;
}

int GCGalaxyInviteGoHome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 homeID = 1;
    if (has_homeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->homeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGalaxyInviteGoHome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGalaxyInviteGoHome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGalaxyInviteGoHome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGalaxyInviteGoHome::MergeFrom(const GCGalaxyInviteGoHome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_homeid()) {
      set_homeid(from.homeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGalaxyInviteGoHome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGalaxyInviteGoHome::CopyFrom(const GCGalaxyInviteGoHome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGalaxyInviteGoHome::IsInitialized() const {

  return true;
}

void GCGalaxyInviteGoHome::Swap(GCGalaxyInviteGoHome* other) {
  if (other != this) {
    std::swap(homeid_, other->homeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGalaxyInviteGoHome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGalaxyInviteGoHome_descriptor_;
  metadata.reflection = GCGalaxyInviteGoHome_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetTeamLeaderSceneID::CGGetTeamLeaderSceneID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetTeamLeaderSceneID)
}

void CGGetTeamLeaderSceneID::InitAsDefaultInstance() {
}

CGGetTeamLeaderSceneID::CGGetTeamLeaderSceneID(const CGGetTeamLeaderSceneID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetTeamLeaderSceneID)
}

void CGGetTeamLeaderSceneID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetTeamLeaderSceneID::~CGGetTeamLeaderSceneID() {
  // @@protoc_insertion_point(destructor:CGGetTeamLeaderSceneID)
  SharedDtor();
}

void CGGetTeamLeaderSceneID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetTeamLeaderSceneID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetTeamLeaderSceneID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetTeamLeaderSceneID_descriptor_;
}

const CGGetTeamLeaderSceneID& CGGetTeamLeaderSceneID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

CGGetTeamLeaderSceneID* CGGetTeamLeaderSceneID::default_instance_ = NULL;

CGGetTeamLeaderSceneID* CGGetTeamLeaderSceneID::New() const {
  return new CGGetTeamLeaderSceneID;
}

void CGGetTeamLeaderSceneID::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetTeamLeaderSceneID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetTeamLeaderSceneID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetTeamLeaderSceneID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetTeamLeaderSceneID)
  return false;
#undef DO_
}

void CGGetTeamLeaderSceneID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetTeamLeaderSceneID)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetTeamLeaderSceneID)
}

::google::protobuf::uint8* CGGetTeamLeaderSceneID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetTeamLeaderSceneID)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetTeamLeaderSceneID)
  return target;
}

int CGGetTeamLeaderSceneID::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetTeamLeaderSceneID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetTeamLeaderSceneID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetTeamLeaderSceneID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetTeamLeaderSceneID::MergeFrom(const CGGetTeamLeaderSceneID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetTeamLeaderSceneID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetTeamLeaderSceneID::CopyFrom(const CGGetTeamLeaderSceneID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetTeamLeaderSceneID::IsInitialized() const {

  return true;
}

void CGGetTeamLeaderSceneID::Swap(CGGetTeamLeaderSceneID* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetTeamLeaderSceneID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetTeamLeaderSceneID_descriptor_;
  metadata.reflection = CGGetTeamLeaderSceneID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetTeamLeaderSceneID::kSceneIDFieldNumber;
#endif  // !_MSC_VER

GCGetTeamLeaderSceneID::GCGetTeamLeaderSceneID()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetTeamLeaderSceneID)
}

void GCGetTeamLeaderSceneID::InitAsDefaultInstance() {
}

GCGetTeamLeaderSceneID::GCGetTeamLeaderSceneID(const GCGetTeamLeaderSceneID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetTeamLeaderSceneID)
}

void GCGetTeamLeaderSceneID::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetTeamLeaderSceneID::~GCGetTeamLeaderSceneID() {
  // @@protoc_insertion_point(destructor:GCGetTeamLeaderSceneID)
  SharedDtor();
}

void GCGetTeamLeaderSceneID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetTeamLeaderSceneID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetTeamLeaderSceneID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetTeamLeaderSceneID_descriptor_;
}

const GCGetTeamLeaderSceneID& GCGetTeamLeaderSceneID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GalaxyMessage_2eproto();
  return *default_instance_;
}

GCGetTeamLeaderSceneID* GCGetTeamLeaderSceneID::default_instance_ = NULL;

GCGetTeamLeaderSceneID* GCGetTeamLeaderSceneID::New() const {
  return new GCGetTeamLeaderSceneID;
}

void GCGetTeamLeaderSceneID::Clear() {
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetTeamLeaderSceneID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetTeamLeaderSceneID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetTeamLeaderSceneID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetTeamLeaderSceneID)
  return false;
#undef DO_
}

void GCGetTeamLeaderSceneID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetTeamLeaderSceneID)
  // optional int32 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetTeamLeaderSceneID)
}

::google::protobuf::uint8* GCGetTeamLeaderSceneID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetTeamLeaderSceneID)
  // optional int32 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetTeamLeaderSceneID)
  return target;
}

int GCGetTeamLeaderSceneID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetTeamLeaderSceneID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetTeamLeaderSceneID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetTeamLeaderSceneID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetTeamLeaderSceneID::MergeFrom(const GCGetTeamLeaderSceneID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetTeamLeaderSceneID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetTeamLeaderSceneID::CopyFrom(const GCGetTeamLeaderSceneID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetTeamLeaderSceneID::IsInitialized() const {

  return true;
}

void GCGetTeamLeaderSceneID::Swap(GCGetTeamLeaderSceneID* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetTeamLeaderSceneID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetTeamLeaderSceneID_descriptor_;
  metadata.reflection = GCGetTeamLeaderSceneID_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
