// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GangMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GangMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GangAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangMainInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangMainInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCreateGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCreateGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCreateGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCreateGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetGangList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetGangList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetGangList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetGangList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGangOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGangOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGangBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGangBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangBuy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangBuy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGangFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGangFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangInfo4Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangInfo4Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangFight_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEnterGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangRobberNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangRobberNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangActiveOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangActiveOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMuteGangMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMuteGangMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMuteGangMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMuteGangMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMuteGangList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMuteGangList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGInviteToGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGInviteToGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBeInvitedToGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBeInvitedToGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBeBeInvitedToGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBeBeInvitedToGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCApplyNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCApplyNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGHasGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGHasGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHasGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHasGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGangChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGangChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGangChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGangChangeName_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GangMessage_2eproto() {
  protobuf_AddDesc_GangMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GangMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GangAttr_descriptor_ = file->message_type(0);
  static const int GangAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAttr, attrkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAttr, arrtvalue_),
  };
  GangAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangAttr_descriptor_,
      GangAttr::default_instance_,
      GangAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangAttr));
  GangMainInfo_descriptor_ = file->message_type(1);
  static const int GangMainInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, gangtotem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, ganglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, bulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, iskickmaster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, kicktime_),
  };
  GangMainInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangMainInfo_descriptor_,
      GangMainInfo::default_instance_,
      GangMainInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMainInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangMainInfo));
  BuildingInfo_descriptor_ = file->message_type(2);
  static const int BuildingInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, gangdonatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, builtattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, practice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, buyuniqueinfo_),
  };
  BuildingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingInfo_descriptor_,
      BuildingInfo::default_instance_,
      BuildingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingInfo));
  GangMemberInfo_descriptor_ = file->message_type(3);
  static const int GangMemberInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memfightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, gangcontributetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, memlogouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, sex_),
  };
  GangMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangMemberInfo_descriptor_,
      GangMemberInfo::default_instance_,
      GangMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangMemberInfo));
  CGCreateGang_descriptor_ = file->message_type(4);
  static const int CGCreateGang_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateGang, requesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateGang, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateGang, gangfont_),
  };
  CGCreateGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCreateGang_descriptor_,
      CGCreateGang::default_instance_,
      CGCreateGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreateGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCreateGang));
  GCCreateGang_descriptor_ = file->message_type(5);
  static const int GCCreateGang_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, buildinfo_),
  };
  GCCreateGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCreateGang_descriptor_,
      GCCreateGang::default_instance_,
      GCCreateGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreateGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCreateGang));
  CGGetGangList_descriptor_ = file->message_type(6);
  static const int CGGetGangList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetGangList, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetGangList, gangname_),
  };
  CGGetGangList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetGangList_descriptor_,
      CGGetGangList::default_instance_,
      CGGetGangList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetGangList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetGangList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetGangList));
  GCGetGangList_descriptor_ = file->message_type(7);
  static const int GCGetGangList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, listtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, joingangidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, lastquittime_),
  };
  GCGetGangList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetGangList_descriptor_,
      GCGetGangList::default_instance_,
      GCGetGangList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetGangList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetGangList));
  CGGangOperate_descriptor_ = file->message_type(8);
  static const int CGGangOperate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, bulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, beplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, beplayertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, gangidlist_),
  };
  CGGangOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGangOperate_descriptor_,
      CGGangOperate::default_instance_,
      CGGangOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGangOperate));
  GCGangOperate_descriptor_ = file->message_type(9);
  static const int GCGangOperate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, memberinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, quitmemberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, joingangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, joingangidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, kicktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, iskickmaster_),
  };
  GCGangOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangOperate_descriptor_,
      GCGangOperate::default_instance_,
      GCGangOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangOperate));
  CGGangBuy_descriptor_ = file->message_type(10);
  static const int CGGangBuy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangBuy, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangBuy, buyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangBuy, buynum_),
  };
  CGGangBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGangBuy_descriptor_,
      CGGangBuy::default_instance_,
      CGGangBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGangBuy));
  GCGangBuy_descriptor_ = file->message_type(11);
  static const int GCGangBuy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, buildinfo_),
  };
  GCGangBuy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangBuy_descriptor_,
      GCGangBuy::default_instance_,
      GCGangBuy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangBuy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangBuy));
  CGGangFight_descriptor_ = file->message_type(12);
  static const int CGGangFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangFight, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangFight, mapid_),
  };
  CGGangFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGangFight_descriptor_,
      CGGangFight::default_instance_,
      CGGangFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGangFight));
  GangInfo4Map_descriptor_ = file->message_type(13);
  static const int GangInfo4Map_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, holdganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, applyganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, applystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, enterfightstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, countofmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, firstofmap_),
  };
  GangInfo4Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangInfo4Map_descriptor_,
      GangInfo4Map::default_instance_,
      GangInfo4Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo4Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangInfo4Map));
  GCGangFight_descriptor_ = file->message_type(14);
  static const int GCGangFight_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, puid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, flaguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, ganginfo4map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, pointmap_),
  };
  GCGangFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangFight_descriptor_,
      GCGangFight::default_instance_,
      GCGangFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangFight));
  CGEnterGang_descriptor_ = file->message_type(15);
  static const int CGEnterGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGang, playerid_),
  };
  CGEnterGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterGang_descriptor_,
      CGEnterGang::default_instance_,
      CGEnterGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterGang));
  GCEnterGang_descriptor_ = file->message_type(16);
  static const int GCEnterGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGang, result_),
  };
  GCEnterGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterGang_descriptor_,
      GCEnterGang::default_instance_,
      GCEnterGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterGang));
  GCGangRobberNum_descriptor_ = file->message_type(17);
  static const int GCGangRobberNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangRobberNum, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangRobberNum, numtotal_),
  };
  GCGangRobberNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangRobberNum_descriptor_,
      GCGangRobberNum::default_instance_,
      GCGangRobberNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangRobberNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangRobberNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangRobberNum));
  GCGangActiveOpen_descriptor_ = file->message_type(18);
  static const int GCGangActiveOpen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangActiveOpen, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangActiveOpen, languageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangActiveOpen, param_),
  };
  GCGangActiveOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangActiveOpen_descriptor_,
      GCGangActiveOpen::default_instance_,
      GCGangActiveOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangActiveOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangActiveOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangActiveOpen));
  CGMuteGangMember_descriptor_ = file->message_type(19);
  static const int CGMuteGangMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMuteGangMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMuteGangMember, plyerid_),
  };
  CGMuteGangMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMuteGangMember_descriptor_,
      CGMuteGangMember::default_instance_,
      CGMuteGangMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMuteGangMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMuteGangMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMuteGangMember));
  GCMuteGangMember_descriptor_ = file->message_type(20);
  static const int GCMuteGangMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangMember, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangMember, playerid_),
  };
  GCMuteGangMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMuteGangMember_descriptor_,
      GCMuteGangMember::default_instance_,
      GCMuteGangMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMuteGangMember));
  GCMuteGangList_descriptor_ = file->message_type(21);
  static const int GCMuteGangList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangList, mute_),
  };
  GCMuteGangList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMuteGangList_descriptor_,
      GCMuteGangList::default_instance_,
      GCMuteGangList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteGangList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMuteGangList));
  CGInviteToGang_descriptor_ = file->message_type(22);
  static const int CGInviteToGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteToGang, playerid_),
  };
  CGInviteToGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGInviteToGang_descriptor_,
      CGInviteToGang::default_instance_,
      CGInviteToGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteToGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGInviteToGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGInviteToGang));
  GCBeInvitedToGang_descriptor_ = file->message_type(23);
  static const int GCBeInvitedToGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeInvitedToGang, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeInvitedToGang, gangname_),
  };
  GCBeInvitedToGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBeInvitedToGang_descriptor_,
      GCBeInvitedToGang::default_instance_,
      GCBeInvitedToGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeInvitedToGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeInvitedToGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBeInvitedToGang));
  CGBeBeInvitedToGang_descriptor_ = file->message_type(24);
  static const int CGBeBeInvitedToGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeBeInvitedToGang, operatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeBeInvitedToGang, gangid_),
  };
  CGBeBeInvitedToGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBeBeInvitedToGang_descriptor_,
      CGBeBeInvitedToGang::default_instance_,
      CGBeBeInvitedToGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeBeInvitedToGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeBeInvitedToGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBeBeInvitedToGang));
  GCApplyNotice_descriptor_ = file->message_type(25);
  static const int GCApplyNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyNotice, playerid_),
  };
  GCApplyNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCApplyNotice_descriptor_,
      GCApplyNotice::default_instance_,
      GCApplyNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCApplyNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCApplyNotice));
  CGHasGang_descriptor_ = file->message_type(26);
  static const int CGHasGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHasGang, playerid_),
  };
  CGHasGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGHasGang_descriptor_,
      CGHasGang::default_instance_,
      CGHasGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHasGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGHasGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGHasGang));
  GCHasGang_descriptor_ = file->message_type(27);
  static const int GCHasGang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHasGang, result_),
  };
  GCHasGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHasGang_descriptor_,
      GCHasGang::default_instance_,
      GCHasGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHasGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHasGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHasGang));
  CGGangChangeName_descriptor_ = file->message_type(28);
  static const int CGGangChangeName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangChangeName, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangChangeName, gangtotem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangChangeName, gangname_),
  };
  CGGangChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGangChangeName_descriptor_,
      CGGangChangeName::default_instance_,
      CGGangChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGangChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGangChangeName));
  GCGangChangeName_descriptor_ = file->message_type(29);
  static const int GCGangChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangChangeName, result_),
  };
  GCGangChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGangChangeName_descriptor_,
      GCGangChangeName::default_instance_,
      GCGangChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGangChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGangChangeName));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GangMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangAttr_descriptor_, &GangAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangMainInfo_descriptor_, &GangMainInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingInfo_descriptor_, &BuildingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangMemberInfo_descriptor_, &GangMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCreateGang_descriptor_, &CGCreateGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCreateGang_descriptor_, &GCCreateGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetGangList_descriptor_, &CGGetGangList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetGangList_descriptor_, &GCGetGangList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGangOperate_descriptor_, &CGGangOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangOperate_descriptor_, &GCGangOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGangBuy_descriptor_, &CGGangBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangBuy_descriptor_, &GCGangBuy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGangFight_descriptor_, &CGGangFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangInfo4Map_descriptor_, &GangInfo4Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangFight_descriptor_, &GCGangFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterGang_descriptor_, &CGEnterGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterGang_descriptor_, &GCEnterGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangRobberNum_descriptor_, &GCGangRobberNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangActiveOpen_descriptor_, &GCGangActiveOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMuteGangMember_descriptor_, &CGMuteGangMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMuteGangMember_descriptor_, &GCMuteGangMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMuteGangList_descriptor_, &GCMuteGangList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGInviteToGang_descriptor_, &CGInviteToGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBeInvitedToGang_descriptor_, &GCBeInvitedToGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBeBeInvitedToGang_descriptor_, &CGBeBeInvitedToGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCApplyNotice_descriptor_, &GCApplyNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGHasGang_descriptor_, &CGHasGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHasGang_descriptor_, &GCHasGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGangChangeName_descriptor_, &CGGangChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGangChangeName_descriptor_, &GCGangChangeName::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GangMessage_2eproto() {
  delete GangAttr::default_instance_;
  delete GangAttr_reflection_;
  delete GangMainInfo::default_instance_;
  delete GangMainInfo_reflection_;
  delete BuildingInfo::default_instance_;
  delete BuildingInfo_reflection_;
  delete GangMemberInfo::default_instance_;
  delete GangMemberInfo_reflection_;
  delete CGCreateGang::default_instance_;
  delete CGCreateGang_reflection_;
  delete GCCreateGang::default_instance_;
  delete GCCreateGang_reflection_;
  delete CGGetGangList::default_instance_;
  delete CGGetGangList_reflection_;
  delete GCGetGangList::default_instance_;
  delete GCGetGangList_reflection_;
  delete CGGangOperate::default_instance_;
  delete CGGangOperate_reflection_;
  delete GCGangOperate::default_instance_;
  delete GCGangOperate_reflection_;
  delete CGGangBuy::default_instance_;
  delete CGGangBuy_reflection_;
  delete GCGangBuy::default_instance_;
  delete GCGangBuy_reflection_;
  delete CGGangFight::default_instance_;
  delete CGGangFight_reflection_;
  delete GangInfo4Map::default_instance_;
  delete GangInfo4Map_reflection_;
  delete GCGangFight::default_instance_;
  delete GCGangFight_reflection_;
  delete CGEnterGang::default_instance_;
  delete CGEnterGang_reflection_;
  delete GCEnterGang::default_instance_;
  delete GCEnterGang_reflection_;
  delete GCGangRobberNum::default_instance_;
  delete GCGangRobberNum_reflection_;
  delete GCGangActiveOpen::default_instance_;
  delete GCGangActiveOpen_reflection_;
  delete CGMuteGangMember::default_instance_;
  delete CGMuteGangMember_reflection_;
  delete GCMuteGangMember::default_instance_;
  delete GCMuteGangMember_reflection_;
  delete GCMuteGangList::default_instance_;
  delete GCMuteGangList_reflection_;
  delete CGInviteToGang::default_instance_;
  delete CGInviteToGang_reflection_;
  delete GCBeInvitedToGang::default_instance_;
  delete GCBeInvitedToGang_reflection_;
  delete CGBeBeInvitedToGang::default_instance_;
  delete CGBeBeInvitedToGang_reflection_;
  delete GCApplyNotice::default_instance_;
  delete GCApplyNotice_reflection_;
  delete CGHasGang::default_instance_;
  delete CGHasGang_reflection_;
  delete GCHasGang::default_instance_;
  delete GCHasGang_reflection_;
  delete CGGangChangeName::default_instance_;
  delete CGGangChangeName_reflection_;
  delete GCGangChangeName::default_instance_;
  delete GCGangChangeName_reflection_;
}

void protobuf_AddDesc_GangMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_CommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GangMessage.proto\032\022InnerMessage.proto\032"
    "\023CommonMessage.proto\".\n\010GangAttr\022\017\n\007attr"
    "Key\030\001 \001(\005\022\021\n\tarrtValue\030\002 \001(\005\"\325\001\n\014GangMai"
    "nInfo\022\016\n\006gangId\030\001 \001(\003\022\020\n\010gangName\030\002 \001(\t\022"
    "\021\n\tgangTotem\030\003 \001(\t\022\021\n\tgangLevel\030\004 \001(\005\022\021\n"
    "\tmemberNum\030\005 \001(\005\022\020\n\010bulletin\030\006 \001(\t\022\r\n\005mo"
    "ney\030\007 \001(\003\022\r\n\005power\030\010 \001(\003\022\022\n\nmasterName\030\t"
    " \001(\t\022\024\n\014isKickMaster\030\n \001(\005\022\020\n\010kickTime\030\013"
    " \001(\003\"\202\001\n\014BuildingInfo\022\025\n\rgangDonateNum\030\001"
    " \001(\005\022\034\n\tbuiltAttr\030\002 \003(\0132\t.GangAttr\022\033\n\010pr"
    "actice\030\003 \003(\0132\t.GangAttr\022 \n\rbuyUniqueInfo"
    "\030\004 \003(\0132\t.GangAttr\"\367\001\n\016GangMemberInfo\022\r\n\005"
    "memId\030\001 \001(\003\022\017\n\007memName\030\002 \001(\t\022\020\n\010memLevel"
    "\030\003 \001(\005\022\025\n\rmemFightPower\030\004 \001(\003\022\016\n\006memJob\030"
    "\005 \001(\005\022\021\n\tmemOnline\030\006 \001(\005\022\025\n\rmemContribut"
    "e\030\007 \001(\003\022\033\n\023gangContributeTotal\030\010 \001(\003\022\024\n\014"
    "professionId\030\t \001(\005\022\013\n\003vip\030\n \001(\005\022\025\n\rmemLo"
    "goutTime\030\013 \001(\003\022\013\n\003sex\030\014 \001(\005\"G\n\014CGCreateG"
    "ang\022\023\n\013requestType\030\001 \001(\005\022\020\n\010gangName\030\002 \001"
    "(\t\022\020\n\010gangFont\030\003 \001(\t\"\234\001\n\014GCCreateGang\022\024\n"
    "\014responseType\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\037\n\010g"
    "angInfo\030\003 \001(\0132\r.GangMainInfo\022#\n\nmemberIn"
    "fo\030\004 \003(\0132\017.GangMemberInfo\022 \n\tbuildInfo\030\005"
    " \001(\0132\r.BuildingInfo\"3\n\rCGGetGangList\022\020\n\010"
    "listType\030\001 \001(\005\022\020\n\010gangName\030\003 \001(\t\"\200\001\n\rGCG"
    "etGangList\022\020\n\010listType\030\001 \001(\005\022\037\n\010gangInfo"
    "\030\004 \003(\0132\r.GangMainInfo\022\016\n\006result\030\005 \001(\005\022\026\n"
    "\016joinGangIdList\030\006 \003(\003\022\024\n\014lastQuitTime\030\007 "
    "\001(\003\"\204\001\n\rCGGangOperate\022\023\n\013operateType\030\001 \001"
    "(\005\022\016\n\006gangId\030\002 \001(\003\022\020\n\010bulletin\030\003 \001(\t\022\022\n\n"
    "bePlayerId\030\004 \001(\003\022\024\n\014bePlayerType\030\005 \001(\005\022\022"
    "\n\ngangIdList\030\006 \003(\003\"\344\001\n\rGCGangOperate\022\023\n\013"
    "operateType\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\037\n\010gan"
    "gInfo\030\003 \001(\0132\r.GangMainInfo\022#\n\nmemberInfo"
    "\030\004 \003(\0132\017.GangMemberInfo\022\024\n\014quitMemberId\030"
    "\005 \001(\003\022\022\n\njoinGangId\030\006 \001(\003\022\026\n\016joinGangIdL"
    "ist\030\007 \003(\003\022\020\n\010kickTime\030\010 \001(\003\022\024\n\014isKickMas"
    "ter\030\t \001(\005\";\n\tCGGangBuy\022\017\n\007request\030\001 \001(\005\022"
    "\r\n\005buyId\030\002 \001(\005\022\016\n\006buyNum\030\003 \001(\005\"p\n\tGCGang"
    "Buy\022\016\n\006result\030\001 \001(\005\022\020\n\010response\030\002 \001(\005\022\037\n"
    "\010gangInfo\030\003 \001(\0132\r.GangMainInfo\022 \n\tbuildI"
    "nfo\030\004 \001(\0132\r.BuildingInfo\"-\n\013CGGangFight\022"
    "\017\n\007operate\030\001 \001(\005\022\r\n\005mapId\030\002 \001(\005\"\275\001\n\014Gang"
    "Info4Map\022\r\n\005mapId\030\001 \001(\005\022#\n\014holdGangInfo\030"
    "\002 \001(\0132\r.GangMainInfo\022$\n\rapplyGangInfo\030\003 "
    "\003(\0132\r.GangMainInfo\022\022\n\napplyState\030\004 \001(\005\022\027"
    "\n\017enterFightState\030\005 \001(\005\022\022\n\ncountOfMap\030\006 "
    "\001(\005\022\022\n\nfirstOfMap\030\007 \001(\005\"\265\001\n\013GCGangFight\022"
    "\017\n\007operate\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\022\014\n\004flag"
    "\030\003 \001(\005\022\020\n\010lastTime\030\004 \001(\005\022\014\n\004puid\030\005 \001(\003\022\017"
    "\n\007flaguId\030\006 \001(\003\022#\n\014gangInfo4Map\030\007 \003(\0132\r."
    "GangInfo4Map\022!\n\010pointMap\030\010 \003(\0132\017.EntrySt"
    "ringInt\"\037\n\013CGEnterGang\022\020\n\010playerId\030\001 \001(\003"
    "\"\035\n\013GCEnterGang\022\016\n\006result\030\001 \001(\005\"0\n\017GCGan"
    "gRobberNum\022\013\n\003num\030\001 \001(\005\022\020\n\010numTotal\030\002 \001("
    "\005\"C\n\020GCGangActiveOpen\022\014\n\004type\030\001 \001(\005\022\022\n\nl"
    "anguageId\030\002 \001(\005\022\r\n\005param\030\003 \003(\t\"1\n\020CGMute"
    "GangMember\022\014\n\004type\030\001 \001(\005\022\017\n\007plyerId\030\002 \001("
    "\003\"B\n\020GCMuteGangMember\022\016\n\006result\030\001 \001(\005\022\014\n"
    "\004type\030\002 \001(\005\022\020\n\010playerId\030\003 \001(\003\"\036\n\016GCMuteG"
    "angList\022\014\n\004mute\030\001 \003(\003\"\"\n\016CGInviteToGang\022"
    "\020\n\010playerId\030\001 \001(\003\"5\n\021GCBeInvitedToGang\022\016"
    "\n\006gangId\030\001 \001(\003\022\020\n\010gangName\030\002 \001(\t\":\n\023CGBe"
    "BeInvitedToGang\022\023\n\013operateType\030\001 \001(\005\022\016\n\006"
    "gangId\030\002 \001(\003\"!\n\rGCApplyNotice\022\020\n\010playerI"
    "d\030\001 \001(\003\"\035\n\tCGHasGang\022\020\n\010playerId\030\001 \001(\005\"\033"
    "\n\tGCHasGang\022\016\n\006result\030\001 \001(\005\"G\n\020CGGangCha"
    "ngeName\022\016\n\006gangId\030\001 \001(\003\022\021\n\tgangTotem\030\002 \001"
    "(\t\022\020\n\010gangName\030\003 \001(\t\"\"\n\020GCGangChangeName"
    "\022\016\n\006result\030\001 \001(\005B\031\n\027com.mile.common.mess"
    "age", 2803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GangMessage.proto", &protobuf_RegisterTypes);
  GangAttr::default_instance_ = new GangAttr();
  GangMainInfo::default_instance_ = new GangMainInfo();
  BuildingInfo::default_instance_ = new BuildingInfo();
  GangMemberInfo::default_instance_ = new GangMemberInfo();
  CGCreateGang::default_instance_ = new CGCreateGang();
  GCCreateGang::default_instance_ = new GCCreateGang();
  CGGetGangList::default_instance_ = new CGGetGangList();
  GCGetGangList::default_instance_ = new GCGetGangList();
  CGGangOperate::default_instance_ = new CGGangOperate();
  GCGangOperate::default_instance_ = new GCGangOperate();
  CGGangBuy::default_instance_ = new CGGangBuy();
  GCGangBuy::default_instance_ = new GCGangBuy();
  CGGangFight::default_instance_ = new CGGangFight();
  GangInfo4Map::default_instance_ = new GangInfo4Map();
  GCGangFight::default_instance_ = new GCGangFight();
  CGEnterGang::default_instance_ = new CGEnterGang();
  GCEnterGang::default_instance_ = new GCEnterGang();
  GCGangRobberNum::default_instance_ = new GCGangRobberNum();
  GCGangActiveOpen::default_instance_ = new GCGangActiveOpen();
  CGMuteGangMember::default_instance_ = new CGMuteGangMember();
  GCMuteGangMember::default_instance_ = new GCMuteGangMember();
  GCMuteGangList::default_instance_ = new GCMuteGangList();
  CGInviteToGang::default_instance_ = new CGInviteToGang();
  GCBeInvitedToGang::default_instance_ = new GCBeInvitedToGang();
  CGBeBeInvitedToGang::default_instance_ = new CGBeBeInvitedToGang();
  GCApplyNotice::default_instance_ = new GCApplyNotice();
  CGHasGang::default_instance_ = new CGHasGang();
  GCHasGang::default_instance_ = new GCHasGang();
  CGGangChangeName::default_instance_ = new CGGangChangeName();
  GCGangChangeName::default_instance_ = new GCGangChangeName();
  GangAttr::default_instance_->InitAsDefaultInstance();
  GangMainInfo::default_instance_->InitAsDefaultInstance();
  BuildingInfo::default_instance_->InitAsDefaultInstance();
  GangMemberInfo::default_instance_->InitAsDefaultInstance();
  CGCreateGang::default_instance_->InitAsDefaultInstance();
  GCCreateGang::default_instance_->InitAsDefaultInstance();
  CGGetGangList::default_instance_->InitAsDefaultInstance();
  GCGetGangList::default_instance_->InitAsDefaultInstance();
  CGGangOperate::default_instance_->InitAsDefaultInstance();
  GCGangOperate::default_instance_->InitAsDefaultInstance();
  CGGangBuy::default_instance_->InitAsDefaultInstance();
  GCGangBuy::default_instance_->InitAsDefaultInstance();
  CGGangFight::default_instance_->InitAsDefaultInstance();
  GangInfo4Map::default_instance_->InitAsDefaultInstance();
  GCGangFight::default_instance_->InitAsDefaultInstance();
  CGEnterGang::default_instance_->InitAsDefaultInstance();
  GCEnterGang::default_instance_->InitAsDefaultInstance();
  GCGangRobberNum::default_instance_->InitAsDefaultInstance();
  GCGangActiveOpen::default_instance_->InitAsDefaultInstance();
  CGMuteGangMember::default_instance_->InitAsDefaultInstance();
  GCMuteGangMember::default_instance_->InitAsDefaultInstance();
  GCMuteGangList::default_instance_->InitAsDefaultInstance();
  CGInviteToGang::default_instance_->InitAsDefaultInstance();
  GCBeInvitedToGang::default_instance_->InitAsDefaultInstance();
  CGBeBeInvitedToGang::default_instance_->InitAsDefaultInstance();
  GCApplyNotice::default_instance_->InitAsDefaultInstance();
  CGHasGang::default_instance_->InitAsDefaultInstance();
  GCHasGang::default_instance_->InitAsDefaultInstance();
  CGGangChangeName::default_instance_->InitAsDefaultInstance();
  GCGangChangeName::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GangMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GangMessage_2eproto {
  StaticDescriptorInitializer_GangMessage_2eproto() {
    protobuf_AddDesc_GangMessage_2eproto();
  }
} static_descriptor_initializer_GangMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GangAttr::kAttrKeyFieldNumber;
const int GangAttr::kArrtValueFieldNumber;
#endif  // !_MSC_VER

GangAttr::GangAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangAttr)
}

void GangAttr::InitAsDefaultInstance() {
}

GangAttr::GangAttr(const GangAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangAttr)
}

void GangAttr::SharedCtor() {
  _cached_size_ = 0;
  attrkey_ = 0;
  arrtvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangAttr::~GangAttr() {
  // @@protoc_insertion_point(destructor:GangAttr)
  SharedDtor();
}

void GangAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GangAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangAttr_descriptor_;
}

const GangAttr& GangAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GangAttr* GangAttr::default_instance_ = NULL;

GangAttr* GangAttr::New() const {
  return new GangAttr;
}

void GangAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GangAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrkey_, arrtvalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrKey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrkey_)));
          set_has_attrkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_arrtValue;
        break;
      }

      // optional int32 arrtValue = 2;
      case 2: {
        if (tag == 16) {
         parse_arrtValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrtvalue_)));
          set_has_arrtvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangAttr)
  return false;
#undef DO_
}

void GangAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangAttr)
  // optional int32 attrKey = 1;
  if (has_attrkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrkey(), output);
  }

  // optional int32 arrtValue = 2;
  if (has_arrtvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arrtvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangAttr)
}

::google::protobuf::uint8* GangAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangAttr)
  // optional int32 attrKey = 1;
  if (has_attrkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrkey(), target);
  }

  // optional int32 arrtValue = 2;
  if (has_arrtvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arrtvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangAttr)
  return target;
}

int GangAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrKey = 1;
    if (has_attrkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrkey());
    }

    // optional int32 arrtValue = 2;
    if (has_arrtvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrtvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangAttr::MergeFrom(const GangAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrkey()) {
      set_attrkey(from.attrkey());
    }
    if (from.has_arrtvalue()) {
      set_arrtvalue(from.arrtvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangAttr::CopyFrom(const GangAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangAttr::IsInitialized() const {

  return true;
}

void GangAttr::Swap(GangAttr* other) {
  if (other != this) {
    std::swap(attrkey_, other->attrkey_);
    std::swap(arrtvalue_, other->arrtvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangAttr_descriptor_;
  metadata.reflection = GangAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangMainInfo::kGangIdFieldNumber;
const int GangMainInfo::kGangNameFieldNumber;
const int GangMainInfo::kGangTotemFieldNumber;
const int GangMainInfo::kGangLevelFieldNumber;
const int GangMainInfo::kMemberNumFieldNumber;
const int GangMainInfo::kBulletinFieldNumber;
const int GangMainInfo::kMoneyFieldNumber;
const int GangMainInfo::kPowerFieldNumber;
const int GangMainInfo::kMasterNameFieldNumber;
const int GangMainInfo::kIsKickMasterFieldNumber;
const int GangMainInfo::kKickTimeFieldNumber;
#endif  // !_MSC_VER

GangMainInfo::GangMainInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangMainInfo)
}

void GangMainInfo::InitAsDefaultInstance() {
}

GangMainInfo::GangMainInfo(const GangMainInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangMainInfo)
}

void GangMainInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ganglevel_ = 0;
  membernum_ = 0;
  bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = GOOGLE_LONGLONG(0);
  power_ = GOOGLE_LONGLONG(0);
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iskickmaster_ = 0;
  kicktime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangMainInfo::~GangMainInfo() {
  // @@protoc_insertion_point(destructor:GangMainInfo)
  SharedDtor();
}

void GangMainInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangtotem_;
  }
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bulletin_;
  }
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (this != default_instance_) {
  }
}

void GangMainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangMainInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangMainInfo_descriptor_;
}

const GangMainInfo& GangMainInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GangMainInfo* GangMainInfo::default_instance_ = NULL;

GangMainInfo* GangMainInfo::New() const {
  return new GangMainInfo;
}

void GangMainInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GangMainInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ganglevel_, membernum_);
    ZR_(money_, power_);
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
    if (has_gangtotem()) {
      if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangtotem_->clear();
      }
    }
    if (has_bulletin()) {
      if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bulletin_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(kicktime_, iskickmaster_);
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangMainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangMainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gangId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangTotem;
        break;
      }

      // optional string gangTotem = 3;
      case 3: {
        if (tag == 26) {
         parse_gangTotem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangtotem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangtotem().data(), this->gangtotem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangtotem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gangLevel;
        break;
      }

      // optional int32 gangLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_gangLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ganglevel_)));
          set_has_ganglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_memberNum;
        break;
      }

      // optional int32 memberNum = 5;
      case 5: {
        if (tag == 40) {
         parse_memberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bulletin;
        break;
      }

      // optional string bulletin = 6;
      case 6: {
        if (tag == 50) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bulletin().data(), this->bulletin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bulletin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional int64 money = 7;
      case 7: {
        if (tag == 56) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_power;
        break;
      }

      // optional int64 power = 8;
      case 8: {
        if (tag == 64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_masterName;
        break;
      }

      // optional string masterName = 9;
      case 9: {
        if (tag == 74) {
         parse_masterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isKickMaster;
        break;
      }

      // optional int32 isKickMaster = 10;
      case 10: {
        if (tag == 80) {
         parse_isKickMaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iskickmaster_)));
          set_has_iskickmaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kickTime;
        break;
      }

      // optional int64 kickTime = 11;
      case 11: {
        if (tag == 88) {
         parse_kickTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kicktime_)));
          set_has_kicktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangMainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangMainInfo)
  return false;
#undef DO_
}

void GangMainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangMainInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  // optional string gangTotem = 3;
  if (has_gangtotem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangtotem().data(), this->gangtotem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangtotem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangtotem(), output);
  }

  // optional int32 gangLevel = 4;
  if (has_ganglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ganglevel(), output);
  }

  // optional int32 memberNum = 5;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->membernum(), output);
  }

  // optional string bulletin = 6;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bulletin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bulletin(), output);
  }

  // optional int64 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->money(), output);
  }

  // optional int64 power = 8;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->power(), output);
  }

  // optional string masterName = 9;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->mastername(), output);
  }

  // optional int32 isKickMaster = 10;
  if (has_iskickmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->iskickmaster(), output);
  }

  // optional int64 kickTime = 11;
  if (has_kicktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->kicktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangMainInfo)
}

::google::protobuf::uint8* GangMainInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangMainInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  // optional string gangTotem = 3;
  if (has_gangtotem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangtotem().data(), this->gangtotem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangtotem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangtotem(), target);
  }

  // optional int32 gangLevel = 4;
  if (has_ganglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ganglevel(), target);
  }

  // optional int32 memberNum = 5;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->membernum(), target);
  }

  // optional string bulletin = 6;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bulletin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bulletin(), target);
  }

  // optional int64 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->money(), target);
  }

  // optional int64 power = 8;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->power(), target);
  }

  // optional string masterName = 9;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mastername(), target);
  }

  // optional int32 isKickMaster = 10;
  if (has_iskickmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->iskickmaster(), target);
  }

  // optional int64 kickTime = 11;
  if (has_kicktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->kicktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangMainInfo)
  return target;
}

int GangMainInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gangId = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional string gangTotem = 3;
    if (has_gangtotem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangtotem());
    }

    // optional int32 gangLevel = 4;
    if (has_ganglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ganglevel());
    }

    // optional int32 memberNum = 5;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membernum());
    }

    // optional string bulletin = 6;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletin());
    }

    // optional int64 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int64 power = 8;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->power());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string masterName = 9;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

    // optional int32 isKickMaster = 10;
    if (has_iskickmaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iskickmaster());
    }

    // optional int64 kickTime = 11;
    if (has_kicktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kicktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangMainInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangMainInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangMainInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangMainInfo::MergeFrom(const GangMainInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_gangtotem()) {
      set_gangtotem(from.gangtotem());
    }
    if (from.has_ganglevel()) {
      set_ganglevel(from.ganglevel());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_bulletin()) {
      set_bulletin(from.bulletin());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
    if (from.has_iskickmaster()) {
      set_iskickmaster(from.iskickmaster());
    }
    if (from.has_kicktime()) {
      set_kicktime(from.kicktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangMainInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangMainInfo::CopyFrom(const GangMainInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangMainInfo::IsInitialized() const {

  return true;
}

void GangMainInfo::Swap(GangMainInfo* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(gangtotem_, other->gangtotem_);
    std::swap(ganglevel_, other->ganglevel_);
    std::swap(membernum_, other->membernum_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(money_, other->money_);
    std::swap(power_, other->power_);
    std::swap(mastername_, other->mastername_);
    std::swap(iskickmaster_, other->iskickmaster_);
    std::swap(kicktime_, other->kicktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangMainInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangMainInfo_descriptor_;
  metadata.reflection = GangMainInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingInfo::kGangDonateNumFieldNumber;
const int BuildingInfo::kBuiltAttrFieldNumber;
const int BuildingInfo::kPracticeFieldNumber;
const int BuildingInfo::kBuyUniqueInfoFieldNumber;
#endif  // !_MSC_VER

BuildingInfo::BuildingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuildingInfo)
}

void BuildingInfo::InitAsDefaultInstance() {
}

BuildingInfo::BuildingInfo(const BuildingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BuildingInfo)
}

void BuildingInfo::SharedCtor() {
  _cached_size_ = 0;
  gangdonatenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingInfo::~BuildingInfo() {
  // @@protoc_insertion_point(destructor:BuildingInfo)
  SharedDtor();
}

void BuildingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingInfo_descriptor_;
}

const BuildingInfo& BuildingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

BuildingInfo* BuildingInfo::default_instance_ = NULL;

BuildingInfo* BuildingInfo::New() const {
  return new BuildingInfo;
}

void BuildingInfo::Clear() {
  gangdonatenum_ = 0;
  builtattr_.Clear();
  practice_.Clear();
  buyuniqueinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BuildingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gangDonateNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangdonatenum_)));
          set_has_gangdonatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_builtAttr;
        break;
      }

      // repeated .GangAttr builtAttr = 2;
      case 2: {
        if (tag == 18) {
         parse_builtAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builtattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_builtAttr;
        if (input->ExpectTag(26)) goto parse_practice;
        break;
      }

      // repeated .GangAttr practice = 3;
      case 3: {
        if (tag == 26) {
         parse_practice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_practice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_practice;
        if (input->ExpectTag(34)) goto parse_buyUniqueInfo;
        break;
      }

      // repeated .GangAttr buyUniqueInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_buyUniqueInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyuniqueinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buyUniqueInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BuildingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BuildingInfo)
  return false;
#undef DO_
}

void BuildingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BuildingInfo)
  // optional int32 gangDonateNum = 1;
  if (has_gangdonatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gangdonatenum(), output);
  }

  // repeated .GangAttr builtAttr = 2;
  for (int i = 0; i < this->builtattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->builtattr(i), output);
  }

  // repeated .GangAttr practice = 3;
  for (int i = 0; i < this->practice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->practice(i), output);
  }

  // repeated .GangAttr buyUniqueInfo = 4;
  for (int i = 0; i < this->buyuniqueinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buyuniqueinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BuildingInfo)
}

::google::protobuf::uint8* BuildingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildingInfo)
  // optional int32 gangDonateNum = 1;
  if (has_gangdonatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gangdonatenum(), target);
  }

  // repeated .GangAttr builtAttr = 2;
  for (int i = 0; i < this->builtattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->builtattr(i), target);
  }

  // repeated .GangAttr practice = 3;
  for (int i = 0; i < this->practice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->practice(i), target);
  }

  // repeated .GangAttr buyUniqueInfo = 4;
  for (int i = 0; i < this->buyuniqueinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buyuniqueinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildingInfo)
  return target;
}

int BuildingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gangDonateNum = 1;
    if (has_gangdonatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangdonatenum());
    }

  }
  // repeated .GangAttr builtAttr = 2;
  total_size += 1 * this->builtattr_size();
  for (int i = 0; i < this->builtattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builtattr(i));
  }

  // repeated .GangAttr practice = 3;
  total_size += 1 * this->practice_size();
  for (int i = 0; i < this->practice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->practice(i));
  }

  // repeated .GangAttr buyUniqueInfo = 4;
  total_size += 1 * this->buyuniqueinfo_size();
  for (int i = 0; i < this->buyuniqueinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyuniqueinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingInfo::MergeFrom(const BuildingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  builtattr_.MergeFrom(from.builtattr_);
  practice_.MergeFrom(from.practice_);
  buyuniqueinfo_.MergeFrom(from.buyuniqueinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangdonatenum()) {
      set_gangdonatenum(from.gangdonatenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingInfo::CopyFrom(const BuildingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingInfo::IsInitialized() const {

  return true;
}

void BuildingInfo::Swap(BuildingInfo* other) {
  if (other != this) {
    std::swap(gangdonatenum_, other->gangdonatenum_);
    builtattr_.Swap(&other->builtattr_);
    practice_.Swap(&other->practice_);
    buyuniqueinfo_.Swap(&other->buyuniqueinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingInfo_descriptor_;
  metadata.reflection = BuildingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangMemberInfo::kMemIdFieldNumber;
const int GangMemberInfo::kMemNameFieldNumber;
const int GangMemberInfo::kMemLevelFieldNumber;
const int GangMemberInfo::kMemFightPowerFieldNumber;
const int GangMemberInfo::kMemJobFieldNumber;
const int GangMemberInfo::kMemOnlineFieldNumber;
const int GangMemberInfo::kMemContributeFieldNumber;
const int GangMemberInfo::kGangContributeTotalFieldNumber;
const int GangMemberInfo::kProfessionIdFieldNumber;
const int GangMemberInfo::kVipFieldNumber;
const int GangMemberInfo::kMemLogoutTimeFieldNumber;
const int GangMemberInfo::kSexFieldNumber;
#endif  // !_MSC_VER

GangMemberInfo::GangMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangMemberInfo)
}

void GangMemberInfo::InitAsDefaultInstance() {
}

GangMemberInfo::GangMemberInfo(const GangMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangMemberInfo)
}

void GangMemberInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memid_ = GOOGLE_LONGLONG(0);
  memname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memlevel_ = 0;
  memfightpower_ = GOOGLE_LONGLONG(0);
  memjob_ = 0;
  memonline_ = 0;
  memcontribute_ = GOOGLE_LONGLONG(0);
  gangcontributetotal_ = GOOGLE_LONGLONG(0);
  professionid_ = 0;
  vip_ = 0;
  memlogouttime_ = GOOGLE_LONGLONG(0);
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangMemberInfo::~GangMemberInfo() {
  // @@protoc_insertion_point(destructor:GangMemberInfo)
  SharedDtor();
}

void GangMemberInfo::SharedDtor() {
  if (memname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memname_;
  }
  if (this != default_instance_) {
  }
}

void GangMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangMemberInfo_descriptor_;
}

const GangMemberInfo& GangMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GangMemberInfo* GangMemberInfo::default_instance_ = NULL;

GangMemberInfo* GangMemberInfo::New() const {
  return new GangMemberInfo;
}

void GangMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GangMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(memfightpower_, memonline_);
    memid_ = GOOGLE_LONGLONG(0);
    if (has_memname()) {
      if (memname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        memname_->clear();
      }
    }
    gangcontributetotal_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(memlogouttime_, sex_);
    professionid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 memId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memid_)));
          set_has_memid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memName;
        break;
      }

      // optional string memName = 2;
      case 2: {
        if (tag == 18) {
         parse_memName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memname().data(), this->memname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "memname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_memLevel;
        break;
      }

      // optional int32 memLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_memLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memlevel_)));
          set_has_memlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memFightPower;
        break;
      }

      // optional int64 memFightPower = 4;
      case 4: {
        if (tag == 32) {
         parse_memFightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memfightpower_)));
          set_has_memfightpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_memJob;
        break;
      }

      // optional int32 memJob = 5;
      case 5: {
        if (tag == 40) {
         parse_memJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memjob_)));
          set_has_memjob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_memOnline;
        break;
      }

      // optional int32 memOnline = 6;
      case 6: {
        if (tag == 48) {
         parse_memOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memonline_)));
          set_has_memonline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_memContribute;
        break;
      }

      // optional int64 memContribute = 7;
      case 7: {
        if (tag == 56) {
         parse_memContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memcontribute_)));
          set_has_memcontribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gangContributeTotal;
        break;
      }

      // optional int64 gangContributeTotal = 8;
      case 8: {
        if (tag == 64) {
         parse_gangContributeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangcontributetotal_)));
          set_has_gangcontributetotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_professionId;
        break;
      }

      // optional int32 professionId = 9;
      case 9: {
        if (tag == 72) {
         parse_professionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_vip;
        break;
      }

      // optional int32 vip = 10;
      case 10: {
        if (tag == 80) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_memLogoutTime;
        break;
      }

      // optional int64 memLogoutTime = 11;
      case 11: {
        if (tag == 88) {
         parse_memLogoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memlogouttime_)));
          set_has_memlogouttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sex;
        break;
      }

      // optional int32 sex = 12;
      case 12: {
        if (tag == 96) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangMemberInfo)
  return false;
#undef DO_
}

void GangMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangMemberInfo)
  // optional int64 memId = 1;
  if (has_memid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->memid(), output);
  }

  // optional string memName = 2;
  if (has_memname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memname().data(), this->memname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->memname(), output);
  }

  // optional int32 memLevel = 3;
  if (has_memlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->memlevel(), output);
  }

  // optional int64 memFightPower = 4;
  if (has_memfightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->memfightpower(), output);
  }

  // optional int32 memJob = 5;
  if (has_memjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memjob(), output);
  }

  // optional int32 memOnline = 6;
  if (has_memonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->memonline(), output);
  }

  // optional int64 memContribute = 7;
  if (has_memcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->memcontribute(), output);
  }

  // optional int64 gangContributeTotal = 8;
  if (has_gangcontributetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->gangcontributetotal(), output);
  }

  // optional int32 professionId = 9;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->professionid(), output);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vip(), output);
  }

  // optional int64 memLogoutTime = 11;
  if (has_memlogouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->memlogouttime(), output);
  }

  // optional int32 sex = 12;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangMemberInfo)
}

::google::protobuf::uint8* GangMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangMemberInfo)
  // optional int64 memId = 1;
  if (has_memid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->memid(), target);
  }

  // optional string memName = 2;
  if (has_memname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memname().data(), this->memname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "memname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->memname(), target);
  }

  // optional int32 memLevel = 3;
  if (has_memlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->memlevel(), target);
  }

  // optional int64 memFightPower = 4;
  if (has_memfightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->memfightpower(), target);
  }

  // optional int32 memJob = 5;
  if (has_memjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memjob(), target);
  }

  // optional int32 memOnline = 6;
  if (has_memonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->memonline(), target);
  }

  // optional int64 memContribute = 7;
  if (has_memcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->memcontribute(), target);
  }

  // optional int64 gangContributeTotal = 8;
  if (has_gangcontributetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->gangcontributetotal(), target);
  }

  // optional int32 professionId = 9;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->professionid(), target);
  }

  // optional int32 vip = 10;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vip(), target);
  }

  // optional int64 memLogoutTime = 11;
  if (has_memlogouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->memlogouttime(), target);
  }

  // optional int32 sex = 12;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangMemberInfo)
  return target;
}

int GangMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 memId = 1;
    if (has_memid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memid());
    }

    // optional string memName = 2;
    if (has_memname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memname());
    }

    // optional int32 memLevel = 3;
    if (has_memlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memlevel());
    }

    // optional int64 memFightPower = 4;
    if (has_memfightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memfightpower());
    }

    // optional int32 memJob = 5;
    if (has_memjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memjob());
    }

    // optional int32 memOnline = 6;
    if (has_memonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memonline());
    }

    // optional int64 memContribute = 7;
    if (has_memcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memcontribute());
    }

    // optional int64 gangContributeTotal = 8;
    if (has_gangcontributetotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangcontributetotal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 professionId = 9;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 vip = 10;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int64 memLogoutTime = 11;
    if (has_memlogouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memlogouttime());
    }

    // optional int32 sex = 12;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangMemberInfo::MergeFrom(const GangMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memid()) {
      set_memid(from.memid());
    }
    if (from.has_memname()) {
      set_memname(from.memname());
    }
    if (from.has_memlevel()) {
      set_memlevel(from.memlevel());
    }
    if (from.has_memfightpower()) {
      set_memfightpower(from.memfightpower());
    }
    if (from.has_memjob()) {
      set_memjob(from.memjob());
    }
    if (from.has_memonline()) {
      set_memonline(from.memonline());
    }
    if (from.has_memcontribute()) {
      set_memcontribute(from.memcontribute());
    }
    if (from.has_gangcontributetotal()) {
      set_gangcontributetotal(from.gangcontributetotal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_memlogouttime()) {
      set_memlogouttime(from.memlogouttime());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangMemberInfo::CopyFrom(const GangMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangMemberInfo::IsInitialized() const {

  return true;
}

void GangMemberInfo::Swap(GangMemberInfo* other) {
  if (other != this) {
    std::swap(memid_, other->memid_);
    std::swap(memname_, other->memname_);
    std::swap(memlevel_, other->memlevel_);
    std::swap(memfightpower_, other->memfightpower_);
    std::swap(memjob_, other->memjob_);
    std::swap(memonline_, other->memonline_);
    std::swap(memcontribute_, other->memcontribute_);
    std::swap(gangcontributetotal_, other->gangcontributetotal_);
    std::swap(professionid_, other->professionid_);
    std::swap(vip_, other->vip_);
    std::swap(memlogouttime_, other->memlogouttime_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangMemberInfo_descriptor_;
  metadata.reflection = GangMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCreateGang::kRequestTypeFieldNumber;
const int CGCreateGang::kGangNameFieldNumber;
const int CGCreateGang::kGangFontFieldNumber;
#endif  // !_MSC_VER

CGCreateGang::CGCreateGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCreateGang)
}

void CGCreateGang::InitAsDefaultInstance() {
}

CGCreateGang::CGCreateGang(const CGCreateGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCreateGang)
}

void CGCreateGang::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requesttype_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangfont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCreateGang::~CGCreateGang() {
  // @@protoc_insertion_point(destructor:CGCreateGang)
  SharedDtor();
}

void CGCreateGang::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangfont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangfont_;
  }
  if (this != default_instance_) {
  }
}

void CGCreateGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCreateGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCreateGang_descriptor_;
}

const CGCreateGang& CGCreateGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGCreateGang* CGCreateGang::default_instance_ = NULL;

CGCreateGang* CGCreateGang::New() const {
  return new CGCreateGang;
}

void CGCreateGang::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    requesttype_ = 0;
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
    if (has_gangfont()) {
      if (gangfont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangfont_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCreateGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCreateGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 requestType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttype_)));
          set_has_requesttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangFont;
        break;
      }

      // optional string gangFont = 3;
      case 3: {
        if (tag == 26) {
         parse_gangFont:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangfont()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangfont().data(), this->gangfont().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangfont");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCreateGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCreateGang)
  return false;
#undef DO_
}

void CGCreateGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCreateGang)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->requesttype(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  // optional string gangFont = 3;
  if (has_gangfont()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangfont().data(), this->gangfont().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangfont");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangfont(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCreateGang)
}

::google::protobuf::uint8* CGCreateGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCreateGang)
  // optional int32 requestType = 1;
  if (has_requesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->requesttype(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  // optional string gangFont = 3;
  if (has_gangfont()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangfont().data(), this->gangfont().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangfont");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangfont(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCreateGang)
  return target;
}

int CGCreateGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 requestType = 1;
    if (has_requesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttype());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional string gangFont = 3;
    if (has_gangfont()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangfont());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCreateGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCreateGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCreateGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCreateGang::MergeFrom(const CGCreateGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttype()) {
      set_requesttype(from.requesttype());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_gangfont()) {
      set_gangfont(from.gangfont());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCreateGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCreateGang::CopyFrom(const CGCreateGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCreateGang::IsInitialized() const {

  return true;
}

void CGCreateGang::Swap(CGCreateGang* other) {
  if (other != this) {
    std::swap(requesttype_, other->requesttype_);
    std::swap(gangname_, other->gangname_);
    std::swap(gangfont_, other->gangfont_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCreateGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCreateGang_descriptor_;
  metadata.reflection = CGCreateGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCreateGang::kResponseTypeFieldNumber;
const int GCCreateGang::kResultFieldNumber;
const int GCCreateGang::kGangInfoFieldNumber;
const int GCCreateGang::kMemberInfoFieldNumber;
const int GCCreateGang::kBuildInfoFieldNumber;
#endif  // !_MSC_VER

GCCreateGang::GCCreateGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCreateGang)
}

void GCCreateGang::InitAsDefaultInstance() {
  ganginfo_ = const_cast< ::GangMainInfo*>(&::GangMainInfo::default_instance());
  buildinfo_ = const_cast< ::BuildingInfo*>(&::BuildingInfo::default_instance());
}

GCCreateGang::GCCreateGang(const GCCreateGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCreateGang)
}

void GCCreateGang::SharedCtor() {
  _cached_size_ = 0;
  responsetype_ = 0;
  result_ = 0;
  ganginfo_ = NULL;
  buildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCreateGang::~GCCreateGang() {
  // @@protoc_insertion_point(destructor:GCCreateGang)
  SharedDtor();
}

void GCCreateGang::SharedDtor() {
  if (this != default_instance_) {
    delete ganginfo_;
    delete buildinfo_;
  }
}

void GCCreateGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCreateGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCreateGang_descriptor_;
}

const GCCreateGang& GCCreateGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCCreateGang* GCCreateGang::default_instance_ = NULL;

GCCreateGang* GCCreateGang::New() const {
  return new GCCreateGang;
}

void GCCreateGang::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCreateGang*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(responsetype_, result_);
    if (has_ganginfo()) {
      if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
    }
    if (has_buildinfo()) {
      if (buildinfo_ != NULL) buildinfo_->::BuildingInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  memberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCreateGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCreateGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 responseType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsetype_)));
          set_has_responsetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangInfo;
        break;
      }

      // optional .GangMainInfo gangInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_gangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        break;
      }

      // repeated .GangMemberInfo memberInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        if (input->ExpectTag(42)) goto parse_buildInfo;
        break;
      }

      // optional .BuildingInfo buildInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_buildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCreateGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCreateGang)
  return false;
#undef DO_
}

void GCCreateGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCreateGang)
  // optional int32 responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->responsetype(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ganginfo(), output);
  }

  // repeated .GangMemberInfo memberInfo = 4;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberinfo(i), output);
  }

  // optional .BuildingInfo buildInfo = 5;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCreateGang)
}

::google::protobuf::uint8* GCCreateGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCreateGang)
  // optional int32 responseType = 1;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->responsetype(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ganginfo(), target);
  }

  // repeated .GangMemberInfo memberInfo = 4;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberinfo(i), target);
  }

  // optional .BuildingInfo buildInfo = 5;
  if (has_buildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCreateGang)
  return target;
}

int GCCreateGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->responsetype());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GangMainInfo gangInfo = 3;
    if (has_ganginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ganginfo());
    }

    // optional .BuildingInfo buildInfo = 5;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildinfo());
    }

  }
  // repeated .GangMemberInfo memberInfo = 4;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCreateGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCreateGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCreateGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCreateGang::MergeFrom(const GCCreateGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ganginfo()) {
      mutable_ganginfo()->::GangMainInfo::MergeFrom(from.ganginfo());
    }
    if (from.has_buildinfo()) {
      mutable_buildinfo()->::BuildingInfo::MergeFrom(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCreateGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCreateGang::CopyFrom(const GCCreateGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreateGang::IsInitialized() const {

  return true;
}

void GCCreateGang::Swap(GCCreateGang* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    std::swap(result_, other->result_);
    std::swap(ganginfo_, other->ganginfo_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCreateGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCreateGang_descriptor_;
  metadata.reflection = GCCreateGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetGangList::kListTypeFieldNumber;
const int CGGetGangList::kGangNameFieldNumber;
#endif  // !_MSC_VER

CGGetGangList::CGGetGangList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetGangList)
}

void CGGetGangList::InitAsDefaultInstance() {
}

CGGetGangList::CGGetGangList(const CGGetGangList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetGangList)
}

void CGGetGangList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  listtype_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetGangList::~CGGetGangList() {
  // @@protoc_insertion_point(destructor:CGGetGangList)
  SharedDtor();
}

void CGGetGangList::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void CGGetGangList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetGangList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetGangList_descriptor_;
}

const CGGetGangList& CGGetGangList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGGetGangList* CGGetGangList::default_instance_ = NULL;

CGGetGangList* CGGetGangList::New() const {
  return new CGGetGangList;
}

void CGGetGangList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    listtype_ = 0;
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetGangList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetGangList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 listType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listtype_)));
          set_has_listtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangName;
        break;
      }

      // optional string gangName = 3;
      case 3: {
        if (tag == 26) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetGangList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetGangList)
  return false;
#undef DO_
}

void CGGetGangList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetGangList)
  // optional int32 listType = 1;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->listtype(), output);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetGangList)
}

::google::protobuf::uint8* CGGetGangList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetGangList)
  // optional int32 listType = 1;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->listtype(), target);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetGangList)
  return target;
}

int CGGetGangList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 listType = 1;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listtype());
    }

    // optional string gangName = 3;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetGangList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetGangList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetGangList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetGangList::MergeFrom(const CGGetGangList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetGangList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetGangList::CopyFrom(const CGGetGangList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetGangList::IsInitialized() const {

  return true;
}

void CGGetGangList::Swap(CGGetGangList* other) {
  if (other != this) {
    std::swap(listtype_, other->listtype_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetGangList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetGangList_descriptor_;
  metadata.reflection = CGGetGangList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetGangList::kListTypeFieldNumber;
const int GCGetGangList::kGangInfoFieldNumber;
const int GCGetGangList::kResultFieldNumber;
const int GCGetGangList::kJoinGangIdListFieldNumber;
const int GCGetGangList::kLastQuitTimeFieldNumber;
#endif  // !_MSC_VER

GCGetGangList::GCGetGangList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetGangList)
}

void GCGetGangList::InitAsDefaultInstance() {
}

GCGetGangList::GCGetGangList(const GCGetGangList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetGangList)
}

void GCGetGangList::SharedCtor() {
  _cached_size_ = 0;
  listtype_ = 0;
  result_ = 0;
  lastquittime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetGangList::~GCGetGangList() {
  // @@protoc_insertion_point(destructor:GCGetGangList)
  SharedDtor();
}

void GCGetGangList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetGangList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetGangList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetGangList_descriptor_;
}

const GCGetGangList& GCGetGangList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGetGangList* GCGetGangList::default_instance_ = NULL;

GCGetGangList* GCGetGangList::New() const {
  return new GCGetGangList;
}

void GCGetGangList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetGangList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 21) {
    ZR_(listtype_, result_);
    lastquittime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ganginfo_.Clear();
  joingangidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetGangList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetGangList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 listType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listtype_)));
          set_has_listtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gangInfo;
        break;
      }

      // repeated .GangMainInfo gangInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_gangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gangInfo;
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_joinGangIdList;
        break;
      }

      // repeated int64 joinGangIdList = 6;
      case 6: {
        if (tag == 48) {
         parse_joinGangIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_joingangidlist())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_joingangidlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_joinGangIdList;
        if (input->ExpectTag(56)) goto parse_lastQuitTime;
        break;
      }

      // optional int64 lastQuitTime = 7;
      case 7: {
        if (tag == 56) {
         parse_lastQuitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastquittime_)));
          set_has_lastquittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetGangList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetGangList)
  return false;
#undef DO_
}

void GCGetGangList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetGangList)
  // optional int32 listType = 1;
  if (has_listtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->listtype(), output);
  }

  // repeated .GangMainInfo gangInfo = 4;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ganginfo(i), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // repeated int64 joinGangIdList = 6;
  for (int i = 0; i < this->joingangidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->joingangidlist(i), output);
  }

  // optional int64 lastQuitTime = 7;
  if (has_lastquittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastquittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetGangList)
}

::google::protobuf::uint8* GCGetGangList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetGangList)
  // optional int32 listType = 1;
  if (has_listtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->listtype(), target);
  }

  // repeated .GangMainInfo gangInfo = 4;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ganginfo(i), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // repeated int64 joinGangIdList = 6;
  for (int i = 0; i < this->joingangidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->joingangidlist(i), target);
  }

  // optional int64 lastQuitTime = 7;
  if (has_lastquittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastquittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetGangList)
  return target;
}

int GCGetGangList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 listType = 1;
    if (has_listtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listtype());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 lastQuitTime = 7;
    if (has_lastquittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastquittime());
    }

  }
  // repeated .GangMainInfo gangInfo = 4;
  total_size += 1 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated int64 joinGangIdList = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->joingangidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->joingangidlist(i));
    }
    total_size += 1 * this->joingangidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetGangList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetGangList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetGangList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetGangList::MergeFrom(const GCGetGangList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo_.MergeFrom(from.ganginfo_);
  joingangidlist_.MergeFrom(from.joingangidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listtype()) {
      set_listtype(from.listtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lastquittime()) {
      set_lastquittime(from.lastquittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetGangList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetGangList::CopyFrom(const GCGetGangList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetGangList::IsInitialized() const {

  return true;
}

void GCGetGangList::Swap(GCGetGangList* other) {
  if (other != this) {
    std::swap(listtype_, other->listtype_);
    ganginfo_.Swap(&other->ganginfo_);
    std::swap(result_, other->result_);
    joingangidlist_.Swap(&other->joingangidlist_);
    std::swap(lastquittime_, other->lastquittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetGangList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetGangList_descriptor_;
  metadata.reflection = GCGetGangList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGangOperate::kOperateTypeFieldNumber;
const int CGGangOperate::kGangIdFieldNumber;
const int CGGangOperate::kBulletinFieldNumber;
const int CGGangOperate::kBePlayerIdFieldNumber;
const int CGGangOperate::kBePlayerTypeFieldNumber;
const int CGGangOperate::kGangIdListFieldNumber;
#endif  // !_MSC_VER

CGGangOperate::CGGangOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGangOperate)
}

void CGGangOperate::InitAsDefaultInstance() {
}

CGGangOperate::CGGangOperate(const CGGangOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGangOperate)
}

void CGGangOperate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operatetype_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  beplayerid_ = GOOGLE_LONGLONG(0);
  beplayertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGangOperate::~CGGangOperate() {
  // @@protoc_insertion_point(destructor:CGGangOperate)
  SharedDtor();
}

void CGGangOperate::SharedDtor() {
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bulletin_;
  }
  if (this != default_instance_) {
  }
}

void CGGangOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGangOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGangOperate_descriptor_;
}

const CGGangOperate& CGGangOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGGangOperate* CGGangOperate::default_instance_ = NULL;

CGGangOperate* CGGangOperate::New() const {
  return new CGGangOperate;
}

void CGGangOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGangOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(operatetype_, beplayerid_);
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_bulletin()) {
      if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bulletin_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gangidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGangOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGangOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gangId;
        break;
      }

      // optional int64 gangId = 2;
      case 2: {
        if (tag == 16) {
         parse_gangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bulletin;
        break;
      }

      // optional string bulletin = 3;
      case 3: {
        if (tag == 26) {
         parse_bulletin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bulletin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bulletin().data(), this->bulletin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bulletin");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bePlayerId;
        break;
      }

      // optional int64 bePlayerId = 4;
      case 4: {
        if (tag == 32) {
         parse_bePlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beplayerid_)));
          set_has_beplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bePlayerType;
        break;
      }

      // optional int32 bePlayerType = 5;
      case 5: {
        if (tag == 40) {
         parse_bePlayerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beplayertype_)));
          set_has_beplayertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gangIdList;
        break;
      }

      // repeated int64 gangIdList = 6;
      case 6: {
        if (tag == 48) {
         parse_gangIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_gangidlist())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_gangidlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gangIdList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGangOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGangOperate)
  return false;
#undef DO_
}

void CGGangOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGangOperate)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gangid(), output);
  }

  // optional string bulletin = 3;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bulletin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bulletin(), output);
  }

  // optional int64 bePlayerId = 4;
  if (has_beplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->beplayerid(), output);
  }

  // optional int32 bePlayerType = 5;
  if (has_beplayertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beplayertype(), output);
  }

  // repeated int64 gangIdList = 6;
  for (int i = 0; i < this->gangidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->gangidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGangOperate)
}

::google::protobuf::uint8* CGGangOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGangOperate)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gangid(), target);
  }

  // optional string bulletin = 3;
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bulletin().data(), this->bulletin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bulletin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bulletin(), target);
  }

  // optional int64 bePlayerId = 4;
  if (has_beplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->beplayerid(), target);
  }

  // optional int32 bePlayerType = 5;
  if (has_beplayertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beplayertype(), target);
  }

  // repeated int64 gangIdList = 6;
  for (int i = 0; i < this->gangidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->gangidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGangOperate)
  return target;
}

int CGGangOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional int64 gangId = 2;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string bulletin = 3;
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bulletin());
    }

    // optional int64 bePlayerId = 4;
    if (has_beplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beplayerid());
    }

    // optional int32 bePlayerType = 5;
    if (has_beplayertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beplayertype());
    }

  }
  // repeated int64 gangIdList = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->gangidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->gangidlist(i));
    }
    total_size += 1 * this->gangidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGangOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGangOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGangOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGangOperate::MergeFrom(const CGGangOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangidlist_.MergeFrom(from.gangidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_bulletin()) {
      set_bulletin(from.bulletin());
    }
    if (from.has_beplayerid()) {
      set_beplayerid(from.beplayerid());
    }
    if (from.has_beplayertype()) {
      set_beplayertype(from.beplayertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGangOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGangOperate::CopyFrom(const CGGangOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGangOperate::IsInitialized() const {

  return true;
}

void CGGangOperate::Swap(CGGangOperate* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(gangid_, other->gangid_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(beplayerid_, other->beplayerid_);
    std::swap(beplayertype_, other->beplayertype_);
    gangidlist_.Swap(&other->gangidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGangOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGangOperate_descriptor_;
  metadata.reflection = CGGangOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangOperate::kOperateTypeFieldNumber;
const int GCGangOperate::kResultFieldNumber;
const int GCGangOperate::kGangInfoFieldNumber;
const int GCGangOperate::kMemberInfoFieldNumber;
const int GCGangOperate::kQuitMemberIdFieldNumber;
const int GCGangOperate::kJoinGangIdFieldNumber;
const int GCGangOperate::kJoinGangIdListFieldNumber;
const int GCGangOperate::kKickTimeFieldNumber;
const int GCGangOperate::kIsKickMasterFieldNumber;
#endif  // !_MSC_VER

GCGangOperate::GCGangOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangOperate)
}

void GCGangOperate::InitAsDefaultInstance() {
  ganginfo_ = const_cast< ::GangMainInfo*>(&::GangMainInfo::default_instance());
}

GCGangOperate::GCGangOperate(const GCGangOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangOperate)
}

void GCGangOperate::SharedCtor() {
  _cached_size_ = 0;
  operatetype_ = 0;
  result_ = 0;
  ganginfo_ = NULL;
  quitmemberid_ = GOOGLE_LONGLONG(0);
  joingangid_ = GOOGLE_LONGLONG(0);
  kicktime_ = GOOGLE_LONGLONG(0);
  iskickmaster_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangOperate::~GCGangOperate() {
  // @@protoc_insertion_point(destructor:GCGangOperate)
  SharedDtor();
}

void GCGangOperate::SharedDtor() {
  if (this != default_instance_) {
    delete ganginfo_;
  }
}

void GCGangOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangOperate_descriptor_;
}

const GCGangOperate& GCGangOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangOperate* GCGangOperate::default_instance_ = NULL;

GCGangOperate* GCGangOperate::New() const {
  return new GCGangOperate;
}

void GCGangOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGangOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 183) {
    ZR_(operatetype_, result_);
    ZR_(quitmemberid_, joingangid_);
    if (has_ganginfo()) {
      if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
    }
    kicktime_ = GOOGLE_LONGLONG(0);
  }
  iskickmaster_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  memberinfo_.Clear();
  joingangidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangInfo;
        break;
      }

      // optional .GangMainInfo gangInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_gangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        break;
      }

      // repeated .GangMemberInfo memberInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        if (input->ExpectTag(40)) goto parse_quitMemberId;
        break;
      }

      // optional int64 quitMemberId = 5;
      case 5: {
        if (tag == 40) {
         parse_quitMemberId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quitmemberid_)));
          set_has_quitmemberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_joinGangId;
        break;
      }

      // optional int64 joinGangId = 6;
      case 6: {
        if (tag == 48) {
         parse_joinGangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &joingangid_)));
          set_has_joingangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_joinGangIdList;
        break;
      }

      // repeated int64 joinGangIdList = 7;
      case 7: {
        if (tag == 56) {
         parse_joinGangIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_joingangidlist())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_joingangidlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_joinGangIdList;
        if (input->ExpectTag(64)) goto parse_kickTime;
        break;
      }

      // optional int64 kickTime = 8;
      case 8: {
        if (tag == 64) {
         parse_kickTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kicktime_)));
          set_has_kicktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isKickMaster;
        break;
      }

      // optional int32 isKickMaster = 9;
      case 9: {
        if (tag == 72) {
         parse_isKickMaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iskickmaster_)));
          set_has_iskickmaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangOperate)
  return false;
#undef DO_
}

void GCGangOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangOperate)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ganginfo(), output);
  }

  // repeated .GangMemberInfo memberInfo = 4;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberinfo(i), output);
  }

  // optional int64 quitMemberId = 5;
  if (has_quitmemberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->quitmemberid(), output);
  }

  // optional int64 joinGangId = 6;
  if (has_joingangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->joingangid(), output);
  }

  // repeated int64 joinGangIdList = 7;
  for (int i = 0; i < this->joingangidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->joingangidlist(i), output);
  }

  // optional int64 kickTime = 8;
  if (has_kicktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->kicktime(), output);
  }

  // optional int32 isKickMaster = 9;
  if (has_iskickmaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iskickmaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangOperate)
}

::google::protobuf::uint8* GCGangOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangOperate)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ganginfo(), target);
  }

  // repeated .GangMemberInfo memberInfo = 4;
  for (int i = 0; i < this->memberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberinfo(i), target);
  }

  // optional int64 quitMemberId = 5;
  if (has_quitmemberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->quitmemberid(), target);
  }

  // optional int64 joinGangId = 6;
  if (has_joingangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->joingangid(), target);
  }

  // repeated int64 joinGangIdList = 7;
  for (int i = 0; i < this->joingangidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->joingangidlist(i), target);
  }

  // optional int64 kickTime = 8;
  if (has_kicktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->kicktime(), target);
  }

  // optional int32 isKickMaster = 9;
  if (has_iskickmaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->iskickmaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangOperate)
  return target;
}

int GCGangOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .GangMainInfo gangInfo = 3;
    if (has_ganginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ganginfo());
    }

    // optional int64 quitMemberId = 5;
    if (has_quitmemberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quitmemberid());
    }

    // optional int64 joinGangId = 6;
    if (has_joingangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->joingangid());
    }

    // optional int64 kickTime = 8;
    if (has_kicktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kicktime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isKickMaster = 9;
    if (has_iskickmaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iskickmaster());
    }

  }
  // repeated .GangMemberInfo memberInfo = 4;
  total_size += 1 * this->memberinfo_size();
  for (int i = 0; i < this->memberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberinfo(i));
  }

  // repeated int64 joinGangIdList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->joingangidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->joingangidlist(i));
    }
    total_size += 1 * this->joingangidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangOperate::MergeFrom(const GCGangOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberinfo_.MergeFrom(from.memberinfo_);
  joingangidlist_.MergeFrom(from.joingangidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ganginfo()) {
      mutable_ganginfo()->::GangMainInfo::MergeFrom(from.ganginfo());
    }
    if (from.has_quitmemberid()) {
      set_quitmemberid(from.quitmemberid());
    }
    if (from.has_joingangid()) {
      set_joingangid(from.joingangid());
    }
    if (from.has_kicktime()) {
      set_kicktime(from.kicktime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iskickmaster()) {
      set_iskickmaster(from.iskickmaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangOperate::CopyFrom(const GCGangOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangOperate::IsInitialized() const {

  return true;
}

void GCGangOperate::Swap(GCGangOperate* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(result_, other->result_);
    std::swap(ganginfo_, other->ganginfo_);
    memberinfo_.Swap(&other->memberinfo_);
    std::swap(quitmemberid_, other->quitmemberid_);
    std::swap(joingangid_, other->joingangid_);
    joingangidlist_.Swap(&other->joingangidlist_);
    std::swap(kicktime_, other->kicktime_);
    std::swap(iskickmaster_, other->iskickmaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangOperate_descriptor_;
  metadata.reflection = GCGangOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGangBuy::kRequestFieldNumber;
const int CGGangBuy::kBuyIdFieldNumber;
const int CGGangBuy::kBuyNumFieldNumber;
#endif  // !_MSC_VER

CGGangBuy::CGGangBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGangBuy)
}

void CGGangBuy::InitAsDefaultInstance() {
}

CGGangBuy::CGGangBuy(const CGGangBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGangBuy)
}

void CGGangBuy::SharedCtor() {
  _cached_size_ = 0;
  request_ = 0;
  buyid_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGangBuy::~CGGangBuy() {
  // @@protoc_insertion_point(destructor:CGGangBuy)
  SharedDtor();
}

void CGGangBuy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGangBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGangBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGangBuy_descriptor_;
}

const CGGangBuy& CGGangBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGGangBuy* CGGangBuy::default_instance_ = NULL;

CGGangBuy* CGGangBuy::New() const {
  return new CGGangBuy;
}

void CGGangBuy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGangBuy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(request_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGangBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGangBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buyId;
        break;
      }

      // optional int32 buyId = 2;
      case 2: {
        if (tag == 16) {
         parse_buyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyid_)));
          set_has_buyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGangBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGangBuy)
  return false;
#undef DO_
}

void CGGangBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGangBuy)
  // optional int32 request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request(), output);
  }

  // optional int32 buyId = 2;
  if (has_buyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buyid(), output);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGangBuy)
}

::google::protobuf::uint8* CGGangBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGangBuy)
  // optional int32 request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request(), target);
  }

  // optional int32 buyId = 2;
  if (has_buyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buyid(), target);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGangBuy)
  return target;
}

int CGGangBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request());
    }

    // optional int32 buyId = 2;
    if (has_buyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyid());
    }

    // optional int32 buyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGangBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGangBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGangBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGangBuy::MergeFrom(const CGGangBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_buyid()) {
      set_buyid(from.buyid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGangBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGangBuy::CopyFrom(const CGGangBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGangBuy::IsInitialized() const {

  return true;
}

void CGGangBuy::Swap(CGGangBuy* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(buyid_, other->buyid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGangBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGangBuy_descriptor_;
  metadata.reflection = CGGangBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangBuy::kResultFieldNumber;
const int GCGangBuy::kResponseFieldNumber;
const int GCGangBuy::kGangInfoFieldNumber;
const int GCGangBuy::kBuildInfoFieldNumber;
#endif  // !_MSC_VER

GCGangBuy::GCGangBuy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangBuy)
}

void GCGangBuy::InitAsDefaultInstance() {
  ganginfo_ = const_cast< ::GangMainInfo*>(&::GangMainInfo::default_instance());
  buildinfo_ = const_cast< ::BuildingInfo*>(&::BuildingInfo::default_instance());
}

GCGangBuy::GCGangBuy(const GCGangBuy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangBuy)
}

void GCGangBuy::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  response_ = 0;
  ganginfo_ = NULL;
  buildinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangBuy::~GCGangBuy() {
  // @@protoc_insertion_point(destructor:GCGangBuy)
  SharedDtor();
}

void GCGangBuy::SharedDtor() {
  if (this != default_instance_) {
    delete ganginfo_;
    delete buildinfo_;
  }
}

void GCGangBuy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangBuy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangBuy_descriptor_;
}

const GCGangBuy& GCGangBuy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangBuy* GCGangBuy::default_instance_ = NULL;

GCGangBuy* GCGangBuy::New() const {
  return new GCGangBuy;
}

void GCGangBuy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGangBuy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_, response_);
    if (has_ganginfo()) {
      if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
    }
    if (has_buildinfo()) {
      if (buildinfo_ != NULL) buildinfo_->::BuildingInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangBuy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangBuy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_response;
        break;
      }

      // optional int32 response = 2;
      case 2: {
        if (tag == 16) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangInfo;
        break;
      }

      // optional .GangMainInfo gangInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_gangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buildInfo;
        break;
      }

      // optional .BuildingInfo buildInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_buildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangBuy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangBuy)
  return false;
#undef DO_
}

void GCGangBuy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangBuy)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response(), output);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ganginfo(), output);
  }

  // optional .BuildingInfo buildInfo = 4;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buildinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangBuy)
}

::google::protobuf::uint8* GCGangBuy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangBuy)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response(), target);
  }

  // optional .GangMainInfo gangInfo = 3;
  if (has_ganginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ganginfo(), target);
  }

  // optional .BuildingInfo buildInfo = 4;
  if (has_buildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buildinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangBuy)
  return target;
}

int GCGangBuy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response());
    }

    // optional .GangMainInfo gangInfo = 3;
    if (has_ganginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ganginfo());
    }

    // optional .BuildingInfo buildInfo = 4;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangBuy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangBuy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangBuy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangBuy::MergeFrom(const GCGangBuy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_ganginfo()) {
      mutable_ganginfo()->::GangMainInfo::MergeFrom(from.ganginfo());
    }
    if (from.has_buildinfo()) {
      mutable_buildinfo()->::BuildingInfo::MergeFrom(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangBuy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangBuy::CopyFrom(const GCGangBuy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangBuy::IsInitialized() const {

  return true;
}

void GCGangBuy::Swap(GCGangBuy* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(response_, other->response_);
    std::swap(ganginfo_, other->ganginfo_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangBuy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangBuy_descriptor_;
  metadata.reflection = GCGangBuy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGangFight::kOperateFieldNumber;
const int CGGangFight::kMapIdFieldNumber;
#endif  // !_MSC_VER

CGGangFight::CGGangFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGangFight)
}

void CGGangFight::InitAsDefaultInstance() {
}

CGGangFight::CGGangFight(const CGGangFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGangFight)
}

void CGGangFight::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGangFight::~CGGangFight() {
  // @@protoc_insertion_point(destructor:CGGangFight)
  SharedDtor();
}

void CGGangFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGangFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGangFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGangFight_descriptor_;
}

const CGGangFight& CGGangFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGGangFight* CGGangFight::default_instance_ = NULL;

CGGangFight* CGGangFight::New() const {
  return new CGGangFight;
}

void CGGangFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGangFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, mapid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGangFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGangFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGangFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGangFight)
  return false;
#undef DO_
}

void CGGangFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGangFight)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGangFight)
}

::google::protobuf::uint8* CGGangFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGangFight)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGangFight)
  return target;
}

int CGGangFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGangFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGangFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGangFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGangFight::MergeFrom(const CGGangFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGangFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGangFight::CopyFrom(const CGGangFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGangFight::IsInitialized() const {

  return true;
}

void CGGangFight::Swap(CGGangFight* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGangFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGangFight_descriptor_;
  metadata.reflection = CGGangFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangInfo4Map::kMapIdFieldNumber;
const int GangInfo4Map::kHoldGangInfoFieldNumber;
const int GangInfo4Map::kApplyGangInfoFieldNumber;
const int GangInfo4Map::kApplyStateFieldNumber;
const int GangInfo4Map::kEnterFightStateFieldNumber;
const int GangInfo4Map::kCountOfMapFieldNumber;
const int GangInfo4Map::kFirstOfMapFieldNumber;
#endif  // !_MSC_VER

GangInfo4Map::GangInfo4Map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangInfo4Map)
}

void GangInfo4Map::InitAsDefaultInstance() {
  holdganginfo_ = const_cast< ::GangMainInfo*>(&::GangMainInfo::default_instance());
}

GangInfo4Map::GangInfo4Map(const GangInfo4Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangInfo4Map)
}

void GangInfo4Map::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  holdganginfo_ = NULL;
  applystate_ = 0;
  enterfightstate_ = 0;
  countofmap_ = 0;
  firstofmap_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangInfo4Map::~GangInfo4Map() {
  // @@protoc_insertion_point(destructor:GangInfo4Map)
  SharedDtor();
}

void GangInfo4Map::SharedDtor() {
  if (this != default_instance_) {
    delete holdganginfo_;
  }
}

void GangInfo4Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangInfo4Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangInfo4Map_descriptor_;
}

const GangInfo4Map& GangInfo4Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GangInfo4Map* GangInfo4Map::default_instance_ = NULL;

GangInfo4Map* GangInfo4Map::New() const {
  return new GangInfo4Map;
}

void GangInfo4Map::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GangInfo4Map*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(mapid_, applystate_);
    ZR_(enterfightstate_, firstofmap_);
    if (has_holdganginfo()) {
      if (holdganginfo_ != NULL) holdganginfo_->::GangMainInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  applyganginfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangInfo4Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangInfo4Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_holdGangInfo;
        break;
      }

      // optional .GangMainInfo holdGangInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_holdGangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_holdganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_applyGangInfo;
        break;
      }

      // repeated .GangMainInfo applyGangInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_applyGangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_applyGangInfo;
        if (input->ExpectTag(32)) goto parse_applyState;
        break;
      }

      // optional int32 applyState = 4;
      case 4: {
        if (tag == 32) {
         parse_applyState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applystate_)));
          set_has_applystate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enterFightState;
        break;
      }

      // optional int32 enterFightState = 5;
      case 5: {
        if (tag == 40) {
         parse_enterFightState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterfightstate_)));
          set_has_enterfightstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_countOfMap;
        break;
      }

      // optional int32 countOfMap = 6;
      case 6: {
        if (tag == 48) {
         parse_countOfMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countofmap_)));
          set_has_countofmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_firstOfMap;
        break;
      }

      // optional int32 firstOfMap = 7;
      case 7: {
        if (tag == 56) {
         parse_firstOfMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstofmap_)));
          set_has_firstofmap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangInfo4Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangInfo4Map)
  return false;
#undef DO_
}

void GangInfo4Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangInfo4Map)
  // optional int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional .GangMainInfo holdGangInfo = 2;
  if (has_holdganginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->holdganginfo(), output);
  }

  // repeated .GangMainInfo applyGangInfo = 3;
  for (int i = 0; i < this->applyganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->applyganginfo(i), output);
  }

  // optional int32 applyState = 4;
  if (has_applystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->applystate(), output);
  }

  // optional int32 enterFightState = 5;
  if (has_enterfightstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enterfightstate(), output);
  }

  // optional int32 countOfMap = 6;
  if (has_countofmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->countofmap(), output);
  }

  // optional int32 firstOfMap = 7;
  if (has_firstofmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->firstofmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangInfo4Map)
}

::google::protobuf::uint8* GangInfo4Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangInfo4Map)
  // optional int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional .GangMainInfo holdGangInfo = 2;
  if (has_holdganginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->holdganginfo(), target);
  }

  // repeated .GangMainInfo applyGangInfo = 3;
  for (int i = 0; i < this->applyganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->applyganginfo(i), target);
  }

  // optional int32 applyState = 4;
  if (has_applystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->applystate(), target);
  }

  // optional int32 enterFightState = 5;
  if (has_enterfightstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enterfightstate(), target);
  }

  // optional int32 countOfMap = 6;
  if (has_countofmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->countofmap(), target);
  }

  // optional int32 firstOfMap = 7;
  if (has_firstofmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->firstofmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangInfo4Map)
  return target;
}

int GangInfo4Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional .GangMainInfo holdGangInfo = 2;
    if (has_holdganginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->holdganginfo());
    }

    // optional int32 applyState = 4;
    if (has_applystate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applystate());
    }

    // optional int32 enterFightState = 5;
    if (has_enterfightstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterfightstate());
    }

    // optional int32 countOfMap = 6;
    if (has_countofmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countofmap());
    }

    // optional int32 firstOfMap = 7;
    if (has_firstofmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstofmap());
    }

  }
  // repeated .GangMainInfo applyGangInfo = 3;
  total_size += 1 * this->applyganginfo_size();
  for (int i = 0; i < this->applyganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyganginfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangInfo4Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangInfo4Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangInfo4Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangInfo4Map::MergeFrom(const GangInfo4Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyganginfo_.MergeFrom(from.applyganginfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_holdganginfo()) {
      mutable_holdganginfo()->::GangMainInfo::MergeFrom(from.holdganginfo());
    }
    if (from.has_applystate()) {
      set_applystate(from.applystate());
    }
    if (from.has_enterfightstate()) {
      set_enterfightstate(from.enterfightstate());
    }
    if (from.has_countofmap()) {
      set_countofmap(from.countofmap());
    }
    if (from.has_firstofmap()) {
      set_firstofmap(from.firstofmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangInfo4Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangInfo4Map::CopyFrom(const GangInfo4Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangInfo4Map::IsInitialized() const {

  return true;
}

void GangInfo4Map::Swap(GangInfo4Map* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(holdganginfo_, other->holdganginfo_);
    applyganginfo_.Swap(&other->applyganginfo_);
    std::swap(applystate_, other->applystate_);
    std::swap(enterfightstate_, other->enterfightstate_);
    std::swap(countofmap_, other->countofmap_);
    std::swap(firstofmap_, other->firstofmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangInfo4Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangInfo4Map_descriptor_;
  metadata.reflection = GangInfo4Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangFight::kOperateFieldNumber;
const int GCGangFight::kResultFieldNumber;
const int GCGangFight::kFlagFieldNumber;
const int GCGangFight::kLastTimeFieldNumber;
const int GCGangFight::kPuidFieldNumber;
const int GCGangFight::kFlaguIdFieldNumber;
const int GCGangFight::kGangInfo4MapFieldNumber;
const int GCGangFight::kPointMapFieldNumber;
#endif  // !_MSC_VER

GCGangFight::GCGangFight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangFight)
}

void GCGangFight::InitAsDefaultInstance() {
}

GCGangFight::GCGangFight(const GCGangFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangFight)
}

void GCGangFight::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  result_ = 0;
  flag_ = 0;
  lasttime_ = 0;
  puid_ = GOOGLE_LONGLONG(0);
  flaguid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangFight::~GCGangFight() {
  // @@protoc_insertion_point(destructor:GCGangFight)
  SharedDtor();
}

void GCGangFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGangFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangFight_descriptor_;
}

const GCGangFight& GCGangFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangFight* GCGangFight::default_instance_ = NULL;

GCGangFight* GCGangFight::New() const {
  return new GCGangFight;
}

void GCGangFight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGangFight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(operate_, flaguid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ganginfo4map_.Clear();
  pointmap_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangFight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 4;
      case 4: {
        if (tag == 32) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_puid;
        break;
      }

      // optional int64 puid = 5;
      case 5: {
        if (tag == 40) {
         parse_puid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &puid_)));
          set_has_puid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_flaguId;
        break;
      }

      // optional int64 flaguId = 6;
      case 6: {
        if (tag == 48) {
         parse_flaguId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flaguid_)));
          set_has_flaguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gangInfo4Map;
        break;
      }

      // repeated .GangInfo4Map gangInfo4Map = 7;
      case 7: {
        if (tag == 58) {
         parse_gangInfo4Map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo4map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gangInfo4Map;
        if (input->ExpectTag(66)) goto parse_pointMap;
        break;
      }

      // repeated .EntryStringInt pointMap = 8;
      case 8: {
        if (tag == 66) {
         parse_pointMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pointMap;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangFight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangFight)
  return false;
#undef DO_
}

void GCGangFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangFight)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  // optional int32 lastTime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lasttime(), output);
  }

  // optional int64 puid = 5;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->puid(), output);
  }

  // optional int64 flaguId = 6;
  if (has_flaguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->flaguid(), output);
  }

  // repeated .GangInfo4Map gangInfo4Map = 7;
  for (int i = 0; i < this->ganginfo4map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ganginfo4map(i), output);
  }

  // repeated .EntryStringInt pointMap = 8;
  for (int i = 0; i < this->pointmap_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pointmap(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangFight)
}

::google::protobuf::uint8* GCGangFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangFight)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  // optional int32 lastTime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lasttime(), target);
  }

  // optional int64 puid = 5;
  if (has_puid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->puid(), target);
  }

  // optional int64 flaguId = 6;
  if (has_flaguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->flaguid(), target);
  }

  // repeated .GangInfo4Map gangInfo4Map = 7;
  for (int i = 0; i < this->ganginfo4map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ganginfo4map(i), target);
  }

  // repeated .EntryStringInt pointMap = 8;
  for (int i = 0; i < this->pointmap_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pointmap(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangFight)
  return target;
}

int GCGangFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 lastTime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int64 puid = 5;
    if (has_puid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->puid());
    }

    // optional int64 flaguId = 6;
    if (has_flaguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flaguid());
    }

  }
  // repeated .GangInfo4Map gangInfo4Map = 7;
  total_size += 1 * this->ganginfo4map_size();
  for (int i = 0; i < this->ganginfo4map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo4map(i));
  }

  // repeated .EntryStringInt pointMap = 8;
  total_size += 1 * this->pointmap_size();
  for (int i = 0; i < this->pointmap_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointmap(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangFight::MergeFrom(const GCGangFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo4map_.MergeFrom(from.ganginfo4map_);
  pointmap_.MergeFrom(from.pointmap_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_puid()) {
      set_puid(from.puid());
    }
    if (from.has_flaguid()) {
      set_flaguid(from.flaguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangFight::CopyFrom(const GCGangFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangFight::IsInitialized() const {

  return true;
}

void GCGangFight::Swap(GCGangFight* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(result_, other->result_);
    std::swap(flag_, other->flag_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(puid_, other->puid_);
    std::swap(flaguid_, other->flaguid_);
    ganginfo4map_.Swap(&other->ganginfo4map_);
    pointmap_.Swap(&other->pointmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangFight_descriptor_;
  metadata.reflection = GCGangFight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEnterGang::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGEnterGang::CGEnterGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterGang)
}

void CGEnterGang::InitAsDefaultInstance() {
}

CGEnterGang::CGEnterGang(const CGEnterGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterGang)
}

void CGEnterGang::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterGang::~CGEnterGang() {
  // @@protoc_insertion_point(destructor:CGEnterGang)
  SharedDtor();
}

void CGEnterGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterGang_descriptor_;
}

const CGEnterGang& CGEnterGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGEnterGang* CGEnterGang::default_instance_ = NULL;

CGEnterGang* CGEnterGang::New() const {
  return new CGEnterGang;
}

void CGEnterGang::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterGang)
  return false;
#undef DO_
}

void CGEnterGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterGang)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterGang)
}

::google::protobuf::uint8* CGEnterGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterGang)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterGang)
  return target;
}

int CGEnterGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterGang::MergeFrom(const CGEnterGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterGang::CopyFrom(const CGEnterGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterGang::IsInitialized() const {

  return true;
}

void CGEnterGang::Swap(CGEnterGang* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterGang_descriptor_;
  metadata.reflection = CGEnterGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterGang::kResultFieldNumber;
#endif  // !_MSC_VER

GCEnterGang::GCEnterGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterGang)
}

void GCEnterGang::InitAsDefaultInstance() {
}

GCEnterGang::GCEnterGang(const GCEnterGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterGang)
}

void GCEnterGang::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterGang::~GCEnterGang() {
  // @@protoc_insertion_point(destructor:GCEnterGang)
  SharedDtor();
}

void GCEnterGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterGang_descriptor_;
}

const GCEnterGang& GCEnterGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCEnterGang* GCEnterGang::default_instance_ = NULL;

GCEnterGang* GCEnterGang::New() const {
  return new GCEnterGang;
}

void GCEnterGang::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterGang)
  return false;
#undef DO_
}

void GCEnterGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterGang)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterGang)
}

::google::protobuf::uint8* GCEnterGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterGang)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterGang)
  return target;
}

int GCEnterGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterGang::MergeFrom(const GCEnterGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterGang::CopyFrom(const GCEnterGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterGang::IsInitialized() const {

  return true;
}

void GCEnterGang::Swap(GCEnterGang* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterGang_descriptor_;
  metadata.reflection = GCEnterGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangRobberNum::kNumFieldNumber;
const int GCGangRobberNum::kNumTotalFieldNumber;
#endif  // !_MSC_VER

GCGangRobberNum::GCGangRobberNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangRobberNum)
}

void GCGangRobberNum::InitAsDefaultInstance() {
}

GCGangRobberNum::GCGangRobberNum(const GCGangRobberNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangRobberNum)
}

void GCGangRobberNum::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  numtotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangRobberNum::~GCGangRobberNum() {
  // @@protoc_insertion_point(destructor:GCGangRobberNum)
  SharedDtor();
}

void GCGangRobberNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGangRobberNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangRobberNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangRobberNum_descriptor_;
}

const GCGangRobberNum& GCGangRobberNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangRobberNum* GCGangRobberNum::default_instance_ = NULL;

GCGangRobberNum* GCGangRobberNum::New() const {
  return new GCGangRobberNum;
}

void GCGangRobberNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGangRobberNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, numtotal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangRobberNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangRobberNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numTotal;
        break;
      }

      // optional int32 numTotal = 2;
      case 2: {
        if (tag == 16) {
         parse_numTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtotal_)));
          set_has_numtotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangRobberNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangRobberNum)
  return false;
#undef DO_
}

void GCGangRobberNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangRobberNum)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 numTotal = 2;
  if (has_numtotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numtotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangRobberNum)
}

::google::protobuf::uint8* GCGangRobberNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangRobberNum)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 numTotal = 2;
  if (has_numtotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numtotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangRobberNum)
  return target;
}

int GCGangRobberNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 numTotal = 2;
    if (has_numtotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangRobberNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangRobberNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangRobberNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangRobberNum::MergeFrom(const GCGangRobberNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_numtotal()) {
      set_numtotal(from.numtotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangRobberNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangRobberNum::CopyFrom(const GCGangRobberNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangRobberNum::IsInitialized() const {

  return true;
}

void GCGangRobberNum::Swap(GCGangRobberNum* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(numtotal_, other->numtotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangRobberNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangRobberNum_descriptor_;
  metadata.reflection = GCGangRobberNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangActiveOpen::kTypeFieldNumber;
const int GCGangActiveOpen::kLanguageIdFieldNumber;
const int GCGangActiveOpen::kParamFieldNumber;
#endif  // !_MSC_VER

GCGangActiveOpen::GCGangActiveOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangActiveOpen)
}

void GCGangActiveOpen::InitAsDefaultInstance() {
}

GCGangActiveOpen::GCGangActiveOpen(const GCGangActiveOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangActiveOpen)
}

void GCGangActiveOpen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  languageid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangActiveOpen::~GCGangActiveOpen() {
  // @@protoc_insertion_point(destructor:GCGangActiveOpen)
  SharedDtor();
}

void GCGangActiveOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGangActiveOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangActiveOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangActiveOpen_descriptor_;
}

const GCGangActiveOpen& GCGangActiveOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangActiveOpen* GCGangActiveOpen::default_instance_ = NULL;

GCGangActiveOpen* GCGangActiveOpen::New() const {
  return new GCGangActiveOpen;
}

void GCGangActiveOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGangActiveOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, languageid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangActiveOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangActiveOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_languageId;
        break;
      }

      // optional int32 languageId = 2;
      case 2: {
        if (tag == 16) {
         parse_languageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &languageid_)));
          set_has_languageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // repeated string param = 3;
      case 3: {
        if (tag == 26) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_param;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangActiveOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangActiveOpen)
  return false;
#undef DO_
}

void GCGangActiveOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangActiveOpen)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 languageId = 2;
  if (has_languageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->languageid(), output);
  }

  // repeated string param = 3;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangActiveOpen)
}

::google::protobuf::uint8* GCGangActiveOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangActiveOpen)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 languageId = 2;
  if (has_languageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->languageid(), target);
  }

  // repeated string param = 3;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangActiveOpen)
  return target;
}

int GCGangActiveOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 languageId = 2;
    if (has_languageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->languageid());
    }

  }
  // repeated string param = 3;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangActiveOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangActiveOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangActiveOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangActiveOpen::MergeFrom(const GCGangActiveOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_languageid()) {
      set_languageid(from.languageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangActiveOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangActiveOpen::CopyFrom(const GCGangActiveOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangActiveOpen::IsInitialized() const {

  return true;
}

void GCGangActiveOpen::Swap(GCGangActiveOpen* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(languageid_, other->languageid_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangActiveOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangActiveOpen_descriptor_;
  metadata.reflection = GCGangActiveOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMuteGangMember::kTypeFieldNumber;
const int CGMuteGangMember::kPlyerIdFieldNumber;
#endif  // !_MSC_VER

CGMuteGangMember::CGMuteGangMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMuteGangMember)
}

void CGMuteGangMember::InitAsDefaultInstance() {
}

CGMuteGangMember::CGMuteGangMember(const CGMuteGangMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMuteGangMember)
}

void CGMuteGangMember::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  plyerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMuteGangMember::~CGMuteGangMember() {
  // @@protoc_insertion_point(destructor:CGMuteGangMember)
  SharedDtor();
}

void CGMuteGangMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMuteGangMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMuteGangMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMuteGangMember_descriptor_;
}

const CGMuteGangMember& CGMuteGangMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGMuteGangMember* CGMuteGangMember::default_instance_ = NULL;

CGMuteGangMember* CGMuteGangMember::New() const {
  return new CGMuteGangMember;
}

void CGMuteGangMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGMuteGangMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(plyerid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMuteGangMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMuteGangMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plyerId;
        break;
      }

      // optional int64 plyerId = 2;
      case 2: {
        if (tag == 16) {
         parse_plyerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plyerid_)));
          set_has_plyerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGMuteGangMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMuteGangMember)
  return false;
#undef DO_
}

void CGMuteGangMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMuteGangMember)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 plyerId = 2;
  if (has_plyerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->plyerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMuteGangMember)
}

::google::protobuf::uint8* CGMuteGangMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMuteGangMember)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 plyerId = 2;
  if (has_plyerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->plyerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMuteGangMember)
  return target;
}

int CGMuteGangMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 plyerId = 2;
    if (has_plyerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plyerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMuteGangMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMuteGangMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMuteGangMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMuteGangMember::MergeFrom(const CGMuteGangMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_plyerid()) {
      set_plyerid(from.plyerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMuteGangMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMuteGangMember::CopyFrom(const CGMuteGangMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMuteGangMember::IsInitialized() const {

  return true;
}

void CGMuteGangMember::Swap(CGMuteGangMember* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(plyerid_, other->plyerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMuteGangMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMuteGangMember_descriptor_;
  metadata.reflection = CGMuteGangMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMuteGangMember::kResultFieldNumber;
const int GCMuteGangMember::kTypeFieldNumber;
const int GCMuteGangMember::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCMuteGangMember::GCMuteGangMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMuteGangMember)
}

void GCMuteGangMember::InitAsDefaultInstance() {
}

GCMuteGangMember::GCMuteGangMember(const GCMuteGangMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMuteGangMember)
}

void GCMuteGangMember::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  type_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMuteGangMember::~GCMuteGangMember() {
  // @@protoc_insertion_point(destructor:GCMuteGangMember)
  SharedDtor();
}

void GCMuteGangMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMuteGangMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMuteGangMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMuteGangMember_descriptor_;
}

const GCMuteGangMember& GCMuteGangMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCMuteGangMember* GCMuteGangMember::default_instance_ = NULL;

GCMuteGangMember* GCMuteGangMember::New() const {
  return new GCMuteGangMember;
}

void GCMuteGangMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMuteGangMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, playerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMuteGangMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMuteGangMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 3;
      case 3: {
        if (tag == 24) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMuteGangMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMuteGangMember)
  return false;
#undef DO_
}

void GCMuteGangMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMuteGangMember)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 playerId = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMuteGangMember)
}

::google::protobuf::uint8* GCMuteGangMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMuteGangMember)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 playerId = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMuteGangMember)
  return target;
}

int GCMuteGangMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 playerId = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMuteGangMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMuteGangMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMuteGangMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMuteGangMember::MergeFrom(const GCMuteGangMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMuteGangMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMuteGangMember::CopyFrom(const GCMuteGangMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMuteGangMember::IsInitialized() const {

  return true;
}

void GCMuteGangMember::Swap(GCMuteGangMember* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMuteGangMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMuteGangMember_descriptor_;
  metadata.reflection = GCMuteGangMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMuteGangList::kMuteFieldNumber;
#endif  // !_MSC_VER

GCMuteGangList::GCMuteGangList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMuteGangList)
}

void GCMuteGangList::InitAsDefaultInstance() {
}

GCMuteGangList::GCMuteGangList(const GCMuteGangList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMuteGangList)
}

void GCMuteGangList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMuteGangList::~GCMuteGangList() {
  // @@protoc_insertion_point(destructor:GCMuteGangList)
  SharedDtor();
}

void GCMuteGangList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMuteGangList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMuteGangList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMuteGangList_descriptor_;
}

const GCMuteGangList& GCMuteGangList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCMuteGangList* GCMuteGangList::default_instance_ = NULL;

GCMuteGangList* GCMuteGangList::New() const {
  return new GCMuteGangList;
}

void GCMuteGangList::Clear() {
  mute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMuteGangList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMuteGangList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mute = 1;
      case 1: {
        if (tag == 8) {
         parse_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mute())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mute())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMuteGangList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMuteGangList)
  return false;
#undef DO_
}

void GCMuteGangList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMuteGangList)
  // repeated int64 mute = 1;
  for (int i = 0; i < this->mute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMuteGangList)
}

::google::protobuf::uint8* GCMuteGangList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMuteGangList)
  // repeated int64 mute = 1;
  for (int i = 0; i < this->mute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMuteGangList)
  return target;
}

int GCMuteGangList::ByteSize() const {
  int total_size = 0;

  // repeated int64 mute = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mute(i));
    }
    total_size += 1 * this->mute_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMuteGangList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMuteGangList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMuteGangList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMuteGangList::MergeFrom(const GCMuteGangList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mute_.MergeFrom(from.mute_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMuteGangList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMuteGangList::CopyFrom(const GCMuteGangList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMuteGangList::IsInitialized() const {

  return true;
}

void GCMuteGangList::Swap(GCMuteGangList* other) {
  if (other != this) {
    mute_.Swap(&other->mute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMuteGangList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMuteGangList_descriptor_;
  metadata.reflection = GCMuteGangList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGInviteToGang::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGInviteToGang::CGInviteToGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGInviteToGang)
}

void CGInviteToGang::InitAsDefaultInstance() {
}

CGInviteToGang::CGInviteToGang(const CGInviteToGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGInviteToGang)
}

void CGInviteToGang::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGInviteToGang::~CGInviteToGang() {
  // @@protoc_insertion_point(destructor:CGInviteToGang)
  SharedDtor();
}

void CGInviteToGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGInviteToGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGInviteToGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGInviteToGang_descriptor_;
}

const CGInviteToGang& CGInviteToGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGInviteToGang* CGInviteToGang::default_instance_ = NULL;

CGInviteToGang* CGInviteToGang::New() const {
  return new CGInviteToGang;
}

void CGInviteToGang::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGInviteToGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGInviteToGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGInviteToGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGInviteToGang)
  return false;
#undef DO_
}

void CGInviteToGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGInviteToGang)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGInviteToGang)
}

::google::protobuf::uint8* CGInviteToGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGInviteToGang)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGInviteToGang)
  return target;
}

int CGInviteToGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGInviteToGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGInviteToGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGInviteToGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGInviteToGang::MergeFrom(const CGInviteToGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGInviteToGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGInviteToGang::CopyFrom(const CGInviteToGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGInviteToGang::IsInitialized() const {

  return true;
}

void CGInviteToGang::Swap(CGInviteToGang* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGInviteToGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGInviteToGang_descriptor_;
  metadata.reflection = CGInviteToGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBeInvitedToGang::kGangIdFieldNumber;
const int GCBeInvitedToGang::kGangNameFieldNumber;
#endif  // !_MSC_VER

GCBeInvitedToGang::GCBeInvitedToGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBeInvitedToGang)
}

void GCBeInvitedToGang::InitAsDefaultInstance() {
}

GCBeInvitedToGang::GCBeInvitedToGang(const GCBeInvitedToGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBeInvitedToGang)
}

void GCBeInvitedToGang::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBeInvitedToGang::~GCBeInvitedToGang() {
  // @@protoc_insertion_point(destructor:GCBeInvitedToGang)
  SharedDtor();
}

void GCBeInvitedToGang::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GCBeInvitedToGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBeInvitedToGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBeInvitedToGang_descriptor_;
}

const GCBeInvitedToGang& GCBeInvitedToGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCBeInvitedToGang* GCBeInvitedToGang::default_instance_ = NULL;

GCBeInvitedToGang* GCBeInvitedToGang::New() const {
  return new GCBeInvitedToGang;
}

void GCBeInvitedToGang::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBeInvitedToGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBeInvitedToGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gangId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBeInvitedToGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBeInvitedToGang)
  return false;
#undef DO_
}

void GCBeInvitedToGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBeInvitedToGang)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBeInvitedToGang)
}

::google::protobuf::uint8* GCBeInvitedToGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBeInvitedToGang)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBeInvitedToGang)
  return target;
}

int GCBeInvitedToGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gangId = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBeInvitedToGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBeInvitedToGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBeInvitedToGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBeInvitedToGang::MergeFrom(const GCBeInvitedToGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBeInvitedToGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBeInvitedToGang::CopyFrom(const GCBeInvitedToGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBeInvitedToGang::IsInitialized() const {

  return true;
}

void GCBeInvitedToGang::Swap(GCBeInvitedToGang* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBeInvitedToGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBeInvitedToGang_descriptor_;
  metadata.reflection = GCBeInvitedToGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBeBeInvitedToGang::kOperateTypeFieldNumber;
const int CGBeBeInvitedToGang::kGangIdFieldNumber;
#endif  // !_MSC_VER

CGBeBeInvitedToGang::CGBeBeInvitedToGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBeBeInvitedToGang)
}

void CGBeBeInvitedToGang::InitAsDefaultInstance() {
}

CGBeBeInvitedToGang::CGBeBeInvitedToGang(const CGBeBeInvitedToGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBeBeInvitedToGang)
}

void CGBeBeInvitedToGang::SharedCtor() {
  _cached_size_ = 0;
  operatetype_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBeBeInvitedToGang::~CGBeBeInvitedToGang() {
  // @@protoc_insertion_point(destructor:CGBeBeInvitedToGang)
  SharedDtor();
}

void CGBeBeInvitedToGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBeBeInvitedToGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBeBeInvitedToGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBeBeInvitedToGang_descriptor_;
}

const CGBeBeInvitedToGang& CGBeBeInvitedToGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGBeBeInvitedToGang* CGBeBeInvitedToGang::default_instance_ = NULL;

CGBeBeInvitedToGang* CGBeBeInvitedToGang::New() const {
  return new CGBeBeInvitedToGang;
}

void CGBeBeInvitedToGang::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGBeBeInvitedToGang*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gangid_, operatetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBeBeInvitedToGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBeBeInvitedToGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operateType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gangId;
        break;
      }

      // optional int64 gangId = 2;
      case 2: {
        if (tag == 16) {
         parse_gangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBeBeInvitedToGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBeBeInvitedToGang)
  return false;
#undef DO_
}

void CGBeBeInvitedToGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBeBeInvitedToGang)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operatetype(), output);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gangid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBeBeInvitedToGang)
}

::google::protobuf::uint8* CGBeBeInvitedToGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBeBeInvitedToGang)
  // optional int32 operateType = 1;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operatetype(), target);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gangid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBeBeInvitedToGang)
  return target;
}

int CGBeBeInvitedToGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operateType = 1;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

    // optional int64 gangId = 2;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBeBeInvitedToGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBeBeInvitedToGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBeBeInvitedToGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBeBeInvitedToGang::MergeFrom(const CGBeBeInvitedToGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBeBeInvitedToGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBeBeInvitedToGang::CopyFrom(const CGBeBeInvitedToGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBeBeInvitedToGang::IsInitialized() const {

  return true;
}

void CGBeBeInvitedToGang::Swap(CGBeBeInvitedToGang* other) {
  if (other != this) {
    std::swap(operatetype_, other->operatetype_);
    std::swap(gangid_, other->gangid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBeBeInvitedToGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBeBeInvitedToGang_descriptor_;
  metadata.reflection = CGBeBeInvitedToGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCApplyNotice::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCApplyNotice::GCApplyNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCApplyNotice)
}

void GCApplyNotice::InitAsDefaultInstance() {
}

GCApplyNotice::GCApplyNotice(const GCApplyNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCApplyNotice)
}

void GCApplyNotice::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCApplyNotice::~GCApplyNotice() {
  // @@protoc_insertion_point(destructor:GCApplyNotice)
  SharedDtor();
}

void GCApplyNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCApplyNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCApplyNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCApplyNotice_descriptor_;
}

const GCApplyNotice& GCApplyNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCApplyNotice* GCApplyNotice::default_instance_ = NULL;

GCApplyNotice* GCApplyNotice::New() const {
  return new GCApplyNotice;
}

void GCApplyNotice::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCApplyNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCApplyNotice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCApplyNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCApplyNotice)
  return false;
#undef DO_
}

void GCApplyNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCApplyNotice)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCApplyNotice)
}

::google::protobuf::uint8* GCApplyNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCApplyNotice)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCApplyNotice)
  return target;
}

int GCApplyNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCApplyNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCApplyNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCApplyNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCApplyNotice::MergeFrom(const GCApplyNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCApplyNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCApplyNotice::CopyFrom(const GCApplyNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCApplyNotice::IsInitialized() const {

  return true;
}

void GCApplyNotice::Swap(GCApplyNotice* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCApplyNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCApplyNotice_descriptor_;
  metadata.reflection = GCApplyNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGHasGang::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGHasGang::CGHasGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGHasGang)
}

void CGHasGang::InitAsDefaultInstance() {
}

CGHasGang::CGHasGang(const CGHasGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGHasGang)
}

void CGHasGang::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGHasGang::~CGHasGang() {
  // @@protoc_insertion_point(destructor:CGHasGang)
  SharedDtor();
}

void CGHasGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGHasGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGHasGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGHasGang_descriptor_;
}

const CGHasGang& CGHasGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGHasGang* CGHasGang::default_instance_ = NULL;

CGHasGang* CGHasGang::New() const {
  return new CGHasGang;
}

void CGHasGang::Clear() {
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGHasGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGHasGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGHasGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGHasGang)
  return false;
#undef DO_
}

void CGHasGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGHasGang)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGHasGang)
}

::google::protobuf::uint8* CGHasGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGHasGang)
  // optional int32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGHasGang)
  return target;
}

int CGHasGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGHasGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGHasGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGHasGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGHasGang::MergeFrom(const CGHasGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGHasGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGHasGang::CopyFrom(const CGHasGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGHasGang::IsInitialized() const {

  return true;
}

void CGHasGang::Swap(CGHasGang* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGHasGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGHasGang_descriptor_;
  metadata.reflection = CGHasGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHasGang::kResultFieldNumber;
#endif  // !_MSC_VER

GCHasGang::GCHasGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCHasGang)
}

void GCHasGang::InitAsDefaultInstance() {
}

GCHasGang::GCHasGang(const GCHasGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCHasGang)
}

void GCHasGang::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHasGang::~GCHasGang() {
  // @@protoc_insertion_point(destructor:GCHasGang)
  SharedDtor();
}

void GCHasGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCHasGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHasGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHasGang_descriptor_;
}

const GCHasGang& GCHasGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCHasGang* GCHasGang::default_instance_ = NULL;

GCHasGang* GCHasGang::New() const {
  return new GCHasGang;
}

void GCHasGang::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHasGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCHasGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCHasGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCHasGang)
  return false;
#undef DO_
}

void GCHasGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCHasGang)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCHasGang)
}

::google::protobuf::uint8* GCHasGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCHasGang)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCHasGang)
  return target;
}

int GCHasGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHasGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHasGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHasGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHasGang::MergeFrom(const GCHasGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHasGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHasGang::CopyFrom(const GCHasGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHasGang::IsInitialized() const {

  return true;
}

void GCHasGang::Swap(GCHasGang* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHasGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHasGang_descriptor_;
  metadata.reflection = GCHasGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGangChangeName::kGangIdFieldNumber;
const int CGGangChangeName::kGangTotemFieldNumber;
const int CGGangChangeName::kGangNameFieldNumber;
#endif  // !_MSC_VER

CGGangChangeName::CGGangChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGangChangeName)
}

void CGGangChangeName::InitAsDefaultInstance() {
}

CGGangChangeName::CGGangChangeName(const CGGangChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGangChangeName)
}

void CGGangChangeName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGangChangeName::~CGGangChangeName() {
  // @@protoc_insertion_point(destructor:CGGangChangeName)
  SharedDtor();
}

void CGGangChangeName::SharedDtor() {
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangtotem_;
  }
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void CGGangChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGangChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGangChangeName_descriptor_;
}

const CGGangChangeName& CGGangChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

CGGangChangeName* CGGangChangeName::default_instance_ = NULL;

CGGangChangeName* CGGangChangeName::New() const {
  return new CGGangChangeName;
}

void CGGangChangeName::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangtotem()) {
      if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangtotem_->clear();
      }
    }
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGangChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGangChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gangId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangTotem;
        break;
      }

      // optional string gangTotem = 2;
      case 2: {
        if (tag == 18) {
         parse_gangTotem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangtotem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangtotem().data(), this->gangtotem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangtotem");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangName;
        break;
      }

      // optional string gangName = 3;
      case 3: {
        if (tag == 26) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGangChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGangChangeName)
  return false;
#undef DO_
}

void CGGangChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGangChangeName)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional string gangTotem = 2;
  if (has_gangtotem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangtotem().data(), this->gangtotem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangtotem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangtotem(), output);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGangChangeName)
}

::google::protobuf::uint8* CGGangChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGangChangeName)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional string gangTotem = 2;
  if (has_gangtotem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangtotem().data(), this->gangtotem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangtotem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangtotem(), target);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGangChangeName)
  return target;
}

int CGGangChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gangId = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangTotem = 2;
    if (has_gangtotem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangtotem());
    }

    // optional string gangName = 3;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGangChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGangChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGangChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGangChangeName::MergeFrom(const CGGangChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangtotem()) {
      set_gangtotem(from.gangtotem());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGangChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGangChangeName::CopyFrom(const CGGangChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGangChangeName::IsInitialized() const {

  return true;
}

void CGGangChangeName::Swap(CGGangChangeName* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangtotem_, other->gangtotem_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGangChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGangChangeName_descriptor_;
  metadata.reflection = CGGangChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGangChangeName::kResultFieldNumber;
#endif  // !_MSC_VER

GCGangChangeName::GCGangChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGangChangeName)
}

void GCGangChangeName::InitAsDefaultInstance() {
}

GCGangChangeName::GCGangChangeName(const GCGangChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGangChangeName)
}

void GCGangChangeName::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGangChangeName::~GCGangChangeName() {
  // @@protoc_insertion_point(destructor:GCGangChangeName)
  SharedDtor();
}

void GCGangChangeName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGangChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGangChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGangChangeName_descriptor_;
}

const GCGangChangeName& GCGangChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GangMessage_2eproto();
  return *default_instance_;
}

GCGangChangeName* GCGangChangeName::default_instance_ = NULL;

GCGangChangeName* GCGangChangeName::New() const {
  return new GCGangChangeName;
}

void GCGangChangeName::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGangChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGangChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGangChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGangChangeName)
  return false;
#undef DO_
}

void GCGangChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGangChangeName)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGangChangeName)
}

::google::protobuf::uint8* GCGangChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGangChangeName)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGangChangeName)
  return target;
}

int GCGangChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGangChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGangChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGangChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGangChangeName::MergeFrom(const GCGangChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGangChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGangChangeName::CopyFrom(const GCGangChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGangChangeName::IsInitialized() const {

  return true;
}

void GCGangChangeName::Swap(GCGangChangeName* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGangChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGangChangeName_descriptor_;
  metadata.reflection = GCGangChangeName_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
