// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GangMessage.proto

#ifndef PROTOBUF_GangMessage_2eproto__INCLUDED
#define PROTOBUF_GangMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
#include "CommonMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GangMessage_2eproto();
void protobuf_AssignDesc_GangMessage_2eproto();
void protobuf_ShutdownFile_GangMessage_2eproto();

class GangAttr;
class GangMainInfo;
class BuildingInfo;
class GangMemberInfo;
class CGCreateGang;
class GCCreateGang;
class CGGetGangList;
class GCGetGangList;
class CGGangOperate;
class GCGangOperate;
class CGGangBuy;
class GCGangBuy;
class CGGangFight;
class GangInfo4Map;
class GCGangFight;
class CGEnterGang;
class GCEnterGang;
class GCGangRobberNum;
class GCGangActiveOpen;
class CGMuteGangMember;
class GCMuteGangMember;
class GCMuteGangList;
class CGInviteToGang;
class GCBeInvitedToGang;
class CGBeBeInvitedToGang;
class GCApplyNotice;
class CGHasGang;
class GCHasGang;
class CGGangChangeName;
class GCGangChangeName;

// ===================================================================

class GangAttr : public ::google::protobuf::Message {
 public:
  GangAttr();
  virtual ~GangAttr();

  GangAttr(const GangAttr& from);

  inline GangAttr& operator=(const GangAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GangAttr& default_instance();

  void Swap(GangAttr* other);

  // implements Message ----------------------------------------------

  GangAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GangAttr& from);
  void MergeFrom(const GangAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 attrKey = 1;
  inline bool has_attrkey() const;
  inline void clear_attrkey();
  static const int kAttrKeyFieldNumber = 1;
  inline ::google::protobuf::int32 attrkey() const;
  inline void set_attrkey(::google::protobuf::int32 value);

  // optional int32 arrtValue = 2;
  inline bool has_arrtvalue() const;
  inline void clear_arrtvalue();
  static const int kArrtValueFieldNumber = 2;
  inline ::google::protobuf::int32 arrtvalue() const;
  inline void set_arrtvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GangAttr)
 private:
  inline void set_has_attrkey();
  inline void clear_has_attrkey();
  inline void set_has_arrtvalue();
  inline void clear_has_arrtvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 attrkey_;
  ::google::protobuf::int32 arrtvalue_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GangAttr* default_instance_;
};
// -------------------------------------------------------------------

class GangMainInfo : public ::google::protobuf::Message {
 public:
  GangMainInfo();
  virtual ~GangMainInfo();

  GangMainInfo(const GangMainInfo& from);

  inline GangMainInfo& operator=(const GangMainInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GangMainInfo& default_instance();

  void Swap(GangMainInfo* other);

  // implements Message ----------------------------------------------

  GangMainInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GangMainInfo& from);
  void MergeFrom(const GangMainInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gangId = 1;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 1;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional string gangName = 2;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 2;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // optional string gangTotem = 3;
  inline bool has_gangtotem() const;
  inline void clear_gangtotem();
  static const int kGangTotemFieldNumber = 3;
  inline const ::std::string& gangtotem() const;
  inline void set_gangtotem(const ::std::string& value);
  inline void set_gangtotem(const char* value);
  inline void set_gangtotem(const char* value, size_t size);
  inline ::std::string* mutable_gangtotem();
  inline ::std::string* release_gangtotem();
  inline void set_allocated_gangtotem(::std::string* gangtotem);

  // optional int32 gangLevel = 4;
  inline bool has_ganglevel() const;
  inline void clear_ganglevel();
  static const int kGangLevelFieldNumber = 4;
  inline ::google::protobuf::int32 ganglevel() const;
  inline void set_ganglevel(::google::protobuf::int32 value);

  // optional int32 memberNum = 5;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 5;
  inline ::google::protobuf::int32 membernum() const;
  inline void set_membernum(::google::protobuf::int32 value);

  // optional string bulletin = 6;
  inline bool has_bulletin() const;
  inline void clear_bulletin();
  static const int kBulletinFieldNumber = 6;
  inline const ::std::string& bulletin() const;
  inline void set_bulletin(const ::std::string& value);
  inline void set_bulletin(const char* value);
  inline void set_bulletin(const char* value, size_t size);
  inline ::std::string* mutable_bulletin();
  inline ::std::string* release_bulletin();
  inline void set_allocated_bulletin(::std::string* bulletin);

  // optional int64 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int64 power = 8;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 8;
  inline ::google::protobuf::int64 power() const;
  inline void set_power(::google::protobuf::int64 value);

  // optional string masterName = 9;
  inline bool has_mastername() const;
  inline void clear_mastername();
  static const int kMasterNameFieldNumber = 9;
  inline const ::std::string& mastername() const;
  inline void set_mastername(const ::std::string& value);
  inline void set_mastername(const char* value);
  inline void set_mastername(const char* value, size_t size);
  inline ::std::string* mutable_mastername();
  inline ::std::string* release_mastername();
  inline void set_allocated_mastername(::std::string* mastername);

  // optional int32 isKickMaster = 10;
  inline bool has_iskickmaster() const;
  inline void clear_iskickmaster();
  static const int kIsKickMasterFieldNumber = 10;
  inline ::google::protobuf::int32 iskickmaster() const;
  inline void set_iskickmaster(::google::protobuf::int32 value);

  // optional int64 kickTime = 11;
  inline bool has_kicktime() const;
  inline void clear_kicktime();
  static const int kKickTimeFieldNumber = 11;
  inline ::google::protobuf::int64 kicktime() const;
  inline void set_kicktime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GangMainInfo)
 private:
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_gangname();
  inline void clear_has_gangname();
  inline void set_has_gangtotem();
  inline void clear_has_gangtotem();
  inline void set_has_ganglevel();
  inline void clear_has_ganglevel();
  inline void set_has_membernum();
  inline void clear_has_membernum();
  inline void set_has_bulletin();
  inline void clear_has_bulletin();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_mastername();
  inline void clear_has_mastername();
  inline void set_has_iskickmaster();
  inline void clear_has_iskickmaster();
  inline void set_has_kicktime();
  inline void clear_has_kicktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::std::string* gangname_;
  ::std::string* gangtotem_;
  ::google::protobuf::int32 ganglevel_;
  ::google::protobuf::int32 membernum_;
  ::std::string* bulletin_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 power_;
  ::std::string* mastername_;
  ::google::protobuf::int64 kicktime_;
  ::google::protobuf::int32 iskickmaster_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GangMainInfo* default_instance_;
};
// -------------------------------------------------------------------

class BuildingInfo : public ::google::protobuf::Message {
 public:
  BuildingInfo();
  virtual ~BuildingInfo();

  BuildingInfo(const BuildingInfo& from);

  inline BuildingInfo& operator=(const BuildingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildingInfo& default_instance();

  void Swap(BuildingInfo* other);

  // implements Message ----------------------------------------------

  BuildingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildingInfo& from);
  void MergeFrom(const BuildingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 gangDonateNum = 1;
  inline bool has_gangdonatenum() const;
  inline void clear_gangdonatenum();
  static const int kGangDonateNumFieldNumber = 1;
  inline ::google::protobuf::int32 gangdonatenum() const;
  inline void set_gangdonatenum(::google::protobuf::int32 value);

  // repeated .GangAttr builtAttr = 2;
  inline int builtattr_size() const;
  inline void clear_builtattr();
  static const int kBuiltAttrFieldNumber = 2;
  inline const ::GangAttr& builtattr(int index) const;
  inline ::GangAttr* mutable_builtattr(int index);
  inline ::GangAttr* add_builtattr();
  inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
      builtattr() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
      mutable_builtattr();

  // repeated .GangAttr practice = 3;
  inline int practice_size() const;
  inline void clear_practice();
  static const int kPracticeFieldNumber = 3;
  inline const ::GangAttr& practice(int index) const;
  inline ::GangAttr* mutable_practice(int index);
  inline ::GangAttr* add_practice();
  inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
      practice() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
      mutable_practice();

  // repeated .GangAttr buyUniqueInfo = 4;
  inline int buyuniqueinfo_size() const;
  inline void clear_buyuniqueinfo();
  static const int kBuyUniqueInfoFieldNumber = 4;
  inline const ::GangAttr& buyuniqueinfo(int index) const;
  inline ::GangAttr* mutable_buyuniqueinfo(int index);
  inline ::GangAttr* add_buyuniqueinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
      buyuniqueinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
      mutable_buyuniqueinfo();

  // @@protoc_insertion_point(class_scope:BuildingInfo)
 private:
  inline void set_has_gangdonatenum();
  inline void clear_has_gangdonatenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GangAttr > builtattr_;
  ::google::protobuf::RepeatedPtrField< ::GangAttr > practice_;
  ::google::protobuf::RepeatedPtrField< ::GangAttr > buyuniqueinfo_;
  ::google::protobuf::int32 gangdonatenum_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static BuildingInfo* default_instance_;
};
// -------------------------------------------------------------------

class GangMemberInfo : public ::google::protobuf::Message {
 public:
  GangMemberInfo();
  virtual ~GangMemberInfo();

  GangMemberInfo(const GangMemberInfo& from);

  inline GangMemberInfo& operator=(const GangMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GangMemberInfo& default_instance();

  void Swap(GangMemberInfo* other);

  // implements Message ----------------------------------------------

  GangMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GangMemberInfo& from);
  void MergeFrom(const GangMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 memId = 1;
  inline bool has_memid() const;
  inline void clear_memid();
  static const int kMemIdFieldNumber = 1;
  inline ::google::protobuf::int64 memid() const;
  inline void set_memid(::google::protobuf::int64 value);

  // optional string memName = 2;
  inline bool has_memname() const;
  inline void clear_memname();
  static const int kMemNameFieldNumber = 2;
  inline const ::std::string& memname() const;
  inline void set_memname(const ::std::string& value);
  inline void set_memname(const char* value);
  inline void set_memname(const char* value, size_t size);
  inline ::std::string* mutable_memname();
  inline ::std::string* release_memname();
  inline void set_allocated_memname(::std::string* memname);

  // optional int32 memLevel = 3;
  inline bool has_memlevel() const;
  inline void clear_memlevel();
  static const int kMemLevelFieldNumber = 3;
  inline ::google::protobuf::int32 memlevel() const;
  inline void set_memlevel(::google::protobuf::int32 value);

  // optional int64 memFightPower = 4;
  inline bool has_memfightpower() const;
  inline void clear_memfightpower();
  static const int kMemFightPowerFieldNumber = 4;
  inline ::google::protobuf::int64 memfightpower() const;
  inline void set_memfightpower(::google::protobuf::int64 value);

  // optional int32 memJob = 5;
  inline bool has_memjob() const;
  inline void clear_memjob();
  static const int kMemJobFieldNumber = 5;
  inline ::google::protobuf::int32 memjob() const;
  inline void set_memjob(::google::protobuf::int32 value);

  // optional int32 memOnline = 6;
  inline bool has_memonline() const;
  inline void clear_memonline();
  static const int kMemOnlineFieldNumber = 6;
  inline ::google::protobuf::int32 memonline() const;
  inline void set_memonline(::google::protobuf::int32 value);

  // optional int64 memContribute = 7;
  inline bool has_memcontribute() const;
  inline void clear_memcontribute();
  static const int kMemContributeFieldNumber = 7;
  inline ::google::protobuf::int64 memcontribute() const;
  inline void set_memcontribute(::google::protobuf::int64 value);

  // optional int64 gangContributeTotal = 8;
  inline bool has_gangcontributetotal() const;
  inline void clear_gangcontributetotal();
  static const int kGangContributeTotalFieldNumber = 8;
  inline ::google::protobuf::int64 gangcontributetotal() const;
  inline void set_gangcontributetotal(::google::protobuf::int64 value);

  // optional int32 professionId = 9;
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 9;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional int32 vip = 10;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 10;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int64 memLogoutTime = 11;
  inline bool has_memlogouttime() const;
  inline void clear_memlogouttime();
  static const int kMemLogoutTimeFieldNumber = 11;
  inline ::google::protobuf::int64 memlogouttime() const;
  inline void set_memlogouttime(::google::protobuf::int64 value);

  // optional int32 sex = 12;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 12;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GangMemberInfo)
 private:
  inline void set_has_memid();
  inline void clear_has_memid();
  inline void set_has_memname();
  inline void clear_has_memname();
  inline void set_has_memlevel();
  inline void clear_has_memlevel();
  inline void set_has_memfightpower();
  inline void clear_has_memfightpower();
  inline void set_has_memjob();
  inline void clear_has_memjob();
  inline void set_has_memonline();
  inline void clear_has_memonline();
  inline void set_has_memcontribute();
  inline void clear_has_memcontribute();
  inline void set_has_gangcontributetotal();
  inline void clear_has_gangcontributetotal();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_memlogouttime();
  inline void clear_has_memlogouttime();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 memid_;
  ::std::string* memname_;
  ::google::protobuf::int64 memfightpower_;
  ::google::protobuf::int32 memlevel_;
  ::google::protobuf::int32 memjob_;
  ::google::protobuf::int64 memcontribute_;
  ::google::protobuf::int32 memonline_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int64 gangcontributetotal_;
  ::google::protobuf::int64 memlogouttime_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GangMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGCreateGang : public ::google::protobuf::Message {
 public:
  CGCreateGang();
  virtual ~CGCreateGang();

  CGCreateGang(const CGCreateGang& from);

  inline CGCreateGang& operator=(const CGCreateGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCreateGang& default_instance();

  void Swap(CGCreateGang* other);

  // implements Message ----------------------------------------------

  CGCreateGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCreateGang& from);
  void MergeFrom(const CGCreateGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 requestType = 1;
  inline bool has_requesttype() const;
  inline void clear_requesttype();
  static const int kRequestTypeFieldNumber = 1;
  inline ::google::protobuf::int32 requesttype() const;
  inline void set_requesttype(::google::protobuf::int32 value);

  // optional string gangName = 2;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 2;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // optional string gangFont = 3;
  inline bool has_gangfont() const;
  inline void clear_gangfont();
  static const int kGangFontFieldNumber = 3;
  inline const ::std::string& gangfont() const;
  inline void set_gangfont(const ::std::string& value);
  inline void set_gangfont(const char* value);
  inline void set_gangfont(const char* value, size_t size);
  inline ::std::string* mutable_gangfont();
  inline ::std::string* release_gangfont();
  inline void set_allocated_gangfont(::std::string* gangfont);

  // @@protoc_insertion_point(class_scope:CGCreateGang)
 private:
  inline void set_has_requesttype();
  inline void clear_has_requesttype();
  inline void set_has_gangname();
  inline void clear_has_gangname();
  inline void set_has_gangfont();
  inline void clear_has_gangfont();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gangname_;
  ::std::string* gangfont_;
  ::google::protobuf::int32 requesttype_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCreateGang* default_instance_;
};
// -------------------------------------------------------------------

class GCCreateGang : public ::google::protobuf::Message {
 public:
  GCCreateGang();
  virtual ~GCCreateGang();

  GCCreateGang(const GCCreateGang& from);

  inline GCCreateGang& operator=(const GCCreateGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCreateGang& default_instance();

  void Swap(GCCreateGang* other);

  // implements Message ----------------------------------------------

  GCCreateGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCreateGang& from);
  void MergeFrom(const GCCreateGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 responseType = 1;
  inline bool has_responsetype() const;
  inline void clear_responsetype();
  static const int kResponseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 responsetype() const;
  inline void set_responsetype(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GangMainInfo gangInfo = 3;
  inline bool has_ganginfo() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 3;
  inline const ::GangMainInfo& ganginfo() const;
  inline ::GangMainInfo* mutable_ganginfo();
  inline ::GangMainInfo* release_ganginfo();
  inline void set_allocated_ganginfo(::GangMainInfo* ganginfo);

  // repeated .GangMemberInfo memberInfo = 4;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 4;
  inline const ::GangMemberInfo& memberinfo(int index) const;
  inline ::GangMemberInfo* mutable_memberinfo(int index);
  inline ::GangMemberInfo* add_memberinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >&
      memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >*
      mutable_memberinfo();

  // optional .BuildingInfo buildInfo = 5;
  inline bool has_buildinfo() const;
  inline void clear_buildinfo();
  static const int kBuildInfoFieldNumber = 5;
  inline const ::BuildingInfo& buildinfo() const;
  inline ::BuildingInfo* mutable_buildinfo();
  inline ::BuildingInfo* release_buildinfo();
  inline void set_allocated_buildinfo(::BuildingInfo* buildinfo);

  // @@protoc_insertion_point(class_scope:GCCreateGang)
 private:
  inline void set_has_responsetype();
  inline void clear_has_responsetype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ganginfo();
  inline void clear_has_ganginfo();
  inline void set_has_buildinfo();
  inline void clear_has_buildinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 responsetype_;
  ::google::protobuf::int32 result_;
  ::GangMainInfo* ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::GangMemberInfo > memberinfo_;
  ::BuildingInfo* buildinfo_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCreateGang* default_instance_;
};
// -------------------------------------------------------------------

class CGGetGangList : public ::google::protobuf::Message {
 public:
  CGGetGangList();
  virtual ~CGGetGangList();

  CGGetGangList(const CGGetGangList& from);

  inline CGGetGangList& operator=(const CGGetGangList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetGangList& default_instance();

  void Swap(CGGetGangList* other);

  // implements Message ----------------------------------------------

  CGGetGangList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetGangList& from);
  void MergeFrom(const CGGetGangList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 listType = 1;
  inline bool has_listtype() const;
  inline void clear_listtype();
  static const int kListTypeFieldNumber = 1;
  inline ::google::protobuf::int32 listtype() const;
  inline void set_listtype(::google::protobuf::int32 value);

  // optional string gangName = 3;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 3;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // @@protoc_insertion_point(class_scope:CGGetGangList)
 private:
  inline void set_has_listtype();
  inline void clear_has_listtype();
  inline void set_has_gangname();
  inline void clear_has_gangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* gangname_;
  ::google::protobuf::int32 listtype_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetGangList* default_instance_;
};
// -------------------------------------------------------------------

class GCGetGangList : public ::google::protobuf::Message {
 public:
  GCGetGangList();
  virtual ~GCGetGangList();

  GCGetGangList(const GCGetGangList& from);

  inline GCGetGangList& operator=(const GCGetGangList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetGangList& default_instance();

  void Swap(GCGetGangList* other);

  // implements Message ----------------------------------------------

  GCGetGangList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetGangList& from);
  void MergeFrom(const GCGetGangList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 listType = 1;
  inline bool has_listtype() const;
  inline void clear_listtype();
  static const int kListTypeFieldNumber = 1;
  inline ::google::protobuf::int32 listtype() const;
  inline void set_listtype(::google::protobuf::int32 value);

  // repeated .GangMainInfo gangInfo = 4;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 4;
  inline const ::GangMainInfo& ganginfo(int index) const;
  inline ::GangMainInfo* mutable_ganginfo(int index);
  inline ::GangMainInfo* add_ganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GangMainInfo >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangMainInfo >*
      mutable_ganginfo();

  // optional int32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int64 joinGangIdList = 6;
  inline int joingangidlist_size() const;
  inline void clear_joingangidlist();
  static const int kJoinGangIdListFieldNumber = 6;
  inline ::google::protobuf::int64 joingangidlist(int index) const;
  inline void set_joingangidlist(int index, ::google::protobuf::int64 value);
  inline void add_joingangidlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      joingangidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_joingangidlist();

  // optional int64 lastQuitTime = 7;
  inline bool has_lastquittime() const;
  inline void clear_lastquittime();
  static const int kLastQuitTimeFieldNumber = 7;
  inline ::google::protobuf::int64 lastquittime() const;
  inline void set_lastquittime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCGetGangList)
 private:
  inline void set_has_listtype();
  inline void clear_has_listtype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lastquittime();
  inline void clear_has_lastquittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GangMainInfo > ganginfo_;
  ::google::protobuf::int32 listtype_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > joingangidlist_;
  ::google::protobuf::int64 lastquittime_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetGangList* default_instance_;
};
// -------------------------------------------------------------------

class CGGangOperate : public ::google::protobuf::Message {
 public:
  CGGangOperate();
  virtual ~CGGangOperate();

  CGGangOperate(const CGGangOperate& from);

  inline CGGangOperate& operator=(const CGGangOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGangOperate& default_instance();

  void Swap(CGGangOperate* other);

  // implements Message ----------------------------------------------

  CGGangOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGangOperate& from);
  void MergeFrom(const CGGangOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operateType = 1;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatetype() const;
  inline void set_operatetype(::google::protobuf::int32 value);

  // optional int64 gangId = 2;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 2;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional string bulletin = 3;
  inline bool has_bulletin() const;
  inline void clear_bulletin();
  static const int kBulletinFieldNumber = 3;
  inline const ::std::string& bulletin() const;
  inline void set_bulletin(const ::std::string& value);
  inline void set_bulletin(const char* value);
  inline void set_bulletin(const char* value, size_t size);
  inline ::std::string* mutable_bulletin();
  inline ::std::string* release_bulletin();
  inline void set_allocated_bulletin(::std::string* bulletin);

  // optional int64 bePlayerId = 4;
  inline bool has_beplayerid() const;
  inline void clear_beplayerid();
  static const int kBePlayerIdFieldNumber = 4;
  inline ::google::protobuf::int64 beplayerid() const;
  inline void set_beplayerid(::google::protobuf::int64 value);

  // optional int32 bePlayerType = 5;
  inline bool has_beplayertype() const;
  inline void clear_beplayertype();
  static const int kBePlayerTypeFieldNumber = 5;
  inline ::google::protobuf::int32 beplayertype() const;
  inline void set_beplayertype(::google::protobuf::int32 value);

  // repeated int64 gangIdList = 6;
  inline int gangidlist_size() const;
  inline void clear_gangidlist();
  static const int kGangIdListFieldNumber = 6;
  inline ::google::protobuf::int64 gangidlist(int index) const;
  inline void set_gangidlist(int index, ::google::protobuf::int64 value);
  inline void add_gangidlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      gangidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_gangidlist();

  // @@protoc_insertion_point(class_scope:CGGangOperate)
 private:
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_bulletin();
  inline void clear_has_bulletin();
  inline void set_has_beplayerid();
  inline void clear_has_beplayerid();
  inline void set_has_beplayertype();
  inline void clear_has_beplayertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::std::string* bulletin_;
  ::google::protobuf::int32 operatetype_;
  ::google::protobuf::int32 beplayertype_;
  ::google::protobuf::int64 beplayerid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > gangidlist_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGangOperate* default_instance_;
};
// -------------------------------------------------------------------

class GCGangOperate : public ::google::protobuf::Message {
 public:
  GCGangOperate();
  virtual ~GCGangOperate();

  GCGangOperate(const GCGangOperate& from);

  inline GCGangOperate& operator=(const GCGangOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangOperate& default_instance();

  void Swap(GCGangOperate* other);

  // implements Message ----------------------------------------------

  GCGangOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangOperate& from);
  void MergeFrom(const GCGangOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operateType = 1;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatetype() const;
  inline void set_operatetype(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .GangMainInfo gangInfo = 3;
  inline bool has_ganginfo() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 3;
  inline const ::GangMainInfo& ganginfo() const;
  inline ::GangMainInfo* mutable_ganginfo();
  inline ::GangMainInfo* release_ganginfo();
  inline void set_allocated_ganginfo(::GangMainInfo* ganginfo);

  // repeated .GangMemberInfo memberInfo = 4;
  inline int memberinfo_size() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 4;
  inline const ::GangMemberInfo& memberinfo(int index) const;
  inline ::GangMemberInfo* mutable_memberinfo(int index);
  inline ::GangMemberInfo* add_memberinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >&
      memberinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >*
      mutable_memberinfo();

  // optional int64 quitMemberId = 5;
  inline bool has_quitmemberid() const;
  inline void clear_quitmemberid();
  static const int kQuitMemberIdFieldNumber = 5;
  inline ::google::protobuf::int64 quitmemberid() const;
  inline void set_quitmemberid(::google::protobuf::int64 value);

  // optional int64 joinGangId = 6;
  inline bool has_joingangid() const;
  inline void clear_joingangid();
  static const int kJoinGangIdFieldNumber = 6;
  inline ::google::protobuf::int64 joingangid() const;
  inline void set_joingangid(::google::protobuf::int64 value);

  // repeated int64 joinGangIdList = 7;
  inline int joingangidlist_size() const;
  inline void clear_joingangidlist();
  static const int kJoinGangIdListFieldNumber = 7;
  inline ::google::protobuf::int64 joingangidlist(int index) const;
  inline void set_joingangidlist(int index, ::google::protobuf::int64 value);
  inline void add_joingangidlist(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      joingangidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_joingangidlist();

  // optional int64 kickTime = 8;
  inline bool has_kicktime() const;
  inline void clear_kicktime();
  static const int kKickTimeFieldNumber = 8;
  inline ::google::protobuf::int64 kicktime() const;
  inline void set_kicktime(::google::protobuf::int64 value);

  // optional int32 isKickMaster = 9;
  inline bool has_iskickmaster() const;
  inline void clear_iskickmaster();
  static const int kIsKickMasterFieldNumber = 9;
  inline ::google::protobuf::int32 iskickmaster() const;
  inline void set_iskickmaster(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGangOperate)
 private:
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ganginfo();
  inline void clear_has_ganginfo();
  inline void set_has_quitmemberid();
  inline void clear_has_quitmemberid();
  inline void set_has_joingangid();
  inline void clear_has_joingangid();
  inline void set_has_kicktime();
  inline void clear_has_kicktime();
  inline void set_has_iskickmaster();
  inline void clear_has_iskickmaster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operatetype_;
  ::google::protobuf::int32 result_;
  ::GangMainInfo* ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::GangMemberInfo > memberinfo_;
  ::google::protobuf::int64 quitmemberid_;
  ::google::protobuf::int64 joingangid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > joingangidlist_;
  ::google::protobuf::int64 kicktime_;
  ::google::protobuf::int32 iskickmaster_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangOperate* default_instance_;
};
// -------------------------------------------------------------------

class CGGangBuy : public ::google::protobuf::Message {
 public:
  CGGangBuy();
  virtual ~CGGangBuy();

  CGGangBuy(const CGGangBuy& from);

  inline CGGangBuy& operator=(const CGGangBuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGangBuy& default_instance();

  void Swap(CGGangBuy* other);

  // implements Message ----------------------------------------------

  CGGangBuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGangBuy& from);
  void MergeFrom(const CGGangBuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline ::google::protobuf::int32 request() const;
  inline void set_request(::google::protobuf::int32 value);

  // optional int32 buyId = 2;
  inline bool has_buyid() const;
  inline void clear_buyid();
  static const int kBuyIdFieldNumber = 2;
  inline ::google::protobuf::int32 buyid() const;
  inline void set_buyid(::google::protobuf::int32 value);

  // optional int32 buyNum = 3;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 3;
  inline ::google::protobuf::int32 buynum() const;
  inline void set_buynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGangBuy)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_buyid();
  inline void clear_has_buyid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 request_;
  ::google::protobuf::int32 buyid_;
  ::google::protobuf::int32 buynum_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGangBuy* default_instance_;
};
// -------------------------------------------------------------------

class GCGangBuy : public ::google::protobuf::Message {
 public:
  GCGangBuy();
  virtual ~GCGangBuy();

  GCGangBuy(const GCGangBuy& from);

  inline GCGangBuy& operator=(const GCGangBuy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangBuy& default_instance();

  void Swap(GCGangBuy* other);

  // implements Message ----------------------------------------------

  GCGangBuy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangBuy& from);
  void MergeFrom(const GCGangBuy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline ::google::protobuf::int32 response() const;
  inline void set_response(::google::protobuf::int32 value);

  // optional .GangMainInfo gangInfo = 3;
  inline bool has_ganginfo() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 3;
  inline const ::GangMainInfo& ganginfo() const;
  inline ::GangMainInfo* mutable_ganginfo();
  inline ::GangMainInfo* release_ganginfo();
  inline void set_allocated_ganginfo(::GangMainInfo* ganginfo);

  // optional .BuildingInfo buildInfo = 4;
  inline bool has_buildinfo() const;
  inline void clear_buildinfo();
  static const int kBuildInfoFieldNumber = 4;
  inline const ::BuildingInfo& buildinfo() const;
  inline ::BuildingInfo* mutable_buildinfo();
  inline ::BuildingInfo* release_buildinfo();
  inline void set_allocated_buildinfo(::BuildingInfo* buildinfo);

  // @@protoc_insertion_point(class_scope:GCGangBuy)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_ganginfo();
  inline void clear_has_ganginfo();
  inline void set_has_buildinfo();
  inline void clear_has_buildinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 response_;
  ::GangMainInfo* ganginfo_;
  ::BuildingInfo* buildinfo_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangBuy* default_instance_;
};
// -------------------------------------------------------------------

class CGGangFight : public ::google::protobuf::Message {
 public:
  CGGangFight();
  virtual ~CGGangFight();

  CGGangFight(const CGGangFight& from);

  inline CGGangFight& operator=(const CGGangFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGangFight& default_instance();

  void Swap(CGGangFight* other);

  // implements Message ----------------------------------------------

  CGGangFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGangFight& from);
  void MergeFrom(const CGGangFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 mapId = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGangFight)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 mapid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGangFight* default_instance_;
};
// -------------------------------------------------------------------

class GangInfo4Map : public ::google::protobuf::Message {
 public:
  GangInfo4Map();
  virtual ~GangInfo4Map();

  GangInfo4Map(const GangInfo4Map& from);

  inline GangInfo4Map& operator=(const GangInfo4Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GangInfo4Map& default_instance();

  void Swap(GangInfo4Map* other);

  // implements Message ----------------------------------------------

  GangInfo4Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GangInfo4Map& from);
  void MergeFrom(const GangInfo4Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional .GangMainInfo holdGangInfo = 2;
  inline bool has_holdganginfo() const;
  inline void clear_holdganginfo();
  static const int kHoldGangInfoFieldNumber = 2;
  inline const ::GangMainInfo& holdganginfo() const;
  inline ::GangMainInfo* mutable_holdganginfo();
  inline ::GangMainInfo* release_holdganginfo();
  inline void set_allocated_holdganginfo(::GangMainInfo* holdganginfo);

  // repeated .GangMainInfo applyGangInfo = 3;
  inline int applyganginfo_size() const;
  inline void clear_applyganginfo();
  static const int kApplyGangInfoFieldNumber = 3;
  inline const ::GangMainInfo& applyganginfo(int index) const;
  inline ::GangMainInfo* mutable_applyganginfo(int index);
  inline ::GangMainInfo* add_applyganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GangMainInfo >&
      applyganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangMainInfo >*
      mutable_applyganginfo();

  // optional int32 applyState = 4;
  inline bool has_applystate() const;
  inline void clear_applystate();
  static const int kApplyStateFieldNumber = 4;
  inline ::google::protobuf::int32 applystate() const;
  inline void set_applystate(::google::protobuf::int32 value);

  // optional int32 enterFightState = 5;
  inline bool has_enterfightstate() const;
  inline void clear_enterfightstate();
  static const int kEnterFightStateFieldNumber = 5;
  inline ::google::protobuf::int32 enterfightstate() const;
  inline void set_enterfightstate(::google::protobuf::int32 value);

  // optional int32 countOfMap = 6;
  inline bool has_countofmap() const;
  inline void clear_countofmap();
  static const int kCountOfMapFieldNumber = 6;
  inline ::google::protobuf::int32 countofmap() const;
  inline void set_countofmap(::google::protobuf::int32 value);

  // optional int32 firstOfMap = 7;
  inline bool has_firstofmap() const;
  inline void clear_firstofmap();
  static const int kFirstOfMapFieldNumber = 7;
  inline ::google::protobuf::int32 firstofmap() const;
  inline void set_firstofmap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GangInfo4Map)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_holdganginfo();
  inline void clear_has_holdganginfo();
  inline void set_has_applystate();
  inline void clear_has_applystate();
  inline void set_has_enterfightstate();
  inline void clear_has_enterfightstate();
  inline void set_has_countofmap();
  inline void clear_has_countofmap();
  inline void set_has_firstofmap();
  inline void clear_has_firstofmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GangMainInfo* holdganginfo_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 applystate_;
  ::google::protobuf::RepeatedPtrField< ::GangMainInfo > applyganginfo_;
  ::google::protobuf::int32 enterfightstate_;
  ::google::protobuf::int32 countofmap_;
  ::google::protobuf::int32 firstofmap_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GangInfo4Map* default_instance_;
};
// -------------------------------------------------------------------

class GCGangFight : public ::google::protobuf::Message {
 public:
  GCGangFight();
  virtual ~GCGangFight();

  GCGangFight(const GCGangFight& from);

  inline GCGangFight& operator=(const GCGangFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangFight& default_instance();

  void Swap(GCGangFight* other);

  // implements Message ----------------------------------------------

  GCGangFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangFight& from);
  void MergeFrom(const GCGangFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 lastTime = 4;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional int64 puid = 5;
  inline bool has_puid() const;
  inline void clear_puid();
  static const int kPuidFieldNumber = 5;
  inline ::google::protobuf::int64 puid() const;
  inline void set_puid(::google::protobuf::int64 value);

  // optional int64 flaguId = 6;
  inline bool has_flaguid() const;
  inline void clear_flaguid();
  static const int kFlaguIdFieldNumber = 6;
  inline ::google::protobuf::int64 flaguid() const;
  inline void set_flaguid(::google::protobuf::int64 value);

  // repeated .GangInfo4Map gangInfo4Map = 7;
  inline int ganginfo4map_size() const;
  inline void clear_ganginfo4map();
  static const int kGangInfo4MapFieldNumber = 7;
  inline const ::GangInfo4Map& ganginfo4map(int index) const;
  inline ::GangInfo4Map* mutable_ganginfo4map(int index);
  inline ::GangInfo4Map* add_ganginfo4map();
  inline const ::google::protobuf::RepeatedPtrField< ::GangInfo4Map >&
      ganginfo4map() const;
  inline ::google::protobuf::RepeatedPtrField< ::GangInfo4Map >*
      mutable_ganginfo4map();

  // repeated .EntryStringInt pointMap = 8;
  inline int pointmap_size() const;
  inline void clear_pointmap();
  static const int kPointMapFieldNumber = 8;
  inline const ::EntryStringInt& pointmap(int index) const;
  inline ::EntryStringInt* mutable_pointmap(int index);
  inline ::EntryStringInt* add_pointmap();
  inline const ::google::protobuf::RepeatedPtrField< ::EntryStringInt >&
      pointmap() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntryStringInt >*
      mutable_pointmap();

  // @@protoc_insertion_point(class_scope:GCGangFight)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_puid();
  inline void clear_has_puid();
  inline void set_has_flaguid();
  inline void clear_has_flaguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int64 puid_;
  ::google::protobuf::int64 flaguid_;
  ::google::protobuf::RepeatedPtrField< ::GangInfo4Map > ganginfo4map_;
  ::google::protobuf::RepeatedPtrField< ::EntryStringInt > pointmap_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangFight* default_instance_;
};
// -------------------------------------------------------------------

class CGEnterGang : public ::google::protobuf::Message {
 public:
  CGEnterGang();
  virtual ~CGEnterGang();

  CGEnterGang(const CGEnterGang& from);

  inline CGEnterGang& operator=(const CGEnterGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGEnterGang& default_instance();

  void Swap(CGEnterGang* other);

  // implements Message ----------------------------------------------

  CGEnterGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGEnterGang& from);
  void MergeFrom(const CGEnterGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGEnterGang)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGEnterGang* default_instance_;
};
// -------------------------------------------------------------------

class GCEnterGang : public ::google::protobuf::Message {
 public:
  GCEnterGang();
  virtual ~GCEnterGang();

  GCEnterGang(const GCEnterGang& from);

  inline GCEnterGang& operator=(const GCEnterGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCEnterGang& default_instance();

  void Swap(GCEnterGang* other);

  // implements Message ----------------------------------------------

  GCEnterGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCEnterGang& from);
  void MergeFrom(const GCEnterGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCEnterGang)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCEnterGang* default_instance_;
};
// -------------------------------------------------------------------

class GCGangRobberNum : public ::google::protobuf::Message {
 public:
  GCGangRobberNum();
  virtual ~GCGangRobberNum();

  GCGangRobberNum(const GCGangRobberNum& from);

  inline GCGangRobberNum& operator=(const GCGangRobberNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangRobberNum& default_instance();

  void Swap(GCGangRobberNum* other);

  // implements Message ----------------------------------------------

  GCGangRobberNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangRobberNum& from);
  void MergeFrom(const GCGangRobberNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 numTotal = 2;
  inline bool has_numtotal() const;
  inline void clear_numtotal();
  static const int kNumTotalFieldNumber = 2;
  inline ::google::protobuf::int32 numtotal() const;
  inline void set_numtotal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGangRobberNum)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_numtotal();
  inline void clear_has_numtotal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 numtotal_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangRobberNum* default_instance_;
};
// -------------------------------------------------------------------

class GCGangActiveOpen : public ::google::protobuf::Message {
 public:
  GCGangActiveOpen();
  virtual ~GCGangActiveOpen();

  GCGangActiveOpen(const GCGangActiveOpen& from);

  inline GCGangActiveOpen& operator=(const GCGangActiveOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangActiveOpen& default_instance();

  void Swap(GCGangActiveOpen* other);

  // implements Message ----------------------------------------------

  GCGangActiveOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangActiveOpen& from);
  void MergeFrom(const GCGangActiveOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 languageId = 2;
  inline bool has_languageid() const;
  inline void clear_languageid();
  static const int kLanguageIdFieldNumber = 2;
  inline ::google::protobuf::int32 languageid() const;
  inline void set_languageid(::google::protobuf::int32 value);

  // repeated string param = 3;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // @@protoc_insertion_point(class_scope:GCGangActiveOpen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_languageid();
  inline void clear_has_languageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 languageid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangActiveOpen* default_instance_;
};
// -------------------------------------------------------------------

class CGMuteGangMember : public ::google::protobuf::Message {
 public:
  CGMuteGangMember();
  virtual ~CGMuteGangMember();

  CGMuteGangMember(const CGMuteGangMember& from);

  inline CGMuteGangMember& operator=(const CGMuteGangMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGMuteGangMember& default_instance();

  void Swap(CGMuteGangMember* other);

  // implements Message ----------------------------------------------

  CGMuteGangMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGMuteGangMember& from);
  void MergeFrom(const CGMuteGangMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 plyerId = 2;
  inline bool has_plyerid() const;
  inline void clear_plyerid();
  static const int kPlyerIdFieldNumber = 2;
  inline ::google::protobuf::int64 plyerid() const;
  inline void set_plyerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGMuteGangMember)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_plyerid();
  inline void clear_has_plyerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 plyerid_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGMuteGangMember* default_instance_;
};
// -------------------------------------------------------------------

class GCMuteGangMember : public ::google::protobuf::Message {
 public:
  GCMuteGangMember();
  virtual ~GCMuteGangMember();

  GCMuteGangMember(const GCMuteGangMember& from);

  inline GCMuteGangMember& operator=(const GCMuteGangMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMuteGangMember& default_instance();

  void Swap(GCMuteGangMember* other);

  // implements Message ----------------------------------------------

  GCMuteGangMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMuteGangMember& from);
  void MergeFrom(const GCMuteGangMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 playerId = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCMuteGangMember)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMuteGangMember* default_instance_;
};
// -------------------------------------------------------------------

class GCMuteGangList : public ::google::protobuf::Message {
 public:
  GCMuteGangList();
  virtual ~GCMuteGangList();

  GCMuteGangList(const GCMuteGangList& from);

  inline GCMuteGangList& operator=(const GCMuteGangList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMuteGangList& default_instance();

  void Swap(GCMuteGangList* other);

  // implements Message ----------------------------------------------

  GCMuteGangList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMuteGangList& from);
  void MergeFrom(const GCMuteGangList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 mute = 1;
  inline int mute_size() const;
  inline void clear_mute();
  static const int kMuteFieldNumber = 1;
  inline ::google::protobuf::int64 mute(int index) const;
  inline void set_mute(int index, ::google::protobuf::int64 value);
  inline void add_mute(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mute();

  // @@protoc_insertion_point(class_scope:GCMuteGangList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mute_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMuteGangList* default_instance_;
};
// -------------------------------------------------------------------

class CGInviteToGang : public ::google::protobuf::Message {
 public:
  CGInviteToGang();
  virtual ~CGInviteToGang();

  CGInviteToGang(const CGInviteToGang& from);

  inline CGInviteToGang& operator=(const CGInviteToGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGInviteToGang& default_instance();

  void Swap(CGInviteToGang* other);

  // implements Message ----------------------------------------------

  CGInviteToGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGInviteToGang& from);
  void MergeFrom(const CGInviteToGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGInviteToGang)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGInviteToGang* default_instance_;
};
// -------------------------------------------------------------------

class GCBeInvitedToGang : public ::google::protobuf::Message {
 public:
  GCBeInvitedToGang();
  virtual ~GCBeInvitedToGang();

  GCBeInvitedToGang(const GCBeInvitedToGang& from);

  inline GCBeInvitedToGang& operator=(const GCBeInvitedToGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCBeInvitedToGang& default_instance();

  void Swap(GCBeInvitedToGang* other);

  // implements Message ----------------------------------------------

  GCBeInvitedToGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCBeInvitedToGang& from);
  void MergeFrom(const GCBeInvitedToGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gangId = 1;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 1;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional string gangName = 2;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 2;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // @@protoc_insertion_point(class_scope:GCBeInvitedToGang)
 private:
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_gangname();
  inline void clear_has_gangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::std::string* gangname_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCBeInvitedToGang* default_instance_;
};
// -------------------------------------------------------------------

class CGBeBeInvitedToGang : public ::google::protobuf::Message {
 public:
  CGBeBeInvitedToGang();
  virtual ~CGBeBeInvitedToGang();

  CGBeBeInvitedToGang(const CGBeBeInvitedToGang& from);

  inline CGBeBeInvitedToGang& operator=(const CGBeBeInvitedToGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGBeBeInvitedToGang& default_instance();

  void Swap(CGBeBeInvitedToGang* other);

  // implements Message ----------------------------------------------

  CGBeBeInvitedToGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGBeBeInvitedToGang& from);
  void MergeFrom(const CGBeBeInvitedToGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operateType = 1;
  inline bool has_operatetype() const;
  inline void clear_operatetype();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operatetype() const;
  inline void set_operatetype(::google::protobuf::int32 value);

  // optional int64 gangId = 2;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 2;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGBeBeInvitedToGang)
 private:
  inline void set_has_operatetype();
  inline void clear_has_operatetype();
  inline void set_has_gangid();
  inline void clear_has_gangid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::google::protobuf::int32 operatetype_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGBeBeInvitedToGang* default_instance_;
};
// -------------------------------------------------------------------

class GCApplyNotice : public ::google::protobuf::Message {
 public:
  GCApplyNotice();
  virtual ~GCApplyNotice();

  GCApplyNotice(const GCApplyNotice& from);

  inline GCApplyNotice& operator=(const GCApplyNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCApplyNotice& default_instance();

  void Swap(GCApplyNotice* other);

  // implements Message ----------------------------------------------

  GCApplyNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCApplyNotice& from);
  void MergeFrom(const GCApplyNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCApplyNotice)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCApplyNotice* default_instance_;
};
// -------------------------------------------------------------------

class CGHasGang : public ::google::protobuf::Message {
 public:
  CGHasGang();
  virtual ~CGHasGang();

  CGHasGang(const CGHasGang& from);

  inline CGHasGang& operator=(const CGHasGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGHasGang& default_instance();

  void Swap(CGHasGang* other);

  // implements Message ----------------------------------------------

  CGHasGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGHasGang& from);
  void MergeFrom(const CGHasGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGHasGang)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 playerid_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGHasGang* default_instance_;
};
// -------------------------------------------------------------------

class GCHasGang : public ::google::protobuf::Message {
 public:
  GCHasGang();
  virtual ~GCHasGang();

  GCHasGang(const GCHasGang& from);

  inline GCHasGang& operator=(const GCHasGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCHasGang& default_instance();

  void Swap(GCHasGang* other);

  // implements Message ----------------------------------------------

  GCHasGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCHasGang& from);
  void MergeFrom(const GCHasGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCHasGang)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCHasGang* default_instance_;
};
// -------------------------------------------------------------------

class CGGangChangeName : public ::google::protobuf::Message {
 public:
  CGGangChangeName();
  virtual ~CGGangChangeName();

  CGGangChangeName(const CGGangChangeName& from);

  inline CGGangChangeName& operator=(const CGGangChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGangChangeName& default_instance();

  void Swap(CGGangChangeName* other);

  // implements Message ----------------------------------------------

  CGGangChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGangChangeName& from);
  void MergeFrom(const CGGangChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gangId = 1;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 1;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional string gangTotem = 2;
  inline bool has_gangtotem() const;
  inline void clear_gangtotem();
  static const int kGangTotemFieldNumber = 2;
  inline const ::std::string& gangtotem() const;
  inline void set_gangtotem(const ::std::string& value);
  inline void set_gangtotem(const char* value);
  inline void set_gangtotem(const char* value, size_t size);
  inline ::std::string* mutable_gangtotem();
  inline ::std::string* release_gangtotem();
  inline void set_allocated_gangtotem(::std::string* gangtotem);

  // optional string gangName = 3;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 3;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // @@protoc_insertion_point(class_scope:CGGangChangeName)
 private:
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_gangtotem();
  inline void clear_has_gangtotem();
  inline void set_has_gangname();
  inline void clear_has_gangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::std::string* gangtotem_;
  ::std::string* gangname_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGangChangeName* default_instance_;
};
// -------------------------------------------------------------------

class GCGangChangeName : public ::google::protobuf::Message {
 public:
  GCGangChangeName();
  virtual ~GCGangChangeName();

  GCGangChangeName(const GCGangChangeName& from);

  inline GCGangChangeName& operator=(const GCGangChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGangChangeName& default_instance();

  void Swap(GCGangChangeName* other);

  // implements Message ----------------------------------------------

  GCGangChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGangChangeName& from);
  void MergeFrom(const GCGangChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGangChangeName)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_GangMessage_2eproto();
  friend void protobuf_AssignDesc_GangMessage_2eproto();
  friend void protobuf_ShutdownFile_GangMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGangChangeName* default_instance_;
};
// ===================================================================


// ===================================================================

// GangAttr

// optional int32 attrKey = 1;
inline bool GangAttr::has_attrkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GangAttr::set_has_attrkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GangAttr::clear_has_attrkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GangAttr::clear_attrkey() {
  attrkey_ = 0;
  clear_has_attrkey();
}
inline ::google::protobuf::int32 GangAttr::attrkey() const {
  // @@protoc_insertion_point(field_get:GangAttr.attrKey)
  return attrkey_;
}
inline void GangAttr::set_attrkey(::google::protobuf::int32 value) {
  set_has_attrkey();
  attrkey_ = value;
  // @@protoc_insertion_point(field_set:GangAttr.attrKey)
}

// optional int32 arrtValue = 2;
inline bool GangAttr::has_arrtvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GangAttr::set_has_arrtvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GangAttr::clear_has_arrtvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GangAttr::clear_arrtvalue() {
  arrtvalue_ = 0;
  clear_has_arrtvalue();
}
inline ::google::protobuf::int32 GangAttr::arrtvalue() const {
  // @@protoc_insertion_point(field_get:GangAttr.arrtValue)
  return arrtvalue_;
}
inline void GangAttr::set_arrtvalue(::google::protobuf::int32 value) {
  set_has_arrtvalue();
  arrtvalue_ = value;
  // @@protoc_insertion_point(field_set:GangAttr.arrtValue)
}

// -------------------------------------------------------------------

// GangMainInfo

// optional int64 gangId = 1;
inline bool GangMainInfo::has_gangid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GangMainInfo::set_has_gangid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GangMainInfo::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GangMainInfo::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 GangMainInfo::gangid() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.gangId)
  return gangid_;
}
inline void GangMainInfo::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.gangId)
}

// optional string gangName = 2;
inline bool GangMainInfo::has_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GangMainInfo::set_has_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GangMainInfo::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GangMainInfo::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& GangMainInfo::gangname() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.gangName)
  return *gangname_;
}
inline void GangMainInfo::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:GangMainInfo.gangName)
}
inline void GangMainInfo::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangMainInfo.gangName)
}
inline void GangMainInfo::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangMainInfo.gangName)
}
inline ::std::string* GangMainInfo::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangMainInfo.gangName)
  return gangname_;
}
inline ::std::string* GangMainInfo::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangMainInfo::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangMainInfo.gangName)
}

// optional string gangTotem = 3;
inline bool GangMainInfo::has_gangtotem() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GangMainInfo::set_has_gangtotem() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GangMainInfo::clear_has_gangtotem() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GangMainInfo::clear_gangtotem() {
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_->clear();
  }
  clear_has_gangtotem();
}
inline const ::std::string& GangMainInfo::gangtotem() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.gangTotem)
  return *gangtotem_;
}
inline void GangMainInfo::set_gangtotem(const ::std::string& value) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(value);
  // @@protoc_insertion_point(field_set:GangMainInfo.gangTotem)
}
inline void GangMainInfo::set_gangtotem(const char* value) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangMainInfo.gangTotem)
}
inline void GangMainInfo::set_gangtotem(const char* value, size_t size) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangMainInfo.gangTotem)
}
inline ::std::string* GangMainInfo::mutable_gangtotem() {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangMainInfo.gangTotem)
  return gangtotem_;
}
inline ::std::string* GangMainInfo::release_gangtotem() {
  clear_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangtotem_;
    gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangMainInfo::set_allocated_gangtotem(::std::string* gangtotem) {
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangtotem_;
  }
  if (gangtotem) {
    set_has_gangtotem();
    gangtotem_ = gangtotem;
  } else {
    clear_has_gangtotem();
    gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangMainInfo.gangTotem)
}

// optional int32 gangLevel = 4;
inline bool GangMainInfo::has_ganglevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GangMainInfo::set_has_ganglevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GangMainInfo::clear_has_ganglevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GangMainInfo::clear_ganglevel() {
  ganglevel_ = 0;
  clear_has_ganglevel();
}
inline ::google::protobuf::int32 GangMainInfo::ganglevel() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.gangLevel)
  return ganglevel_;
}
inline void GangMainInfo::set_ganglevel(::google::protobuf::int32 value) {
  set_has_ganglevel();
  ganglevel_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.gangLevel)
}

// optional int32 memberNum = 5;
inline bool GangMainInfo::has_membernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GangMainInfo::set_has_membernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GangMainInfo::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GangMainInfo::clear_membernum() {
  membernum_ = 0;
  clear_has_membernum();
}
inline ::google::protobuf::int32 GangMainInfo::membernum() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.memberNum)
  return membernum_;
}
inline void GangMainInfo::set_membernum(::google::protobuf::int32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.memberNum)
}

// optional string bulletin = 6;
inline bool GangMainInfo::has_bulletin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GangMainInfo::set_has_bulletin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GangMainInfo::clear_has_bulletin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GangMainInfo::clear_bulletin() {
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_->clear();
  }
  clear_has_bulletin();
}
inline const ::std::string& GangMainInfo::bulletin() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.bulletin)
  return *bulletin_;
}
inline void GangMainInfo::set_bulletin(const ::std::string& value) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(value);
  // @@protoc_insertion_point(field_set:GangMainInfo.bulletin)
}
inline void GangMainInfo::set_bulletin(const char* value) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangMainInfo.bulletin)
}
inline void GangMainInfo::set_bulletin(const char* value, size_t size) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangMainInfo.bulletin)
}
inline ::std::string* GangMainInfo::mutable_bulletin() {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangMainInfo.bulletin)
  return bulletin_;
}
inline ::std::string* GangMainInfo::release_bulletin() {
  clear_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bulletin_;
    bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangMainInfo::set_allocated_bulletin(::std::string* bulletin) {
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bulletin_;
  }
  if (bulletin) {
    set_has_bulletin();
    bulletin_ = bulletin;
  } else {
    clear_has_bulletin();
    bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangMainInfo.bulletin)
}

// optional int64 money = 7;
inline bool GangMainInfo::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GangMainInfo::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GangMainInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GangMainInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 GangMainInfo::money() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.money)
  return money_;
}
inline void GangMainInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.money)
}

// optional int64 power = 8;
inline bool GangMainInfo::has_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GangMainInfo::set_has_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GangMainInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GangMainInfo::clear_power() {
  power_ = GOOGLE_LONGLONG(0);
  clear_has_power();
}
inline ::google::protobuf::int64 GangMainInfo::power() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.power)
  return power_;
}
inline void GangMainInfo::set_power(::google::protobuf::int64 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.power)
}

// optional string masterName = 9;
inline bool GangMainInfo::has_mastername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GangMainInfo::set_has_mastername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GangMainInfo::clear_has_mastername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GangMainInfo::clear_mastername() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_->clear();
  }
  clear_has_mastername();
}
inline const ::std::string& GangMainInfo::mastername() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.masterName)
  return *mastername_;
}
inline void GangMainInfo::set_mastername(const ::std::string& value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set:GangMainInfo.masterName)
}
inline void GangMainInfo::set_mastername(const char* value) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangMainInfo.masterName)
}
inline void GangMainInfo::set_mastername(const char* value, size_t size) {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  mastername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangMainInfo.masterName)
}
inline ::std::string* GangMainInfo::mutable_mastername() {
  set_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mastername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangMainInfo.masterName)
  return mastername_;
}
inline ::std::string* GangMainInfo::release_mastername() {
  clear_has_mastername();
  if (mastername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mastername_;
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangMainInfo::set_allocated_mastername(::std::string* mastername) {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (mastername) {
    set_has_mastername();
    mastername_ = mastername;
  } else {
    clear_has_mastername();
    mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangMainInfo.masterName)
}

// optional int32 isKickMaster = 10;
inline bool GangMainInfo::has_iskickmaster() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GangMainInfo::set_has_iskickmaster() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GangMainInfo::clear_has_iskickmaster() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GangMainInfo::clear_iskickmaster() {
  iskickmaster_ = 0;
  clear_has_iskickmaster();
}
inline ::google::protobuf::int32 GangMainInfo::iskickmaster() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.isKickMaster)
  return iskickmaster_;
}
inline void GangMainInfo::set_iskickmaster(::google::protobuf::int32 value) {
  set_has_iskickmaster();
  iskickmaster_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.isKickMaster)
}

// optional int64 kickTime = 11;
inline bool GangMainInfo::has_kicktime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GangMainInfo::set_has_kicktime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GangMainInfo::clear_has_kicktime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GangMainInfo::clear_kicktime() {
  kicktime_ = GOOGLE_LONGLONG(0);
  clear_has_kicktime();
}
inline ::google::protobuf::int64 GangMainInfo::kicktime() const {
  // @@protoc_insertion_point(field_get:GangMainInfo.kickTime)
  return kicktime_;
}
inline void GangMainInfo::set_kicktime(::google::protobuf::int64 value) {
  set_has_kicktime();
  kicktime_ = value;
  // @@protoc_insertion_point(field_set:GangMainInfo.kickTime)
}

// -------------------------------------------------------------------

// BuildingInfo

// optional int32 gangDonateNum = 1;
inline bool BuildingInfo::has_gangdonatenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildingInfo::set_has_gangdonatenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildingInfo::clear_has_gangdonatenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildingInfo::clear_gangdonatenum() {
  gangdonatenum_ = 0;
  clear_has_gangdonatenum();
}
inline ::google::protobuf::int32 BuildingInfo::gangdonatenum() const {
  // @@protoc_insertion_point(field_get:BuildingInfo.gangDonateNum)
  return gangdonatenum_;
}
inline void BuildingInfo::set_gangdonatenum(::google::protobuf::int32 value) {
  set_has_gangdonatenum();
  gangdonatenum_ = value;
  // @@protoc_insertion_point(field_set:BuildingInfo.gangDonateNum)
}

// repeated .GangAttr builtAttr = 2;
inline int BuildingInfo::builtattr_size() const {
  return builtattr_.size();
}
inline void BuildingInfo::clear_builtattr() {
  builtattr_.Clear();
}
inline const ::GangAttr& BuildingInfo::builtattr(int index) const {
  // @@protoc_insertion_point(field_get:BuildingInfo.builtAttr)
  return builtattr_.Get(index);
}
inline ::GangAttr* BuildingInfo::mutable_builtattr(int index) {
  // @@protoc_insertion_point(field_mutable:BuildingInfo.builtAttr)
  return builtattr_.Mutable(index);
}
inline ::GangAttr* BuildingInfo::add_builtattr() {
  // @@protoc_insertion_point(field_add:BuildingInfo.builtAttr)
  return builtattr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
BuildingInfo::builtattr() const {
  // @@protoc_insertion_point(field_list:BuildingInfo.builtAttr)
  return builtattr_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
BuildingInfo::mutable_builtattr() {
  // @@protoc_insertion_point(field_mutable_list:BuildingInfo.builtAttr)
  return &builtattr_;
}

// repeated .GangAttr practice = 3;
inline int BuildingInfo::practice_size() const {
  return practice_.size();
}
inline void BuildingInfo::clear_practice() {
  practice_.Clear();
}
inline const ::GangAttr& BuildingInfo::practice(int index) const {
  // @@protoc_insertion_point(field_get:BuildingInfo.practice)
  return practice_.Get(index);
}
inline ::GangAttr* BuildingInfo::mutable_practice(int index) {
  // @@protoc_insertion_point(field_mutable:BuildingInfo.practice)
  return practice_.Mutable(index);
}
inline ::GangAttr* BuildingInfo::add_practice() {
  // @@protoc_insertion_point(field_add:BuildingInfo.practice)
  return practice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
BuildingInfo::practice() const {
  // @@protoc_insertion_point(field_list:BuildingInfo.practice)
  return practice_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
BuildingInfo::mutable_practice() {
  // @@protoc_insertion_point(field_mutable_list:BuildingInfo.practice)
  return &practice_;
}

// repeated .GangAttr buyUniqueInfo = 4;
inline int BuildingInfo::buyuniqueinfo_size() const {
  return buyuniqueinfo_.size();
}
inline void BuildingInfo::clear_buyuniqueinfo() {
  buyuniqueinfo_.Clear();
}
inline const ::GangAttr& BuildingInfo::buyuniqueinfo(int index) const {
  // @@protoc_insertion_point(field_get:BuildingInfo.buyUniqueInfo)
  return buyuniqueinfo_.Get(index);
}
inline ::GangAttr* BuildingInfo::mutable_buyuniqueinfo(int index) {
  // @@protoc_insertion_point(field_mutable:BuildingInfo.buyUniqueInfo)
  return buyuniqueinfo_.Mutable(index);
}
inline ::GangAttr* BuildingInfo::add_buyuniqueinfo() {
  // @@protoc_insertion_point(field_add:BuildingInfo.buyUniqueInfo)
  return buyuniqueinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangAttr >&
BuildingInfo::buyuniqueinfo() const {
  // @@protoc_insertion_point(field_list:BuildingInfo.buyUniqueInfo)
  return buyuniqueinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangAttr >*
BuildingInfo::mutable_buyuniqueinfo() {
  // @@protoc_insertion_point(field_mutable_list:BuildingInfo.buyUniqueInfo)
  return &buyuniqueinfo_;
}

// -------------------------------------------------------------------

// GangMemberInfo

// optional int64 memId = 1;
inline bool GangMemberInfo::has_memid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GangMemberInfo::set_has_memid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GangMemberInfo::clear_has_memid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GangMemberInfo::clear_memid() {
  memid_ = GOOGLE_LONGLONG(0);
  clear_has_memid();
}
inline ::google::protobuf::int64 GangMemberInfo::memid() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memId)
  return memid_;
}
inline void GangMemberInfo::set_memid(::google::protobuf::int64 value) {
  set_has_memid();
  memid_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memId)
}

// optional string memName = 2;
inline bool GangMemberInfo::has_memname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GangMemberInfo::set_has_memname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GangMemberInfo::clear_has_memname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GangMemberInfo::clear_memname() {
  if (memname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memname_->clear();
  }
  clear_has_memname();
}
inline const ::std::string& GangMemberInfo::memname() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memName)
  return *memname_;
}
inline void GangMemberInfo::set_memname(const ::std::string& value) {
  set_has_memname();
  if (memname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memname_ = new ::std::string;
  }
  memname_->assign(value);
  // @@protoc_insertion_point(field_set:GangMemberInfo.memName)
}
inline void GangMemberInfo::set_memname(const char* value) {
  set_has_memname();
  if (memname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memname_ = new ::std::string;
  }
  memname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangMemberInfo.memName)
}
inline void GangMemberInfo::set_memname(const char* value, size_t size) {
  set_has_memname();
  if (memname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memname_ = new ::std::string;
  }
  memname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangMemberInfo.memName)
}
inline ::std::string* GangMemberInfo::mutable_memname() {
  set_has_memname();
  if (memname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    memname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangMemberInfo.memName)
  return memname_;
}
inline ::std::string* GangMemberInfo::release_memname() {
  clear_has_memname();
  if (memname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = memname_;
    memname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangMemberInfo::set_allocated_memname(::std::string* memname) {
  if (memname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete memname_;
  }
  if (memname) {
    set_has_memname();
    memname_ = memname;
  } else {
    clear_has_memname();
    memname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangMemberInfo.memName)
}

// optional int32 memLevel = 3;
inline bool GangMemberInfo::has_memlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GangMemberInfo::set_has_memlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GangMemberInfo::clear_has_memlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GangMemberInfo::clear_memlevel() {
  memlevel_ = 0;
  clear_has_memlevel();
}
inline ::google::protobuf::int32 GangMemberInfo::memlevel() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memLevel)
  return memlevel_;
}
inline void GangMemberInfo::set_memlevel(::google::protobuf::int32 value) {
  set_has_memlevel();
  memlevel_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memLevel)
}

// optional int64 memFightPower = 4;
inline bool GangMemberInfo::has_memfightpower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GangMemberInfo::set_has_memfightpower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GangMemberInfo::clear_has_memfightpower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GangMemberInfo::clear_memfightpower() {
  memfightpower_ = GOOGLE_LONGLONG(0);
  clear_has_memfightpower();
}
inline ::google::protobuf::int64 GangMemberInfo::memfightpower() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memFightPower)
  return memfightpower_;
}
inline void GangMemberInfo::set_memfightpower(::google::protobuf::int64 value) {
  set_has_memfightpower();
  memfightpower_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memFightPower)
}

// optional int32 memJob = 5;
inline bool GangMemberInfo::has_memjob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GangMemberInfo::set_has_memjob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GangMemberInfo::clear_has_memjob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GangMemberInfo::clear_memjob() {
  memjob_ = 0;
  clear_has_memjob();
}
inline ::google::protobuf::int32 GangMemberInfo::memjob() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memJob)
  return memjob_;
}
inline void GangMemberInfo::set_memjob(::google::protobuf::int32 value) {
  set_has_memjob();
  memjob_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memJob)
}

// optional int32 memOnline = 6;
inline bool GangMemberInfo::has_memonline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GangMemberInfo::set_has_memonline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GangMemberInfo::clear_has_memonline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GangMemberInfo::clear_memonline() {
  memonline_ = 0;
  clear_has_memonline();
}
inline ::google::protobuf::int32 GangMemberInfo::memonline() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memOnline)
  return memonline_;
}
inline void GangMemberInfo::set_memonline(::google::protobuf::int32 value) {
  set_has_memonline();
  memonline_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memOnline)
}

// optional int64 memContribute = 7;
inline bool GangMemberInfo::has_memcontribute() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GangMemberInfo::set_has_memcontribute() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GangMemberInfo::clear_has_memcontribute() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GangMemberInfo::clear_memcontribute() {
  memcontribute_ = GOOGLE_LONGLONG(0);
  clear_has_memcontribute();
}
inline ::google::protobuf::int64 GangMemberInfo::memcontribute() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memContribute)
  return memcontribute_;
}
inline void GangMemberInfo::set_memcontribute(::google::protobuf::int64 value) {
  set_has_memcontribute();
  memcontribute_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memContribute)
}

// optional int64 gangContributeTotal = 8;
inline bool GangMemberInfo::has_gangcontributetotal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GangMemberInfo::set_has_gangcontributetotal() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GangMemberInfo::clear_has_gangcontributetotal() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GangMemberInfo::clear_gangcontributetotal() {
  gangcontributetotal_ = GOOGLE_LONGLONG(0);
  clear_has_gangcontributetotal();
}
inline ::google::protobuf::int64 GangMemberInfo::gangcontributetotal() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.gangContributeTotal)
  return gangcontributetotal_;
}
inline void GangMemberInfo::set_gangcontributetotal(::google::protobuf::int64 value) {
  set_has_gangcontributetotal();
  gangcontributetotal_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.gangContributeTotal)
}

// optional int32 professionId = 9;
inline bool GangMemberInfo::has_professionid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GangMemberInfo::set_has_professionid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GangMemberInfo::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GangMemberInfo::clear_professionid() {
  professionid_ = 0;
  clear_has_professionid();
}
inline ::google::protobuf::int32 GangMemberInfo::professionid() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.professionId)
  return professionid_;
}
inline void GangMemberInfo::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.professionId)
}

// optional int32 vip = 10;
inline bool GangMemberInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GangMemberInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GangMemberInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GangMemberInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 GangMemberInfo::vip() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.vip)
  return vip_;
}
inline void GangMemberInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.vip)
}

// optional int64 memLogoutTime = 11;
inline bool GangMemberInfo::has_memlogouttime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GangMemberInfo::set_has_memlogouttime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GangMemberInfo::clear_has_memlogouttime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GangMemberInfo::clear_memlogouttime() {
  memlogouttime_ = GOOGLE_LONGLONG(0);
  clear_has_memlogouttime();
}
inline ::google::protobuf::int64 GangMemberInfo::memlogouttime() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.memLogoutTime)
  return memlogouttime_;
}
inline void GangMemberInfo::set_memlogouttime(::google::protobuf::int64 value) {
  set_has_memlogouttime();
  memlogouttime_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.memLogoutTime)
}

// optional int32 sex = 12;
inline bool GangMemberInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GangMemberInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GangMemberInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GangMemberInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 GangMemberInfo::sex() const {
  // @@protoc_insertion_point(field_get:GangMemberInfo.sex)
  return sex_;
}
inline void GangMemberInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:GangMemberInfo.sex)
}

// -------------------------------------------------------------------

// CGCreateGang

// optional int32 requestType = 1;
inline bool CGCreateGang::has_requesttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCreateGang::set_has_requesttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCreateGang::clear_has_requesttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCreateGang::clear_requesttype() {
  requesttype_ = 0;
  clear_has_requesttype();
}
inline ::google::protobuf::int32 CGCreateGang::requesttype() const {
  // @@protoc_insertion_point(field_get:CGCreateGang.requestType)
  return requesttype_;
}
inline void CGCreateGang::set_requesttype(::google::protobuf::int32 value) {
  set_has_requesttype();
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:CGCreateGang.requestType)
}

// optional string gangName = 2;
inline bool CGCreateGang::has_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGCreateGang::set_has_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGCreateGang::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGCreateGang::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& CGCreateGang::gangname() const {
  // @@protoc_insertion_point(field_get:CGCreateGang.gangName)
  return *gangname_;
}
inline void CGCreateGang::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:CGCreateGang.gangName)
}
inline void CGCreateGang::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGCreateGang.gangName)
}
inline void CGCreateGang::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGCreateGang.gangName)
}
inline ::std::string* CGCreateGang::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGCreateGang.gangName)
  return gangname_;
}
inline ::std::string* CGCreateGang::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGCreateGang::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGCreateGang.gangName)
}

// optional string gangFont = 3;
inline bool CGCreateGang::has_gangfont() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGCreateGang::set_has_gangfont() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGCreateGang::clear_has_gangfont() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGCreateGang::clear_gangfont() {
  if (gangfont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangfont_->clear();
  }
  clear_has_gangfont();
}
inline const ::std::string& CGCreateGang::gangfont() const {
  // @@protoc_insertion_point(field_get:CGCreateGang.gangFont)
  return *gangfont_;
}
inline void CGCreateGang::set_gangfont(const ::std::string& value) {
  set_has_gangfont();
  if (gangfont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangfont_ = new ::std::string;
  }
  gangfont_->assign(value);
  // @@protoc_insertion_point(field_set:CGCreateGang.gangFont)
}
inline void CGCreateGang::set_gangfont(const char* value) {
  set_has_gangfont();
  if (gangfont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangfont_ = new ::std::string;
  }
  gangfont_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGCreateGang.gangFont)
}
inline void CGCreateGang::set_gangfont(const char* value, size_t size) {
  set_has_gangfont();
  if (gangfont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangfont_ = new ::std::string;
  }
  gangfont_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGCreateGang.gangFont)
}
inline ::std::string* CGCreateGang::mutable_gangfont() {
  set_has_gangfont();
  if (gangfont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangfont_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGCreateGang.gangFont)
  return gangfont_;
}
inline ::std::string* CGCreateGang::release_gangfont() {
  clear_has_gangfont();
  if (gangfont_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangfont_;
    gangfont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGCreateGang::set_allocated_gangfont(::std::string* gangfont) {
  if (gangfont_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangfont_;
  }
  if (gangfont) {
    set_has_gangfont();
    gangfont_ = gangfont;
  } else {
    clear_has_gangfont();
    gangfont_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGCreateGang.gangFont)
}

// -------------------------------------------------------------------

// GCCreateGang

// optional int32 responseType = 1;
inline bool GCCreateGang::has_responsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCreateGang::set_has_responsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCreateGang::clear_has_responsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCreateGang::clear_responsetype() {
  responsetype_ = 0;
  clear_has_responsetype();
}
inline ::google::protobuf::int32 GCCreateGang::responsetype() const {
  // @@protoc_insertion_point(field_get:GCCreateGang.responseType)
  return responsetype_;
}
inline void GCCreateGang::set_responsetype(::google::protobuf::int32 value) {
  set_has_responsetype();
  responsetype_ = value;
  // @@protoc_insertion_point(field_set:GCCreateGang.responseType)
}

// optional int32 result = 2;
inline bool GCCreateGang::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCCreateGang::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCCreateGang::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCCreateGang::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCCreateGang::result() const {
  // @@protoc_insertion_point(field_get:GCCreateGang.result)
  return result_;
}
inline void GCCreateGang::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCCreateGang.result)
}

// optional .GangMainInfo gangInfo = 3;
inline bool GCCreateGang::has_ganginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCCreateGang::set_has_ganginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCCreateGang::clear_has_ganginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCCreateGang::clear_ganginfo() {
  if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
  clear_has_ganginfo();
}
inline const ::GangMainInfo& GCCreateGang::ganginfo() const {
  // @@protoc_insertion_point(field_get:GCCreateGang.gangInfo)
  return ganginfo_ != NULL ? *ganginfo_ : *default_instance_->ganginfo_;
}
inline ::GangMainInfo* GCCreateGang::mutable_ganginfo() {
  set_has_ganginfo();
  if (ganginfo_ == NULL) ganginfo_ = new ::GangMainInfo;
  // @@protoc_insertion_point(field_mutable:GCCreateGang.gangInfo)
  return ganginfo_;
}
inline ::GangMainInfo* GCCreateGang::release_ganginfo() {
  clear_has_ganginfo();
  ::GangMainInfo* temp = ganginfo_;
  ganginfo_ = NULL;
  return temp;
}
inline void GCCreateGang::set_allocated_ganginfo(::GangMainInfo* ganginfo) {
  delete ganginfo_;
  ganginfo_ = ganginfo;
  if (ganginfo) {
    set_has_ganginfo();
  } else {
    clear_has_ganginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCCreateGang.gangInfo)
}

// repeated .GangMemberInfo memberInfo = 4;
inline int GCCreateGang::memberinfo_size() const {
  return memberinfo_.size();
}
inline void GCCreateGang::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::GangMemberInfo& GCCreateGang::memberinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCCreateGang.memberInfo)
  return memberinfo_.Get(index);
}
inline ::GangMemberInfo* GCCreateGang::mutable_memberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCCreateGang.memberInfo)
  return memberinfo_.Mutable(index);
}
inline ::GangMemberInfo* GCCreateGang::add_memberinfo() {
  // @@protoc_insertion_point(field_add:GCCreateGang.memberInfo)
  return memberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >&
GCCreateGang::memberinfo() const {
  // @@protoc_insertion_point(field_list:GCCreateGang.memberInfo)
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >*
GCCreateGang::mutable_memberinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCCreateGang.memberInfo)
  return &memberinfo_;
}

// optional .BuildingInfo buildInfo = 5;
inline bool GCCreateGang::has_buildinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCCreateGang::set_has_buildinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCCreateGang::clear_has_buildinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCCreateGang::clear_buildinfo() {
  if (buildinfo_ != NULL) buildinfo_->::BuildingInfo::Clear();
  clear_has_buildinfo();
}
inline const ::BuildingInfo& GCCreateGang::buildinfo() const {
  // @@protoc_insertion_point(field_get:GCCreateGang.buildInfo)
  return buildinfo_ != NULL ? *buildinfo_ : *default_instance_->buildinfo_;
}
inline ::BuildingInfo* GCCreateGang::mutable_buildinfo() {
  set_has_buildinfo();
  if (buildinfo_ == NULL) buildinfo_ = new ::BuildingInfo;
  // @@protoc_insertion_point(field_mutable:GCCreateGang.buildInfo)
  return buildinfo_;
}
inline ::BuildingInfo* GCCreateGang::release_buildinfo() {
  clear_has_buildinfo();
  ::BuildingInfo* temp = buildinfo_;
  buildinfo_ = NULL;
  return temp;
}
inline void GCCreateGang::set_allocated_buildinfo(::BuildingInfo* buildinfo) {
  delete buildinfo_;
  buildinfo_ = buildinfo;
  if (buildinfo) {
    set_has_buildinfo();
  } else {
    clear_has_buildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCCreateGang.buildInfo)
}

// -------------------------------------------------------------------

// CGGetGangList

// optional int32 listType = 1;
inline bool CGGetGangList::has_listtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetGangList::set_has_listtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetGangList::clear_has_listtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetGangList::clear_listtype() {
  listtype_ = 0;
  clear_has_listtype();
}
inline ::google::protobuf::int32 CGGetGangList::listtype() const {
  // @@protoc_insertion_point(field_get:CGGetGangList.listType)
  return listtype_;
}
inline void CGGetGangList::set_listtype(::google::protobuf::int32 value) {
  set_has_listtype();
  listtype_ = value;
  // @@protoc_insertion_point(field_set:CGGetGangList.listType)
}

// optional string gangName = 3;
inline bool CGGetGangList::has_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGetGangList::set_has_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGetGangList::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGetGangList::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& CGGetGangList::gangname() const {
  // @@protoc_insertion_point(field_get:CGGetGangList.gangName)
  return *gangname_;
}
inline void CGGetGangList::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:CGGetGangList.gangName)
}
inline void CGGetGangList::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGGetGangList.gangName)
}
inline void CGGetGangList::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGGetGangList.gangName)
}
inline ::std::string* CGGetGangList::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGGetGangList.gangName)
  return gangname_;
}
inline ::std::string* CGGetGangList::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGGetGangList::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGGetGangList.gangName)
}

// -------------------------------------------------------------------

// GCGetGangList

// optional int32 listType = 1;
inline bool GCGetGangList::has_listtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGetGangList::set_has_listtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGetGangList::clear_has_listtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGetGangList::clear_listtype() {
  listtype_ = 0;
  clear_has_listtype();
}
inline ::google::protobuf::int32 GCGetGangList::listtype() const {
  // @@protoc_insertion_point(field_get:GCGetGangList.listType)
  return listtype_;
}
inline void GCGetGangList::set_listtype(::google::protobuf::int32 value) {
  set_has_listtype();
  listtype_ = value;
  // @@protoc_insertion_point(field_set:GCGetGangList.listType)
}

// repeated .GangMainInfo gangInfo = 4;
inline int GCGetGangList::ganginfo_size() const {
  return ganginfo_.size();
}
inline void GCGetGangList::clear_ganginfo() {
  ganginfo_.Clear();
}
inline const ::GangMainInfo& GCGetGangList::ganginfo(int index) const {
  // @@protoc_insertion_point(field_get:GCGetGangList.gangInfo)
  return ganginfo_.Get(index);
}
inline ::GangMainInfo* GCGetGangList::mutable_ganginfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetGangList.gangInfo)
  return ganginfo_.Mutable(index);
}
inline ::GangMainInfo* GCGetGangList::add_ganginfo() {
  // @@protoc_insertion_point(field_add:GCGetGangList.gangInfo)
  return ganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangMainInfo >&
GCGetGangList::ganginfo() const {
  // @@protoc_insertion_point(field_list:GCGetGangList.gangInfo)
  return ganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangMainInfo >*
GCGetGangList::mutable_ganginfo() {
  // @@protoc_insertion_point(field_mutable_list:GCGetGangList.gangInfo)
  return &ganginfo_;
}

// optional int32 result = 5;
inline bool GCGetGangList::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGetGangList::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGetGangList::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGetGangList::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGetGangList::result() const {
  // @@protoc_insertion_point(field_get:GCGetGangList.result)
  return result_;
}
inline void GCGetGangList::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGetGangList.result)
}

// repeated int64 joinGangIdList = 6;
inline int GCGetGangList::joingangidlist_size() const {
  return joingangidlist_.size();
}
inline void GCGetGangList::clear_joingangidlist() {
  joingangidlist_.Clear();
}
inline ::google::protobuf::int64 GCGetGangList::joingangidlist(int index) const {
  // @@protoc_insertion_point(field_get:GCGetGangList.joinGangIdList)
  return joingangidlist_.Get(index);
}
inline void GCGetGangList::set_joingangidlist(int index, ::google::protobuf::int64 value) {
  joingangidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCGetGangList.joinGangIdList)
}
inline void GCGetGangList::add_joingangidlist(::google::protobuf::int64 value) {
  joingangidlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCGetGangList.joinGangIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GCGetGangList::joingangidlist() const {
  // @@protoc_insertion_point(field_list:GCGetGangList.joinGangIdList)
  return joingangidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GCGetGangList::mutable_joingangidlist() {
  // @@protoc_insertion_point(field_mutable_list:GCGetGangList.joinGangIdList)
  return &joingangidlist_;
}

// optional int64 lastQuitTime = 7;
inline bool GCGetGangList::has_lastquittime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCGetGangList::set_has_lastquittime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCGetGangList::clear_has_lastquittime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCGetGangList::clear_lastquittime() {
  lastquittime_ = GOOGLE_LONGLONG(0);
  clear_has_lastquittime();
}
inline ::google::protobuf::int64 GCGetGangList::lastquittime() const {
  // @@protoc_insertion_point(field_get:GCGetGangList.lastQuitTime)
  return lastquittime_;
}
inline void GCGetGangList::set_lastquittime(::google::protobuf::int64 value) {
  set_has_lastquittime();
  lastquittime_ = value;
  // @@protoc_insertion_point(field_set:GCGetGangList.lastQuitTime)
}

// -------------------------------------------------------------------

// CGGangOperate

// optional int32 operateType = 1;
inline bool CGGangOperate::has_operatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGangOperate::set_has_operatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGangOperate::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGangOperate::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 CGGangOperate::operatetype() const {
  // @@protoc_insertion_point(field_get:CGGangOperate.operateType)
  return operatetype_;
}
inline void CGGangOperate::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:CGGangOperate.operateType)
}

// optional int64 gangId = 2;
inline bool CGGangOperate::has_gangid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGangOperate::set_has_gangid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGangOperate::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGangOperate::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 CGGangOperate::gangid() const {
  // @@protoc_insertion_point(field_get:CGGangOperate.gangId)
  return gangid_;
}
inline void CGGangOperate::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:CGGangOperate.gangId)
}

// optional string bulletin = 3;
inline bool CGGangOperate::has_bulletin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGGangOperate::set_has_bulletin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGGangOperate::clear_has_bulletin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGGangOperate::clear_bulletin() {
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_->clear();
  }
  clear_has_bulletin();
}
inline const ::std::string& CGGangOperate::bulletin() const {
  // @@protoc_insertion_point(field_get:CGGangOperate.bulletin)
  return *bulletin_;
}
inline void CGGangOperate::set_bulletin(const ::std::string& value) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(value);
  // @@protoc_insertion_point(field_set:CGGangOperate.bulletin)
}
inline void CGGangOperate::set_bulletin(const char* value) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGGangOperate.bulletin)
}
inline void CGGangOperate::set_bulletin(const char* value, size_t size) {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  bulletin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGGangOperate.bulletin)
}
inline ::std::string* CGGangOperate::mutable_bulletin() {
  set_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bulletin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGGangOperate.bulletin)
  return bulletin_;
}
inline ::std::string* CGGangOperate::release_bulletin() {
  clear_has_bulletin();
  if (bulletin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bulletin_;
    bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGGangOperate::set_allocated_bulletin(::std::string* bulletin) {
  if (bulletin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bulletin_;
  }
  if (bulletin) {
    set_has_bulletin();
    bulletin_ = bulletin;
  } else {
    clear_has_bulletin();
    bulletin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGGangOperate.bulletin)
}

// optional int64 bePlayerId = 4;
inline bool CGGangOperate::has_beplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGGangOperate::set_has_beplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGGangOperate::clear_has_beplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGGangOperate::clear_beplayerid() {
  beplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_beplayerid();
}
inline ::google::protobuf::int64 CGGangOperate::beplayerid() const {
  // @@protoc_insertion_point(field_get:CGGangOperate.bePlayerId)
  return beplayerid_;
}
inline void CGGangOperate::set_beplayerid(::google::protobuf::int64 value) {
  set_has_beplayerid();
  beplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGGangOperate.bePlayerId)
}

// optional int32 bePlayerType = 5;
inline bool CGGangOperate::has_beplayertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGGangOperate::set_has_beplayertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGGangOperate::clear_has_beplayertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGGangOperate::clear_beplayertype() {
  beplayertype_ = 0;
  clear_has_beplayertype();
}
inline ::google::protobuf::int32 CGGangOperate::beplayertype() const {
  // @@protoc_insertion_point(field_get:CGGangOperate.bePlayerType)
  return beplayertype_;
}
inline void CGGangOperate::set_beplayertype(::google::protobuf::int32 value) {
  set_has_beplayertype();
  beplayertype_ = value;
  // @@protoc_insertion_point(field_set:CGGangOperate.bePlayerType)
}

// repeated int64 gangIdList = 6;
inline int CGGangOperate::gangidlist_size() const {
  return gangidlist_.size();
}
inline void CGGangOperate::clear_gangidlist() {
  gangidlist_.Clear();
}
inline ::google::protobuf::int64 CGGangOperate::gangidlist(int index) const {
  // @@protoc_insertion_point(field_get:CGGangOperate.gangIdList)
  return gangidlist_.Get(index);
}
inline void CGGangOperate::set_gangidlist(int index, ::google::protobuf::int64 value) {
  gangidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGGangOperate.gangIdList)
}
inline void CGGangOperate::add_gangidlist(::google::protobuf::int64 value) {
  gangidlist_.Add(value);
  // @@protoc_insertion_point(field_add:CGGangOperate.gangIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CGGangOperate::gangidlist() const {
  // @@protoc_insertion_point(field_list:CGGangOperate.gangIdList)
  return gangidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CGGangOperate::mutable_gangidlist() {
  // @@protoc_insertion_point(field_mutable_list:CGGangOperate.gangIdList)
  return &gangidlist_;
}

// -------------------------------------------------------------------

// GCGangOperate

// optional int32 operateType = 1;
inline bool GCGangOperate::has_operatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangOperate::set_has_operatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangOperate::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangOperate::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 GCGangOperate::operatetype() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.operateType)
  return operatetype_;
}
inline void GCGangOperate::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.operateType)
}

// optional int32 result = 2;
inline bool GCGangOperate::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGangOperate::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGangOperate::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGangOperate::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGangOperate::result() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.result)
  return result_;
}
inline void GCGangOperate::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.result)
}

// optional .GangMainInfo gangInfo = 3;
inline bool GCGangOperate::has_ganginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGangOperate::set_has_ganginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGangOperate::clear_has_ganginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGangOperate::clear_ganginfo() {
  if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
  clear_has_ganginfo();
}
inline const ::GangMainInfo& GCGangOperate::ganginfo() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.gangInfo)
  return ganginfo_ != NULL ? *ganginfo_ : *default_instance_->ganginfo_;
}
inline ::GangMainInfo* GCGangOperate::mutable_ganginfo() {
  set_has_ganginfo();
  if (ganginfo_ == NULL) ganginfo_ = new ::GangMainInfo;
  // @@protoc_insertion_point(field_mutable:GCGangOperate.gangInfo)
  return ganginfo_;
}
inline ::GangMainInfo* GCGangOperate::release_ganginfo() {
  clear_has_ganginfo();
  ::GangMainInfo* temp = ganginfo_;
  ganginfo_ = NULL;
  return temp;
}
inline void GCGangOperate::set_allocated_ganginfo(::GangMainInfo* ganginfo) {
  delete ganginfo_;
  ganginfo_ = ganginfo;
  if (ganginfo) {
    set_has_ganginfo();
  } else {
    clear_has_ganginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCGangOperate.gangInfo)
}

// repeated .GangMemberInfo memberInfo = 4;
inline int GCGangOperate::memberinfo_size() const {
  return memberinfo_.size();
}
inline void GCGangOperate::clear_memberinfo() {
  memberinfo_.Clear();
}
inline const ::GangMemberInfo& GCGangOperate::memberinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCGangOperate.memberInfo)
  return memberinfo_.Get(index);
}
inline ::GangMemberInfo* GCGangOperate::mutable_memberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCGangOperate.memberInfo)
  return memberinfo_.Mutable(index);
}
inline ::GangMemberInfo* GCGangOperate::add_memberinfo() {
  // @@protoc_insertion_point(field_add:GCGangOperate.memberInfo)
  return memberinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >&
GCGangOperate::memberinfo() const {
  // @@protoc_insertion_point(field_list:GCGangOperate.memberInfo)
  return memberinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangMemberInfo >*
GCGangOperate::mutable_memberinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCGangOperate.memberInfo)
  return &memberinfo_;
}

// optional int64 quitMemberId = 5;
inline bool GCGangOperate::has_quitmemberid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCGangOperate::set_has_quitmemberid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCGangOperate::clear_has_quitmemberid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCGangOperate::clear_quitmemberid() {
  quitmemberid_ = GOOGLE_LONGLONG(0);
  clear_has_quitmemberid();
}
inline ::google::protobuf::int64 GCGangOperate::quitmemberid() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.quitMemberId)
  return quitmemberid_;
}
inline void GCGangOperate::set_quitmemberid(::google::protobuf::int64 value) {
  set_has_quitmemberid();
  quitmemberid_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.quitMemberId)
}

// optional int64 joinGangId = 6;
inline bool GCGangOperate::has_joingangid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCGangOperate::set_has_joingangid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCGangOperate::clear_has_joingangid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCGangOperate::clear_joingangid() {
  joingangid_ = GOOGLE_LONGLONG(0);
  clear_has_joingangid();
}
inline ::google::protobuf::int64 GCGangOperate::joingangid() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.joinGangId)
  return joingangid_;
}
inline void GCGangOperate::set_joingangid(::google::protobuf::int64 value) {
  set_has_joingangid();
  joingangid_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.joinGangId)
}

// repeated int64 joinGangIdList = 7;
inline int GCGangOperate::joingangidlist_size() const {
  return joingangidlist_.size();
}
inline void GCGangOperate::clear_joingangidlist() {
  joingangidlist_.Clear();
}
inline ::google::protobuf::int64 GCGangOperate::joingangidlist(int index) const {
  // @@protoc_insertion_point(field_get:GCGangOperate.joinGangIdList)
  return joingangidlist_.Get(index);
}
inline void GCGangOperate::set_joingangidlist(int index, ::google::protobuf::int64 value) {
  joingangidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCGangOperate.joinGangIdList)
}
inline void GCGangOperate::add_joingangidlist(::google::protobuf::int64 value) {
  joingangidlist_.Add(value);
  // @@protoc_insertion_point(field_add:GCGangOperate.joinGangIdList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GCGangOperate::joingangidlist() const {
  // @@protoc_insertion_point(field_list:GCGangOperate.joinGangIdList)
  return joingangidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GCGangOperate::mutable_joingangidlist() {
  // @@protoc_insertion_point(field_mutable_list:GCGangOperate.joinGangIdList)
  return &joingangidlist_;
}

// optional int64 kickTime = 8;
inline bool GCGangOperate::has_kicktime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCGangOperate::set_has_kicktime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCGangOperate::clear_has_kicktime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCGangOperate::clear_kicktime() {
  kicktime_ = GOOGLE_LONGLONG(0);
  clear_has_kicktime();
}
inline ::google::protobuf::int64 GCGangOperate::kicktime() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.kickTime)
  return kicktime_;
}
inline void GCGangOperate::set_kicktime(::google::protobuf::int64 value) {
  set_has_kicktime();
  kicktime_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.kickTime)
}

// optional int32 isKickMaster = 9;
inline bool GCGangOperate::has_iskickmaster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCGangOperate::set_has_iskickmaster() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCGangOperate::clear_has_iskickmaster() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCGangOperate::clear_iskickmaster() {
  iskickmaster_ = 0;
  clear_has_iskickmaster();
}
inline ::google::protobuf::int32 GCGangOperate::iskickmaster() const {
  // @@protoc_insertion_point(field_get:GCGangOperate.isKickMaster)
  return iskickmaster_;
}
inline void GCGangOperate::set_iskickmaster(::google::protobuf::int32 value) {
  set_has_iskickmaster();
  iskickmaster_ = value;
  // @@protoc_insertion_point(field_set:GCGangOperate.isKickMaster)
}

// -------------------------------------------------------------------

// CGGangBuy

// optional int32 request = 1;
inline bool CGGangBuy::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGangBuy::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGangBuy::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGangBuy::clear_request() {
  request_ = 0;
  clear_has_request();
}
inline ::google::protobuf::int32 CGGangBuy::request() const {
  // @@protoc_insertion_point(field_get:CGGangBuy.request)
  return request_;
}
inline void CGGangBuy::set_request(::google::protobuf::int32 value) {
  set_has_request();
  request_ = value;
  // @@protoc_insertion_point(field_set:CGGangBuy.request)
}

// optional int32 buyId = 2;
inline bool CGGangBuy::has_buyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGangBuy::set_has_buyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGangBuy::clear_has_buyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGangBuy::clear_buyid() {
  buyid_ = 0;
  clear_has_buyid();
}
inline ::google::protobuf::int32 CGGangBuy::buyid() const {
  // @@protoc_insertion_point(field_get:CGGangBuy.buyId)
  return buyid_;
}
inline void CGGangBuy::set_buyid(::google::protobuf::int32 value) {
  set_has_buyid();
  buyid_ = value;
  // @@protoc_insertion_point(field_set:CGGangBuy.buyId)
}

// optional int32 buyNum = 3;
inline bool CGGangBuy::has_buynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGGangBuy::set_has_buynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGGangBuy::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGGangBuy::clear_buynum() {
  buynum_ = 0;
  clear_has_buynum();
}
inline ::google::protobuf::int32 CGGangBuy::buynum() const {
  // @@protoc_insertion_point(field_get:CGGangBuy.buyNum)
  return buynum_;
}
inline void CGGangBuy::set_buynum(::google::protobuf::int32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:CGGangBuy.buyNum)
}

// -------------------------------------------------------------------

// GCGangBuy

// optional int32 result = 1;
inline bool GCGangBuy::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangBuy::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangBuy::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangBuy::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGangBuy::result() const {
  // @@protoc_insertion_point(field_get:GCGangBuy.result)
  return result_;
}
inline void GCGangBuy::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGangBuy.result)
}

// optional int32 response = 2;
inline bool GCGangBuy::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGangBuy::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGangBuy::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGangBuy::clear_response() {
  response_ = 0;
  clear_has_response();
}
inline ::google::protobuf::int32 GCGangBuy::response() const {
  // @@protoc_insertion_point(field_get:GCGangBuy.response)
  return response_;
}
inline void GCGangBuy::set_response(::google::protobuf::int32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:GCGangBuy.response)
}

// optional .GangMainInfo gangInfo = 3;
inline bool GCGangBuy::has_ganginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGangBuy::set_has_ganginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGangBuy::clear_has_ganginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGangBuy::clear_ganginfo() {
  if (ganginfo_ != NULL) ganginfo_->::GangMainInfo::Clear();
  clear_has_ganginfo();
}
inline const ::GangMainInfo& GCGangBuy::ganginfo() const {
  // @@protoc_insertion_point(field_get:GCGangBuy.gangInfo)
  return ganginfo_ != NULL ? *ganginfo_ : *default_instance_->ganginfo_;
}
inline ::GangMainInfo* GCGangBuy::mutable_ganginfo() {
  set_has_ganginfo();
  if (ganginfo_ == NULL) ganginfo_ = new ::GangMainInfo;
  // @@protoc_insertion_point(field_mutable:GCGangBuy.gangInfo)
  return ganginfo_;
}
inline ::GangMainInfo* GCGangBuy::release_ganginfo() {
  clear_has_ganginfo();
  ::GangMainInfo* temp = ganginfo_;
  ganginfo_ = NULL;
  return temp;
}
inline void GCGangBuy::set_allocated_ganginfo(::GangMainInfo* ganginfo) {
  delete ganginfo_;
  ganginfo_ = ganginfo;
  if (ganginfo) {
    set_has_ganginfo();
  } else {
    clear_has_ganginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCGangBuy.gangInfo)
}

// optional .BuildingInfo buildInfo = 4;
inline bool GCGangBuy::has_buildinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCGangBuy::set_has_buildinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCGangBuy::clear_has_buildinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCGangBuy::clear_buildinfo() {
  if (buildinfo_ != NULL) buildinfo_->::BuildingInfo::Clear();
  clear_has_buildinfo();
}
inline const ::BuildingInfo& GCGangBuy::buildinfo() const {
  // @@protoc_insertion_point(field_get:GCGangBuy.buildInfo)
  return buildinfo_ != NULL ? *buildinfo_ : *default_instance_->buildinfo_;
}
inline ::BuildingInfo* GCGangBuy::mutable_buildinfo() {
  set_has_buildinfo();
  if (buildinfo_ == NULL) buildinfo_ = new ::BuildingInfo;
  // @@protoc_insertion_point(field_mutable:GCGangBuy.buildInfo)
  return buildinfo_;
}
inline ::BuildingInfo* GCGangBuy::release_buildinfo() {
  clear_has_buildinfo();
  ::BuildingInfo* temp = buildinfo_;
  buildinfo_ = NULL;
  return temp;
}
inline void GCGangBuy::set_allocated_buildinfo(::BuildingInfo* buildinfo) {
  delete buildinfo_;
  buildinfo_ = buildinfo;
  if (buildinfo) {
    set_has_buildinfo();
  } else {
    clear_has_buildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCGangBuy.buildInfo)
}

// -------------------------------------------------------------------

// CGGangFight

// optional int32 operate = 1;
inline bool CGGangFight::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGangFight::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGangFight::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGangFight::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGGangFight::operate() const {
  // @@protoc_insertion_point(field_get:CGGangFight.operate)
  return operate_;
}
inline void CGGangFight::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGGangFight.operate)
}

// optional int32 mapId = 2;
inline bool CGGangFight::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGangFight::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGangFight::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGangFight::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 CGGangFight::mapid() const {
  // @@protoc_insertion_point(field_get:CGGangFight.mapId)
  return mapid_;
}
inline void CGGangFight::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CGGangFight.mapId)
}

// -------------------------------------------------------------------

// GangInfo4Map

// optional int32 mapId = 1;
inline bool GangInfo4Map::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GangInfo4Map::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GangInfo4Map::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GangInfo4Map::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 GangInfo4Map::mapid() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.mapId)
  return mapid_;
}
inline void GangInfo4Map::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:GangInfo4Map.mapId)
}

// optional .GangMainInfo holdGangInfo = 2;
inline bool GangInfo4Map::has_holdganginfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GangInfo4Map::set_has_holdganginfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GangInfo4Map::clear_has_holdganginfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GangInfo4Map::clear_holdganginfo() {
  if (holdganginfo_ != NULL) holdganginfo_->::GangMainInfo::Clear();
  clear_has_holdganginfo();
}
inline const ::GangMainInfo& GangInfo4Map::holdganginfo() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.holdGangInfo)
  return holdganginfo_ != NULL ? *holdganginfo_ : *default_instance_->holdganginfo_;
}
inline ::GangMainInfo* GangInfo4Map::mutable_holdganginfo() {
  set_has_holdganginfo();
  if (holdganginfo_ == NULL) holdganginfo_ = new ::GangMainInfo;
  // @@protoc_insertion_point(field_mutable:GangInfo4Map.holdGangInfo)
  return holdganginfo_;
}
inline ::GangMainInfo* GangInfo4Map::release_holdganginfo() {
  clear_has_holdganginfo();
  ::GangMainInfo* temp = holdganginfo_;
  holdganginfo_ = NULL;
  return temp;
}
inline void GangInfo4Map::set_allocated_holdganginfo(::GangMainInfo* holdganginfo) {
  delete holdganginfo_;
  holdganginfo_ = holdganginfo;
  if (holdganginfo) {
    set_has_holdganginfo();
  } else {
    clear_has_holdganginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GangInfo4Map.holdGangInfo)
}

// repeated .GangMainInfo applyGangInfo = 3;
inline int GangInfo4Map::applyganginfo_size() const {
  return applyganginfo_.size();
}
inline void GangInfo4Map::clear_applyganginfo() {
  applyganginfo_.Clear();
}
inline const ::GangMainInfo& GangInfo4Map::applyganginfo(int index) const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.applyGangInfo)
  return applyganginfo_.Get(index);
}
inline ::GangMainInfo* GangInfo4Map::mutable_applyganginfo(int index) {
  // @@protoc_insertion_point(field_mutable:GangInfo4Map.applyGangInfo)
  return applyganginfo_.Mutable(index);
}
inline ::GangMainInfo* GangInfo4Map::add_applyganginfo() {
  // @@protoc_insertion_point(field_add:GangInfo4Map.applyGangInfo)
  return applyganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangMainInfo >&
GangInfo4Map::applyganginfo() const {
  // @@protoc_insertion_point(field_list:GangInfo4Map.applyGangInfo)
  return applyganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangMainInfo >*
GangInfo4Map::mutable_applyganginfo() {
  // @@protoc_insertion_point(field_mutable_list:GangInfo4Map.applyGangInfo)
  return &applyganginfo_;
}

// optional int32 applyState = 4;
inline bool GangInfo4Map::has_applystate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GangInfo4Map::set_has_applystate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GangInfo4Map::clear_has_applystate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GangInfo4Map::clear_applystate() {
  applystate_ = 0;
  clear_has_applystate();
}
inline ::google::protobuf::int32 GangInfo4Map::applystate() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.applyState)
  return applystate_;
}
inline void GangInfo4Map::set_applystate(::google::protobuf::int32 value) {
  set_has_applystate();
  applystate_ = value;
  // @@protoc_insertion_point(field_set:GangInfo4Map.applyState)
}

// optional int32 enterFightState = 5;
inline bool GangInfo4Map::has_enterfightstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GangInfo4Map::set_has_enterfightstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GangInfo4Map::clear_has_enterfightstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GangInfo4Map::clear_enterfightstate() {
  enterfightstate_ = 0;
  clear_has_enterfightstate();
}
inline ::google::protobuf::int32 GangInfo4Map::enterfightstate() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.enterFightState)
  return enterfightstate_;
}
inline void GangInfo4Map::set_enterfightstate(::google::protobuf::int32 value) {
  set_has_enterfightstate();
  enterfightstate_ = value;
  // @@protoc_insertion_point(field_set:GangInfo4Map.enterFightState)
}

// optional int32 countOfMap = 6;
inline bool GangInfo4Map::has_countofmap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GangInfo4Map::set_has_countofmap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GangInfo4Map::clear_has_countofmap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GangInfo4Map::clear_countofmap() {
  countofmap_ = 0;
  clear_has_countofmap();
}
inline ::google::protobuf::int32 GangInfo4Map::countofmap() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.countOfMap)
  return countofmap_;
}
inline void GangInfo4Map::set_countofmap(::google::protobuf::int32 value) {
  set_has_countofmap();
  countofmap_ = value;
  // @@protoc_insertion_point(field_set:GangInfo4Map.countOfMap)
}

// optional int32 firstOfMap = 7;
inline bool GangInfo4Map::has_firstofmap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GangInfo4Map::set_has_firstofmap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GangInfo4Map::clear_has_firstofmap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GangInfo4Map::clear_firstofmap() {
  firstofmap_ = 0;
  clear_has_firstofmap();
}
inline ::google::protobuf::int32 GangInfo4Map::firstofmap() const {
  // @@protoc_insertion_point(field_get:GangInfo4Map.firstOfMap)
  return firstofmap_;
}
inline void GangInfo4Map::set_firstofmap(::google::protobuf::int32 value) {
  set_has_firstofmap();
  firstofmap_ = value;
  // @@protoc_insertion_point(field_set:GangInfo4Map.firstOfMap)
}

// -------------------------------------------------------------------

// GCGangFight

// optional int32 operate = 1;
inline bool GCGangFight::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangFight::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangFight::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangFight::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCGangFight::operate() const {
  // @@protoc_insertion_point(field_get:GCGangFight.operate)
  return operate_;
}
inline void GCGangFight::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.operate)
}

// optional int32 result = 2;
inline bool GCGangFight::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGangFight::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGangFight::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGangFight::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGangFight::result() const {
  // @@protoc_insertion_point(field_get:GCGangFight.result)
  return result_;
}
inline void GCGangFight::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.result)
}

// optional int32 flag = 3;
inline bool GCGangFight::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCGangFight::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCGangFight::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCGangFight::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCGangFight::flag() const {
  // @@protoc_insertion_point(field_get:GCGangFight.flag)
  return flag_;
}
inline void GCGangFight::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.flag)
}

// optional int32 lastTime = 4;
inline bool GCGangFight::has_lasttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCGangFight::set_has_lasttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCGangFight::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCGangFight::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 GCGangFight::lasttime() const {
  // @@protoc_insertion_point(field_get:GCGangFight.lastTime)
  return lasttime_;
}
inline void GCGangFight::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.lastTime)
}

// optional int64 puid = 5;
inline bool GCGangFight::has_puid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCGangFight::set_has_puid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCGangFight::clear_has_puid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCGangFight::clear_puid() {
  puid_ = GOOGLE_LONGLONG(0);
  clear_has_puid();
}
inline ::google::protobuf::int64 GCGangFight::puid() const {
  // @@protoc_insertion_point(field_get:GCGangFight.puid)
  return puid_;
}
inline void GCGangFight::set_puid(::google::protobuf::int64 value) {
  set_has_puid();
  puid_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.puid)
}

// optional int64 flaguId = 6;
inline bool GCGangFight::has_flaguid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCGangFight::set_has_flaguid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCGangFight::clear_has_flaguid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCGangFight::clear_flaguid() {
  flaguid_ = GOOGLE_LONGLONG(0);
  clear_has_flaguid();
}
inline ::google::protobuf::int64 GCGangFight::flaguid() const {
  // @@protoc_insertion_point(field_get:GCGangFight.flaguId)
  return flaguid_;
}
inline void GCGangFight::set_flaguid(::google::protobuf::int64 value) {
  set_has_flaguid();
  flaguid_ = value;
  // @@protoc_insertion_point(field_set:GCGangFight.flaguId)
}

// repeated .GangInfo4Map gangInfo4Map = 7;
inline int GCGangFight::ganginfo4map_size() const {
  return ganginfo4map_.size();
}
inline void GCGangFight::clear_ganginfo4map() {
  ganginfo4map_.Clear();
}
inline const ::GangInfo4Map& GCGangFight::ganginfo4map(int index) const {
  // @@protoc_insertion_point(field_get:GCGangFight.gangInfo4Map)
  return ganginfo4map_.Get(index);
}
inline ::GangInfo4Map* GCGangFight::mutable_ganginfo4map(int index) {
  // @@protoc_insertion_point(field_mutable:GCGangFight.gangInfo4Map)
  return ganginfo4map_.Mutable(index);
}
inline ::GangInfo4Map* GCGangFight::add_ganginfo4map() {
  // @@protoc_insertion_point(field_add:GCGangFight.gangInfo4Map)
  return ganginfo4map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GangInfo4Map >&
GCGangFight::ganginfo4map() const {
  // @@protoc_insertion_point(field_list:GCGangFight.gangInfo4Map)
  return ganginfo4map_;
}
inline ::google::protobuf::RepeatedPtrField< ::GangInfo4Map >*
GCGangFight::mutable_ganginfo4map() {
  // @@protoc_insertion_point(field_mutable_list:GCGangFight.gangInfo4Map)
  return &ganginfo4map_;
}

// repeated .EntryStringInt pointMap = 8;
inline int GCGangFight::pointmap_size() const {
  return pointmap_.size();
}
inline void GCGangFight::clear_pointmap() {
  pointmap_.Clear();
}
inline const ::EntryStringInt& GCGangFight::pointmap(int index) const {
  // @@protoc_insertion_point(field_get:GCGangFight.pointMap)
  return pointmap_.Get(index);
}
inline ::EntryStringInt* GCGangFight::mutable_pointmap(int index) {
  // @@protoc_insertion_point(field_mutable:GCGangFight.pointMap)
  return pointmap_.Mutable(index);
}
inline ::EntryStringInt* GCGangFight::add_pointmap() {
  // @@protoc_insertion_point(field_add:GCGangFight.pointMap)
  return pointmap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntryStringInt >&
GCGangFight::pointmap() const {
  // @@protoc_insertion_point(field_list:GCGangFight.pointMap)
  return pointmap_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntryStringInt >*
GCGangFight::mutable_pointmap() {
  // @@protoc_insertion_point(field_mutable_list:GCGangFight.pointMap)
  return &pointmap_;
}

// -------------------------------------------------------------------

// CGEnterGang

// optional int64 playerId = 1;
inline bool CGEnterGang::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGEnterGang::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGEnterGang::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGEnterGang::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGEnterGang::playerid() const {
  // @@protoc_insertion_point(field_get:CGEnterGang.playerId)
  return playerid_;
}
inline void CGEnterGang::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGEnterGang.playerId)
}

// -------------------------------------------------------------------

// GCEnterGang

// optional int32 result = 1;
inline bool GCEnterGang::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCEnterGang::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCEnterGang::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCEnterGang::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCEnterGang::result() const {
  // @@protoc_insertion_point(field_get:GCEnterGang.result)
  return result_;
}
inline void GCEnterGang::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCEnterGang.result)
}

// -------------------------------------------------------------------

// GCGangRobberNum

// optional int32 num = 1;
inline bool GCGangRobberNum::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangRobberNum::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangRobberNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangRobberNum::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GCGangRobberNum::num() const {
  // @@protoc_insertion_point(field_get:GCGangRobberNum.num)
  return num_;
}
inline void GCGangRobberNum::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:GCGangRobberNum.num)
}

// optional int32 numTotal = 2;
inline bool GCGangRobberNum::has_numtotal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGangRobberNum::set_has_numtotal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGangRobberNum::clear_has_numtotal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGangRobberNum::clear_numtotal() {
  numtotal_ = 0;
  clear_has_numtotal();
}
inline ::google::protobuf::int32 GCGangRobberNum::numtotal() const {
  // @@protoc_insertion_point(field_get:GCGangRobberNum.numTotal)
  return numtotal_;
}
inline void GCGangRobberNum::set_numtotal(::google::protobuf::int32 value) {
  set_has_numtotal();
  numtotal_ = value;
  // @@protoc_insertion_point(field_set:GCGangRobberNum.numTotal)
}

// -------------------------------------------------------------------

// GCGangActiveOpen

// optional int32 type = 1;
inline bool GCGangActiveOpen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangActiveOpen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangActiveOpen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangActiveOpen::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCGangActiveOpen::type() const {
  // @@protoc_insertion_point(field_get:GCGangActiveOpen.type)
  return type_;
}
inline void GCGangActiveOpen::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCGangActiveOpen.type)
}

// optional int32 languageId = 2;
inline bool GCGangActiveOpen::has_languageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCGangActiveOpen::set_has_languageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCGangActiveOpen::clear_has_languageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCGangActiveOpen::clear_languageid() {
  languageid_ = 0;
  clear_has_languageid();
}
inline ::google::protobuf::int32 GCGangActiveOpen::languageid() const {
  // @@protoc_insertion_point(field_get:GCGangActiveOpen.languageId)
  return languageid_;
}
inline void GCGangActiveOpen::set_languageid(::google::protobuf::int32 value) {
  set_has_languageid();
  languageid_ = value;
  // @@protoc_insertion_point(field_set:GCGangActiveOpen.languageId)
}

// repeated string param = 3;
inline int GCGangActiveOpen::param_size() const {
  return param_.size();
}
inline void GCGangActiveOpen::clear_param() {
  param_.Clear();
}
inline const ::std::string& GCGangActiveOpen::param(int index) const {
  // @@protoc_insertion_point(field_get:GCGangActiveOpen.param)
  return param_.Get(index);
}
inline ::std::string* GCGangActiveOpen::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:GCGangActiveOpen.param)
  return param_.Mutable(index);
}
inline void GCGangActiveOpen::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GCGangActiveOpen.param)
  param_.Mutable(index)->assign(value);
}
inline void GCGangActiveOpen::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGangActiveOpen.param)
}
inline void GCGangActiveOpen::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGangActiveOpen.param)
}
inline ::std::string* GCGangActiveOpen::add_param() {
  return param_.Add();
}
inline void GCGangActiveOpen::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GCGangActiveOpen.param)
}
inline void GCGangActiveOpen::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GCGangActiveOpen.param)
}
inline void GCGangActiveOpen::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GCGangActiveOpen.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCGangActiveOpen::param() const {
  // @@protoc_insertion_point(field_list:GCGangActiveOpen.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCGangActiveOpen::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:GCGangActiveOpen.param)
  return &param_;
}

// -------------------------------------------------------------------

// CGMuteGangMember

// optional int32 type = 1;
inline bool CGMuteGangMember::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGMuteGangMember::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGMuteGangMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGMuteGangMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGMuteGangMember::type() const {
  // @@protoc_insertion_point(field_get:CGMuteGangMember.type)
  return type_;
}
inline void CGMuteGangMember::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGMuteGangMember.type)
}

// optional int64 plyerId = 2;
inline bool CGMuteGangMember::has_plyerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGMuteGangMember::set_has_plyerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGMuteGangMember::clear_has_plyerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGMuteGangMember::clear_plyerid() {
  plyerid_ = GOOGLE_LONGLONG(0);
  clear_has_plyerid();
}
inline ::google::protobuf::int64 CGMuteGangMember::plyerid() const {
  // @@protoc_insertion_point(field_get:CGMuteGangMember.plyerId)
  return plyerid_;
}
inline void CGMuteGangMember::set_plyerid(::google::protobuf::int64 value) {
  set_has_plyerid();
  plyerid_ = value;
  // @@protoc_insertion_point(field_set:CGMuteGangMember.plyerId)
}

// -------------------------------------------------------------------

// GCMuteGangMember

// optional int32 result = 1;
inline bool GCMuteGangMember::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMuteGangMember::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMuteGangMember::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMuteGangMember::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCMuteGangMember::result() const {
  // @@protoc_insertion_point(field_get:GCMuteGangMember.result)
  return result_;
}
inline void GCMuteGangMember::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCMuteGangMember.result)
}

// optional int32 type = 2;
inline bool GCMuteGangMember::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCMuteGangMember::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCMuteGangMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCMuteGangMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCMuteGangMember::type() const {
  // @@protoc_insertion_point(field_get:GCMuteGangMember.type)
  return type_;
}
inline void GCMuteGangMember::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCMuteGangMember.type)
}

// optional int64 playerId = 3;
inline bool GCMuteGangMember::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCMuteGangMember::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCMuteGangMember::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCMuteGangMember::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCMuteGangMember::playerid() const {
  // @@protoc_insertion_point(field_get:GCMuteGangMember.playerId)
  return playerid_;
}
inline void GCMuteGangMember::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCMuteGangMember.playerId)
}

// -------------------------------------------------------------------

// GCMuteGangList

// repeated int64 mute = 1;
inline int GCMuteGangList::mute_size() const {
  return mute_.size();
}
inline void GCMuteGangList::clear_mute() {
  mute_.Clear();
}
inline ::google::protobuf::int64 GCMuteGangList::mute(int index) const {
  // @@protoc_insertion_point(field_get:GCMuteGangList.mute)
  return mute_.Get(index);
}
inline void GCMuteGangList::set_mute(int index, ::google::protobuf::int64 value) {
  mute_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCMuteGangList.mute)
}
inline void GCMuteGangList::add_mute(::google::protobuf::int64 value) {
  mute_.Add(value);
  // @@protoc_insertion_point(field_add:GCMuteGangList.mute)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GCMuteGangList::mute() const {
  // @@protoc_insertion_point(field_list:GCMuteGangList.mute)
  return mute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GCMuteGangList::mutable_mute() {
  // @@protoc_insertion_point(field_mutable_list:GCMuteGangList.mute)
  return &mute_;
}

// -------------------------------------------------------------------

// CGInviteToGang

// optional int64 playerId = 1;
inline bool CGInviteToGang::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGInviteToGang::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGInviteToGang::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGInviteToGang::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGInviteToGang::playerid() const {
  // @@protoc_insertion_point(field_get:CGInviteToGang.playerId)
  return playerid_;
}
inline void CGInviteToGang::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGInviteToGang.playerId)
}

// -------------------------------------------------------------------

// GCBeInvitedToGang

// optional int64 gangId = 1;
inline bool GCBeInvitedToGang::has_gangid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCBeInvitedToGang::set_has_gangid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCBeInvitedToGang::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCBeInvitedToGang::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 GCBeInvitedToGang::gangid() const {
  // @@protoc_insertion_point(field_get:GCBeInvitedToGang.gangId)
  return gangid_;
}
inline void GCBeInvitedToGang::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:GCBeInvitedToGang.gangId)
}

// optional string gangName = 2;
inline bool GCBeInvitedToGang::has_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCBeInvitedToGang::set_has_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCBeInvitedToGang::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCBeInvitedToGang::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& GCBeInvitedToGang::gangname() const {
  // @@protoc_insertion_point(field_get:GCBeInvitedToGang.gangName)
  return *gangname_;
}
inline void GCBeInvitedToGang::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:GCBeInvitedToGang.gangName)
}
inline void GCBeInvitedToGang::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCBeInvitedToGang.gangName)
}
inline void GCBeInvitedToGang::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCBeInvitedToGang.gangName)
}
inline ::std::string* GCBeInvitedToGang::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCBeInvitedToGang.gangName)
  return gangname_;
}
inline ::std::string* GCBeInvitedToGang::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCBeInvitedToGang::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCBeInvitedToGang.gangName)
}

// -------------------------------------------------------------------

// CGBeBeInvitedToGang

// optional int32 operateType = 1;
inline bool CGBeBeInvitedToGang::has_operatetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGBeBeInvitedToGang::set_has_operatetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGBeBeInvitedToGang::clear_has_operatetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGBeBeInvitedToGang::clear_operatetype() {
  operatetype_ = 0;
  clear_has_operatetype();
}
inline ::google::protobuf::int32 CGBeBeInvitedToGang::operatetype() const {
  // @@protoc_insertion_point(field_get:CGBeBeInvitedToGang.operateType)
  return operatetype_;
}
inline void CGBeBeInvitedToGang::set_operatetype(::google::protobuf::int32 value) {
  set_has_operatetype();
  operatetype_ = value;
  // @@protoc_insertion_point(field_set:CGBeBeInvitedToGang.operateType)
}

// optional int64 gangId = 2;
inline bool CGBeBeInvitedToGang::has_gangid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGBeBeInvitedToGang::set_has_gangid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGBeBeInvitedToGang::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGBeBeInvitedToGang::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 CGBeBeInvitedToGang::gangid() const {
  // @@protoc_insertion_point(field_get:CGBeBeInvitedToGang.gangId)
  return gangid_;
}
inline void CGBeBeInvitedToGang::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:CGBeBeInvitedToGang.gangId)
}

// -------------------------------------------------------------------

// GCApplyNotice

// optional int64 playerId = 1;
inline bool GCApplyNotice::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCApplyNotice::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCApplyNotice::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCApplyNotice::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCApplyNotice::playerid() const {
  // @@protoc_insertion_point(field_get:GCApplyNotice.playerId)
  return playerid_;
}
inline void GCApplyNotice::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCApplyNotice.playerId)
}

// -------------------------------------------------------------------

// CGHasGang

// optional int32 playerId = 1;
inline bool CGHasGang::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGHasGang::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGHasGang::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGHasGang::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 CGHasGang::playerid() const {
  // @@protoc_insertion_point(field_get:CGHasGang.playerId)
  return playerid_;
}
inline void CGHasGang::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGHasGang.playerId)
}

// -------------------------------------------------------------------

// GCHasGang

// optional int32 result = 1;
inline bool GCHasGang::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCHasGang::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCHasGang::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCHasGang::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCHasGang::result() const {
  // @@protoc_insertion_point(field_get:GCHasGang.result)
  return result_;
}
inline void GCHasGang::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCHasGang.result)
}

// -------------------------------------------------------------------

// CGGangChangeName

// optional int64 gangId = 1;
inline bool CGGangChangeName::has_gangid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGangChangeName::set_has_gangid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGangChangeName::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGangChangeName::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 CGGangChangeName::gangid() const {
  // @@protoc_insertion_point(field_get:CGGangChangeName.gangId)
  return gangid_;
}
inline void CGGangChangeName::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:CGGangChangeName.gangId)
}

// optional string gangTotem = 2;
inline bool CGGangChangeName::has_gangtotem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGangChangeName::set_has_gangtotem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGangChangeName::clear_has_gangtotem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGangChangeName::clear_gangtotem() {
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_->clear();
  }
  clear_has_gangtotem();
}
inline const ::std::string& CGGangChangeName::gangtotem() const {
  // @@protoc_insertion_point(field_get:CGGangChangeName.gangTotem)
  return *gangtotem_;
}
inline void CGGangChangeName::set_gangtotem(const ::std::string& value) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(value);
  // @@protoc_insertion_point(field_set:CGGangChangeName.gangTotem)
}
inline void CGGangChangeName::set_gangtotem(const char* value) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGGangChangeName.gangTotem)
}
inline void CGGangChangeName::set_gangtotem(const char* value, size_t size) {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  gangtotem_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGGangChangeName.gangTotem)
}
inline ::std::string* CGGangChangeName::mutable_gangtotem() {
  set_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangtotem_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGGangChangeName.gangTotem)
  return gangtotem_;
}
inline ::std::string* CGGangChangeName::release_gangtotem() {
  clear_has_gangtotem();
  if (gangtotem_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangtotem_;
    gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGGangChangeName::set_allocated_gangtotem(::std::string* gangtotem) {
  if (gangtotem_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangtotem_;
  }
  if (gangtotem) {
    set_has_gangtotem();
    gangtotem_ = gangtotem;
  } else {
    clear_has_gangtotem();
    gangtotem_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGGangChangeName.gangTotem)
}

// optional string gangName = 3;
inline bool CGGangChangeName::has_gangname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGGangChangeName::set_has_gangname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGGangChangeName::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGGangChangeName::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& CGGangChangeName::gangname() const {
  // @@protoc_insertion_point(field_get:CGGangChangeName.gangName)
  return *gangname_;
}
inline void CGGangChangeName::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:CGGangChangeName.gangName)
}
inline void CGGangChangeName::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGGangChangeName.gangName)
}
inline void CGGangChangeName::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGGangChangeName.gangName)
}
inline ::std::string* CGGangChangeName::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGGangChangeName.gangName)
  return gangname_;
}
inline ::std::string* CGGangChangeName::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGGangChangeName::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGGangChangeName.gangName)
}

// -------------------------------------------------------------------

// GCGangChangeName

// optional int32 result = 1;
inline bool GCGangChangeName::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGangChangeName::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGangChangeName::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGangChangeName::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGangChangeName::result() const {
  // @@protoc_insertion_point(field_get:GCGangChangeName.result)
  return result_;
}
inline void GCGangChangeName::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGangChangeName.result)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GangMessage_2eproto__INCLUDED
