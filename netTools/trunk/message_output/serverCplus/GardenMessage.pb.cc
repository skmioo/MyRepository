// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GardenMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GardenMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GardenHerbalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GardenHerbalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GardenFieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GardenFieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGardenOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGardenOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGardenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGardenOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGardenMakeMedicine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGardenMakeMedicine_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGardenMakeMedicine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGardenMakeMedicine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GardenMessage_2eproto() {
  protobuf_AddDesc_GardenMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GardenMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GardenHerbalInfo_descriptor_ = file->message_type(0);
  static const int GardenHerbalInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, herbalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, herballv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, completetime_),
  };
  GardenHerbalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GardenHerbalInfo_descriptor_,
      GardenHerbalInfo::default_instance_,
      GardenHerbalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenHerbalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GardenHerbalInfo));
  GardenFieldInfo_descriptor_ = file->message_type(1);
  static const int GardenFieldInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenFieldInfo, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenFieldInfo, herbalinfo_),
  };
  GardenFieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GardenFieldInfo_descriptor_,
      GardenFieldInfo::default_instance_,
      GardenFieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenFieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GardenFieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GardenFieldInfo));
  GCGardenOperateResult_descriptor_ = file->message_type(2);
  static const int GCGardenOperateResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenOperateResult, fieldinfo_),
  };
  GCGardenOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGardenOperateResult_descriptor_,
      GCGardenOperateResult::default_instance_,
      GCGardenOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGardenOperateResult));
  CGGardenOperate_descriptor_ = file->message_type(3);
  static const int CGGardenOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenOperate, seedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenOperate, fieldid_),
  };
  CGGardenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGardenOperate_descriptor_,
      CGGardenOperate::default_instance_,
      CGGardenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGardenOperate));
  CGGardenMakeMedicine_descriptor_ = file->message_type(4);
  static const int CGGardenMakeMedicine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenMakeMedicine, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenMakeMedicine, fireid_),
  };
  CGGardenMakeMedicine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGardenMakeMedicine_descriptor_,
      CGGardenMakeMedicine::default_instance_,
      CGGardenMakeMedicine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenMakeMedicine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGardenMakeMedicine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGardenMakeMedicine));
  GCGardenMakeMedicine_descriptor_ = file->message_type(5);
  static const int GCGardenMakeMedicine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenMakeMedicine, result_),
  };
  GCGardenMakeMedicine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGardenMakeMedicine_descriptor_,
      GCGardenMakeMedicine::default_instance_,
      GCGardenMakeMedicine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenMakeMedicine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGardenMakeMedicine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGardenMakeMedicine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GardenMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GardenHerbalInfo_descriptor_, &GardenHerbalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GardenFieldInfo_descriptor_, &GardenFieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGardenOperateResult_descriptor_, &GCGardenOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGardenOperate_descriptor_, &CGGardenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGardenMakeMedicine_descriptor_, &CGGardenMakeMedicine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGardenMakeMedicine_descriptor_, &GCGardenMakeMedicine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GardenMessage_2eproto() {
  delete GardenHerbalInfo::default_instance_;
  delete GardenHerbalInfo_reflection_;
  delete GardenFieldInfo::default_instance_;
  delete GardenFieldInfo_reflection_;
  delete GCGardenOperateResult::default_instance_;
  delete GCGardenOperateResult_reflection_;
  delete CGGardenOperate::default_instance_;
  delete CGGardenOperate_reflection_;
  delete CGGardenMakeMedicine::default_instance_;
  delete CGGardenMakeMedicine_reflection_;
  delete GCGardenMakeMedicine::default_instance_;
  delete GCGardenMakeMedicine_reflection_;
}

void protobuf_AddDesc_GardenMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023GardenMessage.proto\"]\n\020GardenHerbalInf"
    "o\022\020\n\010herbalID\030\001 \001(\005\022\020\n\010herbalLv\030\002 \001(\005\022\017\n"
    "\007quality\030\003 \001(\005\022\024\n\014completeTime\030\004 \001(\003\"I\n\017"
    "GardenFieldInfo\022\017\n\007fieldID\030\001 \001(\005\022%\n\nherb"
    "alInfo\030\002 \001(\0132\021.GardenHerbalInfo\"M\n\025GCGar"
    "denOperateResult\022\017\n\007operate\030\001 \001(\005\022#\n\tfie"
    "ldInfo\030\002 \003(\0132\020.GardenFieldInfo\"C\n\017CGGard"
    "enOperate\022\017\n\007operate\030\001 \001(\005\022\016\n\006seedID\030\002 \001"
    "(\005\022\017\n\007fieldID\030\003 \001(\005\"8\n\024CGGardenMakeMedic"
    "ine\022\020\n\010configID\030\001 \001(\005\022\016\n\006fireID\030\002 \001(\005\"&\n"
    "\024GCGardenMakeMedicine\022\016\n\006result\030\001 \001(\005B\031\n"
    "\027com.mile.common.message", 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GardenMessage.proto", &protobuf_RegisterTypes);
  GardenHerbalInfo::default_instance_ = new GardenHerbalInfo();
  GardenFieldInfo::default_instance_ = new GardenFieldInfo();
  GCGardenOperateResult::default_instance_ = new GCGardenOperateResult();
  CGGardenOperate::default_instance_ = new CGGardenOperate();
  CGGardenMakeMedicine::default_instance_ = new CGGardenMakeMedicine();
  GCGardenMakeMedicine::default_instance_ = new GCGardenMakeMedicine();
  GardenHerbalInfo::default_instance_->InitAsDefaultInstance();
  GardenFieldInfo::default_instance_->InitAsDefaultInstance();
  GCGardenOperateResult::default_instance_->InitAsDefaultInstance();
  CGGardenOperate::default_instance_->InitAsDefaultInstance();
  CGGardenMakeMedicine::default_instance_->InitAsDefaultInstance();
  GCGardenMakeMedicine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GardenMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GardenMessage_2eproto {
  StaticDescriptorInitializer_GardenMessage_2eproto() {
    protobuf_AddDesc_GardenMessage_2eproto();
  }
} static_descriptor_initializer_GardenMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GardenHerbalInfo::kHerbalIDFieldNumber;
const int GardenHerbalInfo::kHerbalLvFieldNumber;
const int GardenHerbalInfo::kQualityFieldNumber;
const int GardenHerbalInfo::kCompleteTimeFieldNumber;
#endif  // !_MSC_VER

GardenHerbalInfo::GardenHerbalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GardenHerbalInfo)
}

void GardenHerbalInfo::InitAsDefaultInstance() {
}

GardenHerbalInfo::GardenHerbalInfo(const GardenHerbalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GardenHerbalInfo)
}

void GardenHerbalInfo::SharedCtor() {
  _cached_size_ = 0;
  herbalid_ = 0;
  herballv_ = 0;
  quality_ = 0;
  completetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GardenHerbalInfo::~GardenHerbalInfo() {
  // @@protoc_insertion_point(destructor:GardenHerbalInfo)
  SharedDtor();
}

void GardenHerbalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GardenHerbalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GardenHerbalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GardenHerbalInfo_descriptor_;
}

const GardenHerbalInfo& GardenHerbalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

GardenHerbalInfo* GardenHerbalInfo::default_instance_ = NULL;

GardenHerbalInfo* GardenHerbalInfo::New() const {
  return new GardenHerbalInfo;
}

void GardenHerbalInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GardenHerbalInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(herbalid_, quality_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GardenHerbalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GardenHerbalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 herbalID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herbalid_)));
          set_has_herbalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_herbalLv;
        break;
      }

      // optional int32 herbalLv = 2;
      case 2: {
        if (tag == 16) {
         parse_herbalLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &herballv_)));
          set_has_herballv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (tag == 24) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_completeTime;
        break;
      }

      // optional int64 completeTime = 4;
      case 4: {
        if (tag == 32) {
         parse_completeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &completetime_)));
          set_has_completetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GardenHerbalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GardenHerbalInfo)
  return false;
#undef DO_
}

void GardenHerbalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GardenHerbalInfo)
  // optional int32 herbalID = 1;
  if (has_herbalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->herbalid(), output);
  }

  // optional int32 herbalLv = 2;
  if (has_herballv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->herballv(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int64 completeTime = 4;
  if (has_completetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->completetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GardenHerbalInfo)
}

::google::protobuf::uint8* GardenHerbalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GardenHerbalInfo)
  // optional int32 herbalID = 1;
  if (has_herbalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->herbalid(), target);
  }

  // optional int32 herbalLv = 2;
  if (has_herballv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->herballv(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int64 completeTime = 4;
  if (has_completetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->completetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GardenHerbalInfo)
  return target;
}

int GardenHerbalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 herbalID = 1;
    if (has_herbalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herbalid());
    }

    // optional int32 herbalLv = 2;
    if (has_herballv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->herballv());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 completeTime = 4;
    if (has_completetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->completetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GardenHerbalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GardenHerbalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GardenHerbalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GardenHerbalInfo::MergeFrom(const GardenHerbalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herbalid()) {
      set_herbalid(from.herbalid());
    }
    if (from.has_herballv()) {
      set_herballv(from.herballv());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_completetime()) {
      set_completetime(from.completetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GardenHerbalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GardenHerbalInfo::CopyFrom(const GardenHerbalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GardenHerbalInfo::IsInitialized() const {

  return true;
}

void GardenHerbalInfo::Swap(GardenHerbalInfo* other) {
  if (other != this) {
    std::swap(herbalid_, other->herbalid_);
    std::swap(herballv_, other->herballv_);
    std::swap(quality_, other->quality_);
    std::swap(completetime_, other->completetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GardenHerbalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GardenHerbalInfo_descriptor_;
  metadata.reflection = GardenHerbalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GardenFieldInfo::kFieldIDFieldNumber;
const int GardenFieldInfo::kHerbalInfoFieldNumber;
#endif  // !_MSC_VER

GardenFieldInfo::GardenFieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GardenFieldInfo)
}

void GardenFieldInfo::InitAsDefaultInstance() {
  herbalinfo_ = const_cast< ::GardenHerbalInfo*>(&::GardenHerbalInfo::default_instance());
}

GardenFieldInfo::GardenFieldInfo(const GardenFieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GardenFieldInfo)
}

void GardenFieldInfo::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = 0;
  herbalinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GardenFieldInfo::~GardenFieldInfo() {
  // @@protoc_insertion_point(destructor:GardenFieldInfo)
  SharedDtor();
}

void GardenFieldInfo::SharedDtor() {
  if (this != default_instance_) {
    delete herbalinfo_;
  }
}

void GardenFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GardenFieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GardenFieldInfo_descriptor_;
}

const GardenFieldInfo& GardenFieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

GardenFieldInfo* GardenFieldInfo::default_instance_ = NULL;

GardenFieldInfo* GardenFieldInfo::New() const {
  return new GardenFieldInfo;
}

void GardenFieldInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    fieldid_ = 0;
    if (has_herbalinfo()) {
      if (herbalinfo_ != NULL) herbalinfo_->::GardenHerbalInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GardenFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GardenFieldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fieldID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_herbalInfo;
        break;
      }

      // optional .GardenHerbalInfo herbalInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_herbalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herbalinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GardenFieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GardenFieldInfo)
  return false;
#undef DO_
}

void GardenFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GardenFieldInfo)
  // optional int32 fieldID = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fieldid(), output);
  }

  // optional .GardenHerbalInfo herbalInfo = 2;
  if (has_herbalinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herbalinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GardenFieldInfo)
}

::google::protobuf::uint8* GardenFieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GardenFieldInfo)
  // optional int32 fieldID = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fieldid(), target);
  }

  // optional .GardenHerbalInfo herbalInfo = 2;
  if (has_herbalinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herbalinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GardenFieldInfo)
  return target;
}

int GardenFieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fieldID = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldid());
    }

    // optional .GardenHerbalInfo herbalInfo = 2;
    if (has_herbalinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herbalinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GardenFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GardenFieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GardenFieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GardenFieldInfo::MergeFrom(const GardenFieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_herbalinfo()) {
      mutable_herbalinfo()->::GardenHerbalInfo::MergeFrom(from.herbalinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GardenFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GardenFieldInfo::CopyFrom(const GardenFieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GardenFieldInfo::IsInitialized() const {

  return true;
}

void GardenFieldInfo::Swap(GardenFieldInfo* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(herbalinfo_, other->herbalinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GardenFieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GardenFieldInfo_descriptor_;
  metadata.reflection = GardenFieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGardenOperateResult::kOperateFieldNumber;
const int GCGardenOperateResult::kFieldInfoFieldNumber;
#endif  // !_MSC_VER

GCGardenOperateResult::GCGardenOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGardenOperateResult)
}

void GCGardenOperateResult::InitAsDefaultInstance() {
}

GCGardenOperateResult::GCGardenOperateResult(const GCGardenOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGardenOperateResult)
}

void GCGardenOperateResult::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGardenOperateResult::~GCGardenOperateResult() {
  // @@protoc_insertion_point(destructor:GCGardenOperateResult)
  SharedDtor();
}

void GCGardenOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGardenOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGardenOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGardenOperateResult_descriptor_;
}

const GCGardenOperateResult& GCGardenOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

GCGardenOperateResult* GCGardenOperateResult::default_instance_ = NULL;

GCGardenOperateResult* GCGardenOperateResult::New() const {
  return new GCGardenOperateResult;
}

void GCGardenOperateResult::Clear() {
  operate_ = 0;
  fieldinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGardenOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGardenOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fieldInfo;
        break;
      }

      // repeated .GardenFieldInfo fieldInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_fieldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fieldInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGardenOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGardenOperateResult)
  return false;
#undef DO_
}

void GCGardenOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGardenOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .GardenFieldInfo fieldInfo = 2;
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fieldinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGardenOperateResult)
}

::google::protobuf::uint8* GCGardenOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGardenOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .GardenFieldInfo fieldInfo = 2;
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fieldinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGardenOperateResult)
  return target;
}

int GCGardenOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  // repeated .GardenFieldInfo fieldInfo = 2;
  total_size += 1 * this->fieldinfo_size();
  for (int i = 0; i < this->fieldinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGardenOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGardenOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGardenOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGardenOperateResult::MergeFrom(const GCGardenOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldinfo_.MergeFrom(from.fieldinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGardenOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGardenOperateResult::CopyFrom(const GCGardenOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGardenOperateResult::IsInitialized() const {

  return true;
}

void GCGardenOperateResult::Swap(GCGardenOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    fieldinfo_.Swap(&other->fieldinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGardenOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGardenOperateResult_descriptor_;
  metadata.reflection = GCGardenOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGardenOperate::kOperateFieldNumber;
const int CGGardenOperate::kSeedIDFieldNumber;
const int CGGardenOperate::kFieldIDFieldNumber;
#endif  // !_MSC_VER

CGGardenOperate::CGGardenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGardenOperate)
}

void CGGardenOperate::InitAsDefaultInstance() {
}

CGGardenOperate::CGGardenOperate(const CGGardenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGardenOperate)
}

void CGGardenOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  seedid_ = 0;
  fieldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGardenOperate::~CGGardenOperate() {
  // @@protoc_insertion_point(destructor:CGGardenOperate)
  SharedDtor();
}

void CGGardenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGardenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGardenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGardenOperate_descriptor_;
}

const CGGardenOperate& CGGardenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

CGGardenOperate* CGGardenOperate::default_instance_ = NULL;

CGGardenOperate* CGGardenOperate::New() const {
  return new CGGardenOperate;
}

void CGGardenOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGardenOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, fieldid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGardenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGardenOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seedID;
        break;
      }

      // optional int32 seedID = 2;
      case 2: {
        if (tag == 16) {
         parse_seedID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seedid_)));
          set_has_seedid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fieldID;
        break;
      }

      // optional int32 fieldID = 3;
      case 3: {
        if (tag == 24) {
         parse_fieldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGardenOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGardenOperate)
  return false;
#undef DO_
}

void CGGardenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGardenOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 seedID = 2;
  if (has_seedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seedid(), output);
  }

  // optional int32 fieldID = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGardenOperate)
}

::google::protobuf::uint8* CGGardenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGardenOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 seedID = 2;
  if (has_seedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seedid(), target);
  }

  // optional int32 fieldID = 3;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGardenOperate)
  return target;
}

int CGGardenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 seedID = 2;
    if (has_seedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seedid());
    }

    // optional int32 fieldID = 3;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGardenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGardenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGardenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGardenOperate::MergeFrom(const CGGardenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_seedid()) {
      set_seedid(from.seedid());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGardenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGardenOperate::CopyFrom(const CGGardenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGardenOperate::IsInitialized() const {

  return true;
}

void CGGardenOperate::Swap(CGGardenOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(seedid_, other->seedid_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGardenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGardenOperate_descriptor_;
  metadata.reflection = CGGardenOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGardenMakeMedicine::kConfigIDFieldNumber;
const int CGGardenMakeMedicine::kFireIDFieldNumber;
#endif  // !_MSC_VER

CGGardenMakeMedicine::CGGardenMakeMedicine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGardenMakeMedicine)
}

void CGGardenMakeMedicine::InitAsDefaultInstance() {
}

CGGardenMakeMedicine::CGGardenMakeMedicine(const CGGardenMakeMedicine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGardenMakeMedicine)
}

void CGGardenMakeMedicine::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0;
  fireid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGardenMakeMedicine::~CGGardenMakeMedicine() {
  // @@protoc_insertion_point(destructor:CGGardenMakeMedicine)
  SharedDtor();
}

void CGGardenMakeMedicine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGardenMakeMedicine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGardenMakeMedicine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGardenMakeMedicine_descriptor_;
}

const CGGardenMakeMedicine& CGGardenMakeMedicine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

CGGardenMakeMedicine* CGGardenMakeMedicine::default_instance_ = NULL;

CGGardenMakeMedicine* CGGardenMakeMedicine::New() const {
  return new CGGardenMakeMedicine;
}

void CGGardenMakeMedicine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGardenMakeMedicine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(configid_, fireid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGardenMakeMedicine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGardenMakeMedicine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fireID;
        break;
      }

      // optional int32 fireID = 2;
      case 2: {
        if (tag == 16) {
         parse_fireID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fireid_)));
          set_has_fireid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGardenMakeMedicine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGardenMakeMedicine)
  return false;
#undef DO_
}

void CGGardenMakeMedicine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGardenMakeMedicine)
  // optional int32 configID = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // optional int32 fireID = 2;
  if (has_fireid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fireid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGardenMakeMedicine)
}

::google::protobuf::uint8* CGGardenMakeMedicine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGardenMakeMedicine)
  // optional int32 configID = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // optional int32 fireID = 2;
  if (has_fireid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fireid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGardenMakeMedicine)
  return target;
}

int CGGardenMakeMedicine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 configID = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // optional int32 fireID = 2;
    if (has_fireid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fireid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGardenMakeMedicine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGardenMakeMedicine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGardenMakeMedicine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGardenMakeMedicine::MergeFrom(const CGGardenMakeMedicine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_fireid()) {
      set_fireid(from.fireid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGardenMakeMedicine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGardenMakeMedicine::CopyFrom(const CGGardenMakeMedicine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGardenMakeMedicine::IsInitialized() const {

  return true;
}

void CGGardenMakeMedicine::Swap(CGGardenMakeMedicine* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(fireid_, other->fireid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGardenMakeMedicine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGardenMakeMedicine_descriptor_;
  metadata.reflection = CGGardenMakeMedicine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGardenMakeMedicine::kResultFieldNumber;
#endif  // !_MSC_VER

GCGardenMakeMedicine::GCGardenMakeMedicine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGardenMakeMedicine)
}

void GCGardenMakeMedicine::InitAsDefaultInstance() {
}

GCGardenMakeMedicine::GCGardenMakeMedicine(const GCGardenMakeMedicine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGardenMakeMedicine)
}

void GCGardenMakeMedicine::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGardenMakeMedicine::~GCGardenMakeMedicine() {
  // @@protoc_insertion_point(destructor:GCGardenMakeMedicine)
  SharedDtor();
}

void GCGardenMakeMedicine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGardenMakeMedicine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGardenMakeMedicine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGardenMakeMedicine_descriptor_;
}

const GCGardenMakeMedicine& GCGardenMakeMedicine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GardenMessage_2eproto();
  return *default_instance_;
}

GCGardenMakeMedicine* GCGardenMakeMedicine::default_instance_ = NULL;

GCGardenMakeMedicine* GCGardenMakeMedicine::New() const {
  return new GCGardenMakeMedicine;
}

void GCGardenMakeMedicine::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGardenMakeMedicine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGardenMakeMedicine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGardenMakeMedicine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGardenMakeMedicine)
  return false;
#undef DO_
}

void GCGardenMakeMedicine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGardenMakeMedicine)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGardenMakeMedicine)
}

::google::protobuf::uint8* GCGardenMakeMedicine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGardenMakeMedicine)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGardenMakeMedicine)
  return target;
}

int GCGardenMakeMedicine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGardenMakeMedicine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGardenMakeMedicine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGardenMakeMedicine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGardenMakeMedicine::MergeFrom(const GCGardenMakeMedicine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGardenMakeMedicine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGardenMakeMedicine::CopyFrom(const GCGardenMakeMedicine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGardenMakeMedicine::IsInitialized() const {

  return true;
}

void GCGardenMakeMedicine::Swap(GCGardenMakeMedicine* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGardenMakeMedicine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGardenMakeMedicine_descriptor_;
  metadata.reflection = GCGardenMakeMedicine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
