// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GardenMessage.proto

#ifndef PROTOBUF_GardenMessage_2eproto__INCLUDED
#define PROTOBUF_GardenMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GardenMessage_2eproto();
void protobuf_AssignDesc_GardenMessage_2eproto();
void protobuf_ShutdownFile_GardenMessage_2eproto();

class GardenHerbalInfo;
class GardenFieldInfo;
class GCGardenOperateResult;
class CGGardenOperate;
class CGGardenMakeMedicine;
class GCGardenMakeMedicine;

// ===================================================================

class GardenHerbalInfo : public ::google::protobuf::Message {
 public:
  GardenHerbalInfo();
  virtual ~GardenHerbalInfo();

  GardenHerbalInfo(const GardenHerbalInfo& from);

  inline GardenHerbalInfo& operator=(const GardenHerbalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GardenHerbalInfo& default_instance();

  void Swap(GardenHerbalInfo* other);

  // implements Message ----------------------------------------------

  GardenHerbalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GardenHerbalInfo& from);
  void MergeFrom(const GardenHerbalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 herbalID = 1;
  inline bool has_herbalid() const;
  inline void clear_herbalid();
  static const int kHerbalIDFieldNumber = 1;
  inline ::google::protobuf::int32 herbalid() const;
  inline void set_herbalid(::google::protobuf::int32 value);

  // optional int32 herbalLv = 2;
  inline bool has_herballv() const;
  inline void clear_herballv();
  static const int kHerbalLvFieldNumber = 2;
  inline ::google::protobuf::int32 herballv() const;
  inline void set_herballv(::google::protobuf::int32 value);

  // optional int32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // optional int64 completeTime = 4;
  inline bool has_completetime() const;
  inline void clear_completetime();
  static const int kCompleteTimeFieldNumber = 4;
  inline ::google::protobuf::int64 completetime() const;
  inline void set_completetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GardenHerbalInfo)
 private:
  inline void set_has_herbalid();
  inline void clear_has_herbalid();
  inline void set_has_herballv();
  inline void clear_has_herballv();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_completetime();
  inline void clear_has_completetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 herbalid_;
  ::google::protobuf::int32 herballv_;
  ::google::protobuf::int64 completetime_;
  ::google::protobuf::int32 quality_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static GardenHerbalInfo* default_instance_;
};
// -------------------------------------------------------------------

class GardenFieldInfo : public ::google::protobuf::Message {
 public:
  GardenFieldInfo();
  virtual ~GardenFieldInfo();

  GardenFieldInfo(const GardenFieldInfo& from);

  inline GardenFieldInfo& operator=(const GardenFieldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GardenFieldInfo& default_instance();

  void Swap(GardenFieldInfo* other);

  // implements Message ----------------------------------------------

  GardenFieldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GardenFieldInfo& from);
  void MergeFrom(const GardenFieldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fieldID = 1;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIDFieldNumber = 1;
  inline ::google::protobuf::int32 fieldid() const;
  inline void set_fieldid(::google::protobuf::int32 value);

  // optional .GardenHerbalInfo herbalInfo = 2;
  inline bool has_herbalinfo() const;
  inline void clear_herbalinfo();
  static const int kHerbalInfoFieldNumber = 2;
  inline const ::GardenHerbalInfo& herbalinfo() const;
  inline ::GardenHerbalInfo* mutable_herbalinfo();
  inline ::GardenHerbalInfo* release_herbalinfo();
  inline void set_allocated_herbalinfo(::GardenHerbalInfo* herbalinfo);

  // @@protoc_insertion_point(class_scope:GardenFieldInfo)
 private:
  inline void set_has_fieldid();
  inline void clear_has_fieldid();
  inline void set_has_herbalinfo();
  inline void clear_has_herbalinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GardenHerbalInfo* herbalinfo_;
  ::google::protobuf::int32 fieldid_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static GardenFieldInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCGardenOperateResult : public ::google::protobuf::Message {
 public:
  GCGardenOperateResult();
  virtual ~GCGardenOperateResult();

  GCGardenOperateResult(const GCGardenOperateResult& from);

  inline GCGardenOperateResult& operator=(const GCGardenOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGardenOperateResult& default_instance();

  void Swap(GCGardenOperateResult* other);

  // implements Message ----------------------------------------------

  GCGardenOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGardenOperateResult& from);
  void MergeFrom(const GCGardenOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .GardenFieldInfo fieldInfo = 2;
  inline int fieldinfo_size() const;
  inline void clear_fieldinfo();
  static const int kFieldInfoFieldNumber = 2;
  inline const ::GardenFieldInfo& fieldinfo(int index) const;
  inline ::GardenFieldInfo* mutable_fieldinfo(int index);
  inline ::GardenFieldInfo* add_fieldinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GardenFieldInfo >&
      fieldinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GardenFieldInfo >*
      mutable_fieldinfo();

  // @@protoc_insertion_point(class_scope:GCGardenOperateResult)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GardenFieldInfo > fieldinfo_;
  ::google::protobuf::int32 operate_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGardenOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class CGGardenOperate : public ::google::protobuf::Message {
 public:
  CGGardenOperate();
  virtual ~CGGardenOperate();

  CGGardenOperate(const CGGardenOperate& from);

  inline CGGardenOperate& operator=(const CGGardenOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGardenOperate& default_instance();

  void Swap(CGGardenOperate* other);

  // implements Message ----------------------------------------------

  CGGardenOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGardenOperate& from);
  void MergeFrom(const CGGardenOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 seedID = 2;
  inline bool has_seedid() const;
  inline void clear_seedid();
  static const int kSeedIDFieldNumber = 2;
  inline ::google::protobuf::int32 seedid() const;
  inline void set_seedid(::google::protobuf::int32 value);

  // optional int32 fieldID = 3;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIDFieldNumber = 3;
  inline ::google::protobuf::int32 fieldid() const;
  inline void set_fieldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGardenOperate)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_seedid();
  inline void clear_has_seedid();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 seedid_;
  ::google::protobuf::int32 fieldid_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGardenOperate* default_instance_;
};
// -------------------------------------------------------------------

class CGGardenMakeMedicine : public ::google::protobuf::Message {
 public:
  CGGardenMakeMedicine();
  virtual ~CGGardenMakeMedicine();

  CGGardenMakeMedicine(const CGGardenMakeMedicine& from);

  inline CGGardenMakeMedicine& operator=(const CGGardenMakeMedicine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGardenMakeMedicine& default_instance();

  void Swap(CGGardenMakeMedicine* other);

  // implements Message ----------------------------------------------

  CGGardenMakeMedicine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGardenMakeMedicine& from);
  void MergeFrom(const CGGardenMakeMedicine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 configID = 1;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 1;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // optional int32 fireID = 2;
  inline bool has_fireid() const;
  inline void clear_fireid();
  static const int kFireIDFieldNumber = 2;
  inline ::google::protobuf::int32 fireid() const;
  inline void set_fireid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGardenMakeMedicine)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_fireid();
  inline void clear_has_fireid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 fireid_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGardenMakeMedicine* default_instance_;
};
// -------------------------------------------------------------------

class GCGardenMakeMedicine : public ::google::protobuf::Message {
 public:
  GCGardenMakeMedicine();
  virtual ~GCGardenMakeMedicine();

  GCGardenMakeMedicine(const GCGardenMakeMedicine& from);

  inline GCGardenMakeMedicine& operator=(const GCGardenMakeMedicine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGardenMakeMedicine& default_instance();

  void Swap(GCGardenMakeMedicine* other);

  // implements Message ----------------------------------------------

  GCGardenMakeMedicine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGardenMakeMedicine& from);
  void MergeFrom(const GCGardenMakeMedicine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCGardenMakeMedicine)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_GardenMessage_2eproto();
  friend void protobuf_AssignDesc_GardenMessage_2eproto();
  friend void protobuf_ShutdownFile_GardenMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGardenMakeMedicine* default_instance_;
};
// ===================================================================


// ===================================================================

// GardenHerbalInfo

// optional int32 herbalID = 1;
inline bool GardenHerbalInfo::has_herbalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GardenHerbalInfo::set_has_herbalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GardenHerbalInfo::clear_has_herbalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GardenHerbalInfo::clear_herbalid() {
  herbalid_ = 0;
  clear_has_herbalid();
}
inline ::google::protobuf::int32 GardenHerbalInfo::herbalid() const {
  // @@protoc_insertion_point(field_get:GardenHerbalInfo.herbalID)
  return herbalid_;
}
inline void GardenHerbalInfo::set_herbalid(::google::protobuf::int32 value) {
  set_has_herbalid();
  herbalid_ = value;
  // @@protoc_insertion_point(field_set:GardenHerbalInfo.herbalID)
}

// optional int32 herbalLv = 2;
inline bool GardenHerbalInfo::has_herballv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GardenHerbalInfo::set_has_herballv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GardenHerbalInfo::clear_has_herballv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GardenHerbalInfo::clear_herballv() {
  herballv_ = 0;
  clear_has_herballv();
}
inline ::google::protobuf::int32 GardenHerbalInfo::herballv() const {
  // @@protoc_insertion_point(field_get:GardenHerbalInfo.herbalLv)
  return herballv_;
}
inline void GardenHerbalInfo::set_herballv(::google::protobuf::int32 value) {
  set_has_herballv();
  herballv_ = value;
  // @@protoc_insertion_point(field_set:GardenHerbalInfo.herbalLv)
}

// optional int32 quality = 3;
inline bool GardenHerbalInfo::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GardenHerbalInfo::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GardenHerbalInfo::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GardenHerbalInfo::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 GardenHerbalInfo::quality() const {
  // @@protoc_insertion_point(field_get:GardenHerbalInfo.quality)
  return quality_;
}
inline void GardenHerbalInfo::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:GardenHerbalInfo.quality)
}

// optional int64 completeTime = 4;
inline bool GardenHerbalInfo::has_completetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GardenHerbalInfo::set_has_completetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GardenHerbalInfo::clear_has_completetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GardenHerbalInfo::clear_completetime() {
  completetime_ = GOOGLE_LONGLONG(0);
  clear_has_completetime();
}
inline ::google::protobuf::int64 GardenHerbalInfo::completetime() const {
  // @@protoc_insertion_point(field_get:GardenHerbalInfo.completeTime)
  return completetime_;
}
inline void GardenHerbalInfo::set_completetime(::google::protobuf::int64 value) {
  set_has_completetime();
  completetime_ = value;
  // @@protoc_insertion_point(field_set:GardenHerbalInfo.completeTime)
}

// -------------------------------------------------------------------

// GardenFieldInfo

// optional int32 fieldID = 1;
inline bool GardenFieldInfo::has_fieldid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GardenFieldInfo::set_has_fieldid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GardenFieldInfo::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GardenFieldInfo::clear_fieldid() {
  fieldid_ = 0;
  clear_has_fieldid();
}
inline ::google::protobuf::int32 GardenFieldInfo::fieldid() const {
  // @@protoc_insertion_point(field_get:GardenFieldInfo.fieldID)
  return fieldid_;
}
inline void GardenFieldInfo::set_fieldid(::google::protobuf::int32 value) {
  set_has_fieldid();
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:GardenFieldInfo.fieldID)
}

// optional .GardenHerbalInfo herbalInfo = 2;
inline bool GardenFieldInfo::has_herbalinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GardenFieldInfo::set_has_herbalinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GardenFieldInfo::clear_has_herbalinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GardenFieldInfo::clear_herbalinfo() {
  if (herbalinfo_ != NULL) herbalinfo_->::GardenHerbalInfo::Clear();
  clear_has_herbalinfo();
}
inline const ::GardenHerbalInfo& GardenFieldInfo::herbalinfo() const {
  // @@protoc_insertion_point(field_get:GardenFieldInfo.herbalInfo)
  return herbalinfo_ != NULL ? *herbalinfo_ : *default_instance_->herbalinfo_;
}
inline ::GardenHerbalInfo* GardenFieldInfo::mutable_herbalinfo() {
  set_has_herbalinfo();
  if (herbalinfo_ == NULL) herbalinfo_ = new ::GardenHerbalInfo;
  // @@protoc_insertion_point(field_mutable:GardenFieldInfo.herbalInfo)
  return herbalinfo_;
}
inline ::GardenHerbalInfo* GardenFieldInfo::release_herbalinfo() {
  clear_has_herbalinfo();
  ::GardenHerbalInfo* temp = herbalinfo_;
  herbalinfo_ = NULL;
  return temp;
}
inline void GardenFieldInfo::set_allocated_herbalinfo(::GardenHerbalInfo* herbalinfo) {
  delete herbalinfo_;
  herbalinfo_ = herbalinfo;
  if (herbalinfo) {
    set_has_herbalinfo();
  } else {
    clear_has_herbalinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GardenFieldInfo.herbalInfo)
}

// -------------------------------------------------------------------

// GCGardenOperateResult

// optional int32 operate = 1;
inline bool GCGardenOperateResult::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGardenOperateResult::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGardenOperateResult::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGardenOperateResult::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCGardenOperateResult::operate() const {
  // @@protoc_insertion_point(field_get:GCGardenOperateResult.operate)
  return operate_;
}
inline void GCGardenOperateResult::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCGardenOperateResult.operate)
}

// repeated .GardenFieldInfo fieldInfo = 2;
inline int GCGardenOperateResult::fieldinfo_size() const {
  return fieldinfo_.size();
}
inline void GCGardenOperateResult::clear_fieldinfo() {
  fieldinfo_.Clear();
}
inline const ::GardenFieldInfo& GCGardenOperateResult::fieldinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCGardenOperateResult.fieldInfo)
  return fieldinfo_.Get(index);
}
inline ::GardenFieldInfo* GCGardenOperateResult::mutable_fieldinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCGardenOperateResult.fieldInfo)
  return fieldinfo_.Mutable(index);
}
inline ::GardenFieldInfo* GCGardenOperateResult::add_fieldinfo() {
  // @@protoc_insertion_point(field_add:GCGardenOperateResult.fieldInfo)
  return fieldinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GardenFieldInfo >&
GCGardenOperateResult::fieldinfo() const {
  // @@protoc_insertion_point(field_list:GCGardenOperateResult.fieldInfo)
  return fieldinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GardenFieldInfo >*
GCGardenOperateResult::mutable_fieldinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCGardenOperateResult.fieldInfo)
  return &fieldinfo_;
}

// -------------------------------------------------------------------

// CGGardenOperate

// optional int32 operate = 1;
inline bool CGGardenOperate::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGardenOperate::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGardenOperate::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGardenOperate::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGGardenOperate::operate() const {
  // @@protoc_insertion_point(field_get:CGGardenOperate.operate)
  return operate_;
}
inline void CGGardenOperate::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGGardenOperate.operate)
}

// optional int32 seedID = 2;
inline bool CGGardenOperate::has_seedid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGardenOperate::set_has_seedid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGardenOperate::clear_has_seedid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGardenOperate::clear_seedid() {
  seedid_ = 0;
  clear_has_seedid();
}
inline ::google::protobuf::int32 CGGardenOperate::seedid() const {
  // @@protoc_insertion_point(field_get:CGGardenOperate.seedID)
  return seedid_;
}
inline void CGGardenOperate::set_seedid(::google::protobuf::int32 value) {
  set_has_seedid();
  seedid_ = value;
  // @@protoc_insertion_point(field_set:CGGardenOperate.seedID)
}

// optional int32 fieldID = 3;
inline bool CGGardenOperate::has_fieldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGGardenOperate::set_has_fieldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGGardenOperate::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGGardenOperate::clear_fieldid() {
  fieldid_ = 0;
  clear_has_fieldid();
}
inline ::google::protobuf::int32 CGGardenOperate::fieldid() const {
  // @@protoc_insertion_point(field_get:CGGardenOperate.fieldID)
  return fieldid_;
}
inline void CGGardenOperate::set_fieldid(::google::protobuf::int32 value) {
  set_has_fieldid();
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:CGGardenOperate.fieldID)
}

// -------------------------------------------------------------------

// CGGardenMakeMedicine

// optional int32 configID = 1;
inline bool CGGardenMakeMedicine::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGardenMakeMedicine::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGardenMakeMedicine::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGardenMakeMedicine::clear_configid() {
  configid_ = 0;
  clear_has_configid();
}
inline ::google::protobuf::int32 CGGardenMakeMedicine::configid() const {
  // @@protoc_insertion_point(field_get:CGGardenMakeMedicine.configID)
  return configid_;
}
inline void CGGardenMakeMedicine::set_configid(::google::protobuf::int32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:CGGardenMakeMedicine.configID)
}

// optional int32 fireID = 2;
inline bool CGGardenMakeMedicine::has_fireid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGardenMakeMedicine::set_has_fireid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGardenMakeMedicine::clear_has_fireid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGardenMakeMedicine::clear_fireid() {
  fireid_ = 0;
  clear_has_fireid();
}
inline ::google::protobuf::int32 CGGardenMakeMedicine::fireid() const {
  // @@protoc_insertion_point(field_get:CGGardenMakeMedicine.fireID)
  return fireid_;
}
inline void CGGardenMakeMedicine::set_fireid(::google::protobuf::int32 value) {
  set_has_fireid();
  fireid_ = value;
  // @@protoc_insertion_point(field_set:CGGardenMakeMedicine.fireID)
}

// -------------------------------------------------------------------

// GCGardenMakeMedicine

// optional int32 result = 1;
inline bool GCGardenMakeMedicine::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCGardenMakeMedicine::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCGardenMakeMedicine::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCGardenMakeMedicine::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCGardenMakeMedicine::result() const {
  // @@protoc_insertion_point(field_get:GCGardenMakeMedicine.result)
  return result_;
}
inline void GCGardenMakeMedicine::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCGardenMakeMedicine.result)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GardenMessage_2eproto__INCLUDED
