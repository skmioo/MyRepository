// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GatewayMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GatewayMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateRegistBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateRegistBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gate2LoginLoadPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gate2LoginLoadPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateWReadyPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateWReadyPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* User2GameForwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User2GameForwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game2UserForwardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game2UserForwardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gate2GameInterruptUserSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gate2GameInterruptUserSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gate2GamePlayerLoginout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gate2GamePlayerLoginout_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GatewayMessage_2eproto() {
  protobuf_AddDesc_GatewayMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GatewayMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CodeInfo_descriptor_ = file->message_type(0);
  static const int CodeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, viliditytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, playerid_),
  };
  CodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CodeInfo_descriptor_,
      CodeInfo::default_instance_,
      CodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CodeInfo));
  GateRegist_descriptor_ = file->message_type(1);
  static const int GateRegist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, onlinenum_),
  };
  GateRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRegist_descriptor_,
      GateRegist::default_instance_,
      GateRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRegist));
  GateRegistBack_descriptor_ = file->message_type(2);
  static const int GateRegistBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegistBack, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegistBack, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegistBack, servertype_),
  };
  GateRegistBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateRegistBack_descriptor_,
      GateRegistBack::default_instance_,
      GateRegistBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegistBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateRegistBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateRegistBack));
  Gate2LoginLoadPush_descriptor_ = file->message_type(3);
  static const int Gate2LoginLoadPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2LoginLoadPush, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2LoginLoadPush, playernum_),
  };
  Gate2LoginLoadPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gate2LoginLoadPush_descriptor_,
      Gate2LoginLoadPush::default_instance_,
      Gate2LoginLoadPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2LoginLoadPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2LoginLoadPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gate2LoginLoadPush));
  GateWReadyPush_descriptor_ = file->message_type(4);
  static const int GateWReadyPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateWReadyPush, code_),
  };
  GateWReadyPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GateWReadyPush_descriptor_,
      GateWReadyPush::default_instance_,
      GateWReadyPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateWReadyPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateWReadyPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GateWReadyPush));
  User2GameForwardMessage_descriptor_ = file->message_type(5);
  static const int User2GameForwardMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, innerpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, ip_),
  };
  User2GameForwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User2GameForwardMessage_descriptor_,
      User2GameForwardMessage::default_instance_,
      User2GameForwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User2GameForwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User2GameForwardMessage));
  Game2UserForwardMessage_descriptor_ = file->message_type(6);
  static const int Game2UserForwardMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, allserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, innerpacket_),
  };
  Game2UserForwardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game2UserForwardMessage_descriptor_,
      Game2UserForwardMessage::default_instance_,
      Game2UserForwardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game2UserForwardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game2UserForwardMessage));
  Gate2GameInterruptUserSession_descriptor_ = file->message_type(7);
  static const int Gate2GameInterruptUserSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GameInterruptUserSession, accountid_),
  };
  Gate2GameInterruptUserSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gate2GameInterruptUserSession_descriptor_,
      Gate2GameInterruptUserSession::default_instance_,
      Gate2GameInterruptUserSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GameInterruptUserSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GameInterruptUserSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gate2GameInterruptUserSession));
  Gate2GamePlayerLoginout_descriptor_ = file->message_type(8);
  static const int Gate2GamePlayerLoginout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GamePlayerLoginout, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GamePlayerLoginout, accountid_),
  };
  Gate2GamePlayerLoginout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gate2GamePlayerLoginout_descriptor_,
      Gate2GamePlayerLoginout::default_instance_,
      Gate2GamePlayerLoginout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GamePlayerLoginout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gate2GamePlayerLoginout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gate2GamePlayerLoginout));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GatewayMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CodeInfo_descriptor_, &CodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRegist_descriptor_, &GateRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateRegistBack_descriptor_, &GateRegistBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gate2LoginLoadPush_descriptor_, &Gate2LoginLoadPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GateWReadyPush_descriptor_, &GateWReadyPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User2GameForwardMessage_descriptor_, &User2GameForwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game2UserForwardMessage_descriptor_, &Game2UserForwardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gate2GameInterruptUserSession_descriptor_, &Gate2GameInterruptUserSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gate2GamePlayerLoginout_descriptor_, &Gate2GamePlayerLoginout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GatewayMessage_2eproto() {
  delete CodeInfo::default_instance_;
  delete CodeInfo_reflection_;
  delete GateRegist::default_instance_;
  delete GateRegist_reflection_;
  delete GateRegistBack::default_instance_;
  delete GateRegistBack_reflection_;
  delete Gate2LoginLoadPush::default_instance_;
  delete Gate2LoginLoadPush_reflection_;
  delete GateWReadyPush::default_instance_;
  delete GateWReadyPush_reflection_;
  delete User2GameForwardMessage::default_instance_;
  delete User2GameForwardMessage_reflection_;
  delete Game2UserForwardMessage::default_instance_;
  delete Game2UserForwardMessage_reflection_;
  delete Gate2GameInterruptUserSession::default_instance_;
  delete Gate2GameInterruptUserSession_reflection_;
  delete Gate2GamePlayerLoginout::default_instance_;
  delete Gate2GamePlayerLoginout_reflection_;
}

void protobuf_AddDesc_GatewayMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024GatewayMessage.proto\"w\n\010CodeInfo\022\021\n\tvi"
    "lidCode\030\001 \001(\t\022\021\n\taccountID\030\002 \001(\003\022\024\n\014vili"
    "dityTime\030\003 \001(\003\022\020\n\010platForm\030\004 \001(\t\022\013\n\003uid\030"
    "\005 \001(\t\022\020\n\010playerId\030\006 \001(\003\"K\n\nGateRegist\022\016\n"
    "\006gateId\030\001 \001(\005\022\014\n\004host\030\002 \001(\t\022\014\n\004port\030\003 \001("
    "\005\022\021\n\tonlineNum\030\004 \001(\005\"L\n\016GateRegistBack\022\014"
    "\n\004code\030\001 \001(\005\022\030\n\005infos\030\002 \003(\0132\t.CodeInfo\022\022"
    "\n\nserverType\030\003 \001(\005\"7\n\022Gate2LoginLoadPush"
    "\022\016\n\006gateId\030\001 \002(\005\022\021\n\tplayerNum\030\002 \002(\005\"\036\n\016G"
    "ateWReadyPush\022\014\n\004code\030\001 \002(\005\"s\n\027User2Game"
    "ForwardMessage\022\021\n\taccountId\030\002 \001(\003\022\021\n\tmes"
    "sageId\030\003 \001(\005\022\023\n\013innerPacket\030\004 \001(\014\022\021\n\tvil"
    "idCode\030\005 \001(\t\022\n\n\002ip\030\006 \001(\t\"g\n\027Game2UserFor"
    "wardMessage\022\021\n\tallServer\030\001 \001(\005\022\021\n\taccoun"
    "tId\030\002 \003(\003\022\021\n\tmessageId\030\003 \001(\005\022\023\n\013innerPac"
    "ket\030\004 \001(\014\"2\n\035Gate2GameInterruptUserSessi"
    "on\022\021\n\taccountId\030\002 \001(\003\">\n\027Gate2GamePlayer"
    "Loginout\022\020\n\010playerId\030\001 \001(\003\022\021\n\taccountId\030"
    "\002 \001(\003B\031\n\027com.mile.common.message", 752);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GatewayMessage.proto", &protobuf_RegisterTypes);
  CodeInfo::default_instance_ = new CodeInfo();
  GateRegist::default_instance_ = new GateRegist();
  GateRegistBack::default_instance_ = new GateRegistBack();
  Gate2LoginLoadPush::default_instance_ = new Gate2LoginLoadPush();
  GateWReadyPush::default_instance_ = new GateWReadyPush();
  User2GameForwardMessage::default_instance_ = new User2GameForwardMessage();
  Game2UserForwardMessage::default_instance_ = new Game2UserForwardMessage();
  Gate2GameInterruptUserSession::default_instance_ = new Gate2GameInterruptUserSession();
  Gate2GamePlayerLoginout::default_instance_ = new Gate2GamePlayerLoginout();
  CodeInfo::default_instance_->InitAsDefaultInstance();
  GateRegist::default_instance_->InitAsDefaultInstance();
  GateRegistBack::default_instance_->InitAsDefaultInstance();
  Gate2LoginLoadPush::default_instance_->InitAsDefaultInstance();
  GateWReadyPush::default_instance_->InitAsDefaultInstance();
  User2GameForwardMessage::default_instance_->InitAsDefaultInstance();
  Game2UserForwardMessage::default_instance_->InitAsDefaultInstance();
  Gate2GameInterruptUserSession::default_instance_->InitAsDefaultInstance();
  Gate2GamePlayerLoginout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GatewayMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GatewayMessage_2eproto {
  StaticDescriptorInitializer_GatewayMessage_2eproto() {
    protobuf_AddDesc_GatewayMessage_2eproto();
  }
} static_descriptor_initializer_GatewayMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CodeInfo::kVilidCodeFieldNumber;
const int CodeInfo::kAccountIDFieldNumber;
const int CodeInfo::kVilidityTimeFieldNumber;
const int CodeInfo::kPlatFormFieldNumber;
const int CodeInfo::kUidFieldNumber;
const int CodeInfo::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CodeInfo::CodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CodeInfo)
}

void CodeInfo::InitAsDefaultInstance() {
}

CodeInfo::CodeInfo(const CodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CodeInfo)
}

void CodeInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_LONGLONG(0);
  viliditytime_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CodeInfo::~CodeInfo() {
  // @@protoc_insertion_point(destructor:CodeInfo)
  SharedDtor();
}

void CodeInfo::SharedDtor() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void CodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CodeInfo_descriptor_;
}

const CodeInfo& CodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

CodeInfo* CodeInfo::default_instance_ = NULL;

CodeInfo* CodeInfo::New() const {
  return new CodeInfo;
}

void CodeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CodeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(accountid_, viliditytime_);
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    playerid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vilidCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vilidityTime;
        break;
      }

      // optional int64 vilidityTime = 3;
      case 3: {
        if (tag == 24) {
         parse_vilidityTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viliditytime_)));
          set_has_viliditytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_platForm;
        break;
      }

      // optional string platForm = 4;
      case 4: {
        if (tag == 34) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uid;
        break;
      }

      // optional string uid = 5;
      case 5: {
        if (tag == 42) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playerId;
        break;
      }

      // optional int64 playerId = 6;
      case 6: {
        if (tag == 48) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CodeInfo)
  return false;
#undef DO_
}

void CodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CodeInfo)
  // optional string vilidCode = 1;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vilidcode(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional int64 vilidityTime = 3;
  if (has_viliditytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->viliditytime(), output);
  }

  // optional string platForm = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->platform(), output);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uid(), output);
  }

  // optional int64 playerId = 6;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CodeInfo)
}

::google::protobuf::uint8* CodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CodeInfo)
  // optional string vilidCode = 1;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vilidcode(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional int64 vilidityTime = 3;
  if (has_viliditytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->viliditytime(), target);
  }

  // optional string platForm = 4;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->platform(), target);
  }

  // optional string uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uid(), target);
  }

  // optional int64 playerId = 6;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CodeInfo)
  return target;
}

int CodeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vilidCode = 1;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int64 vilidityTime = 3;
    if (has_viliditytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->viliditytime());
    }

    // optional string platForm = 4;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional int64 playerId = 6;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CodeInfo::MergeFrom(const CodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_viliditytime()) {
      set_viliditytime(from.viliditytime());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodeInfo::CopyFrom(const CodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeInfo::IsInitialized() const {

  return true;
}

void CodeInfo::Swap(CodeInfo* other) {
  if (other != this) {
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(accountid_, other->accountid_);
    std::swap(viliditytime_, other->viliditytime_);
    std::swap(platform_, other->platform_);
    std::swap(uid_, other->uid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CodeInfo_descriptor_;
  metadata.reflection = CodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRegist::kGateIdFieldNumber;
const int GateRegist::kHostFieldNumber;
const int GateRegist::kPortFieldNumber;
const int GateRegist::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

GateRegist::GateRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateRegist)
}

void GateRegist::InitAsDefaultInstance() {
}

GateRegist::GateRegist(const GateRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateRegist)
}

void GateRegist::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gateid_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  onlinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRegist::~GateRegist() {
  // @@protoc_insertion_point(destructor:GateRegist)
  SharedDtor();
}

void GateRegist::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void GateRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRegist_descriptor_;
}

const GateRegist& GateRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

GateRegist* GateRegist::default_instance_ = NULL;

GateRegist* GateRegist::New() const {
  return new GateRegist;
}

void GateRegist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GateRegist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(gateid_, onlinenum_);
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // optional string host = 2;
      case 2: {
        if (tag == 18) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_onlineNum;
        break;
      }

      // optional int32 onlineNum = 4;
      case 4: {
        if (tag == 32) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateRegist)
  return false;
#undef DO_
}

void GateRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateRegist)
  // optional int32 gateId = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateRegist)
}

::google::protobuf::uint8* GateRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateRegist)
  // optional int32 gateId = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateRegist)
  return target;
}

int GateRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gateId = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 onlineNum = 4;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRegist::MergeFrom(const GateRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRegist::CopyFrom(const GateRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRegist::IsInitialized() const {

  return true;
}

void GateRegist::Swap(GateRegist* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRegist_descriptor_;
  metadata.reflection = GateRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateRegistBack::kCodeFieldNumber;
const int GateRegistBack::kInfosFieldNumber;
const int GateRegistBack::kServerTypeFieldNumber;
#endif  // !_MSC_VER

GateRegistBack::GateRegistBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateRegistBack)
}

void GateRegistBack::InitAsDefaultInstance() {
}

GateRegistBack::GateRegistBack(const GateRegistBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateRegistBack)
}

void GateRegistBack::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  servertype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateRegistBack::~GateRegistBack() {
  // @@protoc_insertion_point(destructor:GateRegistBack)
  SharedDtor();
}

void GateRegistBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateRegistBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateRegistBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateRegistBack_descriptor_;
}

const GateRegistBack& GateRegistBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

GateRegistBack* GateRegistBack::default_instance_ = NULL;

GateRegistBack* GateRegistBack::New() const {
  return new GateRegistBack;
}

void GateRegistBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GateRegistBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(code_, servertype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateRegistBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateRegistBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .CodeInfo infos = 2;
      case 2: {
        if (tag == 18) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_serverType;
        break;
      }

      // optional int32 serverType = 3;
      case 3: {
        if (tag == 24) {
         parse_serverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateRegistBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateRegistBack)
  return false;
#undef DO_
}

void GateRegistBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateRegistBack)
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .CodeInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int32 serverType = 3;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateRegistBack)
}

::google::protobuf::uint8* GateRegistBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateRegistBack)
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .CodeInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int32 serverType = 3;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateRegistBack)
  return target;
}

int GateRegistBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 serverType = 3;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

  }
  // repeated .CodeInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateRegistBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateRegistBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateRegistBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateRegistBack::MergeFrom(const GateRegistBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateRegistBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateRegistBack::CopyFrom(const GateRegistBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateRegistBack::IsInitialized() const {

  return true;
}

void GateRegistBack::Swap(GateRegistBack* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    infos_.Swap(&other->infos_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateRegistBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateRegistBack_descriptor_;
  metadata.reflection = GateRegistBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gate2LoginLoadPush::kGateIdFieldNumber;
const int Gate2LoginLoadPush::kPlayerNumFieldNumber;
#endif  // !_MSC_VER

Gate2LoginLoadPush::Gate2LoginLoadPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gate2LoginLoadPush)
}

void Gate2LoginLoadPush::InitAsDefaultInstance() {
}

Gate2LoginLoadPush::Gate2LoginLoadPush(const Gate2LoginLoadPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Gate2LoginLoadPush)
}

void Gate2LoginLoadPush::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gate2LoginLoadPush::~Gate2LoginLoadPush() {
  // @@protoc_insertion_point(destructor:Gate2LoginLoadPush)
  SharedDtor();
}

void Gate2LoginLoadPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gate2LoginLoadPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gate2LoginLoadPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gate2LoginLoadPush_descriptor_;
}

const Gate2LoginLoadPush& Gate2LoginLoadPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

Gate2LoginLoadPush* Gate2LoginLoadPush::default_instance_ = NULL;

Gate2LoginLoadPush* Gate2LoginLoadPush::New() const {
  return new Gate2LoginLoadPush;
}

void Gate2LoginLoadPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gate2LoginLoadPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, playernum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gate2LoginLoadPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gate2LoginLoadPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playerNum;
        break;
      }

      // required int32 playerNum = 2;
      case 2: {
        if (tag == 16) {
         parse_playerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gate2LoginLoadPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gate2LoginLoadPush)
  return false;
#undef DO_
}

void Gate2LoginLoadPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gate2LoginLoadPush)
  // required int32 gateId = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  // required int32 playerNum = 2;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Gate2LoginLoadPush)
}

::google::protobuf::uint8* Gate2LoginLoadPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Gate2LoginLoadPush)
  // required int32 gateId = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  // required int32 playerNum = 2;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gate2LoginLoadPush)
  return target;
}

int Gate2LoginLoadPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateId = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // required int32 playerNum = 2;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gate2LoginLoadPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gate2LoginLoadPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gate2LoginLoadPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gate2LoginLoadPush::MergeFrom(const Gate2LoginLoadPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gate2LoginLoadPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gate2LoginLoadPush::CopyFrom(const Gate2LoginLoadPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate2LoginLoadPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gate2LoginLoadPush::Swap(Gate2LoginLoadPush* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(playernum_, other->playernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gate2LoginLoadPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gate2LoginLoadPush_descriptor_;
  metadata.reflection = Gate2LoginLoadPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GateWReadyPush::kCodeFieldNumber;
#endif  // !_MSC_VER

GateWReadyPush::GateWReadyPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GateWReadyPush)
}

void GateWReadyPush::InitAsDefaultInstance() {
}

GateWReadyPush::GateWReadyPush(const GateWReadyPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GateWReadyPush)
}

void GateWReadyPush::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateWReadyPush::~GateWReadyPush() {
  // @@protoc_insertion_point(destructor:GateWReadyPush)
  SharedDtor();
}

void GateWReadyPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateWReadyPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateWReadyPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateWReadyPush_descriptor_;
}

const GateWReadyPush& GateWReadyPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

GateWReadyPush* GateWReadyPush::default_instance_ = NULL;

GateWReadyPush* GateWReadyPush::New() const {
  return new GateWReadyPush;
}

void GateWReadyPush::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GateWReadyPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GateWReadyPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GateWReadyPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GateWReadyPush)
  return false;
#undef DO_
}

void GateWReadyPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GateWReadyPush)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GateWReadyPush)
}

::google::protobuf::uint8* GateWReadyPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GateWReadyPush)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GateWReadyPush)
  return target;
}

int GateWReadyPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateWReadyPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GateWReadyPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GateWReadyPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GateWReadyPush::MergeFrom(const GateWReadyPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GateWReadyPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateWReadyPush::CopyFrom(const GateWReadyPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateWReadyPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GateWReadyPush::Swap(GateWReadyPush* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GateWReadyPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateWReadyPush_descriptor_;
  metadata.reflection = GateWReadyPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User2GameForwardMessage::kAccountIdFieldNumber;
const int User2GameForwardMessage::kMessageIdFieldNumber;
const int User2GameForwardMessage::kInnerPacketFieldNumber;
const int User2GameForwardMessage::kVilidCodeFieldNumber;
const int User2GameForwardMessage::kIpFieldNumber;
#endif  // !_MSC_VER

User2GameForwardMessage::User2GameForwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User2GameForwardMessage)
}

void User2GameForwardMessage::InitAsDefaultInstance() {
}

User2GameForwardMessage::User2GameForwardMessage(const User2GameForwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User2GameForwardMessage)
}

void User2GameForwardMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  messageid_ = 0;
  innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User2GameForwardMessage::~User2GameForwardMessage() {
  // @@protoc_insertion_point(destructor:User2GameForwardMessage)
  SharedDtor();
}

void User2GameForwardMessage::SharedDtor() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void User2GameForwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User2GameForwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User2GameForwardMessage_descriptor_;
}

const User2GameForwardMessage& User2GameForwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

User2GameForwardMessage* User2GameForwardMessage::default_instance_ = NULL;

User2GameForwardMessage* User2GameForwardMessage::New() const {
  return new User2GameForwardMessage;
}

void User2GameForwardMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    accountid_ = GOOGLE_LONGLONG(0);
    messageid_ = 0;
    if (has_innerpacket()) {
      if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        innerpacket_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User2GameForwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User2GameForwardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 accountId = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messageId;
        break;
      }

      // optional int32 messageId = 3;
      case 3: {
        if (tag == 24) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_innerPacket;
        break;
      }

      // optional bytes innerPacket = 4;
      case 4: {
        if (tag == 34) {
         parse_innerPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 5;
      case 5: {
        if (tag == 42) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User2GameForwardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User2GameForwardMessage)
  return false;
#undef DO_
}

void User2GameForwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User2GameForwardMessage)
  // optional int64 accountId = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional int32 messageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messageid(), output);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->innerpacket(), output);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vilidcode(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User2GameForwardMessage)
}

::google::protobuf::uint8* User2GameForwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User2GameForwardMessage)
  // optional int64 accountId = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional int32 messageId = 3;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messageid(), target);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->innerpacket(), target);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vilidcode(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User2GameForwardMessage)
  return target;
}

int User2GameForwardMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int32 messageId = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bytes innerPacket = 4;
    if (has_innerpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpacket());
    }

    // optional string vilidCode = 5;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User2GameForwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User2GameForwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User2GameForwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User2GameForwardMessage::MergeFrom(const User2GameForwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_innerpacket()) {
      set_innerpacket(from.innerpacket());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User2GameForwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User2GameForwardMessage::CopyFrom(const User2GameForwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User2GameForwardMessage::IsInitialized() const {

  return true;
}

void User2GameForwardMessage::Swap(User2GameForwardMessage* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(messageid_, other->messageid_);
    std::swap(innerpacket_, other->innerpacket_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User2GameForwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User2GameForwardMessage_descriptor_;
  metadata.reflection = User2GameForwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game2UserForwardMessage::kAllServerFieldNumber;
const int Game2UserForwardMessage::kAccountIdFieldNumber;
const int Game2UserForwardMessage::kMessageIdFieldNumber;
const int Game2UserForwardMessage::kInnerPacketFieldNumber;
#endif  // !_MSC_VER

Game2UserForwardMessage::Game2UserForwardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Game2UserForwardMessage)
}

void Game2UserForwardMessage::InitAsDefaultInstance() {
}

Game2UserForwardMessage::Game2UserForwardMessage(const Game2UserForwardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Game2UserForwardMessage)
}

void Game2UserForwardMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allserver_ = 0;
  messageid_ = 0;
  innerpacket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game2UserForwardMessage::~Game2UserForwardMessage() {
  // @@protoc_insertion_point(destructor:Game2UserForwardMessage)
  SharedDtor();
}

void Game2UserForwardMessage::SharedDtor() {
  if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete innerpacket_;
  }
  if (this != default_instance_) {
  }
}

void Game2UserForwardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game2UserForwardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game2UserForwardMessage_descriptor_;
}

const Game2UserForwardMessage& Game2UserForwardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

Game2UserForwardMessage* Game2UserForwardMessage::default_instance_ = NULL;

Game2UserForwardMessage* Game2UserForwardMessage::New() const {
  return new Game2UserForwardMessage;
}

void Game2UserForwardMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Game2UserForwardMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(allserver_, messageid_);
    if (has_innerpacket()) {
      if (innerpacket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        innerpacket_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  accountid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game2UserForwardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Game2UserForwardMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 allServer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allserver_)));
          set_has_allserver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }

      // repeated int64 accountId = 2;
      case 2: {
        if (tag == 16) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_accountid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_accountid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountId;
        if (input->ExpectTag(24)) goto parse_messageId;
        break;
      }

      // optional int32 messageId = 3;
      case 3: {
        if (tag == 24) {
         parse_messageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_innerPacket;
        break;
      }

      // optional bytes innerPacket = 4;
      case 4: {
        if (tag == 34) {
         parse_innerPacket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_innerpacket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Game2UserForwardMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Game2UserForwardMessage)
  return false;
#undef DO_
}

void Game2UserForwardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Game2UserForwardMessage)
  // optional int32 allServer = 1;
  if (has_allserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->allserver(), output);
  }

  // repeated int64 accountId = 2;
  for (int i = 0; i < this->accountid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->accountid(i), output);
  }

  // optional int32 messageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->messageid(), output);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->innerpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Game2UserForwardMessage)
}

::google::protobuf::uint8* Game2UserForwardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Game2UserForwardMessage)
  // optional int32 allServer = 1;
  if (has_allserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->allserver(), target);
  }

  // repeated int64 accountId = 2;
  for (int i = 0; i < this->accountid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->accountid(i), target);
  }

  // optional int32 messageId = 3;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->messageid(), target);
  }

  // optional bytes innerPacket = 4;
  if (has_innerpacket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->innerpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Game2UserForwardMessage)
  return target;
}

int Game2UserForwardMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 allServer = 1;
    if (has_allserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allserver());
    }

    // optional int32 messageId = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional bytes innerPacket = 4;
    if (has_innerpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->innerpacket());
    }

  }
  // repeated int64 accountId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->accountid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->accountid(i));
    }
    total_size += 1 * this->accountid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game2UserForwardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game2UserForwardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game2UserForwardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game2UserForwardMessage::MergeFrom(const Game2UserForwardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountid_.MergeFrom(from.accountid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allserver()) {
      set_allserver(from.allserver());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_innerpacket()) {
      set_innerpacket(from.innerpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game2UserForwardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game2UserForwardMessage::CopyFrom(const Game2UserForwardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game2UserForwardMessage::IsInitialized() const {

  return true;
}

void Game2UserForwardMessage::Swap(Game2UserForwardMessage* other) {
  if (other != this) {
    std::swap(allserver_, other->allserver_);
    accountid_.Swap(&other->accountid_);
    std::swap(messageid_, other->messageid_);
    std::swap(innerpacket_, other->innerpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game2UserForwardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game2UserForwardMessage_descriptor_;
  metadata.reflection = Game2UserForwardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gate2GameInterruptUserSession::kAccountIdFieldNumber;
#endif  // !_MSC_VER

Gate2GameInterruptUserSession::Gate2GameInterruptUserSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gate2GameInterruptUserSession)
}

void Gate2GameInterruptUserSession::InitAsDefaultInstance() {
}

Gate2GameInterruptUserSession::Gate2GameInterruptUserSession(const Gate2GameInterruptUserSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Gate2GameInterruptUserSession)
}

void Gate2GameInterruptUserSession::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gate2GameInterruptUserSession::~Gate2GameInterruptUserSession() {
  // @@protoc_insertion_point(destructor:Gate2GameInterruptUserSession)
  SharedDtor();
}

void Gate2GameInterruptUserSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gate2GameInterruptUserSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gate2GameInterruptUserSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gate2GameInterruptUserSession_descriptor_;
}

const Gate2GameInterruptUserSession& Gate2GameInterruptUserSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

Gate2GameInterruptUserSession* Gate2GameInterruptUserSession::default_instance_ = NULL;

Gate2GameInterruptUserSession* Gate2GameInterruptUserSession::New() const {
  return new Gate2GameInterruptUserSession;
}

void Gate2GameInterruptUserSession::Clear() {
  accountid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gate2GameInterruptUserSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gate2GameInterruptUserSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 accountId = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gate2GameInterruptUserSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gate2GameInterruptUserSession)
  return false;
#undef DO_
}

void Gate2GameInterruptUserSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gate2GameInterruptUserSession)
  // optional int64 accountId = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Gate2GameInterruptUserSession)
}

::google::protobuf::uint8* Gate2GameInterruptUserSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Gate2GameInterruptUserSession)
  // optional int64 accountId = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gate2GameInterruptUserSession)
  return target;
}

int Gate2GameInterruptUserSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gate2GameInterruptUserSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gate2GameInterruptUserSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gate2GameInterruptUserSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gate2GameInterruptUserSession::MergeFrom(const Gate2GameInterruptUserSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gate2GameInterruptUserSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gate2GameInterruptUserSession::CopyFrom(const Gate2GameInterruptUserSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate2GameInterruptUserSession::IsInitialized() const {

  return true;
}

void Gate2GameInterruptUserSession::Swap(Gate2GameInterruptUserSession* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gate2GameInterruptUserSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gate2GameInterruptUserSession_descriptor_;
  metadata.reflection = Gate2GameInterruptUserSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gate2GamePlayerLoginout::kPlayerIdFieldNumber;
const int Gate2GamePlayerLoginout::kAccountIdFieldNumber;
#endif  // !_MSC_VER

Gate2GamePlayerLoginout::Gate2GamePlayerLoginout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gate2GamePlayerLoginout)
}

void Gate2GamePlayerLoginout::InitAsDefaultInstance() {
}

Gate2GamePlayerLoginout::Gate2GamePlayerLoginout(const Gate2GamePlayerLoginout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Gate2GamePlayerLoginout)
}

void Gate2GamePlayerLoginout::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gate2GamePlayerLoginout::~Gate2GamePlayerLoginout() {
  // @@protoc_insertion_point(destructor:Gate2GamePlayerLoginout)
  SharedDtor();
}

void Gate2GamePlayerLoginout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gate2GamePlayerLoginout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gate2GamePlayerLoginout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gate2GamePlayerLoginout_descriptor_;
}

const Gate2GamePlayerLoginout& Gate2GamePlayerLoginout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GatewayMessage_2eproto();
  return *default_instance_;
}

Gate2GamePlayerLoginout* Gate2GamePlayerLoginout::default_instance_ = NULL;

Gate2GamePlayerLoginout* Gate2GamePlayerLoginout::New() const {
  return new Gate2GamePlayerLoginout;
}

void Gate2GamePlayerLoginout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gate2GamePlayerLoginout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, accountid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gate2GamePlayerLoginout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gate2GamePlayerLoginout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountId;
        break;
      }

      // optional int64 accountId = 2;
      case 2: {
        if (tag == 16) {
         parse_accountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gate2GamePlayerLoginout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gate2GamePlayerLoginout)
  return false;
#undef DO_
}

void Gate2GamePlayerLoginout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gate2GamePlayerLoginout)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 accountId = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Gate2GamePlayerLoginout)
}

::google::protobuf::uint8* Gate2GamePlayerLoginout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Gate2GamePlayerLoginout)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 accountId = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gate2GamePlayerLoginout)
  return target;
}

int Gate2GamePlayerLoginout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 accountId = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gate2GamePlayerLoginout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gate2GamePlayerLoginout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gate2GamePlayerLoginout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gate2GamePlayerLoginout::MergeFrom(const Gate2GamePlayerLoginout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gate2GamePlayerLoginout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gate2GamePlayerLoginout::CopyFrom(const Gate2GamePlayerLoginout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gate2GamePlayerLoginout::IsInitialized() const {

  return true;
}

void Gate2GamePlayerLoginout::Swap(Gate2GamePlayerLoginout* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gate2GamePlayerLoginout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gate2GamePlayerLoginout_descriptor_;
  metadata.reflection = Gate2GamePlayerLoginout_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
