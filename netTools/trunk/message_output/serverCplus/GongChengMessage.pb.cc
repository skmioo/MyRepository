// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GongChengMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GongChengMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEnterGongCheng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterGongCheng_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterGongCheng_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterGongCheng_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengChangeSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengChangeSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDonateStick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDonateStick_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDonateStick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDonateStick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOpenGongChengUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOpenGongChengUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenGongChengUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenGongChengUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* GongChengDoorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GongChengDoorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDoorScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDoorScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDoorHurtPercent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDoorHurtPercent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengLongBelong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengLongBelong_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongchengAddScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongchengAddScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGongChengLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGongChengLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBeforeDonateStick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBeforeDonateStick_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBeforeDonateStick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBeforeDonateStick_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengLeaveTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengLeaveTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengScoreCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengScoreCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGongChengReceiveAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGongChengReceiveAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengReceiveAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengReceiveAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGongChengCanStatue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGongChengCanStatue_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengCanStatue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengCanStatue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGongChengGetStatueAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGongChengGetStatueAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengGetStatueAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengGetStatueAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenGongChengEnterBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenGongChengEnterBoard_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGongChengLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGongChengLeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GongChengMessage_2eproto() {
  protobuf_AddDesc_GongChengMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GongChengMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEnterGongCheng_descriptor_ = file->message_type(0);
  static const int CGEnterGongCheng_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGongCheng, playerid_),
  };
  CGEnterGongCheng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterGongCheng_descriptor_,
      CGEnterGongCheng::default_instance_,
      CGEnterGongCheng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGongCheng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterGongCheng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterGongCheng));
  GCEnterGongCheng_descriptor_ = file->message_type(1);
  static const int GCEnterGongCheng_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, doorstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, campstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, resttime_),
  };
  GCEnterGongCheng_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterGongCheng_descriptor_,
      GCEnterGongCheng::default_instance_,
      GCEnterGongCheng_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterGongCheng, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterGongCheng));
  GCGongChengChangeSchedule_descriptor_ = file->message_type(2);
  static const int GCGongChengChangeSchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengChangeSchedule, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengChangeSchedule, resttime_),
  };
  GCGongChengChangeSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengChangeSchedule_descriptor_,
      GCGongChengChangeSchedule::default_instance_,
      GCGongChengChangeSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengChangeSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengChangeSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengChangeSchedule));
  CGDonateStick_descriptor_ = file->message_type(3);
  static const int CGDonateStick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDonateStick, playerid_),
  };
  CGDonateStick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDonateStick_descriptor_,
      CGDonateStick::default_instance_,
      CGDonateStick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDonateStick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDonateStick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDonateStick));
  GCDonateStick_descriptor_ = file->message_type(4);
  static const int GCDonateStick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDonateStick, result_),
  };
  GCDonateStick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDonateStick_descriptor_,
      GCDonateStick::default_instance_,
      GCDonateStick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDonateStick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDonateStick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDonateStick));
  CGOpenGongChengUI_descriptor_ = file->message_type(5);
  static const int CGOpenGongChengUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenGongChengUI, playerid_),
  };
  CGOpenGongChengUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOpenGongChengUI_descriptor_,
      CGOpenGongChengUI::default_instance_,
      CGOpenGongChengUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenGongChengUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOpenGongChengUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOpenGongChengUI));
  GCOpenGongChengUI_descriptor_ = file->message_type(6);
  static const int GCOpenGongChengUI_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengUI, characterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengUI, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengUI, gangname_),
  };
  GCOpenGongChengUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenGongChengUI_descriptor_,
      GCOpenGongChengUI::default_instance_,
      GCOpenGongChengUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenGongChengUI));
  GongChengDoorInfo_descriptor_ = file->message_type(7);
  static const int GongChengDoorInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GongChengDoorInfo, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GongChengDoorInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GongChengDoorInfo, gangdata_),
  };
  GongChengDoorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GongChengDoorInfo_descriptor_,
      GongChengDoorInfo::default_instance_,
      GongChengDoorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GongChengDoorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GongChengDoorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GongChengDoorInfo));
  GCDoorScore_descriptor_ = file->message_type(8);
  static const int GCDoorScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorScore, gangscoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorScore, selfgangscoreinfo_),
  };
  GCDoorScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDoorScore_descriptor_,
      GCDoorScore::default_instance_,
      GCDoorScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDoorScore));
  GCDoorHurtPercent_descriptor_ = file->message_type(9);
  static const int GCDoorHurtPercent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorHurtPercent, ganghurtinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorHurtPercent, selfganghurtinfo_),
  };
  GCDoorHurtPercent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDoorHurtPercent_descriptor_,
      GCDoorHurtPercent::default_instance_,
      GCDoorHurtPercent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorHurtPercent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoorHurtPercent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDoorHurtPercent));
  GCGongChengLongBelong_descriptor_ = file->message_type(10);
  static const int GCGongChengLongBelong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLongBelong, longstickinfo_),
  };
  GCGongChengLongBelong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengLongBelong_descriptor_,
      GCGongChengLongBelong::default_instance_,
      GCGongChengLongBelong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLongBelong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLongBelong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengLongBelong));
  GCGongchengAddScore_descriptor_ = file->message_type(11);
  static const int GCGongchengAddScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongchengAddScore, score_),
  };
  GCGongchengAddScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongchengAddScore_descriptor_,
      GCGongchengAddScore::default_instance_,
      GCGongchengAddScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongchengAddScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongchengAddScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongchengAddScore));
  CGGongChengLeave_descriptor_ = file->message_type(12);
  static const int CGGongChengLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengLeave, playerid_),
  };
  CGGongChengLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGongChengLeave_descriptor_,
      CGGongChengLeave::default_instance_,
      CGGongChengLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGongChengLeave));
  GCGongChengLeave_descriptor_ = file->message_type(13);
  static const int GCGongChengLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeave, result_),
  };
  GCGongChengLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengLeave_descriptor_,
      GCGongChengLeave::default_instance_,
      GCGongChengLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengLeave));
  CGBeforeDonateStick_descriptor_ = file->message_type(14);
  static const int CGBeforeDonateStick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeforeDonateStick, playerid_),
  };
  CGBeforeDonateStick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBeforeDonateStick_descriptor_,
      CGBeforeDonateStick::default_instance_,
      CGBeforeDonateStick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeforeDonateStick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBeforeDonateStick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBeforeDonateStick));
  GCBeforeDonateStick_descriptor_ = file->message_type(15);
  static const int GCBeforeDonateStick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeforeDonateStick, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeforeDonateStick, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeforeDonateStick, cannext_),
  };
  GCBeforeDonateStick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBeforeDonateStick_descriptor_,
      GCBeforeDonateStick::default_instance_,
      GCBeforeDonateStick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeforeDonateStick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBeforeDonateStick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBeforeDonateStick));
  GCGongChengLeaveTime_descriptor_ = file->message_type(16);
  static const int GCGongChengLeaveTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeaveTime, leavetime_),
  };
  GCGongChengLeaveTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengLeaveTime_descriptor_,
      GCGongChengLeaveTime::default_instance_,
      GCGongChengLeaveTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeaveTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeaveTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengLeaveTime));
  GCGongChengScoreCount_descriptor_ = file->message_type(17);
  static const int GCGongChengScoreCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengScoreCount, gangscoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengScoreCount, closetime_),
  };
  GCGongChengScoreCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengScoreCount_descriptor_,
      GCGongChengScoreCount::default_instance_,
      GCGongChengScoreCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengScoreCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengScoreCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengScoreCount));
  CGGongChengReceiveAward_descriptor_ = file->message_type(18);
  static const int CGGongChengReceiveAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengReceiveAward, playerid_),
  };
  CGGongChengReceiveAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGongChengReceiveAward_descriptor_,
      CGGongChengReceiveAward::default_instance_,
      CGGongChengReceiveAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengReceiveAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengReceiveAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGongChengReceiveAward));
  GCGongChengReceiveAward_descriptor_ = file->message_type(19);
  static const int GCGongChengReceiveAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengReceiveAward, result_),
  };
  GCGongChengReceiveAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengReceiveAward_descriptor_,
      GCGongChengReceiveAward::default_instance_,
      GCGongChengReceiveAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengReceiveAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengReceiveAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengReceiveAward));
  CGGongChengCanStatue_descriptor_ = file->message_type(20);
  static const int CGGongChengCanStatue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengCanStatue, playerid_),
  };
  CGGongChengCanStatue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGongChengCanStatue_descriptor_,
      CGGongChengCanStatue::default_instance_,
      CGGongChengCanStatue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengCanStatue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengCanStatue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGongChengCanStatue));
  GCGongChengCanStatue_descriptor_ = file->message_type(21);
  static const int GCGongChengCanStatue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengCanStatue, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengCanStatue, canget_),
  };
  GCGongChengCanStatue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengCanStatue_descriptor_,
      GCGongChengCanStatue::default_instance_,
      GCGongChengCanStatue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengCanStatue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengCanStatue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengCanStatue));
  CGGongChengGetStatueAward_descriptor_ = file->message_type(22);
  static const int CGGongChengGetStatueAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengGetStatueAward, type_),
  };
  CGGongChengGetStatueAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGongChengGetStatueAward_descriptor_,
      CGGongChengGetStatueAward::default_instance_,
      CGGongChengGetStatueAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengGetStatueAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGongChengGetStatueAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGongChengGetStatueAward));
  GCGongChengGetStatueAward_descriptor_ = file->message_type(23);
  static const int GCGongChengGetStatueAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengGetStatueAward, result_),
  };
  GCGongChengGetStatueAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengGetStatueAward_descriptor_,
      GCGongChengGetStatueAward::default_instance_,
      GCGongChengGetStatueAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengGetStatueAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengGetStatueAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengGetStatueAward));
  GCOpenGongChengEnterBoard_descriptor_ = file->message_type(24);
  static const int GCOpenGongChengEnterBoard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengEnterBoard, type_),
  };
  GCOpenGongChengEnterBoard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenGongChengEnterBoard_descriptor_,
      GCOpenGongChengEnterBoard::default_instance_,
      GCOpenGongChengEnterBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengEnterBoard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenGongChengEnterBoard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenGongChengEnterBoard));
  GCGongChengLeader_descriptor_ = file->message_type(25);
  static const int GCGongChengLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeader, flag_),
  };
  GCGongChengLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGongChengLeader_descriptor_,
      GCGongChengLeader::default_instance_,
      GCGongChengLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGongChengLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGongChengLeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GongChengMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterGongCheng_descriptor_, &CGEnterGongCheng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterGongCheng_descriptor_, &GCEnterGongCheng::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengChangeSchedule_descriptor_, &GCGongChengChangeSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDonateStick_descriptor_, &CGDonateStick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDonateStick_descriptor_, &GCDonateStick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOpenGongChengUI_descriptor_, &CGOpenGongChengUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenGongChengUI_descriptor_, &GCOpenGongChengUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GongChengDoorInfo_descriptor_, &GongChengDoorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDoorScore_descriptor_, &GCDoorScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDoorHurtPercent_descriptor_, &GCDoorHurtPercent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengLongBelong_descriptor_, &GCGongChengLongBelong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongchengAddScore_descriptor_, &GCGongchengAddScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGongChengLeave_descriptor_, &CGGongChengLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengLeave_descriptor_, &GCGongChengLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBeforeDonateStick_descriptor_, &CGBeforeDonateStick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBeforeDonateStick_descriptor_, &GCBeforeDonateStick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengLeaveTime_descriptor_, &GCGongChengLeaveTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengScoreCount_descriptor_, &GCGongChengScoreCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGongChengReceiveAward_descriptor_, &CGGongChengReceiveAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengReceiveAward_descriptor_, &GCGongChengReceiveAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGongChengCanStatue_descriptor_, &CGGongChengCanStatue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengCanStatue_descriptor_, &GCGongChengCanStatue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGongChengGetStatueAward_descriptor_, &CGGongChengGetStatueAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengGetStatueAward_descriptor_, &GCGongChengGetStatueAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenGongChengEnterBoard_descriptor_, &GCOpenGongChengEnterBoard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGongChengLeader_descriptor_, &GCGongChengLeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GongChengMessage_2eproto() {
  delete CGEnterGongCheng::default_instance_;
  delete CGEnterGongCheng_reflection_;
  delete GCEnterGongCheng::default_instance_;
  delete GCEnterGongCheng_reflection_;
  delete GCGongChengChangeSchedule::default_instance_;
  delete GCGongChengChangeSchedule_reflection_;
  delete CGDonateStick::default_instance_;
  delete CGDonateStick_reflection_;
  delete GCDonateStick::default_instance_;
  delete GCDonateStick_reflection_;
  delete CGOpenGongChengUI::default_instance_;
  delete CGOpenGongChengUI_reflection_;
  delete GCOpenGongChengUI::default_instance_;
  delete GCOpenGongChengUI_reflection_;
  delete GongChengDoorInfo::default_instance_;
  delete GongChengDoorInfo_reflection_;
  delete GCDoorScore::default_instance_;
  delete GCDoorScore_reflection_;
  delete GCDoorHurtPercent::default_instance_;
  delete GCDoorHurtPercent_reflection_;
  delete GCGongChengLongBelong::default_instance_;
  delete GCGongChengLongBelong_reflection_;
  delete GCGongchengAddScore::default_instance_;
  delete GCGongchengAddScore_reflection_;
  delete CGGongChengLeave::default_instance_;
  delete CGGongChengLeave_reflection_;
  delete GCGongChengLeave::default_instance_;
  delete GCGongChengLeave_reflection_;
  delete CGBeforeDonateStick::default_instance_;
  delete CGBeforeDonateStick_reflection_;
  delete GCBeforeDonateStick::default_instance_;
  delete GCBeforeDonateStick_reflection_;
  delete GCGongChengLeaveTime::default_instance_;
  delete GCGongChengLeaveTime_reflection_;
  delete GCGongChengScoreCount::default_instance_;
  delete GCGongChengScoreCount_reflection_;
  delete CGGongChengReceiveAward::default_instance_;
  delete CGGongChengReceiveAward_reflection_;
  delete GCGongChengReceiveAward::default_instance_;
  delete GCGongChengReceiveAward_reflection_;
  delete CGGongChengCanStatue::default_instance_;
  delete CGGongChengCanStatue_reflection_;
  delete GCGongChengCanStatue::default_instance_;
  delete GCGongChengCanStatue_reflection_;
  delete CGGongChengGetStatueAward::default_instance_;
  delete CGGongChengGetStatueAward_reflection_;
  delete GCGongChengGetStatueAward::default_instance_;
  delete GCGongChengGetStatueAward_reflection_;
  delete GCOpenGongChengEnterBoard::default_instance_;
  delete GCOpenGongChengEnterBoard_reflection_;
  delete GCGongChengLeader::default_instance_;
  delete GCGongChengLeader_reflection_;
}

void protobuf_AddDesc_GongChengMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026GongChengMessage.proto\032\022InnerMessage.p"
    "roto\"$\n\020CGEnterGongCheng\022\020\n\010playerId\030\001 \001"
    "(\003\"i\n\020GCEnterGongCheng\022\016\n\006result\030\001 \001(\005\022\r"
    "\n\005state\030\002 \001(\005\022\021\n\tdoorState\030\003 \001(\005\022\021\n\tcamp"
    "State\030\004 \001(\005\022\020\n\010restTime\030\005 \001(\003\"<\n\031GCGongC"
    "hengChangeSchedule\022\r\n\005state\030\002 \001(\005\022\020\n\010res"
    "tTime\030\005 \001(\003\"!\n\rCGDonateStick\022\020\n\010playerId"
    "\030\001 \001(\003\"\037\n\rGCDonateStick\022\016\n\006result\030\001 \001(\005\""
    "%\n\021CGOpenGongChengUI\022\020\n\010playerId\030\001 \001(\003\"["
    "\n\021GCOpenGongChengUI\022%\n\rcharacterInfo\030\001 \001"
    "(\0132\016.CharacterInfo\022\r\n\005state\030\002 \001(\005\022\020\n\010gan"
    "gName\030\003 \001(\t\"G\n\021GongChengDoorInfo\022\020\n\010gang"
    "Name\030\001 \001(\t\022\016\n\006gangId\030\002 \001(\003\022\020\n\010gangData\030\003"
    " \001(\005\"g\n\013GCDoorScore\022)\n\rgangScoreInfo\030\001 \003"
    "(\0132\022.GongChengDoorInfo\022-\n\021selfGangScoreI"
    "nfo\030\002 \001(\0132\022.GongChengDoorInfo\"k\n\021GCDoorH"
    "urtPercent\022(\n\014gangHurtInfo\030\001 \003(\0132\022.GongC"
    "hengDoorInfo\022,\n\020selfGangHurtInfo\030\002 \001(\0132\022"
    ".GongChengDoorInfo\"B\n\025GCGongChengLongBel"
    "ong\022)\n\rlongStickInfo\030\001 \003(\0132\022.GongChengDo"
    "orInfo\"$\n\023GCGongchengAddScore\022\r\n\005score\030\001"
    " \001(\005\"$\n\020CGGongChengLeave\022\020\n\010playerId\030\001 \001"
    "(\003\"\"\n\020GCGongChengLeave\022\016\n\006result\030\001 \001(\005\"\'"
    "\n\023CGBeforeDonateStick\022\020\n\010playerId\030\001 \001(\003\""
    "F\n\023GCBeforeDonateStick\022\r\n\005money\030\001 \001(\005\022\017\n"
    "\007percent\030\002 \001(\005\022\017\n\007canNext\030\003 \001(\005\")\n\024GCGon"
    "gChengLeaveTime\022\021\n\tleaveTime\030\001 \001(\005\"U\n\025GC"
    "GongChengScoreCount\022)\n\rgangScoreInfo\030\001 \003"
    "(\0132\022.GongChengDoorInfo\022\021\n\tcloseTime\030\003 \001("
    "\005\"+\n\027CGGongChengReceiveAward\022\020\n\010playerId"
    "\030\001 \001(\003\")\n\027GCGongChengReceiveAward\022\016\n\006res"
    "ult\030\001 \001(\005\"(\n\024CGGongChengCanStatue\022\020\n\010pla"
    "yerId\030\001 \001(\003\"6\n\024GCGongChengCanStatue\022\016\n\006r"
    "esult\030\001 \001(\005\022\016\n\006canGet\030\002 \001(\005\")\n\031CGGongChe"
    "ngGetStatueAward\022\014\n\004type\030\001 \001(\005\"+\n\031GCGong"
    "ChengGetStatueAward\022\016\n\006result\030\001 \001(\005\")\n\031G"
    "COpenGongChengEnterBoard\022\014\n\004type\030\001 \001(\005\"!"
    "\n\021GCGongChengLeader\022\014\n\004flag\030\001 \001(\005B\031\n\027com"
    ".mile.common.message", 1540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GongChengMessage.proto", &protobuf_RegisterTypes);
  CGEnterGongCheng::default_instance_ = new CGEnterGongCheng();
  GCEnterGongCheng::default_instance_ = new GCEnterGongCheng();
  GCGongChengChangeSchedule::default_instance_ = new GCGongChengChangeSchedule();
  CGDonateStick::default_instance_ = new CGDonateStick();
  GCDonateStick::default_instance_ = new GCDonateStick();
  CGOpenGongChengUI::default_instance_ = new CGOpenGongChengUI();
  GCOpenGongChengUI::default_instance_ = new GCOpenGongChengUI();
  GongChengDoorInfo::default_instance_ = new GongChengDoorInfo();
  GCDoorScore::default_instance_ = new GCDoorScore();
  GCDoorHurtPercent::default_instance_ = new GCDoorHurtPercent();
  GCGongChengLongBelong::default_instance_ = new GCGongChengLongBelong();
  GCGongchengAddScore::default_instance_ = new GCGongchengAddScore();
  CGGongChengLeave::default_instance_ = new CGGongChengLeave();
  GCGongChengLeave::default_instance_ = new GCGongChengLeave();
  CGBeforeDonateStick::default_instance_ = new CGBeforeDonateStick();
  GCBeforeDonateStick::default_instance_ = new GCBeforeDonateStick();
  GCGongChengLeaveTime::default_instance_ = new GCGongChengLeaveTime();
  GCGongChengScoreCount::default_instance_ = new GCGongChengScoreCount();
  CGGongChengReceiveAward::default_instance_ = new CGGongChengReceiveAward();
  GCGongChengReceiveAward::default_instance_ = new GCGongChengReceiveAward();
  CGGongChengCanStatue::default_instance_ = new CGGongChengCanStatue();
  GCGongChengCanStatue::default_instance_ = new GCGongChengCanStatue();
  CGGongChengGetStatueAward::default_instance_ = new CGGongChengGetStatueAward();
  GCGongChengGetStatueAward::default_instance_ = new GCGongChengGetStatueAward();
  GCOpenGongChengEnterBoard::default_instance_ = new GCOpenGongChengEnterBoard();
  GCGongChengLeader::default_instance_ = new GCGongChengLeader();
  CGEnterGongCheng::default_instance_->InitAsDefaultInstance();
  GCEnterGongCheng::default_instance_->InitAsDefaultInstance();
  GCGongChengChangeSchedule::default_instance_->InitAsDefaultInstance();
  CGDonateStick::default_instance_->InitAsDefaultInstance();
  GCDonateStick::default_instance_->InitAsDefaultInstance();
  CGOpenGongChengUI::default_instance_->InitAsDefaultInstance();
  GCOpenGongChengUI::default_instance_->InitAsDefaultInstance();
  GongChengDoorInfo::default_instance_->InitAsDefaultInstance();
  GCDoorScore::default_instance_->InitAsDefaultInstance();
  GCDoorHurtPercent::default_instance_->InitAsDefaultInstance();
  GCGongChengLongBelong::default_instance_->InitAsDefaultInstance();
  GCGongchengAddScore::default_instance_->InitAsDefaultInstance();
  CGGongChengLeave::default_instance_->InitAsDefaultInstance();
  GCGongChengLeave::default_instance_->InitAsDefaultInstance();
  CGBeforeDonateStick::default_instance_->InitAsDefaultInstance();
  GCBeforeDonateStick::default_instance_->InitAsDefaultInstance();
  GCGongChengLeaveTime::default_instance_->InitAsDefaultInstance();
  GCGongChengScoreCount::default_instance_->InitAsDefaultInstance();
  CGGongChengReceiveAward::default_instance_->InitAsDefaultInstance();
  GCGongChengReceiveAward::default_instance_->InitAsDefaultInstance();
  CGGongChengCanStatue::default_instance_->InitAsDefaultInstance();
  GCGongChengCanStatue::default_instance_->InitAsDefaultInstance();
  CGGongChengGetStatueAward::default_instance_->InitAsDefaultInstance();
  GCGongChengGetStatueAward::default_instance_->InitAsDefaultInstance();
  GCOpenGongChengEnterBoard::default_instance_->InitAsDefaultInstance();
  GCGongChengLeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GongChengMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GongChengMessage_2eproto {
  StaticDescriptorInitializer_GongChengMessage_2eproto() {
    protobuf_AddDesc_GongChengMessage_2eproto();
  }
} static_descriptor_initializer_GongChengMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEnterGongCheng::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGEnterGongCheng::CGEnterGongCheng()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterGongCheng)
}

void CGEnterGongCheng::InitAsDefaultInstance() {
}

CGEnterGongCheng::CGEnterGongCheng(const CGEnterGongCheng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterGongCheng)
}

void CGEnterGongCheng::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterGongCheng::~CGEnterGongCheng() {
  // @@protoc_insertion_point(destructor:CGEnterGongCheng)
  SharedDtor();
}

void CGEnterGongCheng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterGongCheng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterGongCheng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterGongCheng_descriptor_;
}

const CGEnterGongCheng& CGEnterGongCheng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGEnterGongCheng* CGEnterGongCheng::default_instance_ = NULL;

CGEnterGongCheng* CGEnterGongCheng::New() const {
  return new CGEnterGongCheng;
}

void CGEnterGongCheng::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterGongCheng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterGongCheng)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterGongCheng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterGongCheng)
  return false;
#undef DO_
}

void CGEnterGongCheng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterGongCheng)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterGongCheng)
}

::google::protobuf::uint8* CGEnterGongCheng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterGongCheng)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterGongCheng)
  return target;
}

int CGEnterGongCheng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterGongCheng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterGongCheng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterGongCheng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterGongCheng::MergeFrom(const CGEnterGongCheng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterGongCheng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterGongCheng::CopyFrom(const CGEnterGongCheng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterGongCheng::IsInitialized() const {

  return true;
}

void CGEnterGongCheng::Swap(CGEnterGongCheng* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterGongCheng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterGongCheng_descriptor_;
  metadata.reflection = CGEnterGongCheng_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterGongCheng::kResultFieldNumber;
const int GCEnterGongCheng::kStateFieldNumber;
const int GCEnterGongCheng::kDoorStateFieldNumber;
const int GCEnterGongCheng::kCampStateFieldNumber;
const int GCEnterGongCheng::kRestTimeFieldNumber;
#endif  // !_MSC_VER

GCEnterGongCheng::GCEnterGongCheng()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterGongCheng)
}

void GCEnterGongCheng::InitAsDefaultInstance() {
}

GCEnterGongCheng::GCEnterGongCheng(const GCEnterGongCheng& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterGongCheng)
}

void GCEnterGongCheng::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  state_ = 0;
  doorstate_ = 0;
  campstate_ = 0;
  resttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterGongCheng::~GCEnterGongCheng() {
  // @@protoc_insertion_point(destructor:GCEnterGongCheng)
  SharedDtor();
}

void GCEnterGongCheng::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterGongCheng::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterGongCheng::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterGongCheng_descriptor_;
}

const GCEnterGongCheng& GCEnterGongCheng::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCEnterGongCheng* GCEnterGongCheng::default_instance_ = NULL;

GCEnterGongCheng* GCEnterGongCheng::New() const {
  return new GCEnterGongCheng;
}

void GCEnterGongCheng::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCEnterGongCheng*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(result_, resttime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterGongCheng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterGongCheng)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_doorState;
        break;
      }

      // optional int32 doorState = 3;
      case 3: {
        if (tag == 24) {
         parse_doorState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorstate_)));
          set_has_doorstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_campState;
        break;
      }

      // optional int32 campState = 4;
      case 4: {
        if (tag == 32) {
         parse_campState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campstate_)));
          set_has_campstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_restTime;
        break;
      }

      // optional int64 restTime = 5;
      case 5: {
        if (tag == 40) {
         parse_restTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resttime_)));
          set_has_resttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterGongCheng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterGongCheng)
  return false;
#undef DO_
}

void GCEnterGongCheng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterGongCheng)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 doorState = 3;
  if (has_doorstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->doorstate(), output);
  }

  // optional int32 campState = 4;
  if (has_campstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->campstate(), output);
  }

  // optional int64 restTime = 5;
  if (has_resttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->resttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterGongCheng)
}

::google::protobuf::uint8* GCEnterGongCheng::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterGongCheng)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 doorState = 3;
  if (has_doorstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->doorstate(), target);
  }

  // optional int32 campState = 4;
  if (has_campstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->campstate(), target);
  }

  // optional int64 restTime = 5;
  if (has_resttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->resttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterGongCheng)
  return target;
}

int GCEnterGongCheng::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 doorState = 3;
    if (has_doorstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorstate());
    }

    // optional int32 campState = 4;
    if (has_campstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campstate());
    }

    // optional int64 restTime = 5;
    if (has_resttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterGongCheng::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterGongCheng* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterGongCheng*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterGongCheng::MergeFrom(const GCEnterGongCheng& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_doorstate()) {
      set_doorstate(from.doorstate());
    }
    if (from.has_campstate()) {
      set_campstate(from.campstate());
    }
    if (from.has_resttime()) {
      set_resttime(from.resttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterGongCheng::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterGongCheng::CopyFrom(const GCEnterGongCheng& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterGongCheng::IsInitialized() const {

  return true;
}

void GCEnterGongCheng::Swap(GCEnterGongCheng* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    std::swap(doorstate_, other->doorstate_);
    std::swap(campstate_, other->campstate_);
    std::swap(resttime_, other->resttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterGongCheng::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterGongCheng_descriptor_;
  metadata.reflection = GCEnterGongCheng_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengChangeSchedule::kStateFieldNumber;
const int GCGongChengChangeSchedule::kRestTimeFieldNumber;
#endif  // !_MSC_VER

GCGongChengChangeSchedule::GCGongChengChangeSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengChangeSchedule)
}

void GCGongChengChangeSchedule::InitAsDefaultInstance() {
}

GCGongChengChangeSchedule::GCGongChengChangeSchedule(const GCGongChengChangeSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengChangeSchedule)
}

void GCGongChengChangeSchedule::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  resttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengChangeSchedule::~GCGongChengChangeSchedule() {
  // @@protoc_insertion_point(destructor:GCGongChengChangeSchedule)
  SharedDtor();
}

void GCGongChengChangeSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengChangeSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengChangeSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengChangeSchedule_descriptor_;
}

const GCGongChengChangeSchedule& GCGongChengChangeSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengChangeSchedule* GCGongChengChangeSchedule::default_instance_ = NULL;

GCGongChengChangeSchedule* GCGongChengChangeSchedule::New() const {
  return new GCGongChengChangeSchedule;
}

void GCGongChengChangeSchedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGongChengChangeSchedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resttime_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengChangeSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengChangeSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_restTime;
        break;
      }

      // optional int64 restTime = 5;
      case 5: {
        if (tag == 40) {
         parse_restTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &resttime_)));
          set_has_resttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengChangeSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengChangeSchedule)
  return false;
#undef DO_
}

void GCGongChengChangeSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengChangeSchedule)
  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int64 restTime = 5;
  if (has_resttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->resttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengChangeSchedule)
}

::google::protobuf::uint8* GCGongChengChangeSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengChangeSchedule)
  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int64 restTime = 5;
  if (has_resttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->resttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengChangeSchedule)
  return target;
}

int GCGongChengChangeSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int64 restTime = 5;
    if (has_resttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->resttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengChangeSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengChangeSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengChangeSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengChangeSchedule::MergeFrom(const GCGongChengChangeSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_resttime()) {
      set_resttime(from.resttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengChangeSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengChangeSchedule::CopyFrom(const GCGongChengChangeSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengChangeSchedule::IsInitialized() const {

  return true;
}

void GCGongChengChangeSchedule::Swap(GCGongChengChangeSchedule* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(resttime_, other->resttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengChangeSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengChangeSchedule_descriptor_;
  metadata.reflection = GCGongChengChangeSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDonateStick::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGDonateStick::CGDonateStick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDonateStick)
}

void CGDonateStick::InitAsDefaultInstance() {
}

CGDonateStick::CGDonateStick(const CGDonateStick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDonateStick)
}

void CGDonateStick::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDonateStick::~CGDonateStick() {
  // @@protoc_insertion_point(destructor:CGDonateStick)
  SharedDtor();
}

void CGDonateStick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDonateStick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDonateStick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDonateStick_descriptor_;
}

const CGDonateStick& CGDonateStick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGDonateStick* CGDonateStick::default_instance_ = NULL;

CGDonateStick* CGDonateStick::New() const {
  return new CGDonateStick;
}

void CGDonateStick::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDonateStick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDonateStick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDonateStick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDonateStick)
  return false;
#undef DO_
}

void CGDonateStick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDonateStick)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDonateStick)
}

::google::protobuf::uint8* CGDonateStick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDonateStick)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDonateStick)
  return target;
}

int CGDonateStick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDonateStick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDonateStick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDonateStick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDonateStick::MergeFrom(const CGDonateStick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDonateStick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDonateStick::CopyFrom(const CGDonateStick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDonateStick::IsInitialized() const {

  return true;
}

void CGDonateStick::Swap(CGDonateStick* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDonateStick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDonateStick_descriptor_;
  metadata.reflection = CGDonateStick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDonateStick::kResultFieldNumber;
#endif  // !_MSC_VER

GCDonateStick::GCDonateStick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDonateStick)
}

void GCDonateStick::InitAsDefaultInstance() {
}

GCDonateStick::GCDonateStick(const GCDonateStick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDonateStick)
}

void GCDonateStick::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDonateStick::~GCDonateStick() {
  // @@protoc_insertion_point(destructor:GCDonateStick)
  SharedDtor();
}

void GCDonateStick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDonateStick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDonateStick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDonateStick_descriptor_;
}

const GCDonateStick& GCDonateStick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCDonateStick* GCDonateStick::default_instance_ = NULL;

GCDonateStick* GCDonateStick::New() const {
  return new GCDonateStick;
}

void GCDonateStick::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDonateStick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDonateStick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDonateStick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDonateStick)
  return false;
#undef DO_
}

void GCDonateStick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDonateStick)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDonateStick)
}

::google::protobuf::uint8* GCDonateStick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDonateStick)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDonateStick)
  return target;
}

int GCDonateStick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDonateStick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDonateStick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDonateStick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDonateStick::MergeFrom(const GCDonateStick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDonateStick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDonateStick::CopyFrom(const GCDonateStick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDonateStick::IsInitialized() const {

  return true;
}

void GCDonateStick::Swap(GCDonateStick* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDonateStick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDonateStick_descriptor_;
  metadata.reflection = GCDonateStick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOpenGongChengUI::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGOpenGongChengUI::CGOpenGongChengUI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOpenGongChengUI)
}

void CGOpenGongChengUI::InitAsDefaultInstance() {
}

CGOpenGongChengUI::CGOpenGongChengUI(const CGOpenGongChengUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOpenGongChengUI)
}

void CGOpenGongChengUI::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOpenGongChengUI::~CGOpenGongChengUI() {
  // @@protoc_insertion_point(destructor:CGOpenGongChengUI)
  SharedDtor();
}

void CGOpenGongChengUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOpenGongChengUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOpenGongChengUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOpenGongChengUI_descriptor_;
}

const CGOpenGongChengUI& CGOpenGongChengUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGOpenGongChengUI* CGOpenGongChengUI::default_instance_ = NULL;

CGOpenGongChengUI* CGOpenGongChengUI::New() const {
  return new CGOpenGongChengUI;
}

void CGOpenGongChengUI::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOpenGongChengUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOpenGongChengUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOpenGongChengUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOpenGongChengUI)
  return false;
#undef DO_
}

void CGOpenGongChengUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOpenGongChengUI)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOpenGongChengUI)
}

::google::protobuf::uint8* CGOpenGongChengUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOpenGongChengUI)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOpenGongChengUI)
  return target;
}

int CGOpenGongChengUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOpenGongChengUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOpenGongChengUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOpenGongChengUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOpenGongChengUI::MergeFrom(const CGOpenGongChengUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOpenGongChengUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOpenGongChengUI::CopyFrom(const CGOpenGongChengUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOpenGongChengUI::IsInitialized() const {

  return true;
}

void CGOpenGongChengUI::Swap(CGOpenGongChengUI* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOpenGongChengUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOpenGongChengUI_descriptor_;
  metadata.reflection = CGOpenGongChengUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenGongChengUI::kCharacterInfoFieldNumber;
const int GCOpenGongChengUI::kStateFieldNumber;
const int GCOpenGongChengUI::kGangNameFieldNumber;
#endif  // !_MSC_VER

GCOpenGongChengUI::GCOpenGongChengUI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenGongChengUI)
}

void GCOpenGongChengUI::InitAsDefaultInstance() {
  characterinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCOpenGongChengUI::GCOpenGongChengUI(const GCOpenGongChengUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenGongChengUI)
}

void GCOpenGongChengUI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  characterinfo_ = NULL;
  state_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenGongChengUI::~GCOpenGongChengUI() {
  // @@protoc_insertion_point(destructor:GCOpenGongChengUI)
  SharedDtor();
}

void GCOpenGongChengUI::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
    delete characterinfo_;
  }
}

void GCOpenGongChengUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenGongChengUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenGongChengUI_descriptor_;
}

const GCOpenGongChengUI& GCOpenGongChengUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCOpenGongChengUI* GCOpenGongChengUI::default_instance_ = NULL;

GCOpenGongChengUI* GCOpenGongChengUI::New() const {
  return new GCOpenGongChengUI;
}

void GCOpenGongChengUI::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_characterinfo()) {
      if (characterinfo_ != NULL) characterinfo_->::CharacterInfo::Clear();
    }
    state_ = 0;
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenGongChengUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenGongChengUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo characterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gangName;
        break;
      }

      // optional string gangName = 3;
      case 3: {
        if (tag == 26) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenGongChengUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenGongChengUI)
  return false;
#undef DO_
}

void GCOpenGongChengUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenGongChengUI)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characterinfo(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenGongChengUI)
}

::google::protobuf::uint8* GCOpenGongChengUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenGongChengUI)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characterinfo(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional string gangName = 3;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenGongChengUI)
  return target;
}

int GCOpenGongChengUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo characterInfo = 1;
    if (has_characterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->characterinfo());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string gangName = 3;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenGongChengUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenGongChengUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenGongChengUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenGongChengUI::MergeFrom(const GCOpenGongChengUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_characterinfo()) {
      mutable_characterinfo()->::CharacterInfo::MergeFrom(from.characterinfo());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenGongChengUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenGongChengUI::CopyFrom(const GCOpenGongChengUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenGongChengUI::IsInitialized() const {

  return true;
}

void GCOpenGongChengUI::Swap(GCOpenGongChengUI* other) {
  if (other != this) {
    std::swap(characterinfo_, other->characterinfo_);
    std::swap(state_, other->state_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenGongChengUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenGongChengUI_descriptor_;
  metadata.reflection = GCOpenGongChengUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GongChengDoorInfo::kGangNameFieldNumber;
const int GongChengDoorInfo::kGangIdFieldNumber;
const int GongChengDoorInfo::kGangDataFieldNumber;
#endif  // !_MSC_VER

GongChengDoorInfo::GongChengDoorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GongChengDoorInfo)
}

void GongChengDoorInfo::InitAsDefaultInstance() {
}

GongChengDoorInfo::GongChengDoorInfo(const GongChengDoorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GongChengDoorInfo)
}

void GongChengDoorInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangid_ = GOOGLE_LONGLONG(0);
  gangdata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GongChengDoorInfo::~GongChengDoorInfo() {
  // @@protoc_insertion_point(destructor:GongChengDoorInfo)
  SharedDtor();
}

void GongChengDoorInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GongChengDoorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GongChengDoorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GongChengDoorInfo_descriptor_;
}

const GongChengDoorInfo& GongChengDoorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GongChengDoorInfo* GongChengDoorInfo::default_instance_ = NULL;

GongChengDoorInfo* GongChengDoorInfo::New() const {
  return new GongChengDoorInfo;
}

void GongChengDoorInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GongChengDoorInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gangid_, gangdata_);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GongChengDoorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GongChengDoorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gangName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gangId;
        break;
      }

      // optional int64 gangId = 2;
      case 2: {
        if (tag == 16) {
         parse_gangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gangData;
        break;
      }

      // optional int32 gangData = 3;
      case 3: {
        if (tag == 24) {
         parse_gangData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangdata_)));
          set_has_gangdata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GongChengDoorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GongChengDoorInfo)
  return false;
#undef DO_
}

void GongChengDoorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GongChengDoorInfo)
  // optional string gangName = 1;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gangname(), output);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gangid(), output);
  }

  // optional int32 gangData = 3;
  if (has_gangdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gangdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GongChengDoorInfo)
}

::google::protobuf::uint8* GongChengDoorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GongChengDoorInfo)
  // optional string gangName = 1;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gangname(), target);
  }

  // optional int64 gangId = 2;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gangid(), target);
  }

  // optional int32 gangData = 3;
  if (has_gangdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gangdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GongChengDoorInfo)
  return target;
}

int GongChengDoorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gangName = 1;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional int64 gangId = 2;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional int32 gangData = 3;
    if (has_gangdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GongChengDoorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GongChengDoorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GongChengDoorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GongChengDoorInfo::MergeFrom(const GongChengDoorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangdata()) {
      set_gangdata(from.gangdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GongChengDoorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GongChengDoorInfo::CopyFrom(const GongChengDoorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GongChengDoorInfo::IsInitialized() const {

  return true;
}

void GongChengDoorInfo::Swap(GongChengDoorInfo* other) {
  if (other != this) {
    std::swap(gangname_, other->gangname_);
    std::swap(gangid_, other->gangid_);
    std::swap(gangdata_, other->gangdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GongChengDoorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GongChengDoorInfo_descriptor_;
  metadata.reflection = GongChengDoorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDoorScore::kGangScoreInfoFieldNumber;
const int GCDoorScore::kSelfGangScoreInfoFieldNumber;
#endif  // !_MSC_VER

GCDoorScore::GCDoorScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDoorScore)
}

void GCDoorScore::InitAsDefaultInstance() {
  selfgangscoreinfo_ = const_cast< ::GongChengDoorInfo*>(&::GongChengDoorInfo::default_instance());
}

GCDoorScore::GCDoorScore(const GCDoorScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDoorScore)
}

void GCDoorScore::SharedCtor() {
  _cached_size_ = 0;
  selfgangscoreinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDoorScore::~GCDoorScore() {
  // @@protoc_insertion_point(destructor:GCDoorScore)
  SharedDtor();
}

void GCDoorScore::SharedDtor() {
  if (this != default_instance_) {
    delete selfgangscoreinfo_;
  }
}

void GCDoorScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDoorScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDoorScore_descriptor_;
}

const GCDoorScore& GCDoorScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCDoorScore* GCDoorScore::default_instance_ = NULL;

GCDoorScore* GCDoorScore::New() const {
  return new GCDoorScore;
}

void GCDoorScore::Clear() {
  if (has_selfgangscoreinfo()) {
    if (selfgangscoreinfo_ != NULL) selfgangscoreinfo_->::GongChengDoorInfo::Clear();
  }
  gangscoreinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDoorScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDoorScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GongChengDoorInfo gangScoreInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_gangScoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangscoreinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gangScoreInfo;
        if (input->ExpectTag(18)) goto parse_selfGangScoreInfo;
        break;
      }

      // optional .GongChengDoorInfo selfGangScoreInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_selfGangScoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfgangscoreinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDoorScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDoorScore)
  return false;
#undef DO_
}

void GCDoorScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDoorScore)
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gangscoreinfo(i), output);
  }

  // optional .GongChengDoorInfo selfGangScoreInfo = 2;
  if (has_selfgangscoreinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfgangscoreinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDoorScore)
}

::google::protobuf::uint8* GCDoorScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDoorScore)
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gangscoreinfo(i), target);
  }

  // optional .GongChengDoorInfo selfGangScoreInfo = 2;
  if (has_selfgangscoreinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfgangscoreinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDoorScore)
  return target;
}

int GCDoorScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .GongChengDoorInfo selfGangScoreInfo = 2;
    if (has_selfgangscoreinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfgangscoreinfo());
    }

  }
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  total_size += 1 * this->gangscoreinfo_size();
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangscoreinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDoorScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDoorScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDoorScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDoorScore::MergeFrom(const GCDoorScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangscoreinfo_.MergeFrom(from.gangscoreinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfgangscoreinfo()) {
      mutable_selfgangscoreinfo()->::GongChengDoorInfo::MergeFrom(from.selfgangscoreinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDoorScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDoorScore::CopyFrom(const GCDoorScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDoorScore::IsInitialized() const {

  return true;
}

void GCDoorScore::Swap(GCDoorScore* other) {
  if (other != this) {
    gangscoreinfo_.Swap(&other->gangscoreinfo_);
    std::swap(selfgangscoreinfo_, other->selfgangscoreinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDoorScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDoorScore_descriptor_;
  metadata.reflection = GCDoorScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDoorHurtPercent::kGangHurtInfoFieldNumber;
const int GCDoorHurtPercent::kSelfGangHurtInfoFieldNumber;
#endif  // !_MSC_VER

GCDoorHurtPercent::GCDoorHurtPercent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDoorHurtPercent)
}

void GCDoorHurtPercent::InitAsDefaultInstance() {
  selfganghurtinfo_ = const_cast< ::GongChengDoorInfo*>(&::GongChengDoorInfo::default_instance());
}

GCDoorHurtPercent::GCDoorHurtPercent(const GCDoorHurtPercent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDoorHurtPercent)
}

void GCDoorHurtPercent::SharedCtor() {
  _cached_size_ = 0;
  selfganghurtinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDoorHurtPercent::~GCDoorHurtPercent() {
  // @@protoc_insertion_point(destructor:GCDoorHurtPercent)
  SharedDtor();
}

void GCDoorHurtPercent::SharedDtor() {
  if (this != default_instance_) {
    delete selfganghurtinfo_;
  }
}

void GCDoorHurtPercent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDoorHurtPercent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDoorHurtPercent_descriptor_;
}

const GCDoorHurtPercent& GCDoorHurtPercent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCDoorHurtPercent* GCDoorHurtPercent::default_instance_ = NULL;

GCDoorHurtPercent* GCDoorHurtPercent::New() const {
  return new GCDoorHurtPercent;
}

void GCDoorHurtPercent::Clear() {
  if (has_selfganghurtinfo()) {
    if (selfganghurtinfo_ != NULL) selfganghurtinfo_->::GongChengDoorInfo::Clear();
  }
  ganghurtinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDoorHurtPercent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDoorHurtPercent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GongChengDoorInfo gangHurtInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_gangHurtInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganghurtinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gangHurtInfo;
        if (input->ExpectTag(18)) goto parse_selfGangHurtInfo;
        break;
      }

      // optional .GongChengDoorInfo selfGangHurtInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_selfGangHurtInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfganghurtinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDoorHurtPercent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDoorHurtPercent)
  return false;
#undef DO_
}

void GCDoorHurtPercent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDoorHurtPercent)
  // repeated .GongChengDoorInfo gangHurtInfo = 1;
  for (int i = 0; i < this->ganghurtinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ganghurtinfo(i), output);
  }

  // optional .GongChengDoorInfo selfGangHurtInfo = 2;
  if (has_selfganghurtinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfganghurtinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDoorHurtPercent)
}

::google::protobuf::uint8* GCDoorHurtPercent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDoorHurtPercent)
  // repeated .GongChengDoorInfo gangHurtInfo = 1;
  for (int i = 0; i < this->ganghurtinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ganghurtinfo(i), target);
  }

  // optional .GongChengDoorInfo selfGangHurtInfo = 2;
  if (has_selfganghurtinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfganghurtinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDoorHurtPercent)
  return target;
}

int GCDoorHurtPercent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .GongChengDoorInfo selfGangHurtInfo = 2;
    if (has_selfganghurtinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfganghurtinfo());
    }

  }
  // repeated .GongChengDoorInfo gangHurtInfo = 1;
  total_size += 1 * this->ganghurtinfo_size();
  for (int i = 0; i < this->ganghurtinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganghurtinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDoorHurtPercent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDoorHurtPercent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDoorHurtPercent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDoorHurtPercent::MergeFrom(const GCDoorHurtPercent& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganghurtinfo_.MergeFrom(from.ganghurtinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfganghurtinfo()) {
      mutable_selfganghurtinfo()->::GongChengDoorInfo::MergeFrom(from.selfganghurtinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDoorHurtPercent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDoorHurtPercent::CopyFrom(const GCDoorHurtPercent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDoorHurtPercent::IsInitialized() const {

  return true;
}

void GCDoorHurtPercent::Swap(GCDoorHurtPercent* other) {
  if (other != this) {
    ganghurtinfo_.Swap(&other->ganghurtinfo_);
    std::swap(selfganghurtinfo_, other->selfganghurtinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDoorHurtPercent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDoorHurtPercent_descriptor_;
  metadata.reflection = GCDoorHurtPercent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengLongBelong::kLongStickInfoFieldNumber;
#endif  // !_MSC_VER

GCGongChengLongBelong::GCGongChengLongBelong()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengLongBelong)
}

void GCGongChengLongBelong::InitAsDefaultInstance() {
}

GCGongChengLongBelong::GCGongChengLongBelong(const GCGongChengLongBelong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengLongBelong)
}

void GCGongChengLongBelong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengLongBelong::~GCGongChengLongBelong() {
  // @@protoc_insertion_point(destructor:GCGongChengLongBelong)
  SharedDtor();
}

void GCGongChengLongBelong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengLongBelong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengLongBelong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengLongBelong_descriptor_;
}

const GCGongChengLongBelong& GCGongChengLongBelong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengLongBelong* GCGongChengLongBelong::default_instance_ = NULL;

GCGongChengLongBelong* GCGongChengLongBelong::New() const {
  return new GCGongChengLongBelong;
}

void GCGongChengLongBelong::Clear() {
  longstickinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengLongBelong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengLongBelong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GongChengDoorInfo longStickInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_longStickInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longstickinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_longStickInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengLongBelong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengLongBelong)
  return false;
#undef DO_
}

void GCGongChengLongBelong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengLongBelong)
  // repeated .GongChengDoorInfo longStickInfo = 1;
  for (int i = 0; i < this->longstickinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->longstickinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengLongBelong)
}

::google::protobuf::uint8* GCGongChengLongBelong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengLongBelong)
  // repeated .GongChengDoorInfo longStickInfo = 1;
  for (int i = 0; i < this->longstickinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->longstickinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengLongBelong)
  return target;
}

int GCGongChengLongBelong::ByteSize() const {
  int total_size = 0;

  // repeated .GongChengDoorInfo longStickInfo = 1;
  total_size += 1 * this->longstickinfo_size();
  for (int i = 0; i < this->longstickinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->longstickinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengLongBelong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengLongBelong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengLongBelong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengLongBelong::MergeFrom(const GCGongChengLongBelong& from) {
  GOOGLE_CHECK_NE(&from, this);
  longstickinfo_.MergeFrom(from.longstickinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengLongBelong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengLongBelong::CopyFrom(const GCGongChengLongBelong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengLongBelong::IsInitialized() const {

  return true;
}

void GCGongChengLongBelong::Swap(GCGongChengLongBelong* other) {
  if (other != this) {
    longstickinfo_.Swap(&other->longstickinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengLongBelong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengLongBelong_descriptor_;
  metadata.reflection = GCGongChengLongBelong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongchengAddScore::kScoreFieldNumber;
#endif  // !_MSC_VER

GCGongchengAddScore::GCGongchengAddScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongchengAddScore)
}

void GCGongchengAddScore::InitAsDefaultInstance() {
}

GCGongchengAddScore::GCGongchengAddScore(const GCGongchengAddScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongchengAddScore)
}

void GCGongchengAddScore::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongchengAddScore::~GCGongchengAddScore() {
  // @@protoc_insertion_point(destructor:GCGongchengAddScore)
  SharedDtor();
}

void GCGongchengAddScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongchengAddScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongchengAddScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongchengAddScore_descriptor_;
}

const GCGongchengAddScore& GCGongchengAddScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongchengAddScore* GCGongchengAddScore::default_instance_ = NULL;

GCGongchengAddScore* GCGongchengAddScore::New() const {
  return new GCGongchengAddScore;
}

void GCGongchengAddScore::Clear() {
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongchengAddScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongchengAddScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongchengAddScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongchengAddScore)
  return false;
#undef DO_
}

void GCGongchengAddScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongchengAddScore)
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongchengAddScore)
}

::google::protobuf::uint8* GCGongchengAddScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongchengAddScore)
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongchengAddScore)
  return target;
}

int GCGongchengAddScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongchengAddScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongchengAddScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongchengAddScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongchengAddScore::MergeFrom(const GCGongchengAddScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongchengAddScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongchengAddScore::CopyFrom(const GCGongchengAddScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongchengAddScore::IsInitialized() const {

  return true;
}

void GCGongchengAddScore::Swap(GCGongchengAddScore* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongchengAddScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongchengAddScore_descriptor_;
  metadata.reflection = GCGongchengAddScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGongChengLeave::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGGongChengLeave::CGGongChengLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGongChengLeave)
}

void CGGongChengLeave::InitAsDefaultInstance() {
}

CGGongChengLeave::CGGongChengLeave(const CGGongChengLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGongChengLeave)
}

void CGGongChengLeave::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGongChengLeave::~CGGongChengLeave() {
  // @@protoc_insertion_point(destructor:CGGongChengLeave)
  SharedDtor();
}

void CGGongChengLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGongChengLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGongChengLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGongChengLeave_descriptor_;
}

const CGGongChengLeave& CGGongChengLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGGongChengLeave* CGGongChengLeave::default_instance_ = NULL;

CGGongChengLeave* CGGongChengLeave::New() const {
  return new CGGongChengLeave;
}

void CGGongChengLeave::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGongChengLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGongChengLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGongChengLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGongChengLeave)
  return false;
#undef DO_
}

void CGGongChengLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGongChengLeave)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGongChengLeave)
}

::google::protobuf::uint8* CGGongChengLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGongChengLeave)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGongChengLeave)
  return target;
}

int CGGongChengLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGongChengLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGongChengLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGongChengLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGongChengLeave::MergeFrom(const CGGongChengLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGongChengLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGongChengLeave::CopyFrom(const CGGongChengLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGongChengLeave::IsInitialized() const {

  return true;
}

void CGGongChengLeave::Swap(CGGongChengLeave* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGongChengLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGongChengLeave_descriptor_;
  metadata.reflection = CGGongChengLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengLeave::kResultFieldNumber;
#endif  // !_MSC_VER

GCGongChengLeave::GCGongChengLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengLeave)
}

void GCGongChengLeave::InitAsDefaultInstance() {
}

GCGongChengLeave::GCGongChengLeave(const GCGongChengLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengLeave)
}

void GCGongChengLeave::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengLeave::~GCGongChengLeave() {
  // @@protoc_insertion_point(destructor:GCGongChengLeave)
  SharedDtor();
}

void GCGongChengLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengLeave_descriptor_;
}

const GCGongChengLeave& GCGongChengLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengLeave* GCGongChengLeave::default_instance_ = NULL;

GCGongChengLeave* GCGongChengLeave::New() const {
  return new GCGongChengLeave;
}

void GCGongChengLeave::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengLeave)
  return false;
#undef DO_
}

void GCGongChengLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengLeave)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengLeave)
}

::google::protobuf::uint8* GCGongChengLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengLeave)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengLeave)
  return target;
}

int GCGongChengLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengLeave::MergeFrom(const GCGongChengLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengLeave::CopyFrom(const GCGongChengLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengLeave::IsInitialized() const {

  return true;
}

void GCGongChengLeave::Swap(GCGongChengLeave* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengLeave_descriptor_;
  metadata.reflection = GCGongChengLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBeforeDonateStick::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGBeforeDonateStick::CGBeforeDonateStick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBeforeDonateStick)
}

void CGBeforeDonateStick::InitAsDefaultInstance() {
}

CGBeforeDonateStick::CGBeforeDonateStick(const CGBeforeDonateStick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBeforeDonateStick)
}

void CGBeforeDonateStick::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBeforeDonateStick::~CGBeforeDonateStick() {
  // @@protoc_insertion_point(destructor:CGBeforeDonateStick)
  SharedDtor();
}

void CGBeforeDonateStick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBeforeDonateStick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBeforeDonateStick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBeforeDonateStick_descriptor_;
}

const CGBeforeDonateStick& CGBeforeDonateStick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGBeforeDonateStick* CGBeforeDonateStick::default_instance_ = NULL;

CGBeforeDonateStick* CGBeforeDonateStick::New() const {
  return new CGBeforeDonateStick;
}

void CGBeforeDonateStick::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBeforeDonateStick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBeforeDonateStick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBeforeDonateStick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBeforeDonateStick)
  return false;
#undef DO_
}

void CGBeforeDonateStick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBeforeDonateStick)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBeforeDonateStick)
}

::google::protobuf::uint8* CGBeforeDonateStick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBeforeDonateStick)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBeforeDonateStick)
  return target;
}

int CGBeforeDonateStick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBeforeDonateStick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBeforeDonateStick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBeforeDonateStick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBeforeDonateStick::MergeFrom(const CGBeforeDonateStick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBeforeDonateStick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBeforeDonateStick::CopyFrom(const CGBeforeDonateStick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBeforeDonateStick::IsInitialized() const {

  return true;
}

void CGBeforeDonateStick::Swap(CGBeforeDonateStick* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBeforeDonateStick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBeforeDonateStick_descriptor_;
  metadata.reflection = CGBeforeDonateStick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBeforeDonateStick::kMoneyFieldNumber;
const int GCBeforeDonateStick::kPercentFieldNumber;
const int GCBeforeDonateStick::kCanNextFieldNumber;
#endif  // !_MSC_VER

GCBeforeDonateStick::GCBeforeDonateStick()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBeforeDonateStick)
}

void GCBeforeDonateStick::InitAsDefaultInstance() {
}

GCBeforeDonateStick::GCBeforeDonateStick(const GCBeforeDonateStick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBeforeDonateStick)
}

void GCBeforeDonateStick::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  percent_ = 0;
  cannext_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBeforeDonateStick::~GCBeforeDonateStick() {
  // @@protoc_insertion_point(destructor:GCBeforeDonateStick)
  SharedDtor();
}

void GCBeforeDonateStick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBeforeDonateStick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBeforeDonateStick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBeforeDonateStick_descriptor_;
}

const GCBeforeDonateStick& GCBeforeDonateStick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCBeforeDonateStick* GCBeforeDonateStick::default_instance_ = NULL;

GCBeforeDonateStick* GCBeforeDonateStick::New() const {
  return new GCBeforeDonateStick;
}

void GCBeforeDonateStick::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCBeforeDonateStick*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(money_, cannext_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBeforeDonateStick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBeforeDonateStick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_percent;
        break;
      }

      // optional int32 percent = 2;
      case 2: {
        if (tag == 16) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canNext;
        break;
      }

      // optional int32 canNext = 3;
      case 3: {
        if (tag == 24) {
         parse_canNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cannext_)));
          set_has_cannext();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBeforeDonateStick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBeforeDonateStick)
  return false;
#undef DO_
}

void GCBeforeDonateStick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBeforeDonateStick)
  // optional int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percent(), output);
  }

  // optional int32 canNext = 3;
  if (has_cannext()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cannext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBeforeDonateStick)
}

::google::protobuf::uint8* GCBeforeDonateStick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBeforeDonateStick)
  // optional int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percent(), target);
  }

  // optional int32 canNext = 3;
  if (has_cannext()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cannext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBeforeDonateStick)
  return target;
}

int GCBeforeDonateStick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional int32 canNext = 3;
    if (has_cannext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cannext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBeforeDonateStick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBeforeDonateStick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBeforeDonateStick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBeforeDonateStick::MergeFrom(const GCBeforeDonateStick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_cannext()) {
      set_cannext(from.cannext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBeforeDonateStick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBeforeDonateStick::CopyFrom(const GCBeforeDonateStick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBeforeDonateStick::IsInitialized() const {

  return true;
}

void GCBeforeDonateStick::Swap(GCBeforeDonateStick* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(percent_, other->percent_);
    std::swap(cannext_, other->cannext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBeforeDonateStick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBeforeDonateStick_descriptor_;
  metadata.reflection = GCBeforeDonateStick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengLeaveTime::kLeaveTimeFieldNumber;
#endif  // !_MSC_VER

GCGongChengLeaveTime::GCGongChengLeaveTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengLeaveTime)
}

void GCGongChengLeaveTime::InitAsDefaultInstance() {
}

GCGongChengLeaveTime::GCGongChengLeaveTime(const GCGongChengLeaveTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengLeaveTime)
}

void GCGongChengLeaveTime::SharedCtor() {
  _cached_size_ = 0;
  leavetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengLeaveTime::~GCGongChengLeaveTime() {
  // @@protoc_insertion_point(destructor:GCGongChengLeaveTime)
  SharedDtor();
}

void GCGongChengLeaveTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengLeaveTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengLeaveTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengLeaveTime_descriptor_;
}

const GCGongChengLeaveTime& GCGongChengLeaveTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengLeaveTime* GCGongChengLeaveTime::default_instance_ = NULL;

GCGongChengLeaveTime* GCGongChengLeaveTime::New() const {
  return new GCGongChengLeaveTime;
}

void GCGongChengLeaveTime::Clear() {
  leavetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengLeaveTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengLeaveTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leaveTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leavetime_)));
          set_has_leavetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengLeaveTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengLeaveTime)
  return false;
#undef DO_
}

void GCGongChengLeaveTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengLeaveTime)
  // optional int32 leaveTime = 1;
  if (has_leavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leavetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengLeaveTime)
}

::google::protobuf::uint8* GCGongChengLeaveTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengLeaveTime)
  // optional int32 leaveTime = 1;
  if (has_leavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leavetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengLeaveTime)
  return target;
}

int GCGongChengLeaveTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leaveTime = 1;
    if (has_leavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leavetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengLeaveTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengLeaveTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengLeaveTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengLeaveTime::MergeFrom(const GCGongChengLeaveTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leavetime()) {
      set_leavetime(from.leavetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengLeaveTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengLeaveTime::CopyFrom(const GCGongChengLeaveTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengLeaveTime::IsInitialized() const {

  return true;
}

void GCGongChengLeaveTime::Swap(GCGongChengLeaveTime* other) {
  if (other != this) {
    std::swap(leavetime_, other->leavetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengLeaveTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengLeaveTime_descriptor_;
  metadata.reflection = GCGongChengLeaveTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengScoreCount::kGangScoreInfoFieldNumber;
const int GCGongChengScoreCount::kCloseTimeFieldNumber;
#endif  // !_MSC_VER

GCGongChengScoreCount::GCGongChengScoreCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengScoreCount)
}

void GCGongChengScoreCount::InitAsDefaultInstance() {
}

GCGongChengScoreCount::GCGongChengScoreCount(const GCGongChengScoreCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengScoreCount)
}

void GCGongChengScoreCount::SharedCtor() {
  _cached_size_ = 0;
  closetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengScoreCount::~GCGongChengScoreCount() {
  // @@protoc_insertion_point(destructor:GCGongChengScoreCount)
  SharedDtor();
}

void GCGongChengScoreCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengScoreCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengScoreCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengScoreCount_descriptor_;
}

const GCGongChengScoreCount& GCGongChengScoreCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengScoreCount* GCGongChengScoreCount::default_instance_ = NULL;

GCGongChengScoreCount* GCGongChengScoreCount::New() const {
  return new GCGongChengScoreCount;
}

void GCGongChengScoreCount::Clear() {
  closetime_ = 0;
  gangscoreinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengScoreCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengScoreCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GongChengDoorInfo gangScoreInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_gangScoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangscoreinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gangScoreInfo;
        if (input->ExpectTag(24)) goto parse_closeTime;
        break;
      }

      // optional int32 closeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_closeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetime_)));
          set_has_closetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengScoreCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengScoreCount)
  return false;
#undef DO_
}

void GCGongChengScoreCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengScoreCount)
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gangscoreinfo(i), output);
  }

  // optional int32 closeTime = 3;
  if (has_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->closetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengScoreCount)
}

::google::protobuf::uint8* GCGongChengScoreCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengScoreCount)
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gangscoreinfo(i), target);
  }

  // optional int32 closeTime = 3;
  if (has_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->closetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengScoreCount)
  return target;
}

int GCGongChengScoreCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 closeTime = 3;
    if (has_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetime());
    }

  }
  // repeated .GongChengDoorInfo gangScoreInfo = 1;
  total_size += 1 * this->gangscoreinfo_size();
  for (int i = 0; i < this->gangscoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangscoreinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengScoreCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengScoreCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengScoreCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengScoreCount::MergeFrom(const GCGongChengScoreCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  gangscoreinfo_.MergeFrom(from.gangscoreinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_closetime()) {
      set_closetime(from.closetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengScoreCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengScoreCount::CopyFrom(const GCGongChengScoreCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengScoreCount::IsInitialized() const {

  return true;
}

void GCGongChengScoreCount::Swap(GCGongChengScoreCount* other) {
  if (other != this) {
    gangscoreinfo_.Swap(&other->gangscoreinfo_);
    std::swap(closetime_, other->closetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengScoreCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengScoreCount_descriptor_;
  metadata.reflection = GCGongChengScoreCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGongChengReceiveAward::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGGongChengReceiveAward::CGGongChengReceiveAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGongChengReceiveAward)
}

void CGGongChengReceiveAward::InitAsDefaultInstance() {
}

CGGongChengReceiveAward::CGGongChengReceiveAward(const CGGongChengReceiveAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGongChengReceiveAward)
}

void CGGongChengReceiveAward::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGongChengReceiveAward::~CGGongChengReceiveAward() {
  // @@protoc_insertion_point(destructor:CGGongChengReceiveAward)
  SharedDtor();
}

void CGGongChengReceiveAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGongChengReceiveAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGongChengReceiveAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGongChengReceiveAward_descriptor_;
}

const CGGongChengReceiveAward& CGGongChengReceiveAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGGongChengReceiveAward* CGGongChengReceiveAward::default_instance_ = NULL;

CGGongChengReceiveAward* CGGongChengReceiveAward::New() const {
  return new CGGongChengReceiveAward;
}

void CGGongChengReceiveAward::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGongChengReceiveAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGongChengReceiveAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGongChengReceiveAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGongChengReceiveAward)
  return false;
#undef DO_
}

void CGGongChengReceiveAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGongChengReceiveAward)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGongChengReceiveAward)
}

::google::protobuf::uint8* CGGongChengReceiveAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGongChengReceiveAward)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGongChengReceiveAward)
  return target;
}

int CGGongChengReceiveAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGongChengReceiveAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGongChengReceiveAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGongChengReceiveAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGongChengReceiveAward::MergeFrom(const CGGongChengReceiveAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGongChengReceiveAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGongChengReceiveAward::CopyFrom(const CGGongChengReceiveAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGongChengReceiveAward::IsInitialized() const {

  return true;
}

void CGGongChengReceiveAward::Swap(CGGongChengReceiveAward* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGongChengReceiveAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGongChengReceiveAward_descriptor_;
  metadata.reflection = CGGongChengReceiveAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengReceiveAward::kResultFieldNumber;
#endif  // !_MSC_VER

GCGongChengReceiveAward::GCGongChengReceiveAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengReceiveAward)
}

void GCGongChengReceiveAward::InitAsDefaultInstance() {
}

GCGongChengReceiveAward::GCGongChengReceiveAward(const GCGongChengReceiveAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengReceiveAward)
}

void GCGongChengReceiveAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengReceiveAward::~GCGongChengReceiveAward() {
  // @@protoc_insertion_point(destructor:GCGongChengReceiveAward)
  SharedDtor();
}

void GCGongChengReceiveAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengReceiveAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengReceiveAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengReceiveAward_descriptor_;
}

const GCGongChengReceiveAward& GCGongChengReceiveAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengReceiveAward* GCGongChengReceiveAward::default_instance_ = NULL;

GCGongChengReceiveAward* GCGongChengReceiveAward::New() const {
  return new GCGongChengReceiveAward;
}

void GCGongChengReceiveAward::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengReceiveAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengReceiveAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengReceiveAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengReceiveAward)
  return false;
#undef DO_
}

void GCGongChengReceiveAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengReceiveAward)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengReceiveAward)
}

::google::protobuf::uint8* GCGongChengReceiveAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengReceiveAward)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengReceiveAward)
  return target;
}

int GCGongChengReceiveAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengReceiveAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengReceiveAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengReceiveAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengReceiveAward::MergeFrom(const GCGongChengReceiveAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengReceiveAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengReceiveAward::CopyFrom(const GCGongChengReceiveAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengReceiveAward::IsInitialized() const {

  return true;
}

void GCGongChengReceiveAward::Swap(GCGongChengReceiveAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengReceiveAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengReceiveAward_descriptor_;
  metadata.reflection = GCGongChengReceiveAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGongChengCanStatue::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGGongChengCanStatue::CGGongChengCanStatue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGongChengCanStatue)
}

void CGGongChengCanStatue::InitAsDefaultInstance() {
}

CGGongChengCanStatue::CGGongChengCanStatue(const CGGongChengCanStatue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGongChengCanStatue)
}

void CGGongChengCanStatue::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGongChengCanStatue::~CGGongChengCanStatue() {
  // @@protoc_insertion_point(destructor:CGGongChengCanStatue)
  SharedDtor();
}

void CGGongChengCanStatue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGongChengCanStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGongChengCanStatue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGongChengCanStatue_descriptor_;
}

const CGGongChengCanStatue& CGGongChengCanStatue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGGongChengCanStatue* CGGongChengCanStatue::default_instance_ = NULL;

CGGongChengCanStatue* CGGongChengCanStatue::New() const {
  return new CGGongChengCanStatue;
}

void CGGongChengCanStatue::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGongChengCanStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGongChengCanStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGongChengCanStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGongChengCanStatue)
  return false;
#undef DO_
}

void CGGongChengCanStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGongChengCanStatue)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGongChengCanStatue)
}

::google::protobuf::uint8* CGGongChengCanStatue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGongChengCanStatue)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGongChengCanStatue)
  return target;
}

int CGGongChengCanStatue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGongChengCanStatue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGongChengCanStatue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGongChengCanStatue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGongChengCanStatue::MergeFrom(const CGGongChengCanStatue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGongChengCanStatue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGongChengCanStatue::CopyFrom(const CGGongChengCanStatue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGongChengCanStatue::IsInitialized() const {

  return true;
}

void CGGongChengCanStatue::Swap(CGGongChengCanStatue* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGongChengCanStatue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGongChengCanStatue_descriptor_;
  metadata.reflection = CGGongChengCanStatue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengCanStatue::kResultFieldNumber;
const int GCGongChengCanStatue::kCanGetFieldNumber;
#endif  // !_MSC_VER

GCGongChengCanStatue::GCGongChengCanStatue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengCanStatue)
}

void GCGongChengCanStatue::InitAsDefaultInstance() {
}

GCGongChengCanStatue::GCGongChengCanStatue(const GCGongChengCanStatue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengCanStatue)
}

void GCGongChengCanStatue::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  canget_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengCanStatue::~GCGongChengCanStatue() {
  // @@protoc_insertion_point(destructor:GCGongChengCanStatue)
  SharedDtor();
}

void GCGongChengCanStatue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengCanStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengCanStatue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengCanStatue_descriptor_;
}

const GCGongChengCanStatue& GCGongChengCanStatue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengCanStatue* GCGongChengCanStatue::default_instance_ = NULL;

GCGongChengCanStatue* GCGongChengCanStatue::New() const {
  return new GCGongChengCanStatue;
}

void GCGongChengCanStatue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGongChengCanStatue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, canget_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengCanStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengCanStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_canGet;
        break;
      }

      // optional int32 canGet = 2;
      case 2: {
        if (tag == 16) {
         parse_canGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canget_)));
          set_has_canget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengCanStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengCanStatue)
  return false;
#undef DO_
}

void GCGongChengCanStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengCanStatue)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 canGet = 2;
  if (has_canget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->canget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengCanStatue)
}

::google::protobuf::uint8* GCGongChengCanStatue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengCanStatue)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 canGet = 2;
  if (has_canget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->canget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengCanStatue)
  return target;
}

int GCGongChengCanStatue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 canGet = 2;
    if (has_canget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canget());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengCanStatue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengCanStatue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengCanStatue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengCanStatue::MergeFrom(const GCGongChengCanStatue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_canget()) {
      set_canget(from.canget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengCanStatue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengCanStatue::CopyFrom(const GCGongChengCanStatue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengCanStatue::IsInitialized() const {

  return true;
}

void GCGongChengCanStatue::Swap(GCGongChengCanStatue* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(canget_, other->canget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengCanStatue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengCanStatue_descriptor_;
  metadata.reflection = GCGongChengCanStatue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGongChengGetStatueAward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGongChengGetStatueAward::CGGongChengGetStatueAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGongChengGetStatueAward)
}

void CGGongChengGetStatueAward::InitAsDefaultInstance() {
}

CGGongChengGetStatueAward::CGGongChengGetStatueAward(const CGGongChengGetStatueAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGongChengGetStatueAward)
}

void CGGongChengGetStatueAward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGongChengGetStatueAward::~CGGongChengGetStatueAward() {
  // @@protoc_insertion_point(destructor:CGGongChengGetStatueAward)
  SharedDtor();
}

void CGGongChengGetStatueAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGongChengGetStatueAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGongChengGetStatueAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGongChengGetStatueAward_descriptor_;
}

const CGGongChengGetStatueAward& CGGongChengGetStatueAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

CGGongChengGetStatueAward* CGGongChengGetStatueAward::default_instance_ = NULL;

CGGongChengGetStatueAward* CGGongChengGetStatueAward::New() const {
  return new CGGongChengGetStatueAward;
}

void CGGongChengGetStatueAward::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGongChengGetStatueAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGongChengGetStatueAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGongChengGetStatueAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGongChengGetStatueAward)
  return false;
#undef DO_
}

void CGGongChengGetStatueAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGongChengGetStatueAward)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGongChengGetStatueAward)
}

::google::protobuf::uint8* CGGongChengGetStatueAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGongChengGetStatueAward)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGongChengGetStatueAward)
  return target;
}

int CGGongChengGetStatueAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGongChengGetStatueAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGongChengGetStatueAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGongChengGetStatueAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGongChengGetStatueAward::MergeFrom(const CGGongChengGetStatueAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGongChengGetStatueAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGongChengGetStatueAward::CopyFrom(const CGGongChengGetStatueAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGongChengGetStatueAward::IsInitialized() const {

  return true;
}

void CGGongChengGetStatueAward::Swap(CGGongChengGetStatueAward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGongChengGetStatueAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGongChengGetStatueAward_descriptor_;
  metadata.reflection = CGGongChengGetStatueAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengGetStatueAward::kResultFieldNumber;
#endif  // !_MSC_VER

GCGongChengGetStatueAward::GCGongChengGetStatueAward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengGetStatueAward)
}

void GCGongChengGetStatueAward::InitAsDefaultInstance() {
}

GCGongChengGetStatueAward::GCGongChengGetStatueAward(const GCGongChengGetStatueAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengGetStatueAward)
}

void GCGongChengGetStatueAward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengGetStatueAward::~GCGongChengGetStatueAward() {
  // @@protoc_insertion_point(destructor:GCGongChengGetStatueAward)
  SharedDtor();
}

void GCGongChengGetStatueAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengGetStatueAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengGetStatueAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengGetStatueAward_descriptor_;
}

const GCGongChengGetStatueAward& GCGongChengGetStatueAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengGetStatueAward* GCGongChengGetStatueAward::default_instance_ = NULL;

GCGongChengGetStatueAward* GCGongChengGetStatueAward::New() const {
  return new GCGongChengGetStatueAward;
}

void GCGongChengGetStatueAward::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengGetStatueAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengGetStatueAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengGetStatueAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengGetStatueAward)
  return false;
#undef DO_
}

void GCGongChengGetStatueAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengGetStatueAward)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengGetStatueAward)
}

::google::protobuf::uint8* GCGongChengGetStatueAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengGetStatueAward)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengGetStatueAward)
  return target;
}

int GCGongChengGetStatueAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengGetStatueAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengGetStatueAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengGetStatueAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengGetStatueAward::MergeFrom(const GCGongChengGetStatueAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengGetStatueAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengGetStatueAward::CopyFrom(const GCGongChengGetStatueAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengGetStatueAward::IsInitialized() const {

  return true;
}

void GCGongChengGetStatueAward::Swap(GCGongChengGetStatueAward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengGetStatueAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengGetStatueAward_descriptor_;
  metadata.reflection = GCGongChengGetStatueAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenGongChengEnterBoard::kTypeFieldNumber;
#endif  // !_MSC_VER

GCOpenGongChengEnterBoard::GCOpenGongChengEnterBoard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenGongChengEnterBoard)
}

void GCOpenGongChengEnterBoard::InitAsDefaultInstance() {
}

GCOpenGongChengEnterBoard::GCOpenGongChengEnterBoard(const GCOpenGongChengEnterBoard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenGongChengEnterBoard)
}

void GCOpenGongChengEnterBoard::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenGongChengEnterBoard::~GCOpenGongChengEnterBoard() {
  // @@protoc_insertion_point(destructor:GCOpenGongChengEnterBoard)
  SharedDtor();
}

void GCOpenGongChengEnterBoard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpenGongChengEnterBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenGongChengEnterBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenGongChengEnterBoard_descriptor_;
}

const GCOpenGongChengEnterBoard& GCOpenGongChengEnterBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCOpenGongChengEnterBoard* GCOpenGongChengEnterBoard::default_instance_ = NULL;

GCOpenGongChengEnterBoard* GCOpenGongChengEnterBoard::New() const {
  return new GCOpenGongChengEnterBoard;
}

void GCOpenGongChengEnterBoard::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenGongChengEnterBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenGongChengEnterBoard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenGongChengEnterBoard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenGongChengEnterBoard)
  return false;
#undef DO_
}

void GCOpenGongChengEnterBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenGongChengEnterBoard)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenGongChengEnterBoard)
}

::google::protobuf::uint8* GCOpenGongChengEnterBoard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenGongChengEnterBoard)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenGongChengEnterBoard)
  return target;
}

int GCOpenGongChengEnterBoard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenGongChengEnterBoard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenGongChengEnterBoard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenGongChengEnterBoard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenGongChengEnterBoard::MergeFrom(const GCOpenGongChengEnterBoard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenGongChengEnterBoard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenGongChengEnterBoard::CopyFrom(const GCOpenGongChengEnterBoard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenGongChengEnterBoard::IsInitialized() const {

  return true;
}

void GCOpenGongChengEnterBoard::Swap(GCOpenGongChengEnterBoard* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenGongChengEnterBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenGongChengEnterBoard_descriptor_;
  metadata.reflection = GCOpenGongChengEnterBoard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGongChengLeader::kFlagFieldNumber;
#endif  // !_MSC_VER

GCGongChengLeader::GCGongChengLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGongChengLeader)
}

void GCGongChengLeader::InitAsDefaultInstance() {
}

GCGongChengLeader::GCGongChengLeader(const GCGongChengLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGongChengLeader)
}

void GCGongChengLeader::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGongChengLeader::~GCGongChengLeader() {
  // @@protoc_insertion_point(destructor:GCGongChengLeader)
  SharedDtor();
}

void GCGongChengLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGongChengLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGongChengLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGongChengLeader_descriptor_;
}

const GCGongChengLeader& GCGongChengLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GongChengMessage_2eproto();
  return *default_instance_;
}

GCGongChengLeader* GCGongChengLeader::default_instance_ = NULL;

GCGongChengLeader* GCGongChengLeader::New() const {
  return new GCGongChengLeader;
}

void GCGongChengLeader::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGongChengLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGongChengLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGongChengLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGongChengLeader)
  return false;
#undef DO_
}

void GCGongChengLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGongChengLeader)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGongChengLeader)
}

::google::protobuf::uint8* GCGongChengLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGongChengLeader)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGongChengLeader)
  return target;
}

int GCGongChengLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGongChengLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGongChengLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGongChengLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGongChengLeader::MergeFrom(const GCGongChengLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGongChengLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGongChengLeader::CopyFrom(const GCGongChengLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGongChengLeader::IsInitialized() const {

  return true;
}

void GCGongChengLeader::Swap(GCGongChengLeader* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGongChengLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGongChengLeader_descriptor_;
  metadata.reflection = GCGongChengLeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
