// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HappyRollMessage.proto

#ifndef PROTOBUF_HappyRollMessage_2eproto__INCLUDED
#define PROTOBUF_HappyRollMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HappyRollMessage_2eproto();
void protobuf_AssignDesc_HappyRollMessage_2eproto();
void protobuf_ShutdownFile_HappyRollMessage_2eproto();

class HRRewardInfo;
class ShowInfo;
class HRInfo;
class CGHappyRoll;
class GCHappyRoll;
class GCHappyRollRewardList;
class GCHappyRollJackPotList;
class CGLottery;
class GCLottery;
class CGHappyRollGetReward;
class GCHappyRollGetRewardBack;
class CGCheckHRUpdate;
class GCVersion;
class CGHappyRollBuyMoney;

// ===================================================================

class HRRewardInfo : public ::google::protobuf::Message {
 public:
  HRRewardInfo();
  virtual ~HRRewardInfo();

  HRRewardInfo(const HRRewardInfo& from);

  inline HRRewardInfo& operator=(const HRRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HRRewardInfo& default_instance();

  void Swap(HRRewardInfo* other);

  // implements Message ----------------------------------------------

  HRRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HRRewardInfo& from);
  void MergeFrom(const HRRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Iteminfo itemInfo = 1;
  inline int iteminfo_size() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 1;
  inline const ::Iteminfo& iteminfo(int index) const;
  inline ::Iteminfo* mutable_iteminfo(int index);
  inline ::Iteminfo* add_iteminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      iteminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_iteminfo();

  // optional int32 consumeBid = 2;
  inline bool has_consumebid() const;
  inline void clear_consumebid();
  static const int kConsumeBidFieldNumber = 2;
  inline ::google::protobuf::int32 consumebid() const;
  inline void set_consumebid(::google::protobuf::int32 value);

  // optional int32 consumeSid = 3;
  inline bool has_consumesid() const;
  inline void clear_consumesid();
  static const int kConsumeSidFieldNumber = 3;
  inline ::google::protobuf::int32 consumesid() const;
  inline void set_consumesid(::google::protobuf::int32 value);

  // optional int32 consumeValue = 4;
  inline bool has_consumevalue() const;
  inline void clear_consumevalue();
  static const int kConsumeValueFieldNumber = 4;
  inline ::google::protobuf::int32 consumevalue() const;
  inline void set_consumevalue(::google::protobuf::int32 value);

  // optional int32 isShow = 5;
  inline bool has_isshow() const;
  inline void clear_isshow();
  static const int kIsShowFieldNumber = 5;
  inline ::google::protobuf::int32 isshow() const;
  inline void set_isshow(::google::protobuf::int32 value);

  // optional int32 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HRRewardInfo)
 private:
  inline void set_has_consumebid();
  inline void clear_has_consumebid();
  inline void set_has_consumesid();
  inline void clear_has_consumesid();
  inline void set_has_consumevalue();
  inline void clear_has_consumevalue();
  inline void set_has_isshow();
  inline void clear_has_isshow();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > iteminfo_;
  ::google::protobuf::int32 consumebid_;
  ::google::protobuf::int32 consumesid_;
  ::google::protobuf::int32 consumevalue_;
  ::google::protobuf::int32 isshow_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static HRRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class ShowInfo : public ::google::protobuf::Message {
 public:
  ShowInfo();
  virtual ~ShowInfo();

  ShowInfo(const ShowInfo& from);

  inline ShowInfo& operator=(const ShowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowInfo& default_instance();

  void Swap(ShowInfo* other);

  // implements Message ----------------------------------------------

  ShowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowInfo& from);
  void MergeFrom(const ShowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ShowInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static ShowInfo* default_instance_;
};
// -------------------------------------------------------------------

class HRInfo : public ::google::protobuf::Message {
 public:
  HRInfo();
  virtual ~HRInfo();

  HRInfo(const HRInfo& from);

  inline HRInfo& operator=(const HRInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HRInfo& default_instance();

  void Swap(HRInfo* other);

  // implements Message ----------------------------------------------

  HRInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HRInfo& from);
  void MergeFrom(const HRInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string rewardList = 1;
  inline int rewardlist_size() const;
  inline void clear_rewardlist();
  static const int kRewardListFieldNumber = 1;
  inline const ::std::string& rewardlist(int index) const;
  inline ::std::string* mutable_rewardlist(int index);
  inline void set_rewardlist(int index, const ::std::string& value);
  inline void set_rewardlist(int index, const char* value);
  inline void set_rewardlist(int index, const char* value, size_t size);
  inline ::std::string* add_rewardlist();
  inline void add_rewardlist(const ::std::string& value);
  inline void add_rewardlist(const char* value);
  inline void add_rewardlist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rewardlist();

  // optional int64 startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int32 jackPotScore = 4;
  inline bool has_jackpotscore() const;
  inline void clear_jackpotscore();
  static const int kJackPotScoreFieldNumber = 4;
  inline ::google::protobuf::int32 jackpotscore() const;
  inline void set_jackpotscore(::google::protobuf::int32 value);

  // optional int32 jackPotMoney = 5;
  inline bool has_jackpotmoney() const;
  inline void clear_jackpotmoney();
  static const int kJackPotMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 jackpotmoney() const;
  inline void set_jackpotmoney(::google::protobuf::int32 value);

  // optional int32 percent = 6;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 6;
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // optional int32 integral = 7;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 7;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 maxSelectNum = 8;
  inline bool has_maxselectnum() const;
  inline void clear_maxselectnum();
  static const int kMaxSelectNumFieldNumber = 8;
  inline ::google::protobuf::int32 maxselectnum() const;
  inline void set_maxselectnum(::google::protobuf::int32 value);

  // optional int32 lastPond = 9;
  inline bool has_lastpond() const;
  inline void clear_lastpond();
  static const int kLastPondFieldNumber = 9;
  inline ::google::protobuf::int32 lastpond() const;
  inline void set_lastpond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HRInfo)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_jackpotscore();
  inline void clear_has_jackpotscore();
  inline void set_has_jackpotmoney();
  inline void clear_has_jackpotmoney();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_maxselectnum();
  inline void clear_has_maxselectnum();
  inline void set_has_lastpond();
  inline void clear_has_lastpond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rewardlist_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 jackpotscore_;
  ::google::protobuf::int32 jackpotmoney_;
  ::google::protobuf::int32 percent_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 maxselectnum_;
  ::google::protobuf::int32 lastpond_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static HRInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGHappyRoll : public ::google::protobuf::Message {
 public:
  CGHappyRoll();
  virtual ~CGHappyRoll();

  CGHappyRoll(const CGHappyRoll& from);

  inline CGHappyRoll& operator=(const CGHappyRoll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGHappyRoll& default_instance();

  void Swap(CGHappyRoll* other);

  // implements Message ----------------------------------------------

  CGHappyRoll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGHappyRoll& from);
  void MergeFrom(const CGHappyRoll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGHappyRoll)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static CGHappyRoll* default_instance_;
};
// -------------------------------------------------------------------

class GCHappyRoll : public ::google::protobuf::Message {
 public:
  GCHappyRoll();
  virtual ~GCHappyRoll();

  GCHappyRoll(const GCHappyRoll& from);

  inline GCHappyRoll& operator=(const GCHappyRoll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCHappyRoll& default_instance();

  void Swap(GCHappyRoll* other);

  // implements Message ----------------------------------------------

  GCHappyRoll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCHappyRoll& from);
  void MergeFrom(const GCHappyRoll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .HRInfo hrInfo = 2;
  inline bool has_hrinfo() const;
  inline void clear_hrinfo();
  static const int kHrInfoFieldNumber = 2;
  inline const ::HRInfo& hrinfo() const;
  inline ::HRInfo* mutable_hrinfo();
  inline ::HRInfo* release_hrinfo();
  inline void set_allocated_hrinfo(::HRInfo* hrinfo);

  // optional int32 haveMoneyNum = 3;
  inline bool has_havemoneynum() const;
  inline void clear_havemoneynum();
  static const int kHaveMoneyNumFieldNumber = 3;
  inline ::google::protobuf::int32 havemoneynum() const;
  inline void set_havemoneynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCHappyRoll)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hrinfo();
  inline void clear_has_hrinfo();
  inline void set_has_havemoneynum();
  inline void clear_has_havemoneynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::HRInfo* hrinfo_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 havemoneynum_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCHappyRoll* default_instance_;
};
// -------------------------------------------------------------------

class GCHappyRollRewardList : public ::google::protobuf::Message {
 public:
  GCHappyRollRewardList();
  virtual ~GCHappyRollRewardList();

  GCHappyRollRewardList(const GCHappyRollRewardList& from);

  inline GCHappyRollRewardList& operator=(const GCHappyRollRewardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCHappyRollRewardList& default_instance();

  void Swap(GCHappyRollRewardList* other);

  // implements Message ----------------------------------------------

  GCHappyRollRewardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCHappyRollRewardList& from);
  void MergeFrom(const GCHappyRollRewardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HRRewardInfo hrRewardList = 1;
  inline int hrrewardlist_size() const;
  inline void clear_hrrewardlist();
  static const int kHrRewardListFieldNumber = 1;
  inline const ::HRRewardInfo& hrrewardlist(int index) const;
  inline ::HRRewardInfo* mutable_hrrewardlist(int index);
  inline ::HRRewardInfo* add_hrrewardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::HRRewardInfo >&
      hrrewardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::HRRewardInfo >*
      mutable_hrrewardlist();

  // repeated int32 hrMulList = 2;
  inline int hrmullist_size() const;
  inline void clear_hrmullist();
  static const int kHrMulListFieldNumber = 2;
  inline ::google::protobuf::int32 hrmullist(int index) const;
  inline void set_hrmullist(int index, ::google::protobuf::int32 value);
  inline void add_hrmullist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hrmullist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hrmullist();

  // repeated int32 hrMulDesList = 3;
  inline int hrmuldeslist_size() const;
  inline void clear_hrmuldeslist();
  static const int kHrMulDesListFieldNumber = 3;
  inline ::google::protobuf::int32 hrmuldeslist(int index) const;
  inline void set_hrmuldeslist(int index, ::google::protobuf::int32 value);
  inline void add_hrmuldeslist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hrmuldeslist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hrmuldeslist();

  // @@protoc_insertion_point(class_scope:GCHappyRollRewardList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::HRRewardInfo > hrrewardlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hrmullist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hrmuldeslist_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCHappyRollRewardList* default_instance_;
};
// -------------------------------------------------------------------

class GCHappyRollJackPotList : public ::google::protobuf::Message {
 public:
  GCHappyRollJackPotList();
  virtual ~GCHappyRollJackPotList();

  GCHappyRollJackPotList(const GCHappyRollJackPotList& from);

  inline GCHappyRollJackPotList& operator=(const GCHappyRollJackPotList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCHappyRollJackPotList& default_instance();

  void Swap(GCHappyRollJackPotList* other);

  // implements Message ----------------------------------------------

  GCHappyRollJackPotList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCHappyRollJackPotList& from);
  void MergeFrom(const GCHappyRollJackPotList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ShowInfo shows = 1;
  inline int shows_size() const;
  inline void clear_shows();
  static const int kShowsFieldNumber = 1;
  inline const ::ShowInfo& shows(int index) const;
  inline ::ShowInfo* mutable_shows(int index);
  inline ::ShowInfo* add_shows();
  inline const ::google::protobuf::RepeatedPtrField< ::ShowInfo >&
      shows() const;
  inline ::google::protobuf::RepeatedPtrField< ::ShowInfo >*
      mutable_shows();

  // @@protoc_insertion_point(class_scope:GCHappyRollJackPotList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShowInfo > shows_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCHappyRollJackPotList* default_instance_;
};
// -------------------------------------------------------------------

class CGLottery : public ::google::protobuf::Message {
 public:
  CGLottery();
  virtual ~CGLottery();

  CGLottery(const CGLottery& from);

  inline CGLottery& operator=(const CGLottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGLottery& default_instance();

  void Swap(CGLottery* other);

  // implements Message ----------------------------------------------

  CGLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGLottery& from);
  void MergeFrom(const CGLottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 choseRewardIDList = 1;
  inline int choserewardidlist_size() const;
  inline void clear_choserewardidlist();
  static const int kChoseRewardIDListFieldNumber = 1;
  inline ::google::protobuf::int32 choserewardidlist(int index) const;
  inline void set_choserewardidlist(int index, ::google::protobuf::int32 value);
  inline void add_choserewardidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      choserewardidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_choserewardidlist();

  // optional int32 choseMultiple = 2;
  inline bool has_chosemultiple() const;
  inline void clear_chosemultiple();
  static const int kChoseMultipleFieldNumber = 2;
  inline ::google::protobuf::int32 chosemultiple() const;
  inline void set_chosemultiple(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGLottery)
 private:
  inline void set_has_chosemultiple();
  inline void clear_has_chosemultiple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > choserewardidlist_;
  ::google::protobuf::int32 chosemultiple_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static CGLottery* default_instance_;
};
// -------------------------------------------------------------------

class GCLottery : public ::google::protobuf::Message {
 public:
  GCLottery();
  virtual ~GCLottery();

  GCLottery(const GCLottery& from);

  inline GCLottery& operator=(const GCLottery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCLottery& default_instance();

  void Swap(GCLottery* other);

  // implements Message ----------------------------------------------

  GCLottery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCLottery& from);
  void MergeFrom(const GCLottery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 targetID = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // optional int32 integral = 3;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 3;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCLottery)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_integral();
  inline void clear_has_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 integral_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCLottery* default_instance_;
};
// -------------------------------------------------------------------

class CGHappyRollGetReward : public ::google::protobuf::Message {
 public:
  CGHappyRollGetReward();
  virtual ~CGHappyRollGetReward();

  CGHappyRollGetReward(const CGHappyRollGetReward& from);

  inline CGHappyRollGetReward& operator=(const CGHappyRollGetReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGHappyRollGetReward& default_instance();

  void Swap(CGHappyRollGetReward* other);

  // implements Message ----------------------------------------------

  CGHappyRollGetReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGHappyRollGetReward& from);
  void MergeFrom(const CGHappyRollGetReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGHappyRollGetReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static CGHappyRollGetReward* default_instance_;
};
// -------------------------------------------------------------------

class GCHappyRollGetRewardBack : public ::google::protobuf::Message {
 public:
  GCHappyRollGetRewardBack();
  virtual ~GCHappyRollGetRewardBack();

  GCHappyRollGetRewardBack(const GCHappyRollGetRewardBack& from);

  inline GCHappyRollGetRewardBack& operator=(const GCHappyRollGetRewardBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCHappyRollGetRewardBack& default_instance();

  void Swap(GCHappyRollGetRewardBack* other);

  // implements Message ----------------------------------------------

  GCHappyRollGetRewardBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCHappyRollGetRewardBack& from);
  void MergeFrom(const GCHappyRollGetRewardBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCHappyRollGetRewardBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCHappyRollGetRewardBack* default_instance_;
};
// -------------------------------------------------------------------

class CGCheckHRUpdate : public ::google::protobuf::Message {
 public:
  CGCheckHRUpdate();
  virtual ~CGCheckHRUpdate();

  CGCheckHRUpdate(const CGCheckHRUpdate& from);

  inline CGCheckHRUpdate& operator=(const CGCheckHRUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCheckHRUpdate& default_instance();

  void Swap(CGCheckHRUpdate* other);

  // implements Message ----------------------------------------------

  CGCheckHRUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCheckHRUpdate& from);
  void MergeFrom(const CGCheckHRUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGCheckHRUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCheckHRUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GCVersion : public ::google::protobuf::Message {
 public:
  GCVersion();
  virtual ~GCVersion();

  GCVersion(const GCVersion& from);

  inline GCVersion& operator=(const GCVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCVersion& default_instance();

  void Swap(GCVersion* other);

  // implements Message ----------------------------------------------

  GCVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCVersion& from);
  void MergeFrom(const GCVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCVersion)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 version_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static GCVersion* default_instance_;
};
// -------------------------------------------------------------------

class CGHappyRollBuyMoney : public ::google::protobuf::Message {
 public:
  CGHappyRollBuyMoney();
  virtual ~CGHappyRollBuyMoney();

  CGHappyRollBuyMoney(const CGHappyRollBuyMoney& from);

  inline CGHappyRollBuyMoney& operator=(const CGHappyRollBuyMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGHappyRollBuyMoney& default_instance();

  void Swap(CGHappyRollBuyMoney* other);

  // implements Message ----------------------------------------------

  CGHappyRollBuyMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGHappyRollBuyMoney& from);
  void MergeFrom(const CGHappyRollBuyMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 buyMoneyNum = 1;
  inline bool has_buymoneynum() const;
  inline void clear_buymoneynum();
  static const int kBuyMoneyNumFieldNumber = 1;
  inline ::google::protobuf::int32 buymoneynum() const;
  inline void set_buymoneynum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGHappyRollBuyMoney)
 private:
  inline void set_has_buymoneynum();
  inline void clear_has_buymoneynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 buymoneynum_;
  friend void  protobuf_AddDesc_HappyRollMessage_2eproto();
  friend void protobuf_AssignDesc_HappyRollMessage_2eproto();
  friend void protobuf_ShutdownFile_HappyRollMessage_2eproto();

  void InitAsDefaultInstance();
  static CGHappyRollBuyMoney* default_instance_;
};
// ===================================================================


// ===================================================================

// HRRewardInfo

// repeated .Iteminfo itemInfo = 1;
inline int HRRewardInfo::iteminfo_size() const {
  return iteminfo_.size();
}
inline void HRRewardInfo::clear_iteminfo() {
  iteminfo_.Clear();
}
inline const ::Iteminfo& HRRewardInfo::iteminfo(int index) const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.itemInfo)
  return iteminfo_.Get(index);
}
inline ::Iteminfo* HRRewardInfo::mutable_iteminfo(int index) {
  // @@protoc_insertion_point(field_mutable:HRRewardInfo.itemInfo)
  return iteminfo_.Mutable(index);
}
inline ::Iteminfo* HRRewardInfo::add_iteminfo() {
  // @@protoc_insertion_point(field_add:HRRewardInfo.itemInfo)
  return iteminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
HRRewardInfo::iteminfo() const {
  // @@protoc_insertion_point(field_list:HRRewardInfo.itemInfo)
  return iteminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
HRRewardInfo::mutable_iteminfo() {
  // @@protoc_insertion_point(field_mutable_list:HRRewardInfo.itemInfo)
  return &iteminfo_;
}

// optional int32 consumeBid = 2;
inline bool HRRewardInfo::has_consumebid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HRRewardInfo::set_has_consumebid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HRRewardInfo::clear_has_consumebid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HRRewardInfo::clear_consumebid() {
  consumebid_ = 0;
  clear_has_consumebid();
}
inline ::google::protobuf::int32 HRRewardInfo::consumebid() const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.consumeBid)
  return consumebid_;
}
inline void HRRewardInfo::set_consumebid(::google::protobuf::int32 value) {
  set_has_consumebid();
  consumebid_ = value;
  // @@protoc_insertion_point(field_set:HRRewardInfo.consumeBid)
}

// optional int32 consumeSid = 3;
inline bool HRRewardInfo::has_consumesid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HRRewardInfo::set_has_consumesid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HRRewardInfo::clear_has_consumesid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HRRewardInfo::clear_consumesid() {
  consumesid_ = 0;
  clear_has_consumesid();
}
inline ::google::protobuf::int32 HRRewardInfo::consumesid() const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.consumeSid)
  return consumesid_;
}
inline void HRRewardInfo::set_consumesid(::google::protobuf::int32 value) {
  set_has_consumesid();
  consumesid_ = value;
  // @@protoc_insertion_point(field_set:HRRewardInfo.consumeSid)
}

// optional int32 consumeValue = 4;
inline bool HRRewardInfo::has_consumevalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HRRewardInfo::set_has_consumevalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HRRewardInfo::clear_has_consumevalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HRRewardInfo::clear_consumevalue() {
  consumevalue_ = 0;
  clear_has_consumevalue();
}
inline ::google::protobuf::int32 HRRewardInfo::consumevalue() const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.consumeValue)
  return consumevalue_;
}
inline void HRRewardInfo::set_consumevalue(::google::protobuf::int32 value) {
  set_has_consumevalue();
  consumevalue_ = value;
  // @@protoc_insertion_point(field_set:HRRewardInfo.consumeValue)
}

// optional int32 isShow = 5;
inline bool HRRewardInfo::has_isshow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HRRewardInfo::set_has_isshow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HRRewardInfo::clear_has_isshow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HRRewardInfo::clear_isshow() {
  isshow_ = 0;
  clear_has_isshow();
}
inline ::google::protobuf::int32 HRRewardInfo::isshow() const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.isShow)
  return isshow_;
}
inline void HRRewardInfo::set_isshow(::google::protobuf::int32 value) {
  set_has_isshow();
  isshow_ = value;
  // @@protoc_insertion_point(field_set:HRRewardInfo.isShow)
}

// optional int32 id = 6;
inline bool HRRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HRRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HRRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HRRewardInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 HRRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:HRRewardInfo.id)
  return id_;
}
inline void HRRewardInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:HRRewardInfo.id)
}

// -------------------------------------------------------------------

// ShowInfo

// optional int32 id = 1;
inline bool ShowInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ShowInfo::id() const {
  // @@protoc_insertion_point(field_get:ShowInfo.id)
  return id_;
}
inline void ShowInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShowInfo.id)
}

// optional int32 num = 2;
inline bool ShowInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ShowInfo::num() const {
  // @@protoc_insertion_point(field_get:ShowInfo.num)
  return num_;
}
inline void ShowInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ShowInfo.num)
}

// -------------------------------------------------------------------

// HRInfo

// repeated string rewardList = 1;
inline int HRInfo::rewardlist_size() const {
  return rewardlist_.size();
}
inline void HRInfo::clear_rewardlist() {
  rewardlist_.Clear();
}
inline const ::std::string& HRInfo::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:HRInfo.rewardList)
  return rewardlist_.Get(index);
}
inline ::std::string* HRInfo::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:HRInfo.rewardList)
  return rewardlist_.Mutable(index);
}
inline void HRInfo::set_rewardlist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HRInfo.rewardList)
  rewardlist_.Mutable(index)->assign(value);
}
inline void HRInfo::set_rewardlist(int index, const char* value) {
  rewardlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HRInfo.rewardList)
}
inline void HRInfo::set_rewardlist(int index, const char* value, size_t size) {
  rewardlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HRInfo.rewardList)
}
inline ::std::string* HRInfo::add_rewardlist() {
  return rewardlist_.Add();
}
inline void HRInfo::add_rewardlist(const ::std::string& value) {
  rewardlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HRInfo.rewardList)
}
inline void HRInfo::add_rewardlist(const char* value) {
  rewardlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HRInfo.rewardList)
}
inline void HRInfo::add_rewardlist(const char* value, size_t size) {
  rewardlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HRInfo.rewardList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HRInfo::rewardlist() const {
  // @@protoc_insertion_point(field_list:HRInfo.rewardList)
  return rewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HRInfo::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:HRInfo.rewardList)
  return &rewardlist_;
}

// optional int64 startTime = 2;
inline bool HRInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HRInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HRInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HRInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 HRInfo::starttime() const {
  // @@protoc_insertion_point(field_get:HRInfo.startTime)
  return starttime_;
}
inline void HRInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.startTime)
}

// optional int64 endTime = 3;
inline bool HRInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HRInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HRInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HRInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 HRInfo::endtime() const {
  // @@protoc_insertion_point(field_get:HRInfo.endTime)
  return endtime_;
}
inline void HRInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.endTime)
}

// optional int32 jackPotScore = 4;
inline bool HRInfo::has_jackpotscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HRInfo::set_has_jackpotscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HRInfo::clear_has_jackpotscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HRInfo::clear_jackpotscore() {
  jackpotscore_ = 0;
  clear_has_jackpotscore();
}
inline ::google::protobuf::int32 HRInfo::jackpotscore() const {
  // @@protoc_insertion_point(field_get:HRInfo.jackPotScore)
  return jackpotscore_;
}
inline void HRInfo::set_jackpotscore(::google::protobuf::int32 value) {
  set_has_jackpotscore();
  jackpotscore_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.jackPotScore)
}

// optional int32 jackPotMoney = 5;
inline bool HRInfo::has_jackpotmoney() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HRInfo::set_has_jackpotmoney() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HRInfo::clear_has_jackpotmoney() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HRInfo::clear_jackpotmoney() {
  jackpotmoney_ = 0;
  clear_has_jackpotmoney();
}
inline ::google::protobuf::int32 HRInfo::jackpotmoney() const {
  // @@protoc_insertion_point(field_get:HRInfo.jackPotMoney)
  return jackpotmoney_;
}
inline void HRInfo::set_jackpotmoney(::google::protobuf::int32 value) {
  set_has_jackpotmoney();
  jackpotmoney_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.jackPotMoney)
}

// optional int32 percent = 6;
inline bool HRInfo::has_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HRInfo::set_has_percent() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HRInfo::clear_has_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HRInfo::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 HRInfo::percent() const {
  // @@protoc_insertion_point(field_get:HRInfo.percent)
  return percent_;
}
inline void HRInfo::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.percent)
}

// optional int32 integral = 7;
inline bool HRInfo::has_integral() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HRInfo::set_has_integral() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HRInfo::clear_has_integral() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HRInfo::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 HRInfo::integral() const {
  // @@protoc_insertion_point(field_get:HRInfo.integral)
  return integral_;
}
inline void HRInfo::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.integral)
}

// optional int32 maxSelectNum = 8;
inline bool HRInfo::has_maxselectnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HRInfo::set_has_maxselectnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HRInfo::clear_has_maxselectnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HRInfo::clear_maxselectnum() {
  maxselectnum_ = 0;
  clear_has_maxselectnum();
}
inline ::google::protobuf::int32 HRInfo::maxselectnum() const {
  // @@protoc_insertion_point(field_get:HRInfo.maxSelectNum)
  return maxselectnum_;
}
inline void HRInfo::set_maxselectnum(::google::protobuf::int32 value) {
  set_has_maxselectnum();
  maxselectnum_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.maxSelectNum)
}

// optional int32 lastPond = 9;
inline bool HRInfo::has_lastpond() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HRInfo::set_has_lastpond() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HRInfo::clear_has_lastpond() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HRInfo::clear_lastpond() {
  lastpond_ = 0;
  clear_has_lastpond();
}
inline ::google::protobuf::int32 HRInfo::lastpond() const {
  // @@protoc_insertion_point(field_get:HRInfo.lastPond)
  return lastpond_;
}
inline void HRInfo::set_lastpond(::google::protobuf::int32 value) {
  set_has_lastpond();
  lastpond_ = value;
  // @@protoc_insertion_point(field_set:HRInfo.lastPond)
}

// -------------------------------------------------------------------

// CGHappyRoll

// optional int32 type = 1;
inline bool CGHappyRoll::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGHappyRoll::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGHappyRoll::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGHappyRoll::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGHappyRoll::type() const {
  // @@protoc_insertion_point(field_get:CGHappyRoll.type)
  return type_;
}
inline void CGHappyRoll::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGHappyRoll.type)
}

// -------------------------------------------------------------------

// GCHappyRoll

// optional int32 type = 1;
inline bool GCHappyRoll::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCHappyRoll::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCHappyRoll::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCHappyRoll::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCHappyRoll::type() const {
  // @@protoc_insertion_point(field_get:GCHappyRoll.type)
  return type_;
}
inline void GCHappyRoll::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCHappyRoll.type)
}

// optional .HRInfo hrInfo = 2;
inline bool GCHappyRoll::has_hrinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCHappyRoll::set_has_hrinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCHappyRoll::clear_has_hrinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCHappyRoll::clear_hrinfo() {
  if (hrinfo_ != NULL) hrinfo_->::HRInfo::Clear();
  clear_has_hrinfo();
}
inline const ::HRInfo& GCHappyRoll::hrinfo() const {
  // @@protoc_insertion_point(field_get:GCHappyRoll.hrInfo)
  return hrinfo_ != NULL ? *hrinfo_ : *default_instance_->hrinfo_;
}
inline ::HRInfo* GCHappyRoll::mutable_hrinfo() {
  set_has_hrinfo();
  if (hrinfo_ == NULL) hrinfo_ = new ::HRInfo;
  // @@protoc_insertion_point(field_mutable:GCHappyRoll.hrInfo)
  return hrinfo_;
}
inline ::HRInfo* GCHappyRoll::release_hrinfo() {
  clear_has_hrinfo();
  ::HRInfo* temp = hrinfo_;
  hrinfo_ = NULL;
  return temp;
}
inline void GCHappyRoll::set_allocated_hrinfo(::HRInfo* hrinfo) {
  delete hrinfo_;
  hrinfo_ = hrinfo;
  if (hrinfo) {
    set_has_hrinfo();
  } else {
    clear_has_hrinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCHappyRoll.hrInfo)
}

// optional int32 haveMoneyNum = 3;
inline bool GCHappyRoll::has_havemoneynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCHappyRoll::set_has_havemoneynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCHappyRoll::clear_has_havemoneynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCHappyRoll::clear_havemoneynum() {
  havemoneynum_ = 0;
  clear_has_havemoneynum();
}
inline ::google::protobuf::int32 GCHappyRoll::havemoneynum() const {
  // @@protoc_insertion_point(field_get:GCHappyRoll.haveMoneyNum)
  return havemoneynum_;
}
inline void GCHappyRoll::set_havemoneynum(::google::protobuf::int32 value) {
  set_has_havemoneynum();
  havemoneynum_ = value;
  // @@protoc_insertion_point(field_set:GCHappyRoll.haveMoneyNum)
}

// -------------------------------------------------------------------

// GCHappyRollRewardList

// repeated .HRRewardInfo hrRewardList = 1;
inline int GCHappyRollRewardList::hrrewardlist_size() const {
  return hrrewardlist_.size();
}
inline void GCHappyRollRewardList::clear_hrrewardlist() {
  hrrewardlist_.Clear();
}
inline const ::HRRewardInfo& GCHappyRollRewardList::hrrewardlist(int index) const {
  // @@protoc_insertion_point(field_get:GCHappyRollRewardList.hrRewardList)
  return hrrewardlist_.Get(index);
}
inline ::HRRewardInfo* GCHappyRollRewardList::mutable_hrrewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:GCHappyRollRewardList.hrRewardList)
  return hrrewardlist_.Mutable(index);
}
inline ::HRRewardInfo* GCHappyRollRewardList::add_hrrewardlist() {
  // @@protoc_insertion_point(field_add:GCHappyRollRewardList.hrRewardList)
  return hrrewardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HRRewardInfo >&
GCHappyRollRewardList::hrrewardlist() const {
  // @@protoc_insertion_point(field_list:GCHappyRollRewardList.hrRewardList)
  return hrrewardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::HRRewardInfo >*
GCHappyRollRewardList::mutable_hrrewardlist() {
  // @@protoc_insertion_point(field_mutable_list:GCHappyRollRewardList.hrRewardList)
  return &hrrewardlist_;
}

// repeated int32 hrMulList = 2;
inline int GCHappyRollRewardList::hrmullist_size() const {
  return hrmullist_.size();
}
inline void GCHappyRollRewardList::clear_hrmullist() {
  hrmullist_.Clear();
}
inline ::google::protobuf::int32 GCHappyRollRewardList::hrmullist(int index) const {
  // @@protoc_insertion_point(field_get:GCHappyRollRewardList.hrMulList)
  return hrmullist_.Get(index);
}
inline void GCHappyRollRewardList::set_hrmullist(int index, ::google::protobuf::int32 value) {
  hrmullist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCHappyRollRewardList.hrMulList)
}
inline void GCHappyRollRewardList::add_hrmullist(::google::protobuf::int32 value) {
  hrmullist_.Add(value);
  // @@protoc_insertion_point(field_add:GCHappyRollRewardList.hrMulList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCHappyRollRewardList::hrmullist() const {
  // @@protoc_insertion_point(field_list:GCHappyRollRewardList.hrMulList)
  return hrmullist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCHappyRollRewardList::mutable_hrmullist() {
  // @@protoc_insertion_point(field_mutable_list:GCHappyRollRewardList.hrMulList)
  return &hrmullist_;
}

// repeated int32 hrMulDesList = 3;
inline int GCHappyRollRewardList::hrmuldeslist_size() const {
  return hrmuldeslist_.size();
}
inline void GCHappyRollRewardList::clear_hrmuldeslist() {
  hrmuldeslist_.Clear();
}
inline ::google::protobuf::int32 GCHappyRollRewardList::hrmuldeslist(int index) const {
  // @@protoc_insertion_point(field_get:GCHappyRollRewardList.hrMulDesList)
  return hrmuldeslist_.Get(index);
}
inline void GCHappyRollRewardList::set_hrmuldeslist(int index, ::google::protobuf::int32 value) {
  hrmuldeslist_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCHappyRollRewardList.hrMulDesList)
}
inline void GCHappyRollRewardList::add_hrmuldeslist(::google::protobuf::int32 value) {
  hrmuldeslist_.Add(value);
  // @@protoc_insertion_point(field_add:GCHappyRollRewardList.hrMulDesList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCHappyRollRewardList::hrmuldeslist() const {
  // @@protoc_insertion_point(field_list:GCHappyRollRewardList.hrMulDesList)
  return hrmuldeslist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCHappyRollRewardList::mutable_hrmuldeslist() {
  // @@protoc_insertion_point(field_mutable_list:GCHappyRollRewardList.hrMulDesList)
  return &hrmuldeslist_;
}

// -------------------------------------------------------------------

// GCHappyRollJackPotList

// repeated .ShowInfo shows = 1;
inline int GCHappyRollJackPotList::shows_size() const {
  return shows_.size();
}
inline void GCHappyRollJackPotList::clear_shows() {
  shows_.Clear();
}
inline const ::ShowInfo& GCHappyRollJackPotList::shows(int index) const {
  // @@protoc_insertion_point(field_get:GCHappyRollJackPotList.shows)
  return shows_.Get(index);
}
inline ::ShowInfo* GCHappyRollJackPotList::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:GCHappyRollJackPotList.shows)
  return shows_.Mutable(index);
}
inline ::ShowInfo* GCHappyRollJackPotList::add_shows() {
  // @@protoc_insertion_point(field_add:GCHappyRollJackPotList.shows)
  return shows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShowInfo >&
GCHappyRollJackPotList::shows() const {
  // @@protoc_insertion_point(field_list:GCHappyRollJackPotList.shows)
  return shows_;
}
inline ::google::protobuf::RepeatedPtrField< ::ShowInfo >*
GCHappyRollJackPotList::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:GCHappyRollJackPotList.shows)
  return &shows_;
}

// -------------------------------------------------------------------

// CGLottery

// repeated int32 choseRewardIDList = 1;
inline int CGLottery::choserewardidlist_size() const {
  return choserewardidlist_.size();
}
inline void CGLottery::clear_choserewardidlist() {
  choserewardidlist_.Clear();
}
inline ::google::protobuf::int32 CGLottery::choserewardidlist(int index) const {
  // @@protoc_insertion_point(field_get:CGLottery.choseRewardIDList)
  return choserewardidlist_.Get(index);
}
inline void CGLottery::set_choserewardidlist(int index, ::google::protobuf::int32 value) {
  choserewardidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:CGLottery.choseRewardIDList)
}
inline void CGLottery::add_choserewardidlist(::google::protobuf::int32 value) {
  choserewardidlist_.Add(value);
  // @@protoc_insertion_point(field_add:CGLottery.choseRewardIDList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGLottery::choserewardidlist() const {
  // @@protoc_insertion_point(field_list:CGLottery.choseRewardIDList)
  return choserewardidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGLottery::mutable_choserewardidlist() {
  // @@protoc_insertion_point(field_mutable_list:CGLottery.choseRewardIDList)
  return &choserewardidlist_;
}

// optional int32 choseMultiple = 2;
inline bool CGLottery::has_chosemultiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGLottery::set_has_chosemultiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGLottery::clear_has_chosemultiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGLottery::clear_chosemultiple() {
  chosemultiple_ = 0;
  clear_has_chosemultiple();
}
inline ::google::protobuf::int32 CGLottery::chosemultiple() const {
  // @@protoc_insertion_point(field_get:CGLottery.choseMultiple)
  return chosemultiple_;
}
inline void CGLottery::set_chosemultiple(::google::protobuf::int32 value) {
  set_has_chosemultiple();
  chosemultiple_ = value;
  // @@protoc_insertion_point(field_set:CGLottery.choseMultiple)
}

// -------------------------------------------------------------------

// GCLottery

// optional int32 result = 1;
inline bool GCLottery::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCLottery::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCLottery::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCLottery::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCLottery::result() const {
  // @@protoc_insertion_point(field_get:GCLottery.result)
  return result_;
}
inline void GCLottery::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCLottery.result)
}

// optional int32 targetID = 2;
inline bool GCLottery::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCLottery::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCLottery::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCLottery::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 GCLottery::targetid() const {
  // @@protoc_insertion_point(field_get:GCLottery.targetID)
  return targetid_;
}
inline void GCLottery::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:GCLottery.targetID)
}

// optional int32 integral = 3;
inline bool GCLottery::has_integral() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCLottery::set_has_integral() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCLottery::clear_has_integral() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCLottery::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 GCLottery::integral() const {
  // @@protoc_insertion_point(field_get:GCLottery.integral)
  return integral_;
}
inline void GCLottery::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
  // @@protoc_insertion_point(field_set:GCLottery.integral)
}

// -------------------------------------------------------------------

// CGHappyRollGetReward

// -------------------------------------------------------------------

// GCHappyRollGetRewardBack

// optional int32 result = 1;
inline bool GCHappyRollGetRewardBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCHappyRollGetRewardBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCHappyRollGetRewardBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCHappyRollGetRewardBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCHappyRollGetRewardBack::result() const {
  // @@protoc_insertion_point(field_get:GCHappyRollGetRewardBack.result)
  return result_;
}
inline void GCHappyRollGetRewardBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCHappyRollGetRewardBack.result)
}

// -------------------------------------------------------------------

// CGCheckHRUpdate

// -------------------------------------------------------------------

// GCVersion

// optional int32 version = 1;
inline bool GCVersion::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCVersion::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCVersion::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 GCVersion::version() const {
  // @@protoc_insertion_point(field_get:GCVersion.version)
  return version_;
}
inline void GCVersion::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:GCVersion.version)
}

// -------------------------------------------------------------------

// CGHappyRollBuyMoney

// optional int32 buyMoneyNum = 1;
inline bool CGHappyRollBuyMoney::has_buymoneynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGHappyRollBuyMoney::set_has_buymoneynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGHappyRollBuyMoney::clear_has_buymoneynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGHappyRollBuyMoney::clear_buymoneynum() {
  buymoneynum_ = 0;
  clear_has_buymoneynum();
}
inline ::google::protobuf::int32 CGHappyRollBuyMoney::buymoneynum() const {
  // @@protoc_insertion_point(field_get:CGHappyRollBuyMoney.buyMoneyNum)
  return buymoneynum_;
}
inline void CGHappyRollBuyMoney::set_buymoneynum(::google::protobuf::int32 value) {
  set_has_buymoneynum();
  buymoneynum_ = value;
  // @@protoc_insertion_point(field_set:CGHappyRollBuyMoney.buyMoneyNum)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HappyRollMessage_2eproto__INCLUDED
