// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighLadderMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HighLadderMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCPushHighLadderListBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushHighLadderListBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCHighLadderOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCHighLadderOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetHighLadderReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetHighLadderReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetHighLadderRewardBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetHighLadderRewardBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetAchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetAchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetAchievementDataBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetAchievementDataBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUseTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUseTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUseTitleBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUseTitleBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLockTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLockTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLockTitleBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLockTitleBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HighLadderMessage_2eproto() {
  protobuf_AddDesc_HighLadderMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HighLadderMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCPushHighLadderListBack_descriptor_ = file->message_type(0);
  static const int GCPushHighLadderListBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushHighLadderListBack, titlelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushHighLadderListBack, locked_),
  };
  GCPushHighLadderListBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushHighLadderListBack_descriptor_,
      GCPushHighLadderListBack::default_instance_,
      GCPushHighLadderListBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushHighLadderListBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushHighLadderListBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushHighLadderListBack));
  GCHighLadderOver_descriptor_ = file->message_type(1);
  static const int GCHighLadderOver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHighLadderOver, mvt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHighLadderOver, title_),
  };
  GCHighLadderOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCHighLadderOver_descriptor_,
      GCHighLadderOver::default_instance_,
      GCHighLadderOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHighLadderOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCHighLadderOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCHighLadderOver));
  CGGetHighLadderReward_descriptor_ = file->message_type(2);
  static const int CGGetHighLadderReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetHighLadderReward, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetHighLadderReward, achievementid_),
  };
  CGGetHighLadderReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetHighLadderReward_descriptor_,
      CGGetHighLadderReward::default_instance_,
      CGGetHighLadderReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetHighLadderReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetHighLadderReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetHighLadderReward));
  GCGetHighLadderRewardBack_descriptor_ = file->message_type(3);
  static const int GCGetHighLadderRewardBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, nextachievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, isover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, curachievementid_),
  };
  GCGetHighLadderRewardBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetHighLadderRewardBack_descriptor_,
      GCGetHighLadderRewardBack::default_instance_,
      GCGetHighLadderRewardBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetHighLadderRewardBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetHighLadderRewardBack));
  CGGetAchievementData_descriptor_ = file->message_type(4);
  static const int CGGetAchievementData_offsets_[1] = {
  };
  CGGetAchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetAchievementData_descriptor_,
      CGGetAchievementData::default_instance_,
      CGGetAchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetAchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetAchievementData));
  GCGetAchievementDataBack_descriptor_ = file->message_type(5);
  static const int GCGetAchievementDataBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementDataBack, mvt_),
  };
  GCGetAchievementDataBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetAchievementDataBack_descriptor_,
      GCGetAchievementDataBack::default_instance_,
      GCGetAchievementDataBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementDataBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetAchievementDataBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetAchievementDataBack));
  CGUseTitle_descriptor_ = file->message_type(6);
  static const int CGUseTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseTitle, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseTitle, operatetype_),
  };
  CGUseTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUseTitle_descriptor_,
      CGUseTitle::default_instance_,
      CGUseTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUseTitle));
  GCUseTitleBack_descriptor_ = file->message_type(7);
  static const int GCUseTitleBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseTitleBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseTitleBack, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseTitleBack, operatetype_),
  };
  GCUseTitleBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUseTitleBack_descriptor_,
      GCUseTitleBack::default_instance_,
      GCUseTitleBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseTitleBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseTitleBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUseTitleBack));
  CGLockTitle_descriptor_ = file->message_type(8);
  static const int CGLockTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLockTitle, lock_),
  };
  CGLockTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLockTitle_descriptor_,
      CGLockTitle::default_instance_,
      CGLockTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLockTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLockTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLockTitle));
  GCLockTitleBack_descriptor_ = file->message_type(9);
  static const int GCLockTitleBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLockTitleBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLockTitleBack, lock_),
  };
  GCLockTitleBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLockTitleBack_descriptor_,
      GCLockTitleBack::default_instance_,
      GCLockTitleBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLockTitleBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLockTitleBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLockTitleBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HighLadderMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushHighLadderListBack_descriptor_, &GCPushHighLadderListBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCHighLadderOver_descriptor_, &GCHighLadderOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetHighLadderReward_descriptor_, &CGGetHighLadderReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetHighLadderRewardBack_descriptor_, &GCGetHighLadderRewardBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetAchievementData_descriptor_, &CGGetAchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetAchievementDataBack_descriptor_, &GCGetAchievementDataBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUseTitle_descriptor_, &CGUseTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUseTitleBack_descriptor_, &GCUseTitleBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLockTitle_descriptor_, &CGLockTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLockTitleBack_descriptor_, &GCLockTitleBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HighLadderMessage_2eproto() {
  delete GCPushHighLadderListBack::default_instance_;
  delete GCPushHighLadderListBack_reflection_;
  delete GCHighLadderOver::default_instance_;
  delete GCHighLadderOver_reflection_;
  delete CGGetHighLadderReward::default_instance_;
  delete CGGetHighLadderReward_reflection_;
  delete GCGetHighLadderRewardBack::default_instance_;
  delete GCGetHighLadderRewardBack_reflection_;
  delete CGGetAchievementData::default_instance_;
  delete CGGetAchievementData_reflection_;
  delete GCGetAchievementDataBack::default_instance_;
  delete GCGetAchievementDataBack_reflection_;
  delete CGUseTitle::default_instance_;
  delete CGUseTitle_reflection_;
  delete GCUseTitleBack::default_instance_;
  delete GCUseTitleBack_reflection_;
  delete CGLockTitle::default_instance_;
  delete CGLockTitle_reflection_;
  delete GCLockTitleBack::default_instance_;
  delete GCLockTitleBack_reflection_;
}

void protobuf_AddDesc_HighLadderMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027HighLadderMessage.proto\032\022InnerMessage."
    "proto\"F\n\030GCPushHighLadderListBack\022\032\n\ttit"
    "lelist\030\001 \003(\0132\007.Titlel\022\016\n\006locked\030\002 \001(\005\"E\n"
    "\020GCHighLadderOver\022\031\n\003mvt\030\001 \001(\0132\014.Achieve"
    "ment\022\026\n\005title\030\002 \001(\0132\007.Titlel\"A\n\025CGGetHig"
    "hLadderReward\022\021\n\tcondition\030\001 \001(\005\022\025\n\rachi"
    "evementid\030\002 \001(\005\"n\n\031GCGetHighLadderReward"
    "Back\022\014\n\004flag\030\001 \001(\005\022\031\n\021nextachievementid\030"
    "\002 \001(\005\022\016\n\006isover\030\003 \001(\005\022\030\n\020curachievementi"
    "d\030\004 \001(\005\"\026\n\024CGGetAchievementData\"5\n\030GCGet"
    "AchievementDataBack\022\031\n\003mvt\030\001 \003(\0132\014.Achie"
    "vement\"2\n\nCGUseTitle\022\017\n\007titleid\030\001 \001(\005\022\023\n"
    "\013operateType\030\002 \001(\005\"K\n\016GCUseTitleBack\022\014\n\004"
    "flag\030\001 \001(\005\022\026\n\005title\030\002 \001(\0132\007.Titlel\022\023\n\013op"
    "erateType\030\003 \001(\005\"\033\n\013CGLockTitle\022\014\n\004lock\030\001"
    " \001(\005\"-\n\017GCLockTitleBack\022\014\n\004flag\030\001 \001(\005\022\014\n"
    "\004lock\030\002 \001(\005B\031\n\027com.mile.common.message", 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HighLadderMessage.proto", &protobuf_RegisterTypes);
  GCPushHighLadderListBack::default_instance_ = new GCPushHighLadderListBack();
  GCHighLadderOver::default_instance_ = new GCHighLadderOver();
  CGGetHighLadderReward::default_instance_ = new CGGetHighLadderReward();
  GCGetHighLadderRewardBack::default_instance_ = new GCGetHighLadderRewardBack();
  CGGetAchievementData::default_instance_ = new CGGetAchievementData();
  GCGetAchievementDataBack::default_instance_ = new GCGetAchievementDataBack();
  CGUseTitle::default_instance_ = new CGUseTitle();
  GCUseTitleBack::default_instance_ = new GCUseTitleBack();
  CGLockTitle::default_instance_ = new CGLockTitle();
  GCLockTitleBack::default_instance_ = new GCLockTitleBack();
  GCPushHighLadderListBack::default_instance_->InitAsDefaultInstance();
  GCHighLadderOver::default_instance_->InitAsDefaultInstance();
  CGGetHighLadderReward::default_instance_->InitAsDefaultInstance();
  GCGetHighLadderRewardBack::default_instance_->InitAsDefaultInstance();
  CGGetAchievementData::default_instance_->InitAsDefaultInstance();
  GCGetAchievementDataBack::default_instance_->InitAsDefaultInstance();
  CGUseTitle::default_instance_->InitAsDefaultInstance();
  GCUseTitleBack::default_instance_->InitAsDefaultInstance();
  CGLockTitle::default_instance_->InitAsDefaultInstance();
  GCLockTitleBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HighLadderMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HighLadderMessage_2eproto {
  StaticDescriptorInitializer_HighLadderMessage_2eproto() {
    protobuf_AddDesc_HighLadderMessage_2eproto();
  }
} static_descriptor_initializer_HighLadderMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCPushHighLadderListBack::kTitlelistFieldNumber;
const int GCPushHighLadderListBack::kLockedFieldNumber;
#endif  // !_MSC_VER

GCPushHighLadderListBack::GCPushHighLadderListBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushHighLadderListBack)
}

void GCPushHighLadderListBack::InitAsDefaultInstance() {
}

GCPushHighLadderListBack::GCPushHighLadderListBack(const GCPushHighLadderListBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushHighLadderListBack)
}

void GCPushHighLadderListBack::SharedCtor() {
  _cached_size_ = 0;
  locked_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushHighLadderListBack::~GCPushHighLadderListBack() {
  // @@protoc_insertion_point(destructor:GCPushHighLadderListBack)
  SharedDtor();
}

void GCPushHighLadderListBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushHighLadderListBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushHighLadderListBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushHighLadderListBack_descriptor_;
}

const GCPushHighLadderListBack& GCPushHighLadderListBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCPushHighLadderListBack* GCPushHighLadderListBack::default_instance_ = NULL;

GCPushHighLadderListBack* GCPushHighLadderListBack::New() const {
  return new GCPushHighLadderListBack;
}

void GCPushHighLadderListBack::Clear() {
  locked_ = 0;
  titlelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushHighLadderListBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushHighLadderListBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Titlel titlelist = 1;
      case 1: {
        if (tag == 10) {
         parse_titlelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titlelist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_titlelist;
        if (input->ExpectTag(16)) goto parse_locked;
        break;
      }

      // optional int32 locked = 2;
      case 2: {
        if (tag == 16) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushHighLadderListBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushHighLadderListBack)
  return false;
#undef DO_
}

void GCPushHighLadderListBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushHighLadderListBack)
  // repeated .Titlel titlelist = 1;
  for (int i = 0; i < this->titlelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titlelist(i), output);
  }

  // optional int32 locked = 2;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->locked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushHighLadderListBack)
}

::google::protobuf::uint8* GCPushHighLadderListBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushHighLadderListBack)
  // repeated .Titlel titlelist = 1;
  for (int i = 0; i < this->titlelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titlelist(i), target);
  }

  // optional int32 locked = 2;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->locked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushHighLadderListBack)
  return target;
}

int GCPushHighLadderListBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 locked = 2;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locked());
    }

  }
  // repeated .Titlel titlelist = 1;
  total_size += 1 * this->titlelist_size();
  for (int i = 0; i < this->titlelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titlelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushHighLadderListBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushHighLadderListBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushHighLadderListBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushHighLadderListBack::MergeFrom(const GCPushHighLadderListBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  titlelist_.MergeFrom(from.titlelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_locked()) {
      set_locked(from.locked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushHighLadderListBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushHighLadderListBack::CopyFrom(const GCPushHighLadderListBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushHighLadderListBack::IsInitialized() const {

  return true;
}

void GCPushHighLadderListBack::Swap(GCPushHighLadderListBack* other) {
  if (other != this) {
    titlelist_.Swap(&other->titlelist_);
    std::swap(locked_, other->locked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushHighLadderListBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushHighLadderListBack_descriptor_;
  metadata.reflection = GCPushHighLadderListBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCHighLadderOver::kMvtFieldNumber;
const int GCHighLadderOver::kTitleFieldNumber;
#endif  // !_MSC_VER

GCHighLadderOver::GCHighLadderOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCHighLadderOver)
}

void GCHighLadderOver::InitAsDefaultInstance() {
  mvt_ = const_cast< ::Achievement*>(&::Achievement::default_instance());
  title_ = const_cast< ::Titlel*>(&::Titlel::default_instance());
}

GCHighLadderOver::GCHighLadderOver(const GCHighLadderOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCHighLadderOver)
}

void GCHighLadderOver::SharedCtor() {
  _cached_size_ = 0;
  mvt_ = NULL;
  title_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCHighLadderOver::~GCHighLadderOver() {
  // @@protoc_insertion_point(destructor:GCHighLadderOver)
  SharedDtor();
}

void GCHighLadderOver::SharedDtor() {
  if (this != default_instance_) {
    delete mvt_;
    delete title_;
  }
}

void GCHighLadderOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCHighLadderOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCHighLadderOver_descriptor_;
}

const GCHighLadderOver& GCHighLadderOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCHighLadderOver* GCHighLadderOver::default_instance_ = NULL;

GCHighLadderOver* GCHighLadderOver::New() const {
  return new GCHighLadderOver;
}

void GCHighLadderOver::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mvt()) {
      if (mvt_ != NULL) mvt_->::Achievement::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::Titlel::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCHighLadderOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCHighLadderOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Achievement mvt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional .Titlel title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCHighLadderOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCHighLadderOver)
  return false;
#undef DO_
}

void GCHighLadderOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCHighLadderOver)
  // optional .Achievement mvt = 1;
  if (has_mvt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mvt(), output);
  }

  // optional .Titlel title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCHighLadderOver)
}

::google::protobuf::uint8* GCHighLadderOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCHighLadderOver)
  // optional .Achievement mvt = 1;
  if (has_mvt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mvt(), target);
  }

  // optional .Titlel title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCHighLadderOver)
  return target;
}

int GCHighLadderOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Achievement mvt = 1;
    if (has_mvt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mvt());
    }

    // optional .Titlel title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCHighLadderOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCHighLadderOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCHighLadderOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCHighLadderOver::MergeFrom(const GCHighLadderOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mvt()) {
      mutable_mvt()->::Achievement::MergeFrom(from.mvt());
    }
    if (from.has_title()) {
      mutable_title()->::Titlel::MergeFrom(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCHighLadderOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCHighLadderOver::CopyFrom(const GCHighLadderOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCHighLadderOver::IsInitialized() const {

  return true;
}

void GCHighLadderOver::Swap(GCHighLadderOver* other) {
  if (other != this) {
    std::swap(mvt_, other->mvt_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCHighLadderOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCHighLadderOver_descriptor_;
  metadata.reflection = GCHighLadderOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetHighLadderReward::kConditionFieldNumber;
const int CGGetHighLadderReward::kAchievementidFieldNumber;
#endif  // !_MSC_VER

CGGetHighLadderReward::CGGetHighLadderReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetHighLadderReward)
}

void CGGetHighLadderReward::InitAsDefaultInstance() {
}

CGGetHighLadderReward::CGGetHighLadderReward(const CGGetHighLadderReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetHighLadderReward)
}

void CGGetHighLadderReward::SharedCtor() {
  _cached_size_ = 0;
  condition_ = 0;
  achievementid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetHighLadderReward::~CGGetHighLadderReward() {
  // @@protoc_insertion_point(destructor:CGGetHighLadderReward)
  SharedDtor();
}

void CGGetHighLadderReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetHighLadderReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetHighLadderReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetHighLadderReward_descriptor_;
}

const CGGetHighLadderReward& CGGetHighLadderReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

CGGetHighLadderReward* CGGetHighLadderReward::default_instance_ = NULL;

CGGetHighLadderReward* CGGetHighLadderReward::New() const {
  return new CGGetHighLadderReward;
}

void CGGetHighLadderReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetHighLadderReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(condition_, achievementid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetHighLadderReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetHighLadderReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 condition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_achievementid;
        break;
      }

      // optional int32 achievementid = 2;
      case 2: {
        if (tag == 16) {
         parse_achievementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetHighLadderReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetHighLadderReward)
  return false;
#undef DO_
}

void CGGetHighLadderReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetHighLadderReward)
  // optional int32 condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->condition(), output);
  }

  // optional int32 achievementid = 2;
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->achievementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetHighLadderReward)
}

::google::protobuf::uint8* CGGetHighLadderReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetHighLadderReward)
  // optional int32 condition = 1;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->condition(), target);
  }

  // optional int32 achievementid = 2;
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->achievementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetHighLadderReward)
  return target;
}

int CGGetHighLadderReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 achievementid = 2;
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetHighLadderReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetHighLadderReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetHighLadderReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetHighLadderReward::MergeFrom(const CGGetHighLadderReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetHighLadderReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetHighLadderReward::CopyFrom(const CGGetHighLadderReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetHighLadderReward::IsInitialized() const {

  return true;
}

void CGGetHighLadderReward::Swap(CGGetHighLadderReward* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(achievementid_, other->achievementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetHighLadderReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetHighLadderReward_descriptor_;
  metadata.reflection = CGGetHighLadderReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetHighLadderRewardBack::kFlagFieldNumber;
const int GCGetHighLadderRewardBack::kNextachievementidFieldNumber;
const int GCGetHighLadderRewardBack::kIsoverFieldNumber;
const int GCGetHighLadderRewardBack::kCurachievementidFieldNumber;
#endif  // !_MSC_VER

GCGetHighLadderRewardBack::GCGetHighLadderRewardBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetHighLadderRewardBack)
}

void GCGetHighLadderRewardBack::InitAsDefaultInstance() {
}

GCGetHighLadderRewardBack::GCGetHighLadderRewardBack(const GCGetHighLadderRewardBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetHighLadderRewardBack)
}

void GCGetHighLadderRewardBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  nextachievementid_ = 0;
  isover_ = 0;
  curachievementid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetHighLadderRewardBack::~GCGetHighLadderRewardBack() {
  // @@protoc_insertion_point(destructor:GCGetHighLadderRewardBack)
  SharedDtor();
}

void GCGetHighLadderRewardBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetHighLadderRewardBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetHighLadderRewardBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetHighLadderRewardBack_descriptor_;
}

const GCGetHighLadderRewardBack& GCGetHighLadderRewardBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCGetHighLadderRewardBack* GCGetHighLadderRewardBack::default_instance_ = NULL;

GCGetHighLadderRewardBack* GCGetHighLadderRewardBack::New() const {
  return new GCGetHighLadderRewardBack;
}

void GCGetHighLadderRewardBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetHighLadderRewardBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, curachievementid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetHighLadderRewardBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetHighLadderRewardBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nextachievementid;
        break;
      }

      // optional int32 nextachievementid = 2;
      case 2: {
        if (tag == 16) {
         parse_nextachievementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextachievementid_)));
          set_has_nextachievementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isover;
        break;
      }

      // optional int32 isover = 3;
      case 3: {
        if (tag == 24) {
         parse_isover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isover_)));
          set_has_isover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curachievementid;
        break;
      }

      // optional int32 curachievementid = 4;
      case 4: {
        if (tag == 32) {
         parse_curachievementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curachievementid_)));
          set_has_curachievementid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetHighLadderRewardBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetHighLadderRewardBack)
  return false;
#undef DO_
}

void GCGetHighLadderRewardBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetHighLadderRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 nextachievementid = 2;
  if (has_nextachievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextachievementid(), output);
  }

  // optional int32 isover = 3;
  if (has_isover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isover(), output);
  }

  // optional int32 curachievementid = 4;
  if (has_curachievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curachievementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetHighLadderRewardBack)
}

::google::protobuf::uint8* GCGetHighLadderRewardBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetHighLadderRewardBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 nextachievementid = 2;
  if (has_nextachievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextachievementid(), target);
  }

  // optional int32 isover = 3;
  if (has_isover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isover(), target);
  }

  // optional int32 curachievementid = 4;
  if (has_curachievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curachievementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetHighLadderRewardBack)
  return target;
}

int GCGetHighLadderRewardBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 nextachievementid = 2;
    if (has_nextachievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextachievementid());
    }

    // optional int32 isover = 3;
    if (has_isover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isover());
    }

    // optional int32 curachievementid = 4;
    if (has_curachievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curachievementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetHighLadderRewardBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetHighLadderRewardBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetHighLadderRewardBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetHighLadderRewardBack::MergeFrom(const GCGetHighLadderRewardBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_nextachievementid()) {
      set_nextachievementid(from.nextachievementid());
    }
    if (from.has_isover()) {
      set_isover(from.isover());
    }
    if (from.has_curachievementid()) {
      set_curachievementid(from.curachievementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetHighLadderRewardBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetHighLadderRewardBack::CopyFrom(const GCGetHighLadderRewardBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetHighLadderRewardBack::IsInitialized() const {

  return true;
}

void GCGetHighLadderRewardBack::Swap(GCGetHighLadderRewardBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(nextachievementid_, other->nextachievementid_);
    std::swap(isover_, other->isover_);
    std::swap(curachievementid_, other->curachievementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetHighLadderRewardBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetHighLadderRewardBack_descriptor_;
  metadata.reflection = GCGetHighLadderRewardBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetAchievementData::CGGetAchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetAchievementData)
}

void CGGetAchievementData::InitAsDefaultInstance() {
}

CGGetAchievementData::CGGetAchievementData(const CGGetAchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetAchievementData)
}

void CGGetAchievementData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetAchievementData::~CGGetAchievementData() {
  // @@protoc_insertion_point(destructor:CGGetAchievementData)
  SharedDtor();
}

void CGGetAchievementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetAchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetAchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetAchievementData_descriptor_;
}

const CGGetAchievementData& CGGetAchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

CGGetAchievementData* CGGetAchievementData::default_instance_ = NULL;

CGGetAchievementData* CGGetAchievementData::New() const {
  return new CGGetAchievementData;
}

void CGGetAchievementData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetAchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetAchievementData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetAchievementData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetAchievementData)
  return false;
#undef DO_
}

void CGGetAchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetAchievementData)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetAchievementData)
}

::google::protobuf::uint8* CGGetAchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetAchievementData)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetAchievementData)
  return target;
}

int CGGetAchievementData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetAchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetAchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetAchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetAchievementData::MergeFrom(const CGGetAchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetAchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetAchievementData::CopyFrom(const CGGetAchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetAchievementData::IsInitialized() const {

  return true;
}

void CGGetAchievementData::Swap(CGGetAchievementData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetAchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetAchievementData_descriptor_;
  metadata.reflection = CGGetAchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetAchievementDataBack::kMvtFieldNumber;
#endif  // !_MSC_VER

GCGetAchievementDataBack::GCGetAchievementDataBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetAchievementDataBack)
}

void GCGetAchievementDataBack::InitAsDefaultInstance() {
}

GCGetAchievementDataBack::GCGetAchievementDataBack(const GCGetAchievementDataBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetAchievementDataBack)
}

void GCGetAchievementDataBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetAchievementDataBack::~GCGetAchievementDataBack() {
  // @@protoc_insertion_point(destructor:GCGetAchievementDataBack)
  SharedDtor();
}

void GCGetAchievementDataBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetAchievementDataBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetAchievementDataBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetAchievementDataBack_descriptor_;
}

const GCGetAchievementDataBack& GCGetAchievementDataBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCGetAchievementDataBack* GCGetAchievementDataBack::default_instance_ = NULL;

GCGetAchievementDataBack* GCGetAchievementDataBack::New() const {
  return new GCGetAchievementDataBack;
}

void GCGetAchievementDataBack::Clear() {
  mvt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetAchievementDataBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetAchievementDataBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Achievement mvt = 1;
      case 1: {
        if (tag == 10) {
         parse_mvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mvt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetAchievementDataBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetAchievementDataBack)
  return false;
#undef DO_
}

void GCGetAchievementDataBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetAchievementDataBack)
  // repeated .Achievement mvt = 1;
  for (int i = 0; i < this->mvt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mvt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetAchievementDataBack)
}

::google::protobuf::uint8* GCGetAchievementDataBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetAchievementDataBack)
  // repeated .Achievement mvt = 1;
  for (int i = 0; i < this->mvt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mvt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetAchievementDataBack)
  return target;
}

int GCGetAchievementDataBack::ByteSize() const {
  int total_size = 0;

  // repeated .Achievement mvt = 1;
  total_size += 1 * this->mvt_size();
  for (int i = 0; i < this->mvt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetAchievementDataBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetAchievementDataBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetAchievementDataBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetAchievementDataBack::MergeFrom(const GCGetAchievementDataBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mvt_.MergeFrom(from.mvt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetAchievementDataBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetAchievementDataBack::CopyFrom(const GCGetAchievementDataBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetAchievementDataBack::IsInitialized() const {

  return true;
}

void GCGetAchievementDataBack::Swap(GCGetAchievementDataBack* other) {
  if (other != this) {
    mvt_.Swap(&other->mvt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetAchievementDataBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetAchievementDataBack_descriptor_;
  metadata.reflection = GCGetAchievementDataBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUseTitle::kTitleidFieldNumber;
const int CGUseTitle::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

CGUseTitle::CGUseTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUseTitle)
}

void CGUseTitle::InitAsDefaultInstance() {
}

CGUseTitle::CGUseTitle(const CGUseTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUseTitle)
}

void CGUseTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  operatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUseTitle::~CGUseTitle() {
  // @@protoc_insertion_point(destructor:CGUseTitle)
  SharedDtor();
}

void CGUseTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUseTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUseTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUseTitle_descriptor_;
}

const CGUseTitle& CGUseTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

CGUseTitle* CGUseTitle::default_instance_ = NULL;

CGUseTitle* CGUseTitle::New() const {
  return new CGUseTitle;
}

void CGUseTitle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGUseTitle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(titleid_, operatetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUseTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUseTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 titleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operateType;
        break;
      }

      // optional int32 operateType = 2;
      case 2: {
        if (tag == 16) {
         parse_operateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUseTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUseTitle)
  return false;
#undef DO_
}

void CGUseTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUseTitle)
  // optional int32 titleid = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // optional int32 operateType = 2;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUseTitle)
}

::google::protobuf::uint8* CGUseTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUseTitle)
  // optional int32 titleid = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // optional int32 operateType = 2;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUseTitle)
  return target;
}

int CGUseTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 titleid = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 operateType = 2;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUseTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUseTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUseTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUseTitle::MergeFrom(const CGUseTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUseTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUseTitle::CopyFrom(const CGUseTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseTitle::IsInitialized() const {

  return true;
}

void CGUseTitle::Swap(CGUseTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUseTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUseTitle_descriptor_;
  metadata.reflection = CGUseTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUseTitleBack::kFlagFieldNumber;
const int GCUseTitleBack::kTitleFieldNumber;
const int GCUseTitleBack::kOperateTypeFieldNumber;
#endif  // !_MSC_VER

GCUseTitleBack::GCUseTitleBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUseTitleBack)
}

void GCUseTitleBack::InitAsDefaultInstance() {
  title_ = const_cast< ::Titlel*>(&::Titlel::default_instance());
}

GCUseTitleBack::GCUseTitleBack(const GCUseTitleBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUseTitleBack)
}

void GCUseTitleBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  title_ = NULL;
  operatetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUseTitleBack::~GCUseTitleBack() {
  // @@protoc_insertion_point(destructor:GCUseTitleBack)
  SharedDtor();
}

void GCUseTitleBack::SharedDtor() {
  if (this != default_instance_) {
    delete title_;
  }
}

void GCUseTitleBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUseTitleBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUseTitleBack_descriptor_;
}

const GCUseTitleBack& GCUseTitleBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCUseTitleBack* GCUseTitleBack::default_instance_ = NULL;

GCUseTitleBack* GCUseTitleBack::New() const {
  return new GCUseTitleBack;
}

void GCUseTitleBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCUseTitleBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(flag_, operatetype_);
    if (has_title()) {
      if (title_ != NULL) title_->::Titlel::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUseTitleBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUseTitleBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional .Titlel title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operateType;
        break;
      }

      // optional int32 operateType = 3;
      case 3: {
        if (tag == 24) {
         parse_operateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetype_)));
          set_has_operatetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUseTitleBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUseTitleBack)
  return false;
#undef DO_
}

void GCUseTitleBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUseTitleBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .Titlel title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title(), output);
  }

  // optional int32 operateType = 3;
  if (has_operatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUseTitleBack)
}

::google::protobuf::uint8* GCUseTitleBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUseTitleBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .Titlel title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title(), target);
  }

  // optional int32 operateType = 3;
  if (has_operatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUseTitleBack)
  return target;
}

int GCUseTitleBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .Titlel title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional int32 operateType = 3;
    if (has_operatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUseTitleBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUseTitleBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUseTitleBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUseTitleBack::MergeFrom(const GCUseTitleBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_title()) {
      mutable_title()->::Titlel::MergeFrom(from.title());
    }
    if (from.has_operatetype()) {
      set_operatetype(from.operatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUseTitleBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUseTitleBack::CopyFrom(const GCUseTitleBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUseTitleBack::IsInitialized() const {

  return true;
}

void GCUseTitleBack::Swap(GCUseTitleBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(title_, other->title_);
    std::swap(operatetype_, other->operatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUseTitleBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUseTitleBack_descriptor_;
  metadata.reflection = GCUseTitleBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLockTitle::kLockFieldNumber;
#endif  // !_MSC_VER

CGLockTitle::CGLockTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLockTitle)
}

void CGLockTitle::InitAsDefaultInstance() {
}

CGLockTitle::CGLockTitle(const CGLockTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLockTitle)
}

void CGLockTitle::SharedCtor() {
  _cached_size_ = 0;
  lock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLockTitle::~CGLockTitle() {
  // @@protoc_insertion_point(destructor:CGLockTitle)
  SharedDtor();
}

void CGLockTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLockTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLockTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLockTitle_descriptor_;
}

const CGLockTitle& CGLockTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

CGLockTitle* CGLockTitle::default_instance_ = NULL;

CGLockTitle* CGLockTitle::New() const {
  return new CGLockTitle;
}

void CGLockTitle::Clear() {
  lock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLockTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLockTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lock = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLockTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLockTitle)
  return false;
#undef DO_
}

void CGLockTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLockTitle)
  // optional int32 lock = 1;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLockTitle)
}

::google::protobuf::uint8* CGLockTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLockTitle)
  // optional int32 lock = 1;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLockTitle)
  return target;
}

int CGLockTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lock = 1;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLockTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLockTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLockTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLockTitle::MergeFrom(const CGLockTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLockTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLockTitle::CopyFrom(const CGLockTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLockTitle::IsInitialized() const {

  return true;
}

void CGLockTitle::Swap(CGLockTitle* other) {
  if (other != this) {
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLockTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLockTitle_descriptor_;
  metadata.reflection = CGLockTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLockTitleBack::kFlagFieldNumber;
const int GCLockTitleBack::kLockFieldNumber;
#endif  // !_MSC_VER

GCLockTitleBack::GCLockTitleBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLockTitleBack)
}

void GCLockTitleBack::InitAsDefaultInstance() {
}

GCLockTitleBack::GCLockTitleBack(const GCLockTitleBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLockTitleBack)
}

void GCLockTitleBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  lock_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLockTitleBack::~GCLockTitleBack() {
  // @@protoc_insertion_point(destructor:GCLockTitleBack)
  SharedDtor();
}

void GCLockTitleBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLockTitleBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLockTitleBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLockTitleBack_descriptor_;
}

const GCLockTitleBack& GCLockTitleBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HighLadderMessage_2eproto();
  return *default_instance_;
}

GCLockTitleBack* GCLockTitleBack::default_instance_ = NULL;

GCLockTitleBack* GCLockTitleBack::New() const {
  return new GCLockTitleBack;
}

void GCLockTitleBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLockTitleBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, lock_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLockTitleBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLockTitleBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock;
        break;
      }

      // optional int32 lock = 2;
      case 2: {
        if (tag == 16) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLockTitleBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLockTitleBack)
  return false;
#undef DO_
}

void GCLockTitleBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLockTitleBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 lock = 2;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLockTitleBack)
}

::google::protobuf::uint8* GCLockTitleBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLockTitleBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 lock = 2;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLockTitleBack)
  return target;
}

int GCLockTitleBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 lock = 2;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLockTitleBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLockTitleBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLockTitleBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLockTitleBack::MergeFrom(const GCLockTitleBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLockTitleBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLockTitleBack::CopyFrom(const GCLockTitleBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLockTitleBack::IsInitialized() const {

  return true;
}

void GCLockTitleBack::Swap(GCLockTitleBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLockTitleBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLockTitleBack_descriptor_;
  metadata.reflection = GCLockTitleBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
