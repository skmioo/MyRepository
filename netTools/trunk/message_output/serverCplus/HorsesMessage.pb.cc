// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HorsesMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HorsesMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCBackHorseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBackHorseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChoseHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChoseHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChoseHorseBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChoseHorseBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUseHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUseHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUseHorseBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUseHorseBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCultureToUpStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCultureToUpStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCultureToUpStarBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCultureToUpStarBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLookHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLookHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLookHorseBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLookHorseBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetNewHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetNewHorse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HorsesMessage_2eproto() {
  protobuf_AddDesc_HorsesMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HorsesMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCBackHorseData_descriptor_ = file->message_type(0);
  static const int GCBackHorseData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackHorseData, horseinfo_),
  };
  GCBackHorseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBackHorseData_descriptor_,
      GCBackHorseData::default_instance_,
      GCBackHorseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackHorseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBackHorseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBackHorseData));
  CGChoseHorse_descriptor_ = file->message_type(1);
  static const int CGChoseHorse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChoseHorse, horseid_),
  };
  CGChoseHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChoseHorse_descriptor_,
      CGChoseHorse::default_instance_,
      CGChoseHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChoseHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChoseHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChoseHorse));
  GCChoseHorseBack_descriptor_ = file->message_type(2);
  static const int GCChoseHorseBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChoseHorseBack, flag_),
  };
  GCChoseHorseBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChoseHorseBack_descriptor_,
      GCChoseHorseBack::default_instance_,
      GCChoseHorseBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChoseHorseBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChoseHorseBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChoseHorseBack));
  CGUseHorse_descriptor_ = file->message_type(3);
  static const int CGUseHorse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseHorse, useflag_),
  };
  CGUseHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUseHorse_descriptor_,
      CGUseHorse::default_instance_,
      CGUseHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUseHorse));
  GCUseHorseBack_descriptor_ = file->message_type(4);
  static const int GCUseHorseBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseHorseBack, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseHorseBack, useflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseHorseBack, flag_),
  };
  GCUseHorseBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUseHorseBack_descriptor_,
      GCUseHorseBack::default_instance_,
      GCUseHorseBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseHorseBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseHorseBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUseHorseBack));
  CGCultureToUpStar_descriptor_ = file->message_type(5);
  static const int CGCultureToUpStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCultureToUpStar, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCultureToUpStar, usegemflag_),
  };
  CGCultureToUpStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCultureToUpStar_descriptor_,
      CGCultureToUpStar::default_instance_,
      CGCultureToUpStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCultureToUpStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCultureToUpStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCultureToUpStar));
  GCCultureToUpStarBack_descriptor_ = file->message_type(6);
  static const int GCCultureToUpStarBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, luckflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, horseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, newhorseinfo_),
  };
  GCCultureToUpStarBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCultureToUpStarBack_descriptor_,
      GCCultureToUpStarBack::default_instance_,
      GCCultureToUpStarBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCultureToUpStarBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCultureToUpStarBack));
  CGLookHorse_descriptor_ = file->message_type(7);
  static const int CGLookHorse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookHorse, playeruid_),
  };
  CGLookHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLookHorse_descriptor_,
      CGLookHorse::default_instance_,
      CGLookHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLookHorse));
  GCLookHorseBack_descriptor_ = file->message_type(8);
  static const int GCLookHorseBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookHorseBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookHorseBack, horseid_),
  };
  GCLookHorseBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLookHorseBack_descriptor_,
      GCLookHorseBack::default_instance_,
      GCLookHorseBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookHorseBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookHorseBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLookHorseBack));
  GCGetNewHorse_descriptor_ = file->message_type(9);
  static const int GCGetNewHorse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNewHorse, horseid_),
  };
  GCGetNewHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetNewHorse_descriptor_,
      GCGetNewHorse::default_instance_,
      GCGetNewHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNewHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetNewHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetNewHorse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HorsesMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBackHorseData_descriptor_, &GCBackHorseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChoseHorse_descriptor_, &CGChoseHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChoseHorseBack_descriptor_, &GCChoseHorseBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUseHorse_descriptor_, &CGUseHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUseHorseBack_descriptor_, &GCUseHorseBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCultureToUpStar_descriptor_, &CGCultureToUpStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCultureToUpStarBack_descriptor_, &GCCultureToUpStarBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLookHorse_descriptor_, &CGLookHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLookHorseBack_descriptor_, &GCLookHorseBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetNewHorse_descriptor_, &GCGetNewHorse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HorsesMessage_2eproto() {
  delete GCBackHorseData::default_instance_;
  delete GCBackHorseData_reflection_;
  delete CGChoseHorse::default_instance_;
  delete CGChoseHorse_reflection_;
  delete GCChoseHorseBack::default_instance_;
  delete GCChoseHorseBack_reflection_;
  delete CGUseHorse::default_instance_;
  delete CGUseHorse_reflection_;
  delete GCUseHorseBack::default_instance_;
  delete GCUseHorseBack_reflection_;
  delete CGCultureToUpStar::default_instance_;
  delete CGCultureToUpStar_reflection_;
  delete GCCultureToUpStarBack::default_instance_;
  delete GCCultureToUpStarBack_reflection_;
  delete CGLookHorse::default_instance_;
  delete CGLookHorse_reflection_;
  delete GCLookHorseBack::default_instance_;
  delete GCLookHorseBack_reflection_;
  delete GCGetNewHorse::default_instance_;
  delete GCGetNewHorse_reflection_;
}

void protobuf_AddDesc_HorsesMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023HorsesMessage.proto\032\022InnerMessage.prot"
    "o\"0\n\017GCBackHorseData\022\035\n\thorseInfo\030\001 \003(\0132"
    "\n.HorseInfo\"\037\n\014CGChoseHorse\022\017\n\007horseid\030\001"
    " \001(\003\" \n\020GCChoseHorseBack\022\014\n\004flag\030\001 \001(\005\"\035"
    "\n\nCGUseHorse\022\017\n\007useflag\030\001 \001(\005\"=\n\016GCUseHo"
    "rseBack\022\014\n\004guid\030\001 \001(\003\022\017\n\007useflag\030\002 \001(\005\022\014"
    "\n\004flag\030\003 \001(\005\"8\n\021CGCultureToUpStar\022\017\n\007hor"
    "seid\030\001 \001(\003\022\022\n\nusegemflag\030\002 \001(\005\"x\n\025GCCult"
    "ureToUpStarBack\022\014\n\004flag\030\001 \001(\005\022\020\n\010luckfla"
    "g\030\002 \001(\005\022\035\n\thorseInfo\030\003 \001(\0132\n.HorseInfo\022 "
    "\n\014newhorseInfo\030\004 \001(\0132\n.HorseInfo\" \n\013CGLo"
    "okHorse\022\021\n\tplayerUid\030\001 \001(\003\"0\n\017GCLookHors"
    "eBack\022\014\n\004flag\030\001 \001(\005\022\017\n\007horseId\030\002 \001(\005\" \n\r"
    "GCGetNewHorse\022\017\n\007horseId\030\001 \001(\005B\031\n\027com.mi"
    "le.common.message", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HorsesMessage.proto", &protobuf_RegisterTypes);
  GCBackHorseData::default_instance_ = new GCBackHorseData();
  CGChoseHorse::default_instance_ = new CGChoseHorse();
  GCChoseHorseBack::default_instance_ = new GCChoseHorseBack();
  CGUseHorse::default_instance_ = new CGUseHorse();
  GCUseHorseBack::default_instance_ = new GCUseHorseBack();
  CGCultureToUpStar::default_instance_ = new CGCultureToUpStar();
  GCCultureToUpStarBack::default_instance_ = new GCCultureToUpStarBack();
  CGLookHorse::default_instance_ = new CGLookHorse();
  GCLookHorseBack::default_instance_ = new GCLookHorseBack();
  GCGetNewHorse::default_instance_ = new GCGetNewHorse();
  GCBackHorseData::default_instance_->InitAsDefaultInstance();
  CGChoseHorse::default_instance_->InitAsDefaultInstance();
  GCChoseHorseBack::default_instance_->InitAsDefaultInstance();
  CGUseHorse::default_instance_->InitAsDefaultInstance();
  GCUseHorseBack::default_instance_->InitAsDefaultInstance();
  CGCultureToUpStar::default_instance_->InitAsDefaultInstance();
  GCCultureToUpStarBack::default_instance_->InitAsDefaultInstance();
  CGLookHorse::default_instance_->InitAsDefaultInstance();
  GCLookHorseBack::default_instance_->InitAsDefaultInstance();
  GCGetNewHorse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HorsesMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HorsesMessage_2eproto {
  StaticDescriptorInitializer_HorsesMessage_2eproto() {
    protobuf_AddDesc_HorsesMessage_2eproto();
  }
} static_descriptor_initializer_HorsesMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCBackHorseData::kHorseInfoFieldNumber;
#endif  // !_MSC_VER

GCBackHorseData::GCBackHorseData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBackHorseData)
}

void GCBackHorseData::InitAsDefaultInstance() {
}

GCBackHorseData::GCBackHorseData(const GCBackHorseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBackHorseData)
}

void GCBackHorseData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBackHorseData::~GCBackHorseData() {
  // @@protoc_insertion_point(destructor:GCBackHorseData)
  SharedDtor();
}

void GCBackHorseData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCBackHorseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBackHorseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBackHorseData_descriptor_;
}

const GCBackHorseData& GCBackHorseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCBackHorseData* GCBackHorseData::default_instance_ = NULL;

GCBackHorseData* GCBackHorseData::New() const {
  return new GCBackHorseData;
}

void GCBackHorseData::Clear() {
  horseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBackHorseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBackHorseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HorseInfo horseInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_horseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_horseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_horseInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBackHorseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBackHorseData)
  return false;
#undef DO_
}

void GCBackHorseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBackHorseData)
  // repeated .HorseInfo horseInfo = 1;
  for (int i = 0; i < this->horseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->horseinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBackHorseData)
}

::google::protobuf::uint8* GCBackHorseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBackHorseData)
  // repeated .HorseInfo horseInfo = 1;
  for (int i = 0; i < this->horseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->horseinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBackHorseData)
  return target;
}

int GCBackHorseData::ByteSize() const {
  int total_size = 0;

  // repeated .HorseInfo horseInfo = 1;
  total_size += 1 * this->horseinfo_size();
  for (int i = 0; i < this->horseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->horseinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBackHorseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBackHorseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBackHorseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBackHorseData::MergeFrom(const GCBackHorseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  horseinfo_.MergeFrom(from.horseinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBackHorseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBackHorseData::CopyFrom(const GCBackHorseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBackHorseData::IsInitialized() const {

  return true;
}

void GCBackHorseData::Swap(GCBackHorseData* other) {
  if (other != this) {
    horseinfo_.Swap(&other->horseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBackHorseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBackHorseData_descriptor_;
  metadata.reflection = GCBackHorseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChoseHorse::kHorseidFieldNumber;
#endif  // !_MSC_VER

CGChoseHorse::CGChoseHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChoseHorse)
}

void CGChoseHorse::InitAsDefaultInstance() {
}

CGChoseHorse::CGChoseHorse(const CGChoseHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChoseHorse)
}

void CGChoseHorse::SharedCtor() {
  _cached_size_ = 0;
  horseid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChoseHorse::~CGChoseHorse() {
  // @@protoc_insertion_point(destructor:CGChoseHorse)
  SharedDtor();
}

void CGChoseHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChoseHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChoseHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChoseHorse_descriptor_;
}

const CGChoseHorse& CGChoseHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

CGChoseHorse* CGChoseHorse::default_instance_ = NULL;

CGChoseHorse* CGChoseHorse::New() const {
  return new CGChoseHorse;
}

void CGChoseHorse::Clear() {
  horseid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChoseHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChoseHorse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 horseid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChoseHorse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChoseHorse)
  return false;
#undef DO_
}

void CGChoseHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChoseHorse)
  // optional int64 horseid = 1;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->horseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChoseHorse)
}

::google::protobuf::uint8* CGChoseHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChoseHorse)
  // optional int64 horseid = 1;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->horseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChoseHorse)
  return target;
}

int CGChoseHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 horseid = 1;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->horseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChoseHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChoseHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChoseHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChoseHorse::MergeFrom(const CGChoseHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChoseHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChoseHorse::CopyFrom(const CGChoseHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChoseHorse::IsInitialized() const {

  return true;
}

void CGChoseHorse::Swap(CGChoseHorse* other) {
  if (other != this) {
    std::swap(horseid_, other->horseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChoseHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChoseHorse_descriptor_;
  metadata.reflection = CGChoseHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChoseHorseBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCChoseHorseBack::GCChoseHorseBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChoseHorseBack)
}

void GCChoseHorseBack::InitAsDefaultInstance() {
}

GCChoseHorseBack::GCChoseHorseBack(const GCChoseHorseBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChoseHorseBack)
}

void GCChoseHorseBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChoseHorseBack::~GCChoseHorseBack() {
  // @@protoc_insertion_point(destructor:GCChoseHorseBack)
  SharedDtor();
}

void GCChoseHorseBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChoseHorseBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChoseHorseBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChoseHorseBack_descriptor_;
}

const GCChoseHorseBack& GCChoseHorseBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCChoseHorseBack* GCChoseHorseBack::default_instance_ = NULL;

GCChoseHorseBack* GCChoseHorseBack::New() const {
  return new GCChoseHorseBack;
}

void GCChoseHorseBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChoseHorseBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChoseHorseBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChoseHorseBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChoseHorseBack)
  return false;
#undef DO_
}

void GCChoseHorseBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChoseHorseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChoseHorseBack)
}

::google::protobuf::uint8* GCChoseHorseBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChoseHorseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChoseHorseBack)
  return target;
}

int GCChoseHorseBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChoseHorseBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChoseHorseBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChoseHorseBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChoseHorseBack::MergeFrom(const GCChoseHorseBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChoseHorseBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChoseHorseBack::CopyFrom(const GCChoseHorseBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChoseHorseBack::IsInitialized() const {

  return true;
}

void GCChoseHorseBack::Swap(GCChoseHorseBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChoseHorseBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChoseHorseBack_descriptor_;
  metadata.reflection = GCChoseHorseBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUseHorse::kUseflagFieldNumber;
#endif  // !_MSC_VER

CGUseHorse::CGUseHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUseHorse)
}

void CGUseHorse::InitAsDefaultInstance() {
}

CGUseHorse::CGUseHorse(const CGUseHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUseHorse)
}

void CGUseHorse::SharedCtor() {
  _cached_size_ = 0;
  useflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUseHorse::~CGUseHorse() {
  // @@protoc_insertion_point(destructor:CGUseHorse)
  SharedDtor();
}

void CGUseHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUseHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUseHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUseHorse_descriptor_;
}

const CGUseHorse& CGUseHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

CGUseHorse* CGUseHorse::default_instance_ = NULL;

CGUseHorse* CGUseHorse::New() const {
  return new CGUseHorse;
}

void CGUseHorse::Clear() {
  useflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUseHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUseHorse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 useflag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useflag_)));
          set_has_useflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUseHorse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUseHorse)
  return false;
#undef DO_
}

void CGUseHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUseHorse)
  // optional int32 useflag = 1;
  if (has_useflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->useflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUseHorse)
}

::google::protobuf::uint8* CGUseHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUseHorse)
  // optional int32 useflag = 1;
  if (has_useflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->useflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUseHorse)
  return target;
}

int CGUseHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 useflag = 1;
    if (has_useflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUseHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUseHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUseHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUseHorse::MergeFrom(const CGUseHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useflag()) {
      set_useflag(from.useflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUseHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUseHorse::CopyFrom(const CGUseHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseHorse::IsInitialized() const {

  return true;
}

void CGUseHorse::Swap(CGUseHorse* other) {
  if (other != this) {
    std::swap(useflag_, other->useflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUseHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUseHorse_descriptor_;
  metadata.reflection = CGUseHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUseHorseBack::kGuidFieldNumber;
const int GCUseHorseBack::kUseflagFieldNumber;
const int GCUseHorseBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCUseHorseBack::GCUseHorseBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUseHorseBack)
}

void GCUseHorseBack::InitAsDefaultInstance() {
}

GCUseHorseBack::GCUseHorseBack(const GCUseHorseBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUseHorseBack)
}

void GCUseHorseBack::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  useflag_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUseHorseBack::~GCUseHorseBack() {
  // @@protoc_insertion_point(destructor:GCUseHorseBack)
  SharedDtor();
}

void GCUseHorseBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUseHorseBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUseHorseBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUseHorseBack_descriptor_;
}

const GCUseHorseBack& GCUseHorseBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCUseHorseBack* GCUseHorseBack::default_instance_ = NULL;

GCUseHorseBack* GCUseHorseBack::New() const {
  return new GCUseHorseBack;
}

void GCUseHorseBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCUseHorseBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guid_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUseHorseBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUseHorseBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_useflag;
        break;
      }

      // optional int32 useflag = 2;
      case 2: {
        if (tag == 16) {
         parse_useflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useflag_)));
          set_has_useflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUseHorseBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUseHorseBack)
  return false;
#undef DO_
}

void GCUseHorseBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUseHorseBack)
  // optional int64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guid(), output);
  }

  // optional int32 useflag = 2;
  if (has_useflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->useflag(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUseHorseBack)
}

::google::protobuf::uint8* GCUseHorseBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUseHorseBack)
  // optional int64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guid(), target);
  }

  // optional int32 useflag = 2;
  if (has_useflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->useflag(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUseHorseBack)
  return target;
}

int GCUseHorseBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

    // optional int32 useflag = 2;
    if (has_useflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useflag());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUseHorseBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUseHorseBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUseHorseBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUseHorseBack::MergeFrom(const GCUseHorseBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_useflag()) {
      set_useflag(from.useflag());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUseHorseBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUseHorseBack::CopyFrom(const GCUseHorseBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUseHorseBack::IsInitialized() const {

  return true;
}

void GCUseHorseBack::Swap(GCUseHorseBack* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(useflag_, other->useflag_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUseHorseBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUseHorseBack_descriptor_;
  metadata.reflection = GCUseHorseBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCultureToUpStar::kHorseidFieldNumber;
const int CGCultureToUpStar::kUsegemflagFieldNumber;
#endif  // !_MSC_VER

CGCultureToUpStar::CGCultureToUpStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCultureToUpStar)
}

void CGCultureToUpStar::InitAsDefaultInstance() {
}

CGCultureToUpStar::CGCultureToUpStar(const CGCultureToUpStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCultureToUpStar)
}

void CGCultureToUpStar::SharedCtor() {
  _cached_size_ = 0;
  horseid_ = GOOGLE_LONGLONG(0);
  usegemflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCultureToUpStar::~CGCultureToUpStar() {
  // @@protoc_insertion_point(destructor:CGCultureToUpStar)
  SharedDtor();
}

void CGCultureToUpStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCultureToUpStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCultureToUpStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCultureToUpStar_descriptor_;
}

const CGCultureToUpStar& CGCultureToUpStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

CGCultureToUpStar* CGCultureToUpStar::default_instance_ = NULL;

CGCultureToUpStar* CGCultureToUpStar::New() const {
  return new CGCultureToUpStar;
}

void CGCultureToUpStar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGCultureToUpStar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(horseid_, usegemflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCultureToUpStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCultureToUpStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 horseid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usegemflag;
        break;
      }

      // optional int32 usegemflag = 2;
      case 2: {
        if (tag == 16) {
         parse_usegemflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usegemflag_)));
          set_has_usegemflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCultureToUpStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCultureToUpStar)
  return false;
#undef DO_
}

void CGCultureToUpStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCultureToUpStar)
  // optional int64 horseid = 1;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->horseid(), output);
  }

  // optional int32 usegemflag = 2;
  if (has_usegemflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usegemflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCultureToUpStar)
}

::google::protobuf::uint8* CGCultureToUpStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCultureToUpStar)
  // optional int64 horseid = 1;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->horseid(), target);
  }

  // optional int32 usegemflag = 2;
  if (has_usegemflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usegemflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCultureToUpStar)
  return target;
}

int CGCultureToUpStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 horseid = 1;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->horseid());
    }

    // optional int32 usegemflag = 2;
    if (has_usegemflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usegemflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCultureToUpStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCultureToUpStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCultureToUpStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCultureToUpStar::MergeFrom(const CGCultureToUpStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_usegemflag()) {
      set_usegemflag(from.usegemflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCultureToUpStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCultureToUpStar::CopyFrom(const CGCultureToUpStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCultureToUpStar::IsInitialized() const {

  return true;
}

void CGCultureToUpStar::Swap(CGCultureToUpStar* other) {
  if (other != this) {
    std::swap(horseid_, other->horseid_);
    std::swap(usegemflag_, other->usegemflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCultureToUpStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCultureToUpStar_descriptor_;
  metadata.reflection = CGCultureToUpStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCultureToUpStarBack::kFlagFieldNumber;
const int GCCultureToUpStarBack::kLuckflagFieldNumber;
const int GCCultureToUpStarBack::kHorseInfoFieldNumber;
const int GCCultureToUpStarBack::kNewhorseInfoFieldNumber;
#endif  // !_MSC_VER

GCCultureToUpStarBack::GCCultureToUpStarBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCultureToUpStarBack)
}

void GCCultureToUpStarBack::InitAsDefaultInstance() {
  horseinfo_ = const_cast< ::HorseInfo*>(&::HorseInfo::default_instance());
  newhorseinfo_ = const_cast< ::HorseInfo*>(&::HorseInfo::default_instance());
}

GCCultureToUpStarBack::GCCultureToUpStarBack(const GCCultureToUpStarBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCultureToUpStarBack)
}

void GCCultureToUpStarBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  luckflag_ = 0;
  horseinfo_ = NULL;
  newhorseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCultureToUpStarBack::~GCCultureToUpStarBack() {
  // @@protoc_insertion_point(destructor:GCCultureToUpStarBack)
  SharedDtor();
}

void GCCultureToUpStarBack::SharedDtor() {
  if (this != default_instance_) {
    delete horseinfo_;
    delete newhorseinfo_;
  }
}

void GCCultureToUpStarBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCultureToUpStarBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCultureToUpStarBack_descriptor_;
}

const GCCultureToUpStarBack& GCCultureToUpStarBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCCultureToUpStarBack* GCCultureToUpStarBack::default_instance_ = NULL;

GCCultureToUpStarBack* GCCultureToUpStarBack::New() const {
  return new GCCultureToUpStarBack;
}

void GCCultureToUpStarBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCultureToUpStarBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(flag_, luckflag_);
    if (has_horseinfo()) {
      if (horseinfo_ != NULL) horseinfo_->::HorseInfo::Clear();
    }
    if (has_newhorseinfo()) {
      if (newhorseinfo_ != NULL) newhorseinfo_->::HorseInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCultureToUpStarBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCultureToUpStarBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_luckflag;
        break;
      }

      // optional int32 luckflag = 2;
      case 2: {
        if (tag == 16) {
         parse_luckflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckflag_)));
          set_has_luckflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_horseInfo;
        break;
      }

      // optional .HorseInfo horseInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_horseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newhorseInfo;
        break;
      }

      // optional .HorseInfo newhorseInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_newhorseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newhorseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCultureToUpStarBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCultureToUpStarBack)
  return false;
#undef DO_
}

void GCCultureToUpStarBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCultureToUpStarBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 luckflag = 2;
  if (has_luckflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->luckflag(), output);
  }

  // optional .HorseInfo horseInfo = 3;
  if (has_horseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->horseinfo(), output);
  }

  // optional .HorseInfo newhorseInfo = 4;
  if (has_newhorseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newhorseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCultureToUpStarBack)
}

::google::protobuf::uint8* GCCultureToUpStarBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCultureToUpStarBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 luckflag = 2;
  if (has_luckflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->luckflag(), target);
  }

  // optional .HorseInfo horseInfo = 3;
  if (has_horseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->horseinfo(), target);
  }

  // optional .HorseInfo newhorseInfo = 4;
  if (has_newhorseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newhorseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCultureToUpStarBack)
  return target;
}

int GCCultureToUpStarBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 luckflag = 2;
    if (has_luckflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luckflag());
    }

    // optional .HorseInfo horseInfo = 3;
    if (has_horseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horseinfo());
    }

    // optional .HorseInfo newhorseInfo = 4;
    if (has_newhorseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newhorseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCultureToUpStarBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCultureToUpStarBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCultureToUpStarBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCultureToUpStarBack::MergeFrom(const GCCultureToUpStarBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_luckflag()) {
      set_luckflag(from.luckflag());
    }
    if (from.has_horseinfo()) {
      mutable_horseinfo()->::HorseInfo::MergeFrom(from.horseinfo());
    }
    if (from.has_newhorseinfo()) {
      mutable_newhorseinfo()->::HorseInfo::MergeFrom(from.newhorseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCultureToUpStarBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCultureToUpStarBack::CopyFrom(const GCCultureToUpStarBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCultureToUpStarBack::IsInitialized() const {

  return true;
}

void GCCultureToUpStarBack::Swap(GCCultureToUpStarBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(luckflag_, other->luckflag_);
    std::swap(horseinfo_, other->horseinfo_);
    std::swap(newhorseinfo_, other->newhorseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCultureToUpStarBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCultureToUpStarBack_descriptor_;
  metadata.reflection = GCCultureToUpStarBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLookHorse::kPlayerUidFieldNumber;
#endif  // !_MSC_VER

CGLookHorse::CGLookHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLookHorse)
}

void CGLookHorse::InitAsDefaultInstance() {
}

CGLookHorse::CGLookHorse(const CGLookHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLookHorse)
}

void CGLookHorse::SharedCtor() {
  _cached_size_ = 0;
  playeruid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLookHorse::~CGLookHorse() {
  // @@protoc_insertion_point(destructor:CGLookHorse)
  SharedDtor();
}

void CGLookHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLookHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLookHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLookHorse_descriptor_;
}

const CGLookHorse& CGLookHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

CGLookHorse* CGLookHorse::default_instance_ = NULL;

CGLookHorse* CGLookHorse::New() const {
  return new CGLookHorse;
}

void CGLookHorse::Clear() {
  playeruid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLookHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLookHorse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playeruid_)));
          set_has_playeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLookHorse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLookHorse)
  return false;
#undef DO_
}

void CGLookHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLookHorse)
  // optional int64 playerUid = 1;
  if (has_playeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playeruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLookHorse)
}

::google::protobuf::uint8* CGLookHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLookHorse)
  // optional int64 playerUid = 1;
  if (has_playeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playeruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLookHorse)
  return target;
}

int CGLookHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerUid = 1;
    if (has_playeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playeruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLookHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLookHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLookHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLookHorse::MergeFrom(const CGLookHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeruid()) {
      set_playeruid(from.playeruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLookHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLookHorse::CopyFrom(const CGLookHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLookHorse::IsInitialized() const {

  return true;
}

void CGLookHorse::Swap(CGLookHorse* other) {
  if (other != this) {
    std::swap(playeruid_, other->playeruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLookHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLookHorse_descriptor_;
  metadata.reflection = CGLookHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLookHorseBack::kFlagFieldNumber;
const int GCLookHorseBack::kHorseIdFieldNumber;
#endif  // !_MSC_VER

GCLookHorseBack::GCLookHorseBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLookHorseBack)
}

void GCLookHorseBack::InitAsDefaultInstance() {
}

GCLookHorseBack::GCLookHorseBack(const GCLookHorseBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLookHorseBack)
}

void GCLookHorseBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  horseid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLookHorseBack::~GCLookHorseBack() {
  // @@protoc_insertion_point(destructor:GCLookHorseBack)
  SharedDtor();
}

void GCLookHorseBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLookHorseBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLookHorseBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLookHorseBack_descriptor_;
}

const GCLookHorseBack& GCLookHorseBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCLookHorseBack* GCLookHorseBack::default_instance_ = NULL;

GCLookHorseBack* GCLookHorseBack::New() const {
  return new GCLookHorseBack;
}

void GCLookHorseBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLookHorseBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, horseid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLookHorseBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLookHorseBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_horseId;
        break;
      }

      // optional int32 horseId = 2;
      case 2: {
        if (tag == 16) {
         parse_horseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLookHorseBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLookHorseBack)
  return false;
#undef DO_
}

void GCLookHorseBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLookHorseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 horseId = 2;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->horseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLookHorseBack)
}

::google::protobuf::uint8* GCLookHorseBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLookHorseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 horseId = 2;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->horseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLookHorseBack)
  return target;
}

int GCLookHorseBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 horseId = 2;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLookHorseBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLookHorseBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLookHorseBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLookHorseBack::MergeFrom(const GCLookHorseBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLookHorseBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLookHorseBack::CopyFrom(const GCLookHorseBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLookHorseBack::IsInitialized() const {

  return true;
}

void GCLookHorseBack::Swap(GCLookHorseBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(horseid_, other->horseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLookHorseBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLookHorseBack_descriptor_;
  metadata.reflection = GCLookHorseBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetNewHorse::kHorseIdFieldNumber;
#endif  // !_MSC_VER

GCGetNewHorse::GCGetNewHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetNewHorse)
}

void GCGetNewHorse::InitAsDefaultInstance() {
}

GCGetNewHorse::GCGetNewHorse(const GCGetNewHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetNewHorse)
}

void GCGetNewHorse::SharedCtor() {
  _cached_size_ = 0;
  horseid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetNewHorse::~GCGetNewHorse() {
  // @@protoc_insertion_point(destructor:GCGetNewHorse)
  SharedDtor();
}

void GCGetNewHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetNewHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetNewHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetNewHorse_descriptor_;
}

const GCGetNewHorse& GCGetNewHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HorsesMessage_2eproto();
  return *default_instance_;
}

GCGetNewHorse* GCGetNewHorse::default_instance_ = NULL;

GCGetNewHorse* GCGetNewHorse::New() const {
  return new GCGetNewHorse;
}

void GCGetNewHorse::Clear() {
  horseid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetNewHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetNewHorse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 horseId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetNewHorse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetNewHorse)
  return false;
#undef DO_
}

void GCGetNewHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetNewHorse)
  // optional int32 horseId = 1;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->horseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetNewHorse)
}

::google::protobuf::uint8* GCGetNewHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetNewHorse)
  // optional int32 horseId = 1;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->horseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetNewHorse)
  return target;
}

int GCGetNewHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 horseId = 1;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetNewHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetNewHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetNewHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetNewHorse::MergeFrom(const GCGetNewHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetNewHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetNewHorse::CopyFrom(const GCGetNewHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetNewHorse::IsInitialized() const {

  return true;
}

void GCGetNewHorse::Swap(GCGetNewHorse* other) {
  if (other != this) {
    std::swap(horseid_, other->horseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetNewHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetNewHorse_descriptor_;
  metadata.reflection = GCGetNewHorse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
