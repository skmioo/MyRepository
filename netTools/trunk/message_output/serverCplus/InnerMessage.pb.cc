// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InnerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InnerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RandomIsland_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomIsland_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterViewMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterViewMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerFashion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedCross_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedCross_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCErroeHintBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCErroeHintBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Titlel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Titlel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonalMessagees_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonalMessagees_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCmmonDialog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCmmonDialog_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillAttackRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillAttackRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendAddExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendAddExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAddVerifyBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAddVerifyBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGVerifyBoxResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGVerifyBoxResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCharacterTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharacterTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GGDungeonChangeScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GGDungeonChangeScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomIndexInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomIndexInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Iteminfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Iteminfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPlayEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPlayEffect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InnerMessage_2eproto() {
  protobuf_AddDesc_InnerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InnerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RandomIsland_descriptor_ = file->message_type(0);
  static const int RandomIsland_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIsland, islandname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIsland, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIsland, posy_),
  };
  RandomIsland_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomIsland_descriptor_,
      RandomIsland::default_instance_,
      RandomIsland_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIsland, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIsland, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomIsland));
  Vector3Info_descriptor_ = file->message_type(1);
  static const int Vector3Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Info, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Info, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Info, z_),
  };
  Vector3Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3Info_descriptor_,
      Vector3Info::default_instance_,
      Vector3Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3Info));
  SkillItemData_descriptor_ = file->message_type(2);
  static const int SkillItemData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, skilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, skillposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, flagnormal_),
  };
  SkillItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillItemData_descriptor_,
      SkillItemData::default_instance_,
      SkillItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillItemData));
  CharacterViewMsg_descriptor_ = file->message_type(3);
  static const int CharacterViewMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterViewMsg, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterViewMsg, viewvalue_),
  };
  CharacterViewMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterViewMsg_descriptor_,
      CharacterViewMsg::default_instance_,
      CharacterViewMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterViewMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterViewMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterViewMsg));
  CharacterInfo_descriptor_ = file->message_type(4);
  static const int CharacterInfo_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, charattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, changeequipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, interactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, livetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, redcross_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, usehorseflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, belongobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, gemeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, enterdungeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, powereffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, awakeeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, vipname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, randomindexinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, horseequipeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, flowervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, othername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, othersex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, roads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, ownid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, views_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, catchstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, deletetime_),
  };
  CharacterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterInfo_descriptor_,
      CharacterInfo::default_instance_,
      CharacterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterInfo));
  HorseInfo_descriptor_ = file->message_type(5);
  static const int HorseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, isuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, upstarrate_),
  };
  HorseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseInfo_descriptor_,
      HorseInfo::default_instance_,
      HorseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseInfo));
  ChangeEquipInfo_descriptor_ = file->message_type(6);
  static const int ChangeEquipInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, fashionclothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, isview_),
  };
  ChangeEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeEquipInfo_descriptor_,
      ChangeEquipInfo::default_instance_,
      ChangeEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeEquipInfo));
  PlayerFashion_descriptor_ = file->message_type(7);
  static const int PlayerFashion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, invalidtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, isuser_),
  };
  PlayerFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerFashion_descriptor_,
      PlayerFashion::default_instance_,
      PlayerFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerFashion));
  RedCross_descriptor_ = file->message_type(8);
  static const int RedCross_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, redcrossmaxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, redcrosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, redcrossmaxmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, redcrossmp_),
  };
  RedCross_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedCross_descriptor_,
      RedCross::default_instance_,
      RedCross_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedCross, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedCross));
  CharacterAttr_descriptor_ = file->message_type(9);
  static const int CharacterAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAttr, attrkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAttr, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAttr, viewflag_),
  };
  CharacterAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterAttr_descriptor_,
      CharacterAttr::default_instance_,
      CharacterAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterAttr));
  PetAttr_descriptor_ = file->message_type(10);
  static const int PetAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAttr, attrkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAttr, attrvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAttr, num_),
  };
  PetAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetAttr_descriptor_,
      PetAttr::default_instance_,
      PetAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetAttr));
  PetInfo_descriptor_ = file->message_type(11);
  static const int PetInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, battleflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, petgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, petattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, petattrdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, objid_),
  };
  PetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInfo_descriptor_,
      PetInfo::default_instance_,
      PetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInfo));
  GCChangeAttribute_descriptor_ = file->message_type(12);
  static const int GCChangeAttribute_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, interactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, info_),
  };
  GCChangeAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeAttribute_descriptor_,
      GCChangeAttribute::default_instance_,
      GCChangeAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeAttribute));
  GCErroeHintBack_descriptor_ = file->message_type(13);
  static const int GCErroeHintBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, errordesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, parm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, boxtype_),
  };
  GCErroeHintBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCErroeHintBack_descriptor_,
      GCErroeHintBack::default_instance_,
      GCErroeHintBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCErroeHintBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCErroeHintBack));
  DeviceInfo_descriptor_ = file->message_type(14);
  static const int DeviceInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, srcpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, iscurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, direction_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  Achievement_descriptor_ = file->message_type(15);
  static const int Achievement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, isover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, isget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, getachievetime_),
  };
  Achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Achievement_descriptor_,
      Achievement::default_instance_,
      Achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Achievement));
  Titlel_descriptor_ = file->message_type(16);
  static const int Titlel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, endtime_),
  };
  Titlel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Titlel_descriptor_,
      Titlel::default_instance_,
      Titlel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Titlel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Titlel));
  TrapData_descriptor_ = file->message_type(17);
  static const int TrapData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapData, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapData, items_),
  };
  TrapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapData_descriptor_,
      TrapData::default_instance_,
      TrapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapData));
  TrapItemData_descriptor_ = file->message_type(18);
  static const int TrapItemData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, dir_),
  };
  TrapItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapItemData_descriptor_,
      TrapItemData::default_instance_,
      TrapItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapItemData));
  VipData_descriptor_ = file->message_type(19);
  static const int VipData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, getflag_),
  };
  VipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipData_descriptor_,
      VipData::default_instance_,
      VipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipData));
  GangInfo_descriptor_ = file->message_type(20);
  static const int GangInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, totemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, gangjob_),
  };
  GangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangInfo_descriptor_,
      GangInfo::default_instance_,
      GangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangInfo));
  FriendData_descriptor_ = file->message_type(21);
  static const int FriendData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, vip_),
  };
  FriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendData_descriptor_,
      FriendData::default_instance_,
      FriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendData));
  PersonalMessagees_descriptor_ = file->message_type(22);
  static const int PersonalMessagees_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalMessagees, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalMessagees, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalMessagees, name_),
  };
  PersonalMessagees_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonalMessagees_descriptor_,
      PersonalMessagees::default_instance_,
      PersonalMessagees_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalMessagees, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalMessagees, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonalMessagees));
  GCCmmonDialog_descriptor_ = file->message_type(23);
  static const int GCCmmonDialog_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCmmonDialog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCmmonDialog, contents_),
  };
  GCCmmonDialog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCmmonDialog_descriptor_,
      GCCmmonDialog::default_instance_,
      GCCmmonDialog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCmmonDialog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCmmonDialog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCmmonDialog));
  SkillAttackRelation_descriptor_ = file->message_type(24);
  static const int SkillAttackRelation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAttackRelation, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAttackRelation, relation_),
  };
  SkillAttackRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillAttackRelation_descriptor_,
      SkillAttackRelation::default_instance_,
      SkillAttackRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAttackRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillAttackRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillAttackRelation));
  GCSendAddExp_descriptor_ = file->message_type(25);
  static const int GCSendAddExp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, source_),
  };
  GCSendAddExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendAddExp_descriptor_,
      GCSendAddExp::default_instance_,
      GCSendAddExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendAddExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendAddExp));
  GCAddVerifyBox_descriptor_ = file->message_type(26);
  static const int GCAddVerifyBox_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, messageid_),
  };
  GCAddVerifyBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAddVerifyBox_descriptor_,
      GCAddVerifyBox::default_instance_,
      GCAddVerifyBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddVerifyBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAddVerifyBox));
  CGVerifyBoxResult_descriptor_ = file->message_type(27);
  static const int CGVerifyBoxResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVerifyBoxResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVerifyBoxResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVerifyBoxResult, params_),
  };
  CGVerifyBoxResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGVerifyBoxResult_descriptor_,
      CGVerifyBoxResult::default_instance_,
      CGVerifyBoxResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVerifyBoxResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGVerifyBoxResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGVerifyBoxResult));
  GCCharacterTalk_descriptor_ = file->message_type(28);
  static const int GCCharacterTalk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterTalk, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterTalk, talkword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterTalk, talkvoice_),
  };
  GCCharacterTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharacterTalk_descriptor_,
      GCCharacterTalk::default_instance_,
      GCCharacterTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharacterTalk));
  GGDungeonChangeScene_descriptor_ = file->message_type(29);
  static const int GGDungeonChangeScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGDungeonChangeScene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGDungeonChangeScene, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGDungeonChangeScene, instanceid_),
  };
  GGDungeonChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GGDungeonChangeScene_descriptor_,
      GGDungeonChangeScene::default_instance_,
      GGDungeonChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGDungeonChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGDungeonChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GGDungeonChangeScene));
  RandomIndexInfo_descriptor_ = file->message_type(30);
  static const int RandomIndexInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIndexInfo, randomindexhitchances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIndexInfo, randomindexcrit_),
  };
  RandomIndexInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomIndexInfo_descriptor_,
      RandomIndexInfo::default_instance_,
      RandomIndexInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIndexInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomIndexInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomIndexInfo));
  Iteminfo_descriptor_ = file->message_type(31);
  static const int Iteminfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Iteminfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Iteminfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Iteminfo, num_),
  };
  Iteminfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Iteminfo_descriptor_,
      Iteminfo::default_instance_,
      Iteminfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Iteminfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Iteminfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Iteminfo));
  GCPlayEffect_descriptor_ = file->message_type(32);
  static const int GCPlayEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayEffect, id_),
  };
  GCPlayEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPlayEffect_descriptor_,
      GCPlayEffect::default_instance_,
      GCPlayEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPlayEffect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InnerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomIsland_descriptor_, &RandomIsland::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3Info_descriptor_, &Vector3Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillItemData_descriptor_, &SkillItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterViewMsg_descriptor_, &CharacterViewMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterInfo_descriptor_, &CharacterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseInfo_descriptor_, &HorseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeEquipInfo_descriptor_, &ChangeEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerFashion_descriptor_, &PlayerFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedCross_descriptor_, &RedCross::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterAttr_descriptor_, &CharacterAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetAttr_descriptor_, &PetAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInfo_descriptor_, &PetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeAttribute_descriptor_, &GCChangeAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCErroeHintBack_descriptor_, &GCErroeHintBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Achievement_descriptor_, &Achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Titlel_descriptor_, &Titlel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapData_descriptor_, &TrapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapItemData_descriptor_, &TrapItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipData_descriptor_, &VipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangInfo_descriptor_, &GangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendData_descriptor_, &FriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonalMessagees_descriptor_, &PersonalMessagees::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCmmonDialog_descriptor_, &GCCmmonDialog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillAttackRelation_descriptor_, &SkillAttackRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendAddExp_descriptor_, &GCSendAddExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAddVerifyBox_descriptor_, &GCAddVerifyBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGVerifyBoxResult_descriptor_, &CGVerifyBoxResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharacterTalk_descriptor_, &GCCharacterTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GGDungeonChangeScene_descriptor_, &GGDungeonChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomIndexInfo_descriptor_, &RandomIndexInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Iteminfo_descriptor_, &Iteminfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPlayEffect_descriptor_, &GCPlayEffect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InnerMessage_2eproto() {
  delete RandomIsland::default_instance_;
  delete RandomIsland_reflection_;
  delete Vector3Info::default_instance_;
  delete Vector3Info_reflection_;
  delete SkillItemData::default_instance_;
  delete SkillItemData_reflection_;
  delete CharacterViewMsg::default_instance_;
  delete CharacterViewMsg_reflection_;
  delete CharacterInfo::default_instance_;
  delete CharacterInfo_reflection_;
  delete HorseInfo::default_instance_;
  delete HorseInfo_reflection_;
  delete ChangeEquipInfo::default_instance_;
  delete ChangeEquipInfo_reflection_;
  delete PlayerFashion::default_instance_;
  delete PlayerFashion_reflection_;
  delete RedCross::default_instance_;
  delete RedCross_reflection_;
  delete CharacterAttr::default_instance_;
  delete CharacterAttr_reflection_;
  delete PetAttr::default_instance_;
  delete PetAttr_reflection_;
  delete PetInfo::default_instance_;
  delete PetInfo_reflection_;
  delete GCChangeAttribute::default_instance_;
  delete GCChangeAttribute_reflection_;
  delete GCErroeHintBack::default_instance_;
  delete GCErroeHintBack_reflection_;
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete Achievement::default_instance_;
  delete Achievement_reflection_;
  delete Titlel::default_instance_;
  delete Titlel_reflection_;
  delete TrapData::default_instance_;
  delete TrapData_reflection_;
  delete TrapItemData::default_instance_;
  delete TrapItemData_reflection_;
  delete VipData::default_instance_;
  delete VipData_reflection_;
  delete GangInfo::default_instance_;
  delete GangInfo_reflection_;
  delete FriendData::default_instance_;
  delete FriendData_reflection_;
  delete PersonalMessagees::default_instance_;
  delete PersonalMessagees_reflection_;
  delete GCCmmonDialog::default_instance_;
  delete GCCmmonDialog_reflection_;
  delete SkillAttackRelation::default_instance_;
  delete SkillAttackRelation_reflection_;
  delete GCSendAddExp::default_instance_;
  delete GCSendAddExp_reflection_;
  delete GCAddVerifyBox::default_instance_;
  delete GCAddVerifyBox_reflection_;
  delete CGVerifyBoxResult::default_instance_;
  delete CGVerifyBoxResult_reflection_;
  delete GCCharacterTalk::default_instance_;
  delete GCCharacterTalk_reflection_;
  delete GGDungeonChangeScene::default_instance_;
  delete GGDungeonChangeScene_reflection_;
  delete RandomIndexInfo::default_instance_;
  delete RandomIndexInfo_reflection_;
  delete Iteminfo::default_instance_;
  delete Iteminfo_reflection_;
  delete GCPlayEffect::default_instance_;
  delete GCPlayEffect_reflection_;
}

void protobuf_AddDesc_InnerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022InnerMessage.proto\">\n\014RandomIsland\022\022\n\n"
    "islandName\030\001 \001(\t\022\014\n\004PosX\030\002 \001(\005\022\014\n\004PosY\030\003"
    " \001(\005\".\n\013Vector3Info\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001("
    "\005\022\t\n\001z\030\003 \001(\005\"_\n\rSkillItemData\022\017\n\007skillid"
    "\030\001 \001(\005\022\022\n\nskilllevel\030\002 \001(\005\022\025\n\rskillposit"
    "ion\030\003 \001(\005\022\022\n\nflagnormal\030\004 \001(\005\"7\n\020Charact"
    "erViewMsg\022\020\n\010viewType\030\001 \001(\005\022\021\n\tviewValue"
    "\030\002 \001(\t\"\331\005\n\rCharacterInfo\022\r\n\005objId\030\001 \001(\003\022"
    "\020\n\010charName\030\002 \001(\t\022\031\n\003pos\030\003 \001(\0132\014.Vector3"
    "Info\022\037\n\tdirection\030\004 \001(\0132\014.Vector3Info\022\013\n"
    "\003sid\030\005 \001(\005\022\013\n\003bid\030\006 \001(\005\022 \n\010charAttr\030\007 \003("
    "\0132\016.CharacterAttr\022)\n\017changeEquipInfo\030\010 \001"
    "(\0132\020.ChangeEquipInfo\022\022\n\ninteractId\030\t \001(\t"
    "\022\020\n\010liveTime\030\n \001(\005\022\033\n\010redcross\030\014 \001(\0132\t.R"
    "edCross\022\017\n\007horseid\030\r \001(\005\022\024\n\014usehorseflag"
    "\030\016 \001(\005\022\017\n\007titleid\030\017 \001(\005\022\023\n\013belongObjId\030\020"
    " \003(\003\022\021\n\tgemEffect\030\021 \001(\005\022\033\n\010gangInfo\030\022 \001("
    "\0132\t.GangInfo\022\024\n\014enterDungeon\030\023 \001(\005\022\023\n\013po"
    "werEffect\030\024 \001(\005\022\023\n\013awakeEffect\030\025 \001(\005\022\017\n\007"
    "vipName\030\026 \001(\t\022)\n\017randomIndexInfo\030\027 \001(\0132\020"
    ".RandomIndexInfo\022\030\n\020horseEquipEffect\030\030 \001"
    "(\005\022\023\n\013flowerValue\030\031 \001(\005\022\021\n\totherName\030\032 \001"
    "(\t\022\020\n\010otherSex\030\033 \001(\005\022\033\n\005roads\030\034 \003(\0132\014.Ve"
    "ctor3Info\022\r\n\005ownId\030\035 \001(\003\022 \n\005views\030\036 \003(\0132"
    "\021.CharacterViewMsg\022\022\n\ncatchState\030\037 \001(\005\022\022"
    "\n\ndeleteTime\030  \001(\003\"Q\n\tHorseInfo\022\017\n\007table"
    "id\030\001 \001(\005\022\020\n\010serverid\030\002 \001(\003\022\r\n\005isuse\030\003 \001("
    "\005\022\022\n\nupstarrate\030\004 \001(\005\"\242\001\n\017ChangeEquipInf"
    "o\022\014\n\004hair\030\001 \001(\005\022\014\n\004face\030\002 \001(\005\022\016\n\006weapon\030"
    "\003 \001(\005\022\017\n\007clothes\030\004 \001(\005\022\026\n\016fashionClothes"
    "\030\005 \001(\005\022\025\n\rfashionWeapon\030\006 \001(\005\022\023\n\013fashion"
    "Hair\030\007 \001(\005\022\016\n\006isview\030\010 \001(\005\"i\n\rPlayerFash"
    "ion\022\017\n\007tableid\030\001 \001(\005\022\020\n\010serverid\030\002 \001(\003\022\023"
    "\n\013invalidtime\030\003 \001(\003\022\020\n\010timetype\030\004 \001(\005\022\016\n"
    "\006isuser\030\005 \001(\005\"`\n\010RedCross\022\025\n\rredcrossmax"
    "hp\030\001 \001(\003\022\022\n\nredcrosshp\030\002 \001(\003\022\025\n\rredcross"
    "maxmp\030\003 \001(\003\022\022\n\nredcrossmp\030\004 \001(\003\"E\n\rChara"
    "cterAttr\022\017\n\007attrkey\030\001 \001(\005\022\021\n\tattrvalue\030\002"
    " \001(\003\022\020\n\010viewflag\030\003 \001(\005\":\n\007PetAttr\022\017\n\007att"
    "rkey\030\001 \001(\005\022\021\n\tattrvalue\030\002 \001(\005\022\013\n\003num\030\003 \001"
    "(\005\"\226\002\n\007PetInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t"
    "\022\013\n\003sex\030\003 \001(\005\022\017\n\007quality\030\004 \001(\005\022\021\n\tcharac"
    "ter\030\005 \001(\005\022\022\n\nbattleflag\030\006 \001(\005\022\017\n\007petGrow"
    "\030\007 \001(\005\022\021\n\tstarlevel\030\010 \001(\005\022\r\n\005level\030\t \001(\005"
    "\022\r\n\005petId\030\n \001(\003\022\031\n\007petAttr\030\013 \003(\0132\010.PetAt"
    "tr\022\035\n\013petAttrDown\030\014 \003(\0132\010.PetAttr\022!\n\tski"
    "lldata\030\r \003(\0132\016.SkillItemData\022\r\n\005objid\030\016 "
    "\001(\003\"|\n\021GCChangeAttribute\022\r\n\005objId\030\001 \001(\003\022"
    "\014\n\004type\030\002 \001(\005\022\013\n\003bid\030\003 \001(\005\022\013\n\003sid\030\004 \001(\005\022"
    "\022\n\ninteractId\030\005 \001(\t\022\034\n\004info\030\006 \001(\0132\016.Char"
    "acterInfo\"V\n\017GCErroeHintBack\022\021\n\terrorCod"
    "e\030\001 \001(\005\022\021\n\terrorDesc\030\002 \001(\t\022\014\n\004parm\030\003 \003(\t"
    "\022\017\n\007boxType\030\004 \001(\005\"\357\001\n\nDeviceInfo\022\r\n\005objI"
    "d\030\001 \001(\003\022\031\n\003pos\030\002 \001(\0132\014.Vector3Info\022\013\n\003bi"
    "d\030\003 \001(\005\022\013\n\003sid\030\004 \001(\005\022\022\n\ndeviceType\030\005 \001(\005"
    "\022\013\n\003num\030\006 \001(\005\022\016\n\006status\030\007 \001(\005\022\034\n\006srcPos\030"
    "\010 \001(\0132\014.Vector3Info\022\014\n\004camp\030\t \001(\005\022\022\n\nisC"
    "urrency\030\n \001(\005\022\013\n\003str\030\013 \001(\t\022\037\n\tdirection\030"
    "\014 \001(\0132\014.Vector3Info\"_\n\013Achievement\022\n\n\002id"
    "\030\001 \001(\005\022\016\n\006isover\030\002 \001(\005\022\r\n\005isget\030\003 \001(\005\022\r\n"
    "\005value\030\004 \001(\003\022\026\n\016getachievetime\030\005 \001(\003\"C\n\006"
    "Titlel\022\n\n\002id\030\001 \001(\005\022\014\n\004flag\030\002 \001(\005\022\016\n\006stat"
    "us\030\003 \001(\005\022\017\n\007endtime\030\004 \001(\003\"D\n\010TrapData\022\r\n"
    "\005objId\030\001 \001(\003\022\013\n\003sid\030\002 \001(\005\022\034\n\005items\030\003 \003(\013"
    "2\r.TrapItemData\"`\n\014TrapItemData\022\r\n\005objId"
    "\030\001 \001(\003\022\013\n\003sid\030\002 \001(\005\022\031\n\003pos\030\003 \001(\0132\014.Vecto"
    "r3Info\022\031\n\003dir\030\004 \001(\0132\014.Vector3Info\",\n\007Vip"
    "Data\022\020\n\010viplevel\030\001 \001(\005\022\017\n\007getflag\030\002 \001(\005\""
    "P\n\010GangInfo\022\016\n\006gangId\030\001 \001(\003\022\020\n\010gangName\030"
    "\002 \001(\t\022\021\n\ttotemName\030\003 \001(\t\022\017\n\007gangJob\030\004 \001("
    "\005\"\221\001\n\nFriendData\022\r\n\005objId\030\001 \001(\003\022\017\n\007addre"
    "ss\030\002 \001(\t\022\016\n\006online\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022\016"
    "\n\006career\030\005 \001(\005\022\014\n\004name\030\006 \001(\t\022\r\n\005level\030\007 "
    "\001(\005\022\013\n\003sex\030\010 \001(\005\022\013\n\003vip\030\t \001(\005\">\n\021Persona"
    "lMessagees\022\014\n\004type\030\001 \001(\005\022\r\n\005objId\030\002 \001(\003\022"
    "\014\n\004name\030\003 \001(\t\"/\n\rGCCmmonDialog\022\014\n\004type\030\001"
    " \001(\005\022\020\n\010contents\030\002 \003(\t\"6\n\023SkillAttackRel"
    "ation\022\r\n\005objId\030\001 \001(\003\022\020\n\010relation\030\002 \001(\005\"H"
    "\n\014GCSendAddExp\022\013\n\003bid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\003"
    "\022\016\n\006addExp\030\003 \001(\005\022\016\n\006source\030\004 \001(\005\"`\n\016GCAd"
    "dVerifyBox\022\014\n\004type\030\001 \001(\005\022\017\n\007operate\030\002 \001("
    "\005\022\014\n\004time\030\003 \001(\005\022\016\n\006params\030\004 \003(\t\022\021\n\tmessa"
    "geID\030\005 \001(\005\"B\n\021CGVerifyBoxResult\022\014\n\004type\030"
    "\001 \001(\005\022\017\n\007operate\030\002 \001(\005\022\016\n\006params\030\003 \003(\t\"E"
    "\n\017GCCharacterTalk\022\r\n\005objId\030\001 \001(\003\022\020\n\010talk"
    "Word\030\002 \001(\005\022\021\n\ttalkVoice\030\003 \001(\005\"D\n\024GGDunge"
    "onChangeScene\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022"
    "\022\n\ninstanceId\030\003 \001(\005\"I\n\017RandomIndexInfo\022\035"
    "\n\025randomIndexHitChances\030\001 \001(\005\022\027\n\017randomI"
    "ndexCrit\030\002 \001(\005\"1\n\010Iteminfo\022\013\n\003bid\030\001 \001(\005\022"
    "\013\n\003sid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\032\n\014GCPlayEffec"
    "t\022\n\n\002id\030\001 \001(\005B\031\n\027com.mile.common.message", 3680);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InnerMessage.proto", &protobuf_RegisterTypes);
  RandomIsland::default_instance_ = new RandomIsland();
  Vector3Info::default_instance_ = new Vector3Info();
  SkillItemData::default_instance_ = new SkillItemData();
  CharacterViewMsg::default_instance_ = new CharacterViewMsg();
  CharacterInfo::default_instance_ = new CharacterInfo();
  HorseInfo::default_instance_ = new HorseInfo();
  ChangeEquipInfo::default_instance_ = new ChangeEquipInfo();
  PlayerFashion::default_instance_ = new PlayerFashion();
  RedCross::default_instance_ = new RedCross();
  CharacterAttr::default_instance_ = new CharacterAttr();
  PetAttr::default_instance_ = new PetAttr();
  PetInfo::default_instance_ = new PetInfo();
  GCChangeAttribute::default_instance_ = new GCChangeAttribute();
  GCErroeHintBack::default_instance_ = new GCErroeHintBack();
  DeviceInfo::default_instance_ = new DeviceInfo();
  Achievement::default_instance_ = new Achievement();
  Titlel::default_instance_ = new Titlel();
  TrapData::default_instance_ = new TrapData();
  TrapItemData::default_instance_ = new TrapItemData();
  VipData::default_instance_ = new VipData();
  GangInfo::default_instance_ = new GangInfo();
  FriendData::default_instance_ = new FriendData();
  PersonalMessagees::default_instance_ = new PersonalMessagees();
  GCCmmonDialog::default_instance_ = new GCCmmonDialog();
  SkillAttackRelation::default_instance_ = new SkillAttackRelation();
  GCSendAddExp::default_instance_ = new GCSendAddExp();
  GCAddVerifyBox::default_instance_ = new GCAddVerifyBox();
  CGVerifyBoxResult::default_instance_ = new CGVerifyBoxResult();
  GCCharacterTalk::default_instance_ = new GCCharacterTalk();
  GGDungeonChangeScene::default_instance_ = new GGDungeonChangeScene();
  RandomIndexInfo::default_instance_ = new RandomIndexInfo();
  Iteminfo::default_instance_ = new Iteminfo();
  GCPlayEffect::default_instance_ = new GCPlayEffect();
  RandomIsland::default_instance_->InitAsDefaultInstance();
  Vector3Info::default_instance_->InitAsDefaultInstance();
  SkillItemData::default_instance_->InitAsDefaultInstance();
  CharacterViewMsg::default_instance_->InitAsDefaultInstance();
  CharacterInfo::default_instance_->InitAsDefaultInstance();
  HorseInfo::default_instance_->InitAsDefaultInstance();
  ChangeEquipInfo::default_instance_->InitAsDefaultInstance();
  PlayerFashion::default_instance_->InitAsDefaultInstance();
  RedCross::default_instance_->InitAsDefaultInstance();
  CharacterAttr::default_instance_->InitAsDefaultInstance();
  PetAttr::default_instance_->InitAsDefaultInstance();
  PetInfo::default_instance_->InitAsDefaultInstance();
  GCChangeAttribute::default_instance_->InitAsDefaultInstance();
  GCErroeHintBack::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  Achievement::default_instance_->InitAsDefaultInstance();
  Titlel::default_instance_->InitAsDefaultInstance();
  TrapData::default_instance_->InitAsDefaultInstance();
  TrapItemData::default_instance_->InitAsDefaultInstance();
  VipData::default_instance_->InitAsDefaultInstance();
  GangInfo::default_instance_->InitAsDefaultInstance();
  FriendData::default_instance_->InitAsDefaultInstance();
  PersonalMessagees::default_instance_->InitAsDefaultInstance();
  GCCmmonDialog::default_instance_->InitAsDefaultInstance();
  SkillAttackRelation::default_instance_->InitAsDefaultInstance();
  GCSendAddExp::default_instance_->InitAsDefaultInstance();
  GCAddVerifyBox::default_instance_->InitAsDefaultInstance();
  CGVerifyBoxResult::default_instance_->InitAsDefaultInstance();
  GCCharacterTalk::default_instance_->InitAsDefaultInstance();
  GGDungeonChangeScene::default_instance_->InitAsDefaultInstance();
  RandomIndexInfo::default_instance_->InitAsDefaultInstance();
  Iteminfo::default_instance_->InitAsDefaultInstance();
  GCPlayEffect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InnerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InnerMessage_2eproto {
  StaticDescriptorInitializer_InnerMessage_2eproto() {
    protobuf_AddDesc_InnerMessage_2eproto();
  }
} static_descriptor_initializer_InnerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RandomIsland::kIslandNameFieldNumber;
const int RandomIsland::kPosXFieldNumber;
const int RandomIsland::kPosYFieldNumber;
#endif  // !_MSC_VER

RandomIsland::RandomIsland()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RandomIsland)
}

void RandomIsland::InitAsDefaultInstance() {
}

RandomIsland::RandomIsland(const RandomIsland& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RandomIsland)
}

void RandomIsland::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  islandname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomIsland::~RandomIsland() {
  // @@protoc_insertion_point(destructor:RandomIsland)
  SharedDtor();
}

void RandomIsland::SharedDtor() {
  if (islandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete islandname_;
  }
  if (this != default_instance_) {
  }
}

void RandomIsland::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomIsland::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomIsland_descriptor_;
}

const RandomIsland& RandomIsland::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

RandomIsland* RandomIsland::default_instance_ = NULL;

RandomIsland* RandomIsland::New() const {
  return new RandomIsland;
}

void RandomIsland::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RandomIsland*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(posx_, posy_);
    if (has_islandname()) {
      if (islandname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        islandname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RandomIsland)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string islandName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_islandname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->islandname().data(), this->islandname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "islandname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RandomIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RandomIsland)
  return false;
#undef DO_
}

void RandomIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RandomIsland)
  // optional string islandName = 1;
  if (has_islandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->islandname().data(), this->islandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "islandname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->islandname(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RandomIsland)
}

::google::protobuf::uint8* RandomIsland::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RandomIsland)
  // optional string islandName = 1;
  if (has_islandname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->islandname().data(), this->islandname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "islandname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->islandname(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RandomIsland)
  return target;
}

int RandomIsland::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string islandName = 1;
    if (has_islandname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->islandname());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomIsland::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomIsland* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomIsland*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomIsland::MergeFrom(const RandomIsland& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_islandname()) {
      set_islandname(from.islandname());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomIsland::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomIsland::CopyFrom(const RandomIsland& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomIsland::IsInitialized() const {

  return true;
}

void RandomIsland::Swap(RandomIsland* other) {
  if (other != this) {
    std::swap(islandname_, other->islandname_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomIsland::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomIsland_descriptor_;
  metadata.reflection = RandomIsland_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3Info::kXFieldNumber;
const int Vector3Info::kYFieldNumber;
const int Vector3Info::kZFieldNumber;
#endif  // !_MSC_VER

Vector3Info::Vector3Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector3Info)
}

void Vector3Info::InitAsDefaultInstance() {
}

Vector3Info::Vector3Info(const Vector3Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vector3Info)
}

void Vector3Info::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3Info::~Vector3Info() {
  // @@protoc_insertion_point(destructor:Vector3Info)
  SharedDtor();
}

void Vector3Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3Info_descriptor_;
}

const Vector3Info& Vector3Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

Vector3Info* Vector3Info::default_instance_ = NULL;

Vector3Info* Vector3Info::New() const {
  return new Vector3Info;
}

void Vector3Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vector3Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector3Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector3Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector3Info)
  return false;
#undef DO_
}

void Vector3Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector3Info)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector3Info)
}

::google::protobuf::uint8* Vector3Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3Info)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3Info)
  return target;
}

int Vector3Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3Info::MergeFrom(const Vector3Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3Info::CopyFrom(const Vector3Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3Info::IsInitialized() const {

  return true;
}

void Vector3Info::Swap(Vector3Info* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3Info_descriptor_;
  metadata.reflection = Vector3Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillItemData::kSkillidFieldNumber;
const int SkillItemData::kSkilllevelFieldNumber;
const int SkillItemData::kSkillpositionFieldNumber;
const int SkillItemData::kFlagnormalFieldNumber;
#endif  // !_MSC_VER

SkillItemData::SkillItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillItemData)
}

void SkillItemData::InitAsDefaultInstance() {
}

SkillItemData::SkillItemData(const SkillItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillItemData)
}

void SkillItemData::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skilllevel_ = 0;
  skillposition_ = 0;
  flagnormal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillItemData::~SkillItemData() {
  // @@protoc_insertion_point(destructor:SkillItemData)
  SharedDtor();
}

void SkillItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillItemData_descriptor_;
}

const SkillItemData& SkillItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

SkillItemData* SkillItemData::default_instance_ = NULL;

SkillItemData* SkillItemData::New() const {
  return new SkillItemData;
}

void SkillItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, flagnormal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skilllevel;
        break;
      }

      // optional int32 skilllevel = 2;
      case 2: {
        if (tag == 16) {
         parse_skilllevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillposition;
        break;
      }

      // optional int32 skillposition = 3;
      case 3: {
        if (tag == 24) {
         parse_skillposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillposition_)));
          set_has_skillposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flagnormal;
        break;
      }

      // optional int32 flagnormal = 4;
      case 4: {
        if (tag == 32) {
         parse_flagnormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagnormal_)));
          set_has_flagnormal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillItemData)
  return false;
#undef DO_
}

void SkillItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillItemData)
  // optional int32 skillid = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 skilllevel = 2;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilllevel(), output);
  }

  // optional int32 skillposition = 3;
  if (has_skillposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillposition(), output);
  }

  // optional int32 flagnormal = 4;
  if (has_flagnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flagnormal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillItemData)
}

::google::protobuf::uint8* SkillItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillItemData)
  // optional int32 skillid = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 skilllevel = 2;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilllevel(), target);
  }

  // optional int32 skillposition = 3;
  if (has_skillposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillposition(), target);
  }

  // optional int32 flagnormal = 4;
  if (has_flagnormal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flagnormal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillItemData)
  return target;
}

int SkillItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillid = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skilllevel = 2;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional int32 skillposition = 3;
    if (has_skillposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillposition());
    }

    // optional int32 flagnormal = 4;
    if (has_flagnormal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagnormal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillItemData::MergeFrom(const SkillItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
    if (from.has_skillposition()) {
      set_skillposition(from.skillposition());
    }
    if (from.has_flagnormal()) {
      set_flagnormal(from.flagnormal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillItemData::CopyFrom(const SkillItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillItemData::IsInitialized() const {

  return true;
}

void SkillItemData::Swap(SkillItemData* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(skillposition_, other->skillposition_);
    std::swap(flagnormal_, other->flagnormal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillItemData_descriptor_;
  metadata.reflection = SkillItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterViewMsg::kViewTypeFieldNumber;
const int CharacterViewMsg::kViewValueFieldNumber;
#endif  // !_MSC_VER

CharacterViewMsg::CharacterViewMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterViewMsg)
}

void CharacterViewMsg::InitAsDefaultInstance() {
}

CharacterViewMsg::CharacterViewMsg(const CharacterViewMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterViewMsg)
}

void CharacterViewMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  viewtype_ = 0;
  viewvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterViewMsg::~CharacterViewMsg() {
  // @@protoc_insertion_point(destructor:CharacterViewMsg)
  SharedDtor();
}

void CharacterViewMsg::SharedDtor() {
  if (viewvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewvalue_;
  }
  if (this != default_instance_) {
  }
}

void CharacterViewMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterViewMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterViewMsg_descriptor_;
}

const CharacterViewMsg& CharacterViewMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

CharacterViewMsg* CharacterViewMsg::default_instance_ = NULL;

CharacterViewMsg* CharacterViewMsg::New() const {
  return new CharacterViewMsg;
}

void CharacterViewMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    viewtype_ = 0;
    if (has_viewvalue()) {
      if (viewvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        viewvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterViewMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterViewMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 viewType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_viewValue;
        break;
      }

      // optional string viewValue = 2;
      case 2: {
        if (tag == 18) {
         parse_viewValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->viewvalue().data(), this->viewvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "viewvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterViewMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterViewMsg)
  return false;
#undef DO_
}

void CharacterViewMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterViewMsg)
  // optional int32 viewType = 1;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viewtype(), output);
  }

  // optional string viewValue = 2;
  if (has_viewvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewvalue().data(), this->viewvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewvalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->viewvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterViewMsg)
}

::google::protobuf::uint8* CharacterViewMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterViewMsg)
  // optional int32 viewType = 1;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viewtype(), target);
  }

  // optional string viewValue = 2;
  if (has_viewvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->viewvalue().data(), this->viewvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "viewvalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->viewvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterViewMsg)
  return target;
}

int CharacterViewMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 viewType = 1;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewtype());
    }

    // optional string viewValue = 2;
    if (has_viewvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterViewMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterViewMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterViewMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterViewMsg::MergeFrom(const CharacterViewMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_viewvalue()) {
      set_viewvalue(from.viewvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterViewMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterViewMsg::CopyFrom(const CharacterViewMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterViewMsg::IsInitialized() const {

  return true;
}

void CharacterViewMsg::Swap(CharacterViewMsg* other) {
  if (other != this) {
    std::swap(viewtype_, other->viewtype_);
    std::swap(viewvalue_, other->viewvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterViewMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterViewMsg_descriptor_;
  metadata.reflection = CharacterViewMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterInfo::kObjIdFieldNumber;
const int CharacterInfo::kCharNameFieldNumber;
const int CharacterInfo::kPosFieldNumber;
const int CharacterInfo::kDirectionFieldNumber;
const int CharacterInfo::kSidFieldNumber;
const int CharacterInfo::kBidFieldNumber;
const int CharacterInfo::kCharAttrFieldNumber;
const int CharacterInfo::kChangeEquipInfoFieldNumber;
const int CharacterInfo::kInteractIdFieldNumber;
const int CharacterInfo::kLiveTimeFieldNumber;
const int CharacterInfo::kRedcrossFieldNumber;
const int CharacterInfo::kHorseidFieldNumber;
const int CharacterInfo::kUsehorseflagFieldNumber;
const int CharacterInfo::kTitleidFieldNumber;
const int CharacterInfo::kBelongObjIdFieldNumber;
const int CharacterInfo::kGemEffectFieldNumber;
const int CharacterInfo::kGangInfoFieldNumber;
const int CharacterInfo::kEnterDungeonFieldNumber;
const int CharacterInfo::kPowerEffectFieldNumber;
const int CharacterInfo::kAwakeEffectFieldNumber;
const int CharacterInfo::kVipNameFieldNumber;
const int CharacterInfo::kRandomIndexInfoFieldNumber;
const int CharacterInfo::kHorseEquipEffectFieldNumber;
const int CharacterInfo::kFlowerValueFieldNumber;
const int CharacterInfo::kOtherNameFieldNumber;
const int CharacterInfo::kOtherSexFieldNumber;
const int CharacterInfo::kRoadsFieldNumber;
const int CharacterInfo::kOwnIdFieldNumber;
const int CharacterInfo::kViewsFieldNumber;
const int CharacterInfo::kCatchStateFieldNumber;
const int CharacterInfo::kDeleteTimeFieldNumber;
#endif  // !_MSC_VER

CharacterInfo::CharacterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterInfo)
}

void CharacterInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  changeequipinfo_ = const_cast< ::ChangeEquipInfo*>(&::ChangeEquipInfo::default_instance());
  redcross_ = const_cast< ::RedCross*>(&::RedCross::default_instance());
  ganginfo_ = const_cast< ::GangInfo*>(&::GangInfo::default_instance());
  randomindexinfo_ = const_cast< ::RandomIndexInfo*>(&::RandomIndexInfo::default_instance());
}

CharacterInfo::CharacterInfo(const CharacterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterInfo)
}

void CharacterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  direction_ = NULL;
  sid_ = 0;
  bid_ = 0;
  changeequipinfo_ = NULL;
  interactid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  livetime_ = 0;
  redcross_ = NULL;
  horseid_ = 0;
  usehorseflag_ = 0;
  titleid_ = 0;
  gemeffect_ = 0;
  ganginfo_ = NULL;
  enterdungeon_ = 0;
  powereffect_ = 0;
  awakeeffect_ = 0;
  vipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomindexinfo_ = NULL;
  horseequipeffect_ = 0;
  flowervalue_ = 0;
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  othersex_ = 0;
  ownid_ = GOOGLE_LONGLONG(0);
  catchstate_ = 0;
  deletetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterInfo::~CharacterInfo() {
  // @@protoc_insertion_point(destructor:CharacterInfo)
  SharedDtor();
}

void CharacterInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (interactid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interactid_;
  }
  if (vipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vipname_;
  }
  if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete othername_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
    delete changeequipinfo_;
    delete redcross_;
    delete ganginfo_;
    delete randomindexinfo_;
  }
}

void CharacterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterInfo_descriptor_;
}

const CharacterInfo& CharacterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

CharacterInfo* CharacterInfo::default_instance_ = NULL;

CharacterInfo* CharacterInfo::New() const {
  return new CharacterInfo;
}

void CharacterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(sid_, bid_);
    objid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
    if (has_changeequipinfo()) {
      if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(livetime_, titleid_);
    if (has_interactid()) {
      if (interactid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interactid_->clear();
      }
    }
    if (has_redcross()) {
      if (redcross_ != NULL) redcross_->::RedCross::Clear();
    }
    gemeffect_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(enterdungeon_, awakeeffect_);
    ZR_(horseequipeffect_, flowervalue_);
    if (has_ganginfo()) {
      if (ganginfo_ != NULL) ganginfo_->::GangInfo::Clear();
    }
    if (has_vipname()) {
      if (vipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vipname_->clear();
      }
    }
    if (has_randomindexinfo()) {
      if (randomindexinfo_ != NULL) randomindexinfo_->::RandomIndexInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 1795162112) {
    ZR_(ownid_, catchstate_);
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        othername_->clear();
      }
    }
    deletetime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  charattr_.Clear();
  belongobjid_.Clear();
  roads_.Clear();
  views_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // optional string charName = 2;
      case 2: {
        if (tag == 18) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 4;
      case 4: {
        if (tag == 34) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sid;
        break;
      }

      // optional int32 sid = 5;
      case 5: {
        if (tag == 40) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bid;
        break;
      }

      // optional int32 bid = 6;
      case 6: {
        if (tag == 48) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charAttr;
        break;
      }

      // repeated .CharacterAttr charAttr = 7;
      case 7: {
        if (tag == 58) {
         parse_charAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_charAttr;
        if (input->ExpectTag(66)) goto parse_changeEquipInfo;
        break;
      }

      // optional .ChangeEquipInfo changeEquipInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_changeEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeequipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_interactId;
        break;
      }

      // optional string interactId = 9;
      case 9: {
        if (tag == 74) {
         parse_interactId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interactid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interactid().data(), this->interactid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interactid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_liveTime;
        break;
      }

      // optional int32 liveTime = 10;
      case 10: {
        if (tag == 80) {
         parse_liveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &livetime_)));
          set_has_livetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_redcross;
        break;
      }

      // optional .RedCross redcross = 12;
      case 12: {
        if (tag == 98) {
         parse_redcross:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redcross()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_horseid;
        break;
      }

      // optional int32 horseid = 13;
      case 13: {
        if (tag == 104) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_usehorseflag;
        break;
      }

      // optional int32 usehorseflag = 14;
      case 14: {
        if (tag == 112) {
         parse_usehorseflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usehorseflag_)));
          set_has_usehorseflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 15;
      case 15: {
        if (tag == 120) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_belongObjId;
        break;
      }

      // repeated int64 belongObjId = 16;
      case 16: {
        if (tag == 128) {
         parse_belongObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 128, input, this->mutable_belongobjid())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_belongobjid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_belongObjId;
        if (input->ExpectTag(136)) goto parse_gemEffect;
        break;
      }

      // optional int32 gemEffect = 17;
      case 17: {
        if (tag == 136) {
         parse_gemEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemeffect_)));
          set_has_gemeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_gangInfo;
        break;
      }

      // optional .GangInfo gangInfo = 18;
      case 18: {
        if (tag == 146) {
         parse_gangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_enterDungeon;
        break;
      }

      // optional int32 enterDungeon = 19;
      case 19: {
        if (tag == 152) {
         parse_enterDungeon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterdungeon_)));
          set_has_enterdungeon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_powerEffect;
        break;
      }

      // optional int32 powerEffect = 20;
      case 20: {
        if (tag == 160) {
         parse_powerEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powereffect_)));
          set_has_powereffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_awakeEffect;
        break;
      }

      // optional int32 awakeEffect = 21;
      case 21: {
        if (tag == 168) {
         parse_awakeEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakeeffect_)));
          set_has_awakeeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_vipName;
        break;
      }

      // optional string vipName = 22;
      case 22: {
        if (tag == 178) {
         parse_vipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vipname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vipname().data(), this->vipname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vipname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_randomIndexInfo;
        break;
      }

      // optional .RandomIndexInfo randomIndexInfo = 23;
      case 23: {
        if (tag == 186) {
         parse_randomIndexInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomindexinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_horseEquipEffect;
        break;
      }

      // optional int32 horseEquipEffect = 24;
      case 24: {
        if (tag == 192) {
         parse_horseEquipEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseequipeffect_)));
          set_has_horseequipeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_flowerValue;
        break;
      }

      // optional int32 flowerValue = 25;
      case 25: {
        if (tag == 200) {
         parse_flowerValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flowervalue_)));
          set_has_flowervalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_otherName;
        break;
      }

      // optional string otherName = 26;
      case 26: {
        if (tag == 210) {
         parse_otherName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->othername().data(), this->othername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "othername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_otherSex;
        break;
      }

      // optional int32 otherSex = 27;
      case 27: {
        if (tag == 216) {
         parse_otherSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othersex_)));
          set_has_othersex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_roads;
        break;
      }

      // repeated .Vector3Info roads = 28;
      case 28: {
        if (tag == 226) {
         parse_roads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_roads;
        if (input->ExpectTag(232)) goto parse_ownId;
        break;
      }

      // optional int64 ownId = 29;
      case 29: {
        if (tag == 232) {
         parse_ownId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ownid_)));
          set_has_ownid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_views;
        break;
      }

      // repeated .CharacterViewMsg views = 30;
      case 30: {
        if (tag == 242) {
         parse_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_views;
        if (input->ExpectTag(248)) goto parse_catchState;
        break;
      }

      // optional int32 catchState = 31;
      case 31: {
        if (tag == 248) {
         parse_catchState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &catchstate_)));
          set_has_catchstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_deleteTime;
        break;
      }

      // optional int64 deleteTime = 32;
      case 32: {
        if (tag == 256) {
         parse_deleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deletetime_)));
          set_has_deletetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterInfo)
  return false;
#undef DO_
}

void CharacterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charname(), output);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .Vector3Info direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  // optional int32 sid = 5;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sid(), output);
  }

  // optional int32 bid = 6;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bid(), output);
  }

  // repeated .CharacterAttr charAttr = 7;
  for (int i = 0; i < this->charattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->charattr(i), output);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 8;
  if (has_changeequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->changeequipinfo(), output);
  }

  // optional string interactId = 9;
  if (has_interactid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interactid().data(), this->interactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interactid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->interactid(), output);
  }

  // optional int32 liveTime = 10;
  if (has_livetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->livetime(), output);
  }

  // optional .RedCross redcross = 12;
  if (has_redcross()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->redcross(), output);
  }

  // optional int32 horseid = 13;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->horseid(), output);
  }

  // optional int32 usehorseflag = 14;
  if (has_usehorseflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->usehorseflag(), output);
  }

  // optional int32 titleid = 15;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->titleid(), output);
  }

  // repeated int64 belongObjId = 16;
  for (int i = 0; i < this->belongobjid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      16, this->belongobjid(i), output);
  }

  // optional int32 gemEffect = 17;
  if (has_gemeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gemeffect(), output);
  }

  // optional .GangInfo gangInfo = 18;
  if (has_ganginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->ganginfo(), output);
  }

  // optional int32 enterDungeon = 19;
  if (has_enterdungeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->enterdungeon(), output);
  }

  // optional int32 powerEffect = 20;
  if (has_powereffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->powereffect(), output);
  }

  // optional int32 awakeEffect = 21;
  if (has_awakeeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->awakeeffect(), output);
  }

  // optional string vipName = 22;
  if (has_vipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vipname().data(), this->vipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vipname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->vipname(), output);
  }

  // optional .RandomIndexInfo randomIndexInfo = 23;
  if (has_randomindexinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->randomindexinfo(), output);
  }

  // optional int32 horseEquipEffect = 24;
  if (has_horseequipeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->horseequipeffect(), output);
  }

  // optional int32 flowerValue = 25;
  if (has_flowervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->flowervalue(), output);
  }

  // optional string otherName = 26;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->othername(), output);
  }

  // optional int32 otherSex = 27;
  if (has_othersex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->othersex(), output);
  }

  // repeated .Vector3Info roads = 28;
  for (int i = 0; i < this->roads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->roads(i), output);
  }

  // optional int64 ownId = 29;
  if (has_ownid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->ownid(), output);
  }

  // repeated .CharacterViewMsg views = 30;
  for (int i = 0; i < this->views_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->views(i), output);
  }

  // optional int32 catchState = 31;
  if (has_catchstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->catchstate(), output);
  }

  // optional int64 deleteTime = 32;
  if (has_deletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->deletetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterInfo)
}

::google::protobuf::uint8* CharacterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .Vector3Info direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  // optional int32 sid = 5;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sid(), target);
  }

  // optional int32 bid = 6;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bid(), target);
  }

  // repeated .CharacterAttr charAttr = 7;
  for (int i = 0; i < this->charattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->charattr(i), target);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 8;
  if (has_changeequipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->changeequipinfo(), target);
  }

  // optional string interactId = 9;
  if (has_interactid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interactid().data(), this->interactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interactid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->interactid(), target);
  }

  // optional int32 liveTime = 10;
  if (has_livetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->livetime(), target);
  }

  // optional .RedCross redcross = 12;
  if (has_redcross()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->redcross(), target);
  }

  // optional int32 horseid = 13;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->horseid(), target);
  }

  // optional int32 usehorseflag = 14;
  if (has_usehorseflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->usehorseflag(), target);
  }

  // optional int32 titleid = 15;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->titleid(), target);
  }

  // repeated int64 belongObjId = 16;
  for (int i = 0; i < this->belongobjid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(16, this->belongobjid(i), target);
  }

  // optional int32 gemEffect = 17;
  if (has_gemeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->gemeffect(), target);
  }

  // optional .GangInfo gangInfo = 18;
  if (has_ganginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->ganginfo(), target);
  }

  // optional int32 enterDungeon = 19;
  if (has_enterdungeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->enterdungeon(), target);
  }

  // optional int32 powerEffect = 20;
  if (has_powereffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->powereffect(), target);
  }

  // optional int32 awakeEffect = 21;
  if (has_awakeeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->awakeeffect(), target);
  }

  // optional string vipName = 22;
  if (has_vipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vipname().data(), this->vipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vipname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->vipname(), target);
  }

  // optional .RandomIndexInfo randomIndexInfo = 23;
  if (has_randomindexinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->randomindexinfo(), target);
  }

  // optional int32 horseEquipEffect = 24;
  if (has_horseequipeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->horseequipeffect(), target);
  }

  // optional int32 flowerValue = 25;
  if (has_flowervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->flowervalue(), target);
  }

  // optional string otherName = 26;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "othername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->othername(), target);
  }

  // optional int32 otherSex = 27;
  if (has_othersex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->othersex(), target);
  }

  // repeated .Vector3Info roads = 28;
  for (int i = 0; i < this->roads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->roads(i), target);
  }

  // optional int64 ownId = 29;
  if (has_ownid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->ownid(), target);
  }

  // repeated .CharacterViewMsg views = 30;
  for (int i = 0; i < this->views_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->views(i), target);
  }

  // optional int32 catchState = 31;
  if (has_catchstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->catchstate(), target);
  }

  // optional int64 deleteTime = 32;
  if (has_deletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->deletetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterInfo)
  return target;
}

int CharacterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional string charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional .Vector3Info pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 sid = 5;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 bid = 6;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional .ChangeEquipInfo changeEquipInfo = 8;
    if (has_changeequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeequipinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string interactId = 9;
    if (has_interactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interactid());
    }

    // optional int32 liveTime = 10;
    if (has_livetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->livetime());
    }

    // optional .RedCross redcross = 12;
    if (has_redcross()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->redcross());
    }

    // optional int32 horseid = 13;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseid());
    }

    // optional int32 usehorseflag = 14;
    if (has_usehorseflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usehorseflag());
    }

    // optional int32 titleid = 15;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 gemEffect = 17;
    if (has_gemeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemeffect());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .GangInfo gangInfo = 18;
    if (has_ganginfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ganginfo());
    }

    // optional int32 enterDungeon = 19;
    if (has_enterdungeon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterdungeon());
    }

    // optional int32 powerEffect = 20;
    if (has_powereffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powereffect());
    }

    // optional int32 awakeEffect = 21;
    if (has_awakeeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakeeffect());
    }

    // optional string vipName = 22;
    if (has_vipname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vipname());
    }

    // optional .RandomIndexInfo randomIndexInfo = 23;
    if (has_randomindexinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->randomindexinfo());
    }

    // optional int32 horseEquipEffect = 24;
    if (has_horseequipeffect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseequipeffect());
    }

    // optional int32 flowerValue = 25;
    if (has_flowervalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flowervalue());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string otherName = 26;
    if (has_othername()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othername());
    }

    // optional int32 otherSex = 27;
    if (has_othersex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othersex());
    }

    // optional int64 ownId = 29;
    if (has_ownid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ownid());
    }

    // optional int32 catchState = 31;
    if (has_catchstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->catchstate());
    }

    // optional int64 deleteTime = 32;
    if (has_deletetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deletetime());
    }

  }
  // repeated .CharacterAttr charAttr = 7;
  total_size += 1 * this->charattr_size();
  for (int i = 0; i < this->charattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charattr(i));
  }

  // repeated int64 belongObjId = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->belongobjid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->belongobjid(i));
    }
    total_size += 2 * this->belongobjid_size() + data_size;
  }

  // repeated .Vector3Info roads = 28;
  total_size += 2 * this->roads_size();
  for (int i = 0; i < this->roads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roads(i));
  }

  // repeated .CharacterViewMsg views = 30;
  total_size += 2 * this->views_size();
  for (int i = 0; i < this->views_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->views(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterInfo::MergeFrom(const CharacterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charattr_.MergeFrom(from.charattr_);
  belongobjid_.MergeFrom(from.belongobjid_);
  roads_.MergeFrom(from.roads_);
  views_.MergeFrom(from.views_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_changeequipinfo()) {
      mutable_changeequipinfo()->::ChangeEquipInfo::MergeFrom(from.changeequipinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interactid()) {
      set_interactid(from.interactid());
    }
    if (from.has_livetime()) {
      set_livetime(from.livetime());
    }
    if (from.has_redcross()) {
      mutable_redcross()->::RedCross::MergeFrom(from.redcross());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_usehorseflag()) {
      set_usehorseflag(from.usehorseflag());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_gemeffect()) {
      set_gemeffect(from.gemeffect());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ganginfo()) {
      mutable_ganginfo()->::GangInfo::MergeFrom(from.ganginfo());
    }
    if (from.has_enterdungeon()) {
      set_enterdungeon(from.enterdungeon());
    }
    if (from.has_powereffect()) {
      set_powereffect(from.powereffect());
    }
    if (from.has_awakeeffect()) {
      set_awakeeffect(from.awakeeffect());
    }
    if (from.has_vipname()) {
      set_vipname(from.vipname());
    }
    if (from.has_randomindexinfo()) {
      mutable_randomindexinfo()->::RandomIndexInfo::MergeFrom(from.randomindexinfo());
    }
    if (from.has_horseequipeffect()) {
      set_horseequipeffect(from.horseequipeffect());
    }
    if (from.has_flowervalue()) {
      set_flowervalue(from.flowervalue());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_othername()) {
      set_othername(from.othername());
    }
    if (from.has_othersex()) {
      set_othersex(from.othersex());
    }
    if (from.has_ownid()) {
      set_ownid(from.ownid());
    }
    if (from.has_catchstate()) {
      set_catchstate(from.catchstate());
    }
    if (from.has_deletetime()) {
      set_deletetime(from.deletetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterInfo::IsInitialized() const {

  return true;
}

void CharacterInfo::Swap(CharacterInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(charname_, other->charname_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    std::swap(sid_, other->sid_);
    std::swap(bid_, other->bid_);
    charattr_.Swap(&other->charattr_);
    std::swap(changeequipinfo_, other->changeequipinfo_);
    std::swap(interactid_, other->interactid_);
    std::swap(livetime_, other->livetime_);
    std::swap(redcross_, other->redcross_);
    std::swap(horseid_, other->horseid_);
    std::swap(usehorseflag_, other->usehorseflag_);
    std::swap(titleid_, other->titleid_);
    belongobjid_.Swap(&other->belongobjid_);
    std::swap(gemeffect_, other->gemeffect_);
    std::swap(ganginfo_, other->ganginfo_);
    std::swap(enterdungeon_, other->enterdungeon_);
    std::swap(powereffect_, other->powereffect_);
    std::swap(awakeeffect_, other->awakeeffect_);
    std::swap(vipname_, other->vipname_);
    std::swap(randomindexinfo_, other->randomindexinfo_);
    std::swap(horseequipeffect_, other->horseequipeffect_);
    std::swap(flowervalue_, other->flowervalue_);
    std::swap(othername_, other->othername_);
    std::swap(othersex_, other->othersex_);
    roads_.Swap(&other->roads_);
    std::swap(ownid_, other->ownid_);
    views_.Swap(&other->views_);
    std::swap(catchstate_, other->catchstate_);
    std::swap(deletetime_, other->deletetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterInfo_descriptor_;
  metadata.reflection = CharacterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseInfo::kTableidFieldNumber;
const int HorseInfo::kServeridFieldNumber;
const int HorseInfo::kIsuseFieldNumber;
const int HorseInfo::kUpstarrateFieldNumber;
#endif  // !_MSC_VER

HorseInfo::HorseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HorseInfo)
}

void HorseInfo::InitAsDefaultInstance() {
}

HorseInfo::HorseInfo(const HorseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HorseInfo)
}

void HorseInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  isuse_ = 0;
  upstarrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseInfo::~HorseInfo() {
  // @@protoc_insertion_point(destructor:HorseInfo)
  SharedDtor();
}

void HorseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseInfo_descriptor_;
}

const HorseInfo& HorseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

HorseInfo* HorseInfo::default_instance_ = NULL;

HorseInfo* HorseInfo::New() const {
  return new HorseInfo;
}

void HorseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HorseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(serverid_, upstarrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HorseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional int64 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isuse;
        break;
      }

      // optional int32 isuse = 3;
      case 3: {
        if (tag == 24) {
         parse_isuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isuse_)));
          set_has_isuse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upstarrate;
        break;
      }

      // optional int32 upstarrate = 4;
      case 4: {
        if (tag == 32) {
         parse_upstarrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upstarrate_)));
          set_has_upstarrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HorseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HorseInfo)
  return false;
#undef DO_
}

void HorseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HorseInfo)
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int64 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->serverid(), output);
  }

  // optional int32 isuse = 3;
  if (has_isuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isuse(), output);
  }

  // optional int32 upstarrate = 4;
  if (has_upstarrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upstarrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HorseInfo)
}

::google::protobuf::uint8* HorseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HorseInfo)
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int64 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->serverid(), target);
  }

  // optional int32 isuse = 3;
  if (has_isuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isuse(), target);
  }

  // optional int32 upstarrate = 4;
  if (has_upstarrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upstarrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HorseInfo)
  return target;
}

int HorseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int64 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional int32 isuse = 3;
    if (has_isuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isuse());
    }

    // optional int32 upstarrate = 4;
    if (has_upstarrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upstarrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseInfo::MergeFrom(const HorseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_isuse()) {
      set_isuse(from.isuse());
    }
    if (from.has_upstarrate()) {
      set_upstarrate(from.upstarrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseInfo::CopyFrom(const HorseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseInfo::IsInitialized() const {

  return true;
}

void HorseInfo::Swap(HorseInfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(serverid_, other->serverid_);
    std::swap(isuse_, other->isuse_);
    std::swap(upstarrate_, other->upstarrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseInfo_descriptor_;
  metadata.reflection = HorseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeEquipInfo::kHairFieldNumber;
const int ChangeEquipInfo::kFaceFieldNumber;
const int ChangeEquipInfo::kWeaponFieldNumber;
const int ChangeEquipInfo::kClothesFieldNumber;
const int ChangeEquipInfo::kFashionClothesFieldNumber;
const int ChangeEquipInfo::kFashionWeaponFieldNumber;
const int ChangeEquipInfo::kFashionHairFieldNumber;
const int ChangeEquipInfo::kIsviewFieldNumber;
#endif  // !_MSC_VER

ChangeEquipInfo::ChangeEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChangeEquipInfo)
}

void ChangeEquipInfo::InitAsDefaultInstance() {
}

ChangeEquipInfo::ChangeEquipInfo(const ChangeEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChangeEquipInfo)
}

void ChangeEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  hair_ = 0;
  face_ = 0;
  weapon_ = 0;
  clothes_ = 0;
  fashionclothes_ = 0;
  fashionweapon_ = 0;
  fashionhair_ = 0;
  isview_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeEquipInfo::~ChangeEquipInfo() {
  // @@protoc_insertion_point(destructor:ChangeEquipInfo)
  SharedDtor();
}

void ChangeEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeEquipInfo_descriptor_;
}

const ChangeEquipInfo& ChangeEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

ChangeEquipInfo* ChangeEquipInfo::default_instance_ = NULL;

ChangeEquipInfo* ChangeEquipInfo::New() const {
  return new ChangeEquipInfo;
}

void ChangeEquipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeEquipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hair_, isview_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChangeEquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hair = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_face;
        break;
      }

      // optional int32 face = 2;
      case 2: {
        if (tag == 16) {
         parse_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_)));
          set_has_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weapon;
        break;
      }

      // optional int32 weapon = 3;
      case 3: {
        if (tag == 24) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clothes;
        break;
      }

      // optional int32 clothes = 4;
      case 4: {
        if (tag == 32) {
         parse_clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothes_)));
          set_has_clothes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fashionClothes;
        break;
      }

      // optional int32 fashionClothes = 5;
      case 5: {
        if (tag == 40) {
         parse_fashionClothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionclothes_)));
          set_has_fashionclothes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fashionWeapon;
        break;
      }

      // optional int32 fashionWeapon = 6;
      case 6: {
        if (tag == 48) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fashionHair;
        break;
      }

      // optional int32 fashionHair = 7;
      case 7: {
        if (tag == 56) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isview;
        break;
      }

      // optional int32 isview = 8;
      case 8: {
        if (tag == 64) {
         parse_isview:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isview_)));
          set_has_isview();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChangeEquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChangeEquipInfo)
  return false;
#undef DO_
}

void ChangeEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChangeEquipInfo)
  // optional int32 hair = 1;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hair(), output);
  }

  // optional int32 face = 2;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->face(), output);
  }

  // optional int32 weapon = 3;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weapon(), output);
  }

  // optional int32 clothes = 4;
  if (has_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clothes(), output);
  }

  // optional int32 fashionClothes = 5;
  if (has_fashionclothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fashionclothes(), output);
  }

  // optional int32 fashionWeapon = 6;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fashionweapon(), output);
  }

  // optional int32 fashionHair = 7;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fashionhair(), output);
  }

  // optional int32 isview = 8;
  if (has_isview()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isview(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChangeEquipInfo)
}

::google::protobuf::uint8* ChangeEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChangeEquipInfo)
  // optional int32 hair = 1;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hair(), target);
  }

  // optional int32 face = 2;
  if (has_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->face(), target);
  }

  // optional int32 weapon = 3;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weapon(), target);
  }

  // optional int32 clothes = 4;
  if (has_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clothes(), target);
  }

  // optional int32 fashionClothes = 5;
  if (has_fashionclothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fashionclothes(), target);
  }

  // optional int32 fashionWeapon = 6;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fashionweapon(), target);
  }

  // optional int32 fashionHair = 7;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fashionhair(), target);
  }

  // optional int32 isview = 8;
  if (has_isview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isview(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeEquipInfo)
  return target;
}

int ChangeEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hair = 1;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional int32 face = 2;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face());
    }

    // optional int32 weapon = 3;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // optional int32 clothes = 4;
    if (has_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothes());
    }

    // optional int32 fashionClothes = 5;
    if (has_fashionclothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionclothes());
    }

    // optional int32 fashionWeapon = 6;
    if (has_fashionweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionweapon());
    }

    // optional int32 fashionHair = 7;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionhair());
    }

    // optional int32 isview = 8;
    if (has_isview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isview());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeEquipInfo::MergeFrom(const ChangeEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_clothes()) {
      set_clothes(from.clothes());
    }
    if (from.has_fashionclothes()) {
      set_fashionclothes(from.fashionclothes());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_isview()) {
      set_isview(from.isview());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeEquipInfo::CopyFrom(const ChangeEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeEquipInfo::IsInitialized() const {

  return true;
}

void ChangeEquipInfo::Swap(ChangeEquipInfo* other) {
  if (other != this) {
    std::swap(hair_, other->hair_);
    std::swap(face_, other->face_);
    std::swap(weapon_, other->weapon_);
    std::swap(clothes_, other->clothes_);
    std::swap(fashionclothes_, other->fashionclothes_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(isview_, other->isview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeEquipInfo_descriptor_;
  metadata.reflection = ChangeEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerFashion::kTableidFieldNumber;
const int PlayerFashion::kServeridFieldNumber;
const int PlayerFashion::kInvalidtimeFieldNumber;
const int PlayerFashion::kTimetypeFieldNumber;
const int PlayerFashion::kIsuserFieldNumber;
#endif  // !_MSC_VER

PlayerFashion::PlayerFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerFashion)
}

void PlayerFashion::InitAsDefaultInstance() {
}

PlayerFashion::PlayerFashion(const PlayerFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerFashion)
}

void PlayerFashion::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  invalidtime_ = GOOGLE_LONGLONG(0);
  timetype_ = 0;
  isuser_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerFashion::~PlayerFashion() {
  // @@protoc_insertion_point(destructor:PlayerFashion)
  SharedDtor();
}

void PlayerFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerFashion_descriptor_;
}

const PlayerFashion& PlayerFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

PlayerFashion* PlayerFashion::default_instance_ = NULL;

PlayerFashion* PlayerFashion::New() const {
  return new PlayerFashion;
}

void PlayerFashion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayerFashion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(serverid_, isuser_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerFashion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional int64 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invalidtime;
        break;
      }

      // optional int64 invalidtime = 3;
      case 3: {
        if (tag == 24) {
         parse_invalidtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invalidtime_)));
          set_has_invalidtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timetype;
        break;
      }

      // optional int32 timetype = 4;
      case 4: {
        if (tag == 32) {
         parse_timetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isuser;
        break;
      }

      // optional int32 isuser = 5;
      case 5: {
        if (tag == 40) {
         parse_isuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isuser_)));
          set_has_isuser();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerFashion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerFashion)
  return false;
#undef DO_
}

void PlayerFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerFashion)
  // optional int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // optional int64 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->serverid(), output);
  }

  // optional int64 invalidtime = 3;
  if (has_invalidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->invalidtime(), output);
  }

  // optional int32 timetype = 4;
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timetype(), output);
  }

  // optional int32 isuser = 5;
  if (has_isuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isuser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayerFashion)
}

::google::protobuf::uint8* PlayerFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerFashion)
  // optional int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // optional int64 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->serverid(), target);
  }

  // optional int64 invalidtime = 3;
  if (has_invalidtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->invalidtime(), target);
  }

  // optional int32 timetype = 4;
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timetype(), target);
  }

  // optional int32 isuser = 5;
  if (has_isuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isuser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerFashion)
  return target;
}

int PlayerFashion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int64 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional int64 invalidtime = 3;
    if (has_invalidtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invalidtime());
    }

    // optional int32 timetype = 4;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

    // optional int32 isuser = 5;
    if (has_isuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isuser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerFashion::MergeFrom(const PlayerFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_invalidtime()) {
      set_invalidtime(from.invalidtime());
    }
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
    if (from.has_isuser()) {
      set_isuser(from.isuser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerFashion::CopyFrom(const PlayerFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerFashion::IsInitialized() const {

  return true;
}

void PlayerFashion::Swap(PlayerFashion* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(serverid_, other->serverid_);
    std::swap(invalidtime_, other->invalidtime_);
    std::swap(timetype_, other->timetype_);
    std::swap(isuser_, other->isuser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerFashion_descriptor_;
  metadata.reflection = PlayerFashion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedCross::kRedcrossmaxhpFieldNumber;
const int RedCross::kRedcrosshpFieldNumber;
const int RedCross::kRedcrossmaxmpFieldNumber;
const int RedCross::kRedcrossmpFieldNumber;
#endif  // !_MSC_VER

RedCross::RedCross()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RedCross)
}

void RedCross::InitAsDefaultInstance() {
}

RedCross::RedCross(const RedCross& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RedCross)
}

void RedCross::SharedCtor() {
  _cached_size_ = 0;
  redcrossmaxhp_ = GOOGLE_LONGLONG(0);
  redcrosshp_ = GOOGLE_LONGLONG(0);
  redcrossmaxmp_ = GOOGLE_LONGLONG(0);
  redcrossmp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedCross::~RedCross() {
  // @@protoc_insertion_point(destructor:RedCross)
  SharedDtor();
}

void RedCross::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedCross::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedCross::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedCross_descriptor_;
}

const RedCross& RedCross::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

RedCross* RedCross::default_instance_ = NULL;

RedCross* RedCross::New() const {
  return new RedCross;
}

void RedCross::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RedCross*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(redcrossmaxhp_, redcrossmp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedCross::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RedCross)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 redcrossmaxhp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redcrossmaxhp_)));
          set_has_redcrossmaxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redcrosshp;
        break;
      }

      // optional int64 redcrosshp = 2;
      case 2: {
        if (tag == 16) {
         parse_redcrosshp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redcrosshp_)));
          set_has_redcrosshp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_redcrossmaxmp;
        break;
      }

      // optional int64 redcrossmaxmp = 3;
      case 3: {
        if (tag == 24) {
         parse_redcrossmaxmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redcrossmaxmp_)));
          set_has_redcrossmaxmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_redcrossmp;
        break;
      }

      // optional int64 redcrossmp = 4;
      case 4: {
        if (tag == 32) {
         parse_redcrossmp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &redcrossmp_)));
          set_has_redcrossmp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RedCross)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RedCross)
  return false;
#undef DO_
}

void RedCross::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RedCross)
  // optional int64 redcrossmaxhp = 1;
  if (has_redcrossmaxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->redcrossmaxhp(), output);
  }

  // optional int64 redcrosshp = 2;
  if (has_redcrosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->redcrosshp(), output);
  }

  // optional int64 redcrossmaxmp = 3;
  if (has_redcrossmaxmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->redcrossmaxmp(), output);
  }

  // optional int64 redcrossmp = 4;
  if (has_redcrossmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->redcrossmp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RedCross)
}

::google::protobuf::uint8* RedCross::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RedCross)
  // optional int64 redcrossmaxhp = 1;
  if (has_redcrossmaxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->redcrossmaxhp(), target);
  }

  // optional int64 redcrosshp = 2;
  if (has_redcrosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->redcrosshp(), target);
  }

  // optional int64 redcrossmaxmp = 3;
  if (has_redcrossmaxmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->redcrossmaxmp(), target);
  }

  // optional int64 redcrossmp = 4;
  if (has_redcrossmp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->redcrossmp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RedCross)
  return target;
}

int RedCross::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 redcrossmaxhp = 1;
    if (has_redcrossmaxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redcrossmaxhp());
    }

    // optional int64 redcrosshp = 2;
    if (has_redcrosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redcrosshp());
    }

    // optional int64 redcrossmaxmp = 3;
    if (has_redcrossmaxmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redcrossmaxmp());
    }

    // optional int64 redcrossmp = 4;
    if (has_redcrossmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->redcrossmp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedCross::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedCross* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedCross*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedCross::MergeFrom(const RedCross& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_redcrossmaxhp()) {
      set_redcrossmaxhp(from.redcrossmaxhp());
    }
    if (from.has_redcrosshp()) {
      set_redcrosshp(from.redcrosshp());
    }
    if (from.has_redcrossmaxmp()) {
      set_redcrossmaxmp(from.redcrossmaxmp());
    }
    if (from.has_redcrossmp()) {
      set_redcrossmp(from.redcrossmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedCross::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedCross::CopyFrom(const RedCross& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedCross::IsInitialized() const {

  return true;
}

void RedCross::Swap(RedCross* other) {
  if (other != this) {
    std::swap(redcrossmaxhp_, other->redcrossmaxhp_);
    std::swap(redcrosshp_, other->redcrosshp_);
    std::swap(redcrossmaxmp_, other->redcrossmaxmp_);
    std::swap(redcrossmp_, other->redcrossmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedCross::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedCross_descriptor_;
  metadata.reflection = RedCross_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterAttr::kAttrkeyFieldNumber;
const int CharacterAttr::kAttrvalueFieldNumber;
const int CharacterAttr::kViewflagFieldNumber;
#endif  // !_MSC_VER

CharacterAttr::CharacterAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterAttr)
}

void CharacterAttr::InitAsDefaultInstance() {
}

CharacterAttr::CharacterAttr(const CharacterAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterAttr)
}

void CharacterAttr::SharedCtor() {
  _cached_size_ = 0;
  attrkey_ = 0;
  attrvalue_ = GOOGLE_LONGLONG(0);
  viewflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterAttr::~CharacterAttr() {
  // @@protoc_insertion_point(destructor:CharacterAttr)
  SharedDtor();
}

void CharacterAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterAttr_descriptor_;
}

const CharacterAttr& CharacterAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

CharacterAttr* CharacterAttr::default_instance_ = NULL;

CharacterAttr* CharacterAttr::New() const {
  return new CharacterAttr;
}

void CharacterAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrvalue_, viewflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrkey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrkey_)));
          set_has_attrkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attrvalue;
        break;
      }

      // optional int64 attrvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_viewflag;
        break;
      }

      // optional int32 viewflag = 3;
      case 3: {
        if (tag == 24) {
         parse_viewflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewflag_)));
          set_has_viewflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterAttr)
  return false;
#undef DO_
}

void CharacterAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrkey(), output);
  }

  // optional int64 attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->attrvalue(), output);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viewflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterAttr)
}

::google::protobuf::uint8* CharacterAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrkey(), target);
  }

  // optional int64 attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->attrvalue(), target);
  }

  // optional int32 viewflag = 3;
  if (has_viewflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viewflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterAttr)
  return target;
}

int CharacterAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrkey = 1;
    if (has_attrkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrkey());
    }

    // optional int64 attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attrvalue());
    }

    // optional int32 viewflag = 3;
    if (has_viewflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterAttr::MergeFrom(const CharacterAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrkey()) {
      set_attrkey(from.attrkey());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
    if (from.has_viewflag()) {
      set_viewflag(from.viewflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterAttr::CopyFrom(const CharacterAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterAttr::IsInitialized() const {

  return true;
}

void CharacterAttr::Swap(CharacterAttr* other) {
  if (other != this) {
    std::swap(attrkey_, other->attrkey_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(viewflag_, other->viewflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterAttr_descriptor_;
  metadata.reflection = CharacterAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetAttr::kAttrkeyFieldNumber;
const int PetAttr::kAttrvalueFieldNumber;
const int PetAttr::kNumFieldNumber;
#endif  // !_MSC_VER

PetAttr::PetAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PetAttr)
}

void PetAttr::InitAsDefaultInstance() {
}

PetAttr::PetAttr(const PetAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PetAttr)
}

void PetAttr::SharedCtor() {
  _cached_size_ = 0;
  attrkey_ = 0;
  attrvalue_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetAttr::~PetAttr() {
  // @@protoc_insertion_point(destructor:PetAttr)
  SharedDtor();
}

void PetAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetAttr_descriptor_;
}

const PetAttr& PetAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

PetAttr* PetAttr::default_instance_ = NULL;

PetAttr* PetAttr::New() const {
  return new PetAttr;
}

void PetAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrkey_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PetAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrkey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrkey_)));
          set_has_attrkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attrvalue;
        break;
      }

      // optional int32 attrvalue = 2;
      case 2: {
        if (tag == 16) {
         parse_attrvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrvalue_)));
          set_has_attrvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PetAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PetAttr)
  return false;
#undef DO_
}

void PetAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PetAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrkey(), output);
  }

  // optional int32 attrvalue = 2;
  if (has_attrvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attrvalue(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PetAttr)
}

::google::protobuf::uint8* PetAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PetAttr)
  // optional int32 attrkey = 1;
  if (has_attrkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrkey(), target);
  }

  // optional int32 attrvalue = 2;
  if (has_attrvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attrvalue(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PetAttr)
  return target;
}

int PetAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrkey = 1;
    if (has_attrkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrkey());
    }

    // optional int32 attrvalue = 2;
    if (has_attrvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrvalue());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetAttr::MergeFrom(const PetAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrkey()) {
      set_attrkey(from.attrkey());
    }
    if (from.has_attrvalue()) {
      set_attrvalue(from.attrvalue());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetAttr::CopyFrom(const PetAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetAttr::IsInitialized() const {

  return true;
}

void PetAttr::Swap(PetAttr* other) {
  if (other != this) {
    std::swap(attrkey_, other->attrkey_);
    std::swap(attrvalue_, other->attrvalue_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetAttr_descriptor_;
  metadata.reflection = PetAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfo::kIdFieldNumber;
const int PetInfo::kNameFieldNumber;
const int PetInfo::kSexFieldNumber;
const int PetInfo::kQualityFieldNumber;
const int PetInfo::kCharacterFieldNumber;
const int PetInfo::kBattleflagFieldNumber;
const int PetInfo::kPetGrowFieldNumber;
const int PetInfo::kStarlevelFieldNumber;
const int PetInfo::kLevelFieldNumber;
const int PetInfo::kPetIdFieldNumber;
const int PetInfo::kPetAttrFieldNumber;
const int PetInfo::kPetAttrDownFieldNumber;
const int PetInfo::kSkilldataFieldNumber;
const int PetInfo::kObjidFieldNumber;
#endif  // !_MSC_VER

PetInfo::PetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PetInfo)
}

void PetInfo::InitAsDefaultInstance() {
}

PetInfo::PetInfo(const PetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PetInfo)
}

void PetInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  quality_ = 0;
  character_ = 0;
  battleflag_ = 0;
  petgrow_ = 0;
  starlevel_ = 0;
  level_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfo::~PetInfo() {
  // @@protoc_insertion_point(destructor:PetInfo)
  SharedDtor();
}

void PetInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInfo_descriptor_;
}

const PetInfo& PetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

PetInfo* PetInfo::default_instance_ = NULL;

PetInfo* PetInfo::New() const {
  return new PetInfo;
}

void PetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, starlevel_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 8960) {
    ZR_(level_, petid_);
    objid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  petattr_.Clear();
  petattrdown_.Clear();
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (tag == 32) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_character;
        break;
      }

      // optional int32 character = 5;
      case 5: {
        if (tag == 40) {
         parse_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_)));
          set_has_character();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_battleflag;
        break;
      }

      // optional int32 battleflag = 6;
      case 6: {
        if (tag == 48) {
         parse_battleflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleflag_)));
          set_has_battleflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_petGrow;
        break;
      }

      // optional int32 petGrow = 7;
      case 7: {
        if (tag == 56) {
         parse_petGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petgrow_)));
          set_has_petgrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starlevel;
        break;
      }

      // optional int32 starlevel = 8;
      case 8: {
        if (tag == 64) {
         parse_starlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (tag == 72) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_petId;
        break;
      }

      // optional int64 petId = 10;
      case 10: {
        if (tag == 80) {
         parse_petId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_petAttr;
        break;
      }

      // repeated .PetAttr petAttr = 11;
      case 11: {
        if (tag == 90) {
         parse_petAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_petAttr;
        if (input->ExpectTag(98)) goto parse_petAttrDown;
        break;
      }

      // repeated .PetAttr petAttrDown = 12;
      case 12: {
        if (tag == 98) {
         parse_petAttrDown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattrdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_petAttrDown;
        if (input->ExpectTag(106)) goto parse_skilldata;
        break;
      }

      // repeated .SkillItemData skilldata = 13;
      case 13: {
        if (tag == 106) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_skilldata;
        if (input->ExpectTag(112)) goto parse_objid;
        break;
      }

      // optional int64 objid = 14;
      case 14: {
        if (tag == 112) {
         parse_objid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PetInfo)
  return false;
#undef DO_
}

void PetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PetInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional int32 character = 5;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->character(), output);
  }

  // optional int32 battleflag = 6;
  if (has_battleflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battleflag(), output);
  }

  // optional int32 petGrow = 7;
  if (has_petgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->petgrow(), output);
  }

  // optional int32 starlevel = 8;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->starlevel(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int64 petId = 10;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->petid(), output);
  }

  // repeated .PetAttr petAttr = 11;
  for (int i = 0; i < this->petattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->petattr(i), output);
  }

  // repeated .PetAttr petAttrDown = 12;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->petattrdown(i), output);
  }

  // repeated .SkillItemData skilldata = 13;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skilldata(i), output);
  }

  // optional int64 objid = 14;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PetInfo)
}

::google::protobuf::uint8* PetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PetInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional int32 character = 5;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->character(), target);
  }

  // optional int32 battleflag = 6;
  if (has_battleflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battleflag(), target);
  }

  // optional int32 petGrow = 7;
  if (has_petgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->petgrow(), target);
  }

  // optional int32 starlevel = 8;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->starlevel(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int64 petId = 10;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->petid(), target);
  }

  // repeated .PetAttr petAttr = 11;
  for (int i = 0; i < this->petattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->petattr(i), target);
  }

  // repeated .PetAttr petAttrDown = 12;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->petattrdown(i), target);
  }

  // repeated .SkillItemData skilldata = 13;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skilldata(i), target);
  }

  // optional int64 objid = 14;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PetInfo)
  return target;
}

int PetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 character = 5;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character());
    }

    // optional int32 battleflag = 6;
    if (has_battleflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleflag());
    }

    // optional int32 petGrow = 7;
    if (has_petgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petgrow());
    }

    // optional int32 starlevel = 8;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 petId = 10;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int64 objid = 14;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  // repeated .PetAttr petAttr = 11;
  total_size += 1 * this->petattr_size();
  for (int i = 0; i < this->petattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattr(i));
  }

  // repeated .PetAttr petAttrDown = 12;
  total_size += 1 * this->petattrdown_size();
  for (int i = 0; i < this->petattrdown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattrdown(i));
  }

  // repeated .SkillItemData skilldata = 13;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInfo::MergeFrom(const PetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  petattr_.MergeFrom(from.petattr_);
  petattrdown_.MergeFrom(from.petattrdown_);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
    if (from.has_battleflag()) {
      set_battleflag(from.battleflag());
    }
    if (from.has_petgrow()) {
      set_petgrow(from.petgrow());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInfo::CopyFrom(const PetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfo::IsInitialized() const {

  return true;
}

void PetInfo::Swap(PetInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(quality_, other->quality_);
    std::swap(character_, other->character_);
    std::swap(battleflag_, other->battleflag_);
    std::swap(petgrow_, other->petgrow_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(level_, other->level_);
    std::swap(petid_, other->petid_);
    petattr_.Swap(&other->petattr_);
    petattrdown_.Swap(&other->petattrdown_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInfo_descriptor_;
  metadata.reflection = PetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeAttribute::kObjIdFieldNumber;
const int GCChangeAttribute::kTypeFieldNumber;
const int GCChangeAttribute::kBidFieldNumber;
const int GCChangeAttribute::kSidFieldNumber;
const int GCChangeAttribute::kInteractIdFieldNumber;
const int GCChangeAttribute::kInfoFieldNumber;
#endif  // !_MSC_VER

GCChangeAttribute::GCChangeAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeAttribute)
}

void GCChangeAttribute::InitAsDefaultInstance() {
  info_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCChangeAttribute::GCChangeAttribute(const GCChangeAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeAttribute)
}

void GCChangeAttribute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  bid_ = 0;
  sid_ = 0;
  interactid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeAttribute::~GCChangeAttribute() {
  // @@protoc_insertion_point(destructor:GCChangeAttribute)
  SharedDtor();
}

void GCChangeAttribute::SharedDtor() {
  if (interactid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interactid_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void GCChangeAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeAttribute_descriptor_;
}

const GCChangeAttribute& GCChangeAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCChangeAttribute* GCChangeAttribute::default_instance_ = NULL;

GCChangeAttribute* GCChangeAttribute::New() const {
  return new GCChangeAttribute;
}

void GCChangeAttribute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChangeAttribute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(objid_, bid_);
    sid_ = 0;
    if (has_interactid()) {
      if (interactid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interactid_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::CharacterInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bid;
        break;
      }

      // optional int32 bid = 3;
      case 3: {
        if (tag == 24) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional int32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_interactId;
        break;
      }

      // optional string interactId = 5;
      case 5: {
        if (tag == 42) {
         parse_interactId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interactid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interactid().data(), this->interactid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interactid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }

      // optional .CharacterInfo info = 6;
      case 6: {
        if (tag == 50) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeAttribute)
  return false;
#undef DO_
}

void GCChangeAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeAttribute)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bid(), output);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sid(), output);
  }

  // optional string interactId = 5;
  if (has_interactid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interactid().data(), this->interactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interactid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->interactid(), output);
  }

  // optional .CharacterInfo info = 6;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeAttribute)
}

::google::protobuf::uint8* GCChangeAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeAttribute)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bid(), target);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sid(), target);
  }

  // optional string interactId = 5;
  if (has_interactid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interactid().data(), this->interactid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interactid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->interactid(), target);
  }

  // optional .CharacterInfo info = 6;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeAttribute)
  return target;
}

int GCChangeAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 bid = 3;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string interactId = 5;
    if (has_interactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interactid());
    }

    // optional .CharacterInfo info = 6;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeAttribute::MergeFrom(const GCChangeAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_interactid()) {
      set_interactid(from.interactid());
    }
    if (from.has_info()) {
      mutable_info()->::CharacterInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeAttribute::CopyFrom(const GCChangeAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeAttribute::IsInitialized() const {

  return true;
}

void GCChangeAttribute::Swap(GCChangeAttribute* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(type_, other->type_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(interactid_, other->interactid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeAttribute_descriptor_;
  metadata.reflection = GCChangeAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCErroeHintBack::kErrorCodeFieldNumber;
const int GCErroeHintBack::kErrorDescFieldNumber;
const int GCErroeHintBack::kParmFieldNumber;
const int GCErroeHintBack::kBoxTypeFieldNumber;
#endif  // !_MSC_VER

GCErroeHintBack::GCErroeHintBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCErroeHintBack)
}

void GCErroeHintBack::InitAsDefaultInstance() {
}

GCErroeHintBack::GCErroeHintBack(const GCErroeHintBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCErroeHintBack)
}

void GCErroeHintBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 0;
  errordesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boxtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCErroeHintBack::~GCErroeHintBack() {
  // @@protoc_insertion_point(destructor:GCErroeHintBack)
  SharedDtor();
}

void GCErroeHintBack::SharedDtor() {
  if (errordesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errordesc_;
  }
  if (this != default_instance_) {
  }
}

void GCErroeHintBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCErroeHintBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCErroeHintBack_descriptor_;
}

const GCErroeHintBack& GCErroeHintBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCErroeHintBack* GCErroeHintBack::default_instance_ = NULL;

GCErroeHintBack* GCErroeHintBack::New() const {
  return new GCErroeHintBack;
}

void GCErroeHintBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCErroeHintBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(errorcode_, boxtype_);
    if (has_errordesc()) {
      if (errordesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errordesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  parm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCErroeHintBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCErroeHintBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorDesc;
        break;
      }

      // optional string errorDesc = 2;
      case 2: {
        if (tag == 18) {
         parse_errorDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errordesc().data(), this->errordesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errordesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parm;
        break;
      }

      // repeated string parm = 3;
      case 3: {
        if (tag == 26) {
         parse_parm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parm(this->parm_size() - 1).data(),
            this->parm(this->parm_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parm;
        if (input->ExpectTag(32)) goto parse_boxType;
        break;
      }

      // optional int32 boxType = 4;
      case 4: {
        if (tag == 32) {
         parse_boxType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxtype_)));
          set_has_boxtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCErroeHintBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCErroeHintBack)
  return false;
#undef DO_
}

void GCErroeHintBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCErroeHintBack)
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional string errorDesc = 2;
  if (has_errordesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errordesc().data(), this->errordesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errordesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errordesc(), output);
  }

  // repeated string parm = 3;
  for (int i = 0; i < this->parm_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->parm(i).data(), this->parm(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "parm");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parm(i), output);
  }

  // optional int32 boxType = 4;
  if (has_boxtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boxtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCErroeHintBack)
}

::google::protobuf::uint8* GCErroeHintBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCErroeHintBack)
  // optional int32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional string errorDesc = 2;
  if (has_errordesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errordesc().data(), this->errordesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errordesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errordesc(), target);
  }

  // repeated string parm = 3;
  for (int i = 0; i < this->parm_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parm(i).data(), this->parm(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parm");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->parm(i), target);
  }

  // optional int32 boxType = 4;
  if (has_boxtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boxtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCErroeHintBack)
  return target;
}

int GCErroeHintBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional string errorDesc = 2;
    if (has_errordesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errordesc());
    }

    // optional int32 boxType = 4;
    if (has_boxtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxtype());
    }

  }
  // repeated string parm = 3;
  total_size += 1 * this->parm_size();
  for (int i = 0; i < this->parm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCErroeHintBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCErroeHintBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCErroeHintBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCErroeHintBack::MergeFrom(const GCErroeHintBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  parm_.MergeFrom(from.parm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errordesc()) {
      set_errordesc(from.errordesc());
    }
    if (from.has_boxtype()) {
      set_boxtype(from.boxtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCErroeHintBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCErroeHintBack::CopyFrom(const GCErroeHintBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCErroeHintBack::IsInitialized() const {

  return true;
}

void GCErroeHintBack::Swap(GCErroeHintBack* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errordesc_, other->errordesc_);
    parm_.Swap(&other->parm_);
    std::swap(boxtype_, other->boxtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCErroeHintBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCErroeHintBack_descriptor_;
  metadata.reflection = GCErroeHintBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kObjIdFieldNumber;
const int DeviceInfo::kPosFieldNumber;
const int DeviceInfo::kBidFieldNumber;
const int DeviceInfo::kSidFieldNumber;
const int DeviceInfo::kDeviceTypeFieldNumber;
const int DeviceInfo::kNumFieldNumber;
const int DeviceInfo::kStatusFieldNumber;
const int DeviceInfo::kSrcPosFieldNumber;
const int DeviceInfo::kCampFieldNumber;
const int DeviceInfo::kIsCurrencyFieldNumber;
const int DeviceInfo::kStrFieldNumber;
const int DeviceInfo::kDirectionFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  srcpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  pos_ = NULL;
  bid_ = 0;
  sid_ = 0;
  devicetype_ = 0;
  num_ = 0;
  status_ = 0;
  srcpos_ = NULL;
  camp_ = 0;
  iscurrency_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete srcpos_;
    delete direction_;
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bid_, num_);
    objid_ = GOOGLE_LONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    status_ = 0;
    if (has_srcpos()) {
      if (srcpos_ != NULL) srcpos_->::Vector3Info::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    camp_ = 0;
    iscurrency_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        str_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bid;
        break;
      }

      // optional int32 bid = 3;
      case 3: {
        if (tag == 24) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional int32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deviceType;
        break;
      }

      // optional int32 deviceType = 5;
      case 5: {
        if (tag == 40) {
         parse_deviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (tag == 48) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_srcPos;
        break;
      }

      // optional .Vector3Info srcPos = 8;
      case 8: {
        if (tag == 66) {
         parse_srcPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srcpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_camp;
        break;
      }

      // optional int32 camp = 9;
      case 9: {
        if (tag == 72) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_isCurrency;
        break;
      }

      // optional int32 isCurrency = 10;
      case 10: {
        if (tag == 80) {
         parse_isCurrency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscurrency_)));
          set_has_iscurrency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_str;
        break;
      }

      // optional string str = 11;
      case 11: {
        if (tag == 90) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 12;
      case 12: {
        if (tag == 98) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bid(), output);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sid(), output);
  }

  // optional int32 deviceType = 5;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->devicetype(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional .Vector3Info srcPos = 8;
  if (has_srcpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->srcpos(), output);
  }

  // optional int32 camp = 9;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->camp(), output);
  }

  // optional int32 isCurrency = 10;
  if (has_iscurrency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->iscurrency(), output);
  }

  // optional string str = 11;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->str(), output);
  }

  // optional .Vector3Info direction = 12;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bid(), target);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sid(), target);
  }

  // optional int32 deviceType = 5;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->devicetype(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  // optional .Vector3Info srcPos = 8;
  if (has_srcpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->srcpos(), target);
  }

  // optional int32 camp = 9;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->camp(), target);
  }

  // optional int32 isCurrency = 10;
  if (has_iscurrency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->iscurrency(), target);
  }

  // optional string str = 11;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->str(), target);
  }

  // optional .Vector3Info direction = 12;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceInfo)
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional .Vector3Info pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 bid = 3;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 deviceType = 5;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicetype());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .Vector3Info srcPos = 8;
    if (has_srcpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srcpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 camp = 9;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // optional int32 isCurrency = 10;
    if (has_iscurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscurrency());
    }

    // optional string str = 11;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional .Vector3Info direction = 12;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_srcpos()) {
      mutable_srcpos()->::Vector3Info::MergeFrom(from.srcpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_iscurrency()) {
      set_iscurrency(from.iscurrency());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(pos_, other->pos_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(num_, other->num_);
    std::swap(status_, other->status_);
    std::swap(srcpos_, other->srcpos_);
    std::swap(camp_, other->camp_);
    std::swap(iscurrency_, other->iscurrency_);
    std::swap(str_, other->str_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Achievement::kIdFieldNumber;
const int Achievement::kIsoverFieldNumber;
const int Achievement::kIsgetFieldNumber;
const int Achievement::kValueFieldNumber;
const int Achievement::kGetachievetimeFieldNumber;
#endif  // !_MSC_VER

Achievement::Achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Achievement)
}

void Achievement::InitAsDefaultInstance() {
}

Achievement::Achievement(const Achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Achievement)
}

void Achievement::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isover_ = 0;
  isget_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  getachievetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Achievement::~Achievement() {
  // @@protoc_insertion_point(destructor:Achievement)
  SharedDtor();
}

void Achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Achievement_descriptor_;
}

const Achievement& Achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

Achievement* Achievement::default_instance_ = NULL;

Achievement* Achievement::New() const {
  return new Achievement;
}

void Achievement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Achievement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, isget_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Achievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isover;
        break;
      }

      // optional int32 isover = 2;
      case 2: {
        if (tag == 16) {
         parse_isover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isover_)));
          set_has_isover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isget;
        break;
      }

      // optional int32 isget = 3;
      case 3: {
        if (tag == 24) {
         parse_isget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int64 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_getachievetime;
        break;
      }

      // optional int64 getachievetime = 5;
      case 5: {
        if (tag == 40) {
         parse_getachievetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &getachievetime_)));
          set_has_getachievetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Achievement)
  return false;
#undef DO_
}

void Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Achievement)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 isover = 2;
  if (has_isover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isover(), output);
  }

  // optional int32 isget = 3;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isget(), output);
  }

  // optional int64 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->value(), output);
  }

  // optional int64 getachievetime = 5;
  if (has_getachievetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->getachievetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Achievement)
}

::google::protobuf::uint8* Achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Achievement)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 isover = 2;
  if (has_isover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isover(), target);
  }

  // optional int32 isget = 3;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isget(), target);
  }

  // optional int64 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->value(), target);
  }

  // optional int64 getachievetime = 5;
  if (has_getachievetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->getachievetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Achievement)
  return target;
}

int Achievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 isover = 2;
    if (has_isover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isover());
    }

    // optional int32 isget = 3;
    if (has_isget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isget());
    }

    // optional int64 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int64 getachievetime = 5;
    if (has_getachievetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->getachievetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Achievement::MergeFrom(const Achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isover()) {
      set_isover(from.isover());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_getachievetime()) {
      set_getachievetime(from.getachievetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Achievement::CopyFrom(const Achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Achievement::IsInitialized() const {

  return true;
}

void Achievement::Swap(Achievement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(isover_, other->isover_);
    std::swap(isget_, other->isget_);
    std::swap(value_, other->value_);
    std::swap(getachievetime_, other->getachievetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Achievement_descriptor_;
  metadata.reflection = Achievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Titlel::kIdFieldNumber;
const int Titlel::kFlagFieldNumber;
const int Titlel::kStatusFieldNumber;
const int Titlel::kEndtimeFieldNumber;
#endif  // !_MSC_VER

Titlel::Titlel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Titlel)
}

void Titlel::InitAsDefaultInstance() {
}

Titlel::Titlel(const Titlel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Titlel)
}

void Titlel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0;
  status_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Titlel::~Titlel() {
  // @@protoc_insertion_point(destructor:Titlel)
  SharedDtor();
}

void Titlel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Titlel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Titlel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Titlel_descriptor_;
}

const Titlel& Titlel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

Titlel* Titlel::default_instance_ = NULL;

Titlel* Titlel::New() const {
  return new Titlel;
}

void Titlel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Titlel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Titlel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Titlel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Titlel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Titlel)
  return false;
#undef DO_
}

void Titlel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Titlel)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Titlel)
}

::google::protobuf::uint8* Titlel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Titlel)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Titlel)
  return target;
}

int Titlel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Titlel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Titlel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Titlel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Titlel::MergeFrom(const Titlel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Titlel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Titlel::CopyFrom(const Titlel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Titlel::IsInitialized() const {

  return true;
}

void Titlel::Swap(Titlel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    std::swap(status_, other->status_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Titlel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Titlel_descriptor_;
  metadata.reflection = Titlel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapData::kObjIdFieldNumber;
const int TrapData::kSidFieldNumber;
const int TrapData::kItemsFieldNumber;
#endif  // !_MSC_VER

TrapData::TrapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrapData)
}

void TrapData::InitAsDefaultInstance() {
}

TrapData::TrapData(const TrapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrapData)
}

void TrapData::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapData::~TrapData() {
  // @@protoc_insertion_point(destructor:TrapData)
  SharedDtor();
}

void TrapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapData_descriptor_;
}

const TrapData& TrapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

TrapData* TrapData::default_instance_ = NULL;

TrapData* TrapData::New() const {
  return new TrapData;
}

void TrapData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    objid_ = GOOGLE_LONGLONG(0);
    sid_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .TrapItemData items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrapData)
  return false;
#undef DO_
}

void TrapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrapData)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // repeated .TrapItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrapData)
}

::google::protobuf::uint8* TrapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrapData)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // repeated .TrapItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrapData)
  return target;
}

int TrapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

  }
  // repeated .TrapItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrapData::MergeFrom(const TrapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapData::CopyFrom(const TrapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapData::IsInitialized() const {

  return true;
}

void TrapData::Swap(TrapData* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sid_, other->sid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapData_descriptor_;
  metadata.reflection = TrapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapItemData::kObjIdFieldNumber;
const int TrapItemData::kSidFieldNumber;
const int TrapItemData::kPosFieldNumber;
const int TrapItemData::kDirFieldNumber;
#endif  // !_MSC_VER

TrapItemData::TrapItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrapItemData)
}

void TrapItemData::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  dir_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

TrapItemData::TrapItemData(const TrapItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrapItemData)
}

void TrapItemData::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  pos_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapItemData::~TrapItemData() {
  // @@protoc_insertion_point(destructor:TrapItemData)
  SharedDtor();
}

void TrapItemData::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
  }
}

void TrapItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapItemData_descriptor_;
}

const TrapItemData& TrapItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

TrapItemData* TrapItemData::default_instance_ = NULL;

TrapItemData* TrapItemData::New() const {
  return new TrapItemData;
}

void TrapItemData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    objid_ = GOOGLE_LONGLONG(0);
    sid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrapItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrapItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // optional .Vector3Info dir = 4;
      case 4: {
        if (tag == 34) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrapItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrapItemData)
  return false;
#undef DO_
}

void TrapItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrapItemData)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .Vector3Info dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrapItemData)
}

::google::protobuf::uint8* TrapItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrapItemData)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .Vector3Info dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrapItemData)
  return target;
}

int TrapItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional .Vector3Info pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrapItemData::MergeFrom(const TrapItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_dir()) {
      mutable_dir()->::Vector3Info::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrapItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapItemData::CopyFrom(const TrapItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapItemData::IsInitialized() const {

  return true;
}

void TrapItemData::Swap(TrapItemData* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(sid_, other->sid_);
    std::swap(pos_, other->pos_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrapItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapItemData_descriptor_;
  metadata.reflection = TrapItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipData::kViplevelFieldNumber;
const int VipData::kGetflagFieldNumber;
#endif  // !_MSC_VER

VipData::VipData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipData)
}

void VipData::InitAsDefaultInstance() {
}

VipData::VipData(const VipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipData)
}

void VipData::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0;
  getflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipData::~VipData() {
  // @@protoc_insertion_point(destructor:VipData)
  SharedDtor();
}

void VipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipData_descriptor_;
}

const VipData& VipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

VipData* VipData::default_instance_ = NULL;

VipData* VipData::New() const {
  return new VipData;
}

void VipData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VipData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(viplevel_, getflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 viplevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_getflag;
        break;
      }

      // optional int32 getflag = 2;
      case 2: {
        if (tag == 16) {
         parse_getflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getflag_)));
          set_has_getflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipData)
  return false;
#undef DO_
}

void VipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipData)
  // optional int32 viplevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional int32 getflag = 2;
  if (has_getflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->getflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipData)
}

::google::protobuf::uint8* VipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipData)
  // optional int32 viplevel = 1;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viplevel(), target);
  }

  // optional int32 getflag = 2;
  if (has_getflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->getflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipData)
  return target;
}

int VipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 viplevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 getflag = 2;
    if (has_getflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipData::MergeFrom(const VipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_getflag()) {
      set_getflag(from.getflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipData::CopyFrom(const VipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipData::IsInitialized() const {

  return true;
}

void VipData::Swap(VipData* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(getflag_, other->getflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipData_descriptor_;
  metadata.reflection = VipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GangInfo::kGangIdFieldNumber;
const int GangInfo::kGangNameFieldNumber;
const int GangInfo::kTotemNameFieldNumber;
const int GangInfo::kGangJobFieldNumber;
#endif  // !_MSC_VER

GangInfo::GangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangInfo)
}

void GangInfo::InitAsDefaultInstance() {
}

GangInfo::GangInfo(const GangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangInfo)
}

void GangInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangjob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangInfo::~GangInfo() {
  // @@protoc_insertion_point(destructor:GangInfo)
  SharedDtor();
}

void GangInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (totemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete totemname_;
  }
  if (this != default_instance_) {
  }
}

void GangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangInfo_descriptor_;
}

const GangInfo& GangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GangInfo* GangInfo::default_instance_ = NULL;

GangInfo* GangInfo::New() const {
  return new GangInfo;
}

void GangInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
    if (has_totemname()) {
      if (totemname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        totemname_->clear();
      }
    }
    gangjob_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gangId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_totemName;
        break;
      }

      // optional string totemName = 3;
      case 3: {
        if (tag == 26) {
         parse_totemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->totemname().data(), this->totemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "totemname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gangJob;
        break;
      }

      // optional int32 gangJob = 4;
      case 4: {
        if (tag == 32) {
         parse_gangJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangjob_)));
          set_has_gangjob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangInfo)
  return false;
#undef DO_
}

void GangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  // optional string totemName = 3;
  if (has_totemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totemname().data(), this->totemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->totemname(), output);
  }

  // optional int32 gangJob = 4;
  if (has_gangjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gangjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangInfo)
}

::google::protobuf::uint8* GangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  // optional string totemName = 3;
  if (has_totemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->totemname().data(), this->totemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "totemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->totemname(), target);
  }

  // optional int32 gangJob = 4;
  if (has_gangjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gangjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangInfo)
  return target;
}

int GangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gangId = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

    // optional string totemName = 3;
    if (has_totemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totemname());
    }

    // optional int32 gangJob = 4;
    if (has_gangjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangjob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangInfo::MergeFrom(const GangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
    if (from.has_totemname()) {
      set_totemname(from.totemname());
    }
    if (from.has_gangjob()) {
      set_gangjob(from.gangjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangInfo::CopyFrom(const GangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangInfo::IsInitialized() const {

  return true;
}

void GangInfo::Swap(GangInfo* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(totemname_, other->totemname_);
    std::swap(gangjob_, other->gangjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangInfo_descriptor_;
  metadata.reflection = GangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendData::kObjIdFieldNumber;
const int FriendData::kAddressFieldNumber;
const int FriendData::kOnlineFieldNumber;
const int FriendData::kTypeFieldNumber;
const int FriendData::kCareerFieldNumber;
const int FriendData::kNameFieldNumber;
const int FriendData::kLevelFieldNumber;
const int FriendData::kSexFieldNumber;
const int FriendData::kVipFieldNumber;
#endif  // !_MSC_VER

FriendData::FriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendData)
}

void FriendData::InitAsDefaultInstance() {
}

FriendData::FriendData(const FriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendData)
}

void FriendData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_ = 0;
  type_ = 0;
  career_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  sex_ = 0;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendData::~FriendData() {
  // @@protoc_insertion_point(destructor:FriendData)
  SharedDtor();
}

void FriendData::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendData_descriptor_;
}

const FriendData& FriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

FriendData* FriendData::default_instance_ = NULL;

FriendData* FriendData::New() const {
  return new FriendData;
}

void FriendData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(online_, type_);
    ZR_(career_, sex_);
    objid_ = GOOGLE_LONGLONG(0);
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        address_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  vip_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_online;
        break;
      }

      // optional int32 online = 3;
      case 3: {
        if (tag == 24) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_career;
        break;
      }

      // optional int32 career = 5;
      case 5: {
        if (tag == 40) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional int32 sex = 8;
      case 8: {
        if (tag == 64) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // optional int32 vip = 9;
      case 9: {
        if (tag == 72) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendData)
  return false;
#undef DO_
}

void FriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendData)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional int32 online = 3;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->online(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 career = 5;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FriendData)
}

::google::protobuf::uint8* FriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendData)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional int32 online = 3;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->online(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 career = 5;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FriendData)
  return target;
}

int FriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 online = 3;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 career = 5;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendData::MergeFrom(const FriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendData::CopyFrom(const FriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendData::IsInitialized() const {

  return true;
}

void FriendData::Swap(FriendData* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(address_, other->address_);
    std::swap(online_, other->online_);
    std::swap(type_, other->type_);
    std::swap(career_, other->career_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendData_descriptor_;
  metadata.reflection = FriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonalMessagees::kTypeFieldNumber;
const int PersonalMessagees::kObjIdFieldNumber;
const int PersonalMessagees::kNameFieldNumber;
#endif  // !_MSC_VER

PersonalMessagees::PersonalMessagees()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PersonalMessagees)
}

void PersonalMessagees::InitAsDefaultInstance() {
}

PersonalMessagees::PersonalMessagees(const PersonalMessagees& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PersonalMessagees)
}

void PersonalMessagees::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonalMessagees::~PersonalMessagees() {
  // @@protoc_insertion_point(destructor:PersonalMessagees)
  SharedDtor();
}

void PersonalMessagees::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PersonalMessagees::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonalMessagees::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonalMessagees_descriptor_;
}

const PersonalMessagees& PersonalMessagees::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

PersonalMessagees* PersonalMessagees::default_instance_ = NULL;

PersonalMessagees* PersonalMessagees::New() const {
  return new PersonalMessagees;
}

void PersonalMessagees::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    objid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonalMessagees::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PersonalMessagees)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // optional int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PersonalMessagees)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PersonalMessagees)
  return false;
#undef DO_
}

void PersonalMessagees::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PersonalMessagees)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PersonalMessagees)
}

::google::protobuf::uint8* PersonalMessagees::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PersonalMessagees)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PersonalMessagees)
  return target;
}

int PersonalMessagees::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonalMessagees::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonalMessagees* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonalMessagees*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonalMessagees::MergeFrom(const PersonalMessagees& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonalMessagees::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalMessagees::CopyFrom(const PersonalMessagees& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalMessagees::IsInitialized() const {

  return true;
}

void PersonalMessagees::Swap(PersonalMessagees* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(objid_, other->objid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonalMessagees::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonalMessagees_descriptor_;
  metadata.reflection = PersonalMessagees_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCmmonDialog::kTypeFieldNumber;
const int GCCmmonDialog::kContentsFieldNumber;
#endif  // !_MSC_VER

GCCmmonDialog::GCCmmonDialog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCmmonDialog)
}

void GCCmmonDialog::InitAsDefaultInstance() {
}

GCCmmonDialog::GCCmmonDialog(const GCCmmonDialog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCmmonDialog)
}

void GCCmmonDialog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCmmonDialog::~GCCmmonDialog() {
  // @@protoc_insertion_point(destructor:GCCmmonDialog)
  SharedDtor();
}

void GCCmmonDialog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCmmonDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCmmonDialog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCmmonDialog_descriptor_;
}

const GCCmmonDialog& GCCmmonDialog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCCmmonDialog* GCCmmonDialog::default_instance_ = NULL;

GCCmmonDialog* GCCmmonDialog::New() const {
  return new GCCmmonDialog;
}

void GCCmmonDialog::Clear() {
  type_ = 0;
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCmmonDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCmmonDialog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        break;
      }

      // repeated string contents = 2;
      case 2: {
        if (tag == 18) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contents(this->contents_size() - 1).data(),
            this->contents(this->contents_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "contents");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCmmonDialog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCmmonDialog)
  return false;
#undef DO_
}

void GCCmmonDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCmmonDialog)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated string contents = 2;
  for (int i = 0; i < this->contents_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->contents(i).data(), this->contents(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "contents");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCmmonDialog)
}

::google::protobuf::uint8* GCCmmonDialog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCmmonDialog)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated string contents = 2;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contents(i).data(), this->contents(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "contents");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->contents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCmmonDialog)
  return target;
}

int GCCmmonDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string contents = 2;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->contents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCmmonDialog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCmmonDialog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCmmonDialog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCmmonDialog::MergeFrom(const GCCmmonDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCmmonDialog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCmmonDialog::CopyFrom(const GCCmmonDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCmmonDialog::IsInitialized() const {

  return true;
}

void GCCmmonDialog::Swap(GCCmmonDialog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    contents_.Swap(&other->contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCmmonDialog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCmmonDialog_descriptor_;
  metadata.reflection = GCCmmonDialog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillAttackRelation::kObjIdFieldNumber;
const int SkillAttackRelation::kRelationFieldNumber;
#endif  // !_MSC_VER

SkillAttackRelation::SkillAttackRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillAttackRelation)
}

void SkillAttackRelation::InitAsDefaultInstance() {
}

SkillAttackRelation::SkillAttackRelation(const SkillAttackRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillAttackRelation)
}

void SkillAttackRelation::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  relation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillAttackRelation::~SkillAttackRelation() {
  // @@protoc_insertion_point(destructor:SkillAttackRelation)
  SharedDtor();
}

void SkillAttackRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillAttackRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillAttackRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillAttackRelation_descriptor_;
}

const SkillAttackRelation& SkillAttackRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

SkillAttackRelation* SkillAttackRelation::default_instance_ = NULL;

SkillAttackRelation* SkillAttackRelation::New() const {
  return new SkillAttackRelation;
}

void SkillAttackRelation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillAttackRelation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objid_, relation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillAttackRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillAttackRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relation;
        break;
      }

      // optional int32 relation = 2;
      case 2: {
        if (tag == 16) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillAttackRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillAttackRelation)
  return false;
#undef DO_
}

void SkillAttackRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillAttackRelation)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 relation = 2;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillAttackRelation)
}

::google::protobuf::uint8* SkillAttackRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillAttackRelation)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 relation = 2;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillAttackRelation)
  return target;
}

int SkillAttackRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 relation = 2;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillAttackRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillAttackRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillAttackRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillAttackRelation::MergeFrom(const SkillAttackRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillAttackRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillAttackRelation::CopyFrom(const SkillAttackRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillAttackRelation::IsInitialized() const {

  return true;
}

void SkillAttackRelation::Swap(SkillAttackRelation* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillAttackRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillAttackRelation_descriptor_;
  metadata.reflection = SkillAttackRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendAddExp::kBidFieldNumber;
const int GCSendAddExp::kSidFieldNumber;
const int GCSendAddExp::kAddExpFieldNumber;
const int GCSendAddExp::kSourceFieldNumber;
#endif  // !_MSC_VER

GCSendAddExp::GCSendAddExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendAddExp)
}

void GCSendAddExp::InitAsDefaultInstance() {
}

GCSendAddExp::GCSendAddExp(const GCSendAddExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendAddExp)
}

void GCSendAddExp::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = GOOGLE_LONGLONG(0);
  addexp_ = 0;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendAddExp::~GCSendAddExp() {
  // @@protoc_insertion_point(destructor:GCSendAddExp)
  SharedDtor();
}

void GCSendAddExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendAddExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendAddExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendAddExp_descriptor_;
}

const GCSendAddExp& GCSendAddExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCSendAddExp* GCSendAddExp::default_instance_ = NULL;

GCSendAddExp* GCSendAddExp::New() const {
  return new GCSendAddExp;
}

void GCSendAddExp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendAddExp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sid_, source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendAddExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendAddExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int64 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_addExp;
        break;
      }

      // optional int32 addExp = 3;
      case 3: {
        if (tag == 24) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source;
        break;
      }

      // optional int32 source = 4;
      case 4: {
        if (tag == 32) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendAddExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendAddExp)
  return false;
#undef DO_
}

void GCSendAddExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendAddExp)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int64 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sid(), output);
  }

  // optional int32 addExp = 3;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addexp(), output);
  }

  // optional int32 source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendAddExp)
}

::google::protobuf::uint8* GCSendAddExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendAddExp)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int64 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sid(), target);
  }

  // optional int32 addExp = 3;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addexp(), target);
  }

  // optional int32 source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendAddExp)
  return target;
}

int GCSendAddExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int64 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sid());
    }

    // optional int32 addExp = 3;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // optional int32 source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendAddExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendAddExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendAddExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendAddExp::MergeFrom(const GCSendAddExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendAddExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendAddExp::CopyFrom(const GCSendAddExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendAddExp::IsInitialized() const {

  return true;
}

void GCSendAddExp::Swap(GCSendAddExp* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(addexp_, other->addexp_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendAddExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendAddExp_descriptor_;
  metadata.reflection = GCSendAddExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAddVerifyBox::kTypeFieldNumber;
const int GCAddVerifyBox::kOperateFieldNumber;
const int GCAddVerifyBox::kTimeFieldNumber;
const int GCAddVerifyBox::kParamsFieldNumber;
const int GCAddVerifyBox::kMessageIDFieldNumber;
#endif  // !_MSC_VER

GCAddVerifyBox::GCAddVerifyBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAddVerifyBox)
}

void GCAddVerifyBox::InitAsDefaultInstance() {
}

GCAddVerifyBox::GCAddVerifyBox(const GCAddVerifyBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAddVerifyBox)
}

void GCAddVerifyBox::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  operate_ = 0;
  time_ = 0;
  messageid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAddVerifyBox::~GCAddVerifyBox() {
  // @@protoc_insertion_point(destructor:GCAddVerifyBox)
  SharedDtor();
}

void GCAddVerifyBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAddVerifyBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAddVerifyBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAddVerifyBox_descriptor_;
}

const GCAddVerifyBox& GCAddVerifyBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCAddVerifyBox* GCAddVerifyBox::default_instance_ = NULL;

GCAddVerifyBox* GCAddVerifyBox::New() const {
  return new GCAddVerifyBox;
}

void GCAddVerifyBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAddVerifyBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, operate_);
  ZR_(time_, messageid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAddVerifyBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAddVerifyBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated string params = 4;
      case 4: {
        if (tag == 34) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectTag(40)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 5;
      case 5: {
        if (tag == 40) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAddVerifyBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAddVerifyBox)
  return false;
#undef DO_
}

void GCAddVerifyBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAddVerifyBox)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }

  // optional int32 messageID = 5;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAddVerifyBox)
}

::google::protobuf::uint8* GCAddVerifyBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAddVerifyBox)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }

  // optional int32 messageID = 5;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAddVerifyBox)
  return target;
}

int GCAddVerifyBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 messageID = 5;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

  }
  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAddVerifyBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAddVerifyBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAddVerifyBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAddVerifyBox::MergeFrom(const GCAddVerifyBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAddVerifyBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAddVerifyBox::CopyFrom(const GCAddVerifyBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAddVerifyBox::IsInitialized() const {

  return true;
}

void GCAddVerifyBox::Swap(GCAddVerifyBox* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operate_, other->operate_);
    std::swap(time_, other->time_);
    params_.Swap(&other->params_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAddVerifyBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAddVerifyBox_descriptor_;
  metadata.reflection = GCAddVerifyBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGVerifyBoxResult::kTypeFieldNumber;
const int CGVerifyBoxResult::kOperateFieldNumber;
const int CGVerifyBoxResult::kParamsFieldNumber;
#endif  // !_MSC_VER

CGVerifyBoxResult::CGVerifyBoxResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGVerifyBoxResult)
}

void CGVerifyBoxResult::InitAsDefaultInstance() {
}

CGVerifyBoxResult::CGVerifyBoxResult(const CGVerifyBoxResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGVerifyBoxResult)
}

void CGVerifyBoxResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  operate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGVerifyBoxResult::~CGVerifyBoxResult() {
  // @@protoc_insertion_point(destructor:CGVerifyBoxResult)
  SharedDtor();
}

void CGVerifyBoxResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGVerifyBoxResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGVerifyBoxResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGVerifyBoxResult_descriptor_;
}

const CGVerifyBoxResult& CGVerifyBoxResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

CGVerifyBoxResult* CGVerifyBoxResult::default_instance_ = NULL;

CGVerifyBoxResult* CGVerifyBoxResult::New() const {
  return new CGVerifyBoxResult;
}

void CGVerifyBoxResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGVerifyBoxResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, operate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGVerifyBoxResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGVerifyBoxResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // optional int32 operate = 2;
      case 2: {
        if (tag == 16) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // repeated string params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGVerifyBoxResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGVerifyBoxResult)
  return false;
#undef DO_
}

void CGVerifyBoxResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGVerifyBoxResult)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate(), output);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGVerifyBoxResult)
}

::google::protobuf::uint8* CGVerifyBoxResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGVerifyBoxResult)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate(), target);
  }

  // repeated string params = 3;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGVerifyBoxResult)
  return target;
}

int CGVerifyBoxResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

  }
  // repeated string params = 3;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGVerifyBoxResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGVerifyBoxResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGVerifyBoxResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGVerifyBoxResult::MergeFrom(const CGVerifyBoxResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGVerifyBoxResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGVerifyBoxResult::CopyFrom(const CGVerifyBoxResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGVerifyBoxResult::IsInitialized() const {

  return true;
}

void CGVerifyBoxResult::Swap(CGVerifyBoxResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(operate_, other->operate_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGVerifyBoxResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGVerifyBoxResult_descriptor_;
  metadata.reflection = CGVerifyBoxResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCharacterTalk::kObjIdFieldNumber;
const int GCCharacterTalk::kTalkWordFieldNumber;
const int GCCharacterTalk::kTalkVoiceFieldNumber;
#endif  // !_MSC_VER

GCCharacterTalk::GCCharacterTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharacterTalk)
}

void GCCharacterTalk::InitAsDefaultInstance() {
}

GCCharacterTalk::GCCharacterTalk(const GCCharacterTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharacterTalk)
}

void GCCharacterTalk::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  talkword_ = 0;
  talkvoice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharacterTalk::~GCCharacterTalk() {
  // @@protoc_insertion_point(destructor:GCCharacterTalk)
  SharedDtor();
}

void GCCharacterTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCharacterTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharacterTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharacterTalk_descriptor_;
}

const GCCharacterTalk& GCCharacterTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCCharacterTalk* GCCharacterTalk::default_instance_ = NULL;

GCCharacterTalk* GCCharacterTalk::New() const {
  return new GCCharacterTalk;
}

void GCCharacterTalk::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCharacterTalk*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objid_, talkvoice_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharacterTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharacterTalk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_talkWord;
        break;
      }

      // optional int32 talkWord = 2;
      case 2: {
        if (tag == 16) {
         parse_talkWord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkword_)));
          set_has_talkword();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_talkVoice;
        break;
      }

      // optional int32 talkVoice = 3;
      case 3: {
        if (tag == 24) {
         parse_talkVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talkvoice_)));
          set_has_talkvoice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharacterTalk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharacterTalk)
  return false;
#undef DO_
}

void GCCharacterTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharacterTalk)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 talkWord = 2;
  if (has_talkword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->talkword(), output);
  }

  // optional int32 talkVoice = 3;
  if (has_talkvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->talkvoice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharacterTalk)
}

::google::protobuf::uint8* GCCharacterTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharacterTalk)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 talkWord = 2;
  if (has_talkword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->talkword(), target);
  }

  // optional int32 talkVoice = 3;
  if (has_talkvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->talkvoice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharacterTalk)
  return target;
}

int GCCharacterTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 talkWord = 2;
    if (has_talkword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talkword());
    }

    // optional int32 talkVoice = 3;
    if (has_talkvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talkvoice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharacterTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharacterTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharacterTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharacterTalk::MergeFrom(const GCCharacterTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_talkword()) {
      set_talkword(from.talkword());
    }
    if (from.has_talkvoice()) {
      set_talkvoice(from.talkvoice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharacterTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharacterTalk::CopyFrom(const GCCharacterTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterTalk::IsInitialized() const {

  return true;
}

void GCCharacterTalk::Swap(GCCharacterTalk* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(talkword_, other->talkword_);
    std::swap(talkvoice_, other->talkvoice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharacterTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharacterTalk_descriptor_;
  metadata.reflection = GCCharacterTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GGDungeonChangeScene::kIdFieldNumber;
const int GGDungeonChangeScene::kTypeFieldNumber;
const int GGDungeonChangeScene::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

GGDungeonChangeScene::GGDungeonChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GGDungeonChangeScene)
}

void GGDungeonChangeScene::InitAsDefaultInstance() {
}

GGDungeonChangeScene::GGDungeonChangeScene(const GGDungeonChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GGDungeonChangeScene)
}

void GGDungeonChangeScene::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GGDungeonChangeScene::~GGDungeonChangeScene() {
  // @@protoc_insertion_point(destructor:GGDungeonChangeScene)
  SharedDtor();
}

void GGDungeonChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GGDungeonChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GGDungeonChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GGDungeonChangeScene_descriptor_;
}

const GGDungeonChangeScene& GGDungeonChangeScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GGDungeonChangeScene* GGDungeonChangeScene::default_instance_ = NULL;

GGDungeonChangeScene* GGDungeonChangeScene::New() const {
  return new GGDungeonChangeScene;
}

void GGDungeonChangeScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GGDungeonChangeScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, instanceid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GGDungeonChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GGDungeonChangeScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_instanceId;
        break;
      }

      // optional int32 instanceId = 3;
      case 3: {
        if (tag == 24) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GGDungeonChangeScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GGDungeonChangeScene)
  return false;
#undef DO_
}

void GGDungeonChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GGDungeonChangeScene)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 instanceId = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GGDungeonChangeScene)
}

::google::protobuf::uint8* GGDungeonChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GGDungeonChangeScene)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 instanceId = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GGDungeonChangeScene)
  return target;
}

int GGDungeonChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 instanceId = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GGDungeonChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GGDungeonChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GGDungeonChangeScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GGDungeonChangeScene::MergeFrom(const GGDungeonChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GGDungeonChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GGDungeonChangeScene::CopyFrom(const GGDungeonChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGDungeonChangeScene::IsInitialized() const {

  return true;
}

void GGDungeonChangeScene::Swap(GGDungeonChangeScene* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GGDungeonChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GGDungeonChangeScene_descriptor_;
  metadata.reflection = GGDungeonChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomIndexInfo::kRandomIndexHitChancesFieldNumber;
const int RandomIndexInfo::kRandomIndexCritFieldNumber;
#endif  // !_MSC_VER

RandomIndexInfo::RandomIndexInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RandomIndexInfo)
}

void RandomIndexInfo::InitAsDefaultInstance() {
}

RandomIndexInfo::RandomIndexInfo(const RandomIndexInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RandomIndexInfo)
}

void RandomIndexInfo::SharedCtor() {
  _cached_size_ = 0;
  randomindexhitchances_ = 0;
  randomindexcrit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomIndexInfo::~RandomIndexInfo() {
  // @@protoc_insertion_point(destructor:RandomIndexInfo)
  SharedDtor();
}

void RandomIndexInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandomIndexInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomIndexInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomIndexInfo_descriptor_;
}

const RandomIndexInfo& RandomIndexInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

RandomIndexInfo* RandomIndexInfo::default_instance_ = NULL;

RandomIndexInfo* RandomIndexInfo::New() const {
  return new RandomIndexInfo;
}

void RandomIndexInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RandomIndexInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(randomindexhitchances_, randomindexcrit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomIndexInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RandomIndexInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 randomIndexHitChances = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randomindexhitchances_)));
          set_has_randomindexhitchances();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_randomIndexCrit;
        break;
      }

      // optional int32 randomIndexCrit = 2;
      case 2: {
        if (tag == 16) {
         parse_randomIndexCrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randomindexcrit_)));
          set_has_randomindexcrit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RandomIndexInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RandomIndexInfo)
  return false;
#undef DO_
}

void RandomIndexInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RandomIndexInfo)
  // optional int32 randomIndexHitChances = 1;
  if (has_randomindexhitchances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->randomindexhitchances(), output);
  }

  // optional int32 randomIndexCrit = 2;
  if (has_randomindexcrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->randomindexcrit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RandomIndexInfo)
}

::google::protobuf::uint8* RandomIndexInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RandomIndexInfo)
  // optional int32 randomIndexHitChances = 1;
  if (has_randomindexhitchances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->randomindexhitchances(), target);
  }

  // optional int32 randomIndexCrit = 2;
  if (has_randomindexcrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->randomindexcrit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RandomIndexInfo)
  return target;
}

int RandomIndexInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 randomIndexHitChances = 1;
    if (has_randomindexhitchances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randomindexhitchances());
    }

    // optional int32 randomIndexCrit = 2;
    if (has_randomindexcrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randomindexcrit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomIndexInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomIndexInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomIndexInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomIndexInfo::MergeFrom(const RandomIndexInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_randomindexhitchances()) {
      set_randomindexhitchances(from.randomindexhitchances());
    }
    if (from.has_randomindexcrit()) {
      set_randomindexcrit(from.randomindexcrit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomIndexInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomIndexInfo::CopyFrom(const RandomIndexInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomIndexInfo::IsInitialized() const {

  return true;
}

void RandomIndexInfo::Swap(RandomIndexInfo* other) {
  if (other != this) {
    std::swap(randomindexhitchances_, other->randomindexhitchances_);
    std::swap(randomindexcrit_, other->randomindexcrit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomIndexInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomIndexInfo_descriptor_;
  metadata.reflection = RandomIndexInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Iteminfo::kBidFieldNumber;
const int Iteminfo::kSidFieldNumber;
const int Iteminfo::kNumFieldNumber;
#endif  // !_MSC_VER

Iteminfo::Iteminfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Iteminfo)
}

void Iteminfo::InitAsDefaultInstance() {
}

Iteminfo::Iteminfo(const Iteminfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Iteminfo)
}

void Iteminfo::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Iteminfo::~Iteminfo() {
  // @@protoc_insertion_point(destructor:Iteminfo)
  SharedDtor();
}

void Iteminfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Iteminfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Iteminfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Iteminfo_descriptor_;
}

const Iteminfo& Iteminfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

Iteminfo* Iteminfo::default_instance_ = NULL;

Iteminfo* Iteminfo::New() const {
  return new Iteminfo;
}

void Iteminfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Iteminfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Iteminfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Iteminfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // optional int32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Iteminfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Iteminfo)
  return false;
#undef DO_
}

void Iteminfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Iteminfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Iteminfo)
}

::google::protobuf::uint8* Iteminfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Iteminfo)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Iteminfo)
  return target;
}

int Iteminfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Iteminfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Iteminfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Iteminfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Iteminfo::MergeFrom(const Iteminfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Iteminfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Iteminfo::CopyFrom(const Iteminfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iteminfo::IsInitialized() const {

  return true;
}

void Iteminfo::Swap(Iteminfo* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Iteminfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Iteminfo_descriptor_;
  metadata.reflection = Iteminfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPlayEffect::kIdFieldNumber;
#endif  // !_MSC_VER

GCPlayEffect::GCPlayEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPlayEffect)
}

void GCPlayEffect::InitAsDefaultInstance() {
}

GCPlayEffect::GCPlayEffect(const GCPlayEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPlayEffect)
}

void GCPlayEffect::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPlayEffect::~GCPlayEffect() {
  // @@protoc_insertion_point(destructor:GCPlayEffect)
  SharedDtor();
}

void GCPlayEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPlayEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPlayEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPlayEffect_descriptor_;
}

const GCPlayEffect& GCPlayEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InnerMessage_2eproto();
  return *default_instance_;
}

GCPlayEffect* GCPlayEffect::default_instance_ = NULL;

GCPlayEffect* GCPlayEffect::New() const {
  return new GCPlayEffect;
}

void GCPlayEffect::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPlayEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPlayEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPlayEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPlayEffect)
  return false;
#undef DO_
}

void GCPlayEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPlayEffect)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPlayEffect)
}

::google::protobuf::uint8* GCPlayEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPlayEffect)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPlayEffect)
  return target;
}

int GCPlayEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPlayEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPlayEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPlayEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPlayEffect::MergeFrom(const GCPlayEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPlayEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPlayEffect::CopyFrom(const GCPlayEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayEffect::IsInitialized() const {

  return true;
}

void GCPlayEffect::Swap(GCPlayEffect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPlayEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPlayEffect_descriptor_;
  metadata.reflection = GCPlayEffect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
