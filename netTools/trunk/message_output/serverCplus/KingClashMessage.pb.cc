// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KingClashMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KingClashMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GangClashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GangClashInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClashNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClashNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGKingClash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGKingClash_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCKingClash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCKingClash_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingOneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingOneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCKingClashFightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCKingClashFightInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KingClashMessage_2eproto() {
  protobuf_AddDesc_KingClashMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KingClashMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GangClashInfo_descriptor_ = file->message_type(0);
  static const int GangClashInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangClashInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangClashInfo, gangname_),
  };
  GangClashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GangClashInfo_descriptor_,
      GangClashInfo::default_instance_,
      GangClashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangClashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GangClashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GangClashInfo));
  ClashNode_descriptor_ = file->message_type(1);
  static const int ClashNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, gang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, gang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, clashstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, wingang_),
  };
  ClashNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClashNode_descriptor_,
      ClashNode::default_instance_,
      ClashNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClashNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClashNode));
  CGKingClash_descriptor_ = file->message_type(2);
  static const int CGKingClash_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKingClash, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKingClash, flag_),
  };
  CGKingClash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGKingClash_descriptor_,
      CGKingClash::default_instance_,
      CGKingClash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKingClash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGKingClash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGKingClash));
  GCKingClash_descriptor_ = file->message_type(3);
  static const int GCKingClash_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, nodelst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, gangplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, needitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, lasttime_),
  };
  GCKingClash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCKingClash_descriptor_,
      GCKingClash::default_instance_,
      GCKingClash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCKingClash));
  KingOneInfo_descriptor_ = file->message_type(4);
  static const int KingOneInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, puid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, killnum_),
  };
  KingOneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingOneInfo_descriptor_,
      KingOneInfo::default_instance_,
      KingOneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingOneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingOneInfo));
  GCKingClashFightInfo_descriptor_ = file->message_type(5);
  static const int GCKingClashFightInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangselfkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangenemykill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangselfnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangenemynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gang1lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangselfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, gangenemyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, type_),
  };
  GCKingClashFightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCKingClashFightInfo_descriptor_,
      GCKingClashFightInfo::default_instance_,
      GCKingClashFightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCKingClashFightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCKingClashFightInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KingClashMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GangClashInfo_descriptor_, &GangClashInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClashNode_descriptor_, &ClashNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGKingClash_descriptor_, &CGKingClash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCKingClash_descriptor_, &GCKingClash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingOneInfo_descriptor_, &KingOneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCKingClashFightInfo_descriptor_, &GCKingClashFightInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KingClashMessage_2eproto() {
  delete GangClashInfo::default_instance_;
  delete GangClashInfo_reflection_;
  delete ClashNode::default_instance_;
  delete ClashNode_reflection_;
  delete CGKingClash::default_instance_;
  delete CGKingClash_reflection_;
  delete GCKingClash::default_instance_;
  delete GCKingClash_reflection_;
  delete KingOneInfo::default_instance_;
  delete KingOneInfo_reflection_;
  delete GCKingClashFightInfo::default_instance_;
  delete GCKingClashFightInfo_reflection_;
}

void protobuf_AddDesc_KingClashMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_ShopMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026KingClashMessage.proto\032\022InnerMessage.p"
    "roto\032\021ShopMessage.proto\"1\n\rGangClashInfo"
    "\022\016\n\006gangId\030\001 \001(\003\022\020\n\010gangName\030\002 \001(\t\"\200\001\n\tC"
    "lashNode\022\017\n\007groupId\030\001 \001(\t\022\035\n\005gang1\030\002 \001(\013"
    "2\016.GangClashInfo\022\035\n\005gang2\030\003 \001(\0132\016.GangCl"
    "ashInfo\022\023\n\013clashStatus\030\004 \001(\005\022\017\n\007winGang\030"
    "\005 \001(\003\",\n\013CGKingClash\022\017\n\007operate\030\001 \001(\005\022\014\n"
    "\004flag\030\002 \001(\005\"\243\001\n\013GCKingClash\022\017\n\007operate\030\001"
    " \001(\005\022\016\n\006status\030\002 \001(\005\022\033\n\007nodeLst\030\003 \003(\0132\n."
    "ClashNode\022&\n\016gangPlayerInfo\030\004 \003(\0132\016.Char"
    "acterInfo\022\034\n\tneedItems\030\005 \003(\0132\t.ItemInfo\022"
    "\020\n\010lastTime\030\006 \001(\003\"W\n\013KingOneInfo\022\014\n\004puid"
    "\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\005\022\016\n\006gan"
    "gId\030\004 \001(\003\022\017\n\007killNum\030\005 \001(\005\"\225\002\n\024GCKingCla"
    "shFightInfo\022\014\n\004flag\030\001 \001(\005\022\020\n\010lastTime\030\002 "
    "\001(\005\022\024\n\014gangSelfKill\030\003 \001(\005\022\025\n\rgangEnemyKi"
    "ll\030\004 \001(\005\022\023\n\013gangSelfNum\030\005 \001(\005\022\024\n\014gangEne"
    "myNum\030\006 \001(\005\022\036\n\010gang1Lst\030\007 \003(\0132\014.KingOneI"
    "nfo\022\016\n\006result\030\010 \001(\005\022\032\n\007rewards\030\t \003(\0132\t.I"
    "temInfo\022\024\n\014gangSelfName\030\n \001(\t\022\025\n\rgangEne"
    "myName\030\013 \001(\t\022\014\n\004type\030\014 \001(\005B\031\n\027com.mile.c"
    "ommon.message", 853);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KingClashMessage.proto", &protobuf_RegisterTypes);
  GangClashInfo::default_instance_ = new GangClashInfo();
  ClashNode::default_instance_ = new ClashNode();
  CGKingClash::default_instance_ = new CGKingClash();
  GCKingClash::default_instance_ = new GCKingClash();
  KingOneInfo::default_instance_ = new KingOneInfo();
  GCKingClashFightInfo::default_instance_ = new GCKingClashFightInfo();
  GangClashInfo::default_instance_->InitAsDefaultInstance();
  ClashNode::default_instance_->InitAsDefaultInstance();
  CGKingClash::default_instance_->InitAsDefaultInstance();
  GCKingClash::default_instance_->InitAsDefaultInstance();
  KingOneInfo::default_instance_->InitAsDefaultInstance();
  GCKingClashFightInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KingClashMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KingClashMessage_2eproto {
  StaticDescriptorInitializer_KingClashMessage_2eproto() {
    protobuf_AddDesc_KingClashMessage_2eproto();
  }
} static_descriptor_initializer_KingClashMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GangClashInfo::kGangIdFieldNumber;
const int GangClashInfo::kGangNameFieldNumber;
#endif  // !_MSC_VER

GangClashInfo::GangClashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GangClashInfo)
}

void GangClashInfo::InitAsDefaultInstance() {
}

GangClashInfo::GangClashInfo(const GangClashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GangClashInfo)
}

void GangClashInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GangClashInfo::~GangClashInfo() {
  // @@protoc_insertion_point(destructor:GangClashInfo)
  SharedDtor();
}

void GangClashInfo::SharedDtor() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (this != default_instance_) {
  }
}

void GangClashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GangClashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GangClashInfo_descriptor_;
}

const GangClashInfo& GangClashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

GangClashInfo* GangClashInfo::default_instance_ = NULL;

GangClashInfo* GangClashInfo::New() const {
  return new GangClashInfo;
}

void GangClashInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    gangid_ = GOOGLE_LONGLONG(0);
    if (has_gangname()) {
      if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GangClashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GangClashInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 gangId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gangName;
        break;
      }

      // optional string gangName = 2;
      case 2: {
        if (tag == 18) {
         parse_gangName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangname().data(), this->gangname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GangClashInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GangClashInfo)
  return false;
#undef DO_
}

void GangClashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GangClashInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->gangid(), output);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gangname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GangClashInfo)
}

::google::protobuf::uint8* GangClashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GangClashInfo)
  // optional int64 gangId = 1;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gangid(), target);
  }

  // optional string gangName = 2;
  if (has_gangname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangname().data(), this->gangname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gangname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GangClashInfo)
  return target;
}

int GangClashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 gangId = 1;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional string gangName = 2;
    if (has_gangname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GangClashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GangClashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GangClashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GangClashInfo::MergeFrom(const GangClashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_gangname()) {
      set_gangname(from.gangname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GangClashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GangClashInfo::CopyFrom(const GangClashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GangClashInfo::IsInitialized() const {

  return true;
}

void GangClashInfo::Swap(GangClashInfo* other) {
  if (other != this) {
    std::swap(gangid_, other->gangid_);
    std::swap(gangname_, other->gangname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GangClashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GangClashInfo_descriptor_;
  metadata.reflection = GangClashInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClashNode::kGroupIdFieldNumber;
const int ClashNode::kGang1FieldNumber;
const int ClashNode::kGang2FieldNumber;
const int ClashNode::kClashStatusFieldNumber;
const int ClashNode::kWinGangFieldNumber;
#endif  // !_MSC_VER

ClashNode::ClashNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClashNode)
}

void ClashNode::InitAsDefaultInstance() {
  gang1_ = const_cast< ::GangClashInfo*>(&::GangClashInfo::default_instance());
  gang2_ = const_cast< ::GangClashInfo*>(&::GangClashInfo::default_instance());
}

ClashNode::ClashNode(const ClashNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClashNode)
}

void ClashNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gang1_ = NULL;
  gang2_ = NULL;
  clashstatus_ = 0;
  wingang_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClashNode::~ClashNode() {
  // @@protoc_insertion_point(destructor:ClashNode)
  SharedDtor();
}

void ClashNode::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (this != default_instance_) {
    delete gang1_;
    delete gang2_;
  }
}

void ClashNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClashNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClashNode_descriptor_;
}

const ClashNode& ClashNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

ClashNode* ClashNode::default_instance_ = NULL;

ClashNode* ClashNode::New() const {
  return new ClashNode;
}

void ClashNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClashNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(wingang_, clashstatus_);
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupid_->clear();
      }
    }
    if (has_gang1()) {
      if (gang1_ != NULL) gang1_->::GangClashInfo::Clear();
    }
    if (has_gang2()) {
      if (gang2_ != NULL) gang2_->::GangClashInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClashNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClashNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gang1;
        break;
      }

      // optional .GangClashInfo gang1 = 2;
      case 2: {
        if (tag == 18) {
         parse_gang1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gang1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gang2;
        break;
      }

      // optional .GangClashInfo gang2 = 3;
      case 3: {
        if (tag == 26) {
         parse_gang2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gang2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_clashStatus;
        break;
      }

      // optional int32 clashStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_clashStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clashstatus_)));
          set_has_clashstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winGang;
        break;
      }

      // optional int64 winGang = 5;
      case 5: {
        if (tag == 40) {
         parse_winGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingang_)));
          set_has_wingang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClashNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClashNode)
  return false;
#undef DO_
}

void ClashNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClashNode)
  // optional string groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // optional .GangClashInfo gang1 = 2;
  if (has_gang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gang1(), output);
  }

  // optional .GangClashInfo gang2 = 3;
  if (has_gang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gang2(), output);
  }

  // optional int32 clashStatus = 4;
  if (has_clashstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clashstatus(), output);
  }

  // optional int64 winGang = 5;
  if (has_wingang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->wingang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClashNode)
}

::google::protobuf::uint8* ClashNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClashNode)
  // optional string groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // optional .GangClashInfo gang1 = 2;
  if (has_gang1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gang1(), target);
  }

  // optional .GangClashInfo gang2 = 3;
  if (has_gang2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gang2(), target);
  }

  // optional int32 clashStatus = 4;
  if (has_clashstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clashstatus(), target);
  }

  // optional int64 winGang = 5;
  if (has_wingang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->wingang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClashNode)
  return target;
}

int ClashNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string groupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional .GangClashInfo gang1 = 2;
    if (has_gang1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gang1());
    }

    // optional .GangClashInfo gang2 = 3;
    if (has_gang2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gang2());
    }

    // optional int32 clashStatus = 4;
    if (has_clashstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clashstatus());
    }

    // optional int64 winGang = 5;
    if (has_wingang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClashNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClashNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClashNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClashNode::MergeFrom(const ClashNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gang1()) {
      mutable_gang1()->::GangClashInfo::MergeFrom(from.gang1());
    }
    if (from.has_gang2()) {
      mutable_gang2()->::GangClashInfo::MergeFrom(from.gang2());
    }
    if (from.has_clashstatus()) {
      set_clashstatus(from.clashstatus());
    }
    if (from.has_wingang()) {
      set_wingang(from.wingang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClashNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClashNode::CopyFrom(const ClashNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClashNode::IsInitialized() const {

  return true;
}

void ClashNode::Swap(ClashNode* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gang1_, other->gang1_);
    std::swap(gang2_, other->gang2_);
    std::swap(clashstatus_, other->clashstatus_);
    std::swap(wingang_, other->wingang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClashNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClashNode_descriptor_;
  metadata.reflection = ClashNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGKingClash::kOperateFieldNumber;
const int CGKingClash::kFlagFieldNumber;
#endif  // !_MSC_VER

CGKingClash::CGKingClash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGKingClash)
}

void CGKingClash::InitAsDefaultInstance() {
}

CGKingClash::CGKingClash(const CGKingClash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGKingClash)
}

void CGKingClash::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGKingClash::~CGKingClash() {
  // @@protoc_insertion_point(destructor:CGKingClash)
  SharedDtor();
}

void CGKingClash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGKingClash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGKingClash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGKingClash_descriptor_;
}

const CGKingClash& CGKingClash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

CGKingClash* CGKingClash::default_instance_ = NULL;

CGKingClash* CGKingClash::New() const {
  return new CGKingClash;
}

void CGKingClash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGKingClash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGKingClash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGKingClash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGKingClash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGKingClash)
  return false;
#undef DO_
}

void CGKingClash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGKingClash)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGKingClash)
}

::google::protobuf::uint8* CGKingClash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGKingClash)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGKingClash)
  return target;
}

int CGKingClash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGKingClash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGKingClash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGKingClash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGKingClash::MergeFrom(const CGKingClash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGKingClash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGKingClash::CopyFrom(const CGKingClash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGKingClash::IsInitialized() const {

  return true;
}

void CGKingClash::Swap(CGKingClash* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGKingClash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGKingClash_descriptor_;
  metadata.reflection = CGKingClash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCKingClash::kOperateFieldNumber;
const int GCKingClash::kStatusFieldNumber;
const int GCKingClash::kNodeLstFieldNumber;
const int GCKingClash::kGangPlayerInfoFieldNumber;
const int GCKingClash::kNeedItemsFieldNumber;
const int GCKingClash::kLastTimeFieldNumber;
#endif  // !_MSC_VER

GCKingClash::GCKingClash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCKingClash)
}

void GCKingClash::InitAsDefaultInstance() {
}

GCKingClash::GCKingClash(const GCKingClash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCKingClash)
}

void GCKingClash::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  status_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCKingClash::~GCKingClash() {
  // @@protoc_insertion_point(destructor:GCKingClash)
  SharedDtor();
}

void GCKingClash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCKingClash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCKingClash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCKingClash_descriptor_;
}

const GCKingClash& GCKingClash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

GCKingClash* GCKingClash::default_instance_ = NULL;

GCKingClash* GCKingClash::New() const {
  return new GCKingClash;
}

void GCKingClash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCKingClash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 35) {
    ZR_(operate_, status_);
    lasttime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  nodelst_.Clear();
  gangplayerinfo_.Clear();
  needitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCKingClash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCKingClash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodeLst;
        break;
      }

      // repeated .ClashNode nodeLst = 3;
      case 3: {
        if (tag == 26) {
         parse_nodeLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodelst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodeLst;
        if (input->ExpectTag(34)) goto parse_gangPlayerInfo;
        break;
      }

      // repeated .CharacterInfo gangPlayerInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_gangPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gangplayerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gangPlayerInfo;
        if (input->ExpectTag(42)) goto parse_needItems;
        break;
      }

      // repeated .ItemInfo needItems = 5;
      case 5: {
        if (tag == 42) {
         parse_needItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_needItems;
        if (input->ExpectTag(48)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 6;
      case 6: {
        if (tag == 48) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCKingClash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCKingClash)
  return false;
#undef DO_
}

void GCKingClash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCKingClash)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated .ClashNode nodeLst = 3;
  for (int i = 0; i < this->nodelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodelst(i), output);
  }

  // repeated .CharacterInfo gangPlayerInfo = 4;
  for (int i = 0; i < this->gangplayerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gangplayerinfo(i), output);
  }

  // repeated .ItemInfo needItems = 5;
  for (int i = 0; i < this->needitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->needitems(i), output);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCKingClash)
}

::google::protobuf::uint8* GCKingClash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCKingClash)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated .ClashNode nodeLst = 3;
  for (int i = 0; i < this->nodelst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nodelst(i), target);
  }

  // repeated .CharacterInfo gangPlayerInfo = 4;
  for (int i = 0; i < this->gangplayerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gangplayerinfo(i), target);
  }

  // repeated .ItemInfo needItems = 5;
  for (int i = 0; i < this->needitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->needitems(i), target);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCKingClash)
  return target;
}

int GCKingClash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 lastTime = 6;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

  }
  // repeated .ClashNode nodeLst = 3;
  total_size += 1 * this->nodelst_size();
  for (int i = 0; i < this->nodelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodelst(i));
  }

  // repeated .CharacterInfo gangPlayerInfo = 4;
  total_size += 1 * this->gangplayerinfo_size();
  for (int i = 0; i < this->gangplayerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gangplayerinfo(i));
  }

  // repeated .ItemInfo needItems = 5;
  total_size += 1 * this->needitems_size();
  for (int i = 0; i < this->needitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCKingClash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCKingClash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCKingClash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCKingClash::MergeFrom(const GCKingClash& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodelst_.MergeFrom(from.nodelst_);
  gangplayerinfo_.MergeFrom(from.gangplayerinfo_);
  needitems_.MergeFrom(from.needitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCKingClash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCKingClash::CopyFrom(const GCKingClash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCKingClash::IsInitialized() const {

  return true;
}

void GCKingClash::Swap(GCKingClash* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(status_, other->status_);
    nodelst_.Swap(&other->nodelst_);
    gangplayerinfo_.Swap(&other->gangplayerinfo_);
    needitems_.Swap(&other->needitems_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCKingClash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCKingClash_descriptor_;
  metadata.reflection = GCKingClash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingOneInfo::kPuidFieldNumber;
const int KingOneInfo::kNameFieldNumber;
const int KingOneInfo::kJobFieldNumber;
const int KingOneInfo::kGangIdFieldNumber;
const int KingOneInfo::kKillNumFieldNumber;
#endif  // !_MSC_VER

KingOneInfo::KingOneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KingOneInfo)
}

void KingOneInfo::InitAsDefaultInstance() {
}

KingOneInfo::KingOneInfo(const KingOneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KingOneInfo)
}

void KingOneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  puid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  killnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingOneInfo::~KingOneInfo() {
  // @@protoc_insertion_point(destructor:KingOneInfo)
  SharedDtor();
}

void KingOneInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void KingOneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingOneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingOneInfo_descriptor_;
}

const KingOneInfo& KingOneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

KingOneInfo* KingOneInfo::default_instance_ = NULL;

KingOneInfo* KingOneInfo::New() const {
  return new KingOneInfo;
}

void KingOneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KingOneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gangid_, killnum_);
    puid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingOneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KingOneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 puid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &puid_)));
          set_has_puid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional int32 job = 3;
      case 3: {
        if (tag == 24) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gangId;
        break;
      }

      // optional int64 gangId = 4;
      case 4: {
        if (tag == 32) {
         parse_gangId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_killNum;
        break;
      }

      // optional int32 killNum = 5;
      case 5: {
        if (tag == 40) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KingOneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KingOneInfo)
  return false;
#undef DO_
}

void KingOneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KingOneInfo)
  // optional int64 puid = 1;
  if (has_puid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->puid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job(), output);
  }

  // optional int64 gangId = 4;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gangid(), output);
  }

  // optional int32 killNum = 5;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->killnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KingOneInfo)
}

::google::protobuf::uint8* KingOneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KingOneInfo)
  // optional int64 puid = 1;
  if (has_puid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->puid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job(), target);
  }

  // optional int64 gangId = 4;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gangid(), target);
  }

  // optional int32 killNum = 5;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->killnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KingOneInfo)
  return target;
}

int KingOneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 puid = 1;
    if (has_puid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->puid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int64 gangId = 4;
    if (has_gangid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional int32 killNum = 5;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingOneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingOneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingOneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingOneInfo::MergeFrom(const KingOneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_puid()) {
      set_puid(from.puid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingOneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingOneInfo::CopyFrom(const KingOneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingOneInfo::IsInitialized() const {

  return true;
}

void KingOneInfo::Swap(KingOneInfo* other) {
  if (other != this) {
    std::swap(puid_, other->puid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(gangid_, other->gangid_);
    std::swap(killnum_, other->killnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingOneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingOneInfo_descriptor_;
  metadata.reflection = KingOneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCKingClashFightInfo::kFlagFieldNumber;
const int GCKingClashFightInfo::kLastTimeFieldNumber;
const int GCKingClashFightInfo::kGangSelfKillFieldNumber;
const int GCKingClashFightInfo::kGangEnemyKillFieldNumber;
const int GCKingClashFightInfo::kGangSelfNumFieldNumber;
const int GCKingClashFightInfo::kGangEnemyNumFieldNumber;
const int GCKingClashFightInfo::kGang1LstFieldNumber;
const int GCKingClashFightInfo::kResultFieldNumber;
const int GCKingClashFightInfo::kRewardsFieldNumber;
const int GCKingClashFightInfo::kGangSelfNameFieldNumber;
const int GCKingClashFightInfo::kGangEnemyNameFieldNumber;
const int GCKingClashFightInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

GCKingClashFightInfo::GCKingClashFightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCKingClashFightInfo)
}

void GCKingClashFightInfo::InitAsDefaultInstance() {
}

GCKingClashFightInfo::GCKingClashFightInfo(const GCKingClashFightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCKingClashFightInfo)
}

void GCKingClashFightInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  lasttime_ = 0;
  gangselfkill_ = 0;
  gangenemykill_ = 0;
  gangselfnum_ = 0;
  gangenemynum_ = 0;
  result_ = 0;
  gangselfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gangenemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCKingClashFightInfo::~GCKingClashFightInfo() {
  // @@protoc_insertion_point(destructor:GCKingClashFightInfo)
  SharedDtor();
}

void GCKingClashFightInfo::SharedDtor() {
  if (gangselfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangselfname_;
  }
  if (gangenemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangenemyname_;
  }
  if (this != default_instance_) {
  }
}

void GCKingClashFightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCKingClashFightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCKingClashFightInfo_descriptor_;
}

const GCKingClashFightInfo& GCKingClashFightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KingClashMessage_2eproto();
  return *default_instance_;
}

GCKingClashFightInfo* GCKingClashFightInfo::default_instance_ = NULL;

GCKingClashFightInfo* GCKingClashFightInfo::New() const {
  return new GCKingClashFightInfo;
}

void GCKingClashFightInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCKingClashFightInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(flag_, gangenemynum_);
    result_ = 0;
  }
  if (_has_bits_[8 / 32] & 3584) {
    if (has_gangselfname()) {
      if (gangselfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangselfname_->clear();
      }
    }
    if (has_gangenemyname()) {
      if (gangenemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gangenemyname_->clear();
      }
    }
    type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gang1lst_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCKingClashFightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCKingClashFightInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional int32 lastTime = 2;
      case 2: {
        if (tag == 16) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gangSelfKill;
        break;
      }

      // optional int32 gangSelfKill = 3;
      case 3: {
        if (tag == 24) {
         parse_gangSelfKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangselfkill_)));
          set_has_gangselfkill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gangEnemyKill;
        break;
      }

      // optional int32 gangEnemyKill = 4;
      case 4: {
        if (tag == 32) {
         parse_gangEnemyKill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangenemykill_)));
          set_has_gangenemykill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gangSelfNum;
        break;
      }

      // optional int32 gangSelfNum = 5;
      case 5: {
        if (tag == 40) {
         parse_gangSelfNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangselfnum_)));
          set_has_gangselfnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gangEnemyNum;
        break;
      }

      // optional int32 gangEnemyNum = 6;
      case 6: {
        if (tag == 48) {
         parse_gangEnemyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangenemynum_)));
          set_has_gangenemynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gang1Lst;
        break;
      }

      // repeated .KingOneInfo gang1Lst = 7;
      case 7: {
        if (tag == 58) {
         parse_gang1Lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang1lst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_gang1Lst;
        if (input->ExpectTag(64)) goto parse_result;
        break;
      }

      // optional int32 result = 8;
      case 8: {
        if (tag == 64) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rewards;
        break;
      }

      // repeated .ItemInfo rewards = 9;
      case 9: {
        if (tag == 74) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rewards;
        if (input->ExpectTag(82)) goto parse_gangSelfName;
        break;
      }

      // optional string gangSelfName = 10;
      case 10: {
        if (tag == 82) {
         parse_gangSelfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangselfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangselfname().data(), this->gangselfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangselfname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_gangEnemyName;
        break;
      }

      // optional string gangEnemyName = 11;
      case 11: {
        if (tag == 90) {
         parse_gangEnemyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gangenemyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gangenemyname().data(), this->gangenemyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gangenemyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional int32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCKingClashFightInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCKingClashFightInfo)
  return false;
#undef DO_
}

void GCKingClashFightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCKingClashFightInfo)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lasttime(), output);
  }

  // optional int32 gangSelfKill = 3;
  if (has_gangselfkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gangselfkill(), output);
  }

  // optional int32 gangEnemyKill = 4;
  if (has_gangenemykill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gangenemykill(), output);
  }

  // optional int32 gangSelfNum = 5;
  if (has_gangselfnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gangselfnum(), output);
  }

  // optional int32 gangEnemyNum = 6;
  if (has_gangenemynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gangenemynum(), output);
  }

  // repeated .KingOneInfo gang1Lst = 7;
  for (int i = 0; i < this->gang1lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gang1lst(i), output);
  }

  // optional int32 result = 8;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->result(), output);
  }

  // repeated .ItemInfo rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewards(i), output);
  }

  // optional string gangSelfName = 10;
  if (has_gangselfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangselfname().data(), this->gangselfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangselfname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->gangselfname(), output);
  }

  // optional string gangEnemyName = 11;
  if (has_gangenemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangenemyname().data(), this->gangenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangenemyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->gangenemyname(), output);
  }

  // optional int32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCKingClashFightInfo)
}

::google::protobuf::uint8* GCKingClashFightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCKingClashFightInfo)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lasttime(), target);
  }

  // optional int32 gangSelfKill = 3;
  if (has_gangselfkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gangselfkill(), target);
  }

  // optional int32 gangEnemyKill = 4;
  if (has_gangenemykill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gangenemykill(), target);
  }

  // optional int32 gangSelfNum = 5;
  if (has_gangselfnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gangselfnum(), target);
  }

  // optional int32 gangEnemyNum = 6;
  if (has_gangenemynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gangenemynum(), target);
  }

  // repeated .KingOneInfo gang1Lst = 7;
  for (int i = 0; i < this->gang1lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gang1lst(i), target);
  }

  // optional int32 result = 8;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->result(), target);
  }

  // repeated .ItemInfo rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewards(i), target);
  }

  // optional string gangSelfName = 10;
  if (has_gangselfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangselfname().data(), this->gangselfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangselfname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gangselfname(), target);
  }

  // optional string gangEnemyName = 11;
  if (has_gangenemyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gangenemyname().data(), this->gangenemyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gangenemyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->gangenemyname(), target);
  }

  // optional int32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCKingClashFightInfo)
  return target;
}

int GCKingClashFightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 gangSelfKill = 3;
    if (has_gangselfkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangselfkill());
    }

    // optional int32 gangEnemyKill = 4;
    if (has_gangenemykill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangenemykill());
    }

    // optional int32 gangSelfNum = 5;
    if (has_gangselfnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangselfnum());
    }

    // optional int32 gangEnemyNum = 6;
    if (has_gangenemynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangenemynum());
    }

    // optional int32 result = 8;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string gangSelfName = 10;
    if (has_gangselfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangselfname());
    }

    // optional string gangEnemyName = 11;
    if (has_gangenemyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gangenemyname());
    }

    // optional int32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .KingOneInfo gang1Lst = 7;
  total_size += 1 * this->gang1lst_size();
  for (int i = 0; i < this->gang1lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang1lst(i));
  }

  // repeated .ItemInfo rewards = 9;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCKingClashFightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCKingClashFightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCKingClashFightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCKingClashFightInfo::MergeFrom(const GCKingClashFightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang1lst_.MergeFrom(from.gang1lst_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_gangselfkill()) {
      set_gangselfkill(from.gangselfkill());
    }
    if (from.has_gangenemykill()) {
      set_gangenemykill(from.gangenemykill());
    }
    if (from.has_gangselfnum()) {
      set_gangselfnum(from.gangselfnum());
    }
    if (from.has_gangenemynum()) {
      set_gangenemynum(from.gangenemynum());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_gangselfname()) {
      set_gangselfname(from.gangselfname());
    }
    if (from.has_gangenemyname()) {
      set_gangenemyname(from.gangenemyname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCKingClashFightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCKingClashFightInfo::CopyFrom(const GCKingClashFightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCKingClashFightInfo::IsInitialized() const {

  return true;
}

void GCKingClashFightInfo::Swap(GCKingClashFightInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(gangselfkill_, other->gangselfkill_);
    std::swap(gangenemykill_, other->gangenemykill_);
    std::swap(gangselfnum_, other->gangselfnum_);
    std::swap(gangenemynum_, other->gangenemynum_);
    gang1lst_.Swap(&other->gang1lst_);
    std::swap(result_, other->result_);
    rewards_.Swap(&other->rewards_);
    std::swap(gangselfname_, other->gangselfname_);
    std::swap(gangenemyname_, other->gangenemyname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCKingClashFightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCKingClashFightInfo_descriptor_;
  metadata.reflection = GCKingClashFightInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
