// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KingClashMessage.proto

#ifndef PROTOBUF_KingClashMessage_2eproto__INCLUDED
#define PROTOBUF_KingClashMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
#include "ShopMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_KingClashMessage_2eproto();
void protobuf_AssignDesc_KingClashMessage_2eproto();
void protobuf_ShutdownFile_KingClashMessage_2eproto();

class GangClashInfo;
class ClashNode;
class CGKingClash;
class GCKingClash;
class KingOneInfo;
class GCKingClashFightInfo;

// ===================================================================

class GangClashInfo : public ::google::protobuf::Message {
 public:
  GangClashInfo();
  virtual ~GangClashInfo();

  GangClashInfo(const GangClashInfo& from);

  inline GangClashInfo& operator=(const GangClashInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GangClashInfo& default_instance();

  void Swap(GangClashInfo* other);

  // implements Message ----------------------------------------------

  GangClashInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GangClashInfo& from);
  void MergeFrom(const GangClashInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 gangId = 1;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 1;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional string gangName = 2;
  inline bool has_gangname() const;
  inline void clear_gangname();
  static const int kGangNameFieldNumber = 2;
  inline const ::std::string& gangname() const;
  inline void set_gangname(const ::std::string& value);
  inline void set_gangname(const char* value);
  inline void set_gangname(const char* value, size_t size);
  inline ::std::string* mutable_gangname();
  inline ::std::string* release_gangname();
  inline void set_allocated_gangname(::std::string* gangname);

  // @@protoc_insertion_point(class_scope:GangClashInfo)
 private:
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_gangname();
  inline void clear_has_gangname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 gangid_;
  ::std::string* gangname_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static GangClashInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClashNode : public ::google::protobuf::Message {
 public:
  ClashNode();
  virtual ~ClashNode();

  ClashNode(const ClashNode& from);

  inline ClashNode& operator=(const ClashNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClashNode& default_instance();

  void Swap(ClashNode* other);

  // implements Message ----------------------------------------------

  ClashNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClashNode& from);
  void MergeFrom(const ClashNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string groupId = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIdFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional .GangClashInfo gang1 = 2;
  inline bool has_gang1() const;
  inline void clear_gang1();
  static const int kGang1FieldNumber = 2;
  inline const ::GangClashInfo& gang1() const;
  inline ::GangClashInfo* mutable_gang1();
  inline ::GangClashInfo* release_gang1();
  inline void set_allocated_gang1(::GangClashInfo* gang1);

  // optional .GangClashInfo gang2 = 3;
  inline bool has_gang2() const;
  inline void clear_gang2();
  static const int kGang2FieldNumber = 3;
  inline const ::GangClashInfo& gang2() const;
  inline ::GangClashInfo* mutable_gang2();
  inline ::GangClashInfo* release_gang2();
  inline void set_allocated_gang2(::GangClashInfo* gang2);

  // optional int32 clashStatus = 4;
  inline bool has_clashstatus() const;
  inline void clear_clashstatus();
  static const int kClashStatusFieldNumber = 4;
  inline ::google::protobuf::int32 clashstatus() const;
  inline void set_clashstatus(::google::protobuf::int32 value);

  // optional int64 winGang = 5;
  inline bool has_wingang() const;
  inline void clear_wingang();
  static const int kWinGangFieldNumber = 5;
  inline ::google::protobuf::int64 wingang() const;
  inline void set_wingang(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ClashNode)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gang1();
  inline void clear_has_gang1();
  inline void set_has_gang2();
  inline void clear_has_gang2();
  inline void set_has_clashstatus();
  inline void clear_has_clashstatus();
  inline void set_has_wingang();
  inline void clear_has_wingang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* groupid_;
  ::GangClashInfo* gang1_;
  ::GangClashInfo* gang2_;
  ::google::protobuf::int64 wingang_;
  ::google::protobuf::int32 clashstatus_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static ClashNode* default_instance_;
};
// -------------------------------------------------------------------

class CGKingClash : public ::google::protobuf::Message {
 public:
  CGKingClash();
  virtual ~CGKingClash();

  CGKingClash(const CGKingClash& from);

  inline CGKingClash& operator=(const CGKingClash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGKingClash& default_instance();

  void Swap(CGKingClash* other);

  // implements Message ----------------------------------------------

  CGKingClash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGKingClash& from);
  void MergeFrom(const CGKingClash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGKingClash)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static CGKingClash* default_instance_;
};
// -------------------------------------------------------------------

class GCKingClash : public ::google::protobuf::Message {
 public:
  GCKingClash();
  virtual ~GCKingClash();

  GCKingClash(const GCKingClash& from);

  inline GCKingClash& operator=(const GCKingClash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCKingClash& default_instance();

  void Swap(GCKingClash* other);

  // implements Message ----------------------------------------------

  GCKingClash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCKingClash& from);
  void MergeFrom(const GCKingClash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .ClashNode nodeLst = 3;
  inline int nodelst_size() const;
  inline void clear_nodelst();
  static const int kNodeLstFieldNumber = 3;
  inline const ::ClashNode& nodelst(int index) const;
  inline ::ClashNode* mutable_nodelst(int index);
  inline ::ClashNode* add_nodelst();
  inline const ::google::protobuf::RepeatedPtrField< ::ClashNode >&
      nodelst() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClashNode >*
      mutable_nodelst();

  // repeated .CharacterInfo gangPlayerInfo = 4;
  inline int gangplayerinfo_size() const;
  inline void clear_gangplayerinfo();
  static const int kGangPlayerInfoFieldNumber = 4;
  inline const ::CharacterInfo& gangplayerinfo(int index) const;
  inline ::CharacterInfo* mutable_gangplayerinfo(int index);
  inline ::CharacterInfo* add_gangplayerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::CharacterInfo >&
      gangplayerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharacterInfo >*
      mutable_gangplayerinfo();

  // repeated .ItemInfo needItems = 5;
  inline int needitems_size() const;
  inline void clear_needitems();
  static const int kNeedItemsFieldNumber = 5;
  inline const ::ItemInfo& needitems(int index) const;
  inline ::ItemInfo* mutable_needitems(int index);
  inline ::ItemInfo* add_needitems();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
      needitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
      mutable_needitems();

  // optional int64 lastTime = 6;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 6;
  inline ::google::protobuf::int64 lasttime() const;
  inline void set_lasttime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCKingClash)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::ClashNode > nodelst_;
  ::google::protobuf::RepeatedPtrField< ::CharacterInfo > gangplayerinfo_;
  ::google::protobuf::RepeatedPtrField< ::ItemInfo > needitems_;
  ::google::protobuf::int64 lasttime_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static GCKingClash* default_instance_;
};
// -------------------------------------------------------------------

class KingOneInfo : public ::google::protobuf::Message {
 public:
  KingOneInfo();
  virtual ~KingOneInfo();

  KingOneInfo(const KingOneInfo& from);

  inline KingOneInfo& operator=(const KingOneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingOneInfo& default_instance();

  void Swap(KingOneInfo* other);

  // implements Message ----------------------------------------------

  KingOneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingOneInfo& from);
  void MergeFrom(const KingOneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 puid = 1;
  inline bool has_puid() const;
  inline void clear_puid();
  static const int kPuidFieldNumber = 1;
  inline ::google::protobuf::int64 puid() const;
  inline void set_puid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional int64 gangId = 4;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIdFieldNumber = 4;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional int32 killNum = 5;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 5;
  inline ::google::protobuf::int32 killnum() const;
  inline void set_killnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KingOneInfo)
 private:
  inline void set_has_puid();
  inline void clear_has_puid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_killnum();
  inline void clear_has_killnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 puid_;
  ::std::string* name_;
  ::google::protobuf::int64 gangid_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 killnum_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static KingOneInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCKingClashFightInfo : public ::google::protobuf::Message {
 public:
  GCKingClashFightInfo();
  virtual ~GCKingClashFightInfo();

  GCKingClashFightInfo(const GCKingClashFightInfo& from);

  inline GCKingClashFightInfo& operator=(const GCKingClashFightInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCKingClashFightInfo& default_instance();

  void Swap(GCKingClashFightInfo* other);

  // implements Message ----------------------------------------------

  GCKingClashFightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCKingClashFightInfo& from);
  void MergeFrom(const GCKingClashFightInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 lastTime = 2;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 2;
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional int32 gangSelfKill = 3;
  inline bool has_gangselfkill() const;
  inline void clear_gangselfkill();
  static const int kGangSelfKillFieldNumber = 3;
  inline ::google::protobuf::int32 gangselfkill() const;
  inline void set_gangselfkill(::google::protobuf::int32 value);

  // optional int32 gangEnemyKill = 4;
  inline bool has_gangenemykill() const;
  inline void clear_gangenemykill();
  static const int kGangEnemyKillFieldNumber = 4;
  inline ::google::protobuf::int32 gangenemykill() const;
  inline void set_gangenemykill(::google::protobuf::int32 value);

  // optional int32 gangSelfNum = 5;
  inline bool has_gangselfnum() const;
  inline void clear_gangselfnum();
  static const int kGangSelfNumFieldNumber = 5;
  inline ::google::protobuf::int32 gangselfnum() const;
  inline void set_gangselfnum(::google::protobuf::int32 value);

  // optional int32 gangEnemyNum = 6;
  inline bool has_gangenemynum() const;
  inline void clear_gangenemynum();
  static const int kGangEnemyNumFieldNumber = 6;
  inline ::google::protobuf::int32 gangenemynum() const;
  inline void set_gangenemynum(::google::protobuf::int32 value);

  // repeated .KingOneInfo gang1Lst = 7;
  inline int gang1lst_size() const;
  inline void clear_gang1lst();
  static const int kGang1LstFieldNumber = 7;
  inline const ::KingOneInfo& gang1lst(int index) const;
  inline ::KingOneInfo* mutable_gang1lst(int index);
  inline ::KingOneInfo* add_gang1lst();
  inline const ::google::protobuf::RepeatedPtrField< ::KingOneInfo >&
      gang1lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::KingOneInfo >*
      mutable_gang1lst();

  // optional int32 result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .ItemInfo rewards = 9;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 9;
  inline const ::ItemInfo& rewards(int index) const;
  inline ::ItemInfo* mutable_rewards(int index);
  inline ::ItemInfo* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
      mutable_rewards();

  // optional string gangSelfName = 10;
  inline bool has_gangselfname() const;
  inline void clear_gangselfname();
  static const int kGangSelfNameFieldNumber = 10;
  inline const ::std::string& gangselfname() const;
  inline void set_gangselfname(const ::std::string& value);
  inline void set_gangselfname(const char* value);
  inline void set_gangselfname(const char* value, size_t size);
  inline ::std::string* mutable_gangselfname();
  inline ::std::string* release_gangselfname();
  inline void set_allocated_gangselfname(::std::string* gangselfname);

  // optional string gangEnemyName = 11;
  inline bool has_gangenemyname() const;
  inline void clear_gangenemyname();
  static const int kGangEnemyNameFieldNumber = 11;
  inline const ::std::string& gangenemyname() const;
  inline void set_gangenemyname(const ::std::string& value);
  inline void set_gangenemyname(const char* value);
  inline void set_gangenemyname(const char* value, size_t size);
  inline ::std::string* mutable_gangenemyname();
  inline ::std::string* release_gangenemyname();
  inline void set_allocated_gangenemyname(::std::string* gangenemyname);

  // optional int32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCKingClashFightInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_gangselfkill();
  inline void clear_has_gangselfkill();
  inline void set_has_gangenemykill();
  inline void clear_has_gangenemykill();
  inline void set_has_gangselfnum();
  inline void clear_has_gangselfnum();
  inline void set_has_gangenemynum();
  inline void clear_has_gangenemynum();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gangselfname();
  inline void clear_has_gangselfname();
  inline void set_has_gangenemyname();
  inline void clear_has_gangenemyname();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 gangselfkill_;
  ::google::protobuf::int32 gangenemykill_;
  ::google::protobuf::int32 gangselfnum_;
  ::google::protobuf::int32 gangenemynum_;
  ::google::protobuf::RepeatedPtrField< ::KingOneInfo > gang1lst_;
  ::google::protobuf::RepeatedPtrField< ::ItemInfo > rewards_;
  ::std::string* gangselfname_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::std::string* gangenemyname_;
  friend void  protobuf_AddDesc_KingClashMessage_2eproto();
  friend void protobuf_AssignDesc_KingClashMessage_2eproto();
  friend void protobuf_ShutdownFile_KingClashMessage_2eproto();

  void InitAsDefaultInstance();
  static GCKingClashFightInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GangClashInfo

// optional int64 gangId = 1;
inline bool GangClashInfo::has_gangid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GangClashInfo::set_has_gangid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GangClashInfo::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GangClashInfo::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 GangClashInfo::gangid() const {
  // @@protoc_insertion_point(field_get:GangClashInfo.gangId)
  return gangid_;
}
inline void GangClashInfo::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:GangClashInfo.gangId)
}

// optional string gangName = 2;
inline bool GangClashInfo::has_gangname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GangClashInfo::set_has_gangname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GangClashInfo::clear_has_gangname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GangClashInfo::clear_gangname() {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_->clear();
  }
  clear_has_gangname();
}
inline const ::std::string& GangClashInfo::gangname() const {
  // @@protoc_insertion_point(field_get:GangClashInfo.gangName)
  return *gangname_;
}
inline void GangClashInfo::set_gangname(const ::std::string& value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set:GangClashInfo.gangName)
}
inline void GangClashInfo::set_gangname(const char* value) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GangClashInfo.gangName)
}
inline void GangClashInfo::set_gangname(const char* value, size_t size) {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  gangname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GangClashInfo.gangName)
}
inline ::std::string* GangClashInfo::mutable_gangname() {
  set_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GangClashInfo.gangName)
  return gangname_;
}
inline ::std::string* GangClashInfo::release_gangname() {
  clear_has_gangname();
  if (gangname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangname_;
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GangClashInfo::set_allocated_gangname(::std::string* gangname) {
  if (gangname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangname_;
  }
  if (gangname) {
    set_has_gangname();
    gangname_ = gangname;
  } else {
    clear_has_gangname();
    gangname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GangClashInfo.gangName)
}

// -------------------------------------------------------------------

// ClashNode

// optional string groupId = 1;
inline bool ClashNode::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClashNode::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClashNode::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClashNode::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& ClashNode::groupid() const {
  // @@protoc_insertion_point(field_get:ClashNode.groupId)
  return *groupid_;
}
inline void ClashNode::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set:ClashNode.groupId)
}
inline void ClashNode::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClashNode.groupId)
}
inline void ClashNode::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClashNode.groupId)
}
inline ::std::string* ClashNode::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    groupid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClashNode.groupId)
  return groupid_;
}
inline ::std::string* ClashNode::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClashNode::set_allocated_groupid(::std::string* groupid) {
  if (groupid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupid_;
  }
  if (groupid) {
    set_has_groupid();
    groupid_ = groupid;
  } else {
    clear_has_groupid();
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClashNode.groupId)
}

// optional .GangClashInfo gang1 = 2;
inline bool ClashNode::has_gang1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClashNode::set_has_gang1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClashNode::clear_has_gang1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClashNode::clear_gang1() {
  if (gang1_ != NULL) gang1_->::GangClashInfo::Clear();
  clear_has_gang1();
}
inline const ::GangClashInfo& ClashNode::gang1() const {
  // @@protoc_insertion_point(field_get:ClashNode.gang1)
  return gang1_ != NULL ? *gang1_ : *default_instance_->gang1_;
}
inline ::GangClashInfo* ClashNode::mutable_gang1() {
  set_has_gang1();
  if (gang1_ == NULL) gang1_ = new ::GangClashInfo;
  // @@protoc_insertion_point(field_mutable:ClashNode.gang1)
  return gang1_;
}
inline ::GangClashInfo* ClashNode::release_gang1() {
  clear_has_gang1();
  ::GangClashInfo* temp = gang1_;
  gang1_ = NULL;
  return temp;
}
inline void ClashNode::set_allocated_gang1(::GangClashInfo* gang1) {
  delete gang1_;
  gang1_ = gang1;
  if (gang1) {
    set_has_gang1();
  } else {
    clear_has_gang1();
  }
  // @@protoc_insertion_point(field_set_allocated:ClashNode.gang1)
}

// optional .GangClashInfo gang2 = 3;
inline bool ClashNode::has_gang2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClashNode::set_has_gang2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClashNode::clear_has_gang2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClashNode::clear_gang2() {
  if (gang2_ != NULL) gang2_->::GangClashInfo::Clear();
  clear_has_gang2();
}
inline const ::GangClashInfo& ClashNode::gang2() const {
  // @@protoc_insertion_point(field_get:ClashNode.gang2)
  return gang2_ != NULL ? *gang2_ : *default_instance_->gang2_;
}
inline ::GangClashInfo* ClashNode::mutable_gang2() {
  set_has_gang2();
  if (gang2_ == NULL) gang2_ = new ::GangClashInfo;
  // @@protoc_insertion_point(field_mutable:ClashNode.gang2)
  return gang2_;
}
inline ::GangClashInfo* ClashNode::release_gang2() {
  clear_has_gang2();
  ::GangClashInfo* temp = gang2_;
  gang2_ = NULL;
  return temp;
}
inline void ClashNode::set_allocated_gang2(::GangClashInfo* gang2) {
  delete gang2_;
  gang2_ = gang2;
  if (gang2) {
    set_has_gang2();
  } else {
    clear_has_gang2();
  }
  // @@protoc_insertion_point(field_set_allocated:ClashNode.gang2)
}

// optional int32 clashStatus = 4;
inline bool ClashNode::has_clashstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClashNode::set_has_clashstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClashNode::clear_has_clashstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClashNode::clear_clashstatus() {
  clashstatus_ = 0;
  clear_has_clashstatus();
}
inline ::google::protobuf::int32 ClashNode::clashstatus() const {
  // @@protoc_insertion_point(field_get:ClashNode.clashStatus)
  return clashstatus_;
}
inline void ClashNode::set_clashstatus(::google::protobuf::int32 value) {
  set_has_clashstatus();
  clashstatus_ = value;
  // @@protoc_insertion_point(field_set:ClashNode.clashStatus)
}

// optional int64 winGang = 5;
inline bool ClashNode::has_wingang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClashNode::set_has_wingang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClashNode::clear_has_wingang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClashNode::clear_wingang() {
  wingang_ = GOOGLE_LONGLONG(0);
  clear_has_wingang();
}
inline ::google::protobuf::int64 ClashNode::wingang() const {
  // @@protoc_insertion_point(field_get:ClashNode.winGang)
  return wingang_;
}
inline void ClashNode::set_wingang(::google::protobuf::int64 value) {
  set_has_wingang();
  wingang_ = value;
  // @@protoc_insertion_point(field_set:ClashNode.winGang)
}

// -------------------------------------------------------------------

// CGKingClash

// optional int32 operate = 1;
inline bool CGKingClash::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGKingClash::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGKingClash::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGKingClash::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGKingClash::operate() const {
  // @@protoc_insertion_point(field_get:CGKingClash.operate)
  return operate_;
}
inline void CGKingClash::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGKingClash.operate)
}

// optional int32 flag = 2;
inline bool CGKingClash::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGKingClash::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGKingClash::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGKingClash::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 CGKingClash::flag() const {
  // @@protoc_insertion_point(field_get:CGKingClash.flag)
  return flag_;
}
inline void CGKingClash::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:CGKingClash.flag)
}

// -------------------------------------------------------------------

// GCKingClash

// optional int32 operate = 1;
inline bool GCKingClash::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCKingClash::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCKingClash::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCKingClash::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCKingClash::operate() const {
  // @@protoc_insertion_point(field_get:GCKingClash.operate)
  return operate_;
}
inline void GCKingClash::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCKingClash.operate)
}

// optional int32 status = 2;
inline bool GCKingClash::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCKingClash::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCKingClash::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCKingClash::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 GCKingClash::status() const {
  // @@protoc_insertion_point(field_get:GCKingClash.status)
  return status_;
}
inline void GCKingClash::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:GCKingClash.status)
}

// repeated .ClashNode nodeLst = 3;
inline int GCKingClash::nodelst_size() const {
  return nodelst_.size();
}
inline void GCKingClash::clear_nodelst() {
  nodelst_.Clear();
}
inline const ::ClashNode& GCKingClash::nodelst(int index) const {
  // @@protoc_insertion_point(field_get:GCKingClash.nodeLst)
  return nodelst_.Get(index);
}
inline ::ClashNode* GCKingClash::mutable_nodelst(int index) {
  // @@protoc_insertion_point(field_mutable:GCKingClash.nodeLst)
  return nodelst_.Mutable(index);
}
inline ::ClashNode* GCKingClash::add_nodelst() {
  // @@protoc_insertion_point(field_add:GCKingClash.nodeLst)
  return nodelst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClashNode >&
GCKingClash::nodelst() const {
  // @@protoc_insertion_point(field_list:GCKingClash.nodeLst)
  return nodelst_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClashNode >*
GCKingClash::mutable_nodelst() {
  // @@protoc_insertion_point(field_mutable_list:GCKingClash.nodeLst)
  return &nodelst_;
}

// repeated .CharacterInfo gangPlayerInfo = 4;
inline int GCKingClash::gangplayerinfo_size() const {
  return gangplayerinfo_.size();
}
inline void GCKingClash::clear_gangplayerinfo() {
  gangplayerinfo_.Clear();
}
inline const ::CharacterInfo& GCKingClash::gangplayerinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCKingClash.gangPlayerInfo)
  return gangplayerinfo_.Get(index);
}
inline ::CharacterInfo* GCKingClash::mutable_gangplayerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCKingClash.gangPlayerInfo)
  return gangplayerinfo_.Mutable(index);
}
inline ::CharacterInfo* GCKingClash::add_gangplayerinfo() {
  // @@protoc_insertion_point(field_add:GCKingClash.gangPlayerInfo)
  return gangplayerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharacterInfo >&
GCKingClash::gangplayerinfo() const {
  // @@protoc_insertion_point(field_list:GCKingClash.gangPlayerInfo)
  return gangplayerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharacterInfo >*
GCKingClash::mutable_gangplayerinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCKingClash.gangPlayerInfo)
  return &gangplayerinfo_;
}

// repeated .ItemInfo needItems = 5;
inline int GCKingClash::needitems_size() const {
  return needitems_.size();
}
inline void GCKingClash::clear_needitems() {
  needitems_.Clear();
}
inline const ::ItemInfo& GCKingClash::needitems(int index) const {
  // @@protoc_insertion_point(field_get:GCKingClash.needItems)
  return needitems_.Get(index);
}
inline ::ItemInfo* GCKingClash::mutable_needitems(int index) {
  // @@protoc_insertion_point(field_mutable:GCKingClash.needItems)
  return needitems_.Mutable(index);
}
inline ::ItemInfo* GCKingClash::add_needitems() {
  // @@protoc_insertion_point(field_add:GCKingClash.needItems)
  return needitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
GCKingClash::needitems() const {
  // @@protoc_insertion_point(field_list:GCKingClash.needItems)
  return needitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
GCKingClash::mutable_needitems() {
  // @@protoc_insertion_point(field_mutable_list:GCKingClash.needItems)
  return &needitems_;
}

// optional int64 lastTime = 6;
inline bool GCKingClash::has_lasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCKingClash::set_has_lasttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCKingClash::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCKingClash::clear_lasttime() {
  lasttime_ = GOOGLE_LONGLONG(0);
  clear_has_lasttime();
}
inline ::google::protobuf::int64 GCKingClash::lasttime() const {
  // @@protoc_insertion_point(field_get:GCKingClash.lastTime)
  return lasttime_;
}
inline void GCKingClash::set_lasttime(::google::protobuf::int64 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:GCKingClash.lastTime)
}

// -------------------------------------------------------------------

// KingOneInfo

// optional int64 puid = 1;
inline bool KingOneInfo::has_puid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingOneInfo::set_has_puid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingOneInfo::clear_has_puid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingOneInfo::clear_puid() {
  puid_ = GOOGLE_LONGLONG(0);
  clear_has_puid();
}
inline ::google::protobuf::int64 KingOneInfo::puid() const {
  // @@protoc_insertion_point(field_get:KingOneInfo.puid)
  return puid_;
}
inline void KingOneInfo::set_puid(::google::protobuf::int64 value) {
  set_has_puid();
  puid_ = value;
  // @@protoc_insertion_point(field_set:KingOneInfo.puid)
}

// optional string name = 2;
inline bool KingOneInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingOneInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingOneInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingOneInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& KingOneInfo::name() const {
  // @@protoc_insertion_point(field_get:KingOneInfo.name)
  return *name_;
}
inline void KingOneInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:KingOneInfo.name)
}
inline void KingOneInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:KingOneInfo.name)
}
inline void KingOneInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KingOneInfo.name)
}
inline ::std::string* KingOneInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:KingOneInfo.name)
  return name_;
}
inline ::std::string* KingOneInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KingOneInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:KingOneInfo.name)
}

// optional int32 job = 3;
inline bool KingOneInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KingOneInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KingOneInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KingOneInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 KingOneInfo::job() const {
  // @@protoc_insertion_point(field_get:KingOneInfo.job)
  return job_;
}
inline void KingOneInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:KingOneInfo.job)
}

// optional int64 gangId = 4;
inline bool KingOneInfo::has_gangid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KingOneInfo::set_has_gangid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KingOneInfo::clear_has_gangid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KingOneInfo::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 KingOneInfo::gangid() const {
  // @@protoc_insertion_point(field_get:KingOneInfo.gangId)
  return gangid_;
}
inline void KingOneInfo::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:KingOneInfo.gangId)
}

// optional int32 killNum = 5;
inline bool KingOneInfo::has_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KingOneInfo::set_has_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KingOneInfo::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KingOneInfo::clear_killnum() {
  killnum_ = 0;
  clear_has_killnum();
}
inline ::google::protobuf::int32 KingOneInfo::killnum() const {
  // @@protoc_insertion_point(field_get:KingOneInfo.killNum)
  return killnum_;
}
inline void KingOneInfo::set_killnum(::google::protobuf::int32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:KingOneInfo.killNum)
}

// -------------------------------------------------------------------

// GCKingClashFightInfo

// optional int32 flag = 1;
inline bool GCKingClashFightInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCKingClashFightInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCKingClashFightInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCKingClashFightInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::flag() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.flag)
  return flag_;
}
inline void GCKingClashFightInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.flag)
}

// optional int32 lastTime = 2;
inline bool GCKingClashFightInfo::has_lasttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCKingClashFightInfo::set_has_lasttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCKingClashFightInfo::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCKingClashFightInfo::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::lasttime() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.lastTime)
  return lasttime_;
}
inline void GCKingClashFightInfo::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.lastTime)
}

// optional int32 gangSelfKill = 3;
inline bool GCKingClashFightInfo::has_gangselfkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangselfkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCKingClashFightInfo::clear_has_gangselfkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCKingClashFightInfo::clear_gangselfkill() {
  gangselfkill_ = 0;
  clear_has_gangselfkill();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::gangselfkill() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangSelfKill)
  return gangselfkill_;
}
inline void GCKingClashFightInfo::set_gangselfkill(::google::protobuf::int32 value) {
  set_has_gangselfkill();
  gangselfkill_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangSelfKill)
}

// optional int32 gangEnemyKill = 4;
inline bool GCKingClashFightInfo::has_gangenemykill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangenemykill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCKingClashFightInfo::clear_has_gangenemykill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCKingClashFightInfo::clear_gangenemykill() {
  gangenemykill_ = 0;
  clear_has_gangenemykill();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::gangenemykill() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangEnemyKill)
  return gangenemykill_;
}
inline void GCKingClashFightInfo::set_gangenemykill(::google::protobuf::int32 value) {
  set_has_gangenemykill();
  gangenemykill_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangEnemyKill)
}

// optional int32 gangSelfNum = 5;
inline bool GCKingClashFightInfo::has_gangselfnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangselfnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCKingClashFightInfo::clear_has_gangselfnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCKingClashFightInfo::clear_gangselfnum() {
  gangselfnum_ = 0;
  clear_has_gangselfnum();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::gangselfnum() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangSelfNum)
  return gangselfnum_;
}
inline void GCKingClashFightInfo::set_gangselfnum(::google::protobuf::int32 value) {
  set_has_gangselfnum();
  gangselfnum_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangSelfNum)
}

// optional int32 gangEnemyNum = 6;
inline bool GCKingClashFightInfo::has_gangenemynum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangenemynum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCKingClashFightInfo::clear_has_gangenemynum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCKingClashFightInfo::clear_gangenemynum() {
  gangenemynum_ = 0;
  clear_has_gangenemynum();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::gangenemynum() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangEnemyNum)
  return gangenemynum_;
}
inline void GCKingClashFightInfo::set_gangenemynum(::google::protobuf::int32 value) {
  set_has_gangenemynum();
  gangenemynum_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangEnemyNum)
}

// repeated .KingOneInfo gang1Lst = 7;
inline int GCKingClashFightInfo::gang1lst_size() const {
  return gang1lst_.size();
}
inline void GCKingClashFightInfo::clear_gang1lst() {
  gang1lst_.Clear();
}
inline const ::KingOneInfo& GCKingClashFightInfo::gang1lst(int index) const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gang1Lst)
  return gang1lst_.Get(index);
}
inline ::KingOneInfo* GCKingClashFightInfo::mutable_gang1lst(int index) {
  // @@protoc_insertion_point(field_mutable:GCKingClashFightInfo.gang1Lst)
  return gang1lst_.Mutable(index);
}
inline ::KingOneInfo* GCKingClashFightInfo::add_gang1lst() {
  // @@protoc_insertion_point(field_add:GCKingClashFightInfo.gang1Lst)
  return gang1lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KingOneInfo >&
GCKingClashFightInfo::gang1lst() const {
  // @@protoc_insertion_point(field_list:GCKingClashFightInfo.gang1Lst)
  return gang1lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::KingOneInfo >*
GCKingClashFightInfo::mutable_gang1lst() {
  // @@protoc_insertion_point(field_mutable_list:GCKingClashFightInfo.gang1Lst)
  return &gang1lst_;
}

// optional int32 result = 8;
inline bool GCKingClashFightInfo::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCKingClashFightInfo::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCKingClashFightInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCKingClashFightInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::result() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.result)
  return result_;
}
inline void GCKingClashFightInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.result)
}

// repeated .ItemInfo rewards = 9;
inline int GCKingClashFightInfo::rewards_size() const {
  return rewards_.size();
}
inline void GCKingClashFightInfo::clear_rewards() {
  rewards_.Clear();
}
inline const ::ItemInfo& GCKingClashFightInfo::rewards(int index) const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.rewards)
  return rewards_.Get(index);
}
inline ::ItemInfo* GCKingClashFightInfo::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCKingClashFightInfo.rewards)
  return rewards_.Mutable(index);
}
inline ::ItemInfo* GCKingClashFightInfo::add_rewards() {
  // @@protoc_insertion_point(field_add:GCKingClashFightInfo.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemInfo >&
GCKingClashFightInfo::rewards() const {
  // @@protoc_insertion_point(field_list:GCKingClashFightInfo.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ItemInfo >*
GCKingClashFightInfo::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:GCKingClashFightInfo.rewards)
  return &rewards_;
}

// optional string gangSelfName = 10;
inline bool GCKingClashFightInfo::has_gangselfname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangselfname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GCKingClashFightInfo::clear_has_gangselfname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GCKingClashFightInfo::clear_gangselfname() {
  if (gangselfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangselfname_->clear();
  }
  clear_has_gangselfname();
}
inline const ::std::string& GCKingClashFightInfo::gangselfname() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangSelfName)
  return *gangselfname_;
}
inline void GCKingClashFightInfo::set_gangselfname(const ::std::string& value) {
  set_has_gangselfname();
  if (gangselfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangselfname_ = new ::std::string;
  }
  gangselfname_->assign(value);
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangSelfName)
}
inline void GCKingClashFightInfo::set_gangselfname(const char* value) {
  set_has_gangselfname();
  if (gangselfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangselfname_ = new ::std::string;
  }
  gangselfname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCKingClashFightInfo.gangSelfName)
}
inline void GCKingClashFightInfo::set_gangselfname(const char* value, size_t size) {
  set_has_gangselfname();
  if (gangselfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangselfname_ = new ::std::string;
  }
  gangselfname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCKingClashFightInfo.gangSelfName)
}
inline ::std::string* GCKingClashFightInfo::mutable_gangselfname() {
  set_has_gangselfname();
  if (gangselfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangselfname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCKingClashFightInfo.gangSelfName)
  return gangselfname_;
}
inline ::std::string* GCKingClashFightInfo::release_gangselfname() {
  clear_has_gangselfname();
  if (gangselfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangselfname_;
    gangselfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCKingClashFightInfo::set_allocated_gangselfname(::std::string* gangselfname) {
  if (gangselfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangselfname_;
  }
  if (gangselfname) {
    set_has_gangselfname();
    gangselfname_ = gangselfname;
  } else {
    clear_has_gangselfname();
    gangselfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCKingClashFightInfo.gangSelfName)
}

// optional string gangEnemyName = 11;
inline bool GCKingClashFightInfo::has_gangenemyname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GCKingClashFightInfo::set_has_gangenemyname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GCKingClashFightInfo::clear_has_gangenemyname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GCKingClashFightInfo::clear_gangenemyname() {
  if (gangenemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangenemyname_->clear();
  }
  clear_has_gangenemyname();
}
inline const ::std::string& GCKingClashFightInfo::gangenemyname() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.gangEnemyName)
  return *gangenemyname_;
}
inline void GCKingClashFightInfo::set_gangenemyname(const ::std::string& value) {
  set_has_gangenemyname();
  if (gangenemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangenemyname_ = new ::std::string;
  }
  gangenemyname_->assign(value);
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.gangEnemyName)
}
inline void GCKingClashFightInfo::set_gangenemyname(const char* value) {
  set_has_gangenemyname();
  if (gangenemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangenemyname_ = new ::std::string;
  }
  gangenemyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCKingClashFightInfo.gangEnemyName)
}
inline void GCKingClashFightInfo::set_gangenemyname(const char* value, size_t size) {
  set_has_gangenemyname();
  if (gangenemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangenemyname_ = new ::std::string;
  }
  gangenemyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCKingClashFightInfo.gangEnemyName)
}
inline ::std::string* GCKingClashFightInfo::mutable_gangenemyname() {
  set_has_gangenemyname();
  if (gangenemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gangenemyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCKingClashFightInfo.gangEnemyName)
  return gangenemyname_;
}
inline ::std::string* GCKingClashFightInfo::release_gangenemyname() {
  clear_has_gangenemyname();
  if (gangenemyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gangenemyname_;
    gangenemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCKingClashFightInfo::set_allocated_gangenemyname(::std::string* gangenemyname) {
  if (gangenemyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gangenemyname_;
  }
  if (gangenemyname) {
    set_has_gangenemyname();
    gangenemyname_ = gangenemyname;
  } else {
    clear_has_gangenemyname();
    gangenemyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCKingClashFightInfo.gangEnemyName)
}

// optional int32 type = 12;
inline bool GCKingClashFightInfo::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GCKingClashFightInfo::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GCKingClashFightInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GCKingClashFightInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCKingClashFightInfo::type() const {
  // @@protoc_insertion_point(field_get:GCKingClashFightInfo.type)
  return type_;
}
inline void GCKingClashFightInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCKingClashFightInfo.type)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KingClashMessage_2eproto__INCLUDED
