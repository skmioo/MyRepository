// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LegacyMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LegacyMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LegacyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegacyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLegacy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLegacy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLegacy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLegacy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLegacyBuyNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLegacyBuyNum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LegacyMessage_2eproto() {
  protobuf_AddDesc_LegacyMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LegacyMessage.proto");
  GOOGLE_CHECK(file != NULL);
  LegacyData_descriptor_ = file->message_type(0);
  static const int LegacyData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, legacyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, currentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, isonbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, idxofbody_),
  };
  LegacyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegacyData_descriptor_,
      LegacyData::default_instance_,
      LegacyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegacyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegacyData));
  CGLegacy_descriptor_ = file->message_type(1);
  static const int CGLegacy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, legacyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, listlegacyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, state_),
  };
  CGLegacy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLegacy_descriptor_,
      CGLegacy::default_instance_,
      CGLegacy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLegacy));
  GCLegacy_descriptor_ = file->message_type(2);
  static const int GCLegacy_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, fightvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, listonbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, listinbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, legacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, listindepot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, drawid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, havemoneynum_),
  };
  GCLegacy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLegacy_descriptor_,
      GCLegacy::default_instance_,
      GCLegacy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLegacy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLegacy));
  CGLegacyBuyNum_descriptor_ = file->message_type(3);
  static const int CGLegacyBuyNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacyBuyNum, type_),
  };
  CGLegacyBuyNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLegacyBuyNum_descriptor_,
      CGLegacyBuyNum::default_instance_,
      CGLegacyBuyNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacyBuyNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLegacyBuyNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLegacyBuyNum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LegacyMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegacyData_descriptor_, &LegacyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLegacy_descriptor_, &CGLegacy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLegacy_descriptor_, &GCLegacy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLegacyBuyNum_descriptor_, &CGLegacyBuyNum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LegacyMessage_2eproto() {
  delete LegacyData::default_instance_;
  delete LegacyData_reflection_;
  delete CGLegacy::default_instance_;
  delete CGLegacy_reflection_;
  delete GCLegacy::default_instance_;
  delete GCLegacy_reflection_;
  delete CGLegacyBuyNum::default_instance_;
  delete CGLegacyBuyNum_reflection_;
}

void protobuf_AddDesc_LegacyMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023LegacyMessage.proto\"h\n\nLegacyData\022\020\n\010l"
    "egacyId\030\001 \001(\005\022\017\n\007tableId\030\002 \001(\005\022\022\n\ncurren"
    "tExp\030\003 \001(\005\022\020\n\010isOnBody\030\004 \001(\005\022\021\n\tidxOfBod"
    "y\030\005 \001(\005\"`\n\010CGLegacy\022\017\n\007operate\030\001 \001(\005\022\020\n\010"
    "legacyId\030\002 \001(\005\022\024\n\014listLegacyId\030\003 \003(\005\022\014\n\004"
    "flag\030\004 \001(\005\022\r\n\005state\030\005 \001(\005\"\345\001\n\010GCLegacy\022\017"
    "\n\007operate\030\001 \001(\005\022\022\n\nfightValue\030\002 \001(\005\022\037\n\nl"
    "istOnBody\030\003 \003(\0132\013.LegacyData\022\036\n\tlistInBa"
    "g\030\004 \003(\0132\013.LegacyData\022\016\n\006result\030\005 \001(\005\022\033\n\006"
    "legacy\030\006 \001(\0132\013.LegacyData\022 \n\013listInDepot"
    "\030\007 \003(\0132\013.LegacyData\022\016\n\006drawId\030\010 \001(\005\022\024\n\014h"
    "aveMoneyNum\030\t \001(\005\"\036\n\016CGLegacyBuyNum\022\014\n\004t"
    "ype\030\001 \001(\005B\031\n\027com.mile.common.message", 516);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LegacyMessage.proto", &protobuf_RegisterTypes);
  LegacyData::default_instance_ = new LegacyData();
  CGLegacy::default_instance_ = new CGLegacy();
  GCLegacy::default_instance_ = new GCLegacy();
  CGLegacyBuyNum::default_instance_ = new CGLegacyBuyNum();
  LegacyData::default_instance_->InitAsDefaultInstance();
  CGLegacy::default_instance_->InitAsDefaultInstance();
  GCLegacy::default_instance_->InitAsDefaultInstance();
  CGLegacyBuyNum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LegacyMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LegacyMessage_2eproto {
  StaticDescriptorInitializer_LegacyMessage_2eproto() {
    protobuf_AddDesc_LegacyMessage_2eproto();
  }
} static_descriptor_initializer_LegacyMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LegacyData::kLegacyIdFieldNumber;
const int LegacyData::kTableIdFieldNumber;
const int LegacyData::kCurrentExpFieldNumber;
const int LegacyData::kIsOnBodyFieldNumber;
const int LegacyData::kIdxOfBodyFieldNumber;
#endif  // !_MSC_VER

LegacyData::LegacyData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LegacyData)
}

void LegacyData::InitAsDefaultInstance() {
}

LegacyData::LegacyData(const LegacyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LegacyData)
}

void LegacyData::SharedCtor() {
  _cached_size_ = 0;
  legacyid_ = 0;
  tableid_ = 0;
  currentexp_ = 0;
  isonbody_ = 0;
  idxofbody_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegacyData::~LegacyData() {
  // @@protoc_insertion_point(destructor:LegacyData)
  SharedDtor();
}

void LegacyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LegacyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegacyData_descriptor_;
}

const LegacyData& LegacyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LegacyMessage_2eproto();
  return *default_instance_;
}

LegacyData* LegacyData::default_instance_ = NULL;

LegacyData* LegacyData::New() const {
  return new LegacyData;
}

void LegacyData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LegacyData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(legacyid_, idxofbody_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegacyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LegacyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 legacyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacyid_)));
          set_has_legacyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // optional int32 tableId = 2;
      case 2: {
        if (tag == 16) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currentExp;
        break;
      }

      // optional int32 currentExp = 3;
      case 3: {
        if (tag == 24) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isOnBody;
        break;
      }

      // optional int32 isOnBody = 4;
      case 4: {
        if (tag == 32) {
         parse_isOnBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonbody_)));
          set_has_isonbody();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_idxOfBody;
        break;
      }

      // optional int32 idxOfBody = 5;
      case 5: {
        if (tag == 40) {
         parse_idxOfBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idxofbody_)));
          set_has_idxofbody();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LegacyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LegacyData)
  return false;
#undef DO_
}

void LegacyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LegacyData)
  // optional int32 legacyId = 1;
  if (has_legacyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->legacyid(), output);
  }

  // optional int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // optional int32 currentExp = 3;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentexp(), output);
  }

  // optional int32 isOnBody = 4;
  if (has_isonbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isonbody(), output);
  }

  // optional int32 idxOfBody = 5;
  if (has_idxofbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idxofbody(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LegacyData)
}

::google::protobuf::uint8* LegacyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LegacyData)
  // optional int32 legacyId = 1;
  if (has_legacyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->legacyid(), target);
  }

  // optional int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // optional int32 currentExp = 3;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentexp(), target);
  }

  // optional int32 isOnBody = 4;
  if (has_isonbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isonbody(), target);
  }

  // optional int32 idxOfBody = 5;
  if (has_idxofbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idxofbody(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LegacyData)
  return target;
}

int LegacyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 legacyId = 1;
    if (has_legacyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legacyid());
    }

    // optional int32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 currentExp = 3;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }

    // optional int32 isOnBody = 4;
    if (has_isonbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonbody());
    }

    // optional int32 idxOfBody = 5;
    if (has_idxofbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idxofbody());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegacyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegacyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegacyData::MergeFrom(const LegacyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_legacyid()) {
      set_legacyid(from.legacyid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
    if (from.has_isonbody()) {
      set_isonbody(from.isonbody());
    }
    if (from.has_idxofbody()) {
      set_idxofbody(from.idxofbody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegacyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacyData::CopyFrom(const LegacyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacyData::IsInitialized() const {

  return true;
}

void LegacyData::Swap(LegacyData* other) {
  if (other != this) {
    std::swap(legacyid_, other->legacyid_);
    std::swap(tableid_, other->tableid_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(isonbody_, other->isonbody_);
    std::swap(idxofbody_, other->idxofbody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegacyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegacyData_descriptor_;
  metadata.reflection = LegacyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLegacy::kOperateFieldNumber;
const int CGLegacy::kLegacyIdFieldNumber;
const int CGLegacy::kListLegacyIdFieldNumber;
const int CGLegacy::kFlagFieldNumber;
const int CGLegacy::kStateFieldNumber;
#endif  // !_MSC_VER

CGLegacy::CGLegacy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLegacy)
}

void CGLegacy::InitAsDefaultInstance() {
}

CGLegacy::CGLegacy(const CGLegacy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLegacy)
}

void CGLegacy::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  legacyid_ = 0;
  flag_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLegacy::~CGLegacy() {
  // @@protoc_insertion_point(destructor:CGLegacy)
  SharedDtor();
}

void CGLegacy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLegacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLegacy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLegacy_descriptor_;
}

const CGLegacy& CGLegacy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LegacyMessage_2eproto();
  return *default_instance_;
}

CGLegacy* CGLegacy::default_instance_ = NULL;

CGLegacy* CGLegacy::New() const {
  return new CGLegacy;
}

void CGLegacy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGLegacy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, legacyid_);
  ZR_(flag_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  listlegacyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLegacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLegacy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_legacyId;
        break;
      }

      // optional int32 legacyId = 2;
      case 2: {
        if (tag == 16) {
         parse_legacyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legacyid_)));
          set_has_legacyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_listLegacyId;
        break;
      }

      // repeated int32 listLegacyId = 3;
      case 3: {
        if (tag == 24) {
         parse_listLegacyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_listlegacyid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_listlegacyid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_listLegacyId;
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional int32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLegacy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLegacy)
  return false;
#undef DO_
}

void CGLegacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLegacy)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 legacyId = 2;
  if (has_legacyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->legacyid(), output);
  }

  // repeated int32 listLegacyId = 3;
  for (int i = 0; i < this->listlegacyid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->listlegacyid(i), output);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLegacy)
}

::google::protobuf::uint8* CGLegacy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLegacy)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 legacyId = 2;
  if (has_legacyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->legacyid(), target);
  }

  // repeated int32 listLegacyId = 3;
  for (int i = 0; i < this->listlegacyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->listlegacyid(i), target);
  }

  // optional int32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLegacy)
  return target;
}

int CGLegacy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 legacyId = 2;
    if (has_legacyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legacyid());
    }

    // optional int32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated int32 listLegacyId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->listlegacyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->listlegacyid(i));
    }
    total_size += 1 * this->listlegacyid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLegacy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLegacy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLegacy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLegacy::MergeFrom(const CGLegacy& from) {
  GOOGLE_CHECK_NE(&from, this);
  listlegacyid_.MergeFrom(from.listlegacyid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_legacyid()) {
      set_legacyid(from.legacyid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLegacy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLegacy::CopyFrom(const CGLegacy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLegacy::IsInitialized() const {

  return true;
}

void CGLegacy::Swap(CGLegacy* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(legacyid_, other->legacyid_);
    listlegacyid_.Swap(&other->listlegacyid_);
    std::swap(flag_, other->flag_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLegacy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLegacy_descriptor_;
  metadata.reflection = CGLegacy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLegacy::kOperateFieldNumber;
const int GCLegacy::kFightValueFieldNumber;
const int GCLegacy::kListOnBodyFieldNumber;
const int GCLegacy::kListInBagFieldNumber;
const int GCLegacy::kResultFieldNumber;
const int GCLegacy::kLegacyFieldNumber;
const int GCLegacy::kListInDepotFieldNumber;
const int GCLegacy::kDrawIdFieldNumber;
const int GCLegacy::kHaveMoneyNumFieldNumber;
#endif  // !_MSC_VER

GCLegacy::GCLegacy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLegacy)
}

void GCLegacy::InitAsDefaultInstance() {
  legacy_ = const_cast< ::LegacyData*>(&::LegacyData::default_instance());
}

GCLegacy::GCLegacy(const GCLegacy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLegacy)
}

void GCLegacy::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  fightvalue_ = 0;
  result_ = 0;
  legacy_ = NULL;
  drawid_ = 0;
  havemoneynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLegacy::~GCLegacy() {
  // @@protoc_insertion_point(destructor:GCLegacy)
  SharedDtor();
}

void GCLegacy::SharedDtor() {
  if (this != default_instance_) {
    delete legacy_;
  }
}

void GCLegacy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLegacy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLegacy_descriptor_;
}

const GCLegacy& GCLegacy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LegacyMessage_2eproto();
  return *default_instance_;
}

GCLegacy* GCLegacy::default_instance_ = NULL;

GCLegacy* GCLegacy::New() const {
  return new GCLegacy;
}

void GCLegacy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLegacy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 179) {
    ZR_(operate_, fightvalue_);
    ZR_(result_, drawid_);
    if (has_legacy()) {
      if (legacy_ != NULL) legacy_->::LegacyData::Clear();
    }
  }
  havemoneynum_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  listonbody_.Clear();
  listinbag_.Clear();
  listindepot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLegacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLegacy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fightValue;
        break;
      }

      // optional int32 fightValue = 2;
      case 2: {
        if (tag == 16) {
         parse_fightValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightvalue_)));
          set_has_fightvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_listOnBody;
        break;
      }

      // repeated .LegacyData listOnBody = 3;
      case 3: {
        if (tag == 26) {
         parse_listOnBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listonbody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_listOnBody;
        if (input->ExpectTag(34)) goto parse_listInBag;
        break;
      }

      // repeated .LegacyData listInBag = 4;
      case 4: {
        if (tag == 34) {
         parse_listInBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listinbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_listInBag;
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_legacy;
        break;
      }

      // optional .LegacyData legacy = 6;
      case 6: {
        if (tag == 50) {
         parse_legacy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_legacy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_listInDepot;
        break;
      }

      // repeated .LegacyData listInDepot = 7;
      case 7: {
        if (tag == 58) {
         parse_listInDepot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listindepot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_listInDepot;
        if (input->ExpectTag(64)) goto parse_drawId;
        break;
      }

      // optional int32 drawId = 8;
      case 8: {
        if (tag == 64) {
         parse_drawId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawid_)));
          set_has_drawid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_haveMoneyNum;
        break;
      }

      // optional int32 haveMoneyNum = 9;
      case 9: {
        if (tag == 72) {
         parse_haveMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havemoneynum_)));
          set_has_havemoneynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLegacy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLegacy)
  return false;
#undef DO_
}

void GCLegacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLegacy)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 fightValue = 2;
  if (has_fightvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fightvalue(), output);
  }

  // repeated .LegacyData listOnBody = 3;
  for (int i = 0; i < this->listonbody_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->listonbody(i), output);
  }

  // repeated .LegacyData listInBag = 4;
  for (int i = 0; i < this->listinbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->listinbag(i), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  // optional .LegacyData legacy = 6;
  if (has_legacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->legacy(), output);
  }

  // repeated .LegacyData listInDepot = 7;
  for (int i = 0; i < this->listindepot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->listindepot(i), output);
  }

  // optional int32 drawId = 8;
  if (has_drawid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->drawid(), output);
  }

  // optional int32 haveMoneyNum = 9;
  if (has_havemoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->havemoneynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLegacy)
}

::google::protobuf::uint8* GCLegacy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLegacy)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 fightValue = 2;
  if (has_fightvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fightvalue(), target);
  }

  // repeated .LegacyData listOnBody = 3;
  for (int i = 0; i < this->listonbody_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->listonbody(i), target);
  }

  // repeated .LegacyData listInBag = 4;
  for (int i = 0; i < this->listinbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->listinbag(i), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  // optional .LegacyData legacy = 6;
  if (has_legacy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->legacy(), target);
  }

  // repeated .LegacyData listInDepot = 7;
  for (int i = 0; i < this->listindepot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->listindepot(i), target);
  }

  // optional int32 drawId = 8;
  if (has_drawid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->drawid(), target);
  }

  // optional int32 haveMoneyNum = 9;
  if (has_havemoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->havemoneynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLegacy)
  return target;
}

int GCLegacy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 fightValue = 2;
    if (has_fightvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightvalue());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .LegacyData legacy = 6;
    if (has_legacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legacy());
    }

    // optional int32 drawId = 8;
    if (has_drawid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 haveMoneyNum = 9;
    if (has_havemoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havemoneynum());
    }

  }
  // repeated .LegacyData listOnBody = 3;
  total_size += 1 * this->listonbody_size();
  for (int i = 0; i < this->listonbody_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listonbody(i));
  }

  // repeated .LegacyData listInBag = 4;
  total_size += 1 * this->listinbag_size();
  for (int i = 0; i < this->listinbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listinbag(i));
  }

  // repeated .LegacyData listInDepot = 7;
  total_size += 1 * this->listindepot_size();
  for (int i = 0; i < this->listindepot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listindepot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLegacy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLegacy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLegacy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLegacy::MergeFrom(const GCLegacy& from) {
  GOOGLE_CHECK_NE(&from, this);
  listonbody_.MergeFrom(from.listonbody_);
  listinbag_.MergeFrom(from.listinbag_);
  listindepot_.MergeFrom(from.listindepot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_fightvalue()) {
      set_fightvalue(from.fightvalue());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_legacy()) {
      mutable_legacy()->::LegacyData::MergeFrom(from.legacy());
    }
    if (from.has_drawid()) {
      set_drawid(from.drawid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_havemoneynum()) {
      set_havemoneynum(from.havemoneynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLegacy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLegacy::CopyFrom(const GCLegacy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLegacy::IsInitialized() const {

  return true;
}

void GCLegacy::Swap(GCLegacy* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(fightvalue_, other->fightvalue_);
    listonbody_.Swap(&other->listonbody_);
    listinbag_.Swap(&other->listinbag_);
    std::swap(result_, other->result_);
    std::swap(legacy_, other->legacy_);
    listindepot_.Swap(&other->listindepot_);
    std::swap(drawid_, other->drawid_);
    std::swap(havemoneynum_, other->havemoneynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLegacy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLegacy_descriptor_;
  metadata.reflection = GCLegacy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLegacyBuyNum::kTypeFieldNumber;
#endif  // !_MSC_VER

CGLegacyBuyNum::CGLegacyBuyNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLegacyBuyNum)
}

void CGLegacyBuyNum::InitAsDefaultInstance() {
}

CGLegacyBuyNum::CGLegacyBuyNum(const CGLegacyBuyNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLegacyBuyNum)
}

void CGLegacyBuyNum::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLegacyBuyNum::~CGLegacyBuyNum() {
  // @@protoc_insertion_point(destructor:CGLegacyBuyNum)
  SharedDtor();
}

void CGLegacyBuyNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLegacyBuyNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLegacyBuyNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLegacyBuyNum_descriptor_;
}

const CGLegacyBuyNum& CGLegacyBuyNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LegacyMessage_2eproto();
  return *default_instance_;
}

CGLegacyBuyNum* CGLegacyBuyNum::default_instance_ = NULL;

CGLegacyBuyNum* CGLegacyBuyNum::New() const {
  return new CGLegacyBuyNum;
}

void CGLegacyBuyNum::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLegacyBuyNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLegacyBuyNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLegacyBuyNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLegacyBuyNum)
  return false;
#undef DO_
}

void CGLegacyBuyNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLegacyBuyNum)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLegacyBuyNum)
}

::google::protobuf::uint8* CGLegacyBuyNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLegacyBuyNum)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLegacyBuyNum)
  return target;
}

int CGLegacyBuyNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLegacyBuyNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLegacyBuyNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLegacyBuyNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLegacyBuyNum::MergeFrom(const CGLegacyBuyNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLegacyBuyNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLegacyBuyNum::CopyFrom(const CGLegacyBuyNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLegacyBuyNum::IsInitialized() const {

  return true;
}

void CGLegacyBuyNum::Swap(CGLegacyBuyNum* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLegacyBuyNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLegacyBuyNum_descriptor_;
  metadata.reflection = CGLegacyBuyNum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
