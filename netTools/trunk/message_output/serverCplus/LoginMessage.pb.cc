// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLoginBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLoginBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetRandName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetRandName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetRandNameBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetRandNameBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCreatePlayerOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCreatePlayerOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLoginGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLoginGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLoginGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLoginGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDeletePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDeletePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDeletePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDeletePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGForceOffLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGForceOffLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLCheckVilidCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLCheckVilidCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGCheckVilidCodeBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGCheckVilidCodeBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLLoginSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLLoginSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLPlayerOffLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLPlayerOffLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLBeforeLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLBeforeLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCBeforeLoginBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCBeforeLoginBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLChangePlayerLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLChangePlayerLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCChangePlayerBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCChangePlayerBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GLGetPlayerLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GLGetPlayerLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LGGetPlayerLoginInfoBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LGGetPlayerLoginInfoBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCPlayerLoginQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCPlayerLoginQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLPlayerCancelLoginQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLPlayerCancelLoginQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* LCPlayerCancelLoginQueueBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LCPlayerCancelLoginQueueBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCommonSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCommonSetting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginMessage_2eproto() {
  protobuf_AddDesc_LoginMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGLogin_descriptor_ = file->message_type(0);
  static const int CGLogin_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, authkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, customparam_),
  };
  CGLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLogin_descriptor_,
      CGLogin::default_instance_,
      CGLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLogin));
  PlayInfo_descriptor_ = file->message_type(1);
  static const int PlayInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, headicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, changeequipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, deleteflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, currsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, powereffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, awakeeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, gemeffect_),
  };
  PlayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayInfo_descriptor_,
      PlayInfo::default_instance_,
      PlayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayInfo));
  GCLoginBack_descriptor_ = file->message_type(2);
  static const int GCLoginBack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, currplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, playerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, eniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, queuesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, logintype_),
  };
  GCLoginBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLoginBack_descriptor_,
      GCLoginBack::default_instance_,
      GCLoginBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLoginBack));
  CGGetRandName_descriptor_ = file->message_type(3);
  static const int CGGetRandName_offsets_[1] = {
  };
  CGGetRandName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetRandName_descriptor_,
      CGGetRandName::default_instance_,
      CGGetRandName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRandName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRandName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetRandName));
  GCGetRandNameBack_descriptor_ = file->message_type(4);
  static const int GCGetRandNameBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRandNameBack, manname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRandNameBack, womanname_),
  };
  GCGetRandNameBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetRandNameBack_descriptor_,
      GCGetRandNameBack::default_instance_,
      GCGetRandNameBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRandNameBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetRandNameBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetRandNameBack));
  CGCreatePlayer_descriptor_ = file->message_type(5);
  static const int CGCreatePlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreatePlayer, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreatePlayer, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreatePlayer, sex_),
  };
  CGCreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCreatePlayer_descriptor_,
      CGCreatePlayer::default_instance_,
      CGCreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCreatePlayer));
  GCCreatePlayerOK_descriptor_ = file->message_type(6);
  static const int GCCreatePlayerOK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatePlayerOK, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatePlayerOK, newplayer_),
  };
  GCCreatePlayerOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCreatePlayerOK_descriptor_,
      GCCreatePlayerOK::default_instance_,
      GCCreatePlayerOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatePlayerOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCreatePlayerOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCreatePlayerOK));
  CGLoginGameServer_descriptor_ = file->message_type(7);
  static const int CGLoginGameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLoginGameServer, playerid_),
  };
  CGLoginGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLoginGameServer_descriptor_,
      CGLoginGameServer::default_instance_,
      CGLoginGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLoginGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLoginGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLoginGameServer));
  GCLoginGameServer_descriptor_ = file->message_type(8);
  static const int GCLoginGameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginGameServer, player_),
  };
  GCLoginGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLoginGameServer_descriptor_,
      GCLoginGameServer::default_instance_,
      GCLoginGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLoginGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLoginGameServer));
  CGDeletePlayer_descriptor_ = file->message_type(9);
  static const int CGDeletePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeletePlayer, playerid_),
  };
  CGDeletePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDeletePlayer_descriptor_,
      CGDeletePlayer::default_instance_,
      CGDeletePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeletePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDeletePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDeletePlayer));
  GCDeletePlayer_descriptor_ = file->message_type(10);
  static const int GCDeletePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeletePlayer, playerid_),
  };
  GCDeletePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDeletePlayer_descriptor_,
      GCDeletePlayer::default_instance_,
      GCDeletePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeletePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeletePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDeletePlayer));
  LGForceOffLine_descriptor_ = file->message_type(11);
  static const int LGForceOffLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGForceOffLine, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGForceOffLine, messageid_),
  };
  LGForceOffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGForceOffLine_descriptor_,
      LGForceOffLine::default_instance_,
      LGForceOffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGForceOffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGForceOffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGForceOffLine));
  GLCheckVilidCode_descriptor_ = file->message_type(12);
  static const int GLCheckVilidCode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLCheckVilidCode, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLCheckVilidCode, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLCheckVilidCode, platform_),
  };
  GLCheckVilidCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLCheckVilidCode_descriptor_,
      GLCheckVilidCode::default_instance_,
      GLCheckVilidCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLCheckVilidCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLCheckVilidCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLCheckVilidCode));
  LGCheckVilidCodeBack_descriptor_ = file->message_type(13);
  static const int LGCheckVilidCodeBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, platform_),
  };
  LGCheckVilidCodeBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGCheckVilidCodeBack_descriptor_,
      LGCheckVilidCodeBack::default_instance_,
      LGCheckVilidCodeBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGCheckVilidCodeBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGCheckVilidCodeBack));
  GLLoginSuccess_descriptor_ = file->message_type(14);
  static const int GLLoginSuccess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, onlinenum_),
  };
  GLLoginSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLLoginSuccess_descriptor_,
      GLLoginSuccess::default_instance_,
      GLLoginSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLLoginSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLLoginSuccess));
  GLPlayerOffLine_descriptor_ = file->message_type(15);
  static const int GLPlayerOffLine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerOffLine, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerOffLine, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerOffLine, onlinenum_),
  };
  GLPlayerOffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLPlayerOffLine_descriptor_,
      GLPlayerOffLine::default_instance_,
      GLPlayerOffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerOffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLPlayerOffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLPlayerOffLine));
  CLBeforeLogin_descriptor_ = file->message_type(16);
  static const int CLBeforeLogin_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, deviceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, authkey_),
  };
  CLBeforeLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLBeforeLogin_descriptor_,
      CLBeforeLogin::default_instance_,
      CLBeforeLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLBeforeLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLBeforeLogin));
  LCBeforeLoginBack_descriptor_ = file->message_type(17);
  static const int LCBeforeLoginBack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, authkey_),
  };
  LCBeforeLoginBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCBeforeLoginBack_descriptor_,
      LCBeforeLoginBack::default_instance_,
      LCBeforeLoginBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCBeforeLoginBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCBeforeLoginBack));
  CLChangePlayerLogin_descriptor_ = file->message_type(18);
  static const int CLChangePlayerLogin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, deviceinfo_),
  };
  CLChangePlayerLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLChangePlayerLogin_descriptor_,
      CLChangePlayerLogin::default_instance_,
      CLChangePlayerLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLChangePlayerLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLChangePlayerLogin));
  LCChangePlayerBack_descriptor_ = file->message_type(19);
  static const int LCChangePlayerBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, gameserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, serveraddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, port_),
  };
  LCChangePlayerBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCChangePlayerBack_descriptor_,
      LCChangePlayerBack::default_instance_,
      LCChangePlayerBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCChangePlayerBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCChangePlayerBack));
  GLGetPlayerLoginInfo_descriptor_ = file->message_type(20);
  static const int GLGetPlayerLoginInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, uid_),
  };
  GLGetPlayerLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GLGetPlayerLoginInfo_descriptor_,
      GLGetPlayerLoginInfo::default_instance_,
      GLGetPlayerLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GLGetPlayerLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GLGetPlayerLoginInfo));
  LGGetPlayerLoginInfoBack_descriptor_ = file->message_type(21);
  static const int LGGetPlayerLoginInfoBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, vilidcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, platform_),
  };
  LGGetPlayerLoginInfoBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LGGetPlayerLoginInfoBack_descriptor_,
      LGGetPlayerLoginInfoBack::default_instance_,
      LGGetPlayerLoginInfoBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LGGetPlayerLoginInfoBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LGGetPlayerLoginInfoBack));
  LCPlayerLoginQueue_descriptor_ = file->message_type(22);
  static const int LCPlayerLoginQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerLoginQueue, queuenum_),
  };
  LCPlayerLoginQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCPlayerLoginQueue_descriptor_,
      LCPlayerLoginQueue::default_instance_,
      LCPlayerLoginQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerLoginQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerLoginQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCPlayerLoginQueue));
  CLPlayerCancelLoginQueue_descriptor_ = file->message_type(23);
  static const int CLPlayerCancelLoginQueue_offsets_[1] = {
  };
  CLPlayerCancelLoginQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLPlayerCancelLoginQueue_descriptor_,
      CLPlayerCancelLoginQueue::default_instance_,
      CLPlayerCancelLoginQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLPlayerCancelLoginQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLPlayerCancelLoginQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLPlayerCancelLoginQueue));
  LCPlayerCancelLoginQueueBack_descriptor_ = file->message_type(24);
  static const int LCPlayerCancelLoginQueueBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerCancelLoginQueueBack, result_),
  };
  LCPlayerCancelLoginQueueBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LCPlayerCancelLoginQueueBack_descriptor_,
      LCPlayerCancelLoginQueueBack::default_instance_,
      LCPlayerCancelLoginQueueBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerCancelLoginQueueBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LCPlayerCancelLoginQueueBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LCPlayerCancelLoginQueueBack));
  GCCommonSetting_descriptor_ = file->message_type(25);
  static const int GCCommonSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonSetting, debugflag_),
  };
  GCCommonSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCommonSetting_descriptor_,
      GCCommonSetting::default_instance_,
      GCCommonSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCommonSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCommonSetting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLogin_descriptor_, &CGLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayInfo_descriptor_, &PlayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLoginBack_descriptor_, &GCLoginBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetRandName_descriptor_, &CGGetRandName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetRandNameBack_descriptor_, &GCGetRandNameBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCreatePlayer_descriptor_, &CGCreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCreatePlayerOK_descriptor_, &GCCreatePlayerOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLoginGameServer_descriptor_, &CGLoginGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLoginGameServer_descriptor_, &GCLoginGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDeletePlayer_descriptor_, &CGDeletePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDeletePlayer_descriptor_, &GCDeletePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGForceOffLine_descriptor_, &LGForceOffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLCheckVilidCode_descriptor_, &GLCheckVilidCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGCheckVilidCodeBack_descriptor_, &LGCheckVilidCodeBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLLoginSuccess_descriptor_, &GLLoginSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLPlayerOffLine_descriptor_, &GLPlayerOffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLBeforeLogin_descriptor_, &CLBeforeLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCBeforeLoginBack_descriptor_, &LCBeforeLoginBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLChangePlayerLogin_descriptor_, &CLChangePlayerLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCChangePlayerBack_descriptor_, &LCChangePlayerBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GLGetPlayerLoginInfo_descriptor_, &GLGetPlayerLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LGGetPlayerLoginInfoBack_descriptor_, &LGGetPlayerLoginInfoBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCPlayerLoginQueue_descriptor_, &LCPlayerLoginQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLPlayerCancelLoginQueue_descriptor_, &CLPlayerCancelLoginQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LCPlayerCancelLoginQueueBack_descriptor_, &LCPlayerCancelLoginQueueBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCommonSetting_descriptor_, &GCCommonSetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginMessage_2eproto() {
  delete CGLogin::default_instance_;
  delete CGLogin_reflection_;
  delete PlayInfo::default_instance_;
  delete PlayInfo_reflection_;
  delete GCLoginBack::default_instance_;
  delete GCLoginBack_reflection_;
  delete CGGetRandName::default_instance_;
  delete CGGetRandName_reflection_;
  delete GCGetRandNameBack::default_instance_;
  delete GCGetRandNameBack_reflection_;
  delete CGCreatePlayer::default_instance_;
  delete CGCreatePlayer_reflection_;
  delete GCCreatePlayerOK::default_instance_;
  delete GCCreatePlayerOK_reflection_;
  delete CGLoginGameServer::default_instance_;
  delete CGLoginGameServer_reflection_;
  delete GCLoginGameServer::default_instance_;
  delete GCLoginGameServer_reflection_;
  delete CGDeletePlayer::default_instance_;
  delete CGDeletePlayer_reflection_;
  delete GCDeletePlayer::default_instance_;
  delete GCDeletePlayer_reflection_;
  delete LGForceOffLine::default_instance_;
  delete LGForceOffLine_reflection_;
  delete GLCheckVilidCode::default_instance_;
  delete GLCheckVilidCode_reflection_;
  delete LGCheckVilidCodeBack::default_instance_;
  delete LGCheckVilidCodeBack_reflection_;
  delete GLLoginSuccess::default_instance_;
  delete GLLoginSuccess_reflection_;
  delete GLPlayerOffLine::default_instance_;
  delete GLPlayerOffLine_reflection_;
  delete CLBeforeLogin::default_instance_;
  delete CLBeforeLogin_reflection_;
  delete LCBeforeLoginBack::default_instance_;
  delete LCBeforeLoginBack_reflection_;
  delete CLChangePlayerLogin::default_instance_;
  delete CLChangePlayerLogin_reflection_;
  delete LCChangePlayerBack::default_instance_;
  delete LCChangePlayerBack_reflection_;
  delete GLGetPlayerLoginInfo::default_instance_;
  delete GLGetPlayerLoginInfo_reflection_;
  delete LGGetPlayerLoginInfoBack::default_instance_;
  delete LGGetPlayerLoginInfoBack_reflection_;
  delete LCPlayerLoginQueue::default_instance_;
  delete LCPlayerLoginQueue_reflection_;
  delete CLPlayerCancelLoginQueue::default_instance_;
  delete CLPlayerCancelLoginQueue_reflection_;
  delete LCPlayerCancelLoginQueueBack::default_instance_;
  delete LCPlayerCancelLoginQueueBack_reflection_;
  delete GCCommonSetting::default_instance_;
  delete GCCommonSetting_reflection_;
}

void protobuf_AddDesc_LoginMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022LoginMessage.proto\032\022InnerMessage.proto"
    "\"\231\001\n\007CGLogin\022\013\n\003uid\030\001 \001(\t\022\021\n\tvilidCode\030\002"
    " \001(\t\022\020\n\010platForm\030\003 \001(\t\022\021\n\taccountID\030\004 \001("
    "\003\022\017\n\007authKey\030\005 \001(\t\022\020\n\010serverId\030\006 \001(\005\022\021\n\t"
    "loginType\030\007 \001(\005\022\023\n\013customParam\030\010 \001(\t\"\223\002\n"
    "\010PlayInfo\022\020\n\010playerId\030\001 \001(\003\022\014\n\004name\030\002 \001("
    "\t\022\024\n\014professionId\030\003 \001(\005\022\013\n\003sex\030\004 \001(\005\022\020\n\010"
    "headicon\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022)\n\017changeE"
    "quipInfo\030\010 \001(\0132\020.ChangeEquipInfo\022\022\n\ndele"
    "teflag\030\t \001(\005\022\023\n\013currSceneId\030\n \001(\005\022\022\n\ncre"
    "ateTime\030\013 \001(\003\022\023\n\013powerEffect\030\014 \001(\005\022\023\n\013aw"
    "akeEffect\030\r \001(\005\022\021\n\tgemEffect\030\016 \001(\005\"\261\001\n\013G"
    "CLoginBack\022\014\n\004flag\030\001 \001(\005\022\024\n\014gameServerId"
    "\030\002 \001(\005\022\024\n\014currPlayerId\030\003 \001(\003\022\035\n\nplayerLi"
    "st\030\004 \003(\0132\t.PlayInfo\022\021\n\taccountID\030\005 \001(\003\022\020"
    "\n\010eniqueID\030\006 \001(\003\022\021\n\tqueueSize\030\007 \001(\005\022\021\n\tl"
    "oginType\030\010 \001(\005\"\017\n\rCGGetRandName\"7\n\021GCGet"
    "RandNameBack\022\017\n\007manname\030\007 \003(\t\022\021\n\twomanna"
    "me\030\010 \003(\t\"G\n\016CGCreatePlayer\022\024\n\014profession"
    "Id\030\001 \001(\005\022\022\n\nplayerName\030\002 \001(\t\022\013\n\003sex\030\003 \001("
    "\005\">\n\020GCCreatePlayerOK\022\014\n\004flag\030\001 \001(\005\022\034\n\tn"
    "ewPlayer\030\002 \001(\0132\t.PlayInfo\"%\n\021CGLoginGame"
    "Server\022\020\n\010playerId\030\001 \001(\003\"3\n\021GCLoginGameS"
    "erver\022\036\n\006player\030\001 \001(\0132\016.CharacterInfo\"\"\n"
    "\016CGDeletePlayer\022\020\n\010playerId\030\001 \001(\003\"\"\n\016GCD"
    "eletePlayer\022\020\n\010playerId\030\001 \001(\003\"5\n\016LGForce"
    "OffLine\022\020\n\010playerID\030\001 \001(\003\022\021\n\tmessageID\030\002"
    " \001(\005\"D\n\020GLCheckVilidCode\022\013\n\003uid\030\001 \001(\t\022\021\n"
    "\tvilidCode\030\002 \001(\t\022\020\n\010platForm\030\003 \001(\t\"}\n\024LG"
    "CheckVilidCodeBack\022\016\n\006result\030\001 \001(\005\022\021\n\tac"
    "countID\030\002 \001(\003\022\020\n\010playerID\030\003 \001(\003\022\013\n\003uid\030\004"
    " \001(\t\022\021\n\tvilidCode\030\005 \001(\t\022\020\n\010platForm\030\006 \001("
    "\t\"[\n\016GLLoginSuccess\022\020\n\010playerID\030\001 \001(\003\022\021\n"
    "\taccountID\030\002 \001(\003\022\021\n\tvilidCode\030\003 \001(\t\022\021\n\to"
    "nlineNum\030\004 \001(\005\"I\n\017GLPlayerOffLine\022\020\n\010pla"
    "yerID\030\001 \001(\003\022\021\n\taccountID\030\002 \001(\003\022\021\n\tonline"
    "Num\030\003 \001(\005\"\212\001\n\rCLBeforeLogin\022\013\n\003uid\030\001 \001(\t"
    "\022\021\n\tvilidCode\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\022\n\n"
    "deviceInfo\030\004 \001(\t\022\020\n\010platForm\030\005 \001(\t\022\021\n\tac"
    "countID\030\006 \001(\003\022\017\n\007authKey\030\007 \001(\t\"\212\001\n\021LCBef"
    "oreLoginBack\022\014\n\004flag\030\001 \001(\005\022\024\n\014gameServer"
    "Id\030\002 \001(\005\022\021\n\tvilidCode\030\003 \001(\t\022\014\n\004host\030\004 \001("
    "\t\022\014\n\004port\030\005 \001(\005\022\021\n\taccountID\030\006 \001(\003\022\017\n\007au"
    "thKey\030\007 \001(\t\"V\n\023CLChangePlayerLogin\022\r\n\005un"
    "ame\030\001 \001(\t\022\013\n\003pwd\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022"
    "\022\n\ndeviceInfo\030\004 \001(\t\"~\n\022LCChangePlayerBac"
    "k\022\014\n\004flag\030\001 \001(\005\022\024\n\014gameServerId\030\002 \001(\005\022\021\n"
    "\tvilidCode\030\003 \001(\t\022\025\n\rserverAddress\030\004 \001(\t\022"
    "\014\n\004host\030\005 \001(\t\022\014\n\004port\030\006 \001(\005\"[\n\024GLGetPlay"
    "erLoginInfo\022\021\n\tvilidCode\030\001 \001(\t\022\021\n\taccoun"
    "tID\030\002 \001(\003\022\020\n\010platForm\030\003 \001(\t\022\013\n\003uid\030\004 \001(\t"
    "\"\201\001\n\030LGGetPlayerLoginInfoBack\022\016\n\006result\030"
    "\001 \001(\005\022\021\n\taccountID\030\002 \001(\003\022\020\n\010playerID\030\003 \001"
    "(\003\022\013\n\003uid\030\004 \001(\t\022\021\n\tvilidCode\030\005 \001(\t\022\020\n\010pl"
    "atForm\030\006 \001(\t\"&\n\022LCPlayerLoginQueue\022\020\n\010qu"
    "eueNum\030\001 \001(\005\"\032\n\030CLPlayerCancelLoginQueue"
    "\".\n\034LCPlayerCancelLoginQueueBack\022\016\n\006resu"
    "lt\030\001 \001(\005\"$\n\017GCCommonSetting\022\021\n\tdebugFlag"
    "\030\001 \001(\005B\031\n\027com.mile.common.message", 2353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginMessage.proto", &protobuf_RegisterTypes);
  CGLogin::default_instance_ = new CGLogin();
  PlayInfo::default_instance_ = new PlayInfo();
  GCLoginBack::default_instance_ = new GCLoginBack();
  CGGetRandName::default_instance_ = new CGGetRandName();
  GCGetRandNameBack::default_instance_ = new GCGetRandNameBack();
  CGCreatePlayer::default_instance_ = new CGCreatePlayer();
  GCCreatePlayerOK::default_instance_ = new GCCreatePlayerOK();
  CGLoginGameServer::default_instance_ = new CGLoginGameServer();
  GCLoginGameServer::default_instance_ = new GCLoginGameServer();
  CGDeletePlayer::default_instance_ = new CGDeletePlayer();
  GCDeletePlayer::default_instance_ = new GCDeletePlayer();
  LGForceOffLine::default_instance_ = new LGForceOffLine();
  GLCheckVilidCode::default_instance_ = new GLCheckVilidCode();
  LGCheckVilidCodeBack::default_instance_ = new LGCheckVilidCodeBack();
  GLLoginSuccess::default_instance_ = new GLLoginSuccess();
  GLPlayerOffLine::default_instance_ = new GLPlayerOffLine();
  CLBeforeLogin::default_instance_ = new CLBeforeLogin();
  LCBeforeLoginBack::default_instance_ = new LCBeforeLoginBack();
  CLChangePlayerLogin::default_instance_ = new CLChangePlayerLogin();
  LCChangePlayerBack::default_instance_ = new LCChangePlayerBack();
  GLGetPlayerLoginInfo::default_instance_ = new GLGetPlayerLoginInfo();
  LGGetPlayerLoginInfoBack::default_instance_ = new LGGetPlayerLoginInfoBack();
  LCPlayerLoginQueue::default_instance_ = new LCPlayerLoginQueue();
  CLPlayerCancelLoginQueue::default_instance_ = new CLPlayerCancelLoginQueue();
  LCPlayerCancelLoginQueueBack::default_instance_ = new LCPlayerCancelLoginQueueBack();
  GCCommonSetting::default_instance_ = new GCCommonSetting();
  CGLogin::default_instance_->InitAsDefaultInstance();
  PlayInfo::default_instance_->InitAsDefaultInstance();
  GCLoginBack::default_instance_->InitAsDefaultInstance();
  CGGetRandName::default_instance_->InitAsDefaultInstance();
  GCGetRandNameBack::default_instance_->InitAsDefaultInstance();
  CGCreatePlayer::default_instance_->InitAsDefaultInstance();
  GCCreatePlayerOK::default_instance_->InitAsDefaultInstance();
  CGLoginGameServer::default_instance_->InitAsDefaultInstance();
  GCLoginGameServer::default_instance_->InitAsDefaultInstance();
  CGDeletePlayer::default_instance_->InitAsDefaultInstance();
  GCDeletePlayer::default_instance_->InitAsDefaultInstance();
  LGForceOffLine::default_instance_->InitAsDefaultInstance();
  GLCheckVilidCode::default_instance_->InitAsDefaultInstance();
  LGCheckVilidCodeBack::default_instance_->InitAsDefaultInstance();
  GLLoginSuccess::default_instance_->InitAsDefaultInstance();
  GLPlayerOffLine::default_instance_->InitAsDefaultInstance();
  CLBeforeLogin::default_instance_->InitAsDefaultInstance();
  LCBeforeLoginBack::default_instance_->InitAsDefaultInstance();
  CLChangePlayerLogin::default_instance_->InitAsDefaultInstance();
  LCChangePlayerBack::default_instance_->InitAsDefaultInstance();
  GLGetPlayerLoginInfo::default_instance_->InitAsDefaultInstance();
  LGGetPlayerLoginInfoBack::default_instance_->InitAsDefaultInstance();
  LCPlayerLoginQueue::default_instance_->InitAsDefaultInstance();
  CLPlayerCancelLoginQueue::default_instance_->InitAsDefaultInstance();
  LCPlayerCancelLoginQueueBack::default_instance_->InitAsDefaultInstance();
  GCCommonSetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginMessage_2eproto {
  StaticDescriptorInitializer_LoginMessage_2eproto() {
    protobuf_AddDesc_LoginMessage_2eproto();
  }
} static_descriptor_initializer_LoginMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGLogin::kUidFieldNumber;
const int CGLogin::kVilidCodeFieldNumber;
const int CGLogin::kPlatFormFieldNumber;
const int CGLogin::kAccountIDFieldNumber;
const int CGLogin::kAuthKeyFieldNumber;
const int CGLogin::kServerIdFieldNumber;
const int CGLogin::kLoginTypeFieldNumber;
const int CGLogin::kCustomParamFieldNumber;
#endif  // !_MSC_VER

CGLogin::CGLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLogin)
}

void CGLogin::InitAsDefaultInstance() {
}

CGLogin::CGLogin(const CGLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLogin)
}

void CGLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_LONGLONG(0);
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  logintype_ = 0;
  customparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLogin::~CGLogin() {
  // @@protoc_insertion_point(destructor:CGLogin)
  SharedDtor();
}

void CGLogin::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (customparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customparam_;
  }
  if (this != default_instance_) {
  }
}

void CGLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLogin_descriptor_;
}

const CGLogin& CGLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CGLogin* CGLogin::default_instance_ = NULL;

CGLogin* CGLogin::New() const {
  return new CGLogin;
}

void CGLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serverid_, logintype_);
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
    if (has_customparam()) {
      if (customparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        customparam_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 2;
      case 2: {
        if (tag == 18) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platForm;
        break;
      }

      // optional string platForm = 3;
      case 3: {
        if (tag == 26) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 4;
      case 4: {
        if (tag == 32) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_authKey;
        break;
      }

      // optional string authKey = 5;
      case 5: {
        if (tag == 42) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 6;
      case 6: {
        if (tag == 48) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_loginType;
        break;
      }

      // optional int32 loginType = 7;
      case 7: {
        if (tag == 56) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_customParam;
        break;
      }

      // optional string customParam = 8;
      case 8: {
        if (tag == 66) {
         parse_customParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->customparam().data(), this->customparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "customparam");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLogin)
  return false;
#undef DO_
}

void CGLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLogin)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vilidcode(), output);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // optional int64 accountID = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->accountid(), output);
  }

  // optional string authKey = 5;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->authkey(), output);
  }

  // optional int32 serverId = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->serverid(), output);
  }

  // optional int32 loginType = 7;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->logintype(), output);
  }

  // optional string customParam = 8;
  if (has_customparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customparam().data(), this->customparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customparam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->customparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLogin)
}

::google::protobuf::uint8* CGLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLogin)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vilidcode(), target);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional int64 accountID = 4;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->accountid(), target);
  }

  // optional string authKey = 5;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->authkey(), target);
  }

  // optional int32 serverId = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->serverid(), target);
  }

  // optional int32 loginType = 7;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->logintype(), target);
  }

  // optional string customParam = 8;
  if (has_customparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->customparam().data(), this->customparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "customparam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->customparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLogin)
  return target;
}

int CGLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string vilidCode = 2;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string platForm = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int64 accountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string authKey = 5;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional int32 serverId = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 loginType = 7;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

    // optional string customParam = 8;
    if (has_customparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLogin::MergeFrom(const CGLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_customparam()) {
      set_customparam(from.customparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLogin::CopyFrom(const CGLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLogin::IsInitialized() const {

  return true;
}

void CGLogin::Swap(CGLogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(platform_, other->platform_);
    std::swap(accountid_, other->accountid_);
    std::swap(authkey_, other->authkey_);
    std::swap(serverid_, other->serverid_);
    std::swap(logintype_, other->logintype_);
    std::swap(customparam_, other->customparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLogin_descriptor_;
  metadata.reflection = CGLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayInfo::kPlayerIdFieldNumber;
const int PlayInfo::kNameFieldNumber;
const int PlayInfo::kProfessionIdFieldNumber;
const int PlayInfo::kSexFieldNumber;
const int PlayInfo::kHeadiconFieldNumber;
const int PlayInfo::kLevelFieldNumber;
const int PlayInfo::kChangeEquipInfoFieldNumber;
const int PlayInfo::kDeleteflagFieldNumber;
const int PlayInfo::kCurrSceneIdFieldNumber;
const int PlayInfo::kCreateTimeFieldNumber;
const int PlayInfo::kPowerEffectFieldNumber;
const int PlayInfo::kAwakeEffectFieldNumber;
const int PlayInfo::kGemEffectFieldNumber;
#endif  // !_MSC_VER

PlayInfo::PlayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayInfo)
}

void PlayInfo::InitAsDefaultInstance() {
  changeequipinfo_ = const_cast< ::ChangeEquipInfo*>(&::ChangeEquipInfo::default_instance());
}

PlayInfo::PlayInfo(const PlayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayInfo)
}

void PlayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  professionid_ = 0;
  sex_ = 0;
  headicon_ = 0;
  level_ = 0;
  changeequipinfo_ = NULL;
  deleteflag_ = 0;
  currsceneid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  powereffect_ = 0;
  awakeeffect_ = 0;
  gemeffect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayInfo::~PlayInfo() {
  // @@protoc_insertion_point(destructor:PlayInfo)
  SharedDtor();
}

void PlayInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete changeequipinfo_;
  }
}

void PlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayInfo_descriptor_;
}

const PlayInfo& PlayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

PlayInfo* PlayInfo::default_instance_ = NULL;

PlayInfo* PlayInfo::New() const {
  return new PlayInfo;
}

void PlayInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlayInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(professionid_, level_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_changeequipinfo()) {
      if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
    }
    deleteflag_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(currsceneid_, gemeffect_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_professionId;
        break;
      }

      // optional int32 professionId = 3;
      case 3: {
        if (tag == 24) {
         parse_professionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_headicon;
        break;
      }

      // optional int32 headicon = 5;
      case 5: {
        if (tag == 40) {
         parse_headicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_changeEquipInfo;
        break;
      }

      // optional .ChangeEquipInfo changeEquipInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_changeEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeequipinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_deleteflag;
        break;
      }

      // optional int32 deleteflag = 9;
      case 9: {
        if (tag == 72) {
         parse_deleteflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deleteflag_)));
          set_has_deleteflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_currSceneId;
        break;
      }

      // optional int32 currSceneId = 10;
      case 10: {
        if (tag == 80) {
         parse_currSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currsceneid_)));
          set_has_currsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 11;
      case 11: {
        if (tag == 88) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_powerEffect;
        break;
      }

      // optional int32 powerEffect = 12;
      case 12: {
        if (tag == 96) {
         parse_powerEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powereffect_)));
          set_has_powereffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_awakeEffect;
        break;
      }

      // optional int32 awakeEffect = 13;
      case 13: {
        if (tag == 104) {
         parse_awakeEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakeeffect_)));
          set_has_awakeeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_gemEffect;
        break;
      }

      // optional int32 gemEffect = 14;
      case 14: {
        if (tag == 112) {
         parse_gemEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gemeffect_)));
          set_has_gemeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayInfo)
  return false;
#undef DO_
}

void PlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 professionId = 3;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->professionid(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int32 headicon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headicon(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 8;
  if (has_changeequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->changeequipinfo(), output);
  }

  // optional int32 deleteflag = 9;
  if (has_deleteflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->deleteflag(), output);
  }

  // optional int32 currSceneId = 10;
  if (has_currsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->currsceneid(), output);
  }

  // optional int64 createTime = 11;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->createtime(), output);
  }

  // optional int32 powerEffect = 12;
  if (has_powereffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->powereffect(), output);
  }

  // optional int32 awakeEffect = 13;
  if (has_awakeeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->awakeeffect(), output);
  }

  // optional int32 gemEffect = 14;
  if (has_gemeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gemeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PlayInfo)
}

::google::protobuf::uint8* PlayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 professionId = 3;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->professionid(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int32 headicon = 5;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headicon(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional .ChangeEquipInfo changeEquipInfo = 8;
  if (has_changeequipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->changeequipinfo(), target);
  }

  // optional int32 deleteflag = 9;
  if (has_deleteflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->deleteflag(), target);
  }

  // optional int32 currSceneId = 10;
  if (has_currsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->currsceneid(), target);
  }

  // optional int64 createTime = 11;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->createtime(), target);
  }

  // optional int32 powerEffect = 12;
  if (has_powereffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->powereffect(), target);
  }

  // optional int32 awakeEffect = 13;
  if (has_awakeeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->awakeeffect(), target);
  }

  // optional int32 gemEffect = 14;
  if (has_gemeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gemeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayInfo)
  return target;
}

int PlayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 professionId = 3;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 headicon = 5;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .ChangeEquipInfo changeEquipInfo = 8;
    if (has_changeequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeequipinfo());
    }

    // optional int32 deleteflag = 9;
    if (has_deleteflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deleteflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 currSceneId = 10;
    if (has_currsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currsceneid());
    }

    // optional int64 createTime = 11;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 powerEffect = 12;
    if (has_powereffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powereffect());
    }

    // optional int32 awakeEffect = 13;
    if (has_awakeeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakeeffect());
    }

    // optional int32 gemEffect = 14;
    if (has_gemeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gemeffect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayInfo::MergeFrom(const PlayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_changeequipinfo()) {
      mutable_changeequipinfo()->::ChangeEquipInfo::MergeFrom(from.changeequipinfo());
    }
    if (from.has_deleteflag()) {
      set_deleteflag(from.deleteflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currsceneid()) {
      set_currsceneid(from.currsceneid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_powereffect()) {
      set_powereffect(from.powereffect());
    }
    if (from.has_awakeeffect()) {
      set_awakeeffect(from.awakeeffect());
    }
    if (from.has_gemeffect()) {
      set_gemeffect(from.gemeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayInfo::CopyFrom(const PlayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayInfo::IsInitialized() const {

  return true;
}

void PlayInfo::Swap(PlayInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(professionid_, other->professionid_);
    std::swap(sex_, other->sex_);
    std::swap(headicon_, other->headicon_);
    std::swap(level_, other->level_);
    std::swap(changeequipinfo_, other->changeequipinfo_);
    std::swap(deleteflag_, other->deleteflag_);
    std::swap(currsceneid_, other->currsceneid_);
    std::swap(createtime_, other->createtime_);
    std::swap(powereffect_, other->powereffect_);
    std::swap(awakeeffect_, other->awakeeffect_);
    std::swap(gemeffect_, other->gemeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayInfo_descriptor_;
  metadata.reflection = PlayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLoginBack::kFlagFieldNumber;
const int GCLoginBack::kGameServerIdFieldNumber;
const int GCLoginBack::kCurrPlayerIdFieldNumber;
const int GCLoginBack::kPlayerListFieldNumber;
const int GCLoginBack::kAccountIDFieldNumber;
const int GCLoginBack::kEniqueIDFieldNumber;
const int GCLoginBack::kQueueSizeFieldNumber;
const int GCLoginBack::kLoginTypeFieldNumber;
#endif  // !_MSC_VER

GCLoginBack::GCLoginBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLoginBack)
}

void GCLoginBack::InitAsDefaultInstance() {
}

GCLoginBack::GCLoginBack(const GCLoginBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLoginBack)
}

void GCLoginBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  gameserverid_ = 0;
  currplayerid_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  eniqueid_ = GOOGLE_LONGLONG(0);
  queuesize_ = 0;
  logintype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLoginBack::~GCLoginBack() {
  // @@protoc_insertion_point(destructor:GCLoginBack)
  SharedDtor();
}

void GCLoginBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLoginBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLoginBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLoginBack_descriptor_;
}

const GCLoginBack& GCLoginBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCLoginBack* GCLoginBack::default_instance_ = NULL;

GCLoginBack* GCLoginBack::New() const {
  return new GCLoginBack;
}

void GCLoginBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCLoginBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(flag_, currplayerid_);
    ZR_(accountid_, logintype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLoginBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLoginBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameServerId;
        break;
      }

      // optional int32 gameServerId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameserverid_)));
          set_has_gameserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_currPlayerId;
        break;
      }

      // optional int64 currPlayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_currPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currplayerid_)));
          set_has_currplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerList;
        break;
      }

      // repeated .PlayInfo playerList = 4;
      case 4: {
        if (tag == 34) {
         parse_playerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_playerList;
        if (input->ExpectTag(40)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 5;
      case 5: {
        if (tag == 40) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_eniqueID;
        break;
      }

      // optional int64 eniqueID = 6;
      case 6: {
        if (tag == 48) {
         parse_eniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eniqueid_)));
          set_has_eniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_queueSize;
        break;
      }

      // optional int32 queueSize = 7;
      case 7: {
        if (tag == 56) {
         parse_queueSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuesize_)));
          set_has_queuesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_loginType;
        break;
      }

      // optional int32 loginType = 8;
      case 8: {
        if (tag == 64) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLoginBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLoginBack)
  return false;
#undef DO_
}

void GCLoginBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLoginBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameserverid(), output);
  }

  // optional int64 currPlayerId = 3;
  if (has_currplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currplayerid(), output);
  }

  // repeated .PlayInfo playerList = 4;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playerlist(i), output);
  }

  // optional int64 accountID = 5;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->accountid(), output);
  }

  // optional int64 eniqueID = 6;
  if (has_eniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->eniqueid(), output);
  }

  // optional int32 queueSize = 7;
  if (has_queuesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->queuesize(), output);
  }

  // optional int32 loginType = 8;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->logintype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLoginBack)
}

::google::protobuf::uint8* GCLoginBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLoginBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameserverid(), target);
  }

  // optional int64 currPlayerId = 3;
  if (has_currplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currplayerid(), target);
  }

  // repeated .PlayInfo playerList = 4;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerlist(i), target);
  }

  // optional int64 accountID = 5;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->accountid(), target);
  }

  // optional int64 eniqueID = 6;
  if (has_eniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->eniqueid(), target);
  }

  // optional int32 queueSize = 7;
  if (has_queuesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->queuesize(), target);
  }

  // optional int32 loginType = 8;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->logintype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLoginBack)
  return target;
}

int GCLoginBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 gameServerId = 2;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameserverid());
    }

    // optional int64 currPlayerId = 3;
    if (has_currplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currplayerid());
    }

    // optional int64 accountID = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int64 eniqueID = 6;
    if (has_eniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eniqueid());
    }

    // optional int32 queueSize = 7;
    if (has_queuesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuesize());
    }

    // optional int32 loginType = 8;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }

  }
  // repeated .PlayInfo playerList = 4;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLoginBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLoginBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLoginBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLoginBack::MergeFrom(const GCLoginBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_currplayerid()) {
      set_currplayerid(from.currplayerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_eniqueid()) {
      set_eniqueid(from.eniqueid());
    }
    if (from.has_queuesize()) {
      set_queuesize(from.queuesize());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLoginBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLoginBack::CopyFrom(const GCLoginBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoginBack::IsInitialized() const {

  return true;
}

void GCLoginBack::Swap(GCLoginBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(currplayerid_, other->currplayerid_);
    playerlist_.Swap(&other->playerlist_);
    std::swap(accountid_, other->accountid_);
    std::swap(eniqueid_, other->eniqueid_);
    std::swap(queuesize_, other->queuesize_);
    std::swap(logintype_, other->logintype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLoginBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLoginBack_descriptor_;
  metadata.reflection = GCLoginBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGGetRandName::CGGetRandName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetRandName)
}

void CGGetRandName::InitAsDefaultInstance() {
}

CGGetRandName::CGGetRandName(const CGGetRandName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetRandName)
}

void CGGetRandName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetRandName::~CGGetRandName() {
  // @@protoc_insertion_point(destructor:CGGetRandName)
  SharedDtor();
}

void CGGetRandName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetRandName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetRandName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetRandName_descriptor_;
}

const CGGetRandName& CGGetRandName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CGGetRandName* CGGetRandName::default_instance_ = NULL;

CGGetRandName* CGGetRandName::New() const {
  return new CGGetRandName;
}

void CGGetRandName::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetRandName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetRandName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetRandName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetRandName)
  return false;
#undef DO_
}

void CGGetRandName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetRandName)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetRandName)
}

::google::protobuf::uint8* CGGetRandName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetRandName)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetRandName)
  return target;
}

int CGGetRandName::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetRandName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetRandName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetRandName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetRandName::MergeFrom(const CGGetRandName& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetRandName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetRandName::CopyFrom(const CGGetRandName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetRandName::IsInitialized() const {

  return true;
}

void CGGetRandName::Swap(CGGetRandName* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetRandName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetRandName_descriptor_;
  metadata.reflection = CGGetRandName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetRandNameBack::kMannameFieldNumber;
const int GCGetRandNameBack::kWomannameFieldNumber;
#endif  // !_MSC_VER

GCGetRandNameBack::GCGetRandNameBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetRandNameBack)
}

void GCGetRandNameBack::InitAsDefaultInstance() {
}

GCGetRandNameBack::GCGetRandNameBack(const GCGetRandNameBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetRandNameBack)
}

void GCGetRandNameBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetRandNameBack::~GCGetRandNameBack() {
  // @@protoc_insertion_point(destructor:GCGetRandNameBack)
  SharedDtor();
}

void GCGetRandNameBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetRandNameBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetRandNameBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetRandNameBack_descriptor_;
}

const GCGetRandNameBack& GCGetRandNameBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCGetRandNameBack* GCGetRandNameBack::default_instance_ = NULL;

GCGetRandNameBack* GCGetRandNameBack::New() const {
  return new GCGetRandNameBack;
}

void GCGetRandNameBack::Clear() {
  manname_.Clear();
  womanname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetRandNameBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetRandNameBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string manname = 7;
      case 7: {
        if (tag == 58) {
         parse_manname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_manname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manname(this->manname_size() - 1).data(),
            this->manname(this->manname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_manname;
        if (input->ExpectTag(66)) goto parse_womanname;
        break;
      }

      // repeated string womanname = 8;
      case 8: {
        if (tag == 66) {
         parse_womanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_womanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->womanname(this->womanname_size() - 1).data(),
            this->womanname(this->womanname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "womanname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_womanname;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetRandNameBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetRandNameBack)
  return false;
#undef DO_
}

void GCGetRandNameBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetRandNameBack)
  // repeated string manname = 7;
  for (int i = 0; i < this->manname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->manname(i).data(), this->manname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "manname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->manname(i), output);
  }

  // repeated string womanname = 8;
  for (int i = 0; i < this->womanname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->womanname(i).data(), this->womanname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "womanname");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->womanname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetRandNameBack)
}

::google::protobuf::uint8* GCGetRandNameBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetRandNameBack)
  // repeated string manname = 7;
  for (int i = 0; i < this->manname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manname(i).data(), this->manname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->manname(i), target);
  }

  // repeated string womanname = 8;
  for (int i = 0; i < this->womanname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->womanname(i).data(), this->womanname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "womanname");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->womanname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetRandNameBack)
  return target;
}

int GCGetRandNameBack::ByteSize() const {
  int total_size = 0;

  // repeated string manname = 7;
  total_size += 1 * this->manname_size();
  for (int i = 0; i < this->manname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->manname(i));
  }

  // repeated string womanname = 8;
  total_size += 1 * this->womanname_size();
  for (int i = 0; i < this->womanname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->womanname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetRandNameBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetRandNameBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetRandNameBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetRandNameBack::MergeFrom(const GCGetRandNameBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  manname_.MergeFrom(from.manname_);
  womanname_.MergeFrom(from.womanname_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetRandNameBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetRandNameBack::CopyFrom(const GCGetRandNameBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetRandNameBack::IsInitialized() const {

  return true;
}

void GCGetRandNameBack::Swap(GCGetRandNameBack* other) {
  if (other != this) {
    manname_.Swap(&other->manname_);
    womanname_.Swap(&other->womanname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetRandNameBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetRandNameBack_descriptor_;
  metadata.reflection = GCGetRandNameBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCreatePlayer::kProfessionIdFieldNumber;
const int CGCreatePlayer::kPlayerNameFieldNumber;
const int CGCreatePlayer::kSexFieldNumber;
#endif  // !_MSC_VER

CGCreatePlayer::CGCreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCreatePlayer)
}

void CGCreatePlayer::InitAsDefaultInstance() {
}

CGCreatePlayer::CGCreatePlayer(const CGCreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCreatePlayer)
}

void CGCreatePlayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  professionid_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCreatePlayer::~CGCreatePlayer() {
  // @@protoc_insertion_point(destructor:CGCreatePlayer)
  SharedDtor();
}

void CGCreatePlayer::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void CGCreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCreatePlayer_descriptor_;
}

const CGCreatePlayer& CGCreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CGCreatePlayer* CGCreatePlayer::default_instance_ = NULL;

CGCreatePlayer* CGCreatePlayer::New() const {
  return new CGCreatePlayer;
}

void CGCreatePlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGCreatePlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(professionid_, sex_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCreatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 professionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCreatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCreatePlayer)
  return false;
#undef DO_
}

void CGCreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCreatePlayer)
  // optional int32 professionId = 1;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->professionid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCreatePlayer)
}

::google::protobuf::uint8* CGCreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCreatePlayer)
  // optional int32 professionId = 1;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->professionid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCreatePlayer)
  return target;
}

int CGCreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 professionId = 1;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCreatePlayer::MergeFrom(const CGCreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCreatePlayer::CopyFrom(const CGCreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCreatePlayer::IsInitialized() const {

  return true;
}

void CGCreatePlayer::Swap(CGCreatePlayer* other) {
  if (other != this) {
    std::swap(professionid_, other->professionid_);
    std::swap(playername_, other->playername_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCreatePlayer_descriptor_;
  metadata.reflection = CGCreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCreatePlayerOK::kFlagFieldNumber;
const int GCCreatePlayerOK::kNewPlayerFieldNumber;
#endif  // !_MSC_VER

GCCreatePlayerOK::GCCreatePlayerOK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCreatePlayerOK)
}

void GCCreatePlayerOK::InitAsDefaultInstance() {
  newplayer_ = const_cast< ::PlayInfo*>(&::PlayInfo::default_instance());
}

GCCreatePlayerOK::GCCreatePlayerOK(const GCCreatePlayerOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCreatePlayerOK)
}

void GCCreatePlayerOK::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  newplayer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCreatePlayerOK::~GCCreatePlayerOK() {
  // @@protoc_insertion_point(destructor:GCCreatePlayerOK)
  SharedDtor();
}

void GCCreatePlayerOK::SharedDtor() {
  if (this != default_instance_) {
    delete newplayer_;
  }
}

void GCCreatePlayerOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCreatePlayerOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCreatePlayerOK_descriptor_;
}

const GCCreatePlayerOK& GCCreatePlayerOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCCreatePlayerOK* GCCreatePlayerOK::default_instance_ = NULL;

GCCreatePlayerOK* GCCreatePlayerOK::New() const {
  return new GCCreatePlayerOK;
}

void GCCreatePlayerOK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_newplayer()) {
      if (newplayer_ != NULL) newplayer_->::PlayInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCreatePlayerOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCreatePlayerOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newPlayer;
        break;
      }

      // optional .PlayInfo newPlayer = 2;
      case 2: {
        if (tag == 18) {
         parse_newPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCreatePlayerOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCreatePlayerOK)
  return false;
#undef DO_
}

void GCCreatePlayerOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCreatePlayerOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .PlayInfo newPlayer = 2;
  if (has_newplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCreatePlayerOK)
}

::google::protobuf::uint8* GCCreatePlayerOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCreatePlayerOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .PlayInfo newPlayer = 2;
  if (has_newplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCreatePlayerOK)
  return target;
}

int GCCreatePlayerOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .PlayInfo newPlayer = 2;
    if (has_newplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCreatePlayerOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCreatePlayerOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCreatePlayerOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCreatePlayerOK::MergeFrom(const GCCreatePlayerOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_newplayer()) {
      mutable_newplayer()->::PlayInfo::MergeFrom(from.newplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCreatePlayerOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCreatePlayerOK::CopyFrom(const GCCreatePlayerOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCreatePlayerOK::IsInitialized() const {

  return true;
}

void GCCreatePlayerOK::Swap(GCCreatePlayerOK* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(newplayer_, other->newplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCreatePlayerOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCreatePlayerOK_descriptor_;
  metadata.reflection = GCCreatePlayerOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLoginGameServer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGLoginGameServer::CGLoginGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLoginGameServer)
}

void CGLoginGameServer::InitAsDefaultInstance() {
}

CGLoginGameServer::CGLoginGameServer(const CGLoginGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLoginGameServer)
}

void CGLoginGameServer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLoginGameServer::~CGLoginGameServer() {
  // @@protoc_insertion_point(destructor:CGLoginGameServer)
  SharedDtor();
}

void CGLoginGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLoginGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLoginGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLoginGameServer_descriptor_;
}

const CGLoginGameServer& CGLoginGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CGLoginGameServer* CGLoginGameServer::default_instance_ = NULL;

CGLoginGameServer* CGLoginGameServer::New() const {
  return new CGLoginGameServer;
}

void CGLoginGameServer::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLoginGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLoginGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLoginGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLoginGameServer)
  return false;
#undef DO_
}

void CGLoginGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLoginGameServer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLoginGameServer)
}

::google::protobuf::uint8* CGLoginGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLoginGameServer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLoginGameServer)
  return target;
}

int CGLoginGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLoginGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLoginGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLoginGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLoginGameServer::MergeFrom(const CGLoginGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLoginGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLoginGameServer::CopyFrom(const CGLoginGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLoginGameServer::IsInitialized() const {

  return true;
}

void CGLoginGameServer::Swap(CGLoginGameServer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLoginGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLoginGameServer_descriptor_;
  metadata.reflection = CGLoginGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLoginGameServer::kPlayerFieldNumber;
#endif  // !_MSC_VER

GCLoginGameServer::GCLoginGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLoginGameServer)
}

void GCLoginGameServer::InitAsDefaultInstance() {
  player_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCLoginGameServer::GCLoginGameServer(const GCLoginGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLoginGameServer)
}

void GCLoginGameServer::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLoginGameServer::~GCLoginGameServer() {
  // @@protoc_insertion_point(destructor:GCLoginGameServer)
  SharedDtor();
}

void GCLoginGameServer::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void GCLoginGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLoginGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLoginGameServer_descriptor_;
}

const GCLoginGameServer& GCLoginGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCLoginGameServer* GCLoginGameServer::default_instance_ = NULL;

GCLoginGameServer* GCLoginGameServer::New() const {
  return new GCLoginGameServer;
}

void GCLoginGameServer::Clear() {
  if (has_player()) {
    if (player_ != NULL) player_->::CharacterInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLoginGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLoginGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLoginGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLoginGameServer)
  return false;
#undef DO_
}

void GCLoginGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLoginGameServer)
  // optional .CharacterInfo player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLoginGameServer)
}

::google::protobuf::uint8* GCLoginGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLoginGameServer)
  // optional .CharacterInfo player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLoginGameServer)
  return target;
}

int GCLoginGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLoginGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLoginGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLoginGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLoginGameServer::MergeFrom(const GCLoginGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::CharacterInfo::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLoginGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLoginGameServer::CopyFrom(const GCLoginGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLoginGameServer::IsInitialized() const {

  return true;
}

void GCLoginGameServer::Swap(GCLoginGameServer* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLoginGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLoginGameServer_descriptor_;
  metadata.reflection = GCLoginGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDeletePlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

CGDeletePlayer::CGDeletePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDeletePlayer)
}

void CGDeletePlayer::InitAsDefaultInstance() {
}

CGDeletePlayer::CGDeletePlayer(const CGDeletePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDeletePlayer)
}

void CGDeletePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDeletePlayer::~CGDeletePlayer() {
  // @@protoc_insertion_point(destructor:CGDeletePlayer)
  SharedDtor();
}

void CGDeletePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDeletePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDeletePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDeletePlayer_descriptor_;
}

const CGDeletePlayer& CGDeletePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CGDeletePlayer* CGDeletePlayer::default_instance_ = NULL;

CGDeletePlayer* CGDeletePlayer::New() const {
  return new CGDeletePlayer;
}

void CGDeletePlayer::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDeletePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDeletePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDeletePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDeletePlayer)
  return false;
#undef DO_
}

void CGDeletePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDeletePlayer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDeletePlayer)
}

::google::protobuf::uint8* CGDeletePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDeletePlayer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDeletePlayer)
  return target;
}

int CGDeletePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDeletePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDeletePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDeletePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDeletePlayer::MergeFrom(const CGDeletePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDeletePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDeletePlayer::CopyFrom(const CGDeletePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDeletePlayer::IsInitialized() const {

  return true;
}

void CGDeletePlayer::Swap(CGDeletePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDeletePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDeletePlayer_descriptor_;
  metadata.reflection = CGDeletePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDeletePlayer::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCDeletePlayer::GCDeletePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDeletePlayer)
}

void GCDeletePlayer::InitAsDefaultInstance() {
}

GCDeletePlayer::GCDeletePlayer(const GCDeletePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDeletePlayer)
}

void GCDeletePlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDeletePlayer::~GCDeletePlayer() {
  // @@protoc_insertion_point(destructor:GCDeletePlayer)
  SharedDtor();
}

void GCDeletePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDeletePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDeletePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDeletePlayer_descriptor_;
}

const GCDeletePlayer& GCDeletePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCDeletePlayer* GCDeletePlayer::default_instance_ = NULL;

GCDeletePlayer* GCDeletePlayer::New() const {
  return new GCDeletePlayer;
}

void GCDeletePlayer::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDeletePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDeletePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDeletePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDeletePlayer)
  return false;
#undef DO_
}

void GCDeletePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDeletePlayer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDeletePlayer)
}

::google::protobuf::uint8* GCDeletePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDeletePlayer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDeletePlayer)
  return target;
}

int GCDeletePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDeletePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDeletePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDeletePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDeletePlayer::MergeFrom(const GCDeletePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDeletePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDeletePlayer::CopyFrom(const GCDeletePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeletePlayer::IsInitialized() const {

  return true;
}

void GCDeletePlayer::Swap(GCDeletePlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDeletePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDeletePlayer_descriptor_;
  metadata.reflection = GCDeletePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGForceOffLine::kPlayerIDFieldNumber;
const int LGForceOffLine::kMessageIDFieldNumber;
#endif  // !_MSC_VER

LGForceOffLine::LGForceOffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LGForceOffLine)
}

void LGForceOffLine::InitAsDefaultInstance() {
}

LGForceOffLine::LGForceOffLine(const LGForceOffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LGForceOffLine)
}

void LGForceOffLine::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  messageid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGForceOffLine::~LGForceOffLine() {
  // @@protoc_insertion_point(destructor:LGForceOffLine)
  SharedDtor();
}

void LGForceOffLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LGForceOffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGForceOffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGForceOffLine_descriptor_;
}

const LGForceOffLine& LGForceOffLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LGForceOffLine* LGForceOffLine::default_instance_ = NULL;

LGForceOffLine* LGForceOffLine::New() const {
  return new LGForceOffLine;
}

void LGForceOffLine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LGForceOffLine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, messageid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGForceOffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LGForceOffLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // optional int32 messageID = 2;
      case 2: {
        if (tag == 16) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LGForceOffLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LGForceOffLine)
  return false;
#undef DO_
}

void LGForceOffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LGForceOffLine)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LGForceOffLine)
}

::google::protobuf::uint8* LGForceOffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LGForceOffLine)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LGForceOffLine)
  return target;
}

int LGForceOffLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGForceOffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGForceOffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGForceOffLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGForceOffLine::MergeFrom(const LGForceOffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGForceOffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGForceOffLine::CopyFrom(const LGForceOffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGForceOffLine::IsInitialized() const {

  return true;
}

void LGForceOffLine::Swap(LGForceOffLine* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(messageid_, other->messageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGForceOffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGForceOffLine_descriptor_;
  metadata.reflection = LGForceOffLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLCheckVilidCode::kUidFieldNumber;
const int GLCheckVilidCode::kVilidCodeFieldNumber;
const int GLCheckVilidCode::kPlatFormFieldNumber;
#endif  // !_MSC_VER

GLCheckVilidCode::GLCheckVilidCode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GLCheckVilidCode)
}

void GLCheckVilidCode::InitAsDefaultInstance() {
}

GLCheckVilidCode::GLCheckVilidCode(const GLCheckVilidCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GLCheckVilidCode)
}

void GLCheckVilidCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLCheckVilidCode::~GLCheckVilidCode() {
  // @@protoc_insertion_point(destructor:GLCheckVilidCode)
  SharedDtor();
}

void GLCheckVilidCode::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void GLCheckVilidCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLCheckVilidCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLCheckVilidCode_descriptor_;
}

const GLCheckVilidCode& GLCheckVilidCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GLCheckVilidCode* GLCheckVilidCode::default_instance_ = NULL;

GLCheckVilidCode* GLCheckVilidCode::New() const {
  return new GLCheckVilidCode;
}

void GLCheckVilidCode::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLCheckVilidCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GLCheckVilidCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 2;
      case 2: {
        if (tag == 18) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platForm;
        break;
      }

      // optional string platForm = 3;
      case 3: {
        if (tag == 26) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GLCheckVilidCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GLCheckVilidCode)
  return false;
#undef DO_
}

void GLCheckVilidCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GLCheckVilidCode)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vilidcode(), output);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GLCheckVilidCode)
}

::google::protobuf::uint8* GLCheckVilidCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GLCheckVilidCode)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vilidcode(), target);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GLCheckVilidCode)
  return target;
}

int GLCheckVilidCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string vilidCode = 2;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string platForm = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLCheckVilidCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLCheckVilidCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLCheckVilidCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLCheckVilidCode::MergeFrom(const GLCheckVilidCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLCheckVilidCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLCheckVilidCode::CopyFrom(const GLCheckVilidCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLCheckVilidCode::IsInitialized() const {

  return true;
}

void GLCheckVilidCode::Swap(GLCheckVilidCode* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLCheckVilidCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLCheckVilidCode_descriptor_;
  metadata.reflection = GLCheckVilidCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGCheckVilidCodeBack::kResultFieldNumber;
const int LGCheckVilidCodeBack::kAccountIDFieldNumber;
const int LGCheckVilidCodeBack::kPlayerIDFieldNumber;
const int LGCheckVilidCodeBack::kUidFieldNumber;
const int LGCheckVilidCodeBack::kVilidCodeFieldNumber;
const int LGCheckVilidCodeBack::kPlatFormFieldNumber;
#endif  // !_MSC_VER

LGCheckVilidCodeBack::LGCheckVilidCodeBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LGCheckVilidCodeBack)
}

void LGCheckVilidCodeBack::InitAsDefaultInstance() {
}

LGCheckVilidCodeBack::LGCheckVilidCodeBack(const LGCheckVilidCodeBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LGCheckVilidCodeBack)
}

void LGCheckVilidCodeBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  playerid_ = GOOGLE_LONGLONG(0);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGCheckVilidCodeBack::~LGCheckVilidCodeBack() {
  // @@protoc_insertion_point(destructor:LGCheckVilidCodeBack)
  SharedDtor();
}

void LGCheckVilidCodeBack::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void LGCheckVilidCodeBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGCheckVilidCodeBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGCheckVilidCodeBack_descriptor_;
}

const LGCheckVilidCodeBack& LGCheckVilidCodeBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LGCheckVilidCodeBack* LGCheckVilidCodeBack::default_instance_ = NULL;

LGCheckVilidCodeBack* LGCheckVilidCodeBack::New() const {
  return new LGCheckVilidCodeBack;
}

void LGCheckVilidCodeBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LGCheckVilidCodeBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(accountid_, playerid_);
    result_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGCheckVilidCodeBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LGCheckVilidCodeBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 3;
      case 3: {
        if (tag == 24) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 5;
      case 5: {
        if (tag == 42) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_platForm;
        break;
      }

      // optional string platForm = 6;
      case 6: {
        if (tag == 50) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LGCheckVilidCodeBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LGCheckVilidCodeBack)
  return false;
#undef DO_
}

void LGCheckVilidCodeBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LGCheckVilidCodeBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional int64 playerID = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vilidcode(), output);
  }

  // optional string platForm = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LGCheckVilidCodeBack)
}

::google::protobuf::uint8* LGCheckVilidCodeBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LGCheckVilidCodeBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional int64 playerID = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vilidcode(), target);
  }

  // optional string platForm = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LGCheckVilidCodeBack)
  return target;
}

int LGCheckVilidCodeBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int64 playerID = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string vilidCode = 5;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string platForm = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGCheckVilidCodeBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGCheckVilidCodeBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGCheckVilidCodeBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGCheckVilidCodeBack::MergeFrom(const LGCheckVilidCodeBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGCheckVilidCodeBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGCheckVilidCodeBack::CopyFrom(const LGCheckVilidCodeBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGCheckVilidCodeBack::IsInitialized() const {

  return true;
}

void LGCheckVilidCodeBack::Swap(LGCheckVilidCodeBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(uid_, other->uid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGCheckVilidCodeBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGCheckVilidCodeBack_descriptor_;
  metadata.reflection = LGCheckVilidCodeBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLLoginSuccess::kPlayerIDFieldNumber;
const int GLLoginSuccess::kAccountIDFieldNumber;
const int GLLoginSuccess::kVilidCodeFieldNumber;
const int GLLoginSuccess::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

GLLoginSuccess::GLLoginSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GLLoginSuccess)
}

void GLLoginSuccess::InitAsDefaultInstance() {
}

GLLoginSuccess::GLLoginSuccess(const GLLoginSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GLLoginSuccess)
}

void GLLoginSuccess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLLoginSuccess::~GLLoginSuccess() {
  // @@protoc_insertion_point(destructor:GLLoginSuccess)
  SharedDtor();
}

void GLLoginSuccess::SharedDtor() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (this != default_instance_) {
  }
}

void GLLoginSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLLoginSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLLoginSuccess_descriptor_;
}

const GLLoginSuccess& GLLoginSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GLLoginSuccess* GLLoginSuccess::default_instance_ = NULL;

GLLoginSuccess* GLLoginSuccess::New() const {
  return new GLLoginSuccess;
}

void GLLoginSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GLLoginSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(playerid_, accountid_);
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    onlinenum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLLoginSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GLLoginSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 3;
      case 3: {
        if (tag == 26) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_onlineNum;
        break;
      }

      // optional int32 onlineNum = 4;
      case 4: {
        if (tag == 32) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GLLoginSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GLLoginSuccess)
  return false;
#undef DO_
}

void GLLoginSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GLLoginSuccess)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vilidcode(), output);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GLLoginSuccess)
}

::google::protobuf::uint8* GLLoginSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GLLoginSuccess)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vilidcode(), target);
  }

  // optional int32 onlineNum = 4;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GLLoginSuccess)
  return target;
}

int GLLoginSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string vilidCode = 3;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional int32 onlineNum = 4;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLLoginSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLLoginSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLLoginSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLLoginSuccess::MergeFrom(const GLLoginSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLLoginSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLLoginSuccess::CopyFrom(const GLLoginSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLLoginSuccess::IsInitialized() const {

  return true;
}

void GLLoginSuccess::Swap(GLLoginSuccess* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLLoginSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLLoginSuccess_descriptor_;
  metadata.reflection = GLLoginSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLPlayerOffLine::kPlayerIDFieldNumber;
const int GLPlayerOffLine::kAccountIDFieldNumber;
const int GLPlayerOffLine::kOnlineNumFieldNumber;
#endif  // !_MSC_VER

GLPlayerOffLine::GLPlayerOffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GLPlayerOffLine)
}

void GLPlayerOffLine::InitAsDefaultInstance() {
}

GLPlayerOffLine::GLPlayerOffLine(const GLPlayerOffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GLPlayerOffLine)
}

void GLPlayerOffLine::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  onlinenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLPlayerOffLine::~GLPlayerOffLine() {
  // @@protoc_insertion_point(destructor:GLPlayerOffLine)
  SharedDtor();
}

void GLPlayerOffLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GLPlayerOffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLPlayerOffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLPlayerOffLine_descriptor_;
}

const GLPlayerOffLine& GLPlayerOffLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GLPlayerOffLine* GLPlayerOffLine::default_instance_ = NULL;

GLPlayerOffLine* GLPlayerOffLine::New() const {
  return new GLPlayerOffLine;
}

void GLPlayerOffLine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GLPlayerOffLine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, onlinenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLPlayerOffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GLPlayerOffLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlineNum;
        break;
      }

      // optional int32 onlineNum = 3;
      case 3: {
        if (tag == 24) {
         parse_onlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinenum_)));
          set_has_onlinenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GLPlayerOffLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GLPlayerOffLine)
  return false;
#undef DO_
}

void GLPlayerOffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GLPlayerOffLine)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional int32 onlineNum = 3;
  if (has_onlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->onlinenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GLPlayerOffLine)
}

::google::protobuf::uint8* GLPlayerOffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GLPlayerOffLine)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional int32 onlineNum = 3;
  if (has_onlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->onlinenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GLPlayerOffLine)
  return target;
}

int GLPlayerOffLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int32 onlineNum = 3;
    if (has_onlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLPlayerOffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLPlayerOffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLPlayerOffLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLPlayerOffLine::MergeFrom(const GLPlayerOffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_onlinenum()) {
      set_onlinenum(from.onlinenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLPlayerOffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLPlayerOffLine::CopyFrom(const GLPlayerOffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLPlayerOffLine::IsInitialized() const {

  return true;
}

void GLPlayerOffLine::Swap(GLPlayerOffLine* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(onlinenum_, other->onlinenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLPlayerOffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLPlayerOffLine_descriptor_;
  metadata.reflection = GLPlayerOffLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLBeforeLogin::kUidFieldNumber;
const int CLBeforeLogin::kVilidCodeFieldNumber;
const int CLBeforeLogin::kVersionFieldNumber;
const int CLBeforeLogin::kDeviceInfoFieldNumber;
const int CLBeforeLogin::kPlatFormFieldNumber;
const int CLBeforeLogin::kAccountIDFieldNumber;
const int CLBeforeLogin::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

CLBeforeLogin::CLBeforeLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLBeforeLogin)
}

void CLBeforeLogin::InitAsDefaultInstance() {
}

CLBeforeLogin::CLBeforeLogin(const CLBeforeLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLBeforeLogin)
}

void CLBeforeLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_LONGLONG(0);
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLBeforeLogin::~CLBeforeLogin() {
  // @@protoc_insertion_point(destructor:CLBeforeLogin)
  SharedDtor();
}

void CLBeforeLogin::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceinfo_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void CLBeforeLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLBeforeLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLBeforeLogin_descriptor_;
}

const CLBeforeLogin& CLBeforeLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CLBeforeLogin* CLBeforeLogin::default_instance_ = NULL;

CLBeforeLogin* CLBeforeLogin::New() const {
  return new CLBeforeLogin;
}

void CLBeforeLogin::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_deviceinfo()) {
      if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceinfo_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLBeforeLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLBeforeLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 2;
      case 2: {
        if (tag == 18) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceInfo;
        break;
      }

      // optional string deviceInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceinfo().data(), this->deviceinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_platForm;
        break;
      }

      // optional string platForm = 5;
      case 5: {
        if (tag == 42) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 6;
      case 6: {
        if (tag == 48) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_authKey;
        break;
      }

      // optional string authKey = 7;
      case 7: {
        if (tag == 58) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLBeforeLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLBeforeLogin)
  return false;
#undef DO_
}

void CLBeforeLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLBeforeLogin)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uid(), output);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vilidcode(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string deviceInfo = 4;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceinfo(), output);
  }

  // optional string platForm = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->platform(), output);
  }

  // optional int64 accountID = 6;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->accountid(), output);
  }

  // optional string authKey = 7;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLBeforeLogin)
}

::google::protobuf::uint8* CLBeforeLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLBeforeLogin)
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // optional string vilidCode = 2;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vilidcode(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string deviceInfo = 4;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceinfo(), target);
  }

  // optional string platForm = 5;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->platform(), target);
  }

  // optional int64 accountID = 6;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->accountid(), target);
  }

  // optional string authKey = 7;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLBeforeLogin)
  return target;
}

int CLBeforeLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string vilidCode = 2;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string deviceInfo = 4;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfo());
    }

    // optional string platForm = 5;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int64 accountID = 6;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string authKey = 7;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLBeforeLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLBeforeLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLBeforeLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLBeforeLogin::MergeFrom(const CLBeforeLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_deviceinfo()) {
      set_deviceinfo(from.deviceinfo());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLBeforeLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLBeforeLogin::CopyFrom(const CLBeforeLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLBeforeLogin::IsInitialized() const {

  return true;
}

void CLBeforeLogin::Swap(CLBeforeLogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(version_, other->version_);
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(platform_, other->platform_);
    std::swap(accountid_, other->accountid_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLBeforeLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLBeforeLogin_descriptor_;
  metadata.reflection = CLBeforeLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCBeforeLoginBack::kFlagFieldNumber;
const int LCBeforeLoginBack::kGameServerIdFieldNumber;
const int LCBeforeLoginBack::kVilidCodeFieldNumber;
const int LCBeforeLoginBack::kHostFieldNumber;
const int LCBeforeLoginBack::kPortFieldNumber;
const int LCBeforeLoginBack::kAccountIDFieldNumber;
const int LCBeforeLoginBack::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

LCBeforeLoginBack::LCBeforeLoginBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LCBeforeLoginBack)
}

void LCBeforeLoginBack::InitAsDefaultInstance() {
}

LCBeforeLoginBack::LCBeforeLoginBack(const LCBeforeLoginBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LCBeforeLoginBack)
}

void LCBeforeLoginBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  gameserverid_ = 0;
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCBeforeLoginBack::~LCBeforeLoginBack() {
  // @@protoc_insertion_point(destructor:LCBeforeLoginBack)
  SharedDtor();
}

void LCBeforeLoginBack::SharedDtor() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void LCBeforeLoginBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCBeforeLoginBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCBeforeLoginBack_descriptor_;
}

const LCBeforeLoginBack& LCBeforeLoginBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LCBeforeLoginBack* LCBeforeLoginBack::default_instance_ = NULL;

LCBeforeLoginBack* LCBeforeLoginBack::New() const {
  return new LCBeforeLoginBack;
}

void LCBeforeLoginBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LCBeforeLoginBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(flag_, gameserverid_);
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    port_ = 0;
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCBeforeLoginBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LCBeforeLoginBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameServerId;
        break;
      }

      // optional int32 gameServerId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameserverid_)));
          set_has_gameserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 3;
      case 3: {
        if (tag == 26) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_host;
        break;
      }

      // optional string host = 4;
      case 4: {
        if (tag == 34) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 6;
      case 6: {
        if (tag == 48) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_authKey;
        break;
      }

      // optional string authKey = 7;
      case 7: {
        if (tag == 58) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LCBeforeLoginBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LCBeforeLoginBack)
  return false;
#undef DO_
}

void LCBeforeLoginBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LCBeforeLoginBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameserverid(), output);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vilidcode(), output);
  }

  // optional string host = 4;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->host(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional int64 accountID = 6;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->accountid(), output);
  }

  // optional string authKey = 7;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LCBeforeLoginBack)
}

::google::protobuf::uint8* LCBeforeLoginBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LCBeforeLoginBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameserverid(), target);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vilidcode(), target);
  }

  // optional string host = 4;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->host(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional int64 accountID = 6;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->accountid(), target);
  }

  // optional string authKey = 7;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LCBeforeLoginBack)
  return target;
}

int LCBeforeLoginBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 gameServerId = 2;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameserverid());
    }

    // optional string vilidCode = 3;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string host = 4;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int64 accountID = 6;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string authKey = 7;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCBeforeLoginBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCBeforeLoginBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCBeforeLoginBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCBeforeLoginBack::MergeFrom(const LCBeforeLoginBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCBeforeLoginBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCBeforeLoginBack::CopyFrom(const LCBeforeLoginBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCBeforeLoginBack::IsInitialized() const {

  return true;
}

void LCBeforeLoginBack::Swap(LCBeforeLoginBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(accountid_, other->accountid_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCBeforeLoginBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCBeforeLoginBack_descriptor_;
  metadata.reflection = LCBeforeLoginBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLChangePlayerLogin::kUnameFieldNumber;
const int CLChangePlayerLogin::kPwdFieldNumber;
const int CLChangePlayerLogin::kVersionFieldNumber;
const int CLChangePlayerLogin::kDeviceInfoFieldNumber;
#endif  // !_MSC_VER

CLChangePlayerLogin::CLChangePlayerLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLChangePlayerLogin)
}

void CLChangePlayerLogin::InitAsDefaultInstance() {
}

CLChangePlayerLogin::CLChangePlayerLogin(const CLChangePlayerLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLChangePlayerLogin)
}

void CLChangePlayerLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLChangePlayerLogin::~CLChangePlayerLogin() {
  // @@protoc_insertion_point(destructor:CLChangePlayerLogin)
  SharedDtor();
}

void CLChangePlayerLogin::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceinfo_;
  }
  if (this != default_instance_) {
  }
}

void CLChangePlayerLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLChangePlayerLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLChangePlayerLogin_descriptor_;
}

const CLChangePlayerLogin& CLChangePlayerLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CLChangePlayerLogin* CLChangePlayerLogin::default_instance_ = NULL;

CLChangePlayerLogin* CLChangePlayerLogin::New() const {
  return new CLChangePlayerLogin;
}

void CLChangePlayerLogin::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pwd_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_deviceinfo()) {
      if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLChangePlayerLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLChangePlayerLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // optional string pwd = 2;
      case 2: {
        if (tag == 18) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deviceInfo;
        break;
      }

      // optional string deviceInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceinfo().data(), this->deviceinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CLChangePlayerLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLChangePlayerLogin)
  return false;
#undef DO_
}

void CLChangePlayerLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLChangePlayerLogin)
  // optional string uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pwd(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string deviceInfo = 4;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLChangePlayerLogin)
}

::google::protobuf::uint8* CLChangePlayerLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLChangePlayerLogin)
  // optional string uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string deviceInfo = 4;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLChangePlayerLogin)
  return target;
}

int CLChangePlayerLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string deviceInfo = 4;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLChangePlayerLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLChangePlayerLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLChangePlayerLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLChangePlayerLogin::MergeFrom(const CLChangePlayerLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_deviceinfo()) {
      set_deviceinfo(from.deviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLChangePlayerLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLChangePlayerLogin::CopyFrom(const CLChangePlayerLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLChangePlayerLogin::IsInitialized() const {

  return true;
}

void CLChangePlayerLogin::Swap(CLChangePlayerLogin* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(pwd_, other->pwd_);
    std::swap(version_, other->version_);
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLChangePlayerLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLChangePlayerLogin_descriptor_;
  metadata.reflection = CLChangePlayerLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCChangePlayerBack::kFlagFieldNumber;
const int LCChangePlayerBack::kGameServerIdFieldNumber;
const int LCChangePlayerBack::kVilidCodeFieldNumber;
const int LCChangePlayerBack::kServerAddressFieldNumber;
const int LCChangePlayerBack::kHostFieldNumber;
const int LCChangePlayerBack::kPortFieldNumber;
#endif  // !_MSC_VER

LCChangePlayerBack::LCChangePlayerBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LCChangePlayerBack)
}

void LCChangePlayerBack::InitAsDefaultInstance() {
}

LCChangePlayerBack::LCChangePlayerBack(const LCChangePlayerBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LCChangePlayerBack)
}

void LCChangePlayerBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  gameserverid_ = 0;
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serveraddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCChangePlayerBack::~LCChangePlayerBack() {
  // @@protoc_insertion_point(destructor:LCChangePlayerBack)
  SharedDtor();
}

void LCChangePlayerBack::SharedDtor() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (serveraddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serveraddress_;
  }
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void LCChangePlayerBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCChangePlayerBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCChangePlayerBack_descriptor_;
}

const LCChangePlayerBack& LCChangePlayerBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LCChangePlayerBack* LCChangePlayerBack::default_instance_ = NULL;

LCChangePlayerBack* LCChangePlayerBack::New() const {
  return new LCChangePlayerBack;
}

void LCChangePlayerBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LCChangePlayerBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(flag_, gameserverid_);
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_serveraddress()) {
      if (serveraddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serveraddress_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    port_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCChangePlayerBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LCChangePlayerBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gameServerId;
        break;
      }

      // optional int32 gameServerId = 2;
      case 2: {
        if (tag == 16) {
         parse_gameServerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameserverid_)));
          set_has_gameserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 3;
      case 3: {
        if (tag == 26) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_serverAddress;
        break;
      }

      // optional string serverAddress = 4;
      case 4: {
        if (tag == 34) {
         parse_serverAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveraddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serveraddress().data(), this->serveraddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serveraddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional string host = 5;
      case 5: {
        if (tag == 42) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LCChangePlayerBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LCChangePlayerBack)
  return false;
#undef DO_
}

void LCChangePlayerBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LCChangePlayerBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameserverid(), output);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->vilidcode(), output);
  }

  // optional string serverAddress = 4;
  if (has_serveraddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serveraddress().data(), this->serveraddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serveraddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serveraddress(), output);
  }

  // optional string host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->host(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LCChangePlayerBack)
}

::google::protobuf::uint8* LCChangePlayerBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LCChangePlayerBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 gameServerId = 2;
  if (has_gameserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameserverid(), target);
  }

  // optional string vilidCode = 3;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->vilidcode(), target);
  }

  // optional string serverAddress = 4;
  if (has_serveraddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serveraddress().data(), this->serveraddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serveraddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serveraddress(), target);
  }

  // optional string host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->host(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LCChangePlayerBack)
  return target;
}

int LCChangePlayerBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 gameServerId = 2;
    if (has_gameserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameserverid());
    }

    // optional string vilidCode = 3;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string serverAddress = 4;
    if (has_serveraddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serveraddress());
    }

    // optional string host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCChangePlayerBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCChangePlayerBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCChangePlayerBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCChangePlayerBack::MergeFrom(const LCChangePlayerBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_gameserverid()) {
      set_gameserverid(from.gameserverid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_serveraddress()) {
      set_serveraddress(from.serveraddress());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCChangePlayerBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCChangePlayerBack::CopyFrom(const LCChangePlayerBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCChangePlayerBack::IsInitialized() const {

  return true;
}

void LCChangePlayerBack::Swap(LCChangePlayerBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(gameserverid_, other->gameserverid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(serveraddress_, other->serveraddress_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCChangePlayerBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCChangePlayerBack_descriptor_;
  metadata.reflection = LCChangePlayerBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GLGetPlayerLoginInfo::kVilidCodeFieldNumber;
const int GLGetPlayerLoginInfo::kAccountIDFieldNumber;
const int GLGetPlayerLoginInfo::kPlatFormFieldNumber;
const int GLGetPlayerLoginInfo::kUidFieldNumber;
#endif  // !_MSC_VER

GLGetPlayerLoginInfo::GLGetPlayerLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GLGetPlayerLoginInfo)
}

void GLGetPlayerLoginInfo::InitAsDefaultInstance() {
}

GLGetPlayerLoginInfo::GLGetPlayerLoginInfo(const GLGetPlayerLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GLGetPlayerLoginInfo)
}

void GLGetPlayerLoginInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_LONGLONG(0);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GLGetPlayerLoginInfo::~GLGetPlayerLoginInfo() {
  // @@protoc_insertion_point(destructor:GLGetPlayerLoginInfo)
  SharedDtor();
}

void GLGetPlayerLoginInfo::SharedDtor() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void GLGetPlayerLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GLGetPlayerLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GLGetPlayerLoginInfo_descriptor_;
}

const GLGetPlayerLoginInfo& GLGetPlayerLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GLGetPlayerLoginInfo* GLGetPlayerLoginInfo::default_instance_ = NULL;

GLGetPlayerLoginInfo* GLGetPlayerLoginInfo::New() const {
  return new GLGetPlayerLoginInfo;
}

void GLGetPlayerLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GLGetPlayerLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GLGetPlayerLoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vilidCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platForm;
        break;
      }

      // optional string platForm = 3;
      case 3: {
        if (tag == 26) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GLGetPlayerLoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GLGetPlayerLoginInfo)
  return false;
#undef DO_
}

void GLGetPlayerLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GLGetPlayerLoginInfo)
  // optional string vilidCode = 1;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vilidcode(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GLGetPlayerLoginInfo)
}

::google::protobuf::uint8* GLGetPlayerLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GLGetPlayerLoginInfo)
  // optional string vilidCode = 1;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vilidcode(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GLGetPlayerLoginInfo)
  return target;
}

int GLGetPlayerLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string vilidCode = 1;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional string platForm = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GLGetPlayerLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GLGetPlayerLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GLGetPlayerLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GLGetPlayerLoginInfo::MergeFrom(const GLGetPlayerLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GLGetPlayerLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GLGetPlayerLoginInfo::CopyFrom(const GLGetPlayerLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLGetPlayerLoginInfo::IsInitialized() const {

  return true;
}

void GLGetPlayerLoginInfo::Swap(GLGetPlayerLoginInfo* other) {
  if (other != this) {
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(accountid_, other->accountid_);
    std::swap(platform_, other->platform_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GLGetPlayerLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GLGetPlayerLoginInfo_descriptor_;
  metadata.reflection = GLGetPlayerLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LGGetPlayerLoginInfoBack::kResultFieldNumber;
const int LGGetPlayerLoginInfoBack::kAccountIDFieldNumber;
const int LGGetPlayerLoginInfoBack::kPlayerIDFieldNumber;
const int LGGetPlayerLoginInfoBack::kUidFieldNumber;
const int LGGetPlayerLoginInfoBack::kVilidCodeFieldNumber;
const int LGGetPlayerLoginInfoBack::kPlatFormFieldNumber;
#endif  // !_MSC_VER

LGGetPlayerLoginInfoBack::LGGetPlayerLoginInfoBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LGGetPlayerLoginInfoBack)
}

void LGGetPlayerLoginInfoBack::InitAsDefaultInstance() {
}

LGGetPlayerLoginInfoBack::LGGetPlayerLoginInfoBack(const LGGetPlayerLoginInfoBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LGGetPlayerLoginInfoBack)
}

void LGGetPlayerLoginInfoBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  playerid_ = GOOGLE_LONGLONG(0);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LGGetPlayerLoginInfoBack::~LGGetPlayerLoginInfoBack() {
  // @@protoc_insertion_point(destructor:LGGetPlayerLoginInfoBack)
  SharedDtor();
}

void LGGetPlayerLoginInfoBack::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (this != default_instance_) {
  }
}

void LGGetPlayerLoginInfoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LGGetPlayerLoginInfoBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LGGetPlayerLoginInfoBack_descriptor_;
}

const LGGetPlayerLoginInfoBack& LGGetPlayerLoginInfoBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LGGetPlayerLoginInfoBack* LGGetPlayerLoginInfoBack::default_instance_ = NULL;

LGGetPlayerLoginInfoBack* LGGetPlayerLoginInfoBack::New() const {
  return new LGGetPlayerLoginInfoBack;
}

void LGGetPlayerLoginInfoBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LGGetPlayerLoginInfoBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(accountid_, playerid_);
    result_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_vilidcode()) {
      if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vilidcode_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LGGetPlayerLoginInfoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LGGetPlayerLoginInfoBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 2;
      case 2: {
        if (tag == 16) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 3;
      case 3: {
        if (tag == 24) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }

      // optional string uid = 4;
      case 4: {
        if (tag == 34) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vilidCode;
        break;
      }

      // optional string vilidCode = 5;
      case 5: {
        if (tag == 42) {
         parse_vilidCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vilidcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vilidcode().data(), this->vilidcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vilidcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_platForm;
        break;
      }

      // optional string platForm = 6;
      case 6: {
        if (tag == 50) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LGGetPlayerLoginInfoBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LGGetPlayerLoginInfoBack)
  return false;
#undef DO_
}

void LGGetPlayerLoginInfoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LGGetPlayerLoginInfoBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->accountid(), output);
  }

  // optional int64 playerID = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->playerid(), output);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uid(), output);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vilidcode(), output);
  }

  // optional string platForm = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->platform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LGGetPlayerLoginInfoBack)
}

::google::protobuf::uint8* LGGetPlayerLoginInfoBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LGGetPlayerLoginInfoBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->accountid(), target);
  }

  // optional int64 playerID = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->playerid(), target);
  }

  // optional string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }

  // optional string vilidCode = 5;
  if (has_vilidcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vilidcode().data(), this->vilidcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vilidcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vilidcode(), target);
  }

  // optional string platForm = 6;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->platform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LGGetPlayerLoginInfoBack)
  return target;
}

int LGGetPlayerLoginInfoBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int64 playerID = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string vilidCode = 5;
    if (has_vilidcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vilidcode());
    }

    // optional string platForm = 6;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LGGetPlayerLoginInfoBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LGGetPlayerLoginInfoBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LGGetPlayerLoginInfoBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LGGetPlayerLoginInfoBack::MergeFrom(const LGGetPlayerLoginInfoBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vilidcode()) {
      set_vilidcode(from.vilidcode());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LGGetPlayerLoginInfoBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LGGetPlayerLoginInfoBack::CopyFrom(const LGGetPlayerLoginInfoBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LGGetPlayerLoginInfoBack::IsInitialized() const {

  return true;
}

void LGGetPlayerLoginInfoBack::Swap(LGGetPlayerLoginInfoBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(uid_, other->uid_);
    std::swap(vilidcode_, other->vilidcode_);
    std::swap(platform_, other->platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LGGetPlayerLoginInfoBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LGGetPlayerLoginInfoBack_descriptor_;
  metadata.reflection = LGGetPlayerLoginInfoBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCPlayerLoginQueue::kQueueNumFieldNumber;
#endif  // !_MSC_VER

LCPlayerLoginQueue::LCPlayerLoginQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LCPlayerLoginQueue)
}

void LCPlayerLoginQueue::InitAsDefaultInstance() {
}

LCPlayerLoginQueue::LCPlayerLoginQueue(const LCPlayerLoginQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LCPlayerLoginQueue)
}

void LCPlayerLoginQueue::SharedCtor() {
  _cached_size_ = 0;
  queuenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCPlayerLoginQueue::~LCPlayerLoginQueue() {
  // @@protoc_insertion_point(destructor:LCPlayerLoginQueue)
  SharedDtor();
}

void LCPlayerLoginQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCPlayerLoginQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCPlayerLoginQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCPlayerLoginQueue_descriptor_;
}

const LCPlayerLoginQueue& LCPlayerLoginQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LCPlayerLoginQueue* LCPlayerLoginQueue::default_instance_ = NULL;

LCPlayerLoginQueue* LCPlayerLoginQueue::New() const {
  return new LCPlayerLoginQueue;
}

void LCPlayerLoginQueue::Clear() {
  queuenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCPlayerLoginQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LCPlayerLoginQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 queueNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuenum_)));
          set_has_queuenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LCPlayerLoginQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LCPlayerLoginQueue)
  return false;
#undef DO_
}

void LCPlayerLoginQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LCPlayerLoginQueue)
  // optional int32 queueNum = 1;
  if (has_queuenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queuenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LCPlayerLoginQueue)
}

::google::protobuf::uint8* LCPlayerLoginQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LCPlayerLoginQueue)
  // optional int32 queueNum = 1;
  if (has_queuenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queuenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LCPlayerLoginQueue)
  return target;
}

int LCPlayerLoginQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 queueNum = 1;
    if (has_queuenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCPlayerLoginQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCPlayerLoginQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCPlayerLoginQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCPlayerLoginQueue::MergeFrom(const LCPlayerLoginQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queuenum()) {
      set_queuenum(from.queuenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCPlayerLoginQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCPlayerLoginQueue::CopyFrom(const LCPlayerLoginQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCPlayerLoginQueue::IsInitialized() const {

  return true;
}

void LCPlayerLoginQueue::Swap(LCPlayerLoginQueue* other) {
  if (other != this) {
    std::swap(queuenum_, other->queuenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCPlayerLoginQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCPlayerLoginQueue_descriptor_;
  metadata.reflection = LCPlayerLoginQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CLPlayerCancelLoginQueue::CLPlayerCancelLoginQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLPlayerCancelLoginQueue)
}

void CLPlayerCancelLoginQueue::InitAsDefaultInstance() {
}

CLPlayerCancelLoginQueue::CLPlayerCancelLoginQueue(const CLPlayerCancelLoginQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CLPlayerCancelLoginQueue)
}

void CLPlayerCancelLoginQueue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLPlayerCancelLoginQueue::~CLPlayerCancelLoginQueue() {
  // @@protoc_insertion_point(destructor:CLPlayerCancelLoginQueue)
  SharedDtor();
}

void CLPlayerCancelLoginQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLPlayerCancelLoginQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLPlayerCancelLoginQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLPlayerCancelLoginQueue_descriptor_;
}

const CLPlayerCancelLoginQueue& CLPlayerCancelLoginQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

CLPlayerCancelLoginQueue* CLPlayerCancelLoginQueue::default_instance_ = NULL;

CLPlayerCancelLoginQueue* CLPlayerCancelLoginQueue::New() const {
  return new CLPlayerCancelLoginQueue;
}

void CLPlayerCancelLoginQueue::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLPlayerCancelLoginQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CLPlayerCancelLoginQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CLPlayerCancelLoginQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CLPlayerCancelLoginQueue)
  return false;
#undef DO_
}

void CLPlayerCancelLoginQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CLPlayerCancelLoginQueue)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CLPlayerCancelLoginQueue)
}

::google::protobuf::uint8* CLPlayerCancelLoginQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLPlayerCancelLoginQueue)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLPlayerCancelLoginQueue)
  return target;
}

int CLPlayerCancelLoginQueue::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLPlayerCancelLoginQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLPlayerCancelLoginQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLPlayerCancelLoginQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLPlayerCancelLoginQueue::MergeFrom(const CLPlayerCancelLoginQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLPlayerCancelLoginQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLPlayerCancelLoginQueue::CopyFrom(const CLPlayerCancelLoginQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLPlayerCancelLoginQueue::IsInitialized() const {

  return true;
}

void CLPlayerCancelLoginQueue::Swap(CLPlayerCancelLoginQueue* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLPlayerCancelLoginQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLPlayerCancelLoginQueue_descriptor_;
  metadata.reflection = CLPlayerCancelLoginQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LCPlayerCancelLoginQueueBack::kResultFieldNumber;
#endif  // !_MSC_VER

LCPlayerCancelLoginQueueBack::LCPlayerCancelLoginQueueBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LCPlayerCancelLoginQueueBack)
}

void LCPlayerCancelLoginQueueBack::InitAsDefaultInstance() {
}

LCPlayerCancelLoginQueueBack::LCPlayerCancelLoginQueueBack(const LCPlayerCancelLoginQueueBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LCPlayerCancelLoginQueueBack)
}

void LCPlayerCancelLoginQueueBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LCPlayerCancelLoginQueueBack::~LCPlayerCancelLoginQueueBack() {
  // @@protoc_insertion_point(destructor:LCPlayerCancelLoginQueueBack)
  SharedDtor();
}

void LCPlayerCancelLoginQueueBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LCPlayerCancelLoginQueueBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LCPlayerCancelLoginQueueBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LCPlayerCancelLoginQueueBack_descriptor_;
}

const LCPlayerCancelLoginQueueBack& LCPlayerCancelLoginQueueBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

LCPlayerCancelLoginQueueBack* LCPlayerCancelLoginQueueBack::default_instance_ = NULL;

LCPlayerCancelLoginQueueBack* LCPlayerCancelLoginQueueBack::New() const {
  return new LCPlayerCancelLoginQueueBack;
}

void LCPlayerCancelLoginQueueBack::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LCPlayerCancelLoginQueueBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LCPlayerCancelLoginQueueBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LCPlayerCancelLoginQueueBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LCPlayerCancelLoginQueueBack)
  return false;
#undef DO_
}

void LCPlayerCancelLoginQueueBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LCPlayerCancelLoginQueueBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LCPlayerCancelLoginQueueBack)
}

::google::protobuf::uint8* LCPlayerCancelLoginQueueBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LCPlayerCancelLoginQueueBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LCPlayerCancelLoginQueueBack)
  return target;
}

int LCPlayerCancelLoginQueueBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LCPlayerCancelLoginQueueBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LCPlayerCancelLoginQueueBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LCPlayerCancelLoginQueueBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LCPlayerCancelLoginQueueBack::MergeFrom(const LCPlayerCancelLoginQueueBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LCPlayerCancelLoginQueueBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LCPlayerCancelLoginQueueBack::CopyFrom(const LCPlayerCancelLoginQueueBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCPlayerCancelLoginQueueBack::IsInitialized() const {

  return true;
}

void LCPlayerCancelLoginQueueBack::Swap(LCPlayerCancelLoginQueueBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LCPlayerCancelLoginQueueBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LCPlayerCancelLoginQueueBack_descriptor_;
  metadata.reflection = LCPlayerCancelLoginQueueBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCommonSetting::kDebugFlagFieldNumber;
#endif  // !_MSC_VER

GCCommonSetting::GCCommonSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCommonSetting)
}

void GCCommonSetting::InitAsDefaultInstance() {
}

GCCommonSetting::GCCommonSetting(const GCCommonSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCommonSetting)
}

void GCCommonSetting::SharedCtor() {
  _cached_size_ = 0;
  debugflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCommonSetting::~GCCommonSetting() {
  // @@protoc_insertion_point(destructor:GCCommonSetting)
  SharedDtor();
}

void GCCommonSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCommonSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCommonSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCommonSetting_descriptor_;
}

const GCCommonSetting& GCCommonSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2eproto();
  return *default_instance_;
}

GCCommonSetting* GCCommonSetting::default_instance_ = NULL;

GCCommonSetting* GCCommonSetting::New() const {
  return new GCCommonSetting;
}

void GCCommonSetting::Clear() {
  debugflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCommonSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCommonSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 debugFlag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debugflag_)));
          set_has_debugflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCommonSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCommonSetting)
  return false;
#undef DO_
}

void GCCommonSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCommonSetting)
  // optional int32 debugFlag = 1;
  if (has_debugflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->debugflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCommonSetting)
}

::google::protobuf::uint8* GCCommonSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCommonSetting)
  // optional int32 debugFlag = 1;
  if (has_debugflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->debugflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCommonSetting)
  return target;
}

int GCCommonSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 debugFlag = 1;
    if (has_debugflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debugflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCommonSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCommonSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCommonSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCommonSetting::MergeFrom(const GCCommonSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debugflag()) {
      set_debugflag(from.debugflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCommonSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCommonSetting::CopyFrom(const GCCommonSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCommonSetting::IsInitialized() const {

  return true;
}

void GCCommonSetting::Swap(GCCommonSetting* other) {
  if (other != this) {
    std::swap(debugflag_, other->debugflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCommonSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCommonSetting_descriptor_;
  metadata.reflection = GCCommonSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
