// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.proto

#ifndef PROTOBUF_LoginMessage_2eproto__INCLUDED
#define PROTOBUF_LoginMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginMessage_2eproto();
void protobuf_AssignDesc_LoginMessage_2eproto();
void protobuf_ShutdownFile_LoginMessage_2eproto();

class CGLogin;
class PlayInfo;
class GCLoginBack;
class CGGetRandName;
class GCGetRandNameBack;
class CGCreatePlayer;
class GCCreatePlayerOK;
class CGLoginGameServer;
class GCLoginGameServer;
class CGDeletePlayer;
class GCDeletePlayer;
class LGForceOffLine;
class GLCheckVilidCode;
class LGCheckVilidCodeBack;
class GLLoginSuccess;
class GLPlayerOffLine;
class CLBeforeLogin;
class LCBeforeLoginBack;
class CLChangePlayerLogin;
class LCChangePlayerBack;
class GLGetPlayerLoginInfo;
class LGGetPlayerLoginInfoBack;
class LCPlayerLoginQueue;
class CLPlayerCancelLoginQueue;
class LCPlayerCancelLoginQueueBack;
class GCCommonSetting;

// ===================================================================

class CGLogin : public ::google::protobuf::Message {
 public:
  CGLogin();
  virtual ~CGLogin();

  CGLogin(const CGLogin& from);

  inline CGLogin& operator=(const CGLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGLogin& default_instance();

  void Swap(CGLogin* other);

  // implements Message ----------------------------------------------

  CGLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGLogin& from);
  void MergeFrom(const CGLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string vilidCode = 2;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 2;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string platForm = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional int64 accountID = 4;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 4;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional string authKey = 5;
  inline bool has_authkey() const;
  inline void clear_authkey();
  static const int kAuthKeyFieldNumber = 5;
  inline const ::std::string& authkey() const;
  inline void set_authkey(const ::std::string& value);
  inline void set_authkey(const char* value);
  inline void set_authkey(const char* value, size_t size);
  inline ::std::string* mutable_authkey();
  inline ::std::string* release_authkey();
  inline void set_allocated_authkey(::std::string* authkey);

  // optional int32 serverId = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 6;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int32 loginType = 7;
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLoginTypeFieldNumber = 7;
  inline ::google::protobuf::int32 logintype() const;
  inline void set_logintype(::google::protobuf::int32 value);

  // optional string customParam = 8;
  inline bool has_customparam() const;
  inline void clear_customparam();
  static const int kCustomParamFieldNumber = 8;
  inline const ::std::string& customparam() const;
  inline void set_customparam(const ::std::string& value);
  inline void set_customparam(const char* value);
  inline void set_customparam(const char* value, size_t size);
  inline ::std::string* mutable_customparam();
  inline ::std::string* release_customparam();
  inline void set_allocated_customparam(::std::string* customparam);

  // @@protoc_insertion_point(class_scope:CGLogin)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_authkey();
  inline void clear_has_authkey();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_logintype();
  inline void clear_has_logintype();
  inline void set_has_customparam();
  inline void clear_has_customparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uid_;
  ::std::string* vilidcode_;
  ::std::string* platform_;
  ::google::protobuf::int64 accountid_;
  ::std::string* authkey_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 logintype_;
  ::std::string* customparam_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CGLogin* default_instance_;
};
// -------------------------------------------------------------------

class PlayInfo : public ::google::protobuf::Message {
 public:
  PlayInfo();
  virtual ~PlayInfo();

  PlayInfo(const PlayInfo& from);

  inline PlayInfo& operator=(const PlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayInfo& default_instance();

  void Swap(PlayInfo* other);

  // implements Message ----------------------------------------------

  PlayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayInfo& from);
  void MergeFrom(const PlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 professionId = 3;
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 3;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 headicon = 5;
  inline bool has_headicon() const;
  inline void clear_headicon();
  static const int kHeadiconFieldNumber = 5;
  inline ::google::protobuf::int32 headicon() const;
  inline void set_headicon(::google::protobuf::int32 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional .ChangeEquipInfo changeEquipInfo = 8;
  inline bool has_changeequipinfo() const;
  inline void clear_changeequipinfo();
  static const int kChangeEquipInfoFieldNumber = 8;
  inline const ::ChangeEquipInfo& changeequipinfo() const;
  inline ::ChangeEquipInfo* mutable_changeequipinfo();
  inline ::ChangeEquipInfo* release_changeequipinfo();
  inline void set_allocated_changeequipinfo(::ChangeEquipInfo* changeequipinfo);

  // optional int32 deleteflag = 9;
  inline bool has_deleteflag() const;
  inline void clear_deleteflag();
  static const int kDeleteflagFieldNumber = 9;
  inline ::google::protobuf::int32 deleteflag() const;
  inline void set_deleteflag(::google::protobuf::int32 value);

  // optional int32 currSceneId = 10;
  inline bool has_currsceneid() const;
  inline void clear_currsceneid();
  static const int kCurrSceneIdFieldNumber = 10;
  inline ::google::protobuf::int32 currsceneid() const;
  inline void set_currsceneid(::google::protobuf::int32 value);

  // optional int64 createTime = 11;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 11;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 powerEffect = 12;
  inline bool has_powereffect() const;
  inline void clear_powereffect();
  static const int kPowerEffectFieldNumber = 12;
  inline ::google::protobuf::int32 powereffect() const;
  inline void set_powereffect(::google::protobuf::int32 value);

  // optional int32 awakeEffect = 13;
  inline bool has_awakeeffect() const;
  inline void clear_awakeeffect();
  static const int kAwakeEffectFieldNumber = 13;
  inline ::google::protobuf::int32 awakeeffect() const;
  inline void set_awakeeffect(::google::protobuf::int32 value);

  // optional int32 gemEffect = 14;
  inline bool has_gemeffect() const;
  inline void clear_gemeffect();
  static const int kGemEffectFieldNumber = 14;
  inline ::google::protobuf::int32 gemeffect() const;
  inline void set_gemeffect(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_headicon();
  inline void clear_has_headicon();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_changeequipinfo();
  inline void clear_has_changeequipinfo();
  inline void set_has_deleteflag();
  inline void clear_has_deleteflag();
  inline void set_has_currsceneid();
  inline void clear_has_currsceneid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_powereffect();
  inline void clear_has_powereffect();
  inline void set_has_awakeeffect();
  inline void clear_has_awakeeffect();
  inline void set_has_gemeffect();
  inline void clear_has_gemeffect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 headicon_;
  ::google::protobuf::int32 level_;
  ::ChangeEquipInfo* changeequipinfo_;
  ::google::protobuf::int32 deleteflag_;
  ::google::protobuf::int32 currsceneid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int32 powereffect_;
  ::google::protobuf::int32 awakeeffect_;
  ::google::protobuf::int32 gemeffect_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static PlayInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCLoginBack : public ::google::protobuf::Message {
 public:
  GCLoginBack();
  virtual ~GCLoginBack();

  GCLoginBack(const GCLoginBack& from);

  inline GCLoginBack& operator=(const GCLoginBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCLoginBack& default_instance();

  void Swap(GCLoginBack* other);

  // implements Message ----------------------------------------------

  GCLoginBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCLoginBack& from);
  void MergeFrom(const GCLoginBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 gameServerId = 2;
  inline bool has_gameserverid() const;
  inline void clear_gameserverid();
  static const int kGameServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 gameserverid() const;
  inline void set_gameserverid(::google::protobuf::int32 value);

  // optional int64 currPlayerId = 3;
  inline bool has_currplayerid() const;
  inline void clear_currplayerid();
  static const int kCurrPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int64 currplayerid() const;
  inline void set_currplayerid(::google::protobuf::int64 value);

  // repeated .PlayInfo playerList = 4;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerListFieldNumber = 4;
  inline const ::PlayInfo& playerlist(int index) const;
  inline ::PlayInfo* mutable_playerlist(int index);
  inline ::PlayInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayInfo >*
      mutable_playerlist();

  // optional int64 accountID = 5;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 5;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional int64 eniqueID = 6;
  inline bool has_eniqueid() const;
  inline void clear_eniqueid();
  static const int kEniqueIDFieldNumber = 6;
  inline ::google::protobuf::int64 eniqueid() const;
  inline void set_eniqueid(::google::protobuf::int64 value);

  // optional int32 queueSize = 7;
  inline bool has_queuesize() const;
  inline void clear_queuesize();
  static const int kQueueSizeFieldNumber = 7;
  inline ::google::protobuf::int32 queuesize() const;
  inline void set_queuesize(::google::protobuf::int32 value);

  // optional int32 loginType = 8;
  inline bool has_logintype() const;
  inline void clear_logintype();
  static const int kLoginTypeFieldNumber = 8;
  inline ::google::protobuf::int32 logintype() const;
  inline void set_logintype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCLoginBack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_gameserverid();
  inline void clear_has_gameserverid();
  inline void set_has_currplayerid();
  inline void clear_has_currplayerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_eniqueid();
  inline void clear_has_eniqueid();
  inline void set_has_queuesize();
  inline void clear_has_queuesize();
  inline void set_has_logintype();
  inline void clear_has_logintype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 gameserverid_;
  ::google::protobuf::int64 currplayerid_;
  ::google::protobuf::RepeatedPtrField< ::PlayInfo > playerlist_;
  ::google::protobuf::int64 accountid_;
  ::google::protobuf::int64 eniqueid_;
  ::google::protobuf::int32 queuesize_;
  ::google::protobuf::int32 logintype_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCLoginBack* default_instance_;
};
// -------------------------------------------------------------------

class CGGetRandName : public ::google::protobuf::Message {
 public:
  CGGetRandName();
  virtual ~CGGetRandName();

  CGGetRandName(const CGGetRandName& from);

  inline CGGetRandName& operator=(const CGGetRandName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetRandName& default_instance();

  void Swap(CGGetRandName* other);

  // implements Message ----------------------------------------------

  CGGetRandName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetRandName& from);
  void MergeFrom(const CGGetRandName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGGetRandName)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetRandName* default_instance_;
};
// -------------------------------------------------------------------

class GCGetRandNameBack : public ::google::protobuf::Message {
 public:
  GCGetRandNameBack();
  virtual ~GCGetRandNameBack();

  GCGetRandNameBack(const GCGetRandNameBack& from);

  inline GCGetRandNameBack& operator=(const GCGetRandNameBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGetRandNameBack& default_instance();

  void Swap(GCGetRandNameBack* other);

  // implements Message ----------------------------------------------

  GCGetRandNameBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCGetRandNameBack& from);
  void MergeFrom(const GCGetRandNameBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string manname = 7;
  inline int manname_size() const;
  inline void clear_manname();
  static const int kMannameFieldNumber = 7;
  inline const ::std::string& manname(int index) const;
  inline ::std::string* mutable_manname(int index);
  inline void set_manname(int index, const ::std::string& value);
  inline void set_manname(int index, const char* value);
  inline void set_manname(int index, const char* value, size_t size);
  inline ::std::string* add_manname();
  inline void add_manname(const ::std::string& value);
  inline void add_manname(const char* value);
  inline void add_manname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& manname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_manname();

  // repeated string womanname = 8;
  inline int womanname_size() const;
  inline void clear_womanname();
  static const int kWomannameFieldNumber = 8;
  inline const ::std::string& womanname(int index) const;
  inline ::std::string* mutable_womanname(int index);
  inline void set_womanname(int index, const ::std::string& value);
  inline void set_womanname(int index, const char* value);
  inline void set_womanname(int index, const char* value, size_t size);
  inline ::std::string* add_womanname();
  inline void add_womanname(const ::std::string& value);
  inline void add_womanname(const char* value);
  inline void add_womanname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& womanname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_womanname();

  // @@protoc_insertion_point(class_scope:GCGetRandNameBack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> manname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> womanname_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCGetRandNameBack* default_instance_;
};
// -------------------------------------------------------------------

class CGCreatePlayer : public ::google::protobuf::Message {
 public:
  CGCreatePlayer();
  virtual ~CGCreatePlayer();

  CGCreatePlayer(const CGCreatePlayer& from);

  inline CGCreatePlayer& operator=(const CGCreatePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGCreatePlayer& default_instance();

  void Swap(CGCreatePlayer* other);

  // implements Message ----------------------------------------------

  CGCreatePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGCreatePlayer& from);
  void MergeFrom(const CGCreatePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 professionId = 1;
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionIdFieldNumber = 1;
  inline ::google::protobuf::int32 professionid() const;
  inline void set_professionid(::google::protobuf::int32 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGCreatePlayer)
 private:
  inline void set_has_professionid();
  inline void clear_has_professionid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::google::protobuf::int32 professionid_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CGCreatePlayer* default_instance_;
};
// -------------------------------------------------------------------

class GCCreatePlayerOK : public ::google::protobuf::Message {
 public:
  GCCreatePlayerOK();
  virtual ~GCCreatePlayerOK();

  GCCreatePlayerOK(const GCCreatePlayerOK& from);

  inline GCCreatePlayerOK& operator=(const GCCreatePlayerOK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCreatePlayerOK& default_instance();

  void Swap(GCCreatePlayerOK* other);

  // implements Message ----------------------------------------------

  GCCreatePlayerOK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCreatePlayerOK& from);
  void MergeFrom(const GCCreatePlayerOK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional .PlayInfo newPlayer = 2;
  inline bool has_newplayer() const;
  inline void clear_newplayer();
  static const int kNewPlayerFieldNumber = 2;
  inline const ::PlayInfo& newplayer() const;
  inline ::PlayInfo* mutable_newplayer();
  inline ::PlayInfo* release_newplayer();
  inline void set_allocated_newplayer(::PlayInfo* newplayer);

  // @@protoc_insertion_point(class_scope:GCCreatePlayerOK)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_newplayer();
  inline void clear_has_newplayer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PlayInfo* newplayer_;
  ::google::protobuf::int32 flag_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCreatePlayerOK* default_instance_;
};
// -------------------------------------------------------------------

class CGLoginGameServer : public ::google::protobuf::Message {
 public:
  CGLoginGameServer();
  virtual ~CGLoginGameServer();

  CGLoginGameServer(const CGLoginGameServer& from);

  inline CGLoginGameServer& operator=(const CGLoginGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGLoginGameServer& default_instance();

  void Swap(CGLoginGameServer* other);

  // implements Message ----------------------------------------------

  CGLoginGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGLoginGameServer& from);
  void MergeFrom(const CGLoginGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGLoginGameServer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CGLoginGameServer* default_instance_;
};
// -------------------------------------------------------------------

class GCLoginGameServer : public ::google::protobuf::Message {
 public:
  GCLoginGameServer();
  virtual ~GCLoginGameServer();

  GCLoginGameServer(const GCLoginGameServer& from);

  inline GCLoginGameServer& operator=(const GCLoginGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCLoginGameServer& default_instance();

  void Swap(GCLoginGameServer* other);

  // implements Message ----------------------------------------------

  GCLoginGameServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCLoginGameServer& from);
  void MergeFrom(const GCLoginGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CharacterInfo player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::CharacterInfo& player() const;
  inline ::CharacterInfo* mutable_player();
  inline ::CharacterInfo* release_player();
  inline void set_allocated_player(::CharacterInfo* player);

  // @@protoc_insertion_point(class_scope:GCLoginGameServer)
 private:
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CharacterInfo* player_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCLoginGameServer* default_instance_;
};
// -------------------------------------------------------------------

class CGDeletePlayer : public ::google::protobuf::Message {
 public:
  CGDeletePlayer();
  virtual ~CGDeletePlayer();

  CGDeletePlayer(const CGDeletePlayer& from);

  inline CGDeletePlayer& operator=(const CGDeletePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGDeletePlayer& default_instance();

  void Swap(CGDeletePlayer* other);

  // implements Message ----------------------------------------------

  CGDeletePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGDeletePlayer& from);
  void MergeFrom(const CGDeletePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGDeletePlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CGDeletePlayer* default_instance_;
};
// -------------------------------------------------------------------

class GCDeletePlayer : public ::google::protobuf::Message {
 public:
  GCDeletePlayer();
  virtual ~GCDeletePlayer();

  GCDeletePlayer(const GCDeletePlayer& from);

  inline GCDeletePlayer& operator=(const GCDeletePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCDeletePlayer& default_instance();

  void Swap(GCDeletePlayer* other);

  // implements Message ----------------------------------------------

  GCDeletePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCDeletePlayer& from);
  void MergeFrom(const GCDeletePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCDeletePlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCDeletePlayer* default_instance_;
};
// -------------------------------------------------------------------

class LGForceOffLine : public ::google::protobuf::Message {
 public:
  LGForceOffLine();
  virtual ~LGForceOffLine();

  LGForceOffLine(const LGForceOffLine& from);

  inline LGForceOffLine& operator=(const LGForceOffLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LGForceOffLine& default_instance();

  void Swap(LGForceOffLine* other);

  // implements Message ----------------------------------------------

  LGForceOffLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGForceOffLine& from);
  void MergeFrom(const LGForceOffLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 messageID = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIDFieldNumber = 2;
  inline ::google::protobuf::int32 messageid() const;
  inline void set_messageid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LGForceOffLine)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_messageid();
  inline void clear_has_messageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 messageid_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LGForceOffLine* default_instance_;
};
// -------------------------------------------------------------------

class GLCheckVilidCode : public ::google::protobuf::Message {
 public:
  GLCheckVilidCode();
  virtual ~GLCheckVilidCode();

  GLCheckVilidCode(const GLCheckVilidCode& from);

  inline GLCheckVilidCode& operator=(const GLCheckVilidCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GLCheckVilidCode& default_instance();

  void Swap(GLCheckVilidCode* other);

  // implements Message ----------------------------------------------

  GLCheckVilidCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLCheckVilidCode& from);
  void MergeFrom(const GLCheckVilidCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string vilidCode = 2;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 2;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string platForm = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:GLCheckVilidCode)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uid_;
  ::std::string* vilidcode_;
  ::std::string* platform_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GLCheckVilidCode* default_instance_;
};
// -------------------------------------------------------------------

class LGCheckVilidCodeBack : public ::google::protobuf::Message {
 public:
  LGCheckVilidCodeBack();
  virtual ~LGCheckVilidCodeBack();

  LGCheckVilidCodeBack(const LGCheckVilidCodeBack& from);

  inline LGCheckVilidCodeBack& operator=(const LGCheckVilidCodeBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LGCheckVilidCodeBack& default_instance();

  void Swap(LGCheckVilidCodeBack* other);

  // implements Message ----------------------------------------------

  LGCheckVilidCodeBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGCheckVilidCodeBack& from);
  void MergeFrom(const LGCheckVilidCodeBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional int64 playerID = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 3;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string vilidCode = 5;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 5;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string platForm = 6;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 6;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:LGCheckVilidCodeBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 accountid_;
  ::google::protobuf::int64 playerid_;
  ::std::string* uid_;
  ::std::string* vilidcode_;
  ::std::string* platform_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LGCheckVilidCodeBack* default_instance_;
};
// -------------------------------------------------------------------

class GLLoginSuccess : public ::google::protobuf::Message {
 public:
  GLLoginSuccess();
  virtual ~GLLoginSuccess();

  GLLoginSuccess(const GLLoginSuccess& from);

  inline GLLoginSuccess& operator=(const GLLoginSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GLLoginSuccess& default_instance();

  void Swap(GLLoginSuccess* other);

  // implements Message ----------------------------------------------

  GLLoginSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLLoginSuccess& from);
  void MergeFrom(const GLLoginSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional string vilidCode = 3;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 3;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional int32 onlineNum = 4;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlineNumFieldNumber = 4;
  inline ::google::protobuf::int32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GLLoginSuccess)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 accountid_;
  ::std::string* vilidcode_;
  ::google::protobuf::int32 onlinenum_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GLLoginSuccess* default_instance_;
};
// -------------------------------------------------------------------

class GLPlayerOffLine : public ::google::protobuf::Message {
 public:
  GLPlayerOffLine();
  virtual ~GLPlayerOffLine();

  GLPlayerOffLine(const GLPlayerOffLine& from);

  inline GLPlayerOffLine& operator=(const GLPlayerOffLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GLPlayerOffLine& default_instance();

  void Swap(GLPlayerOffLine* other);

  // implements Message ----------------------------------------------

  GLPlayerOffLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLPlayerOffLine& from);
  void MergeFrom(const GLPlayerOffLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional int32 onlineNum = 3;
  inline bool has_onlinenum() const;
  inline void clear_onlinenum();
  static const int kOnlineNumFieldNumber = 3;
  inline ::google::protobuf::int32 onlinenum() const;
  inline void set_onlinenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GLPlayerOffLine)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_onlinenum();
  inline void clear_has_onlinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 accountid_;
  ::google::protobuf::int32 onlinenum_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GLPlayerOffLine* default_instance_;
};
// -------------------------------------------------------------------

class CLBeforeLogin : public ::google::protobuf::Message {
 public:
  CLBeforeLogin();
  virtual ~CLBeforeLogin();

  CLBeforeLogin(const CLBeforeLogin& from);

  inline CLBeforeLogin& operator=(const CLBeforeLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLBeforeLogin& default_instance();

  void Swap(CLBeforeLogin* other);

  // implements Message ----------------------------------------------

  CLBeforeLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLBeforeLogin& from);
  void MergeFrom(const CLBeforeLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string vilidCode = 2;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 2;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string deviceInfo = 4;
  inline bool has_deviceinfo() const;
  inline void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 4;
  inline const ::std::string& deviceinfo() const;
  inline void set_deviceinfo(const ::std::string& value);
  inline void set_deviceinfo(const char* value);
  inline void set_deviceinfo(const char* value, size_t size);
  inline ::std::string* mutable_deviceinfo();
  inline ::std::string* release_deviceinfo();
  inline void set_allocated_deviceinfo(::std::string* deviceinfo);

  // optional string platForm = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional int64 accountID = 6;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 6;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional string authKey = 7;
  inline bool has_authkey() const;
  inline void clear_authkey();
  static const int kAuthKeyFieldNumber = 7;
  inline const ::std::string& authkey() const;
  inline void set_authkey(const ::std::string& value);
  inline void set_authkey(const char* value);
  inline void set_authkey(const char* value, size_t size);
  inline ::std::string* mutable_authkey();
  inline ::std::string* release_authkey();
  inline void set_allocated_authkey(::std::string* authkey);

  // @@protoc_insertion_point(class_scope:CLBeforeLogin)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_deviceinfo();
  inline void clear_has_deviceinfo();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_authkey();
  inline void clear_has_authkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uid_;
  ::std::string* vilidcode_;
  ::std::string* version_;
  ::std::string* deviceinfo_;
  ::std::string* platform_;
  ::google::protobuf::int64 accountid_;
  ::std::string* authkey_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CLBeforeLogin* default_instance_;
};
// -------------------------------------------------------------------

class LCBeforeLoginBack : public ::google::protobuf::Message {
 public:
  LCBeforeLoginBack();
  virtual ~LCBeforeLoginBack();

  LCBeforeLoginBack(const LCBeforeLoginBack& from);

  inline LCBeforeLoginBack& operator=(const LCBeforeLoginBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCBeforeLoginBack& default_instance();

  void Swap(LCBeforeLoginBack* other);

  // implements Message ----------------------------------------------

  LCBeforeLoginBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCBeforeLoginBack& from);
  void MergeFrom(const LCBeforeLoginBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 gameServerId = 2;
  inline bool has_gameserverid() const;
  inline void clear_gameserverid();
  static const int kGameServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 gameserverid() const;
  inline void set_gameserverid(::google::protobuf::int32 value);

  // optional string vilidCode = 3;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 3;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string host = 4;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 4;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int64 accountID = 6;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 6;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional string authKey = 7;
  inline bool has_authkey() const;
  inline void clear_authkey();
  static const int kAuthKeyFieldNumber = 7;
  inline const ::std::string& authkey() const;
  inline void set_authkey(const ::std::string& value);
  inline void set_authkey(const char* value);
  inline void set_authkey(const char* value, size_t size);
  inline ::std::string* mutable_authkey();
  inline ::std::string* release_authkey();
  inline void set_allocated_authkey(::std::string* authkey);

  // @@protoc_insertion_point(class_scope:LCBeforeLoginBack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_gameserverid();
  inline void clear_has_gameserverid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_authkey();
  inline void clear_has_authkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 gameserverid_;
  ::std::string* vilidcode_;
  ::std::string* host_;
  ::google::protobuf::int64 accountid_;
  ::std::string* authkey_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LCBeforeLoginBack* default_instance_;
};
// -------------------------------------------------------------------

class CLChangePlayerLogin : public ::google::protobuf::Message {
 public:
  CLChangePlayerLogin();
  virtual ~CLChangePlayerLogin();

  CLChangePlayerLogin(const CLChangePlayerLogin& from);

  inline CLChangePlayerLogin& operator=(const CLChangePlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLChangePlayerLogin& default_instance();

  void Swap(CLChangePlayerLogin* other);

  // implements Message ----------------------------------------------

  CLChangePlayerLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLChangePlayerLogin& from);
  void MergeFrom(const CLChangePlayerLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string deviceInfo = 4;
  inline bool has_deviceinfo() const;
  inline void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 4;
  inline const ::std::string& deviceinfo() const;
  inline void set_deviceinfo(const ::std::string& value);
  inline void set_deviceinfo(const char* value);
  inline void set_deviceinfo(const char* value, size_t size);
  inline ::std::string* mutable_deviceinfo();
  inline ::std::string* release_deviceinfo();
  inline void set_allocated_deviceinfo(::std::string* deviceinfo);

  // @@protoc_insertion_point(class_scope:CLChangePlayerLogin)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_deviceinfo();
  inline void clear_has_deviceinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::std::string* pwd_;
  ::std::string* version_;
  ::std::string* deviceinfo_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CLChangePlayerLogin* default_instance_;
};
// -------------------------------------------------------------------

class LCChangePlayerBack : public ::google::protobuf::Message {
 public:
  LCChangePlayerBack();
  virtual ~LCChangePlayerBack();

  LCChangePlayerBack(const LCChangePlayerBack& from);

  inline LCChangePlayerBack& operator=(const LCChangePlayerBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCChangePlayerBack& default_instance();

  void Swap(LCChangePlayerBack* other);

  // implements Message ----------------------------------------------

  LCChangePlayerBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCChangePlayerBack& from);
  void MergeFrom(const LCChangePlayerBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 gameServerId = 2;
  inline bool has_gameserverid() const;
  inline void clear_gameserverid();
  static const int kGameServerIdFieldNumber = 2;
  inline ::google::protobuf::int32 gameserverid() const;
  inline void set_gameserverid(::google::protobuf::int32 value);

  // optional string vilidCode = 3;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 3;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string serverAddress = 4;
  inline bool has_serveraddress() const;
  inline void clear_serveraddress();
  static const int kServerAddressFieldNumber = 4;
  inline const ::std::string& serveraddress() const;
  inline void set_serveraddress(const ::std::string& value);
  inline void set_serveraddress(const char* value);
  inline void set_serveraddress(const char* value, size_t size);
  inline ::std::string* mutable_serveraddress();
  inline ::std::string* release_serveraddress();
  inline void set_allocated_serveraddress(::std::string* serveraddress);

  // optional string host = 5;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 5;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LCChangePlayerBack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_gameserverid();
  inline void clear_has_gameserverid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_serveraddress();
  inline void clear_has_serveraddress();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 gameserverid_;
  ::std::string* vilidcode_;
  ::std::string* serveraddress_;
  ::std::string* host_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LCChangePlayerBack* default_instance_;
};
// -------------------------------------------------------------------

class GLGetPlayerLoginInfo : public ::google::protobuf::Message {
 public:
  GLGetPlayerLoginInfo();
  virtual ~GLGetPlayerLoginInfo();

  GLGetPlayerLoginInfo(const GLGetPlayerLoginInfo& from);

  inline GLGetPlayerLoginInfo& operator=(const GLGetPlayerLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GLGetPlayerLoginInfo& default_instance();

  void Swap(GLGetPlayerLoginInfo* other);

  // implements Message ----------------------------------------------

  GLGetPlayerLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLGetPlayerLoginInfo& from);
  void MergeFrom(const GLGetPlayerLoginInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vilidCode = 1;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 1;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional int64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional string platForm = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 3;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:GLGetPlayerLoginInfo)
 private:
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* vilidcode_;
  ::google::protobuf::int64 accountid_;
  ::std::string* platform_;
  ::std::string* uid_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GLGetPlayerLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class LGGetPlayerLoginInfoBack : public ::google::protobuf::Message {
 public:
  LGGetPlayerLoginInfoBack();
  virtual ~LGGetPlayerLoginInfoBack();

  LGGetPlayerLoginInfoBack(const LGGetPlayerLoginInfoBack& from);

  inline LGGetPlayerLoginInfoBack& operator=(const LGGetPlayerLoginInfoBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LGGetPlayerLoginInfoBack& default_instance();

  void Swap(LGGetPlayerLoginInfoBack* other);

  // implements Message ----------------------------------------------

  LGGetPlayerLoginInfoBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LGGetPlayerLoginInfoBack& from);
  void MergeFrom(const LGGetPlayerLoginInfoBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);

  // optional int64 playerID = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 3;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string vilidCode = 5;
  inline bool has_vilidcode() const;
  inline void clear_vilidcode();
  static const int kVilidCodeFieldNumber = 5;
  inline const ::std::string& vilidcode() const;
  inline void set_vilidcode(const ::std::string& value);
  inline void set_vilidcode(const char* value);
  inline void set_vilidcode(const char* value, size_t size);
  inline ::std::string* mutable_vilidcode();
  inline ::std::string* release_vilidcode();
  inline void set_allocated_vilidcode(::std::string* vilidcode);

  // optional string platForm = 6;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 6;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // @@protoc_insertion_point(class_scope:LGGetPlayerLoginInfoBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vilidcode();
  inline void clear_has_vilidcode();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 accountid_;
  ::google::protobuf::int64 playerid_;
  ::std::string* uid_;
  ::std::string* vilidcode_;
  ::std::string* platform_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LGGetPlayerLoginInfoBack* default_instance_;
};
// -------------------------------------------------------------------

class LCPlayerLoginQueue : public ::google::protobuf::Message {
 public:
  LCPlayerLoginQueue();
  virtual ~LCPlayerLoginQueue();

  LCPlayerLoginQueue(const LCPlayerLoginQueue& from);

  inline LCPlayerLoginQueue& operator=(const LCPlayerLoginQueue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCPlayerLoginQueue& default_instance();

  void Swap(LCPlayerLoginQueue* other);

  // implements Message ----------------------------------------------

  LCPlayerLoginQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCPlayerLoginQueue& from);
  void MergeFrom(const LCPlayerLoginQueue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 queueNum = 1;
  inline bool has_queuenum() const;
  inline void clear_queuenum();
  static const int kQueueNumFieldNumber = 1;
  inline ::google::protobuf::int32 queuenum() const;
  inline void set_queuenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LCPlayerLoginQueue)
 private:
  inline void set_has_queuenum();
  inline void clear_has_queuenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 queuenum_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LCPlayerLoginQueue* default_instance_;
};
// -------------------------------------------------------------------

class CLPlayerCancelLoginQueue : public ::google::protobuf::Message {
 public:
  CLPlayerCancelLoginQueue();
  virtual ~CLPlayerCancelLoginQueue();

  CLPlayerCancelLoginQueue(const CLPlayerCancelLoginQueue& from);

  inline CLPlayerCancelLoginQueue& operator=(const CLPlayerCancelLoginQueue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLPlayerCancelLoginQueue& default_instance();

  void Swap(CLPlayerCancelLoginQueue* other);

  // implements Message ----------------------------------------------

  CLPlayerCancelLoginQueue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLPlayerCancelLoginQueue& from);
  void MergeFrom(const CLPlayerCancelLoginQueue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CLPlayerCancelLoginQueue)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CLPlayerCancelLoginQueue* default_instance_;
};
// -------------------------------------------------------------------

class LCPlayerCancelLoginQueueBack : public ::google::protobuf::Message {
 public:
  LCPlayerCancelLoginQueueBack();
  virtual ~LCPlayerCancelLoginQueueBack();

  LCPlayerCancelLoginQueueBack(const LCPlayerCancelLoginQueueBack& from);

  inline LCPlayerCancelLoginQueueBack& operator=(const LCPlayerCancelLoginQueueBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCPlayerCancelLoginQueueBack& default_instance();

  void Swap(LCPlayerCancelLoginQueueBack* other);

  // implements Message ----------------------------------------------

  LCPlayerCancelLoginQueueBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCPlayerCancelLoginQueueBack& from);
  void MergeFrom(const LCPlayerCancelLoginQueueBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LCPlayerCancelLoginQueueBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LCPlayerCancelLoginQueueBack* default_instance_;
};
// -------------------------------------------------------------------

class GCCommonSetting : public ::google::protobuf::Message {
 public:
  GCCommonSetting();
  virtual ~GCCommonSetting();

  GCCommonSetting(const GCCommonSetting& from);

  inline GCCommonSetting& operator=(const GCCommonSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCCommonSetting& default_instance();

  void Swap(GCCommonSetting* other);

  // implements Message ----------------------------------------------

  GCCommonSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCCommonSetting& from);
  void MergeFrom(const GCCommonSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 debugFlag = 1;
  inline bool has_debugflag() const;
  inline void clear_debugflag();
  static const int kDebugFlagFieldNumber = 1;
  inline ::google::protobuf::int32 debugflag() const;
  inline void set_debugflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCCommonSetting)
 private:
  inline void set_has_debugflag();
  inline void clear_has_debugflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 debugflag_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static GCCommonSetting* default_instance_;
};
// ===================================================================


// ===================================================================

// CGLogin

// optional string uid = 1;
inline bool CGLogin::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGLogin::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGLogin::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGLogin::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CGLogin::uid() const {
  // @@protoc_insertion_point(field_get:CGLogin.uid)
  return *uid_;
}
inline void CGLogin::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:CGLogin.uid)
}
inline void CGLogin::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGLogin.uid)
}
inline void CGLogin::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGLogin.uid)
}
inline ::std::string* CGLogin::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGLogin.uid)
  return uid_;
}
inline ::std::string* CGLogin::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGLogin::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGLogin.uid)
}

// optional string vilidCode = 2;
inline bool CGLogin::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGLogin::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGLogin::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGLogin::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& CGLogin::vilidcode() const {
  // @@protoc_insertion_point(field_get:CGLogin.vilidCode)
  return *vilidcode_;
}
inline void CGLogin::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:CGLogin.vilidCode)
}
inline void CGLogin::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGLogin.vilidCode)
}
inline void CGLogin::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGLogin.vilidCode)
}
inline ::std::string* CGLogin::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGLogin.vilidCode)
  return vilidcode_;
}
inline ::std::string* CGLogin::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGLogin::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGLogin.vilidCode)
}

// optional string platForm = 3;
inline bool CGLogin::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGLogin::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGLogin::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGLogin::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& CGLogin::platform() const {
  // @@protoc_insertion_point(field_get:CGLogin.platForm)
  return *platform_;
}
inline void CGLogin::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:CGLogin.platForm)
}
inline void CGLogin::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGLogin.platForm)
}
inline void CGLogin::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGLogin.platForm)
}
inline ::std::string* CGLogin::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGLogin.platForm)
  return platform_;
}
inline ::std::string* CGLogin::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGLogin::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGLogin.platForm)
}

// optional int64 accountID = 4;
inline bool CGLogin::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGLogin::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGLogin::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGLogin::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 CGLogin::accountid() const {
  // @@protoc_insertion_point(field_get:CGLogin.accountID)
  return accountid_;
}
inline void CGLogin::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CGLogin.accountID)
}

// optional string authKey = 5;
inline bool CGLogin::has_authkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CGLogin::set_has_authkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CGLogin::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CGLogin::clear_authkey() {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_->clear();
  }
  clear_has_authkey();
}
inline const ::std::string& CGLogin::authkey() const {
  // @@protoc_insertion_point(field_get:CGLogin.authKey)
  return *authkey_;
}
inline void CGLogin::set_authkey(const ::std::string& value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set:CGLogin.authKey)
}
inline void CGLogin::set_authkey(const char* value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGLogin.authKey)
}
inline void CGLogin::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGLogin.authKey)
}
inline ::std::string* CGLogin::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGLogin.authKey)
  return authkey_;
}
inline ::std::string* CGLogin::release_authkey() {
  clear_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authkey_;
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGLogin::set_allocated_authkey(::std::string* authkey) {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (authkey) {
    set_has_authkey();
    authkey_ = authkey;
  } else {
    clear_has_authkey();
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGLogin.authKey)
}

// optional int32 serverId = 6;
inline bool CGLogin::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CGLogin::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CGLogin::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CGLogin::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 CGLogin::serverid() const {
  // @@protoc_insertion_point(field_get:CGLogin.serverId)
  return serverid_;
}
inline void CGLogin::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:CGLogin.serverId)
}

// optional int32 loginType = 7;
inline bool CGLogin::has_logintype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CGLogin::set_has_logintype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CGLogin::clear_has_logintype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CGLogin::clear_logintype() {
  logintype_ = 0;
  clear_has_logintype();
}
inline ::google::protobuf::int32 CGLogin::logintype() const {
  // @@protoc_insertion_point(field_get:CGLogin.loginType)
  return logintype_;
}
inline void CGLogin::set_logintype(::google::protobuf::int32 value) {
  set_has_logintype();
  logintype_ = value;
  // @@protoc_insertion_point(field_set:CGLogin.loginType)
}

// optional string customParam = 8;
inline bool CGLogin::has_customparam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CGLogin::set_has_customparam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CGLogin::clear_has_customparam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CGLogin::clear_customparam() {
  if (customparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customparam_->clear();
  }
  clear_has_customparam();
}
inline const ::std::string& CGLogin::customparam() const {
  // @@protoc_insertion_point(field_get:CGLogin.customParam)
  return *customparam_;
}
inline void CGLogin::set_customparam(const ::std::string& value) {
  set_has_customparam();
  if (customparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customparam_ = new ::std::string;
  }
  customparam_->assign(value);
  // @@protoc_insertion_point(field_set:CGLogin.customParam)
}
inline void CGLogin::set_customparam(const char* value) {
  set_has_customparam();
  if (customparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customparam_ = new ::std::string;
  }
  customparam_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGLogin.customParam)
}
inline void CGLogin::set_customparam(const char* value, size_t size) {
  set_has_customparam();
  if (customparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customparam_ = new ::std::string;
  }
  customparam_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGLogin.customParam)
}
inline ::std::string* CGLogin::mutable_customparam() {
  set_has_customparam();
  if (customparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    customparam_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGLogin.customParam)
  return customparam_;
}
inline ::std::string* CGLogin::release_customparam() {
  clear_has_customparam();
  if (customparam_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = customparam_;
    customparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGLogin::set_allocated_customparam(::std::string* customparam) {
  if (customparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete customparam_;
  }
  if (customparam) {
    set_has_customparam();
    customparam_ = customparam;
  } else {
    clear_has_customparam();
    customparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGLogin.customParam)
}

// -------------------------------------------------------------------

// PlayInfo

// optional int64 playerId = 1;
inline bool PlayInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 PlayInfo::playerid() const {
  // @@protoc_insertion_point(field_get:PlayInfo.playerId)
  return playerid_;
}
inline void PlayInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.playerId)
}

// optional string name = 2;
inline bool PlayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayInfo::name() const {
  // @@protoc_insertion_point(field_get:PlayInfo.name)
  return *name_;
}
inline void PlayInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PlayInfo.name)
}
inline void PlayInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PlayInfo.name)
}
inline void PlayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlayInfo.name)
}
inline ::std::string* PlayInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PlayInfo.name)
  return name_;
}
inline ::std::string* PlayInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PlayInfo.name)
}

// optional int32 professionId = 3;
inline bool PlayInfo::has_professionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayInfo::set_has_professionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayInfo::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayInfo::clear_professionid() {
  professionid_ = 0;
  clear_has_professionid();
}
inline ::google::protobuf::int32 PlayInfo::professionid() const {
  // @@protoc_insertion_point(field_get:PlayInfo.professionId)
  return professionid_;
}
inline void PlayInfo::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.professionId)
}

// optional int32 sex = 4;
inline bool PlayInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PlayInfo::sex() const {
  // @@protoc_insertion_point(field_get:PlayInfo.sex)
  return sex_;
}
inline void PlayInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.sex)
}

// optional int32 headicon = 5;
inline bool PlayInfo::has_headicon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayInfo::set_has_headicon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayInfo::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayInfo::clear_headicon() {
  headicon_ = 0;
  clear_has_headicon();
}
inline ::google::protobuf::int32 PlayInfo::headicon() const {
  // @@protoc_insertion_point(field_get:PlayInfo.headicon)
  return headicon_;
}
inline void PlayInfo::set_headicon(::google::protobuf::int32 value) {
  set_has_headicon();
  headicon_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.headicon)
}

// optional int32 level = 6;
inline bool PlayInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayInfo::level() const {
  // @@protoc_insertion_point(field_get:PlayInfo.level)
  return level_;
}
inline void PlayInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.level)
}

// optional .ChangeEquipInfo changeEquipInfo = 8;
inline bool PlayInfo::has_changeequipinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayInfo::set_has_changeequipinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayInfo::clear_has_changeequipinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayInfo::clear_changeequipinfo() {
  if (changeequipinfo_ != NULL) changeequipinfo_->::ChangeEquipInfo::Clear();
  clear_has_changeequipinfo();
}
inline const ::ChangeEquipInfo& PlayInfo::changeequipinfo() const {
  // @@protoc_insertion_point(field_get:PlayInfo.changeEquipInfo)
  return changeequipinfo_ != NULL ? *changeequipinfo_ : *default_instance_->changeequipinfo_;
}
inline ::ChangeEquipInfo* PlayInfo::mutable_changeequipinfo() {
  set_has_changeequipinfo();
  if (changeequipinfo_ == NULL) changeequipinfo_ = new ::ChangeEquipInfo;
  // @@protoc_insertion_point(field_mutable:PlayInfo.changeEquipInfo)
  return changeequipinfo_;
}
inline ::ChangeEquipInfo* PlayInfo::release_changeequipinfo() {
  clear_has_changeequipinfo();
  ::ChangeEquipInfo* temp = changeequipinfo_;
  changeequipinfo_ = NULL;
  return temp;
}
inline void PlayInfo::set_allocated_changeequipinfo(::ChangeEquipInfo* changeequipinfo) {
  delete changeequipinfo_;
  changeequipinfo_ = changeequipinfo;
  if (changeequipinfo) {
    set_has_changeequipinfo();
  } else {
    clear_has_changeequipinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:PlayInfo.changeEquipInfo)
}

// optional int32 deleteflag = 9;
inline bool PlayInfo::has_deleteflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayInfo::set_has_deleteflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayInfo::clear_has_deleteflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayInfo::clear_deleteflag() {
  deleteflag_ = 0;
  clear_has_deleteflag();
}
inline ::google::protobuf::int32 PlayInfo::deleteflag() const {
  // @@protoc_insertion_point(field_get:PlayInfo.deleteflag)
  return deleteflag_;
}
inline void PlayInfo::set_deleteflag(::google::protobuf::int32 value) {
  set_has_deleteflag();
  deleteflag_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.deleteflag)
}

// optional int32 currSceneId = 10;
inline bool PlayInfo::has_currsceneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayInfo::set_has_currsceneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayInfo::clear_has_currsceneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayInfo::clear_currsceneid() {
  currsceneid_ = 0;
  clear_has_currsceneid();
}
inline ::google::protobuf::int32 PlayInfo::currsceneid() const {
  // @@protoc_insertion_point(field_get:PlayInfo.currSceneId)
  return currsceneid_;
}
inline void PlayInfo::set_currsceneid(::google::protobuf::int32 value) {
  set_has_currsceneid();
  currsceneid_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.currSceneId)
}

// optional int64 createTime = 11;
inline bool PlayInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayInfo::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 PlayInfo::createtime() const {
  // @@protoc_insertion_point(field_get:PlayInfo.createTime)
  return createtime_;
}
inline void PlayInfo::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.createTime)
}

// optional int32 powerEffect = 12;
inline bool PlayInfo::has_powereffect() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayInfo::set_has_powereffect() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayInfo::clear_has_powereffect() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayInfo::clear_powereffect() {
  powereffect_ = 0;
  clear_has_powereffect();
}
inline ::google::protobuf::int32 PlayInfo::powereffect() const {
  // @@protoc_insertion_point(field_get:PlayInfo.powerEffect)
  return powereffect_;
}
inline void PlayInfo::set_powereffect(::google::protobuf::int32 value) {
  set_has_powereffect();
  powereffect_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.powerEffect)
}

// optional int32 awakeEffect = 13;
inline bool PlayInfo::has_awakeeffect() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayInfo::set_has_awakeeffect() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayInfo::clear_has_awakeeffect() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayInfo::clear_awakeeffect() {
  awakeeffect_ = 0;
  clear_has_awakeeffect();
}
inline ::google::protobuf::int32 PlayInfo::awakeeffect() const {
  // @@protoc_insertion_point(field_get:PlayInfo.awakeEffect)
  return awakeeffect_;
}
inline void PlayInfo::set_awakeeffect(::google::protobuf::int32 value) {
  set_has_awakeeffect();
  awakeeffect_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.awakeEffect)
}

// optional int32 gemEffect = 14;
inline bool PlayInfo::has_gemeffect() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayInfo::set_has_gemeffect() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayInfo::clear_has_gemeffect() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayInfo::clear_gemeffect() {
  gemeffect_ = 0;
  clear_has_gemeffect();
}
inline ::google::protobuf::int32 PlayInfo::gemeffect() const {
  // @@protoc_insertion_point(field_get:PlayInfo.gemEffect)
  return gemeffect_;
}
inline void PlayInfo::set_gemeffect(::google::protobuf::int32 value) {
  set_has_gemeffect();
  gemeffect_ = value;
  // @@protoc_insertion_point(field_set:PlayInfo.gemEffect)
}

// -------------------------------------------------------------------

// GCLoginBack

// optional int32 flag = 1;
inline bool GCLoginBack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCLoginBack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCLoginBack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCLoginBack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCLoginBack::flag() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.flag)
  return flag_;
}
inline void GCLoginBack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.flag)
}

// optional int32 gameServerId = 2;
inline bool GCLoginBack::has_gameserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCLoginBack::set_has_gameserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCLoginBack::clear_has_gameserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCLoginBack::clear_gameserverid() {
  gameserverid_ = 0;
  clear_has_gameserverid();
}
inline ::google::protobuf::int32 GCLoginBack::gameserverid() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.gameServerId)
  return gameserverid_;
}
inline void GCLoginBack::set_gameserverid(::google::protobuf::int32 value) {
  set_has_gameserverid();
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.gameServerId)
}

// optional int64 currPlayerId = 3;
inline bool GCLoginBack::has_currplayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCLoginBack::set_has_currplayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCLoginBack::clear_has_currplayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCLoginBack::clear_currplayerid() {
  currplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_currplayerid();
}
inline ::google::protobuf::int64 GCLoginBack::currplayerid() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.currPlayerId)
  return currplayerid_;
}
inline void GCLoginBack::set_currplayerid(::google::protobuf::int64 value) {
  set_has_currplayerid();
  currplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.currPlayerId)
}

// repeated .PlayInfo playerList = 4;
inline int GCLoginBack::playerlist_size() const {
  return playerlist_.size();
}
inline void GCLoginBack::clear_playerlist() {
  playerlist_.Clear();
}
inline const ::PlayInfo& GCLoginBack::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:GCLoginBack.playerList)
  return playerlist_.Get(index);
}
inline ::PlayInfo* GCLoginBack::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:GCLoginBack.playerList)
  return playerlist_.Mutable(index);
}
inline ::PlayInfo* GCLoginBack::add_playerlist() {
  // @@protoc_insertion_point(field_add:GCLoginBack.playerList)
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayInfo >&
GCLoginBack::playerlist() const {
  // @@protoc_insertion_point(field_list:GCLoginBack.playerList)
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayInfo >*
GCLoginBack::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:GCLoginBack.playerList)
  return &playerlist_;
}

// optional int64 accountID = 5;
inline bool GCLoginBack::has_accountid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCLoginBack::set_has_accountid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCLoginBack::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCLoginBack::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 GCLoginBack::accountid() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.accountID)
  return accountid_;
}
inline void GCLoginBack::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.accountID)
}

// optional int64 eniqueID = 6;
inline bool GCLoginBack::has_eniqueid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCLoginBack::set_has_eniqueid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCLoginBack::clear_has_eniqueid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCLoginBack::clear_eniqueid() {
  eniqueid_ = GOOGLE_LONGLONG(0);
  clear_has_eniqueid();
}
inline ::google::protobuf::int64 GCLoginBack::eniqueid() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.eniqueID)
  return eniqueid_;
}
inline void GCLoginBack::set_eniqueid(::google::protobuf::int64 value) {
  set_has_eniqueid();
  eniqueid_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.eniqueID)
}

// optional int32 queueSize = 7;
inline bool GCLoginBack::has_queuesize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GCLoginBack::set_has_queuesize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GCLoginBack::clear_has_queuesize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GCLoginBack::clear_queuesize() {
  queuesize_ = 0;
  clear_has_queuesize();
}
inline ::google::protobuf::int32 GCLoginBack::queuesize() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.queueSize)
  return queuesize_;
}
inline void GCLoginBack::set_queuesize(::google::protobuf::int32 value) {
  set_has_queuesize();
  queuesize_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.queueSize)
}

// optional int32 loginType = 8;
inline bool GCLoginBack::has_logintype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCLoginBack::set_has_logintype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCLoginBack::clear_has_logintype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCLoginBack::clear_logintype() {
  logintype_ = 0;
  clear_has_logintype();
}
inline ::google::protobuf::int32 GCLoginBack::logintype() const {
  // @@protoc_insertion_point(field_get:GCLoginBack.loginType)
  return logintype_;
}
inline void GCLoginBack::set_logintype(::google::protobuf::int32 value) {
  set_has_logintype();
  logintype_ = value;
  // @@protoc_insertion_point(field_set:GCLoginBack.loginType)
}

// -------------------------------------------------------------------

// CGGetRandName

// -------------------------------------------------------------------

// GCGetRandNameBack

// repeated string manname = 7;
inline int GCGetRandNameBack::manname_size() const {
  return manname_.size();
}
inline void GCGetRandNameBack::clear_manname() {
  manname_.Clear();
}
inline const ::std::string& GCGetRandNameBack::manname(int index) const {
  // @@protoc_insertion_point(field_get:GCGetRandNameBack.manname)
  return manname_.Get(index);
}
inline ::std::string* GCGetRandNameBack::mutable_manname(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetRandNameBack.manname)
  return manname_.Mutable(index);
}
inline void GCGetRandNameBack::set_manname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GCGetRandNameBack.manname)
  manname_.Mutable(index)->assign(value);
}
inline void GCGetRandNameBack::set_manname(int index, const char* value) {
  manname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetRandNameBack.manname)
}
inline void GCGetRandNameBack::set_manname(int index, const char* value, size_t size) {
  manname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetRandNameBack.manname)
}
inline ::std::string* GCGetRandNameBack::add_manname() {
  return manname_.Add();
}
inline void GCGetRandNameBack::add_manname(const ::std::string& value) {
  manname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GCGetRandNameBack.manname)
}
inline void GCGetRandNameBack::add_manname(const char* value) {
  manname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GCGetRandNameBack.manname)
}
inline void GCGetRandNameBack::add_manname(const char* value, size_t size) {
  manname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GCGetRandNameBack.manname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCGetRandNameBack::manname() const {
  // @@protoc_insertion_point(field_list:GCGetRandNameBack.manname)
  return manname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCGetRandNameBack::mutable_manname() {
  // @@protoc_insertion_point(field_mutable_list:GCGetRandNameBack.manname)
  return &manname_;
}

// repeated string womanname = 8;
inline int GCGetRandNameBack::womanname_size() const {
  return womanname_.size();
}
inline void GCGetRandNameBack::clear_womanname() {
  womanname_.Clear();
}
inline const ::std::string& GCGetRandNameBack::womanname(int index) const {
  // @@protoc_insertion_point(field_get:GCGetRandNameBack.womanname)
  return womanname_.Get(index);
}
inline ::std::string* GCGetRandNameBack::mutable_womanname(int index) {
  // @@protoc_insertion_point(field_mutable:GCGetRandNameBack.womanname)
  return womanname_.Mutable(index);
}
inline void GCGetRandNameBack::set_womanname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:GCGetRandNameBack.womanname)
  womanname_.Mutable(index)->assign(value);
}
inline void GCGetRandNameBack::set_womanname(int index, const char* value) {
  womanname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GCGetRandNameBack.womanname)
}
inline void GCGetRandNameBack::set_womanname(int index, const char* value, size_t size) {
  womanname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCGetRandNameBack.womanname)
}
inline ::std::string* GCGetRandNameBack::add_womanname() {
  return womanname_.Add();
}
inline void GCGetRandNameBack::add_womanname(const ::std::string& value) {
  womanname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GCGetRandNameBack.womanname)
}
inline void GCGetRandNameBack::add_womanname(const char* value) {
  womanname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GCGetRandNameBack.womanname)
}
inline void GCGetRandNameBack::add_womanname(const char* value, size_t size) {
  womanname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GCGetRandNameBack.womanname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GCGetRandNameBack::womanname() const {
  // @@protoc_insertion_point(field_list:GCGetRandNameBack.womanname)
  return womanname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GCGetRandNameBack::mutable_womanname() {
  // @@protoc_insertion_point(field_mutable_list:GCGetRandNameBack.womanname)
  return &womanname_;
}

// -------------------------------------------------------------------

// CGCreatePlayer

// optional int32 professionId = 1;
inline bool CGCreatePlayer::has_professionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGCreatePlayer::set_has_professionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGCreatePlayer::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGCreatePlayer::clear_professionid() {
  professionid_ = 0;
  clear_has_professionid();
}
inline ::google::protobuf::int32 CGCreatePlayer::professionid() const {
  // @@protoc_insertion_point(field_get:CGCreatePlayer.professionId)
  return professionid_;
}
inline void CGCreatePlayer::set_professionid(::google::protobuf::int32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:CGCreatePlayer.professionId)
}

// optional string playerName = 2;
inline bool CGCreatePlayer::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGCreatePlayer::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGCreatePlayer::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGCreatePlayer::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& CGCreatePlayer::playername() const {
  // @@protoc_insertion_point(field_get:CGCreatePlayer.playerName)
  return *playername_;
}
inline void CGCreatePlayer::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:CGCreatePlayer.playerName)
}
inline void CGCreatePlayer::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGCreatePlayer.playerName)
}
inline void CGCreatePlayer::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGCreatePlayer.playerName)
}
inline ::std::string* CGCreatePlayer::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGCreatePlayer.playerName)
  return playername_;
}
inline ::std::string* CGCreatePlayer::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGCreatePlayer::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGCreatePlayer.playerName)
}

// optional int32 sex = 3;
inline bool CGCreatePlayer::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGCreatePlayer::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGCreatePlayer::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGCreatePlayer::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 CGCreatePlayer::sex() const {
  // @@protoc_insertion_point(field_get:CGCreatePlayer.sex)
  return sex_;
}
inline void CGCreatePlayer::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:CGCreatePlayer.sex)
}

// -------------------------------------------------------------------

// GCCreatePlayerOK

// optional int32 flag = 1;
inline bool GCCreatePlayerOK::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCreatePlayerOK::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCreatePlayerOK::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCreatePlayerOK::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 GCCreatePlayerOK::flag() const {
  // @@protoc_insertion_point(field_get:GCCreatePlayerOK.flag)
  return flag_;
}
inline void GCCreatePlayerOK::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:GCCreatePlayerOK.flag)
}

// optional .PlayInfo newPlayer = 2;
inline bool GCCreatePlayerOK::has_newplayer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCCreatePlayerOK::set_has_newplayer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCCreatePlayerOK::clear_has_newplayer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCCreatePlayerOK::clear_newplayer() {
  if (newplayer_ != NULL) newplayer_->::PlayInfo::Clear();
  clear_has_newplayer();
}
inline const ::PlayInfo& GCCreatePlayerOK::newplayer() const {
  // @@protoc_insertion_point(field_get:GCCreatePlayerOK.newPlayer)
  return newplayer_ != NULL ? *newplayer_ : *default_instance_->newplayer_;
}
inline ::PlayInfo* GCCreatePlayerOK::mutable_newplayer() {
  set_has_newplayer();
  if (newplayer_ == NULL) newplayer_ = new ::PlayInfo;
  // @@protoc_insertion_point(field_mutable:GCCreatePlayerOK.newPlayer)
  return newplayer_;
}
inline ::PlayInfo* GCCreatePlayerOK::release_newplayer() {
  clear_has_newplayer();
  ::PlayInfo* temp = newplayer_;
  newplayer_ = NULL;
  return temp;
}
inline void GCCreatePlayerOK::set_allocated_newplayer(::PlayInfo* newplayer) {
  delete newplayer_;
  newplayer_ = newplayer;
  if (newplayer) {
    set_has_newplayer();
  } else {
    clear_has_newplayer();
  }
  // @@protoc_insertion_point(field_set_allocated:GCCreatePlayerOK.newPlayer)
}

// -------------------------------------------------------------------

// CGLoginGameServer

// optional int64 playerId = 1;
inline bool CGLoginGameServer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGLoginGameServer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGLoginGameServer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGLoginGameServer::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGLoginGameServer::playerid() const {
  // @@protoc_insertion_point(field_get:CGLoginGameServer.playerId)
  return playerid_;
}
inline void CGLoginGameServer::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGLoginGameServer.playerId)
}

// -------------------------------------------------------------------

// GCLoginGameServer

// optional .CharacterInfo player = 1;
inline bool GCLoginGameServer::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCLoginGameServer::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCLoginGameServer::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCLoginGameServer::clear_player() {
  if (player_ != NULL) player_->::CharacterInfo::Clear();
  clear_has_player();
}
inline const ::CharacterInfo& GCLoginGameServer::player() const {
  // @@protoc_insertion_point(field_get:GCLoginGameServer.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::CharacterInfo* GCLoginGameServer::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::CharacterInfo;
  // @@protoc_insertion_point(field_mutable:GCLoginGameServer.player)
  return player_;
}
inline ::CharacterInfo* GCLoginGameServer::release_player() {
  clear_has_player();
  ::CharacterInfo* temp = player_;
  player_ = NULL;
  return temp;
}
inline void GCLoginGameServer::set_allocated_player(::CharacterInfo* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:GCLoginGameServer.player)
}

// -------------------------------------------------------------------

// CGDeletePlayer

// optional int64 playerId = 1;
inline bool CGDeletePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGDeletePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGDeletePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGDeletePlayer::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGDeletePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:CGDeletePlayer.playerId)
  return playerid_;
}
inline void CGDeletePlayer::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGDeletePlayer.playerId)
}

// -------------------------------------------------------------------

// GCDeletePlayer

// optional int64 playerId = 1;
inline bool GCDeletePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCDeletePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCDeletePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCDeletePlayer::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCDeletePlayer::playerid() const {
  // @@protoc_insertion_point(field_get:GCDeletePlayer.playerId)
  return playerid_;
}
inline void GCDeletePlayer::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCDeletePlayer.playerId)
}

// -------------------------------------------------------------------

// LGForceOffLine

// optional int64 playerID = 1;
inline bool LGForceOffLine::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGForceOffLine::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGForceOffLine::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGForceOffLine::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 LGForceOffLine::playerid() const {
  // @@protoc_insertion_point(field_get:LGForceOffLine.playerID)
  return playerid_;
}
inline void LGForceOffLine::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:LGForceOffLine.playerID)
}

// optional int32 messageID = 2;
inline bool LGForceOffLine::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGForceOffLine::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGForceOffLine::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGForceOffLine::clear_messageid() {
  messageid_ = 0;
  clear_has_messageid();
}
inline ::google::protobuf::int32 LGForceOffLine::messageid() const {
  // @@protoc_insertion_point(field_get:LGForceOffLine.messageID)
  return messageid_;
}
inline void LGForceOffLine::set_messageid(::google::protobuf::int32 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:LGForceOffLine.messageID)
}

// -------------------------------------------------------------------

// GLCheckVilidCode

// optional string uid = 1;
inline bool GLCheckVilidCode::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLCheckVilidCode::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLCheckVilidCode::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLCheckVilidCode::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& GLCheckVilidCode::uid() const {
  // @@protoc_insertion_point(field_get:GLCheckVilidCode.uid)
  return *uid_;
}
inline void GLCheckVilidCode::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:GLCheckVilidCode.uid)
}
inline void GLCheckVilidCode::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLCheckVilidCode.uid)
}
inline void GLCheckVilidCode::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLCheckVilidCode.uid)
}
inline ::std::string* GLCheckVilidCode::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLCheckVilidCode.uid)
  return uid_;
}
inline ::std::string* GLCheckVilidCode::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLCheckVilidCode::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLCheckVilidCode.uid)
}

// optional string vilidCode = 2;
inline bool GLCheckVilidCode::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLCheckVilidCode::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLCheckVilidCode::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLCheckVilidCode::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& GLCheckVilidCode::vilidcode() const {
  // @@protoc_insertion_point(field_get:GLCheckVilidCode.vilidCode)
  return *vilidcode_;
}
inline void GLCheckVilidCode::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:GLCheckVilidCode.vilidCode)
}
inline void GLCheckVilidCode::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLCheckVilidCode.vilidCode)
}
inline void GLCheckVilidCode::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLCheckVilidCode.vilidCode)
}
inline ::std::string* GLCheckVilidCode::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLCheckVilidCode.vilidCode)
  return vilidcode_;
}
inline ::std::string* GLCheckVilidCode::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLCheckVilidCode::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLCheckVilidCode.vilidCode)
}

// optional string platForm = 3;
inline bool GLCheckVilidCode::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLCheckVilidCode::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLCheckVilidCode::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLCheckVilidCode::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& GLCheckVilidCode::platform() const {
  // @@protoc_insertion_point(field_get:GLCheckVilidCode.platForm)
  return *platform_;
}
inline void GLCheckVilidCode::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:GLCheckVilidCode.platForm)
}
inline void GLCheckVilidCode::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLCheckVilidCode.platForm)
}
inline void GLCheckVilidCode::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLCheckVilidCode.platForm)
}
inline ::std::string* GLCheckVilidCode::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLCheckVilidCode.platForm)
  return platform_;
}
inline ::std::string* GLCheckVilidCode::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLCheckVilidCode::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLCheckVilidCode.platForm)
}

// -------------------------------------------------------------------

// LGCheckVilidCodeBack

// optional int32 result = 1;
inline bool LGCheckVilidCodeBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGCheckVilidCodeBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGCheckVilidCodeBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LGCheckVilidCodeBack::result() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.result)
  return result_;
}
inline void LGCheckVilidCodeBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.result)
}

// optional int64 accountID = 2;
inline bool LGCheckVilidCodeBack::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGCheckVilidCodeBack::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGCheckVilidCodeBack::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 LGCheckVilidCodeBack::accountid() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.accountID)
  return accountid_;
}
inline void LGCheckVilidCodeBack::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.accountID)
}

// optional int64 playerID = 3;
inline bool LGCheckVilidCodeBack::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGCheckVilidCodeBack::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGCheckVilidCodeBack::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 LGCheckVilidCodeBack::playerid() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.playerID)
  return playerid_;
}
inline void LGCheckVilidCodeBack::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.playerID)
}

// optional string uid = 4;
inline bool LGCheckVilidCodeBack::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGCheckVilidCodeBack::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGCheckVilidCodeBack::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& LGCheckVilidCodeBack::uid() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.uid)
  return *uid_;
}
inline void LGCheckVilidCodeBack::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.uid)
}
inline void LGCheckVilidCodeBack::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGCheckVilidCodeBack.uid)
}
inline void LGCheckVilidCodeBack::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGCheckVilidCodeBack.uid)
}
inline ::std::string* LGCheckVilidCodeBack::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGCheckVilidCodeBack.uid)
  return uid_;
}
inline ::std::string* LGCheckVilidCodeBack::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGCheckVilidCodeBack::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGCheckVilidCodeBack.uid)
}

// optional string vilidCode = 5;
inline bool LGCheckVilidCodeBack::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LGCheckVilidCodeBack::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LGCheckVilidCodeBack::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& LGCheckVilidCodeBack::vilidcode() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.vilidCode)
  return *vilidcode_;
}
inline void LGCheckVilidCodeBack::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.vilidCode)
}
inline void LGCheckVilidCodeBack::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGCheckVilidCodeBack.vilidCode)
}
inline void LGCheckVilidCodeBack::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGCheckVilidCodeBack.vilidCode)
}
inline ::std::string* LGCheckVilidCodeBack::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGCheckVilidCodeBack.vilidCode)
  return vilidcode_;
}
inline ::std::string* LGCheckVilidCodeBack::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGCheckVilidCodeBack::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGCheckVilidCodeBack.vilidCode)
}

// optional string platForm = 6;
inline bool LGCheckVilidCodeBack::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LGCheckVilidCodeBack::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LGCheckVilidCodeBack::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LGCheckVilidCodeBack::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& LGCheckVilidCodeBack::platform() const {
  // @@protoc_insertion_point(field_get:LGCheckVilidCodeBack.platForm)
  return *platform_;
}
inline void LGCheckVilidCodeBack::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:LGCheckVilidCodeBack.platForm)
}
inline void LGCheckVilidCodeBack::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGCheckVilidCodeBack.platForm)
}
inline void LGCheckVilidCodeBack::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGCheckVilidCodeBack.platForm)
}
inline ::std::string* LGCheckVilidCodeBack::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGCheckVilidCodeBack.platForm)
  return platform_;
}
inline ::std::string* LGCheckVilidCodeBack::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGCheckVilidCodeBack::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGCheckVilidCodeBack.platForm)
}

// -------------------------------------------------------------------

// GLLoginSuccess

// optional int64 playerID = 1;
inline bool GLLoginSuccess::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLLoginSuccess::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLLoginSuccess::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLLoginSuccess::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GLLoginSuccess::playerid() const {
  // @@protoc_insertion_point(field_get:GLLoginSuccess.playerID)
  return playerid_;
}
inline void GLLoginSuccess::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GLLoginSuccess.playerID)
}

// optional int64 accountID = 2;
inline bool GLLoginSuccess::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLLoginSuccess::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLLoginSuccess::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLLoginSuccess::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 GLLoginSuccess::accountid() const {
  // @@protoc_insertion_point(field_get:GLLoginSuccess.accountID)
  return accountid_;
}
inline void GLLoginSuccess::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:GLLoginSuccess.accountID)
}

// optional string vilidCode = 3;
inline bool GLLoginSuccess::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLLoginSuccess::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLLoginSuccess::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLLoginSuccess::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& GLLoginSuccess::vilidcode() const {
  // @@protoc_insertion_point(field_get:GLLoginSuccess.vilidCode)
  return *vilidcode_;
}
inline void GLLoginSuccess::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:GLLoginSuccess.vilidCode)
}
inline void GLLoginSuccess::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLLoginSuccess.vilidCode)
}
inline void GLLoginSuccess::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLLoginSuccess.vilidCode)
}
inline ::std::string* GLLoginSuccess::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLLoginSuccess.vilidCode)
  return vilidcode_;
}
inline ::std::string* GLLoginSuccess::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLLoginSuccess::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLLoginSuccess.vilidCode)
}

// optional int32 onlineNum = 4;
inline bool GLLoginSuccess::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLLoginSuccess::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLLoginSuccess::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLLoginSuccess::clear_onlinenum() {
  onlinenum_ = 0;
  clear_has_onlinenum();
}
inline ::google::protobuf::int32 GLLoginSuccess::onlinenum() const {
  // @@protoc_insertion_point(field_get:GLLoginSuccess.onlineNum)
  return onlinenum_;
}
inline void GLLoginSuccess::set_onlinenum(::google::protobuf::int32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
  // @@protoc_insertion_point(field_set:GLLoginSuccess.onlineNum)
}

// -------------------------------------------------------------------

// GLPlayerOffLine

// optional int64 playerID = 1;
inline bool GLPlayerOffLine::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLPlayerOffLine::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLPlayerOffLine::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLPlayerOffLine::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GLPlayerOffLine::playerid() const {
  // @@protoc_insertion_point(field_get:GLPlayerOffLine.playerID)
  return playerid_;
}
inline void GLPlayerOffLine::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GLPlayerOffLine.playerID)
}

// optional int64 accountID = 2;
inline bool GLPlayerOffLine::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLPlayerOffLine::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLPlayerOffLine::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLPlayerOffLine::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 GLPlayerOffLine::accountid() const {
  // @@protoc_insertion_point(field_get:GLPlayerOffLine.accountID)
  return accountid_;
}
inline void GLPlayerOffLine::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:GLPlayerOffLine.accountID)
}

// optional int32 onlineNum = 3;
inline bool GLPlayerOffLine::has_onlinenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLPlayerOffLine::set_has_onlinenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLPlayerOffLine::clear_has_onlinenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLPlayerOffLine::clear_onlinenum() {
  onlinenum_ = 0;
  clear_has_onlinenum();
}
inline ::google::protobuf::int32 GLPlayerOffLine::onlinenum() const {
  // @@protoc_insertion_point(field_get:GLPlayerOffLine.onlineNum)
  return onlinenum_;
}
inline void GLPlayerOffLine::set_onlinenum(::google::protobuf::int32 value) {
  set_has_onlinenum();
  onlinenum_ = value;
  // @@protoc_insertion_point(field_set:GLPlayerOffLine.onlineNum)
}

// -------------------------------------------------------------------

// CLBeforeLogin

// optional string uid = 1;
inline bool CLBeforeLogin::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLBeforeLogin::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLBeforeLogin::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLBeforeLogin::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CLBeforeLogin::uid() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.uid)
  return *uid_;
}
inline void CLBeforeLogin::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.uid)
}
inline void CLBeforeLogin::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.uid)
}
inline void CLBeforeLogin::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.uid)
}
inline ::std::string* CLBeforeLogin::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.uid)
  return uid_;
}
inline ::std::string* CLBeforeLogin::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.uid)
}

// optional string vilidCode = 2;
inline bool CLBeforeLogin::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLBeforeLogin::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLBeforeLogin::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLBeforeLogin::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& CLBeforeLogin::vilidcode() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.vilidCode)
  return *vilidcode_;
}
inline void CLBeforeLogin::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.vilidCode)
}
inline void CLBeforeLogin::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.vilidCode)
}
inline void CLBeforeLogin::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.vilidCode)
}
inline ::std::string* CLBeforeLogin::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.vilidCode)
  return vilidcode_;
}
inline ::std::string* CLBeforeLogin::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.vilidCode)
}

// optional string version = 3;
inline bool CLBeforeLogin::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLBeforeLogin::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLBeforeLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLBeforeLogin::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CLBeforeLogin::version() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.version)
  return *version_;
}
inline void CLBeforeLogin::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.version)
}
inline void CLBeforeLogin::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.version)
}
inline void CLBeforeLogin::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.version)
}
inline ::std::string* CLBeforeLogin::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.version)
  return version_;
}
inline ::std::string* CLBeforeLogin::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.version)
}

// optional string deviceInfo = 4;
inline bool CLBeforeLogin::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLBeforeLogin::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLBeforeLogin::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLBeforeLogin::clear_deviceinfo() {
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_->clear();
  }
  clear_has_deviceinfo();
}
inline const ::std::string& CLBeforeLogin::deviceinfo() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.deviceInfo)
  return *deviceinfo_;
}
inline void CLBeforeLogin::set_deviceinfo(const ::std::string& value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.deviceInfo)
}
inline void CLBeforeLogin::set_deviceinfo(const char* value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.deviceInfo)
}
inline void CLBeforeLogin::set_deviceinfo(const char* value, size_t size) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.deviceInfo)
}
inline ::std::string* CLBeforeLogin::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.deviceInfo)
  return deviceinfo_;
}
inline ::std::string* CLBeforeLogin::release_deviceinfo() {
  clear_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceinfo_;
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_deviceinfo(::std::string* deviceinfo) {
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    set_has_deviceinfo();
    deviceinfo_ = deviceinfo;
  } else {
    clear_has_deviceinfo();
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.deviceInfo)
}

// optional string platForm = 5;
inline bool CLBeforeLogin::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CLBeforeLogin::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CLBeforeLogin::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CLBeforeLogin::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& CLBeforeLogin::platform() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.platForm)
  return *platform_;
}
inline void CLBeforeLogin::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.platForm)
}
inline void CLBeforeLogin::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.platForm)
}
inline void CLBeforeLogin::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.platForm)
}
inline ::std::string* CLBeforeLogin::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.platForm)
  return platform_;
}
inline ::std::string* CLBeforeLogin::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.platForm)
}

// optional int64 accountID = 6;
inline bool CLBeforeLogin::has_accountid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CLBeforeLogin::set_has_accountid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CLBeforeLogin::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CLBeforeLogin::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 CLBeforeLogin::accountid() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.accountID)
  return accountid_;
}
inline void CLBeforeLogin::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:CLBeforeLogin.accountID)
}

// optional string authKey = 7;
inline bool CLBeforeLogin::has_authkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CLBeforeLogin::set_has_authkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CLBeforeLogin::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CLBeforeLogin::clear_authkey() {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_->clear();
  }
  clear_has_authkey();
}
inline const ::std::string& CLBeforeLogin::authkey() const {
  // @@protoc_insertion_point(field_get:CLBeforeLogin.authKey)
  return *authkey_;
}
inline void CLBeforeLogin::set_authkey(const ::std::string& value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set:CLBeforeLogin.authKey)
}
inline void CLBeforeLogin::set_authkey(const char* value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLBeforeLogin.authKey)
}
inline void CLBeforeLogin::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLBeforeLogin.authKey)
}
inline ::std::string* CLBeforeLogin::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLBeforeLogin.authKey)
  return authkey_;
}
inline ::std::string* CLBeforeLogin::release_authkey() {
  clear_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authkey_;
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLBeforeLogin::set_allocated_authkey(::std::string* authkey) {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (authkey) {
    set_has_authkey();
    authkey_ = authkey;
  } else {
    clear_has_authkey();
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLBeforeLogin.authKey)
}

// -------------------------------------------------------------------

// LCBeforeLoginBack

// optional int32 flag = 1;
inline bool LCBeforeLoginBack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LCBeforeLoginBack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LCBeforeLoginBack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LCBeforeLoginBack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 LCBeforeLoginBack::flag() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.flag)
  return flag_;
}
inline void LCBeforeLoginBack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.flag)
}

// optional int32 gameServerId = 2;
inline bool LCBeforeLoginBack::has_gameserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LCBeforeLoginBack::set_has_gameserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LCBeforeLoginBack::clear_has_gameserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LCBeforeLoginBack::clear_gameserverid() {
  gameserverid_ = 0;
  clear_has_gameserverid();
}
inline ::google::protobuf::int32 LCBeforeLoginBack::gameserverid() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.gameServerId)
  return gameserverid_;
}
inline void LCBeforeLoginBack::set_gameserverid(::google::protobuf::int32 value) {
  set_has_gameserverid();
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.gameServerId)
}

// optional string vilidCode = 3;
inline bool LCBeforeLoginBack::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LCBeforeLoginBack::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LCBeforeLoginBack::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LCBeforeLoginBack::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& LCBeforeLoginBack::vilidcode() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.vilidCode)
  return *vilidcode_;
}
inline void LCBeforeLoginBack::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.vilidCode)
}
inline void LCBeforeLoginBack::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCBeforeLoginBack.vilidCode)
}
inline void LCBeforeLoginBack::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCBeforeLoginBack.vilidCode)
}
inline ::std::string* LCBeforeLoginBack::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCBeforeLoginBack.vilidCode)
  return vilidcode_;
}
inline ::std::string* LCBeforeLoginBack::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCBeforeLoginBack::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCBeforeLoginBack.vilidCode)
}

// optional string host = 4;
inline bool LCBeforeLoginBack::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LCBeforeLoginBack::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LCBeforeLoginBack::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LCBeforeLoginBack::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& LCBeforeLoginBack::host() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.host)
  return *host_;
}
inline void LCBeforeLoginBack::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.host)
}
inline void LCBeforeLoginBack::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCBeforeLoginBack.host)
}
inline void LCBeforeLoginBack::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCBeforeLoginBack.host)
}
inline ::std::string* LCBeforeLoginBack::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCBeforeLoginBack.host)
  return host_;
}
inline ::std::string* LCBeforeLoginBack::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCBeforeLoginBack::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCBeforeLoginBack.host)
}

// optional int32 port = 5;
inline bool LCBeforeLoginBack::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LCBeforeLoginBack::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LCBeforeLoginBack::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LCBeforeLoginBack::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 LCBeforeLoginBack::port() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.port)
  return port_;
}
inline void LCBeforeLoginBack::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.port)
}

// optional int64 accountID = 6;
inline bool LCBeforeLoginBack::has_accountid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LCBeforeLoginBack::set_has_accountid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LCBeforeLoginBack::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LCBeforeLoginBack::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 LCBeforeLoginBack::accountid() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.accountID)
  return accountid_;
}
inline void LCBeforeLoginBack::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.accountID)
}

// optional string authKey = 7;
inline bool LCBeforeLoginBack::has_authkey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LCBeforeLoginBack::set_has_authkey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LCBeforeLoginBack::clear_has_authkey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LCBeforeLoginBack::clear_authkey() {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_->clear();
  }
  clear_has_authkey();
}
inline const ::std::string& LCBeforeLoginBack::authkey() const {
  // @@protoc_insertion_point(field_get:LCBeforeLoginBack.authKey)
  return *authkey_;
}
inline void LCBeforeLoginBack::set_authkey(const ::std::string& value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set:LCBeforeLoginBack.authKey)
}
inline void LCBeforeLoginBack::set_authkey(const char* value) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCBeforeLoginBack.authKey)
}
inline void LCBeforeLoginBack::set_authkey(const char* value, size_t size) {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  authkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCBeforeLoginBack.authKey)
}
inline ::std::string* LCBeforeLoginBack::mutable_authkey() {
  set_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    authkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCBeforeLoginBack.authKey)
  return authkey_;
}
inline ::std::string* LCBeforeLoginBack::release_authkey() {
  clear_has_authkey();
  if (authkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = authkey_;
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCBeforeLoginBack::set_allocated_authkey(::std::string* authkey) {
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (authkey) {
    set_has_authkey();
    authkey_ = authkey;
  } else {
    clear_has_authkey();
    authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCBeforeLoginBack.authKey)
}

// -------------------------------------------------------------------

// CLChangePlayerLogin

// optional string uname = 1;
inline bool CLChangePlayerLogin::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLChangePlayerLogin::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLChangePlayerLogin::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLChangePlayerLogin::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& CLChangePlayerLogin::uname() const {
  // @@protoc_insertion_point(field_get:CLChangePlayerLogin.uname)
  return *uname_;
}
inline void CLChangePlayerLogin::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:CLChangePlayerLogin.uname)
}
inline void CLChangePlayerLogin::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLChangePlayerLogin.uname)
}
inline void CLChangePlayerLogin::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLChangePlayerLogin.uname)
}
inline ::std::string* CLChangePlayerLogin::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLChangePlayerLogin.uname)
  return uname_;
}
inline ::std::string* CLChangePlayerLogin::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLChangePlayerLogin::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLChangePlayerLogin.uname)
}

// optional string pwd = 2;
inline bool CLChangePlayerLogin::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLChangePlayerLogin::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLChangePlayerLogin::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLChangePlayerLogin::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& CLChangePlayerLogin::pwd() const {
  // @@protoc_insertion_point(field_get:CLChangePlayerLogin.pwd)
  return *pwd_;
}
inline void CLChangePlayerLogin::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:CLChangePlayerLogin.pwd)
}
inline void CLChangePlayerLogin::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLChangePlayerLogin.pwd)
}
inline void CLChangePlayerLogin::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLChangePlayerLogin.pwd)
}
inline ::std::string* CLChangePlayerLogin::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLChangePlayerLogin.pwd)
  return pwd_;
}
inline ::std::string* CLChangePlayerLogin::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLChangePlayerLogin::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLChangePlayerLogin.pwd)
}

// optional string version = 3;
inline bool CLChangePlayerLogin::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CLChangePlayerLogin::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CLChangePlayerLogin::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CLChangePlayerLogin::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CLChangePlayerLogin::version() const {
  // @@protoc_insertion_point(field_get:CLChangePlayerLogin.version)
  return *version_;
}
inline void CLChangePlayerLogin::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:CLChangePlayerLogin.version)
}
inline void CLChangePlayerLogin::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLChangePlayerLogin.version)
}
inline void CLChangePlayerLogin::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLChangePlayerLogin.version)
}
inline ::std::string* CLChangePlayerLogin::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLChangePlayerLogin.version)
  return version_;
}
inline ::std::string* CLChangePlayerLogin::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLChangePlayerLogin::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLChangePlayerLogin.version)
}

// optional string deviceInfo = 4;
inline bool CLChangePlayerLogin::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CLChangePlayerLogin::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CLChangePlayerLogin::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CLChangePlayerLogin::clear_deviceinfo() {
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_->clear();
  }
  clear_has_deviceinfo();
}
inline const ::std::string& CLChangePlayerLogin::deviceinfo() const {
  // @@protoc_insertion_point(field_get:CLChangePlayerLogin.deviceInfo)
  return *deviceinfo_;
}
inline void CLChangePlayerLogin::set_deviceinfo(const ::std::string& value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
  // @@protoc_insertion_point(field_set:CLChangePlayerLogin.deviceInfo)
}
inline void CLChangePlayerLogin::set_deviceinfo(const char* value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:CLChangePlayerLogin.deviceInfo)
}
inline void CLChangePlayerLogin::set_deviceinfo(const char* value, size_t size) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLChangePlayerLogin.deviceInfo)
}
inline ::std::string* CLChangePlayerLogin::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CLChangePlayerLogin.deviceInfo)
  return deviceinfo_;
}
inline ::std::string* CLChangePlayerLogin::release_deviceinfo() {
  clear_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceinfo_;
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLChangePlayerLogin::set_allocated_deviceinfo(::std::string* deviceinfo) {
  if (deviceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    set_has_deviceinfo();
    deviceinfo_ = deviceinfo;
  } else {
    clear_has_deviceinfo();
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CLChangePlayerLogin.deviceInfo)
}

// -------------------------------------------------------------------

// LCChangePlayerBack

// optional int32 flag = 1;
inline bool LCChangePlayerBack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LCChangePlayerBack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LCChangePlayerBack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LCChangePlayerBack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 LCChangePlayerBack::flag() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.flag)
  return flag_;
}
inline void LCChangePlayerBack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.flag)
}

// optional int32 gameServerId = 2;
inline bool LCChangePlayerBack::has_gameserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LCChangePlayerBack::set_has_gameserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LCChangePlayerBack::clear_has_gameserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LCChangePlayerBack::clear_gameserverid() {
  gameserverid_ = 0;
  clear_has_gameserverid();
}
inline ::google::protobuf::int32 LCChangePlayerBack::gameserverid() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.gameServerId)
  return gameserverid_;
}
inline void LCChangePlayerBack::set_gameserverid(::google::protobuf::int32 value) {
  set_has_gameserverid();
  gameserverid_ = value;
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.gameServerId)
}

// optional string vilidCode = 3;
inline bool LCChangePlayerBack::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LCChangePlayerBack::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LCChangePlayerBack::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LCChangePlayerBack::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& LCChangePlayerBack::vilidcode() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.vilidCode)
  return *vilidcode_;
}
inline void LCChangePlayerBack::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.vilidCode)
}
inline void LCChangePlayerBack::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCChangePlayerBack.vilidCode)
}
inline void LCChangePlayerBack::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCChangePlayerBack.vilidCode)
}
inline ::std::string* LCChangePlayerBack::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCChangePlayerBack.vilidCode)
  return vilidcode_;
}
inline ::std::string* LCChangePlayerBack::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCChangePlayerBack::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCChangePlayerBack.vilidCode)
}

// optional string serverAddress = 4;
inline bool LCChangePlayerBack::has_serveraddress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LCChangePlayerBack::set_has_serveraddress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LCChangePlayerBack::clear_has_serveraddress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LCChangePlayerBack::clear_serveraddress() {
  if (serveraddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddress_->clear();
  }
  clear_has_serveraddress();
}
inline const ::std::string& LCChangePlayerBack::serveraddress() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.serverAddress)
  return *serveraddress_;
}
inline void LCChangePlayerBack::set_serveraddress(const ::std::string& value) {
  set_has_serveraddress();
  if (serveraddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddress_ = new ::std::string;
  }
  serveraddress_->assign(value);
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.serverAddress)
}
inline void LCChangePlayerBack::set_serveraddress(const char* value) {
  set_has_serveraddress();
  if (serveraddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddress_ = new ::std::string;
  }
  serveraddress_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCChangePlayerBack.serverAddress)
}
inline void LCChangePlayerBack::set_serveraddress(const char* value, size_t size) {
  set_has_serveraddress();
  if (serveraddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddress_ = new ::std::string;
  }
  serveraddress_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCChangePlayerBack.serverAddress)
}
inline ::std::string* LCChangePlayerBack::mutable_serveraddress() {
  set_has_serveraddress();
  if (serveraddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serveraddress_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCChangePlayerBack.serverAddress)
  return serveraddress_;
}
inline ::std::string* LCChangePlayerBack::release_serveraddress() {
  clear_has_serveraddress();
  if (serveraddress_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serveraddress_;
    serveraddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCChangePlayerBack::set_allocated_serveraddress(::std::string* serveraddress) {
  if (serveraddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serveraddress_;
  }
  if (serveraddress) {
    set_has_serveraddress();
    serveraddress_ = serveraddress;
  } else {
    clear_has_serveraddress();
    serveraddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCChangePlayerBack.serverAddress)
}

// optional string host = 5;
inline bool LCChangePlayerBack::has_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LCChangePlayerBack::set_has_host() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LCChangePlayerBack::clear_has_host() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LCChangePlayerBack::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& LCChangePlayerBack::host() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.host)
  return *host_;
}
inline void LCChangePlayerBack::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.host)
}
inline void LCChangePlayerBack::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:LCChangePlayerBack.host)
}
inline void LCChangePlayerBack::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LCChangePlayerBack.host)
}
inline ::std::string* LCChangePlayerBack::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LCChangePlayerBack.host)
  return host_;
}
inline ::std::string* LCChangePlayerBack::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LCChangePlayerBack::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LCChangePlayerBack.host)
}

// optional int32 port = 6;
inline bool LCChangePlayerBack::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LCChangePlayerBack::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LCChangePlayerBack::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LCChangePlayerBack::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 LCChangePlayerBack::port() const {
  // @@protoc_insertion_point(field_get:LCChangePlayerBack.port)
  return port_;
}
inline void LCChangePlayerBack::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:LCChangePlayerBack.port)
}

// -------------------------------------------------------------------

// GLGetPlayerLoginInfo

// optional string vilidCode = 1;
inline bool GLGetPlayerLoginInfo::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GLGetPlayerLoginInfo::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GLGetPlayerLoginInfo::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GLGetPlayerLoginInfo::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& GLGetPlayerLoginInfo::vilidcode() const {
  // @@protoc_insertion_point(field_get:GLGetPlayerLoginInfo.vilidCode)
  return *vilidcode_;
}
inline void GLGetPlayerLoginInfo::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:GLGetPlayerLoginInfo.vilidCode)
}
inline void GLGetPlayerLoginInfo::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLGetPlayerLoginInfo.vilidCode)
}
inline void GLGetPlayerLoginInfo::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLGetPlayerLoginInfo.vilidCode)
}
inline ::std::string* GLGetPlayerLoginInfo::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLGetPlayerLoginInfo.vilidCode)
  return vilidcode_;
}
inline ::std::string* GLGetPlayerLoginInfo::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLGetPlayerLoginInfo::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLGetPlayerLoginInfo.vilidCode)
}

// optional int64 accountID = 2;
inline bool GLGetPlayerLoginInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GLGetPlayerLoginInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GLGetPlayerLoginInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GLGetPlayerLoginInfo::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 GLGetPlayerLoginInfo::accountid() const {
  // @@protoc_insertion_point(field_get:GLGetPlayerLoginInfo.accountID)
  return accountid_;
}
inline void GLGetPlayerLoginInfo::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:GLGetPlayerLoginInfo.accountID)
}

// optional string platForm = 3;
inline bool GLGetPlayerLoginInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GLGetPlayerLoginInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GLGetPlayerLoginInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GLGetPlayerLoginInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& GLGetPlayerLoginInfo::platform() const {
  // @@protoc_insertion_point(field_get:GLGetPlayerLoginInfo.platForm)
  return *platform_;
}
inline void GLGetPlayerLoginInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:GLGetPlayerLoginInfo.platForm)
}
inline void GLGetPlayerLoginInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLGetPlayerLoginInfo.platForm)
}
inline void GLGetPlayerLoginInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLGetPlayerLoginInfo.platForm)
}
inline ::std::string* GLGetPlayerLoginInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLGetPlayerLoginInfo.platForm)
  return platform_;
}
inline ::std::string* GLGetPlayerLoginInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLGetPlayerLoginInfo::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLGetPlayerLoginInfo.platForm)
}

// optional string uid = 4;
inline bool GLGetPlayerLoginInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GLGetPlayerLoginInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GLGetPlayerLoginInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GLGetPlayerLoginInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& GLGetPlayerLoginInfo::uid() const {
  // @@protoc_insertion_point(field_get:GLGetPlayerLoginInfo.uid)
  return *uid_;
}
inline void GLGetPlayerLoginInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:GLGetPlayerLoginInfo.uid)
}
inline void GLGetPlayerLoginInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:GLGetPlayerLoginInfo.uid)
}
inline void GLGetPlayerLoginInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GLGetPlayerLoginInfo.uid)
}
inline ::std::string* GLGetPlayerLoginInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GLGetPlayerLoginInfo.uid)
  return uid_;
}
inline ::std::string* GLGetPlayerLoginInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GLGetPlayerLoginInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GLGetPlayerLoginInfo.uid)
}

// -------------------------------------------------------------------

// LGGetPlayerLoginInfoBack

// optional int32 result = 1;
inline bool LGGetPlayerLoginInfoBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LGGetPlayerLoginInfoBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LGGetPlayerLoginInfoBack::result() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.result)
  return result_;
}
inline void LGGetPlayerLoginInfoBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.result)
}

// optional int64 accountID = 2;
inline bool LGGetPlayerLoginInfoBack::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LGGetPlayerLoginInfoBack::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 LGGetPlayerLoginInfoBack::accountid() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.accountID)
  return accountid_;
}
inline void LGGetPlayerLoginInfoBack::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.accountID)
}

// optional int64 playerID = 3;
inline bool LGGetPlayerLoginInfoBack::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LGGetPlayerLoginInfoBack::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 LGGetPlayerLoginInfoBack::playerid() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.playerID)
  return playerid_;
}
inline void LGGetPlayerLoginInfoBack::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.playerID)
}

// optional string uid = 4;
inline bool LGGetPlayerLoginInfoBack::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LGGetPlayerLoginInfoBack::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& LGGetPlayerLoginInfoBack::uid() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.uid)
  return *uid_;
}
inline void LGGetPlayerLoginInfoBack::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.uid)
}
inline void LGGetPlayerLoginInfoBack::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGGetPlayerLoginInfoBack.uid)
}
inline void LGGetPlayerLoginInfoBack::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGGetPlayerLoginInfoBack.uid)
}
inline ::std::string* LGGetPlayerLoginInfoBack::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGGetPlayerLoginInfoBack.uid)
  return uid_;
}
inline ::std::string* LGGetPlayerLoginInfoBack::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGGetPlayerLoginInfoBack::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGGetPlayerLoginInfoBack.uid)
}

// optional string vilidCode = 5;
inline bool LGGetPlayerLoginInfoBack::has_vilidcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_vilidcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_vilidcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LGGetPlayerLoginInfoBack::clear_vilidcode() {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_->clear();
  }
  clear_has_vilidcode();
}
inline const ::std::string& LGGetPlayerLoginInfoBack::vilidcode() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.vilidCode)
  return *vilidcode_;
}
inline void LGGetPlayerLoginInfoBack::set_vilidcode(const ::std::string& value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.vilidCode)
}
inline void LGGetPlayerLoginInfoBack::set_vilidcode(const char* value) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGGetPlayerLoginInfoBack.vilidCode)
}
inline void LGGetPlayerLoginInfoBack::set_vilidcode(const char* value, size_t size) {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  vilidcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGGetPlayerLoginInfoBack.vilidCode)
}
inline ::std::string* LGGetPlayerLoginInfoBack::mutable_vilidcode() {
  set_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    vilidcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGGetPlayerLoginInfoBack.vilidCode)
  return vilidcode_;
}
inline ::std::string* LGGetPlayerLoginInfoBack::release_vilidcode() {
  clear_has_vilidcode();
  if (vilidcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = vilidcode_;
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGGetPlayerLoginInfoBack::set_allocated_vilidcode(::std::string* vilidcode) {
  if (vilidcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vilidcode_;
  }
  if (vilidcode) {
    set_has_vilidcode();
    vilidcode_ = vilidcode;
  } else {
    clear_has_vilidcode();
    vilidcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGGetPlayerLoginInfoBack.vilidCode)
}

// optional string platForm = 6;
inline bool LGGetPlayerLoginInfoBack::has_platform() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LGGetPlayerLoginInfoBack::set_has_platform() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LGGetPlayerLoginInfoBack::clear_has_platform() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LGGetPlayerLoginInfoBack::clear_platform() {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& LGGetPlayerLoginInfoBack::platform() const {
  // @@protoc_insertion_point(field_get:LGGetPlayerLoginInfoBack.platForm)
  return *platform_;
}
inline void LGGetPlayerLoginInfoBack::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set:LGGetPlayerLoginInfoBack.platForm)
}
inline void LGGetPlayerLoginInfoBack::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
  // @@protoc_insertion_point(field_set_char:LGGetPlayerLoginInfoBack.platForm)
}
inline void LGGetPlayerLoginInfoBack::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LGGetPlayerLoginInfoBack.platForm)
}
inline ::std::string* LGGetPlayerLoginInfoBack::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    platform_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LGGetPlayerLoginInfoBack.platForm)
  return platform_;
}
inline ::std::string* LGGetPlayerLoginInfoBack::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LGGetPlayerLoginInfoBack::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LGGetPlayerLoginInfoBack.platForm)
}

// -------------------------------------------------------------------

// LCPlayerLoginQueue

// optional int32 queueNum = 1;
inline bool LCPlayerLoginQueue::has_queuenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LCPlayerLoginQueue::set_has_queuenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LCPlayerLoginQueue::clear_has_queuenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LCPlayerLoginQueue::clear_queuenum() {
  queuenum_ = 0;
  clear_has_queuenum();
}
inline ::google::protobuf::int32 LCPlayerLoginQueue::queuenum() const {
  // @@protoc_insertion_point(field_get:LCPlayerLoginQueue.queueNum)
  return queuenum_;
}
inline void LCPlayerLoginQueue::set_queuenum(::google::protobuf::int32 value) {
  set_has_queuenum();
  queuenum_ = value;
  // @@protoc_insertion_point(field_set:LCPlayerLoginQueue.queueNum)
}

// -------------------------------------------------------------------

// CLPlayerCancelLoginQueue

// -------------------------------------------------------------------

// LCPlayerCancelLoginQueueBack

// optional int32 result = 1;
inline bool LCPlayerCancelLoginQueueBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LCPlayerCancelLoginQueueBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LCPlayerCancelLoginQueueBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LCPlayerCancelLoginQueueBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 LCPlayerCancelLoginQueueBack::result() const {
  // @@protoc_insertion_point(field_get:LCPlayerCancelLoginQueueBack.result)
  return result_;
}
inline void LCPlayerCancelLoginQueueBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:LCPlayerCancelLoginQueueBack.result)
}

// -------------------------------------------------------------------

// GCCommonSetting

// optional int32 debugFlag = 1;
inline bool GCCommonSetting::has_debugflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCCommonSetting::set_has_debugflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCCommonSetting::clear_has_debugflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCCommonSetting::clear_debugflag() {
  debugflag_ = 0;
  clear_has_debugflag();
}
inline ::google::protobuf::int32 GCCommonSetting::debugflag() const {
  // @@protoc_insertion_point(field_get:GCCommonSetting.debugFlag)
  return debugflag_;
}
inline void GCCommonSetting::set_debugflag(::google::protobuf::int32 value) {
  set_has_debugflag();
  debugflag_ = value;
  // @@protoc_insertion_point(field_set:GCCommonSetting.debugFlag)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginMessage_2eproto__INCLUDED
