// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MailMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MailMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendMailStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendMailStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSendMail2Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSendMail2Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendMail2Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendMail2Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSysSendMail2Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSysSendMail2Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGReadMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReadMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetItemInMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetItemInMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetItemInMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetItemInMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDelMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelMail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MailMessage_2eproto() {
  protobuf_AddDesc_MailMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MailMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MailInfo_descriptor_ = file->message_type(0);
  static const int MailInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, receiveplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, title_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  GCSendMailStatus_descriptor_ = file->message_type(1);
  static const int GCSendMailStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMailStatus, offread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMailStatus, total_),
  };
  GCSendMailStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendMailStatus_descriptor_,
      GCSendMailStatus::default_instance_,
      GCSendMailStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMailStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMailStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendMailStatus));
  CGSendMail2Player_descriptor_ = file->message_type(2);
  static const int CGSendMail2Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMail2Player, mail_),
  };
  CGSendMail2Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSendMail2Player_descriptor_,
      CGSendMail2Player::default_instance_,
      CGSendMail2Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMail2Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMail2Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSendMail2Player));
  GCSendMail2Player_descriptor_ = file->message_type(3);
  static const int GCSendMail2Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMail2Player, result_),
  };
  GCSendMail2Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendMail2Player_descriptor_,
      GCSendMail2Player::default_instance_,
      GCSendMail2Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMail2Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMail2Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendMail2Player));
  GCSysSendMail2Player_descriptor_ = file->message_type(4);
  static const int GCSysSendMail2Player_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSysSendMail2Player, mail_),
  };
  GCSysSendMail2Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSysSendMail2Player_descriptor_,
      GCSysSendMail2Player::default_instance_,
      GCSysSendMail2Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSysSendMail2Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSysSendMail2Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSysSendMail2Player));
  CGGetMailList_descriptor_ = file->message_type(5);
  static const int CGGetMailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetMailList, playerid_),
  };
  CGGetMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetMailList_descriptor_,
      CGGetMailList::default_instance_,
      CGGetMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetMailList));
  GCGetMailList_descriptor_ = file->message_type(6);
  static const int GCGetMailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailList, mails_),
  };
  GCGetMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetMailList_descriptor_,
      GCGetMailList::default_instance_,
      GCGetMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetMailList));
  CGReadMail_descriptor_ = file->message_type(7);
  static const int CGReadMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReadMail, mailid_),
  };
  CGReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGReadMail_descriptor_,
      CGReadMail::default_instance_,
      CGReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGReadMail));
  GCReadMail_descriptor_ = file->message_type(8);
  static const int GCReadMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReadMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReadMail, result_),
  };
  GCReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReadMail_descriptor_,
      GCReadMail::default_instance_,
      GCReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReadMail));
  CGGetItemInMail_descriptor_ = file->message_type(9);
  static const int CGGetItemInMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetItemInMail, mailid_),
  };
  CGGetItemInMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetItemInMail_descriptor_,
      CGGetItemInMail::default_instance_,
      CGGetItemInMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetItemInMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetItemInMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetItemInMail));
  GCGetItemInMail_descriptor_ = file->message_type(10);
  static const int GCGetItemInMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetItemInMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetItemInMail, result_),
  };
  GCGetItemInMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetItemInMail_descriptor_,
      GCGetItemInMail::default_instance_,
      GCGetItemInMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetItemInMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetItemInMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetItemInMail));
  CGDelMail_descriptor_ = file->message_type(11);
  static const int CGDelMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDelMail, mailid_),
  };
  CGDelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDelMail_descriptor_,
      CGDelMail::default_instance_,
      CGDelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDelMail));
  GCDelMail_descriptor_ = file->message_type(12);
  static const int GCDelMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelMail, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelMail, result_),
  };
  GCDelMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelMail_descriptor_,
      GCDelMail::default_instance_,
      GCDelMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelMail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MailMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendMailStatus_descriptor_, &GCSendMailStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSendMail2Player_descriptor_, &CGSendMail2Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendMail2Player_descriptor_, &GCSendMail2Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSysSendMail2Player_descriptor_, &GCSysSendMail2Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetMailList_descriptor_, &CGGetMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetMailList_descriptor_, &GCGetMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGReadMail_descriptor_, &CGReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReadMail_descriptor_, &GCReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetItemInMail_descriptor_, &CGGetItemInMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetItemInMail_descriptor_, &GCGetItemInMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDelMail_descriptor_, &CGDelMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelMail_descriptor_, &GCDelMail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MailMessage_2eproto() {
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete GCSendMailStatus::default_instance_;
  delete GCSendMailStatus_reflection_;
  delete CGSendMail2Player::default_instance_;
  delete CGSendMail2Player_reflection_;
  delete GCSendMail2Player::default_instance_;
  delete GCSendMail2Player_reflection_;
  delete GCSysSendMail2Player::default_instance_;
  delete GCSysSendMail2Player_reflection_;
  delete CGGetMailList::default_instance_;
  delete CGGetMailList_reflection_;
  delete GCGetMailList::default_instance_;
  delete GCGetMailList_reflection_;
  delete CGReadMail::default_instance_;
  delete CGReadMail_reflection_;
  delete GCReadMail::default_instance_;
  delete GCReadMail_reflection_;
  delete CGGetItemInMail::default_instance_;
  delete CGGetItemInMail_reflection_;
  delete GCGetItemInMail::default_instance_;
  delete GCGetItemInMail_reflection_;
  delete CGDelMail::default_instance_;
  delete CGDelMail_reflection_;
  delete GCDelMail::default_instance_;
  delete GCDelMail_reflection_;
}

void protobuf_AddDesc_MailMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_BackpackMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MailMessage.proto\032\025BackpackMessage.pro"
    "to\"\310\001\n\010MailInfo\022\016\n\006mailID\030\001 \001(\003\022\027\n\017recei"
    "vePlayerID\030\002 \001(\003\022\020\n\010sendType\030\003 \001(\005\022\020\n\010pl"
    "ayerID\030\004 \001(\003\022\020\n\010sendName\030\005 \001(\t\022\017\n\007conten"
    "t\030\006 \001(\t\022\034\n\005items\030\007 \003(\0132\r.BackpackItem\022\020\n"
    "\010sendTime\030\010 \001(\003\022\r\n\005state\030\t \001(\005\022\r\n\005title\030"
    "\n \001(\t\"2\n\020GCSendMailStatus\022\017\n\007offRead\030\001 \001"
    "(\005\022\r\n\005total\030\002 \001(\005\",\n\021CGSendMail2Player\022\027"
    "\n\004mail\030\001 \001(\0132\t.MailInfo\"#\n\021GCSendMail2Pl"
    "ayer\022\016\n\006result\030\001 \001(\005\"/\n\024GCSysSendMail2Pl"
    "ayer\022\027\n\004mail\030\001 \001(\0132\t.MailInfo\"!\n\rCGGetMa"
    "ilList\022\020\n\010playerID\030\001 \001(\003\")\n\rGCGetMailLis"
    "t\022\030\n\005mails\030\001 \003(\0132\t.MailInfo\"\034\n\nCGReadMai"
    "l\022\016\n\006mailID\030\001 \001(\003\",\n\nGCReadMail\022\016\n\006mailI"
    "D\030\001 \001(\003\022\016\n\006result\030\002 \001(\005\"!\n\017CGGetItemInMa"
    "il\022\016\n\006mailID\030\001 \003(\003\"1\n\017GCGetItemInMail\022\016\n"
    "\006mailID\030\001 \003(\003\022\016\n\006result\030\002 \001(\005\"\033\n\tCGDelMa"
    "il\022\016\n\006mailID\030\001 \003(\003\"+\n\tGCDelMail\022\016\n\006mailI"
    "D\030\001 \003(\003\022\016\n\006result\030\002 \001(\005B\031\n\027com.mile.comm"
    "on.message", 770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MailMessage.proto", &protobuf_RegisterTypes);
  MailInfo::default_instance_ = new MailInfo();
  GCSendMailStatus::default_instance_ = new GCSendMailStatus();
  CGSendMail2Player::default_instance_ = new CGSendMail2Player();
  GCSendMail2Player::default_instance_ = new GCSendMail2Player();
  GCSysSendMail2Player::default_instance_ = new GCSysSendMail2Player();
  CGGetMailList::default_instance_ = new CGGetMailList();
  GCGetMailList::default_instance_ = new GCGetMailList();
  CGReadMail::default_instance_ = new CGReadMail();
  GCReadMail::default_instance_ = new GCReadMail();
  CGGetItemInMail::default_instance_ = new CGGetItemInMail();
  GCGetItemInMail::default_instance_ = new GCGetItemInMail();
  CGDelMail::default_instance_ = new CGDelMail();
  GCDelMail::default_instance_ = new GCDelMail();
  MailInfo::default_instance_->InitAsDefaultInstance();
  GCSendMailStatus::default_instance_->InitAsDefaultInstance();
  CGSendMail2Player::default_instance_->InitAsDefaultInstance();
  GCSendMail2Player::default_instance_->InitAsDefaultInstance();
  GCSysSendMail2Player::default_instance_->InitAsDefaultInstance();
  CGGetMailList::default_instance_->InitAsDefaultInstance();
  GCGetMailList::default_instance_->InitAsDefaultInstance();
  CGReadMail::default_instance_->InitAsDefaultInstance();
  GCReadMail::default_instance_->InitAsDefaultInstance();
  CGGetItemInMail::default_instance_->InitAsDefaultInstance();
  GCGetItemInMail::default_instance_->InitAsDefaultInstance();
  CGDelMail::default_instance_->InitAsDefaultInstance();
  GCDelMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MailMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MailMessage_2eproto {
  StaticDescriptorInitializer_MailMessage_2eproto() {
    protobuf_AddDesc_MailMessage_2eproto();
  }
} static_descriptor_initializer_MailMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailIDFieldNumber;
const int MailInfo::kReceivePlayerIDFieldNumber;
const int MailInfo::kSendTypeFieldNumber;
const int MailInfo::kPlayerIDFieldNumber;
const int MailInfo::kSendNameFieldNumber;
const int MailInfo::kContentFieldNumber;
const int MailInfo::kItemsFieldNumber;
const int MailInfo::kSendTimeFieldNumber;
const int MailInfo::kStateFieldNumber;
const int MailInfo::kTitleFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MailInfo)
}

void MailInfo::InitAsDefaultInstance() {
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MailInfo)
}

void MailInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  receiveplayerid_ = GOOGLE_LONGLONG(0);
  sendtype_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  // @@protoc_insertion_point(destructor:MailInfo)
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendname_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(mailid_, playerid_);
    sendtype_ = 0;
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    sendtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768) {
    state_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mailID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receivePlayerID;
        break;
      }

      // optional int64 receivePlayerID = 2;
      case 2: {
        if (tag == 16) {
         parse_receivePlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receiveplayerid_)));
          set_has_receiveplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sendType;
        break;
      }

      // optional int32 sendType = 3;
      case 3: {
        if (tag == 24) {
         parse_sendType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtype_)));
          set_has_sendtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 4;
      case 4: {
        if (tag == 32) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sendName;
        break;
      }

      // optional string sendName = 5;
      case 5: {
        if (tag == 42) {
         parse_sendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .BackpackItem items = 7;
      case 7: {
        if (tag == 58) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectTag(64)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 8;
      case 8: {
        if (tag == 64) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_state;
        break;
      }

      // optional int32 state = 9;
      case 9: {
        if (tag == 72) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }

      // optional string title = 10;
      case 10: {
        if (tag == 82) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MailInfo)
  return false;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MailInfo)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // optional int64 receivePlayerID = 2;
  if (has_receiveplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->receiveplayerid(), output);
  }

  // optional int32 sendType = 3;
  if (has_sendtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendtype(), output);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playerid(), output);
  }

  // optional string sendName = 5;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sendname(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // repeated .BackpackItem items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  // optional int64 sendTime = 8;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->sendtime(), output);
  }

  // optional int32 state = 9;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->state(), output);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MailInfo)
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MailInfo)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // optional int64 receivePlayerID = 2;
  if (has_receiveplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->receiveplayerid(), target);
  }

  // optional int32 sendType = 3;
  if (has_sendtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendtype(), target);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playerid(), target);
  }

  // optional string sendName = 5;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sendname(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // repeated .BackpackItem items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  // optional int64 sendTime = 8;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->sendtime(), target);
  }

  // optional int32 state = 9;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->state(), target);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MailInfo)
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // optional int64 receivePlayerID = 2;
    if (has_receiveplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receiveplayerid());
    }

    // optional int32 sendType = 3;
    if (has_sendtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtype());
    }

    // optional int64 playerID = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string sendName = 5;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 sendTime = 8;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 state = 9;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .BackpackItem items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_receiveplayerid()) {
      set_receiveplayerid(from.receiveplayerid());
    }
    if (from.has_sendtype()) {
      set_sendtype(from.sendtype());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(receiveplayerid_, other->receiveplayerid_);
    std::swap(sendtype_, other->sendtype_);
    std::swap(playerid_, other->playerid_);
    std::swap(sendname_, other->sendname_);
    std::swap(content_, other->content_);
    items_.Swap(&other->items_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(state_, other->state_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendMailStatus::kOffReadFieldNumber;
const int GCSendMailStatus::kTotalFieldNumber;
#endif  // !_MSC_VER

GCSendMailStatus::GCSendMailStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendMailStatus)
}

void GCSendMailStatus::InitAsDefaultInstance() {
}

GCSendMailStatus::GCSendMailStatus(const GCSendMailStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendMailStatus)
}

void GCSendMailStatus::SharedCtor() {
  _cached_size_ = 0;
  offread_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendMailStatus::~GCSendMailStatus() {
  // @@protoc_insertion_point(destructor:GCSendMailStatus)
  SharedDtor();
}

void GCSendMailStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendMailStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendMailStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendMailStatus_descriptor_;
}

const GCSendMailStatus& GCSendMailStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCSendMailStatus* GCSendMailStatus::default_instance_ = NULL;

GCSendMailStatus* GCSendMailStatus::New() const {
  return new GCSendMailStatus;
}

void GCSendMailStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendMailStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offread_, total_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendMailStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendMailStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offRead = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offread_)));
          set_has_offread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (tag == 16) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendMailStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendMailStatus)
  return false;
#undef DO_
}

void GCSendMailStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendMailStatus)
  // optional int32 offRead = 1;
  if (has_offread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offread(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendMailStatus)
}

::google::protobuf::uint8* GCSendMailStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendMailStatus)
  // optional int32 offRead = 1;
  if (has_offread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offread(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendMailStatus)
  return target;
}

int GCSendMailStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offRead = 1;
    if (has_offread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offread());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendMailStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendMailStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendMailStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendMailStatus::MergeFrom(const GCSendMailStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offread()) {
      set_offread(from.offread());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendMailStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendMailStatus::CopyFrom(const GCSendMailStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendMailStatus::IsInitialized() const {

  return true;
}

void GCSendMailStatus::Swap(GCSendMailStatus* other) {
  if (other != this) {
    std::swap(offread_, other->offread_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendMailStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendMailStatus_descriptor_;
  metadata.reflection = GCSendMailStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSendMail2Player::kMailFieldNumber;
#endif  // !_MSC_VER

CGSendMail2Player::CGSendMail2Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSendMail2Player)
}

void CGSendMail2Player::InitAsDefaultInstance() {
  mail_ = const_cast< ::MailInfo*>(&::MailInfo::default_instance());
}

CGSendMail2Player::CGSendMail2Player(const CGSendMail2Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSendMail2Player)
}

void CGSendMail2Player::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSendMail2Player::~CGSendMail2Player() {
  // @@protoc_insertion_point(destructor:CGSendMail2Player)
  SharedDtor();
}

void CGSendMail2Player::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void CGSendMail2Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSendMail2Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSendMail2Player_descriptor_;
}

const CGSendMail2Player& CGSendMail2Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

CGSendMail2Player* CGSendMail2Player::default_instance_ = NULL;

CGSendMail2Player* CGSendMail2Player::New() const {
  return new CGSendMail2Player;
}

void CGSendMail2Player::Clear() {
  if (has_mail()) {
    if (mail_ != NULL) mail_->::MailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSendMail2Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSendMail2Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MailInfo mail = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSendMail2Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSendMail2Player)
  return false;
#undef DO_
}

void CGSendMail2Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSendMail2Player)
  // optional .MailInfo mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSendMail2Player)
}

::google::protobuf::uint8* CGSendMail2Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSendMail2Player)
  // optional .MailInfo mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSendMail2Player)
  return target;
}

int CGSendMail2Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MailInfo mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSendMail2Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSendMail2Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSendMail2Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSendMail2Player::MergeFrom(const CGSendMail2Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::MailInfo::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSendMail2Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSendMail2Player::CopyFrom(const CGSendMail2Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSendMail2Player::IsInitialized() const {

  return true;
}

void CGSendMail2Player::Swap(CGSendMail2Player* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSendMail2Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSendMail2Player_descriptor_;
  metadata.reflection = CGSendMail2Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendMail2Player::kResultFieldNumber;
#endif  // !_MSC_VER

GCSendMail2Player::GCSendMail2Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendMail2Player)
}

void GCSendMail2Player::InitAsDefaultInstance() {
}

GCSendMail2Player::GCSendMail2Player(const GCSendMail2Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendMail2Player)
}

void GCSendMail2Player::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendMail2Player::~GCSendMail2Player() {
  // @@protoc_insertion_point(destructor:GCSendMail2Player)
  SharedDtor();
}

void GCSendMail2Player::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendMail2Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendMail2Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendMail2Player_descriptor_;
}

const GCSendMail2Player& GCSendMail2Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCSendMail2Player* GCSendMail2Player::default_instance_ = NULL;

GCSendMail2Player* GCSendMail2Player::New() const {
  return new GCSendMail2Player;
}

void GCSendMail2Player::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendMail2Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendMail2Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendMail2Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendMail2Player)
  return false;
#undef DO_
}

void GCSendMail2Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendMail2Player)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendMail2Player)
}

::google::protobuf::uint8* GCSendMail2Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendMail2Player)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendMail2Player)
  return target;
}

int GCSendMail2Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendMail2Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendMail2Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendMail2Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendMail2Player::MergeFrom(const GCSendMail2Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendMail2Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendMail2Player::CopyFrom(const GCSendMail2Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendMail2Player::IsInitialized() const {

  return true;
}

void GCSendMail2Player::Swap(GCSendMail2Player* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendMail2Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendMail2Player_descriptor_;
  metadata.reflection = GCSendMail2Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSysSendMail2Player::kMailFieldNumber;
#endif  // !_MSC_VER

GCSysSendMail2Player::GCSysSendMail2Player()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSysSendMail2Player)
}

void GCSysSendMail2Player::InitAsDefaultInstance() {
  mail_ = const_cast< ::MailInfo*>(&::MailInfo::default_instance());
}

GCSysSendMail2Player::GCSysSendMail2Player(const GCSysSendMail2Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSysSendMail2Player)
}

void GCSysSendMail2Player::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSysSendMail2Player::~GCSysSendMail2Player() {
  // @@protoc_insertion_point(destructor:GCSysSendMail2Player)
  SharedDtor();
}

void GCSysSendMail2Player::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void GCSysSendMail2Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSysSendMail2Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSysSendMail2Player_descriptor_;
}

const GCSysSendMail2Player& GCSysSendMail2Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCSysSendMail2Player* GCSysSendMail2Player::default_instance_ = NULL;

GCSysSendMail2Player* GCSysSendMail2Player::New() const {
  return new GCSysSendMail2Player;
}

void GCSysSendMail2Player::Clear() {
  if (has_mail()) {
    if (mail_ != NULL) mail_->::MailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSysSendMail2Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSysSendMail2Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MailInfo mail = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSysSendMail2Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSysSendMail2Player)
  return false;
#undef DO_
}

void GCSysSendMail2Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSysSendMail2Player)
  // optional .MailInfo mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSysSendMail2Player)
}

::google::protobuf::uint8* GCSysSendMail2Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSysSendMail2Player)
  // optional .MailInfo mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSysSendMail2Player)
  return target;
}

int GCSysSendMail2Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MailInfo mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSysSendMail2Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSysSendMail2Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSysSendMail2Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSysSendMail2Player::MergeFrom(const GCSysSendMail2Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::MailInfo::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSysSendMail2Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSysSendMail2Player::CopyFrom(const GCSysSendMail2Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSysSendMail2Player::IsInitialized() const {

  return true;
}

void GCSysSendMail2Player::Swap(GCSysSendMail2Player* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSysSendMail2Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSysSendMail2Player_descriptor_;
  metadata.reflection = GCSysSendMail2Player_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetMailList::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGGetMailList::CGGetMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetMailList)
}

void CGGetMailList::InitAsDefaultInstance() {
}

CGGetMailList::CGGetMailList(const CGGetMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetMailList)
}

void CGGetMailList::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetMailList::~CGGetMailList() {
  // @@protoc_insertion_point(destructor:CGGetMailList)
  SharedDtor();
}

void CGGetMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetMailList_descriptor_;
}

const CGGetMailList& CGGetMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

CGGetMailList* CGGetMailList::default_instance_ = NULL;

CGGetMailList* CGGetMailList::New() const {
  return new CGGetMailList;
}

void CGGetMailList::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetMailList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetMailList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetMailList)
  return false;
#undef DO_
}

void CGGetMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetMailList)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetMailList)
}

::google::protobuf::uint8* CGGetMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetMailList)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetMailList)
  return target;
}

int CGGetMailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetMailList::MergeFrom(const CGGetMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetMailList::CopyFrom(const CGGetMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetMailList::IsInitialized() const {

  return true;
}

void CGGetMailList::Swap(CGGetMailList* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetMailList_descriptor_;
  metadata.reflection = CGGetMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetMailList::kMailsFieldNumber;
#endif  // !_MSC_VER

GCGetMailList::GCGetMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetMailList)
}

void GCGetMailList::InitAsDefaultInstance() {
}

GCGetMailList::GCGetMailList(const GCGetMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetMailList)
}

void GCGetMailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetMailList::~GCGetMailList() {
  // @@protoc_insertion_point(destructor:GCGetMailList)
  SharedDtor();
}

void GCGetMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetMailList_descriptor_;
}

const GCGetMailList& GCGetMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCGetMailList* GCGetMailList::default_instance_ = NULL;

GCGetMailList* GCGetMailList::New() const {
  return new GCGetMailList;
}

void GCGetMailList::Clear() {
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetMailList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailInfo mails = 1;
      case 1: {
        if (tag == 10) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetMailList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetMailList)
  return false;
#undef DO_
}

void GCGetMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetMailList)
  // repeated .MailInfo mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetMailList)
}

::google::protobuf::uint8* GCGetMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetMailList)
  // repeated .MailInfo mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetMailList)
  return target;
}

int GCGetMailList::ByteSize() const {
  int total_size = 0;

  // repeated .MailInfo mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetMailList::MergeFrom(const GCGetMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetMailList::CopyFrom(const GCGetMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetMailList::IsInitialized() const {

  return true;
}

void GCGetMailList::Swap(GCGetMailList* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetMailList_descriptor_;
  metadata.reflection = GCGetMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGReadMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

CGReadMail::CGReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGReadMail)
}

void CGReadMail::InitAsDefaultInstance() {
}

CGReadMail::CGReadMail(const CGReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGReadMail)
}

void CGReadMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGReadMail::~CGReadMail() {
  // @@protoc_insertion_point(destructor:CGReadMail)
  SharedDtor();
}

void CGReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGReadMail_descriptor_;
}

const CGReadMail& CGReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

CGReadMail* CGReadMail::default_instance_ = NULL;

CGReadMail* CGReadMail::New() const {
  return new CGReadMail;
}

void CGReadMail::Clear() {
  mailid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGReadMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mailID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGReadMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGReadMail)
  return false;
#undef DO_
}

void CGReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGReadMail)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGReadMail)
}

::google::protobuf::uint8* CGReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGReadMail)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGReadMail)
  return target;
}

int CGReadMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGReadMail::MergeFrom(const CGReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGReadMail::CopyFrom(const CGReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReadMail::IsInitialized() const {

  return true;
}

void CGReadMail::Swap(CGReadMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGReadMail_descriptor_;
  metadata.reflection = CGReadMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReadMail::kMailIDFieldNumber;
const int GCReadMail::kResultFieldNumber;
#endif  // !_MSC_VER

GCReadMail::GCReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCReadMail)
}

void GCReadMail::InitAsDefaultInstance() {
}

GCReadMail::GCReadMail(const GCReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCReadMail)
}

void GCReadMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReadMail::~GCReadMail() {
  // @@protoc_insertion_point(destructor:GCReadMail)
  SharedDtor();
}

void GCReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReadMail_descriptor_;
}

const GCReadMail& GCReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCReadMail* GCReadMail::default_instance_ = NULL;

GCReadMail* GCReadMail::New() const {
  return new GCReadMail;
}

void GCReadMail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCReadMail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mailid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCReadMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mailID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCReadMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCReadMail)
  return false;
#undef DO_
}

void GCReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCReadMail)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCReadMail)
}

::google::protobuf::uint8* GCReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCReadMail)
  // optional int64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCReadMail)
  return target;
}

int GCReadMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReadMail::MergeFrom(const GCReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReadMail::CopyFrom(const GCReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReadMail::IsInitialized() const {

  return true;
}

void GCReadMail::Swap(GCReadMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReadMail_descriptor_;
  metadata.reflection = GCReadMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetItemInMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

CGGetItemInMail::CGGetItemInMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetItemInMail)
}

void CGGetItemInMail::InitAsDefaultInstance() {
}

CGGetItemInMail::CGGetItemInMail(const CGGetItemInMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetItemInMail)
}

void CGGetItemInMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetItemInMail::~CGGetItemInMail() {
  // @@protoc_insertion_point(destructor:CGGetItemInMail)
  SharedDtor();
}

void CGGetItemInMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetItemInMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetItemInMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetItemInMail_descriptor_;
}

const CGGetItemInMail& CGGetItemInMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

CGGetItemInMail* CGGetItemInMail::default_instance_ = NULL;

CGGetItemInMail* CGGetItemInMail::New() const {
  return new CGGetItemInMail;
}

void CGGetItemInMail::Clear() {
  mailid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetItemInMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetItemInMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mailID = 1;
      case 1: {
        if (tag == 8) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mailid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mailID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetItemInMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetItemInMail)
  return false;
#undef DO_
}

void CGGetItemInMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetItemInMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mailid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetItemInMail)
}

::google::protobuf::uint8* CGGetItemInMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetItemInMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mailid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetItemInMail)
  return target;
}

int CGGetItemInMail::ByteSize() const {
  int total_size = 0;

  // repeated int64 mailID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetItemInMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetItemInMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetItemInMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetItemInMail::MergeFrom(const CGGetItemInMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailid_.MergeFrom(from.mailid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetItemInMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetItemInMail::CopyFrom(const CGGetItemInMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetItemInMail::IsInitialized() const {

  return true;
}

void CGGetItemInMail::Swap(CGGetItemInMail* other) {
  if (other != this) {
    mailid_.Swap(&other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetItemInMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetItemInMail_descriptor_;
  metadata.reflection = CGGetItemInMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetItemInMail::kMailIDFieldNumber;
const int GCGetItemInMail::kResultFieldNumber;
#endif  // !_MSC_VER

GCGetItemInMail::GCGetItemInMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetItemInMail)
}

void GCGetItemInMail::InitAsDefaultInstance() {
}

GCGetItemInMail::GCGetItemInMail(const GCGetItemInMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetItemInMail)
}

void GCGetItemInMail::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetItemInMail::~GCGetItemInMail() {
  // @@protoc_insertion_point(destructor:GCGetItemInMail)
  SharedDtor();
}

void GCGetItemInMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetItemInMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetItemInMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetItemInMail_descriptor_;
}

const GCGetItemInMail& GCGetItemInMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCGetItemInMail* GCGetItemInMail::default_instance_ = NULL;

GCGetItemInMail* GCGetItemInMail::New() const {
  return new GCGetItemInMail;
}

void GCGetItemInMail::Clear() {
  result_ = 0;
  mailid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetItemInMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetItemInMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mailID = 1;
      case 1: {
        if (tag == 8) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mailid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mailID;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetItemInMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetItemInMail)
  return false;
#undef DO_
}

void GCGetItemInMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetItemInMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mailid(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetItemInMail)
}

::google::protobuf::uint8* GCGetItemInMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetItemInMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mailid(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetItemInMail)
  return target;
}

int GCGetItemInMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int64 mailID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetItemInMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetItemInMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetItemInMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetItemInMail::MergeFrom(const GCGetItemInMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailid_.MergeFrom(from.mailid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetItemInMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetItemInMail::CopyFrom(const GCGetItemInMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetItemInMail::IsInitialized() const {

  return true;
}

void GCGetItemInMail::Swap(GCGetItemInMail* other) {
  if (other != this) {
    mailid_.Swap(&other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetItemInMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetItemInMail_descriptor_;
  metadata.reflection = GCGetItemInMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDelMail::kMailIDFieldNumber;
#endif  // !_MSC_VER

CGDelMail::CGDelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDelMail)
}

void CGDelMail::InitAsDefaultInstance() {
}

CGDelMail::CGDelMail(const CGDelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDelMail)
}

void CGDelMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDelMail::~CGDelMail() {
  // @@protoc_insertion_point(destructor:CGDelMail)
  SharedDtor();
}

void CGDelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDelMail_descriptor_;
}

const CGDelMail& CGDelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

CGDelMail* CGDelMail::default_instance_ = NULL;

CGDelMail* CGDelMail::New() const {
  return new CGDelMail;
}

void CGDelMail::Clear() {
  mailid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDelMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mailID = 1;
      case 1: {
        if (tag == 8) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mailid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mailID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDelMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDelMail)
  return false;
#undef DO_
}

void CGDelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDelMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mailid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDelMail)
}

::google::protobuf::uint8* CGDelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDelMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mailid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDelMail)
  return target;
}

int CGDelMail::ByteSize() const {
  int total_size = 0;

  // repeated int64 mailID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDelMail::MergeFrom(const CGDelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailid_.MergeFrom(from.mailid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDelMail::CopyFrom(const CGDelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDelMail::IsInitialized() const {

  return true;
}

void CGDelMail::Swap(CGDelMail* other) {
  if (other != this) {
    mailid_.Swap(&other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDelMail_descriptor_;
  metadata.reflection = CGDelMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelMail::kMailIDFieldNumber;
const int GCDelMail::kResultFieldNumber;
#endif  // !_MSC_VER

GCDelMail::GCDelMail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelMail)
}

void GCDelMail::InitAsDefaultInstance() {
}

GCDelMail::GCDelMail(const GCDelMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelMail)
}

void GCDelMail::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelMail::~GCDelMail() {
  // @@protoc_insertion_point(destructor:GCDelMail)
  SharedDtor();
}

void GCDelMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelMail_descriptor_;
}

const GCDelMail& GCDelMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MailMessage_2eproto();
  return *default_instance_;
}

GCDelMail* GCDelMail::default_instance_ = NULL;

GCDelMail* GCDelMail::New() const {
  return new GCDelMail;
}

void GCDelMail::Clear() {
  result_ = 0;
  mailid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mailID = 1;
      case 1: {
        if (tag == 8) {
         parse_mailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mailid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mailid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_mailID;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelMail)
  return false;
#undef DO_
}

void GCDelMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mailid(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelMail)
}

::google::protobuf::uint8* GCDelMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelMail)
  // repeated int64 mailID = 1;
  for (int i = 0; i < this->mailid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mailid(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelMail)
  return target;
}

int GCDelMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int64 mailID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mailid(i));
    }
    total_size += 1 * this->mailid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelMail::MergeFrom(const GCDelMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailid_.MergeFrom(from.mailid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelMail::CopyFrom(const GCDelMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelMail::IsInitialized() const {

  return true;
}

void GCDelMail::Swap(GCDelMail* other) {
  if (other != this) {
    mailid_.Swap(&other->mailid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelMail_descriptor_;
  metadata.reflection = GCDelMail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
