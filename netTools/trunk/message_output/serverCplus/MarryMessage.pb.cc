// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarryMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MarryMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGDoMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDoMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDoMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDoMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExpressLove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExpressLove_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCExpressLove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCExpressLove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGExpressLoveBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGExpressLoveBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCExpressLoveBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCExpressLoveBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMarrySts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMarrySts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMarryRingPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMarryRingPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMarryRingPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMarryRingPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSearchMarryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSearchMarryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSearchMarryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSearchMarryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGDivorce_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDivorce_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAgreeOrRefuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAgreeOrRefuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAgreeOrRefuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAgreeOrRefuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MarryMessage_2eproto() {
  protobuf_AddDesc_MarryMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MarryMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGDoMarry_descriptor_ = file->message_type(0);
  static const int CGDoMarry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoMarry, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoMarry, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoMarry, ringid_),
  };
  CGDoMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDoMarry_descriptor_,
      CGDoMarry::default_instance_,
      CGDoMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDoMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDoMarry));
  GCDoMarry_descriptor_ = file->message_type(1);
  static const int GCDoMarry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, sourcename_),
  };
  GCDoMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDoMarry_descriptor_,
      GCDoMarry::default_instance_,
      GCDoMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDoMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDoMarry));
  CGExpressLove_descriptor_ = file->message_type(2);
  static const int CGExpressLove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, loveletter_),
  };
  CGExpressLove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExpressLove_descriptor_,
      CGExpressLove::default_instance_,
      CGExpressLove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExpressLove));
  GCExpressLove_descriptor_ = file->message_type(3);
  static const int GCExpressLove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, loveletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, sourcename_),
  };
  GCExpressLove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCExpressLove_descriptor_,
      GCExpressLove::default_instance_,
      GCExpressLove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCExpressLove));
  CGExpressLoveBack_descriptor_ = file->message_type(4);
  static const int CGExpressLoveBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, result_),
  };
  CGExpressLoveBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGExpressLoveBack_descriptor_,
      CGExpressLoveBack::default_instance_,
      CGExpressLoveBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGExpressLoveBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGExpressLoveBack));
  GCExpressLoveBack_descriptor_ = file->message_type(5);
  static const int GCExpressLoveBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, sourceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, targetname_),
  };
  GCExpressLoveBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCExpressLoveBack_descriptor_,
      GCExpressLoveBack::default_instance_,
      GCExpressLoveBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpressLoveBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCExpressLoveBack));
  RingInfo_descriptor_ = file->message_type(6);
  static const int RingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, lovenum_),
  };
  RingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RingInfo_descriptor_,
      RingInfo::default_instance_,
      RingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RingInfo));
  GCMarrySts_descriptor_ = file->message_type(7);
  static const int GCMarrySts_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, ringinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, arrivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, divorceplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, divorceplayername_),
  };
  GCMarrySts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMarrySts_descriptor_,
      GCMarrySts::default_instance_,
      GCMarrySts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarrySts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMarrySts));
  CGMarryRingPower_descriptor_ = file->message_type(8);
  static const int CGMarryRingPower_offsets_[1] = {
  };
  CGMarryRingPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMarryRingPower_descriptor_,
      CGMarryRingPower::default_instance_,
      CGMarryRingPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMarryRingPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMarryRingPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMarryRingPower));
  GCMarryRingPower_descriptor_ = file->message_type(9);
  static const int GCMarryRingPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarryRingPower, ringinfo_),
  };
  GCMarryRingPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMarryRingPower_descriptor_,
      GCMarryRingPower::default_instance_,
      GCMarryRingPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarryRingPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMarryRingPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMarryRingPower));
  CGSearchMarryInfo_descriptor_ = file->message_type(10);
  static const int CGSearchMarryInfo_offsets_[1] = {
  };
  CGSearchMarryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSearchMarryInfo_descriptor_,
      CGSearchMarryInfo::default_instance_,
      CGSearchMarryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSearchMarryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSearchMarryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSearchMarryInfo));
  GCSearchMarryInfo_descriptor_ = file->message_type(11);
  static const int GCSearchMarryInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, ringinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, changinfo_),
  };
  GCSearchMarryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSearchMarryInfo_descriptor_,
      GCSearchMarryInfo::default_instance_,
      GCSearchMarryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSearchMarryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSearchMarryInfo));
  CGDivorce_descriptor_ = file->message_type(12);
  static const int CGDivorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDivorce, divorcetype_),
  };
  CGDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGDivorce_descriptor_,
      CGDivorce::default_instance_,
      CGDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGDivorce));
  GCDivorce_descriptor_ = file->message_type(13);
  static const int GCDivorce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDivorce, divorcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDivorce, data_),
  };
  GCDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDivorce_descriptor_,
      GCDivorce::default_instance_,
      GCDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDivorce));
  CGAgreeOrRefuse_descriptor_ = file->message_type(14);
  static const int CGAgreeOrRefuse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeOrRefuse, type_),
  };
  CGAgreeOrRefuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAgreeOrRefuse_descriptor_,
      CGAgreeOrRefuse::default_instance_,
      CGAgreeOrRefuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeOrRefuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAgreeOrRefuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAgreeOrRefuse));
  GCAgreeOrRefuse_descriptor_ = file->message_type(15);
  static const int GCAgreeOrRefuse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAgreeOrRefuse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAgreeOrRefuse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAgreeOrRefuse, playername_),
  };
  GCAgreeOrRefuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAgreeOrRefuse_descriptor_,
      GCAgreeOrRefuse::default_instance_,
      GCAgreeOrRefuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAgreeOrRefuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAgreeOrRefuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAgreeOrRefuse));
  MarryRank_descriptor_ = file->message_type(16);
  static const int MarryRank_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, boyplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, boyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, boyviplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, girlplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, girlname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, girlviplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, totallovenum_),
  };
  MarryRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRank_descriptor_,
      MarryRank::default_instance_,
      MarryRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MarryMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDoMarry_descriptor_, &CGDoMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDoMarry_descriptor_, &GCDoMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExpressLove_descriptor_, &CGExpressLove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCExpressLove_descriptor_, &GCExpressLove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGExpressLoveBack_descriptor_, &CGExpressLoveBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCExpressLoveBack_descriptor_, &GCExpressLoveBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RingInfo_descriptor_, &RingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMarrySts_descriptor_, &GCMarrySts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMarryRingPower_descriptor_, &CGMarryRingPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMarryRingPower_descriptor_, &GCMarryRingPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSearchMarryInfo_descriptor_, &CGSearchMarryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSearchMarryInfo_descriptor_, &GCSearchMarryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGDivorce_descriptor_, &CGDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDivorce_descriptor_, &GCDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAgreeOrRefuse_descriptor_, &CGAgreeOrRefuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAgreeOrRefuse_descriptor_, &GCAgreeOrRefuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRank_descriptor_, &MarryRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MarryMessage_2eproto() {
  delete CGDoMarry::default_instance_;
  delete CGDoMarry_reflection_;
  delete GCDoMarry::default_instance_;
  delete GCDoMarry_reflection_;
  delete CGExpressLove::default_instance_;
  delete CGExpressLove_reflection_;
  delete GCExpressLove::default_instance_;
  delete GCExpressLove_reflection_;
  delete CGExpressLoveBack::default_instance_;
  delete CGExpressLoveBack_reflection_;
  delete GCExpressLoveBack::default_instance_;
  delete GCExpressLoveBack_reflection_;
  delete RingInfo::default_instance_;
  delete RingInfo_reflection_;
  delete GCMarrySts::default_instance_;
  delete GCMarrySts_reflection_;
  delete CGMarryRingPower::default_instance_;
  delete CGMarryRingPower_reflection_;
  delete GCMarryRingPower::default_instance_;
  delete GCMarryRingPower_reflection_;
  delete CGSearchMarryInfo::default_instance_;
  delete CGSearchMarryInfo_reflection_;
  delete GCSearchMarryInfo::default_instance_;
  delete GCSearchMarryInfo_reflection_;
  delete CGDivorce::default_instance_;
  delete CGDivorce_reflection_;
  delete GCDivorce::default_instance_;
  delete GCDivorce_reflection_;
  delete CGAgreeOrRefuse::default_instance_;
  delete CGAgreeOrRefuse_reflection_;
  delete GCAgreeOrRefuse::default_instance_;
  delete GCAgreeOrRefuse_reflection_;
  delete MarryRank::default_instance_;
  delete MarryRank_reflection_;
}

void protobuf_AddDesc_MarryMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MarryMessage.proto\032\022InnerMessage.proto"
    "\"K\n\tCGDoMarry\022\026\n\016sourcePlayerId\030\001 \001(\003\022\026\n"
    "\016targetPlayerId\030\002 \001(\003\022\016\n\006ringId\030\004 \001(\005\"_\n"
    "\tGCDoMarry\022\026\n\016sourcePlayerId\030\001 \001(\003\022\026\n\016ta"
    "rgetPlayerId\030\002 \001(\003\022\016\n\006ringId\030\003 \001(\005\022\022\n\nso"
    "urceName\030\004 \001(\t\"c\n\rCGExpressLove\022\026\n\016sourc"
    "ePlayerId\030\001 \001(\003\022\026\n\016targetPlayerId\030\002 \001(\003\022"
    "\016\n\006ringId\030\003 \001(\005\022\022\n\nloveLetter\030\004 \001(\t\"w\n\rG"
    "CExpressLove\022\026\n\016sourcePlayerId\030\001 \001(\003\022\026\n\016"
    "targetPlayerId\030\002 \001(\003\022\016\n\006ringId\030\003 \001(\005\022\022\n\n"
    "loveLetter\030\004 \001(\t\022\022\n\nsourceName\030\005 \001(\t\"c\n\021"
    "CGExpressLoveBack\022\026\n\016sourcePlayerId\030\001 \001("
    "\003\022\026\n\016targetPlayerId\030\002 \001(\003\022\016\n\006ringId\030\003 \001("
    "\005\022\016\n\006result\030\004 \001(\005\"w\n\021GCExpressLoveBack\022\026"
    "\n\016sourcePlayerId\030\001 \001(\003\022\026\n\016targetPlayerId"
    "\030\002 \001(\003\022\016\n\006ringId\030\003 \001(\005\022\016\n\006result\030\004 \001(\005\022\022"
    "\n\ntargetName\030\005 \001(\t\":\n\010RingInfo\022\016\n\006ringID"
    "\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\017\n\007loveNum\030\003 \001(\005\"\213"
    "\001\n\nGCMarrySts\022\013\n\003sts\030\001 \001(\005\022\013\n\003sex\030\002 \001(\005\022"
    "\033\n\010ringInfo\030\003 \001(\0132\t.RingInfo\022\022\n\narriveTi"
    "me\030\004 \001(\003\022\027\n\017divorcePlayerId\030\005 \001(\003\022\031\n\021div"
    "orcePlayerName\030\006 \001(\t\"\022\n\020CGMarryRingPower"
    "\"/\n\020GCMarryRingPower\022\033\n\010ringInfo\030\001 \001(\0132\t"
    ".RingInfo\"\023\n\021CGSearchMarryInfo\"v\n\021GCSear"
    "chMarryInfo\022\013\n\003sid\030\001 \001(\005\022\022\n\nplayerName\030\002"
    " \001(\t\022\033\n\010ringInfo\030\003 \001(\0132\t.RingInfo\022#\n\tcha"
    "ngInfo\030\004 \001(\0132\020.ChangeEquipInfo\" \n\tCGDivo"
    "rce\022\023\n\013divorceType\030\001 \001(\005\";\n\tGCDivorce\022\023\n"
    "\013divorceType\030\001 \001(\005\022\031\n\004data\030\002 \001(\0132\013.GCMar"
    "rySts\"\037\n\017CGAgreeOrRefuse\022\014\n\004type\030\001 \001(\005\"N"
    "\n\017GCAgreeOrRefuse\022\014\n\004type\030\001 \001(\005\022\031\n\004data\030"
    "\002 \001(\0132\013.GCMarrySts\022\022\n\nplayerName\030\003 \001(\t\"\244"
    "\001\n\tMarryRank\022\016\n\006rankId\030\001 \001(\005\022\023\n\013boyPlaye"
    "rId\030\002 \001(\003\022\017\n\007boyName\030\003 \001(\t\022\020\n\010boyVipLv\030\004"
    " \001(\005\022\024\n\014girlPlayerId\030\005 \001(\003\022\020\n\010girlName\030\006"
    " \001(\t\022\021\n\tgirlVipLv\030\007 \001(\005\022\024\n\014totalLoveNum\030"
    "\010 \001(\005B\031\n\027com.mile.common.message", 1472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MarryMessage.proto", &protobuf_RegisterTypes);
  CGDoMarry::default_instance_ = new CGDoMarry();
  GCDoMarry::default_instance_ = new GCDoMarry();
  CGExpressLove::default_instance_ = new CGExpressLove();
  GCExpressLove::default_instance_ = new GCExpressLove();
  CGExpressLoveBack::default_instance_ = new CGExpressLoveBack();
  GCExpressLoveBack::default_instance_ = new GCExpressLoveBack();
  RingInfo::default_instance_ = new RingInfo();
  GCMarrySts::default_instance_ = new GCMarrySts();
  CGMarryRingPower::default_instance_ = new CGMarryRingPower();
  GCMarryRingPower::default_instance_ = new GCMarryRingPower();
  CGSearchMarryInfo::default_instance_ = new CGSearchMarryInfo();
  GCSearchMarryInfo::default_instance_ = new GCSearchMarryInfo();
  CGDivorce::default_instance_ = new CGDivorce();
  GCDivorce::default_instance_ = new GCDivorce();
  CGAgreeOrRefuse::default_instance_ = new CGAgreeOrRefuse();
  GCAgreeOrRefuse::default_instance_ = new GCAgreeOrRefuse();
  MarryRank::default_instance_ = new MarryRank();
  CGDoMarry::default_instance_->InitAsDefaultInstance();
  GCDoMarry::default_instance_->InitAsDefaultInstance();
  CGExpressLove::default_instance_->InitAsDefaultInstance();
  GCExpressLove::default_instance_->InitAsDefaultInstance();
  CGExpressLoveBack::default_instance_->InitAsDefaultInstance();
  GCExpressLoveBack::default_instance_->InitAsDefaultInstance();
  RingInfo::default_instance_->InitAsDefaultInstance();
  GCMarrySts::default_instance_->InitAsDefaultInstance();
  CGMarryRingPower::default_instance_->InitAsDefaultInstance();
  GCMarryRingPower::default_instance_->InitAsDefaultInstance();
  CGSearchMarryInfo::default_instance_->InitAsDefaultInstance();
  GCSearchMarryInfo::default_instance_->InitAsDefaultInstance();
  CGDivorce::default_instance_->InitAsDefaultInstance();
  GCDivorce::default_instance_->InitAsDefaultInstance();
  CGAgreeOrRefuse::default_instance_->InitAsDefaultInstance();
  GCAgreeOrRefuse::default_instance_->InitAsDefaultInstance();
  MarryRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MarryMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MarryMessage_2eproto {
  StaticDescriptorInitializer_MarryMessage_2eproto() {
    protobuf_AddDesc_MarryMessage_2eproto();
  }
} static_descriptor_initializer_MarryMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGDoMarry::kSourcePlayerIdFieldNumber;
const int CGDoMarry::kTargetPlayerIdFieldNumber;
const int CGDoMarry::kRingIdFieldNumber;
#endif  // !_MSC_VER

CGDoMarry::CGDoMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDoMarry)
}

void CGDoMarry::InitAsDefaultInstance() {
}

CGDoMarry::CGDoMarry(const CGDoMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDoMarry)
}

void CGDoMarry::SharedCtor() {
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDoMarry::~CGDoMarry() {
  // @@protoc_insertion_point(destructor:CGDoMarry)
  SharedDtor();
}

void CGDoMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDoMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDoMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDoMarry_descriptor_;
}

const CGDoMarry& CGDoMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGDoMarry* CGDoMarry::default_instance_ = NULL;

CGDoMarry* CGDoMarry::New() const {
  return new CGDoMarry;
}

void CGDoMarry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGDoMarry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sourceplayerid_, ringid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDoMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDoMarry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 4;
      case 4: {
        if (tag == 32) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDoMarry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDoMarry)
  return false;
#undef DO_
}

void CGDoMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDoMarry)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 4;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ringid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDoMarry)
}

::google::protobuf::uint8* CGDoMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDoMarry)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 4;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ringid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDoMarry)
  return target;
}

int CGDoMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 4;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDoMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDoMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDoMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDoMarry::MergeFrom(const CGDoMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDoMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDoMarry::CopyFrom(const CGDoMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDoMarry::IsInitialized() const {

  return true;
}

void CGDoMarry::Swap(CGDoMarry* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDoMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDoMarry_descriptor_;
  metadata.reflection = CGDoMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDoMarry::kSourcePlayerIdFieldNumber;
const int GCDoMarry::kTargetPlayerIdFieldNumber;
const int GCDoMarry::kRingIdFieldNumber;
const int GCDoMarry::kSourceNameFieldNumber;
#endif  // !_MSC_VER

GCDoMarry::GCDoMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDoMarry)
}

void GCDoMarry::InitAsDefaultInstance() {
}

GCDoMarry::GCDoMarry(const GCDoMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDoMarry)
}

void GCDoMarry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDoMarry::~GCDoMarry() {
  // @@protoc_insertion_point(destructor:GCDoMarry)
  SharedDtor();
}

void GCDoMarry::SharedDtor() {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcename_;
  }
  if (this != default_instance_) {
  }
}

void GCDoMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDoMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDoMarry_descriptor_;
}

const GCDoMarry& GCDoMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCDoMarry* GCDoMarry::default_instance_ = NULL;

GCDoMarry* GCDoMarry::New() const {
  return new GCDoMarry;
}

void GCDoMarry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCDoMarry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sourceplayerid_, targetplayerid_);
    ringid_ = 0;
    if (has_sourcename()) {
      if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourcename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDoMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDoMarry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 3;
      case 3: {
        if (tag == 24) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sourceName;
        break;
      }

      // optional string sourceName = 4;
      case 4: {
        if (tag == 34) {
         parse_sourceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcename().data(), this->sourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourcename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDoMarry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDoMarry)
  return false;
#undef DO_
}

void GCDoMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDoMarry)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringid(), output);
  }

  // optional string sourceName = 4;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sourcename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDoMarry)
}

::google::protobuf::uint8* GCDoMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDoMarry)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringid(), target);
  }

  // optional string sourceName = 4;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sourcename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDoMarry)
  return target;
}

int GCDoMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 3;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional string sourceName = 4;
    if (has_sourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDoMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDoMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDoMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDoMarry::MergeFrom(const GCDoMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_sourcename()) {
      set_sourcename(from.sourcename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDoMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDoMarry::CopyFrom(const GCDoMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDoMarry::IsInitialized() const {

  return true;
}

void GCDoMarry::Swap(GCDoMarry* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(sourcename_, other->sourcename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDoMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDoMarry_descriptor_;
  metadata.reflection = GCDoMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGExpressLove::kSourcePlayerIdFieldNumber;
const int CGExpressLove::kTargetPlayerIdFieldNumber;
const int CGExpressLove::kRingIdFieldNumber;
const int CGExpressLove::kLoveLetterFieldNumber;
#endif  // !_MSC_VER

CGExpressLove::CGExpressLove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExpressLove)
}

void CGExpressLove::InitAsDefaultInstance() {
}

CGExpressLove::CGExpressLove(const CGExpressLove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExpressLove)
}

void CGExpressLove::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExpressLove::~CGExpressLove() {
  // @@protoc_insertion_point(destructor:CGExpressLove)
  SharedDtor();
}

void CGExpressLove::SharedDtor() {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loveletter_;
  }
  if (this != default_instance_) {
  }
}

void CGExpressLove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExpressLove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExpressLove_descriptor_;
}

const CGExpressLove& CGExpressLove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGExpressLove* CGExpressLove::default_instance_ = NULL;

CGExpressLove* CGExpressLove::New() const {
  return new CGExpressLove;
}

void CGExpressLove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGExpressLove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sourceplayerid_, targetplayerid_);
    ringid_ = 0;
    if (has_loveletter()) {
      if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loveletter_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExpressLove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExpressLove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 3;
      case 3: {
        if (tag == 24) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loveLetter;
        break;
      }

      // optional string loveLetter = 4;
      case 4: {
        if (tag == 34) {
         parse_loveLetter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loveletter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loveletter().data(), this->loveletter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loveletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGExpressLove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExpressLove)
  return false;
#undef DO_
}

void CGExpressLove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExpressLove)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringid(), output);
  }

  // optional string loveLetter = 4;
  if (has_loveletter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loveletter().data(), this->loveletter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loveletter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->loveletter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExpressLove)
}

::google::protobuf::uint8* CGExpressLove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExpressLove)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringid(), target);
  }

  // optional string loveLetter = 4;
  if (has_loveletter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loveletter().data(), this->loveletter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loveletter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->loveletter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExpressLove)
  return target;
}

int CGExpressLove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 3;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional string loveLetter = 4;
    if (has_loveletter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loveletter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExpressLove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExpressLove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExpressLove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExpressLove::MergeFrom(const CGExpressLove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_loveletter()) {
      set_loveletter(from.loveletter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExpressLove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExpressLove::CopyFrom(const CGExpressLove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExpressLove::IsInitialized() const {

  return true;
}

void CGExpressLove::Swap(CGExpressLove* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(loveletter_, other->loveletter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExpressLove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExpressLove_descriptor_;
  metadata.reflection = CGExpressLove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCExpressLove::kSourcePlayerIdFieldNumber;
const int GCExpressLove::kTargetPlayerIdFieldNumber;
const int GCExpressLove::kRingIdFieldNumber;
const int GCExpressLove::kLoveLetterFieldNumber;
const int GCExpressLove::kSourceNameFieldNumber;
#endif  // !_MSC_VER

GCExpressLove::GCExpressLove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCExpressLove)
}

void GCExpressLove::InitAsDefaultInstance() {
}

GCExpressLove::GCExpressLove(const GCExpressLove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCExpressLove)
}

void GCExpressLove::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCExpressLove::~GCExpressLove() {
  // @@protoc_insertion_point(destructor:GCExpressLove)
  SharedDtor();
}

void GCExpressLove::SharedDtor() {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loveletter_;
  }
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcename_;
  }
  if (this != default_instance_) {
  }
}

void GCExpressLove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCExpressLove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCExpressLove_descriptor_;
}

const GCExpressLove& GCExpressLove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCExpressLove* GCExpressLove::default_instance_ = NULL;

GCExpressLove* GCExpressLove::New() const {
  return new GCExpressLove;
}

void GCExpressLove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCExpressLove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sourceplayerid_, targetplayerid_);
    ringid_ = 0;
    if (has_loveletter()) {
      if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loveletter_->clear();
      }
    }
    if (has_sourcename()) {
      if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourcename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCExpressLove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCExpressLove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 3;
      case 3: {
        if (tag == 24) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loveLetter;
        break;
      }

      // optional string loveLetter = 4;
      case 4: {
        if (tag == 34) {
         parse_loveLetter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loveletter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loveletter().data(), this->loveletter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loveletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sourceName;
        break;
      }

      // optional string sourceName = 5;
      case 5: {
        if (tag == 42) {
         parse_sourceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcename().data(), this->sourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourcename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCExpressLove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCExpressLove)
  return false;
#undef DO_
}

void GCExpressLove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCExpressLove)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringid(), output);
  }

  // optional string loveLetter = 4;
  if (has_loveletter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loveletter().data(), this->loveletter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loveletter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->loveletter(), output);
  }

  // optional string sourceName = 5;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sourcename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCExpressLove)
}

::google::protobuf::uint8* GCExpressLove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCExpressLove)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringid(), target);
  }

  // optional string loveLetter = 4;
  if (has_loveletter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loveletter().data(), this->loveletter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loveletter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->loveletter(), target);
  }

  // optional string sourceName = 5;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sourcename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCExpressLove)
  return target;
}

int GCExpressLove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 3;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional string loveLetter = 4;
    if (has_loveletter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loveletter());
    }

    // optional string sourceName = 5;
    if (has_sourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCExpressLove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCExpressLove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCExpressLove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCExpressLove::MergeFrom(const GCExpressLove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_loveletter()) {
      set_loveletter(from.loveletter());
    }
    if (from.has_sourcename()) {
      set_sourcename(from.sourcename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCExpressLove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCExpressLove::CopyFrom(const GCExpressLove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExpressLove::IsInitialized() const {

  return true;
}

void GCExpressLove::Swap(GCExpressLove* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(loveletter_, other->loveletter_);
    std::swap(sourcename_, other->sourcename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCExpressLove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCExpressLove_descriptor_;
  metadata.reflection = GCExpressLove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGExpressLoveBack::kSourcePlayerIdFieldNumber;
const int CGExpressLoveBack::kTargetPlayerIdFieldNumber;
const int CGExpressLoveBack::kRingIdFieldNumber;
const int CGExpressLoveBack::kResultFieldNumber;
#endif  // !_MSC_VER

CGExpressLoveBack::CGExpressLoveBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGExpressLoveBack)
}

void CGExpressLoveBack::InitAsDefaultInstance() {
}

CGExpressLoveBack::CGExpressLoveBack(const CGExpressLoveBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGExpressLoveBack)
}

void CGExpressLoveBack::SharedCtor() {
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGExpressLoveBack::~CGExpressLoveBack() {
  // @@protoc_insertion_point(destructor:CGExpressLoveBack)
  SharedDtor();
}

void CGExpressLoveBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGExpressLoveBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGExpressLoveBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGExpressLoveBack_descriptor_;
}

const CGExpressLoveBack& CGExpressLoveBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGExpressLoveBack* CGExpressLoveBack::default_instance_ = NULL;

CGExpressLoveBack* CGExpressLoveBack::New() const {
  return new CGExpressLoveBack;
}

void CGExpressLoveBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGExpressLoveBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sourceplayerid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGExpressLoveBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGExpressLoveBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 3;
      case 3: {
        if (tag == 24) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGExpressLoveBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGExpressLoveBack)
  return false;
#undef DO_
}

void CGExpressLoveBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGExpressLoveBack)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringid(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGExpressLoveBack)
}

::google::protobuf::uint8* CGExpressLoveBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGExpressLoveBack)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringid(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGExpressLoveBack)
  return target;
}

int CGExpressLoveBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 3;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGExpressLoveBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGExpressLoveBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGExpressLoveBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGExpressLoveBack::MergeFrom(const CGExpressLoveBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGExpressLoveBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGExpressLoveBack::CopyFrom(const CGExpressLoveBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGExpressLoveBack::IsInitialized() const {

  return true;
}

void CGExpressLoveBack::Swap(CGExpressLoveBack* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGExpressLoveBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGExpressLoveBack_descriptor_;
  metadata.reflection = CGExpressLoveBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCExpressLoveBack::kSourcePlayerIdFieldNumber;
const int GCExpressLoveBack::kTargetPlayerIdFieldNumber;
const int GCExpressLoveBack::kRingIdFieldNumber;
const int GCExpressLoveBack::kResultFieldNumber;
const int GCExpressLoveBack::kTargetNameFieldNumber;
#endif  // !_MSC_VER

GCExpressLoveBack::GCExpressLoveBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCExpressLoveBack)
}

void GCExpressLoveBack::InitAsDefaultInstance() {
}

GCExpressLoveBack::GCExpressLoveBack(const GCExpressLoveBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCExpressLoveBack)
}

void GCExpressLoveBack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  targetplayerid_ = GOOGLE_LONGLONG(0);
  ringid_ = 0;
  result_ = 0;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCExpressLoveBack::~GCExpressLoveBack() {
  // @@protoc_insertion_point(destructor:GCExpressLoveBack)
  SharedDtor();
}

void GCExpressLoveBack::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void GCExpressLoveBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCExpressLoveBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCExpressLoveBack_descriptor_;
}

const GCExpressLoveBack& GCExpressLoveBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCExpressLoveBack* GCExpressLoveBack::default_instance_ = NULL;

GCExpressLoveBack* GCExpressLoveBack::New() const {
  return new GCExpressLoveBack;
}

void GCExpressLoveBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCExpressLoveBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sourceplayerid_, result_);
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCExpressLoveBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCExpressLoveBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 sourcePlayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceplayerid_)));
          set_has_sourceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }

      // optional int64 targetPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 3;
      case 3: {
        if (tag == 24) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_targetName;
        break;
      }

      // optional string targetName = 5;
      case 5: {
        if (tag == 42) {
         parse_targetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCExpressLoveBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCExpressLoveBack)
  return false;
#undef DO_
}

void GCExpressLoveBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCExpressLoveBack)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sourceplayerid(), output);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetplayerid(), output);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringid(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  // optional string targetName = 5;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->targetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCExpressLoveBack)
}

::google::protobuf::uint8* GCExpressLoveBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCExpressLoveBack)
  // optional int64 sourcePlayerId = 1;
  if (has_sourceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sourceplayerid(), target);
  }

  // optional int64 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetplayerid(), target);
  }

  // optional int32 ringId = 3;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringid(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  // optional string targetName = 5;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->targetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCExpressLoveBack)
  return target;
}

int GCExpressLoveBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 sourcePlayerId = 1;
    if (has_sourceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceplayerid());
    }

    // optional int64 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetplayerid());
    }

    // optional int32 ringId = 3;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string targetName = 5;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCExpressLoveBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCExpressLoveBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCExpressLoveBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCExpressLoveBack::MergeFrom(const GCExpressLoveBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourceplayerid()) {
      set_sourceplayerid(from.sourceplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCExpressLoveBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCExpressLoveBack::CopyFrom(const GCExpressLoveBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExpressLoveBack::IsInitialized() const {

  return true;
}

void GCExpressLoveBack::Swap(GCExpressLoveBack* other) {
  if (other != this) {
    std::swap(sourceplayerid_, other->sourceplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(ringid_, other->ringid_);
    std::swap(result_, other->result_);
    std::swap(targetname_, other->targetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCExpressLoveBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCExpressLoveBack_descriptor_;
  metadata.reflection = GCExpressLoveBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RingInfo::kRingIDFieldNumber;
const int RingInfo::kLevelFieldNumber;
const int RingInfo::kLoveNumFieldNumber;
#endif  // !_MSC_VER

RingInfo::RingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RingInfo)
}

void RingInfo::InitAsDefaultInstance() {
}

RingInfo::RingInfo(const RingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RingInfo)
}

void RingInfo::SharedCtor() {
  _cached_size_ = 0;
  ringid_ = 0;
  level_ = 0;
  lovenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RingInfo::~RingInfo() {
  // @@protoc_insertion_point(destructor:RingInfo)
  SharedDtor();
}

void RingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RingInfo_descriptor_;
}

const RingInfo& RingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

RingInfo* RingInfo::default_instance_ = NULL;

RingInfo* RingInfo::New() const {
  return new RingInfo;
}

void RingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ringid_, lovenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ringID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loveNum;
        break;
      }

      // optional int32 loveNum = 3;
      case 3: {
        if (tag == 24) {
         parse_loveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lovenum_)));
          set_has_lovenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RingInfo)
  return false;
#undef DO_
}

void RingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RingInfo)
  // optional int32 ringID = 1;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ringid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 loveNum = 3;
  if (has_lovenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lovenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RingInfo)
}

::google::protobuf::uint8* RingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RingInfo)
  // optional int32 ringID = 1;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ringid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 loveNum = 3;
  if (has_lovenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lovenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RingInfo)
  return target;
}

int RingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ringID = 1;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 loveNum = 3;
    if (has_lovenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lovenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RingInfo::MergeFrom(const RingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_lovenum()) {
      set_lovenum(from.lovenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingInfo::CopyFrom(const RingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingInfo::IsInitialized() const {

  return true;
}

void RingInfo::Swap(RingInfo* other) {
  if (other != this) {
    std::swap(ringid_, other->ringid_);
    std::swap(level_, other->level_);
    std::swap(lovenum_, other->lovenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RingInfo_descriptor_;
  metadata.reflection = RingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMarrySts::kStsFieldNumber;
const int GCMarrySts::kSexFieldNumber;
const int GCMarrySts::kRingInfoFieldNumber;
const int GCMarrySts::kArriveTimeFieldNumber;
const int GCMarrySts::kDivorcePlayerIdFieldNumber;
const int GCMarrySts::kDivorcePlayerNameFieldNumber;
#endif  // !_MSC_VER

GCMarrySts::GCMarrySts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMarrySts)
}

void GCMarrySts::InitAsDefaultInstance() {
  ringinfo_ = const_cast< ::RingInfo*>(&::RingInfo::default_instance());
}

GCMarrySts::GCMarrySts(const GCMarrySts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMarrySts)
}

void GCMarrySts::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sts_ = 0;
  sex_ = 0;
  ringinfo_ = NULL;
  arrivetime_ = GOOGLE_LONGLONG(0);
  divorceplayerid_ = GOOGLE_LONGLONG(0);
  divorceplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMarrySts::~GCMarrySts() {
  // @@protoc_insertion_point(destructor:GCMarrySts)
  SharedDtor();
}

void GCMarrySts::SharedDtor() {
  if (divorceplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete divorceplayername_;
  }
  if (this != default_instance_) {
    delete ringinfo_;
  }
}

void GCMarrySts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMarrySts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMarrySts_descriptor_;
}

const GCMarrySts& GCMarrySts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCMarrySts* GCMarrySts::default_instance_ = NULL;

GCMarrySts* GCMarrySts::New() const {
  return new GCMarrySts;
}

void GCMarrySts::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMarrySts*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sts_, sex_);
    ZR_(arrivetime_, divorceplayerid_);
    if (has_ringinfo()) {
      if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
    }
    if (has_divorceplayername()) {
      if (divorceplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        divorceplayername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMarrySts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMarrySts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional int32 sex = 2;
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ringInfo;
        break;
      }

      // optional .RingInfo ringInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ringInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ringinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_arriveTime;
        break;
      }

      // optional int64 arriveTime = 4;
      case 4: {
        if (tag == 32) {
         parse_arriveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arrivetime_)));
          set_has_arrivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_divorcePlayerId;
        break;
      }

      // optional int64 divorcePlayerId = 5;
      case 5: {
        if (tag == 40) {
         parse_divorcePlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &divorceplayerid_)));
          set_has_divorceplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_divorcePlayerName;
        break;
      }

      // optional string divorcePlayerName = 6;
      case 6: {
        if (tag == 50) {
         parse_divorcePlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_divorceplayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->divorceplayername().data(), this->divorceplayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "divorceplayername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMarrySts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMarrySts)
  return false;
#undef DO_
}

void GCMarrySts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMarrySts)
  // optional int32 sts = 1;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sts(), output);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sex(), output);
  }

  // optional .RingInfo ringInfo = 3;
  if (has_ringinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ringinfo(), output);
  }

  // optional int64 arriveTime = 4;
  if (has_arrivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->arrivetime(), output);
  }

  // optional int64 divorcePlayerId = 5;
  if (has_divorceplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->divorceplayerid(), output);
  }

  // optional string divorcePlayerName = 6;
  if (has_divorceplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->divorceplayername().data(), this->divorceplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "divorceplayername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->divorceplayername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMarrySts)
}

::google::protobuf::uint8* GCMarrySts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMarrySts)
  // optional int32 sts = 1;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sts(), target);
  }

  // optional int32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sex(), target);
  }

  // optional .RingInfo ringInfo = 3;
  if (has_ringinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ringinfo(), target);
  }

  // optional int64 arriveTime = 4;
  if (has_arrivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->arrivetime(), target);
  }

  // optional int64 divorcePlayerId = 5;
  if (has_divorceplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->divorceplayerid(), target);
  }

  // optional string divorcePlayerName = 6;
  if (has_divorceplayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->divorceplayername().data(), this->divorceplayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "divorceplayername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->divorceplayername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMarrySts)
  return target;
}

int GCMarrySts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sts = 1;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

    // optional int32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional .RingInfo ringInfo = 3;
    if (has_ringinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ringinfo());
    }

    // optional int64 arriveTime = 4;
    if (has_arrivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arrivetime());
    }

    // optional int64 divorcePlayerId = 5;
    if (has_divorceplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->divorceplayerid());
    }

    // optional string divorcePlayerName = 6;
    if (has_divorceplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->divorceplayername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMarrySts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMarrySts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMarrySts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMarrySts::MergeFrom(const GCMarrySts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sts()) {
      set_sts(from.sts());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_ringinfo()) {
      mutable_ringinfo()->::RingInfo::MergeFrom(from.ringinfo());
    }
    if (from.has_arrivetime()) {
      set_arrivetime(from.arrivetime());
    }
    if (from.has_divorceplayerid()) {
      set_divorceplayerid(from.divorceplayerid());
    }
    if (from.has_divorceplayername()) {
      set_divorceplayername(from.divorceplayername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMarrySts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMarrySts::CopyFrom(const GCMarrySts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMarrySts::IsInitialized() const {

  return true;
}

void GCMarrySts::Swap(GCMarrySts* other) {
  if (other != this) {
    std::swap(sts_, other->sts_);
    std::swap(sex_, other->sex_);
    std::swap(ringinfo_, other->ringinfo_);
    std::swap(arrivetime_, other->arrivetime_);
    std::swap(divorceplayerid_, other->divorceplayerid_);
    std::swap(divorceplayername_, other->divorceplayername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMarrySts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMarrySts_descriptor_;
  metadata.reflection = GCMarrySts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGMarryRingPower::CGMarryRingPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMarryRingPower)
}

void CGMarryRingPower::InitAsDefaultInstance() {
}

CGMarryRingPower::CGMarryRingPower(const CGMarryRingPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMarryRingPower)
}

void CGMarryRingPower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMarryRingPower::~CGMarryRingPower() {
  // @@protoc_insertion_point(destructor:CGMarryRingPower)
  SharedDtor();
}

void CGMarryRingPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMarryRingPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMarryRingPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMarryRingPower_descriptor_;
}

const CGMarryRingPower& CGMarryRingPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGMarryRingPower* CGMarryRingPower::default_instance_ = NULL;

CGMarryRingPower* CGMarryRingPower::New() const {
  return new CGMarryRingPower;
}

void CGMarryRingPower::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMarryRingPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMarryRingPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGMarryRingPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMarryRingPower)
  return false;
#undef DO_
}

void CGMarryRingPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMarryRingPower)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMarryRingPower)
}

::google::protobuf::uint8* CGMarryRingPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMarryRingPower)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMarryRingPower)
  return target;
}

int CGMarryRingPower::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMarryRingPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMarryRingPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMarryRingPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMarryRingPower::MergeFrom(const CGMarryRingPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMarryRingPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMarryRingPower::CopyFrom(const CGMarryRingPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMarryRingPower::IsInitialized() const {

  return true;
}

void CGMarryRingPower::Swap(CGMarryRingPower* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMarryRingPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMarryRingPower_descriptor_;
  metadata.reflection = CGMarryRingPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMarryRingPower::kRingInfoFieldNumber;
#endif  // !_MSC_VER

GCMarryRingPower::GCMarryRingPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMarryRingPower)
}

void GCMarryRingPower::InitAsDefaultInstance() {
  ringinfo_ = const_cast< ::RingInfo*>(&::RingInfo::default_instance());
}

GCMarryRingPower::GCMarryRingPower(const GCMarryRingPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMarryRingPower)
}

void GCMarryRingPower::SharedCtor() {
  _cached_size_ = 0;
  ringinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMarryRingPower::~GCMarryRingPower() {
  // @@protoc_insertion_point(destructor:GCMarryRingPower)
  SharedDtor();
}

void GCMarryRingPower::SharedDtor() {
  if (this != default_instance_) {
    delete ringinfo_;
  }
}

void GCMarryRingPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMarryRingPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMarryRingPower_descriptor_;
}

const GCMarryRingPower& GCMarryRingPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCMarryRingPower* GCMarryRingPower::default_instance_ = NULL;

GCMarryRingPower* GCMarryRingPower::New() const {
  return new GCMarryRingPower;
}

void GCMarryRingPower::Clear() {
  if (has_ringinfo()) {
    if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMarryRingPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMarryRingPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RingInfo ringInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ringinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMarryRingPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMarryRingPower)
  return false;
#undef DO_
}

void GCMarryRingPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMarryRingPower)
  // optional .RingInfo ringInfo = 1;
  if (has_ringinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ringinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMarryRingPower)
}

::google::protobuf::uint8* GCMarryRingPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMarryRingPower)
  // optional .RingInfo ringInfo = 1;
  if (has_ringinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ringinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMarryRingPower)
  return target;
}

int GCMarryRingPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RingInfo ringInfo = 1;
    if (has_ringinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ringinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMarryRingPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMarryRingPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMarryRingPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMarryRingPower::MergeFrom(const GCMarryRingPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ringinfo()) {
      mutable_ringinfo()->::RingInfo::MergeFrom(from.ringinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMarryRingPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMarryRingPower::CopyFrom(const GCMarryRingPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMarryRingPower::IsInitialized() const {

  return true;
}

void GCMarryRingPower::Swap(GCMarryRingPower* other) {
  if (other != this) {
    std::swap(ringinfo_, other->ringinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMarryRingPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMarryRingPower_descriptor_;
  metadata.reflection = GCMarryRingPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGSearchMarryInfo::CGSearchMarryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSearchMarryInfo)
}

void CGSearchMarryInfo::InitAsDefaultInstance() {
}

CGSearchMarryInfo::CGSearchMarryInfo(const CGSearchMarryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSearchMarryInfo)
}

void CGSearchMarryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSearchMarryInfo::~CGSearchMarryInfo() {
  // @@protoc_insertion_point(destructor:CGSearchMarryInfo)
  SharedDtor();
}

void CGSearchMarryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSearchMarryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSearchMarryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSearchMarryInfo_descriptor_;
}

const CGSearchMarryInfo& CGSearchMarryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGSearchMarryInfo* CGSearchMarryInfo::default_instance_ = NULL;

CGSearchMarryInfo* CGSearchMarryInfo::New() const {
  return new CGSearchMarryInfo;
}

void CGSearchMarryInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSearchMarryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSearchMarryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGSearchMarryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSearchMarryInfo)
  return false;
#undef DO_
}

void CGSearchMarryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSearchMarryInfo)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSearchMarryInfo)
}

::google::protobuf::uint8* CGSearchMarryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSearchMarryInfo)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSearchMarryInfo)
  return target;
}

int CGSearchMarryInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSearchMarryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSearchMarryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSearchMarryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSearchMarryInfo::MergeFrom(const CGSearchMarryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSearchMarryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSearchMarryInfo::CopyFrom(const CGSearchMarryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSearchMarryInfo::IsInitialized() const {

  return true;
}

void CGSearchMarryInfo::Swap(CGSearchMarryInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSearchMarryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSearchMarryInfo_descriptor_;
  metadata.reflection = CGSearchMarryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSearchMarryInfo::kSidFieldNumber;
const int GCSearchMarryInfo::kPlayerNameFieldNumber;
const int GCSearchMarryInfo::kRingInfoFieldNumber;
const int GCSearchMarryInfo::kChangInfoFieldNumber;
#endif  // !_MSC_VER

GCSearchMarryInfo::GCSearchMarryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSearchMarryInfo)
}

void GCSearchMarryInfo::InitAsDefaultInstance() {
  ringinfo_ = const_cast< ::RingInfo*>(&::RingInfo::default_instance());
  changinfo_ = const_cast< ::ChangeEquipInfo*>(&::ChangeEquipInfo::default_instance());
}

GCSearchMarryInfo::GCSearchMarryInfo(const GCSearchMarryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSearchMarryInfo)
}

void GCSearchMarryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sid_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ringinfo_ = NULL;
  changinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSearchMarryInfo::~GCSearchMarryInfo() {
  // @@protoc_insertion_point(destructor:GCSearchMarryInfo)
  SharedDtor();
}

void GCSearchMarryInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete ringinfo_;
    delete changinfo_;
  }
}

void GCSearchMarryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSearchMarryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSearchMarryInfo_descriptor_;
}

const GCSearchMarryInfo& GCSearchMarryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCSearchMarryInfo* GCSearchMarryInfo::default_instance_ = NULL;

GCSearchMarryInfo* GCSearchMarryInfo::New() const {
  return new GCSearchMarryInfo;
}

void GCSearchMarryInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    sid_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
    if (has_ringinfo()) {
      if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
    }
    if (has_changinfo()) {
      if (changinfo_ != NULL) changinfo_->::ChangeEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSearchMarryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSearchMarryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ringInfo;
        break;
      }

      // optional .RingInfo ringInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ringInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ringinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_changInfo;
        break;
      }

      // optional .ChangeEquipInfo changInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_changInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSearchMarryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSearchMarryInfo)
  return false;
#undef DO_
}

void GCSearchMarryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSearchMarryInfo)
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional .RingInfo ringInfo = 3;
  if (has_ringinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ringinfo(), output);
  }

  // optional .ChangeEquipInfo changInfo = 4;
  if (has_changinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->changinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSearchMarryInfo)
}

::google::protobuf::uint8* GCSearchMarryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSearchMarryInfo)
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional .RingInfo ringInfo = 3;
  if (has_ringinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ringinfo(), target);
  }

  // optional .ChangeEquipInfo changInfo = 4;
  if (has_changinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->changinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSearchMarryInfo)
  return target;
}

int GCSearchMarryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional .RingInfo ringInfo = 3;
    if (has_ringinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ringinfo());
    }

    // optional .ChangeEquipInfo changInfo = 4;
    if (has_changinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSearchMarryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSearchMarryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSearchMarryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSearchMarryInfo::MergeFrom(const GCSearchMarryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_ringinfo()) {
      mutable_ringinfo()->::RingInfo::MergeFrom(from.ringinfo());
    }
    if (from.has_changinfo()) {
      mutable_changinfo()->::ChangeEquipInfo::MergeFrom(from.changinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSearchMarryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSearchMarryInfo::CopyFrom(const GCSearchMarryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSearchMarryInfo::IsInitialized() const {

  return true;
}

void GCSearchMarryInfo::Swap(GCSearchMarryInfo* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(playername_, other->playername_);
    std::swap(ringinfo_, other->ringinfo_);
    std::swap(changinfo_, other->changinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSearchMarryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSearchMarryInfo_descriptor_;
  metadata.reflection = GCSearchMarryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGDivorce::kDivorceTypeFieldNumber;
#endif  // !_MSC_VER

CGDivorce::CGDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGDivorce)
}

void CGDivorce::InitAsDefaultInstance() {
}

CGDivorce::CGDivorce(const CGDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGDivorce)
}

void CGDivorce::SharedCtor() {
  _cached_size_ = 0;
  divorcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGDivorce::~CGDivorce() {
  // @@protoc_insertion_point(destructor:CGDivorce)
  SharedDtor();
}

void CGDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGDivorce_descriptor_;
}

const CGDivorce& CGDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGDivorce* CGDivorce::default_instance_ = NULL;

CGDivorce* CGDivorce::New() const {
  return new CGDivorce;
}

void CGDivorce::Clear() {
  divorcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGDivorce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 divorceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divorcetype_)));
          set_has_divorcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGDivorce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGDivorce)
  return false;
#undef DO_
}

void CGDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGDivorce)
  // optional int32 divorceType = 1;
  if (has_divorcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->divorcetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGDivorce)
}

::google::protobuf::uint8* CGDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGDivorce)
  // optional int32 divorceType = 1;
  if (has_divorcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->divorcetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGDivorce)
  return target;
}

int CGDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 divorceType = 1;
    if (has_divorcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divorcetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGDivorce::MergeFrom(const CGDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_divorcetype()) {
      set_divorcetype(from.divorcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGDivorce::CopyFrom(const CGDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGDivorce::IsInitialized() const {

  return true;
}

void CGDivorce::Swap(CGDivorce* other) {
  if (other != this) {
    std::swap(divorcetype_, other->divorcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGDivorce_descriptor_;
  metadata.reflection = CGDivorce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDivorce::kDivorceTypeFieldNumber;
const int GCDivorce::kDataFieldNumber;
#endif  // !_MSC_VER

GCDivorce::GCDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDivorce)
}

void GCDivorce::InitAsDefaultInstance() {
  data_ = const_cast< ::GCMarrySts*>(&::GCMarrySts::default_instance());
}

GCDivorce::GCDivorce(const GCDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDivorce)
}

void GCDivorce::SharedCtor() {
  _cached_size_ = 0;
  divorcetype_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDivorce::~GCDivorce() {
  // @@protoc_insertion_point(destructor:GCDivorce)
  SharedDtor();
}

void GCDivorce::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void GCDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDivorce_descriptor_;
}

const GCDivorce& GCDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCDivorce* GCDivorce::default_instance_ = NULL;

GCDivorce* GCDivorce::New() const {
  return new GCDivorce;
}

void GCDivorce::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    divorcetype_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GCMarrySts::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDivorce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 divorceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &divorcetype_)));
          set_has_divorcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .GCMarrySts data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDivorce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDivorce)
  return false;
#undef DO_
}

void GCDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDivorce)
  // optional int32 divorceType = 1;
  if (has_divorcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->divorcetype(), output);
  }

  // optional .GCMarrySts data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDivorce)
}

::google::protobuf::uint8* GCDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDivorce)
  // optional int32 divorceType = 1;
  if (has_divorcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->divorcetype(), target);
  }

  // optional .GCMarrySts data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDivorce)
  return target;
}

int GCDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 divorceType = 1;
    if (has_divorcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->divorcetype());
    }

    // optional .GCMarrySts data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDivorce::MergeFrom(const GCDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_divorcetype()) {
      set_divorcetype(from.divorcetype());
    }
    if (from.has_data()) {
      mutable_data()->::GCMarrySts::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDivorce::CopyFrom(const GCDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDivorce::IsInitialized() const {

  return true;
}

void GCDivorce::Swap(GCDivorce* other) {
  if (other != this) {
    std::swap(divorcetype_, other->divorcetype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDivorce_descriptor_;
  metadata.reflection = GCDivorce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGAgreeOrRefuse::kTypeFieldNumber;
#endif  // !_MSC_VER

CGAgreeOrRefuse::CGAgreeOrRefuse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAgreeOrRefuse)
}

void CGAgreeOrRefuse::InitAsDefaultInstance() {
}

CGAgreeOrRefuse::CGAgreeOrRefuse(const CGAgreeOrRefuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAgreeOrRefuse)
}

void CGAgreeOrRefuse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAgreeOrRefuse::~CGAgreeOrRefuse() {
  // @@protoc_insertion_point(destructor:CGAgreeOrRefuse)
  SharedDtor();
}

void CGAgreeOrRefuse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAgreeOrRefuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAgreeOrRefuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAgreeOrRefuse_descriptor_;
}

const CGAgreeOrRefuse& CGAgreeOrRefuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

CGAgreeOrRefuse* CGAgreeOrRefuse::default_instance_ = NULL;

CGAgreeOrRefuse* CGAgreeOrRefuse::New() const {
  return new CGAgreeOrRefuse;
}

void CGAgreeOrRefuse::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAgreeOrRefuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAgreeOrRefuse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGAgreeOrRefuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAgreeOrRefuse)
  return false;
#undef DO_
}

void CGAgreeOrRefuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAgreeOrRefuse)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAgreeOrRefuse)
}

::google::protobuf::uint8* CGAgreeOrRefuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAgreeOrRefuse)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAgreeOrRefuse)
  return target;
}

int CGAgreeOrRefuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAgreeOrRefuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAgreeOrRefuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAgreeOrRefuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAgreeOrRefuse::MergeFrom(const CGAgreeOrRefuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAgreeOrRefuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAgreeOrRefuse::CopyFrom(const CGAgreeOrRefuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAgreeOrRefuse::IsInitialized() const {

  return true;
}

void CGAgreeOrRefuse::Swap(CGAgreeOrRefuse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAgreeOrRefuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAgreeOrRefuse_descriptor_;
  metadata.reflection = CGAgreeOrRefuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAgreeOrRefuse::kTypeFieldNumber;
const int GCAgreeOrRefuse::kDataFieldNumber;
const int GCAgreeOrRefuse::kPlayerNameFieldNumber;
#endif  // !_MSC_VER

GCAgreeOrRefuse::GCAgreeOrRefuse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAgreeOrRefuse)
}

void GCAgreeOrRefuse::InitAsDefaultInstance() {
  data_ = const_cast< ::GCMarrySts*>(&::GCMarrySts::default_instance());
}

GCAgreeOrRefuse::GCAgreeOrRefuse(const GCAgreeOrRefuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAgreeOrRefuse)
}

void GCAgreeOrRefuse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  data_ = NULL;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAgreeOrRefuse::~GCAgreeOrRefuse() {
  // @@protoc_insertion_point(destructor:GCAgreeOrRefuse)
  SharedDtor();
}

void GCAgreeOrRefuse::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void GCAgreeOrRefuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAgreeOrRefuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAgreeOrRefuse_descriptor_;
}

const GCAgreeOrRefuse& GCAgreeOrRefuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

GCAgreeOrRefuse* GCAgreeOrRefuse::default_instance_ = NULL;

GCAgreeOrRefuse* GCAgreeOrRefuse::New() const {
  return new GCAgreeOrRefuse;
}

void GCAgreeOrRefuse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::GCMarrySts::Clear();
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAgreeOrRefuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAgreeOrRefuse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .GCMarrySts data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playerName;
        break;
      }

      // optional string playerName = 3;
      case 3: {
        if (tag == 26) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAgreeOrRefuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAgreeOrRefuse)
  return false;
#undef DO_
}

void GCAgreeOrRefuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAgreeOrRefuse)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .GCMarrySts data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAgreeOrRefuse)
}

::google::protobuf::uint8* GCAgreeOrRefuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAgreeOrRefuse)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .GCMarrySts data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional string playerName = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAgreeOrRefuse)
  return target;
}

int GCAgreeOrRefuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .GCMarrySts data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional string playerName = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAgreeOrRefuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAgreeOrRefuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAgreeOrRefuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAgreeOrRefuse::MergeFrom(const GCAgreeOrRefuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      mutable_data()->::GCMarrySts::MergeFrom(from.data());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAgreeOrRefuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAgreeOrRefuse::CopyFrom(const GCAgreeOrRefuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAgreeOrRefuse::IsInitialized() const {

  return true;
}

void GCAgreeOrRefuse::Swap(GCAgreeOrRefuse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAgreeOrRefuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAgreeOrRefuse_descriptor_;
  metadata.reflection = GCAgreeOrRefuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryRank::kRankIdFieldNumber;
const int MarryRank::kBoyPlayerIdFieldNumber;
const int MarryRank::kBoyNameFieldNumber;
const int MarryRank::kBoyVipLvFieldNumber;
const int MarryRank::kGirlPlayerIdFieldNumber;
const int MarryRank::kGirlNameFieldNumber;
const int MarryRank::kGirlVipLvFieldNumber;
const int MarryRank::kTotalLoveNumFieldNumber;
#endif  // !_MSC_VER

MarryRank::MarryRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarryRank)
}

void MarryRank::InitAsDefaultInstance() {
}

MarryRank::MarryRank(const MarryRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MarryRank)
}

void MarryRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rankid_ = 0;
  boyplayerid_ = GOOGLE_LONGLONG(0);
  boyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boyviplv_ = 0;
  girlplayerid_ = GOOGLE_LONGLONG(0);
  girlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  girlviplv_ = 0;
  totallovenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRank::~MarryRank() {
  // @@protoc_insertion_point(destructor:MarryRank)
  SharedDtor();
}

void MarryRank::SharedDtor() {
  if (boyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boyname_;
  }
  if (girlname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete girlname_;
  }
  if (this != default_instance_) {
  }
}

void MarryRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRank_descriptor_;
}

const MarryRank& MarryRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarryMessage_2eproto();
  return *default_instance_;
}

MarryRank* MarryRank::default_instance_ = NULL;

MarryRank* MarryRank::New() const {
  return new MarryRank;
}

void MarryRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarryRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(boyplayerid_, boyviplv_);
    ZR_(girlviplv_, totallovenum_);
    if (has_boyname()) {
      if (boyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        boyname_->clear();
      }
    }
    girlplayerid_ = GOOGLE_LONGLONG(0);
    if (has_girlname()) {
      if (girlname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        girlname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarryRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_boyPlayerId;
        break;
      }

      // optional int64 boyPlayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_boyPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boyplayerid_)));
          set_has_boyplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_boyName;
        break;
      }

      // optional string boyName = 3;
      case 3: {
        if (tag == 26) {
         parse_boyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->boyname().data(), this->boyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "boyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_boyVipLv;
        break;
      }

      // optional int32 boyVipLv = 4;
      case 4: {
        if (tag == 32) {
         parse_boyVipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boyviplv_)));
          set_has_boyviplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_girlPlayerId;
        break;
      }

      // optional int64 girlPlayerId = 5;
      case 5: {
        if (tag == 40) {
         parse_girlPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &girlplayerid_)));
          set_has_girlplayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_girlName;
        break;
      }

      // optional string girlName = 6;
      case 6: {
        if (tag == 50) {
         parse_girlName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_girlname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->girlname().data(), this->girlname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "girlname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_girlVipLv;
        break;
      }

      // optional int32 girlVipLv = 7;
      case 7: {
        if (tag == 56) {
         parse_girlVipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &girlviplv_)));
          set_has_girlviplv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_totalLoveNum;
        break;
      }

      // optional int32 totalLoveNum = 8;
      case 8: {
        if (tag == 64) {
         parse_totalLoveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallovenum_)));
          set_has_totallovenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarryRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarryRank)
  return false;
#undef DO_
}

void MarryRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarryRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankid(), output);
  }

  // optional int64 boyPlayerId = 2;
  if (has_boyplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->boyplayerid(), output);
  }

  // optional string boyName = 3;
  if (has_boyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boyname().data(), this->boyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->boyname(), output);
  }

  // optional int32 boyVipLv = 4;
  if (has_boyviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boyviplv(), output);
  }

  // optional int64 girlPlayerId = 5;
  if (has_girlplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->girlplayerid(), output);
  }

  // optional string girlName = 6;
  if (has_girlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->girlname().data(), this->girlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "girlname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->girlname(), output);
  }

  // optional int32 girlVipLv = 7;
  if (has_girlviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->girlviplv(), output);
  }

  // optional int32 totalLoveNum = 8;
  if (has_totallovenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->totallovenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarryRank)
}

::google::protobuf::uint8* MarryRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarryRank)
  // optional int32 rankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankid(), target);
  }

  // optional int64 boyPlayerId = 2;
  if (has_boyplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->boyplayerid(), target);
  }

  // optional string boyName = 3;
  if (has_boyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->boyname().data(), this->boyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "boyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->boyname(), target);
  }

  // optional int32 boyVipLv = 4;
  if (has_boyviplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boyviplv(), target);
  }

  // optional int64 girlPlayerId = 5;
  if (has_girlplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->girlplayerid(), target);
  }

  // optional string girlName = 6;
  if (has_girlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->girlname().data(), this->girlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "girlname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->girlname(), target);
  }

  // optional int32 girlVipLv = 7;
  if (has_girlviplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->girlviplv(), target);
  }

  // optional int32 totalLoveNum = 8;
  if (has_totallovenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totallovenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarryRank)
  return target;
}

int MarryRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int64 boyPlayerId = 2;
    if (has_boyplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boyplayerid());
    }

    // optional string boyName = 3;
    if (has_boyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boyname());
    }

    // optional int32 boyVipLv = 4;
    if (has_boyviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boyviplv());
    }

    // optional int64 girlPlayerId = 5;
    if (has_girlplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->girlplayerid());
    }

    // optional string girlName = 6;
    if (has_girlname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->girlname());
    }

    // optional int32 girlVipLv = 7;
    if (has_girlviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->girlviplv());
    }

    // optional int32 totalLoveNum = 8;
    if (has_totallovenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totallovenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRank::MergeFrom(const MarryRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_boyplayerid()) {
      set_boyplayerid(from.boyplayerid());
    }
    if (from.has_boyname()) {
      set_boyname(from.boyname());
    }
    if (from.has_boyviplv()) {
      set_boyviplv(from.boyviplv());
    }
    if (from.has_girlplayerid()) {
      set_girlplayerid(from.girlplayerid());
    }
    if (from.has_girlname()) {
      set_girlname(from.girlname());
    }
    if (from.has_girlviplv()) {
      set_girlviplv(from.girlviplv());
    }
    if (from.has_totallovenum()) {
      set_totallovenum(from.totallovenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRank::CopyFrom(const MarryRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRank::IsInitialized() const {

  return true;
}

void MarryRank::Swap(MarryRank* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(boyplayerid_, other->boyplayerid_);
    std::swap(boyname_, other->boyname_);
    std::swap(boyviplv_, other->boyviplv_);
    std::swap(girlplayerid_, other->girlplayerid_);
    std::swap(girlname_, other->girlname_);
    std::swap(girlviplv_, other->girlviplv_);
    std::swap(totallovenum_, other->totallovenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRank_descriptor_;
  metadata.reflection = MarryRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
