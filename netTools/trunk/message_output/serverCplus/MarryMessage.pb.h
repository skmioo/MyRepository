// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarryMessage.proto

#ifndef PROTOBUF_MarryMessage_2eproto__INCLUDED
#define PROTOBUF_MarryMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MarryMessage_2eproto();
void protobuf_AssignDesc_MarryMessage_2eproto();
void protobuf_ShutdownFile_MarryMessage_2eproto();

class CGDoMarry;
class GCDoMarry;
class CGExpressLove;
class GCExpressLove;
class CGExpressLoveBack;
class GCExpressLoveBack;
class RingInfo;
class GCMarrySts;
class CGMarryRingPower;
class GCMarryRingPower;
class CGSearchMarryInfo;
class GCSearchMarryInfo;
class CGDivorce;
class GCDivorce;
class CGAgreeOrRefuse;
class GCAgreeOrRefuse;
class MarryRank;

// ===================================================================

class CGDoMarry : public ::google::protobuf::Message {
 public:
  CGDoMarry();
  virtual ~CGDoMarry();

  CGDoMarry(const CGDoMarry& from);

  inline CGDoMarry& operator=(const CGDoMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGDoMarry& default_instance();

  void Swap(CGDoMarry* other);

  // implements Message ----------------------------------------------

  CGDoMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGDoMarry& from);
  void MergeFrom(const CGDoMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 4;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 4;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGDoMarry)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::google::protobuf::int32 ringid_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGDoMarry* default_instance_;
};
// -------------------------------------------------------------------

class GCDoMarry : public ::google::protobuf::Message {
 public:
  GCDoMarry();
  virtual ~GCDoMarry();

  GCDoMarry(const GCDoMarry& from);

  inline GCDoMarry& operator=(const GCDoMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCDoMarry& default_instance();

  void Swap(GCDoMarry* other);

  // implements Message ----------------------------------------------

  GCDoMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCDoMarry& from);
  void MergeFrom(const GCDoMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 3;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 3;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional string sourceName = 4;
  inline bool has_sourcename() const;
  inline void clear_sourcename();
  static const int kSourceNameFieldNumber = 4;
  inline const ::std::string& sourcename() const;
  inline void set_sourcename(const ::std::string& value);
  inline void set_sourcename(const char* value);
  inline void set_sourcename(const char* value, size_t size);
  inline ::std::string* mutable_sourcename();
  inline ::std::string* release_sourcename();
  inline void set_allocated_sourcename(::std::string* sourcename);

  // @@protoc_insertion_point(class_scope:GCDoMarry)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_sourcename();
  inline void clear_has_sourcename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::std::string* sourcename_;
  ::google::protobuf::int32 ringid_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCDoMarry* default_instance_;
};
// -------------------------------------------------------------------

class CGExpressLove : public ::google::protobuf::Message {
 public:
  CGExpressLove();
  virtual ~CGExpressLove();

  CGExpressLove(const CGExpressLove& from);

  inline CGExpressLove& operator=(const CGExpressLove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGExpressLove& default_instance();

  void Swap(CGExpressLove* other);

  // implements Message ----------------------------------------------

  CGExpressLove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGExpressLove& from);
  void MergeFrom(const CGExpressLove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 3;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 3;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional string loveLetter = 4;
  inline bool has_loveletter() const;
  inline void clear_loveletter();
  static const int kLoveLetterFieldNumber = 4;
  inline const ::std::string& loveletter() const;
  inline void set_loveletter(const ::std::string& value);
  inline void set_loveletter(const char* value);
  inline void set_loveletter(const char* value, size_t size);
  inline ::std::string* mutable_loveletter();
  inline ::std::string* release_loveletter();
  inline void set_allocated_loveletter(::std::string* loveletter);

  // @@protoc_insertion_point(class_scope:CGExpressLove)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_loveletter();
  inline void clear_has_loveletter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::std::string* loveletter_;
  ::google::protobuf::int32 ringid_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGExpressLove* default_instance_;
};
// -------------------------------------------------------------------

class GCExpressLove : public ::google::protobuf::Message {
 public:
  GCExpressLove();
  virtual ~GCExpressLove();

  GCExpressLove(const GCExpressLove& from);

  inline GCExpressLove& operator=(const GCExpressLove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCExpressLove& default_instance();

  void Swap(GCExpressLove* other);

  // implements Message ----------------------------------------------

  GCExpressLove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCExpressLove& from);
  void MergeFrom(const GCExpressLove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 3;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 3;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional string loveLetter = 4;
  inline bool has_loveletter() const;
  inline void clear_loveletter();
  static const int kLoveLetterFieldNumber = 4;
  inline const ::std::string& loveletter() const;
  inline void set_loveletter(const ::std::string& value);
  inline void set_loveletter(const char* value);
  inline void set_loveletter(const char* value, size_t size);
  inline ::std::string* mutable_loveletter();
  inline ::std::string* release_loveletter();
  inline void set_allocated_loveletter(::std::string* loveletter);

  // optional string sourceName = 5;
  inline bool has_sourcename() const;
  inline void clear_sourcename();
  static const int kSourceNameFieldNumber = 5;
  inline const ::std::string& sourcename() const;
  inline void set_sourcename(const ::std::string& value);
  inline void set_sourcename(const char* value);
  inline void set_sourcename(const char* value, size_t size);
  inline ::std::string* mutable_sourcename();
  inline ::std::string* release_sourcename();
  inline void set_allocated_sourcename(::std::string* sourcename);

  // @@protoc_insertion_point(class_scope:GCExpressLove)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_loveletter();
  inline void clear_has_loveletter();
  inline void set_has_sourcename();
  inline void clear_has_sourcename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::std::string* loveletter_;
  ::std::string* sourcename_;
  ::google::protobuf::int32 ringid_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCExpressLove* default_instance_;
};
// -------------------------------------------------------------------

class CGExpressLoveBack : public ::google::protobuf::Message {
 public:
  CGExpressLoveBack();
  virtual ~CGExpressLoveBack();

  CGExpressLoveBack(const CGExpressLoveBack& from);

  inline CGExpressLoveBack& operator=(const CGExpressLoveBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGExpressLoveBack& default_instance();

  void Swap(CGExpressLoveBack* other);

  // implements Message ----------------------------------------------

  CGExpressLoveBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGExpressLoveBack& from);
  void MergeFrom(const CGExpressLoveBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 3;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 3;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGExpressLoveBack)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::google::protobuf::int32 ringid_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGExpressLoveBack* default_instance_;
};
// -------------------------------------------------------------------

class GCExpressLoveBack : public ::google::protobuf::Message {
 public:
  GCExpressLoveBack();
  virtual ~GCExpressLoveBack();

  GCExpressLoveBack(const GCExpressLoveBack& from);

  inline GCExpressLoveBack& operator=(const GCExpressLoveBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCExpressLoveBack& default_instance();

  void Swap(GCExpressLoveBack* other);

  // implements Message ----------------------------------------------

  GCExpressLoveBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCExpressLoveBack& from);
  void MergeFrom(const GCExpressLoveBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 sourcePlayerId = 1;
  inline bool has_sourceplayerid() const;
  inline void clear_sourceplayerid();
  static const int kSourcePlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 sourceplayerid() const;
  inline void set_sourceplayerid(::google::protobuf::int64 value);

  // optional int64 targetPlayerId = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::int64 value);

  // optional int32 ringId = 3;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 3;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string targetName = 5;
  inline bool has_targetname() const;
  inline void clear_targetname();
  static const int kTargetNameFieldNumber = 5;
  inline const ::std::string& targetname() const;
  inline void set_targetname(const ::std::string& value);
  inline void set_targetname(const char* value);
  inline void set_targetname(const char* value, size_t size);
  inline ::std::string* mutable_targetname();
  inline ::std::string* release_targetname();
  inline void set_allocated_targetname(::std::string* targetname);

  // @@protoc_insertion_point(class_scope:GCExpressLoveBack)
 private:
  inline void set_has_sourceplayerid();
  inline void clear_has_sourceplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_targetname();
  inline void clear_has_targetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 sourceplayerid_;
  ::google::protobuf::int64 targetplayerid_;
  ::google::protobuf::int32 ringid_;
  ::google::protobuf::int32 result_;
  ::std::string* targetname_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCExpressLoveBack* default_instance_;
};
// -------------------------------------------------------------------

class RingInfo : public ::google::protobuf::Message {
 public:
  RingInfo();
  virtual ~RingInfo();

  RingInfo(const RingInfo& from);

  inline RingInfo& operator=(const RingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RingInfo& default_instance();

  void Swap(RingInfo* other);

  // implements Message ----------------------------------------------

  RingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RingInfo& from);
  void MergeFrom(const RingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ringID = 1;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIDFieldNumber = 1;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 loveNum = 3;
  inline bool has_lovenum() const;
  inline void clear_lovenum();
  static const int kLoveNumFieldNumber = 3;
  inline ::google::protobuf::int32 lovenum() const;
  inline void set_lovenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RingInfo)
 private:
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_lovenum();
  inline void clear_has_lovenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ringid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 lovenum_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static RingInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCMarrySts : public ::google::protobuf::Message {
 public:
  GCMarrySts();
  virtual ~GCMarrySts();

  GCMarrySts(const GCMarrySts& from);

  inline GCMarrySts& operator=(const GCMarrySts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMarrySts& default_instance();

  void Swap(GCMarrySts* other);

  // implements Message ----------------------------------------------

  GCMarrySts* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMarrySts& from);
  void MergeFrom(const GCMarrySts& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sts = 1;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 1;
  inline ::google::protobuf::int32 sts() const;
  inline void set_sts(::google::protobuf::int32 value);

  // optional int32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional .RingInfo ringInfo = 3;
  inline bool has_ringinfo() const;
  inline void clear_ringinfo();
  static const int kRingInfoFieldNumber = 3;
  inline const ::RingInfo& ringinfo() const;
  inline ::RingInfo* mutable_ringinfo();
  inline ::RingInfo* release_ringinfo();
  inline void set_allocated_ringinfo(::RingInfo* ringinfo);

  // optional int64 arriveTime = 4;
  inline bool has_arrivetime() const;
  inline void clear_arrivetime();
  static const int kArriveTimeFieldNumber = 4;
  inline ::google::protobuf::int64 arrivetime() const;
  inline void set_arrivetime(::google::protobuf::int64 value);

  // optional int64 divorcePlayerId = 5;
  inline bool has_divorceplayerid() const;
  inline void clear_divorceplayerid();
  static const int kDivorcePlayerIdFieldNumber = 5;
  inline ::google::protobuf::int64 divorceplayerid() const;
  inline void set_divorceplayerid(::google::protobuf::int64 value);

  // optional string divorcePlayerName = 6;
  inline bool has_divorceplayername() const;
  inline void clear_divorceplayername();
  static const int kDivorcePlayerNameFieldNumber = 6;
  inline const ::std::string& divorceplayername() const;
  inline void set_divorceplayername(const ::std::string& value);
  inline void set_divorceplayername(const char* value);
  inline void set_divorceplayername(const char* value, size_t size);
  inline ::std::string* mutable_divorceplayername();
  inline ::std::string* release_divorceplayername();
  inline void set_allocated_divorceplayername(::std::string* divorceplayername);

  // @@protoc_insertion_point(class_scope:GCMarrySts)
 private:
  inline void set_has_sts();
  inline void clear_has_sts();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_ringinfo();
  inline void clear_has_ringinfo();
  inline void set_has_arrivetime();
  inline void clear_has_arrivetime();
  inline void set_has_divorceplayerid();
  inline void clear_has_divorceplayerid();
  inline void set_has_divorceplayername();
  inline void clear_has_divorceplayername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sts_;
  ::google::protobuf::int32 sex_;
  ::RingInfo* ringinfo_;
  ::google::protobuf::int64 arrivetime_;
  ::google::protobuf::int64 divorceplayerid_;
  ::std::string* divorceplayername_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMarrySts* default_instance_;
};
// -------------------------------------------------------------------

class CGMarryRingPower : public ::google::protobuf::Message {
 public:
  CGMarryRingPower();
  virtual ~CGMarryRingPower();

  CGMarryRingPower(const CGMarryRingPower& from);

  inline CGMarryRingPower& operator=(const CGMarryRingPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGMarryRingPower& default_instance();

  void Swap(CGMarryRingPower* other);

  // implements Message ----------------------------------------------

  CGMarryRingPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGMarryRingPower& from);
  void MergeFrom(const CGMarryRingPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGMarryRingPower)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGMarryRingPower* default_instance_;
};
// -------------------------------------------------------------------

class GCMarryRingPower : public ::google::protobuf::Message {
 public:
  GCMarryRingPower();
  virtual ~GCMarryRingPower();

  GCMarryRingPower(const GCMarryRingPower& from);

  inline GCMarryRingPower& operator=(const GCMarryRingPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMarryRingPower& default_instance();

  void Swap(GCMarryRingPower* other);

  // implements Message ----------------------------------------------

  GCMarryRingPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMarryRingPower& from);
  void MergeFrom(const GCMarryRingPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RingInfo ringInfo = 1;
  inline bool has_ringinfo() const;
  inline void clear_ringinfo();
  static const int kRingInfoFieldNumber = 1;
  inline const ::RingInfo& ringinfo() const;
  inline ::RingInfo* mutable_ringinfo();
  inline ::RingInfo* release_ringinfo();
  inline void set_allocated_ringinfo(::RingInfo* ringinfo);

  // @@protoc_insertion_point(class_scope:GCMarryRingPower)
 private:
  inline void set_has_ringinfo();
  inline void clear_has_ringinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RingInfo* ringinfo_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMarryRingPower* default_instance_;
};
// -------------------------------------------------------------------

class CGSearchMarryInfo : public ::google::protobuf::Message {
 public:
  CGSearchMarryInfo();
  virtual ~CGSearchMarryInfo();

  CGSearchMarryInfo(const CGSearchMarryInfo& from);

  inline CGSearchMarryInfo& operator=(const CGSearchMarryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGSearchMarryInfo& default_instance();

  void Swap(CGSearchMarryInfo* other);

  // implements Message ----------------------------------------------

  CGSearchMarryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGSearchMarryInfo& from);
  void MergeFrom(const CGSearchMarryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGSearchMarryInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGSearchMarryInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCSearchMarryInfo : public ::google::protobuf::Message {
 public:
  GCSearchMarryInfo();
  virtual ~GCSearchMarryInfo();

  GCSearchMarryInfo(const GCSearchMarryInfo& from);

  inline GCSearchMarryInfo& operator=(const GCSearchMarryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSearchMarryInfo& default_instance();

  void Swap(GCSearchMarryInfo* other);

  // implements Message ----------------------------------------------

  GCSearchMarryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSearchMarryInfo& from);
  void MergeFrom(const GCSearchMarryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional .RingInfo ringInfo = 3;
  inline bool has_ringinfo() const;
  inline void clear_ringinfo();
  static const int kRingInfoFieldNumber = 3;
  inline const ::RingInfo& ringinfo() const;
  inline ::RingInfo* mutable_ringinfo();
  inline ::RingInfo* release_ringinfo();
  inline void set_allocated_ringinfo(::RingInfo* ringinfo);

  // optional .ChangeEquipInfo changInfo = 4;
  inline bool has_changinfo() const;
  inline void clear_changinfo();
  static const int kChangInfoFieldNumber = 4;
  inline const ::ChangeEquipInfo& changinfo() const;
  inline ::ChangeEquipInfo* mutable_changinfo();
  inline ::ChangeEquipInfo* release_changinfo();
  inline void set_allocated_changinfo(::ChangeEquipInfo* changinfo);

  // @@protoc_insertion_point(class_scope:GCSearchMarryInfo)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_ringinfo();
  inline void clear_has_ringinfo();
  inline void set_has_changinfo();
  inline void clear_has_changinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::RingInfo* ringinfo_;
  ::ChangeEquipInfo* changinfo_;
  ::google::protobuf::int32 sid_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSearchMarryInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGDivorce : public ::google::protobuf::Message {
 public:
  CGDivorce();
  virtual ~CGDivorce();

  CGDivorce(const CGDivorce& from);

  inline CGDivorce& operator=(const CGDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGDivorce& default_instance();

  void Swap(CGDivorce* other);

  // implements Message ----------------------------------------------

  CGDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGDivorce& from);
  void MergeFrom(const CGDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 divorceType = 1;
  inline bool has_divorcetype() const;
  inline void clear_divorcetype();
  static const int kDivorceTypeFieldNumber = 1;
  inline ::google::protobuf::int32 divorcetype() const;
  inline void set_divorcetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGDivorce)
 private:
  inline void set_has_divorcetype();
  inline void clear_has_divorcetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 divorcetype_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGDivorce* default_instance_;
};
// -------------------------------------------------------------------

class GCDivorce : public ::google::protobuf::Message {
 public:
  GCDivorce();
  virtual ~GCDivorce();

  GCDivorce(const GCDivorce& from);

  inline GCDivorce& operator=(const GCDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCDivorce& default_instance();

  void Swap(GCDivorce* other);

  // implements Message ----------------------------------------------

  GCDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCDivorce& from);
  void MergeFrom(const GCDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 divorceType = 1;
  inline bool has_divorcetype() const;
  inline void clear_divorcetype();
  static const int kDivorceTypeFieldNumber = 1;
  inline ::google::protobuf::int32 divorcetype() const;
  inline void set_divorcetype(::google::protobuf::int32 value);

  // optional .GCMarrySts data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GCMarrySts& data() const;
  inline ::GCMarrySts* mutable_data();
  inline ::GCMarrySts* release_data();
  inline void set_allocated_data(::GCMarrySts* data);

  // @@protoc_insertion_point(class_scope:GCDivorce)
 private:
  inline void set_has_divorcetype();
  inline void clear_has_divorcetype();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GCMarrySts* data_;
  ::google::protobuf::int32 divorcetype_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCDivorce* default_instance_;
};
// -------------------------------------------------------------------

class CGAgreeOrRefuse : public ::google::protobuf::Message {
 public:
  CGAgreeOrRefuse();
  virtual ~CGAgreeOrRefuse();

  CGAgreeOrRefuse(const CGAgreeOrRefuse& from);

  inline CGAgreeOrRefuse& operator=(const CGAgreeOrRefuse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGAgreeOrRefuse& default_instance();

  void Swap(CGAgreeOrRefuse* other);

  // implements Message ----------------------------------------------

  CGAgreeOrRefuse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGAgreeOrRefuse& from);
  void MergeFrom(const CGAgreeOrRefuse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGAgreeOrRefuse)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static CGAgreeOrRefuse* default_instance_;
};
// -------------------------------------------------------------------

class GCAgreeOrRefuse : public ::google::protobuf::Message {
 public:
  GCAgreeOrRefuse();
  virtual ~GCAgreeOrRefuse();

  GCAgreeOrRefuse(const GCAgreeOrRefuse& from);

  inline GCAgreeOrRefuse& operator=(const GCAgreeOrRefuse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCAgreeOrRefuse& default_instance();

  void Swap(GCAgreeOrRefuse* other);

  // implements Message ----------------------------------------------

  GCAgreeOrRefuse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCAgreeOrRefuse& from);
  void MergeFrom(const GCAgreeOrRefuse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .GCMarrySts data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::GCMarrySts& data() const;
  inline ::GCMarrySts* mutable_data();
  inline ::GCMarrySts* release_data();
  inline void set_allocated_data(::GCMarrySts* data);

  // optional string playerName = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:GCAgreeOrRefuse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GCMarrySts* data_;
  ::std::string* playername_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GCAgreeOrRefuse* default_instance_;
};
// -------------------------------------------------------------------

class MarryRank : public ::google::protobuf::Message {
 public:
  MarryRank();
  virtual ~MarryRank();

  MarryRank(const MarryRank& from);

  inline MarryRank& operator=(const MarryRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryRank& default_instance();

  void Swap(MarryRank* other);

  // implements Message ----------------------------------------------

  MarryRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryRank& from);
  void MergeFrom(const MarryRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  inline ::google::protobuf::int32 rankid() const;
  inline void set_rankid(::google::protobuf::int32 value);

  // optional int64 boyPlayerId = 2;
  inline bool has_boyplayerid() const;
  inline void clear_boyplayerid();
  static const int kBoyPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int64 boyplayerid() const;
  inline void set_boyplayerid(::google::protobuf::int64 value);

  // optional string boyName = 3;
  inline bool has_boyname() const;
  inline void clear_boyname();
  static const int kBoyNameFieldNumber = 3;
  inline const ::std::string& boyname() const;
  inline void set_boyname(const ::std::string& value);
  inline void set_boyname(const char* value);
  inline void set_boyname(const char* value, size_t size);
  inline ::std::string* mutable_boyname();
  inline ::std::string* release_boyname();
  inline void set_allocated_boyname(::std::string* boyname);

  // optional int32 boyVipLv = 4;
  inline bool has_boyviplv() const;
  inline void clear_boyviplv();
  static const int kBoyVipLvFieldNumber = 4;
  inline ::google::protobuf::int32 boyviplv() const;
  inline void set_boyviplv(::google::protobuf::int32 value);

  // optional int64 girlPlayerId = 5;
  inline bool has_girlplayerid() const;
  inline void clear_girlplayerid();
  static const int kGirlPlayerIdFieldNumber = 5;
  inline ::google::protobuf::int64 girlplayerid() const;
  inline void set_girlplayerid(::google::protobuf::int64 value);

  // optional string girlName = 6;
  inline bool has_girlname() const;
  inline void clear_girlname();
  static const int kGirlNameFieldNumber = 6;
  inline const ::std::string& girlname() const;
  inline void set_girlname(const ::std::string& value);
  inline void set_girlname(const char* value);
  inline void set_girlname(const char* value, size_t size);
  inline ::std::string* mutable_girlname();
  inline ::std::string* release_girlname();
  inline void set_allocated_girlname(::std::string* girlname);

  // optional int32 girlVipLv = 7;
  inline bool has_girlviplv() const;
  inline void clear_girlviplv();
  static const int kGirlVipLvFieldNumber = 7;
  inline ::google::protobuf::int32 girlviplv() const;
  inline void set_girlviplv(::google::protobuf::int32 value);

  // optional int32 totalLoveNum = 8;
  inline bool has_totallovenum() const;
  inline void clear_totallovenum();
  static const int kTotalLoveNumFieldNumber = 8;
  inline ::google::protobuf::int32 totallovenum() const;
  inline void set_totallovenum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryRank)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();
  inline void set_has_boyplayerid();
  inline void clear_has_boyplayerid();
  inline void set_has_boyname();
  inline void clear_has_boyname();
  inline void set_has_boyviplv();
  inline void clear_has_boyviplv();
  inline void set_has_girlplayerid();
  inline void clear_has_girlplayerid();
  inline void set_has_girlname();
  inline void clear_has_girlname();
  inline void set_has_girlviplv();
  inline void clear_has_girlviplv();
  inline void set_has_totallovenum();
  inline void clear_has_totallovenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 boyplayerid_;
  ::google::protobuf::int32 rankid_;
  ::google::protobuf::int32 boyviplv_;
  ::std::string* boyname_;
  ::google::protobuf::int64 girlplayerid_;
  ::std::string* girlname_;
  ::google::protobuf::int32 girlviplv_;
  ::google::protobuf::int32 totallovenum_;
  friend void  protobuf_AddDesc_MarryMessage_2eproto();
  friend void protobuf_AssignDesc_MarryMessage_2eproto();
  friend void protobuf_ShutdownFile_MarryMessage_2eproto();

  void InitAsDefaultInstance();
  static MarryRank* default_instance_;
};
// ===================================================================


// ===================================================================

// CGDoMarry

// optional int64 sourcePlayerId = 1;
inline bool CGDoMarry::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGDoMarry::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGDoMarry::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGDoMarry::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 CGDoMarry::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:CGDoMarry.sourcePlayerId)
  return sourceplayerid_;
}
inline void CGDoMarry::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGDoMarry.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool CGDoMarry::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGDoMarry::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGDoMarry::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGDoMarry::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 CGDoMarry::targetplayerid() const {
  // @@protoc_insertion_point(field_get:CGDoMarry.targetPlayerId)
  return targetplayerid_;
}
inline void CGDoMarry::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGDoMarry.targetPlayerId)
}

// optional int32 ringId = 4;
inline bool CGDoMarry::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGDoMarry::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGDoMarry::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGDoMarry::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 CGDoMarry::ringid() const {
  // @@protoc_insertion_point(field_get:CGDoMarry.ringId)
  return ringid_;
}
inline void CGDoMarry::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:CGDoMarry.ringId)
}

// -------------------------------------------------------------------

// GCDoMarry

// optional int64 sourcePlayerId = 1;
inline bool GCDoMarry::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCDoMarry::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCDoMarry::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCDoMarry::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 GCDoMarry::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:GCDoMarry.sourcePlayerId)
  return sourceplayerid_;
}
inline void GCDoMarry::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCDoMarry.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool GCDoMarry::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCDoMarry::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCDoMarry::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCDoMarry::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 GCDoMarry::targetplayerid() const {
  // @@protoc_insertion_point(field_get:GCDoMarry.targetPlayerId)
  return targetplayerid_;
}
inline void GCDoMarry::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCDoMarry.targetPlayerId)
}

// optional int32 ringId = 3;
inline bool GCDoMarry::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCDoMarry::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCDoMarry::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCDoMarry::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 GCDoMarry::ringid() const {
  // @@protoc_insertion_point(field_get:GCDoMarry.ringId)
  return ringid_;
}
inline void GCDoMarry::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:GCDoMarry.ringId)
}

// optional string sourceName = 4;
inline bool GCDoMarry::has_sourcename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCDoMarry::set_has_sourcename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCDoMarry::clear_has_sourcename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCDoMarry::clear_sourcename() {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_->clear();
  }
  clear_has_sourcename();
}
inline const ::std::string& GCDoMarry::sourcename() const {
  // @@protoc_insertion_point(field_get:GCDoMarry.sourceName)
  return *sourcename_;
}
inline void GCDoMarry::set_sourcename(const ::std::string& value) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(value);
  // @@protoc_insertion_point(field_set:GCDoMarry.sourceName)
}
inline void GCDoMarry::set_sourcename(const char* value) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCDoMarry.sourceName)
}
inline void GCDoMarry::set_sourcename(const char* value, size_t size) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCDoMarry.sourceName)
}
inline ::std::string* GCDoMarry::mutable_sourcename() {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCDoMarry.sourceName)
  return sourcename_;
}
inline ::std::string* GCDoMarry::release_sourcename() {
  clear_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourcename_;
    sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCDoMarry::set_allocated_sourcename(::std::string* sourcename) {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcename_;
  }
  if (sourcename) {
    set_has_sourcename();
    sourcename_ = sourcename;
  } else {
    clear_has_sourcename();
    sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCDoMarry.sourceName)
}

// -------------------------------------------------------------------

// CGExpressLove

// optional int64 sourcePlayerId = 1;
inline bool CGExpressLove::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGExpressLove::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGExpressLove::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGExpressLove::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 CGExpressLove::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:CGExpressLove.sourcePlayerId)
  return sourceplayerid_;
}
inline void CGExpressLove::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLove.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool CGExpressLove::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGExpressLove::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGExpressLove::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGExpressLove::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 CGExpressLove::targetplayerid() const {
  // @@protoc_insertion_point(field_get:CGExpressLove.targetPlayerId)
  return targetplayerid_;
}
inline void CGExpressLove::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLove.targetPlayerId)
}

// optional int32 ringId = 3;
inline bool CGExpressLove::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGExpressLove::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGExpressLove::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGExpressLove::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 CGExpressLove::ringid() const {
  // @@protoc_insertion_point(field_get:CGExpressLove.ringId)
  return ringid_;
}
inline void CGExpressLove::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLove.ringId)
}

// optional string loveLetter = 4;
inline bool CGExpressLove::has_loveletter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGExpressLove::set_has_loveletter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGExpressLove::clear_has_loveletter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGExpressLove::clear_loveletter() {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_->clear();
  }
  clear_has_loveletter();
}
inline const ::std::string& CGExpressLove::loveletter() const {
  // @@protoc_insertion_point(field_get:CGExpressLove.loveLetter)
  return *loveletter_;
}
inline void CGExpressLove::set_loveletter(const ::std::string& value) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(value);
  // @@protoc_insertion_point(field_set:CGExpressLove.loveLetter)
}
inline void CGExpressLove::set_loveletter(const char* value) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:CGExpressLove.loveLetter)
}
inline void CGExpressLove::set_loveletter(const char* value, size_t size) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CGExpressLove.loveLetter)
}
inline ::std::string* CGExpressLove::mutable_loveletter() {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CGExpressLove.loveLetter)
  return loveletter_;
}
inline ::std::string* CGExpressLove::release_loveletter() {
  clear_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loveletter_;
    loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CGExpressLove::set_allocated_loveletter(::std::string* loveletter) {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loveletter_;
  }
  if (loveletter) {
    set_has_loveletter();
    loveletter_ = loveletter;
  } else {
    clear_has_loveletter();
    loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CGExpressLove.loveLetter)
}

// -------------------------------------------------------------------

// GCExpressLove

// optional int64 sourcePlayerId = 1;
inline bool GCExpressLove::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCExpressLove::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCExpressLove::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCExpressLove::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 GCExpressLove::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:GCExpressLove.sourcePlayerId)
  return sourceplayerid_;
}
inline void GCExpressLove::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLove.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool GCExpressLove::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCExpressLove::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCExpressLove::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCExpressLove::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 GCExpressLove::targetplayerid() const {
  // @@protoc_insertion_point(field_get:GCExpressLove.targetPlayerId)
  return targetplayerid_;
}
inline void GCExpressLove::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLove.targetPlayerId)
}

// optional int32 ringId = 3;
inline bool GCExpressLove::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCExpressLove::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCExpressLove::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCExpressLove::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 GCExpressLove::ringid() const {
  // @@protoc_insertion_point(field_get:GCExpressLove.ringId)
  return ringid_;
}
inline void GCExpressLove::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLove.ringId)
}

// optional string loveLetter = 4;
inline bool GCExpressLove::has_loveletter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCExpressLove::set_has_loveletter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCExpressLove::clear_has_loveletter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCExpressLove::clear_loveletter() {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_->clear();
  }
  clear_has_loveletter();
}
inline const ::std::string& GCExpressLove::loveletter() const {
  // @@protoc_insertion_point(field_get:GCExpressLove.loveLetter)
  return *loveletter_;
}
inline void GCExpressLove::set_loveletter(const ::std::string& value) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(value);
  // @@protoc_insertion_point(field_set:GCExpressLove.loveLetter)
}
inline void GCExpressLove::set_loveletter(const char* value) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCExpressLove.loveLetter)
}
inline void GCExpressLove::set_loveletter(const char* value, size_t size) {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  loveletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCExpressLove.loveLetter)
}
inline ::std::string* GCExpressLove::mutable_loveletter() {
  set_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loveletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCExpressLove.loveLetter)
  return loveletter_;
}
inline ::std::string* GCExpressLove::release_loveletter() {
  clear_has_loveletter();
  if (loveletter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loveletter_;
    loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCExpressLove::set_allocated_loveletter(::std::string* loveletter) {
  if (loveletter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loveletter_;
  }
  if (loveletter) {
    set_has_loveletter();
    loveletter_ = loveletter;
  } else {
    clear_has_loveletter();
    loveletter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCExpressLove.loveLetter)
}

// optional string sourceName = 5;
inline bool GCExpressLove::has_sourcename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCExpressLove::set_has_sourcename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCExpressLove::clear_has_sourcename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCExpressLove::clear_sourcename() {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_->clear();
  }
  clear_has_sourcename();
}
inline const ::std::string& GCExpressLove::sourcename() const {
  // @@protoc_insertion_point(field_get:GCExpressLove.sourceName)
  return *sourcename_;
}
inline void GCExpressLove::set_sourcename(const ::std::string& value) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(value);
  // @@protoc_insertion_point(field_set:GCExpressLove.sourceName)
}
inline void GCExpressLove::set_sourcename(const char* value) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCExpressLove.sourceName)
}
inline void GCExpressLove::set_sourcename(const char* value, size_t size) {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  sourcename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCExpressLove.sourceName)
}
inline ::std::string* GCExpressLove::mutable_sourcename() {
  set_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourcename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCExpressLove.sourceName)
  return sourcename_;
}
inline ::std::string* GCExpressLove::release_sourcename() {
  clear_has_sourcename();
  if (sourcename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourcename_;
    sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCExpressLove::set_allocated_sourcename(::std::string* sourcename) {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcename_;
  }
  if (sourcename) {
    set_has_sourcename();
    sourcename_ = sourcename;
  } else {
    clear_has_sourcename();
    sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCExpressLove.sourceName)
}

// -------------------------------------------------------------------

// CGExpressLoveBack

// optional int64 sourcePlayerId = 1;
inline bool CGExpressLoveBack::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGExpressLoveBack::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGExpressLoveBack::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGExpressLoveBack::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 CGExpressLoveBack::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:CGExpressLoveBack.sourcePlayerId)
  return sourceplayerid_;
}
inline void CGExpressLoveBack::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLoveBack.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool CGExpressLoveBack::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGExpressLoveBack::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGExpressLoveBack::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGExpressLoveBack::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 CGExpressLoveBack::targetplayerid() const {
  // @@protoc_insertion_point(field_get:CGExpressLoveBack.targetPlayerId)
  return targetplayerid_;
}
inline void CGExpressLoveBack::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLoveBack.targetPlayerId)
}

// optional int32 ringId = 3;
inline bool CGExpressLoveBack::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGExpressLoveBack::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGExpressLoveBack::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGExpressLoveBack::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 CGExpressLoveBack::ringid() const {
  // @@protoc_insertion_point(field_get:CGExpressLoveBack.ringId)
  return ringid_;
}
inline void CGExpressLoveBack::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLoveBack.ringId)
}

// optional int32 result = 4;
inline bool CGExpressLoveBack::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CGExpressLoveBack::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CGExpressLoveBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CGExpressLoveBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CGExpressLoveBack::result() const {
  // @@protoc_insertion_point(field_get:CGExpressLoveBack.result)
  return result_;
}
inline void CGExpressLoveBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:CGExpressLoveBack.result)
}

// -------------------------------------------------------------------

// GCExpressLoveBack

// optional int64 sourcePlayerId = 1;
inline bool GCExpressLoveBack::has_sourceplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCExpressLoveBack::set_has_sourceplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCExpressLoveBack::clear_has_sourceplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCExpressLoveBack::clear_sourceplayerid() {
  sourceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_sourceplayerid();
}
inline ::google::protobuf::int64 GCExpressLoveBack::sourceplayerid() const {
  // @@protoc_insertion_point(field_get:GCExpressLoveBack.sourcePlayerId)
  return sourceplayerid_;
}
inline void GCExpressLoveBack::set_sourceplayerid(::google::protobuf::int64 value) {
  set_has_sourceplayerid();
  sourceplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLoveBack.sourcePlayerId)
}

// optional int64 targetPlayerId = 2;
inline bool GCExpressLoveBack::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCExpressLoveBack::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCExpressLoveBack::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCExpressLoveBack::clear_targetplayerid() {
  targetplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_targetplayerid();
}
inline ::google::protobuf::int64 GCExpressLoveBack::targetplayerid() const {
  // @@protoc_insertion_point(field_get:GCExpressLoveBack.targetPlayerId)
  return targetplayerid_;
}
inline void GCExpressLoveBack::set_targetplayerid(::google::protobuf::int64 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLoveBack.targetPlayerId)
}

// optional int32 ringId = 3;
inline bool GCExpressLoveBack::has_ringid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCExpressLoveBack::set_has_ringid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCExpressLoveBack::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCExpressLoveBack::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 GCExpressLoveBack::ringid() const {
  // @@protoc_insertion_point(field_get:GCExpressLoveBack.ringId)
  return ringid_;
}
inline void GCExpressLoveBack::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLoveBack.ringId)
}

// optional int32 result = 4;
inline bool GCExpressLoveBack::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCExpressLoveBack::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCExpressLoveBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCExpressLoveBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCExpressLoveBack::result() const {
  // @@protoc_insertion_point(field_get:GCExpressLoveBack.result)
  return result_;
}
inline void GCExpressLoveBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCExpressLoveBack.result)
}

// optional string targetName = 5;
inline bool GCExpressLoveBack::has_targetname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCExpressLoveBack::set_has_targetname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCExpressLoveBack::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCExpressLoveBack::clear_targetname() {
  if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetname_->clear();
  }
  clear_has_targetname();
}
inline const ::std::string& GCExpressLoveBack::targetname() const {
  // @@protoc_insertion_point(field_get:GCExpressLoveBack.targetName)
  return *targetname_;
}
inline void GCExpressLoveBack::set_targetname(const ::std::string& value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
  // @@protoc_insertion_point(field_set:GCExpressLoveBack.targetName)
}
inline void GCExpressLoveBack::set_targetname(const char* value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCExpressLoveBack.targetName)
}
inline void GCExpressLoveBack::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCExpressLoveBack.targetName)
}
inline ::std::string* GCExpressLoveBack::mutable_targetname() {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    targetname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCExpressLoveBack.targetName)
  return targetname_;
}
inline ::std::string* GCExpressLoveBack::release_targetname() {
  clear_has_targetname();
  if (targetname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = targetname_;
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCExpressLoveBack::set_allocated_targetname(::std::string* targetname) {
  if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetname_;
  }
  if (targetname) {
    set_has_targetname();
    targetname_ = targetname;
  } else {
    clear_has_targetname();
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCExpressLoveBack.targetName)
}

// -------------------------------------------------------------------

// RingInfo

// optional int32 ringID = 1;
inline bool RingInfo::has_ringid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RingInfo::set_has_ringid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RingInfo::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RingInfo::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 RingInfo::ringid() const {
  // @@protoc_insertion_point(field_get:RingInfo.ringID)
  return ringid_;
}
inline void RingInfo::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:RingInfo.ringID)
}

// optional int32 level = 2;
inline bool RingInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RingInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RingInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RingInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RingInfo::level() const {
  // @@protoc_insertion_point(field_get:RingInfo.level)
  return level_;
}
inline void RingInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:RingInfo.level)
}

// optional int32 loveNum = 3;
inline bool RingInfo::has_lovenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RingInfo::set_has_lovenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RingInfo::clear_has_lovenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RingInfo::clear_lovenum() {
  lovenum_ = 0;
  clear_has_lovenum();
}
inline ::google::protobuf::int32 RingInfo::lovenum() const {
  // @@protoc_insertion_point(field_get:RingInfo.loveNum)
  return lovenum_;
}
inline void RingInfo::set_lovenum(::google::protobuf::int32 value) {
  set_has_lovenum();
  lovenum_ = value;
  // @@protoc_insertion_point(field_set:RingInfo.loveNum)
}

// -------------------------------------------------------------------

// GCMarrySts

// optional int32 sts = 1;
inline bool GCMarrySts::has_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMarrySts::set_has_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMarrySts::clear_has_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMarrySts::clear_sts() {
  sts_ = 0;
  clear_has_sts();
}
inline ::google::protobuf::int32 GCMarrySts::sts() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.sts)
  return sts_;
}
inline void GCMarrySts::set_sts(::google::protobuf::int32 value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:GCMarrySts.sts)
}

// optional int32 sex = 2;
inline bool GCMarrySts::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCMarrySts::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCMarrySts::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCMarrySts::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 GCMarrySts::sex() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.sex)
  return sex_;
}
inline void GCMarrySts::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:GCMarrySts.sex)
}

// optional .RingInfo ringInfo = 3;
inline bool GCMarrySts::has_ringinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCMarrySts::set_has_ringinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCMarrySts::clear_has_ringinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCMarrySts::clear_ringinfo() {
  if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
  clear_has_ringinfo();
}
inline const ::RingInfo& GCMarrySts::ringinfo() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.ringInfo)
  return ringinfo_ != NULL ? *ringinfo_ : *default_instance_->ringinfo_;
}
inline ::RingInfo* GCMarrySts::mutable_ringinfo() {
  set_has_ringinfo();
  if (ringinfo_ == NULL) ringinfo_ = new ::RingInfo;
  // @@protoc_insertion_point(field_mutable:GCMarrySts.ringInfo)
  return ringinfo_;
}
inline ::RingInfo* GCMarrySts::release_ringinfo() {
  clear_has_ringinfo();
  ::RingInfo* temp = ringinfo_;
  ringinfo_ = NULL;
  return temp;
}
inline void GCMarrySts::set_allocated_ringinfo(::RingInfo* ringinfo) {
  delete ringinfo_;
  ringinfo_ = ringinfo;
  if (ringinfo) {
    set_has_ringinfo();
  } else {
    clear_has_ringinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCMarrySts.ringInfo)
}

// optional int64 arriveTime = 4;
inline bool GCMarrySts::has_arrivetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCMarrySts::set_has_arrivetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCMarrySts::clear_has_arrivetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCMarrySts::clear_arrivetime() {
  arrivetime_ = GOOGLE_LONGLONG(0);
  clear_has_arrivetime();
}
inline ::google::protobuf::int64 GCMarrySts::arrivetime() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.arriveTime)
  return arrivetime_;
}
inline void GCMarrySts::set_arrivetime(::google::protobuf::int64 value) {
  set_has_arrivetime();
  arrivetime_ = value;
  // @@protoc_insertion_point(field_set:GCMarrySts.arriveTime)
}

// optional int64 divorcePlayerId = 5;
inline bool GCMarrySts::has_divorceplayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCMarrySts::set_has_divorceplayerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCMarrySts::clear_has_divorceplayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCMarrySts::clear_divorceplayerid() {
  divorceplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_divorceplayerid();
}
inline ::google::protobuf::int64 GCMarrySts::divorceplayerid() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.divorcePlayerId)
  return divorceplayerid_;
}
inline void GCMarrySts::set_divorceplayerid(::google::protobuf::int64 value) {
  set_has_divorceplayerid();
  divorceplayerid_ = value;
  // @@protoc_insertion_point(field_set:GCMarrySts.divorcePlayerId)
}

// optional string divorcePlayerName = 6;
inline bool GCMarrySts::has_divorceplayername() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCMarrySts::set_has_divorceplayername() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCMarrySts::clear_has_divorceplayername() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCMarrySts::clear_divorceplayername() {
  if (divorceplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    divorceplayername_->clear();
  }
  clear_has_divorceplayername();
}
inline const ::std::string& GCMarrySts::divorceplayername() const {
  // @@protoc_insertion_point(field_get:GCMarrySts.divorcePlayerName)
  return *divorceplayername_;
}
inline void GCMarrySts::set_divorceplayername(const ::std::string& value) {
  set_has_divorceplayername();
  if (divorceplayername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    divorceplayername_ = new ::std::string;
  }
  divorceplayername_->assign(value);
  // @@protoc_insertion_point(field_set:GCMarrySts.divorcePlayerName)
}
inline void GCMarrySts::set_divorceplayername(const char* value) {
  set_has_divorceplayername();
  if (divorceplayername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    divorceplayername_ = new ::std::string;
  }
  divorceplayername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCMarrySts.divorcePlayerName)
}
inline void GCMarrySts::set_divorceplayername(const char* value, size_t size) {
  set_has_divorceplayername();
  if (divorceplayername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    divorceplayername_ = new ::std::string;
  }
  divorceplayername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCMarrySts.divorcePlayerName)
}
inline ::std::string* GCMarrySts::mutable_divorceplayername() {
  set_has_divorceplayername();
  if (divorceplayername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    divorceplayername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCMarrySts.divorcePlayerName)
  return divorceplayername_;
}
inline ::std::string* GCMarrySts::release_divorceplayername() {
  clear_has_divorceplayername();
  if (divorceplayername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = divorceplayername_;
    divorceplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCMarrySts::set_allocated_divorceplayername(::std::string* divorceplayername) {
  if (divorceplayername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete divorceplayername_;
  }
  if (divorceplayername) {
    set_has_divorceplayername();
    divorceplayername_ = divorceplayername;
  } else {
    clear_has_divorceplayername();
    divorceplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCMarrySts.divorcePlayerName)
}

// -------------------------------------------------------------------

// CGMarryRingPower

// -------------------------------------------------------------------

// GCMarryRingPower

// optional .RingInfo ringInfo = 1;
inline bool GCMarryRingPower::has_ringinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMarryRingPower::set_has_ringinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMarryRingPower::clear_has_ringinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMarryRingPower::clear_ringinfo() {
  if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
  clear_has_ringinfo();
}
inline const ::RingInfo& GCMarryRingPower::ringinfo() const {
  // @@protoc_insertion_point(field_get:GCMarryRingPower.ringInfo)
  return ringinfo_ != NULL ? *ringinfo_ : *default_instance_->ringinfo_;
}
inline ::RingInfo* GCMarryRingPower::mutable_ringinfo() {
  set_has_ringinfo();
  if (ringinfo_ == NULL) ringinfo_ = new ::RingInfo;
  // @@protoc_insertion_point(field_mutable:GCMarryRingPower.ringInfo)
  return ringinfo_;
}
inline ::RingInfo* GCMarryRingPower::release_ringinfo() {
  clear_has_ringinfo();
  ::RingInfo* temp = ringinfo_;
  ringinfo_ = NULL;
  return temp;
}
inline void GCMarryRingPower::set_allocated_ringinfo(::RingInfo* ringinfo) {
  delete ringinfo_;
  ringinfo_ = ringinfo;
  if (ringinfo) {
    set_has_ringinfo();
  } else {
    clear_has_ringinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCMarryRingPower.ringInfo)
}

// -------------------------------------------------------------------

// CGSearchMarryInfo

// -------------------------------------------------------------------

// GCSearchMarryInfo

// optional int32 sid = 1;
inline bool GCSearchMarryInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSearchMarryInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSearchMarryInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSearchMarryInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 GCSearchMarryInfo::sid() const {
  // @@protoc_insertion_point(field_get:GCSearchMarryInfo.sid)
  return sid_;
}
inline void GCSearchMarryInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
  // @@protoc_insertion_point(field_set:GCSearchMarryInfo.sid)
}

// optional string playerName = 2;
inline bool GCSearchMarryInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSearchMarryInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSearchMarryInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSearchMarryInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GCSearchMarryInfo::playername() const {
  // @@protoc_insertion_point(field_get:GCSearchMarryInfo.playerName)
  return *playername_;
}
inline void GCSearchMarryInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:GCSearchMarryInfo.playerName)
}
inline void GCSearchMarryInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCSearchMarryInfo.playerName)
}
inline void GCSearchMarryInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCSearchMarryInfo.playerName)
}
inline ::std::string* GCSearchMarryInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCSearchMarryInfo.playerName)
  return playername_;
}
inline ::std::string* GCSearchMarryInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCSearchMarryInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCSearchMarryInfo.playerName)
}

// optional .RingInfo ringInfo = 3;
inline bool GCSearchMarryInfo::has_ringinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCSearchMarryInfo::set_has_ringinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCSearchMarryInfo::clear_has_ringinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCSearchMarryInfo::clear_ringinfo() {
  if (ringinfo_ != NULL) ringinfo_->::RingInfo::Clear();
  clear_has_ringinfo();
}
inline const ::RingInfo& GCSearchMarryInfo::ringinfo() const {
  // @@protoc_insertion_point(field_get:GCSearchMarryInfo.ringInfo)
  return ringinfo_ != NULL ? *ringinfo_ : *default_instance_->ringinfo_;
}
inline ::RingInfo* GCSearchMarryInfo::mutable_ringinfo() {
  set_has_ringinfo();
  if (ringinfo_ == NULL) ringinfo_ = new ::RingInfo;
  // @@protoc_insertion_point(field_mutable:GCSearchMarryInfo.ringInfo)
  return ringinfo_;
}
inline ::RingInfo* GCSearchMarryInfo::release_ringinfo() {
  clear_has_ringinfo();
  ::RingInfo* temp = ringinfo_;
  ringinfo_ = NULL;
  return temp;
}
inline void GCSearchMarryInfo::set_allocated_ringinfo(::RingInfo* ringinfo) {
  delete ringinfo_;
  ringinfo_ = ringinfo;
  if (ringinfo) {
    set_has_ringinfo();
  } else {
    clear_has_ringinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCSearchMarryInfo.ringInfo)
}

// optional .ChangeEquipInfo changInfo = 4;
inline bool GCSearchMarryInfo::has_changinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCSearchMarryInfo::set_has_changinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCSearchMarryInfo::clear_has_changinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCSearchMarryInfo::clear_changinfo() {
  if (changinfo_ != NULL) changinfo_->::ChangeEquipInfo::Clear();
  clear_has_changinfo();
}
inline const ::ChangeEquipInfo& GCSearchMarryInfo::changinfo() const {
  // @@protoc_insertion_point(field_get:GCSearchMarryInfo.changInfo)
  return changinfo_ != NULL ? *changinfo_ : *default_instance_->changinfo_;
}
inline ::ChangeEquipInfo* GCSearchMarryInfo::mutable_changinfo() {
  set_has_changinfo();
  if (changinfo_ == NULL) changinfo_ = new ::ChangeEquipInfo;
  // @@protoc_insertion_point(field_mutable:GCSearchMarryInfo.changInfo)
  return changinfo_;
}
inline ::ChangeEquipInfo* GCSearchMarryInfo::release_changinfo() {
  clear_has_changinfo();
  ::ChangeEquipInfo* temp = changinfo_;
  changinfo_ = NULL;
  return temp;
}
inline void GCSearchMarryInfo::set_allocated_changinfo(::ChangeEquipInfo* changinfo) {
  delete changinfo_;
  changinfo_ = changinfo;
  if (changinfo) {
    set_has_changinfo();
  } else {
    clear_has_changinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCSearchMarryInfo.changInfo)
}

// -------------------------------------------------------------------

// CGDivorce

// optional int32 divorceType = 1;
inline bool CGDivorce::has_divorcetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGDivorce::set_has_divorcetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGDivorce::clear_has_divorcetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGDivorce::clear_divorcetype() {
  divorcetype_ = 0;
  clear_has_divorcetype();
}
inline ::google::protobuf::int32 CGDivorce::divorcetype() const {
  // @@protoc_insertion_point(field_get:CGDivorce.divorceType)
  return divorcetype_;
}
inline void CGDivorce::set_divorcetype(::google::protobuf::int32 value) {
  set_has_divorcetype();
  divorcetype_ = value;
  // @@protoc_insertion_point(field_set:CGDivorce.divorceType)
}

// -------------------------------------------------------------------

// GCDivorce

// optional int32 divorceType = 1;
inline bool GCDivorce::has_divorcetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCDivorce::set_has_divorcetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCDivorce::clear_has_divorcetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCDivorce::clear_divorcetype() {
  divorcetype_ = 0;
  clear_has_divorcetype();
}
inline ::google::protobuf::int32 GCDivorce::divorcetype() const {
  // @@protoc_insertion_point(field_get:GCDivorce.divorceType)
  return divorcetype_;
}
inline void GCDivorce::set_divorcetype(::google::protobuf::int32 value) {
  set_has_divorcetype();
  divorcetype_ = value;
  // @@protoc_insertion_point(field_set:GCDivorce.divorceType)
}

// optional .GCMarrySts data = 2;
inline bool GCDivorce::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCDivorce::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCDivorce::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCDivorce::clear_data() {
  if (data_ != NULL) data_->::GCMarrySts::Clear();
  clear_has_data();
}
inline const ::GCMarrySts& GCDivorce::data() const {
  // @@protoc_insertion_point(field_get:GCDivorce.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::GCMarrySts* GCDivorce::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::GCMarrySts;
  // @@protoc_insertion_point(field_mutable:GCDivorce.data)
  return data_;
}
inline ::GCMarrySts* GCDivorce::release_data() {
  clear_has_data();
  ::GCMarrySts* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GCDivorce::set_allocated_data(::GCMarrySts* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:GCDivorce.data)
}

// -------------------------------------------------------------------

// CGAgreeOrRefuse

// optional int32 type = 1;
inline bool CGAgreeOrRefuse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGAgreeOrRefuse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGAgreeOrRefuse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGAgreeOrRefuse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGAgreeOrRefuse::type() const {
  // @@protoc_insertion_point(field_get:CGAgreeOrRefuse.type)
  return type_;
}
inline void CGAgreeOrRefuse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGAgreeOrRefuse.type)
}

// -------------------------------------------------------------------

// GCAgreeOrRefuse

// optional int32 type = 1;
inline bool GCAgreeOrRefuse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCAgreeOrRefuse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCAgreeOrRefuse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCAgreeOrRefuse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCAgreeOrRefuse::type() const {
  // @@protoc_insertion_point(field_get:GCAgreeOrRefuse.type)
  return type_;
}
inline void GCAgreeOrRefuse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCAgreeOrRefuse.type)
}

// optional .GCMarrySts data = 2;
inline bool GCAgreeOrRefuse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCAgreeOrRefuse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCAgreeOrRefuse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCAgreeOrRefuse::clear_data() {
  if (data_ != NULL) data_->::GCMarrySts::Clear();
  clear_has_data();
}
inline const ::GCMarrySts& GCAgreeOrRefuse::data() const {
  // @@protoc_insertion_point(field_get:GCAgreeOrRefuse.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::GCMarrySts* GCAgreeOrRefuse::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::GCMarrySts;
  // @@protoc_insertion_point(field_mutable:GCAgreeOrRefuse.data)
  return data_;
}
inline ::GCMarrySts* GCAgreeOrRefuse::release_data() {
  clear_has_data();
  ::GCMarrySts* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GCAgreeOrRefuse::set_allocated_data(::GCMarrySts* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:GCAgreeOrRefuse.data)
}

// optional string playerName = 3;
inline bool GCAgreeOrRefuse::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCAgreeOrRefuse::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCAgreeOrRefuse::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCAgreeOrRefuse::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& GCAgreeOrRefuse::playername() const {
  // @@protoc_insertion_point(field_get:GCAgreeOrRefuse.playerName)
  return *playername_;
}
inline void GCAgreeOrRefuse::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:GCAgreeOrRefuse.playerName)
}
inline void GCAgreeOrRefuse::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCAgreeOrRefuse.playerName)
}
inline void GCAgreeOrRefuse::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCAgreeOrRefuse.playerName)
}
inline ::std::string* GCAgreeOrRefuse::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCAgreeOrRefuse.playerName)
  return playername_;
}
inline ::std::string* GCAgreeOrRefuse::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCAgreeOrRefuse::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCAgreeOrRefuse.playerName)
}

// -------------------------------------------------------------------

// MarryRank

// optional int32 rankId = 1;
inline bool MarryRank::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryRank::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryRank::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryRank::clear_rankid() {
  rankid_ = 0;
  clear_has_rankid();
}
inline ::google::protobuf::int32 MarryRank::rankid() const {
  // @@protoc_insertion_point(field_get:MarryRank.rankId)
  return rankid_;
}
inline void MarryRank::set_rankid(::google::protobuf::int32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.rankId)
}

// optional int64 boyPlayerId = 2;
inline bool MarryRank::has_boyplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryRank::set_has_boyplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryRank::clear_has_boyplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryRank::clear_boyplayerid() {
  boyplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_boyplayerid();
}
inline ::google::protobuf::int64 MarryRank::boyplayerid() const {
  // @@protoc_insertion_point(field_get:MarryRank.boyPlayerId)
  return boyplayerid_;
}
inline void MarryRank::set_boyplayerid(::google::protobuf::int64 value) {
  set_has_boyplayerid();
  boyplayerid_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.boyPlayerId)
}

// optional string boyName = 3;
inline bool MarryRank::has_boyname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryRank::set_has_boyname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryRank::clear_has_boyname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryRank::clear_boyname() {
  if (boyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boyname_->clear();
  }
  clear_has_boyname();
}
inline const ::std::string& MarryRank::boyname() const {
  // @@protoc_insertion_point(field_get:MarryRank.boyName)
  return *boyname_;
}
inline void MarryRank::set_boyname(const ::std::string& value) {
  set_has_boyname();
  if (boyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boyname_ = new ::std::string;
  }
  boyname_->assign(value);
  // @@protoc_insertion_point(field_set:MarryRank.boyName)
}
inline void MarryRank::set_boyname(const char* value) {
  set_has_boyname();
  if (boyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boyname_ = new ::std::string;
  }
  boyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MarryRank.boyName)
}
inline void MarryRank::set_boyname(const char* value, size_t size) {
  set_has_boyname();
  if (boyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boyname_ = new ::std::string;
  }
  boyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MarryRank.boyName)
}
inline ::std::string* MarryRank::mutable_boyname() {
  set_has_boyname();
  if (boyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    boyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MarryRank.boyName)
  return boyname_;
}
inline ::std::string* MarryRank::release_boyname() {
  clear_has_boyname();
  if (boyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = boyname_;
    boyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MarryRank::set_allocated_boyname(::std::string* boyname) {
  if (boyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete boyname_;
  }
  if (boyname) {
    set_has_boyname();
    boyname_ = boyname;
  } else {
    clear_has_boyname();
    boyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MarryRank.boyName)
}

// optional int32 boyVipLv = 4;
inline bool MarryRank::has_boyviplv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryRank::set_has_boyviplv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryRank::clear_has_boyviplv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryRank::clear_boyviplv() {
  boyviplv_ = 0;
  clear_has_boyviplv();
}
inline ::google::protobuf::int32 MarryRank::boyviplv() const {
  // @@protoc_insertion_point(field_get:MarryRank.boyVipLv)
  return boyviplv_;
}
inline void MarryRank::set_boyviplv(::google::protobuf::int32 value) {
  set_has_boyviplv();
  boyviplv_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.boyVipLv)
}

// optional int64 girlPlayerId = 5;
inline bool MarryRank::has_girlplayerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryRank::set_has_girlplayerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryRank::clear_has_girlplayerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryRank::clear_girlplayerid() {
  girlplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_girlplayerid();
}
inline ::google::protobuf::int64 MarryRank::girlplayerid() const {
  // @@protoc_insertion_point(field_get:MarryRank.girlPlayerId)
  return girlplayerid_;
}
inline void MarryRank::set_girlplayerid(::google::protobuf::int64 value) {
  set_has_girlplayerid();
  girlplayerid_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.girlPlayerId)
}

// optional string girlName = 6;
inline bool MarryRank::has_girlname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarryRank::set_has_girlname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarryRank::clear_has_girlname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarryRank::clear_girlname() {
  if (girlname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    girlname_->clear();
  }
  clear_has_girlname();
}
inline const ::std::string& MarryRank::girlname() const {
  // @@protoc_insertion_point(field_get:MarryRank.girlName)
  return *girlname_;
}
inline void MarryRank::set_girlname(const ::std::string& value) {
  set_has_girlname();
  if (girlname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    girlname_ = new ::std::string;
  }
  girlname_->assign(value);
  // @@protoc_insertion_point(field_set:MarryRank.girlName)
}
inline void MarryRank::set_girlname(const char* value) {
  set_has_girlname();
  if (girlname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    girlname_ = new ::std::string;
  }
  girlname_->assign(value);
  // @@protoc_insertion_point(field_set_char:MarryRank.girlName)
}
inline void MarryRank::set_girlname(const char* value, size_t size) {
  set_has_girlname();
  if (girlname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    girlname_ = new ::std::string;
  }
  girlname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MarryRank.girlName)
}
inline ::std::string* MarryRank::mutable_girlname() {
  set_has_girlname();
  if (girlname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    girlname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MarryRank.girlName)
  return girlname_;
}
inline ::std::string* MarryRank::release_girlname() {
  clear_has_girlname();
  if (girlname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = girlname_;
    girlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MarryRank::set_allocated_girlname(::std::string* girlname) {
  if (girlname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete girlname_;
  }
  if (girlname) {
    set_has_girlname();
    girlname_ = girlname;
  } else {
    clear_has_girlname();
    girlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MarryRank.girlName)
}

// optional int32 girlVipLv = 7;
inline bool MarryRank::has_girlviplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarryRank::set_has_girlviplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarryRank::clear_has_girlviplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarryRank::clear_girlviplv() {
  girlviplv_ = 0;
  clear_has_girlviplv();
}
inline ::google::protobuf::int32 MarryRank::girlviplv() const {
  // @@protoc_insertion_point(field_get:MarryRank.girlVipLv)
  return girlviplv_;
}
inline void MarryRank::set_girlviplv(::google::protobuf::int32 value) {
  set_has_girlviplv();
  girlviplv_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.girlVipLv)
}

// optional int32 totalLoveNum = 8;
inline bool MarryRank::has_totallovenum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarryRank::set_has_totallovenum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarryRank::clear_has_totallovenum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarryRank::clear_totallovenum() {
  totallovenum_ = 0;
  clear_has_totallovenum();
}
inline ::google::protobuf::int32 MarryRank::totallovenum() const {
  // @@protoc_insertion_point(field_get:MarryRank.totalLoveNum)
  return totallovenum_;
}
inline void MarryRank::set_totallovenum(::google::protobuf::int32 value) {
  set_has_totallovenum();
  totallovenum_ = value;
  // @@protoc_insertion_point(field_set:MarryRank.totalLoveNum)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MarryMessage_2eproto__INCLUDED
