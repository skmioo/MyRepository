// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MidAutumnMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MidAutumnMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MidaTargetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidaTargetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MidaClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidaClientInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMidAutumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMidAutumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMidAutumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMidAutumn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MidAutumnMessage_2eproto() {
  protobuf_AddDesc_MidAutumnMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MidAutumnMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MidaTargetInfo_descriptor_ = file->message_type(0);
  static const int MidaTargetInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, consumevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, isshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, freenun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, maxnun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, currency2_),
  };
  MidaTargetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidaTargetInfo_descriptor_,
      MidaTargetInfo::default_instance_,
      MidaTargetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaTargetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidaTargetInfo));
  MidaClientInfo_descriptor_ = file->message_type(1);
  static const int MidaClientInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, rotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, items_),
  };
  MidaClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidaClientInfo_descriptor_,
      MidaClientInfo::default_instance_,
      MidaClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidaClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidaClientInfo));
  CGMidAutumn_descriptor_ = file->message_type(2);
  static const int CGMidAutumn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMidAutumn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMidAutumn, targetid_),
  };
  CGMidAutumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMidAutumn_descriptor_,
      CGMidAutumn::default_instance_,
      CGMidAutumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMidAutumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMidAutumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMidAutumn));
  GCMidAutumn_descriptor_ = file->message_type(3);
  static const int GCMidAutumn_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, clientinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, activityid_),
  };
  GCMidAutumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMidAutumn_descriptor_,
      GCMidAutumn::default_instance_,
      GCMidAutumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMidAutumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMidAutumn));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MidAutumnMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidaTargetInfo_descriptor_, &MidaTargetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidaClientInfo_descriptor_, &MidaClientInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMidAutumn_descriptor_, &CGMidAutumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMidAutumn_descriptor_, &GCMidAutumn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MidAutumnMessage_2eproto() {
  delete MidaTargetInfo::default_instance_;
  delete MidaTargetInfo_reflection_;
  delete MidaClientInfo::default_instance_;
  delete MidaClientInfo_reflection_;
  delete CGMidAutumn::default_instance_;
  delete CGMidAutumn_reflection_;
  delete GCMidAutumn::default_instance_;
  delete GCMidAutumn_reflection_;
}

void protobuf_AddDesc_MidAutumnMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MidAutumnMessage.proto\032\022InnerMessage.p"
    "roto\"\267\001\n\016MidaTargetInfo\022\033\n\010itemInfo\030\001 \001("
    "\0132\t.Iteminfo\022\020\n\010currency\030\002 \001(\005\022\024\n\014consum"
    "eValue\030\003 \001(\005\022\016\n\006isShow\030\004 \001(\005\022\020\n\010vipLevel"
    "\030\005 \001(\005\022\017\n\007freeNun\030\006 \001(\005\022\016\n\006maxNun\030\007 \001(\005\022"
    "\n\n\002id\030\010 \001(\005\022\021\n\tcurrency2\030\t \001(\005\"\235\001\n\016MidaC"
    "lientInfo\022\r\n\005model\030\001 \001(\005\022\r\n\005scale\030\002 \001(\t\022"
    "\016\n\006rotate\030\003 \001(\t\022\020\n\010position\030\004 \001(\t\022\r\n\005tit"
    "le\030\005 \001(\005\022\021\n\tstartTime\030\006 \001(\003\022\017\n\007endTime\030\007"
    " \001(\003\022\030\n\005items\030\010 \003(\0132\t.Iteminfo\"-\n\013CGMidA"
    "utumn\022\014\n\004type\030\001 \001(\005\022\020\n\010targetID\030\002 \001(\005\"\227\001"
    "\n\013GCMidAutumn\022\014\n\004type\030\001 \001(\005\022 \n\007targets\030\002"
    " \003(\0132\017.MidaTargetInfo\022#\n\nclientInfo\030\003 \001("
    "\0132\017.MidaClientInfo\022\016\n\006result\030\004 \001(\005\022\017\n\007ve"
    "rsion\030\005 \001(\005\022\022\n\nactivityId\030\006 \001(\005B\031\n\027com.m"
    "ile.common.message", 618);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MidAutumnMessage.proto", &protobuf_RegisterTypes);
  MidaTargetInfo::default_instance_ = new MidaTargetInfo();
  MidaClientInfo::default_instance_ = new MidaClientInfo();
  CGMidAutumn::default_instance_ = new CGMidAutumn();
  GCMidAutumn::default_instance_ = new GCMidAutumn();
  MidaTargetInfo::default_instance_->InitAsDefaultInstance();
  MidaClientInfo::default_instance_->InitAsDefaultInstance();
  CGMidAutumn::default_instance_->InitAsDefaultInstance();
  GCMidAutumn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MidAutumnMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MidAutumnMessage_2eproto {
  StaticDescriptorInitializer_MidAutumnMessage_2eproto() {
    protobuf_AddDesc_MidAutumnMessage_2eproto();
  }
} static_descriptor_initializer_MidAutumnMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MidaTargetInfo::kItemInfoFieldNumber;
const int MidaTargetInfo::kCurrencyFieldNumber;
const int MidaTargetInfo::kConsumeValueFieldNumber;
const int MidaTargetInfo::kIsShowFieldNumber;
const int MidaTargetInfo::kVipLevelFieldNumber;
const int MidaTargetInfo::kFreeNunFieldNumber;
const int MidaTargetInfo::kMaxNunFieldNumber;
const int MidaTargetInfo::kIdFieldNumber;
const int MidaTargetInfo::kCurrency2FieldNumber;
#endif  // !_MSC_VER

MidaTargetInfo::MidaTargetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidaTargetInfo)
}

void MidaTargetInfo::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::Iteminfo*>(&::Iteminfo::default_instance());
}

MidaTargetInfo::MidaTargetInfo(const MidaTargetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MidaTargetInfo)
}

void MidaTargetInfo::SharedCtor() {
  _cached_size_ = 0;
  iteminfo_ = NULL;
  currency_ = 0;
  consumevalue_ = 0;
  isshow_ = 0;
  viplevel_ = 0;
  freenun_ = 0;
  maxnun_ = 0;
  id_ = 0;
  currency2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidaTargetInfo::~MidaTargetInfo() {
  // @@protoc_insertion_point(destructor:MidaTargetInfo)
  SharedDtor();
}

void MidaTargetInfo::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void MidaTargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidaTargetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidaTargetInfo_descriptor_;
}

const MidaTargetInfo& MidaTargetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MidAutumnMessage_2eproto();
  return *default_instance_;
}

MidaTargetInfo* MidaTargetInfo::default_instance_ = NULL;

MidaTargetInfo* MidaTargetInfo::New() const {
  return new MidaTargetInfo;
}

void MidaTargetInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MidaTargetInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(currency_, id_);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::Iteminfo::Clear();
    }
  }
  currency2_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidaTargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidaTargetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Iteminfo itemInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currency;
        break;
      }

      // optional int32 currency = 2;
      case 2: {
        if (tag == 16) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consumeValue;
        break;
      }

      // optional int32 consumeValue = 3;
      case 3: {
        if (tag == 24) {
         parse_consumeValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumevalue_)));
          set_has_consumevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isShow;
        break;
      }

      // optional int32 isShow = 4;
      case 4: {
        if (tag == 32) {
         parse_isShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshow_)));
          set_has_isshow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_freeNun;
        break;
      }

      // optional int32 freeNun = 6;
      case 6: {
        if (tag == 48) {
         parse_freeNun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenun_)));
          set_has_freenun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxNun;
        break;
      }

      // optional int32 maxNun = 7;
      case 7: {
        if (tag == 56) {
         parse_maxNun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnun_)));
          set_has_maxnun();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (tag == 64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_currency2;
        break;
      }

      // optional int32 currency2 = 9;
      case 9: {
        if (tag == 72) {
         parse_currency2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency2_)));
          set_has_currency2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidaTargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidaTargetInfo)
  return false;
#undef DO_
}

void MidaTargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidaTargetInfo)
  // optional .Iteminfo itemInfo = 1;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(), output);
  }

  // optional int32 currency = 2;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency(), output);
  }

  // optional int32 consumeValue = 3;
  if (has_consumevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consumevalue(), output);
  }

  // optional int32 isShow = 4;
  if (has_isshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isshow(), output);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->viplevel(), output);
  }

  // optional int32 freeNun = 6;
  if (has_freenun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->freenun(), output);
  }

  // optional int32 maxNun = 7;
  if (has_maxnun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxnun(), output);
  }

  // optional int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  // optional int32 currency2 = 9;
  if (has_currency2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->currency2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MidaTargetInfo)
}

::google::protobuf::uint8* MidaTargetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MidaTargetInfo)
  // optional .Iteminfo itemInfo = 1;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(), target);
  }

  // optional int32 currency = 2;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency(), target);
  }

  // optional int32 consumeValue = 3;
  if (has_consumevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consumevalue(), target);
  }

  // optional int32 isShow = 4;
  if (has_isshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isshow(), target);
  }

  // optional int32 vipLevel = 5;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->viplevel(), target);
  }

  // optional int32 freeNun = 6;
  if (has_freenun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->freenun(), target);
  }

  // optional int32 maxNun = 7;
  if (has_maxnun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxnun(), target);
  }

  // optional int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  // optional int32 currency2 = 9;
  if (has_currency2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->currency2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidaTargetInfo)
  return target;
}

int MidaTargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Iteminfo itemInfo = 1;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 currency = 2;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 consumeValue = 3;
    if (has_consumevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumevalue());
    }

    // optional int32 isShow = 4;
    if (has_isshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshow());
    }

    // optional int32 vipLevel = 5;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 freeNun = 6;
    if (has_freenun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenun());
    }

    // optional int32 maxNun = 7;
    if (has_maxnun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnun());
    }

    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 currency2 = 9;
    if (has_currency2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidaTargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidaTargetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidaTargetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidaTargetInfo::MergeFrom(const MidaTargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::Iteminfo::MergeFrom(from.iteminfo());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_consumevalue()) {
      set_consumevalue(from.consumevalue());
    }
    if (from.has_isshow()) {
      set_isshow(from.isshow());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_freenun()) {
      set_freenun(from.freenun());
    }
    if (from.has_maxnun()) {
      set_maxnun(from.maxnun());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currency2()) {
      set_currency2(from.currency2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidaTargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidaTargetInfo::CopyFrom(const MidaTargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidaTargetInfo::IsInitialized() const {

  return true;
}

void MidaTargetInfo::Swap(MidaTargetInfo* other) {
  if (other != this) {
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(currency_, other->currency_);
    std::swap(consumevalue_, other->consumevalue_);
    std::swap(isshow_, other->isshow_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(freenun_, other->freenun_);
    std::swap(maxnun_, other->maxnun_);
    std::swap(id_, other->id_);
    std::swap(currency2_, other->currency2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidaTargetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidaTargetInfo_descriptor_;
  metadata.reflection = MidaTargetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MidaClientInfo::kModelFieldNumber;
const int MidaClientInfo::kScaleFieldNumber;
const int MidaClientInfo::kRotateFieldNumber;
const int MidaClientInfo::kPositionFieldNumber;
const int MidaClientInfo::kTitleFieldNumber;
const int MidaClientInfo::kStartTimeFieldNumber;
const int MidaClientInfo::kEndTimeFieldNumber;
const int MidaClientInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

MidaClientInfo::MidaClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MidaClientInfo)
}

void MidaClientInfo::InitAsDefaultInstance() {
}

MidaClientInfo::MidaClientInfo(const MidaClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MidaClientInfo)
}

void MidaClientInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_ = 0;
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidaClientInfo::~MidaClientInfo() {
  // @@protoc_insertion_point(destructor:MidaClientInfo)
  SharedDtor();
}

void MidaClientInfo::SharedDtor() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (this != default_instance_) {
  }
}

void MidaClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidaClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidaClientInfo_descriptor_;
}

const MidaClientInfo& MidaClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MidAutumnMessage_2eproto();
  return *default_instance_;
}

MidaClientInfo* MidaClientInfo::default_instance_ = NULL;

MidaClientInfo* MidaClientInfo::New() const {
  return new MidaClientInfo;
}

void MidaClientInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MidaClientInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(model_, title_);
    ZR_(starttime_, endtime_);
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scale_->clear();
      }
    }
    if (has_rotate()) {
      if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rotate_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidaClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MidaClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 model = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scale;
        break;
      }

      // optional string scale = 2;
      case 2: {
        if (tag == 18) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rotate;
        break;
      }

      // optional string rotate = 3;
      case 3: {
        if (tag == 26) {
         parse_rotate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rotate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rotate().data(), this->rotate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rotate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional string position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_title;
        break;
      }

      // optional int32 title = 5;
      case 5: {
        if (tag == 40) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 6;
      case 6: {
        if (tag == 48) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 7;
      case 7: {
        if (tag == 56) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .Iteminfo items = 8;
      case 8: {
        if (tag == 66) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MidaClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MidaClientInfo)
  return false;
#undef DO_
}

void MidaClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MidaClientInfo)
  // optional int32 model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->model(), output);
  }

  // optional string scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scale(), output);
  }

  // optional string rotate = 3;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rotate(), output);
  }

  // optional string position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->position(), output);
  }

  // optional int32 title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->title(), output);
  }

  // optional int64 startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->starttime(), output);
  }

  // optional int64 endTime = 7;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->endtime(), output);
  }

  // repeated .Iteminfo items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MidaClientInfo)
}

::google::protobuf::uint8* MidaClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MidaClientInfo)
  // optional int32 model = 1;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->model(), target);
  }

  // optional string scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scale(), target);
  }

  // optional string rotate = 3;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rotate(), target);
  }

  // optional string position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->position(), target);
  }

  // optional int32 title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->title(), target);
  }

  // optional int64 startTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->starttime(), target);
  }

  // optional int64 endTime = 7;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->endtime(), target);
  }

  // repeated .Iteminfo items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MidaClientInfo)
  return target;
}

int MidaClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }

    // optional string scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string rotate = 3;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rotate());
    }

    // optional string position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional int32 title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional int64 startTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 7;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  // repeated .Iteminfo items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidaClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidaClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidaClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidaClientInfo::MergeFrom(const MidaClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidaClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidaClientInfo::CopyFrom(const MidaClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidaClientInfo::IsInitialized() const {

  return true;
}

void MidaClientInfo::Swap(MidaClientInfo* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(scale_, other->scale_);
    std::swap(rotate_, other->rotate_);
    std::swap(position_, other->position_);
    std::swap(title_, other->title_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidaClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidaClientInfo_descriptor_;
  metadata.reflection = MidaClientInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMidAutumn::kTypeFieldNumber;
const int CGMidAutumn::kTargetIDFieldNumber;
#endif  // !_MSC_VER

CGMidAutumn::CGMidAutumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMidAutumn)
}

void CGMidAutumn::InitAsDefaultInstance() {
}

CGMidAutumn::CGMidAutumn(const CGMidAutumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMidAutumn)
}

void CGMidAutumn::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  targetid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMidAutumn::~CGMidAutumn() {
  // @@protoc_insertion_point(destructor:CGMidAutumn)
  SharedDtor();
}

void CGMidAutumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMidAutumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMidAutumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMidAutumn_descriptor_;
}

const CGMidAutumn& CGMidAutumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MidAutumnMessage_2eproto();
  return *default_instance_;
}

CGMidAutumn* CGMidAutumn::default_instance_ = NULL;

CGMidAutumn* CGMidAutumn::New() const {
  return new CGMidAutumn;
}

void CGMidAutumn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGMidAutumn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, targetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMidAutumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMidAutumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetID;
        break;
      }

      // optional int32 targetID = 2;
      case 2: {
        if (tag == 16) {
         parse_targetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGMidAutumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMidAutumn)
  return false;
#undef DO_
}

void CGMidAutumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMidAutumn)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMidAutumn)
}

::google::protobuf::uint8* CGMidAutumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMidAutumn)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 targetID = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMidAutumn)
  return target;
}

int CGMidAutumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 targetID = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMidAutumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMidAutumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMidAutumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMidAutumn::MergeFrom(const CGMidAutumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMidAutumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMidAutumn::CopyFrom(const CGMidAutumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMidAutumn::IsInitialized() const {

  return true;
}

void CGMidAutumn::Swap(CGMidAutumn* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMidAutumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMidAutumn_descriptor_;
  metadata.reflection = CGMidAutumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMidAutumn::kTypeFieldNumber;
const int GCMidAutumn::kTargetsFieldNumber;
const int GCMidAutumn::kClientInfoFieldNumber;
const int GCMidAutumn::kResultFieldNumber;
const int GCMidAutumn::kVersionFieldNumber;
const int GCMidAutumn::kActivityIdFieldNumber;
#endif  // !_MSC_VER

GCMidAutumn::GCMidAutumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMidAutumn)
}

void GCMidAutumn::InitAsDefaultInstance() {
  clientinfo_ = const_cast< ::MidaClientInfo*>(&::MidaClientInfo::default_instance());
}

GCMidAutumn::GCMidAutumn(const GCMidAutumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMidAutumn)
}

void GCMidAutumn::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  clientinfo_ = NULL;
  result_ = 0;
  version_ = 0;
  activityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMidAutumn::~GCMidAutumn() {
  // @@protoc_insertion_point(destructor:GCMidAutumn)
  SharedDtor();
}

void GCMidAutumn::SharedDtor() {
  if (this != default_instance_) {
    delete clientinfo_;
  }
}

void GCMidAutumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMidAutumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMidAutumn_descriptor_;
}

const GCMidAutumn& GCMidAutumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MidAutumnMessage_2eproto();
  return *default_instance_;
}

GCMidAutumn* GCMidAutumn::default_instance_ = NULL;

GCMidAutumn* GCMidAutumn::New() const {
  return new GCMidAutumn;
}

void GCMidAutumn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMidAutumn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(type_, result_);
    ZR_(version_, activityid_);
    if (has_clientinfo()) {
      if (clientinfo_ != NULL) clientinfo_->::MidaClientInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMidAutumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMidAutumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        break;
      }

      // repeated .MidaTargetInfo targets = 2;
      case 2: {
        if (tag == 18) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targets;
        if (input->ExpectTag(26)) goto parse_clientInfo;
        break;
      }

      // optional .MidaClientInfo clientInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_clientInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_activityId;
        break;
      }

      // optional int32 activityId = 6;
      case 6: {
        if (tag == 48) {
         parse_activityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMidAutumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMidAutumn)
  return false;
#undef DO_
}

void GCMidAutumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMidAutumn)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .MidaTargetInfo targets = 2;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targets(i), output);
  }

  // optional .MidaClientInfo clientInfo = 3;
  if (has_clientinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clientinfo(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  // optional int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // optional int32 activityId = 6;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMidAutumn)
}

::google::protobuf::uint8* GCMidAutumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMidAutumn)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .MidaTargetInfo targets = 2;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targets(i), target);
  }

  // optional .MidaClientInfo clientInfo = 3;
  if (has_clientinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clientinfo(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  // optional int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // optional int32 activityId = 6;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMidAutumn)
  return target;
}

int GCMidAutumn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .MidaClientInfo clientInfo = 3;
    if (has_clientinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientinfo());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 activityId = 6;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

  }
  // repeated .MidaTargetInfo targets = 2;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMidAutumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMidAutumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMidAutumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMidAutumn::MergeFrom(const GCMidAutumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_clientinfo()) {
      mutable_clientinfo()->::MidaClientInfo::MergeFrom(from.clientinfo());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMidAutumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMidAutumn::CopyFrom(const GCMidAutumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMidAutumn::IsInitialized() const {

  return true;
}

void GCMidAutumn::Swap(GCMidAutumn* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    targets_.Swap(&other->targets_);
    std::swap(clientinfo_, other->clientinfo_);
    std::swap(result_, other->result_);
    std::swap(version_, other->version_);
    std::swap(activityid_, other->activityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMidAutumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMidAutumn_descriptor_;
  metadata.reflection = GCMidAutumn_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
