// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MidAutumnMessage.proto

#ifndef PROTOBUF_MidAutumnMessage_2eproto__INCLUDED
#define PROTOBUF_MidAutumnMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MidAutumnMessage_2eproto();
void protobuf_AssignDesc_MidAutumnMessage_2eproto();
void protobuf_ShutdownFile_MidAutumnMessage_2eproto();

class MidaTargetInfo;
class MidaClientInfo;
class CGMidAutumn;
class GCMidAutumn;

// ===================================================================

class MidaTargetInfo : public ::google::protobuf::Message {
 public:
  MidaTargetInfo();
  virtual ~MidaTargetInfo();

  MidaTargetInfo(const MidaTargetInfo& from);

  inline MidaTargetInfo& operator=(const MidaTargetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MidaTargetInfo& default_instance();

  void Swap(MidaTargetInfo* other);

  // implements Message ----------------------------------------------

  MidaTargetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MidaTargetInfo& from);
  void MergeFrom(const MidaTargetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Iteminfo itemInfo = 1;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 1;
  inline const ::Iteminfo& iteminfo() const;
  inline ::Iteminfo* mutable_iteminfo();
  inline ::Iteminfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Iteminfo* iteminfo);

  // optional int32 currency = 2;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 2;
  inline ::google::protobuf::int32 currency() const;
  inline void set_currency(::google::protobuf::int32 value);

  // optional int32 consumeValue = 3;
  inline bool has_consumevalue() const;
  inline void clear_consumevalue();
  static const int kConsumeValueFieldNumber = 3;
  inline ::google::protobuf::int32 consumevalue() const;
  inline void set_consumevalue(::google::protobuf::int32 value);

  // optional int32 isShow = 4;
  inline bool has_isshow() const;
  inline void clear_isshow();
  static const int kIsShowFieldNumber = 4;
  inline ::google::protobuf::int32 isshow() const;
  inline void set_isshow(::google::protobuf::int32 value);

  // optional int32 vipLevel = 5;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 5;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 freeNun = 6;
  inline bool has_freenun() const;
  inline void clear_freenun();
  static const int kFreeNunFieldNumber = 6;
  inline ::google::protobuf::int32 freenun() const;
  inline void set_freenun(::google::protobuf::int32 value);

  // optional int32 maxNun = 7;
  inline bool has_maxnun() const;
  inline void clear_maxnun();
  static const int kMaxNunFieldNumber = 7;
  inline ::google::protobuf::int32 maxnun() const;
  inline void set_maxnun(::google::protobuf::int32 value);

  // optional int32 id = 8;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 8;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 currency2 = 9;
  inline bool has_currency2() const;
  inline void clear_currency2();
  static const int kCurrency2FieldNumber = 9;
  inline ::google::protobuf::int32 currency2() const;
  inline void set_currency2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MidaTargetInfo)
 private:
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_consumevalue();
  inline void clear_has_consumevalue();
  inline void set_has_isshow();
  inline void clear_has_isshow();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_freenun();
  inline void clear_has_freenun();
  inline void set_has_maxnun();
  inline void clear_has_maxnun();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currency2();
  inline void clear_has_currency2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Iteminfo* iteminfo_;
  ::google::protobuf::int32 currency_;
  ::google::protobuf::int32 consumevalue_;
  ::google::protobuf::int32 isshow_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 freenun_;
  ::google::protobuf::int32 maxnun_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 currency2_;
  friend void  protobuf_AddDesc_MidAutumnMessage_2eproto();
  friend void protobuf_AssignDesc_MidAutumnMessage_2eproto();
  friend void protobuf_ShutdownFile_MidAutumnMessage_2eproto();

  void InitAsDefaultInstance();
  static MidaTargetInfo* default_instance_;
};
// -------------------------------------------------------------------

class MidaClientInfo : public ::google::protobuf::Message {
 public:
  MidaClientInfo();
  virtual ~MidaClientInfo();

  MidaClientInfo(const MidaClientInfo& from);

  inline MidaClientInfo& operator=(const MidaClientInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MidaClientInfo& default_instance();

  void Swap(MidaClientInfo* other);

  // implements Message ----------------------------------------------

  MidaClientInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MidaClientInfo& from);
  void MergeFrom(const MidaClientInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 model = 1;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 1;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);

  // optional string scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // optional string rotate = 3;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 3;
  inline const ::std::string& rotate() const;
  inline void set_rotate(const ::std::string& value);
  inline void set_rotate(const char* value);
  inline void set_rotate(const char* value, size_t size);
  inline ::std::string* mutable_rotate();
  inline ::std::string* release_rotate();
  inline void set_allocated_rotate(::std::string* rotate);

  // optional string position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional int32 title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // optional int64 startTime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 endTime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // repeated .Iteminfo items = 8;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::Iteminfo& items(int index) const;
  inline ::Iteminfo* mutable_items(int index);
  inline ::Iteminfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MidaClientInfo)
 private:
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scale_;
  ::std::string* rotate_;
  ::google::protobuf::int32 model_;
  ::google::protobuf::int32 title_;
  ::std::string* position_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::RepeatedPtrField< ::Iteminfo > items_;
  friend void  protobuf_AddDesc_MidAutumnMessage_2eproto();
  friend void protobuf_AssignDesc_MidAutumnMessage_2eproto();
  friend void protobuf_ShutdownFile_MidAutumnMessage_2eproto();

  void InitAsDefaultInstance();
  static MidaClientInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGMidAutumn : public ::google::protobuf::Message {
 public:
  CGMidAutumn();
  virtual ~CGMidAutumn();

  CGMidAutumn(const CGMidAutumn& from);

  inline CGMidAutumn& operator=(const CGMidAutumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGMidAutumn& default_instance();

  void Swap(CGMidAutumn* other);

  // implements Message ----------------------------------------------

  CGMidAutumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGMidAutumn& from);
  void MergeFrom(const CGMidAutumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 targetID = 2;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  inline ::google::protobuf::int32 targetid() const;
  inline void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGMidAutumn)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 targetid_;
  friend void  protobuf_AddDesc_MidAutumnMessage_2eproto();
  friend void protobuf_AssignDesc_MidAutumnMessage_2eproto();
  friend void protobuf_ShutdownFile_MidAutumnMessage_2eproto();

  void InitAsDefaultInstance();
  static CGMidAutumn* default_instance_;
};
// -------------------------------------------------------------------

class GCMidAutumn : public ::google::protobuf::Message {
 public:
  GCMidAutumn();
  virtual ~GCMidAutumn();

  GCMidAutumn(const GCMidAutumn& from);

  inline GCMidAutumn& operator=(const GCMidAutumn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMidAutumn& default_instance();

  void Swap(GCMidAutumn* other);

  // implements Message ----------------------------------------------

  GCMidAutumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMidAutumn& from);
  void MergeFrom(const GCMidAutumn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .MidaTargetInfo targets = 2;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 2;
  inline const ::MidaTargetInfo& targets(int index) const;
  inline ::MidaTargetInfo* mutable_targets(int index);
  inline ::MidaTargetInfo* add_targets();
  inline const ::google::protobuf::RepeatedPtrField< ::MidaTargetInfo >&
      targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::MidaTargetInfo >*
      mutable_targets();

  // optional .MidaClientInfo clientInfo = 3;
  inline bool has_clientinfo() const;
  inline void clear_clientinfo();
  static const int kClientInfoFieldNumber = 3;
  inline const ::MidaClientInfo& clientinfo() const;
  inline ::MidaClientInfo* mutable_clientinfo();
  inline ::MidaClientInfo* release_clientinfo();
  inline void set_allocated_clientinfo(::MidaClientInfo* clientinfo);

  // optional int32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 activityId = 6;
  inline bool has_activityid() const;
  inline void clear_activityid();
  static const int kActivityIdFieldNumber = 6;
  inline ::google::protobuf::int32 activityid() const;
  inline void set_activityid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCMidAutumn)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_clientinfo();
  inline void clear_has_clientinfo();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_activityid();
  inline void clear_has_activityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MidaTargetInfo > targets_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 result_;
  ::MidaClientInfo* clientinfo_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 activityid_;
  friend void  protobuf_AddDesc_MidAutumnMessage_2eproto();
  friend void protobuf_AssignDesc_MidAutumnMessage_2eproto();
  friend void protobuf_ShutdownFile_MidAutumnMessage_2eproto();

  void InitAsDefaultInstance();
  static GCMidAutumn* default_instance_;
};
// ===================================================================


// ===================================================================

// MidaTargetInfo

// optional .Iteminfo itemInfo = 1;
inline bool MidaTargetInfo::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MidaTargetInfo::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MidaTargetInfo::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MidaTargetInfo::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Iteminfo::Clear();
  clear_has_iteminfo();
}
inline const ::Iteminfo& MidaTargetInfo::iteminfo() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.itemInfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Iteminfo* MidaTargetInfo::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Iteminfo;
  // @@protoc_insertion_point(field_mutable:MidaTargetInfo.itemInfo)
  return iteminfo_;
}
inline ::Iteminfo* MidaTargetInfo::release_iteminfo() {
  clear_has_iteminfo();
  ::Iteminfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void MidaTargetInfo::set_allocated_iteminfo(::Iteminfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:MidaTargetInfo.itemInfo)
}

// optional int32 currency = 2;
inline bool MidaTargetInfo::has_currency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MidaTargetInfo::set_has_currency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MidaTargetInfo::clear_has_currency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MidaTargetInfo::clear_currency() {
  currency_ = 0;
  clear_has_currency();
}
inline ::google::protobuf::int32 MidaTargetInfo::currency() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.currency)
  return currency_;
}
inline void MidaTargetInfo::set_currency(::google::protobuf::int32 value) {
  set_has_currency();
  currency_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.currency)
}

// optional int32 consumeValue = 3;
inline bool MidaTargetInfo::has_consumevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MidaTargetInfo::set_has_consumevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MidaTargetInfo::clear_has_consumevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MidaTargetInfo::clear_consumevalue() {
  consumevalue_ = 0;
  clear_has_consumevalue();
}
inline ::google::protobuf::int32 MidaTargetInfo::consumevalue() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.consumeValue)
  return consumevalue_;
}
inline void MidaTargetInfo::set_consumevalue(::google::protobuf::int32 value) {
  set_has_consumevalue();
  consumevalue_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.consumeValue)
}

// optional int32 isShow = 4;
inline bool MidaTargetInfo::has_isshow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MidaTargetInfo::set_has_isshow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MidaTargetInfo::clear_has_isshow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MidaTargetInfo::clear_isshow() {
  isshow_ = 0;
  clear_has_isshow();
}
inline ::google::protobuf::int32 MidaTargetInfo::isshow() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.isShow)
  return isshow_;
}
inline void MidaTargetInfo::set_isshow(::google::protobuf::int32 value) {
  set_has_isshow();
  isshow_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.isShow)
}

// optional int32 vipLevel = 5;
inline bool MidaTargetInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MidaTargetInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MidaTargetInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MidaTargetInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 MidaTargetInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.vipLevel)
  return viplevel_;
}
inline void MidaTargetInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.vipLevel)
}

// optional int32 freeNun = 6;
inline bool MidaTargetInfo::has_freenun() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MidaTargetInfo::set_has_freenun() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MidaTargetInfo::clear_has_freenun() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MidaTargetInfo::clear_freenun() {
  freenun_ = 0;
  clear_has_freenun();
}
inline ::google::protobuf::int32 MidaTargetInfo::freenun() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.freeNun)
  return freenun_;
}
inline void MidaTargetInfo::set_freenun(::google::protobuf::int32 value) {
  set_has_freenun();
  freenun_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.freeNun)
}

// optional int32 maxNun = 7;
inline bool MidaTargetInfo::has_maxnun() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MidaTargetInfo::set_has_maxnun() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MidaTargetInfo::clear_has_maxnun() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MidaTargetInfo::clear_maxnun() {
  maxnun_ = 0;
  clear_has_maxnun();
}
inline ::google::protobuf::int32 MidaTargetInfo::maxnun() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.maxNun)
  return maxnun_;
}
inline void MidaTargetInfo::set_maxnun(::google::protobuf::int32 value) {
  set_has_maxnun();
  maxnun_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.maxNun)
}

// optional int32 id = 8;
inline bool MidaTargetInfo::has_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MidaTargetInfo::set_has_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MidaTargetInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MidaTargetInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MidaTargetInfo::id() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.id)
  return id_;
}
inline void MidaTargetInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.id)
}

// optional int32 currency2 = 9;
inline bool MidaTargetInfo::has_currency2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MidaTargetInfo::set_has_currency2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MidaTargetInfo::clear_has_currency2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MidaTargetInfo::clear_currency2() {
  currency2_ = 0;
  clear_has_currency2();
}
inline ::google::protobuf::int32 MidaTargetInfo::currency2() const {
  // @@protoc_insertion_point(field_get:MidaTargetInfo.currency2)
  return currency2_;
}
inline void MidaTargetInfo::set_currency2(::google::protobuf::int32 value) {
  set_has_currency2();
  currency2_ = value;
  // @@protoc_insertion_point(field_set:MidaTargetInfo.currency2)
}

// -------------------------------------------------------------------

// MidaClientInfo

// optional int32 model = 1;
inline bool MidaClientInfo::has_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MidaClientInfo::set_has_model() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MidaClientInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MidaClientInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 MidaClientInfo::model() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.model)
  return model_;
}
inline void MidaClientInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:MidaClientInfo.model)
}

// optional string scale = 2;
inline bool MidaClientInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MidaClientInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MidaClientInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MidaClientInfo::clear_scale() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& MidaClientInfo::scale() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.scale)
  return *scale_;
}
inline void MidaClientInfo::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set:MidaClientInfo.scale)
}
inline void MidaClientInfo::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:MidaClientInfo.scale)
}
inline void MidaClientInfo::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MidaClientInfo.scale)
}
inline ::std::string* MidaClientInfo::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MidaClientInfo.scale)
  return scale_;
}
inline ::std::string* MidaClientInfo::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MidaClientInfo::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MidaClientInfo.scale)
}

// optional string rotate = 3;
inline bool MidaClientInfo::has_rotate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MidaClientInfo::set_has_rotate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MidaClientInfo::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MidaClientInfo::clear_rotate() {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_->clear();
  }
  clear_has_rotate();
}
inline const ::std::string& MidaClientInfo::rotate() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.rotate)
  return *rotate_;
}
inline void MidaClientInfo::set_rotate(const ::std::string& value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set:MidaClientInfo.rotate)
}
inline void MidaClientInfo::set_rotate(const char* value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set_char:MidaClientInfo.rotate)
}
inline void MidaClientInfo::set_rotate(const char* value, size_t size) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MidaClientInfo.rotate)
}
inline ::std::string* MidaClientInfo::mutable_rotate() {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MidaClientInfo.rotate)
  return rotate_;
}
inline ::std::string* MidaClientInfo::release_rotate() {
  clear_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rotate_;
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MidaClientInfo::set_allocated_rotate(::std::string* rotate) {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (rotate) {
    set_has_rotate();
    rotate_ = rotate;
  } else {
    clear_has_rotate();
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MidaClientInfo.rotate)
}

// optional string position = 4;
inline bool MidaClientInfo::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MidaClientInfo::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MidaClientInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MidaClientInfo::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& MidaClientInfo::position() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.position)
  return *position_;
}
inline void MidaClientInfo::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:MidaClientInfo.position)
}
inline void MidaClientInfo::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:MidaClientInfo.position)
}
inline void MidaClientInfo::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MidaClientInfo.position)
}
inline ::std::string* MidaClientInfo::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MidaClientInfo.position)
  return position_;
}
inline ::std::string* MidaClientInfo::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MidaClientInfo::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MidaClientInfo.position)
}

// optional int32 title = 5;
inline bool MidaClientInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MidaClientInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MidaClientInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MidaClientInfo::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 MidaClientInfo::title() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.title)
  return title_;
}
inline void MidaClientInfo::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:MidaClientInfo.title)
}

// optional int64 startTime = 6;
inline bool MidaClientInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MidaClientInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MidaClientInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MidaClientInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 MidaClientInfo::starttime() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.startTime)
  return starttime_;
}
inline void MidaClientInfo::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:MidaClientInfo.startTime)
}

// optional int64 endTime = 7;
inline bool MidaClientInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MidaClientInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MidaClientInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MidaClientInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 MidaClientInfo::endtime() const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.endTime)
  return endtime_;
}
inline void MidaClientInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:MidaClientInfo.endTime)
}

// repeated .Iteminfo items = 8;
inline int MidaClientInfo::items_size() const {
  return items_.size();
}
inline void MidaClientInfo::clear_items() {
  items_.Clear();
}
inline const ::Iteminfo& MidaClientInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:MidaClientInfo.items)
  return items_.Get(index);
}
inline ::Iteminfo* MidaClientInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:MidaClientInfo.items)
  return items_.Mutable(index);
}
inline ::Iteminfo* MidaClientInfo::add_items() {
  // @@protoc_insertion_point(field_add:MidaClientInfo.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Iteminfo >&
MidaClientInfo::items() const {
  // @@protoc_insertion_point(field_list:MidaClientInfo.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Iteminfo >*
MidaClientInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:MidaClientInfo.items)
  return &items_;
}

// -------------------------------------------------------------------

// CGMidAutumn

// optional int32 type = 1;
inline bool CGMidAutumn::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGMidAutumn::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGMidAutumn::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGMidAutumn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGMidAutumn::type() const {
  // @@protoc_insertion_point(field_get:CGMidAutumn.type)
  return type_;
}
inline void CGMidAutumn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGMidAutumn.type)
}

// optional int32 targetID = 2;
inline bool CGMidAutumn::has_targetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGMidAutumn::set_has_targetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGMidAutumn::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGMidAutumn::clear_targetid() {
  targetid_ = 0;
  clear_has_targetid();
}
inline ::google::protobuf::int32 CGMidAutumn::targetid() const {
  // @@protoc_insertion_point(field_get:CGMidAutumn.targetID)
  return targetid_;
}
inline void CGMidAutumn::set_targetid(::google::protobuf::int32 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:CGMidAutumn.targetID)
}

// -------------------------------------------------------------------

// GCMidAutumn

// optional int32 type = 1;
inline bool GCMidAutumn::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMidAutumn::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMidAutumn::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMidAutumn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCMidAutumn::type() const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.type)
  return type_;
}
inline void GCMidAutumn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCMidAutumn.type)
}

// repeated .MidaTargetInfo targets = 2;
inline int GCMidAutumn::targets_size() const {
  return targets_.size();
}
inline void GCMidAutumn::clear_targets() {
  targets_.Clear();
}
inline const ::MidaTargetInfo& GCMidAutumn::targets(int index) const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.targets)
  return targets_.Get(index);
}
inline ::MidaTargetInfo* GCMidAutumn::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:GCMidAutumn.targets)
  return targets_.Mutable(index);
}
inline ::MidaTargetInfo* GCMidAutumn::add_targets() {
  // @@protoc_insertion_point(field_add:GCMidAutumn.targets)
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MidaTargetInfo >&
GCMidAutumn::targets() const {
  // @@protoc_insertion_point(field_list:GCMidAutumn.targets)
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::MidaTargetInfo >*
GCMidAutumn::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:GCMidAutumn.targets)
  return &targets_;
}

// optional .MidaClientInfo clientInfo = 3;
inline bool GCMidAutumn::has_clientinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCMidAutumn::set_has_clientinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCMidAutumn::clear_has_clientinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCMidAutumn::clear_clientinfo() {
  if (clientinfo_ != NULL) clientinfo_->::MidaClientInfo::Clear();
  clear_has_clientinfo();
}
inline const ::MidaClientInfo& GCMidAutumn::clientinfo() const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.clientInfo)
  return clientinfo_ != NULL ? *clientinfo_ : *default_instance_->clientinfo_;
}
inline ::MidaClientInfo* GCMidAutumn::mutable_clientinfo() {
  set_has_clientinfo();
  if (clientinfo_ == NULL) clientinfo_ = new ::MidaClientInfo;
  // @@protoc_insertion_point(field_mutable:GCMidAutumn.clientInfo)
  return clientinfo_;
}
inline ::MidaClientInfo* GCMidAutumn::release_clientinfo() {
  clear_has_clientinfo();
  ::MidaClientInfo* temp = clientinfo_;
  clientinfo_ = NULL;
  return temp;
}
inline void GCMidAutumn::set_allocated_clientinfo(::MidaClientInfo* clientinfo) {
  delete clientinfo_;
  clientinfo_ = clientinfo;
  if (clientinfo) {
    set_has_clientinfo();
  } else {
    clear_has_clientinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCMidAutumn.clientInfo)
}

// optional int32 result = 4;
inline bool GCMidAutumn::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCMidAutumn::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCMidAutumn::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCMidAutumn::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCMidAutumn::result() const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.result)
  return result_;
}
inline void GCMidAutumn::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCMidAutumn.result)
}

// optional int32 version = 5;
inline bool GCMidAutumn::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCMidAutumn::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCMidAutumn::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCMidAutumn::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 GCMidAutumn::version() const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.version)
  return version_;
}
inline void GCMidAutumn::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:GCMidAutumn.version)
}

// optional int32 activityId = 6;
inline bool GCMidAutumn::has_activityid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCMidAutumn::set_has_activityid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCMidAutumn::clear_has_activityid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCMidAutumn::clear_activityid() {
  activityid_ = 0;
  clear_has_activityid();
}
inline ::google::protobuf::int32 GCMidAutumn::activityid() const {
  // @@protoc_insertion_point(field_get:GCMidAutumn.activityId)
  return activityid_;
}
inline void GCMidAutumn::set_activityid(::google::protobuf::int32 value) {
  set_has_activityid();
  activityid_ = value;
  // @@protoc_insertion_point(field_set:GCMidAutumn.activityId)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MidAutumnMessage_2eproto__INCLUDED
