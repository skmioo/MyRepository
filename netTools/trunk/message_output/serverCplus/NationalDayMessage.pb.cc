// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NationalDayMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NationalDayMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NationalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* NationalCash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalCash_reflection_ = NULL;
const ::google::protobuf::Descriptor* NationalItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NationalRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NationalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NationalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNationalOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNationalOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCNationalOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCNationalOperateResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NationalDayMessage_2eproto() {
  protobuf_AddDesc_NationalDayMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NationalDayMessage.proto");
  GOOGLE_CHECK(file != NULL);
  NationalReward_descriptor_ = file->message_type(0);
  static const int NationalReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalReward, reward_),
  };
  NationalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalReward_descriptor_,
      NationalReward::default_instance_,
      NationalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalReward));
  NationalCash_descriptor_ = file->message_type(1);
  static const int NationalCash_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalCash, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalCash, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalCash, reward_),
  };
  NationalCash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalCash_descriptor_,
      NationalCash::default_instance_,
      NationalCash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalCash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalCash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalCash));
  NationalItem_descriptor_ = file->message_type(2);
  static const int NationalItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalItem, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalItem, iteminfo_),
  };
  NationalItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalItem_descriptor_,
      NationalItem::default_instance_,
      NationalItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalItem));
  NationalRank_descriptor_ = file->message_type(3);
  static const int NationalRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, playerid_),
  };
  NationalRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalRank_descriptor_,
      NationalRank::default_instance_,
      NationalRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalRank));
  NationalInfo_descriptor_ = file->message_type(4);
  static const int NationalInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, totalpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, dailypoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, cashs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, basehate_),
  };
  NationalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NationalInfo_descriptor_,
      NationalInfo::default_instance_,
      NationalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NationalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NationalInfo));
  CGNationalOperate_descriptor_ = file->message_type(5);
  static const int CGNationalOperate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNationalOperate, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNationalOperate, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNationalOperate, num_),
  };
  CGNationalOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNationalOperate_descriptor_,
      CGNationalOperate::default_instance_,
      CGNationalOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNationalOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNationalOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNationalOperate));
  GCNationalOperateResult_descriptor_ = file->message_type(6);
  static const int GCNationalOperateResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, nationalrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, nationalcashs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, nationalitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, nationalranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, nationalinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, multiples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, acttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, caption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, listnum_),
  };
  GCNationalOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCNationalOperateResult_descriptor_,
      GCNationalOperateResult::default_instance_,
      GCNationalOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNationalOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCNationalOperateResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NationalDayMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalReward_descriptor_, &NationalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalCash_descriptor_, &NationalCash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalItem_descriptor_, &NationalItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalRank_descriptor_, &NationalRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NationalInfo_descriptor_, &NationalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNationalOperate_descriptor_, &CGNationalOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCNationalOperateResult_descriptor_, &GCNationalOperateResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NationalDayMessage_2eproto() {
  delete NationalReward::default_instance_;
  delete NationalReward_reflection_;
  delete NationalCash::default_instance_;
  delete NationalCash_reflection_;
  delete NationalItem::default_instance_;
  delete NationalItem_reflection_;
  delete NationalRank::default_instance_;
  delete NationalRank_reflection_;
  delete NationalInfo::default_instance_;
  delete NationalInfo_reflection_;
  delete CGNationalOperate::default_instance_;
  delete CGNationalOperate_reflection_;
  delete GCNationalOperateResult::default_instance_;
  delete GCNationalOperateResult_reflection_;
}

void protobuf_AddDesc_NationalDayMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030NationalDayMessage.proto\",\n\016NationalRe"
    "ward\022\n\n\002id\030\001 \001(\005\022\016\n\006reward\030\002 \001(\t\":\n\014Nati"
    "onalCash\022\n\n\002id\030\001 \001(\005\022\016\n\006points\030\002 \001(\005\022\016\n\006"
    "reward\030\003 \001(\t\"<\n\014NationalItem\022\n\n\002id\030\001 \001(\005"
    "\022\016\n\006points\030\002 \001(\005\022\020\n\010itemInfo\030\003 \001(\t\"R\n\014Na"
    "tionalRank\022\014\n\004rank\030\001 \001(\005\022\022\n\nplayerName\030\002"
    " \001(\t\022\016\n\006points\030\003 \001(\005\022\020\n\010playerID\030\004 \001(\003\"Y"
    "\n\014NationalInfo\022\023\n\013totalPoints\030\001 \001(\005\022\023\n\013d"
    "ailyPoints\030\002 \001(\005\022\r\n\005cashs\030\003 \003(\005\022\020\n\010baseH"
    "ate\030\004 \001(\005\"A\n\021CGNationalOperate\022\017\n\007operat"
    "e\030\001 \001(\005\022\016\n\006itemID\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\"\262\002\n"
    "\027GCNationalOperateResult\022\017\n\007operate\030\001 \001("
    "\005\022(\n\017nationalRewards\030\002 \003(\0132\017.NationalRew"
    "ard\022$\n\rnationalCashs\030\003 \003(\0132\r.NationalCas"
    "h\022$\n\rnationalItems\030\004 \003(\0132\r.NationalItem\022"
    "$\n\rnationalRanks\030\005 \003(\0132\r.NationalRank\022$\n"
    "\rnationalInfos\030\006 \001(\0132\r.NationalInfo\022\021\n\tm"
    "ultiples\030\007 \003(\005\022\017\n\007actType\030\010 \001(\005\022\017\n\007capti"
    "on\030\t \001(\t\022\017\n\007listNum\030\n \001(\tB\031\n\027com.mile.co"
    "mmon.message", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NationalDayMessage.proto", &protobuf_RegisterTypes);
  NationalReward::default_instance_ = new NationalReward();
  NationalCash::default_instance_ = new NationalCash();
  NationalItem::default_instance_ = new NationalItem();
  NationalRank::default_instance_ = new NationalRank();
  NationalInfo::default_instance_ = new NationalInfo();
  CGNationalOperate::default_instance_ = new CGNationalOperate();
  GCNationalOperateResult::default_instance_ = new GCNationalOperateResult();
  NationalReward::default_instance_->InitAsDefaultInstance();
  NationalCash::default_instance_->InitAsDefaultInstance();
  NationalItem::default_instance_->InitAsDefaultInstance();
  NationalRank::default_instance_->InitAsDefaultInstance();
  NationalInfo::default_instance_->InitAsDefaultInstance();
  CGNationalOperate::default_instance_->InitAsDefaultInstance();
  GCNationalOperateResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NationalDayMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NationalDayMessage_2eproto {
  StaticDescriptorInitializer_NationalDayMessage_2eproto() {
    protobuf_AddDesc_NationalDayMessage_2eproto();
  }
} static_descriptor_initializer_NationalDayMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NationalReward::kIdFieldNumber;
const int NationalReward::kRewardFieldNumber;
#endif  // !_MSC_VER

NationalReward::NationalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NationalReward)
}

void NationalReward::InitAsDefaultInstance() {
}

NationalReward::NationalReward(const NationalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NationalReward)
}

void NationalReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalReward::~NationalReward() {
  // @@protoc_insertion_point(destructor:NationalReward)
  SharedDtor();
}

void NationalReward::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void NationalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalReward_descriptor_;
}

const NationalReward& NationalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

NationalReward* NationalReward::default_instance_ = NULL;

NationalReward* NationalReward::New() const {
  return new NationalReward;
}

void NationalReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NationalReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // optional string reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NationalReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NationalReward)
  return false;
#undef DO_
}

void NationalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NationalReward)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NationalReward)
}

::google::protobuf::uint8* NationalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NationalReward)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NationalReward)
  return target;
}

int NationalReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalReward::MergeFrom(const NationalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalReward::CopyFrom(const NationalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalReward::IsInitialized() const {

  return true;
}

void NationalReward::Swap(NationalReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalReward_descriptor_;
  metadata.reflection = NationalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NationalCash::kIdFieldNumber;
const int NationalCash::kPointsFieldNumber;
const int NationalCash::kRewardFieldNumber;
#endif  // !_MSC_VER

NationalCash::NationalCash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NationalCash)
}

void NationalCash::InitAsDefaultInstance() {
}

NationalCash::NationalCash(const NationalCash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NationalCash)
}

void NationalCash::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  points_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalCash::~NationalCash() {
  // @@protoc_insertion_point(destructor:NationalCash)
  SharedDtor();
}

void NationalCash::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void NationalCash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalCash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalCash_descriptor_;
}

const NationalCash& NationalCash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

NationalCash* NationalCash::default_instance_ = NULL;

NationalCash* NationalCash::New() const {
  return new NationalCash;
}

void NationalCash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalCash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, points_);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reward_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalCash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NationalCash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // optional string reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reward");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NationalCash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NationalCash)
  return false;
#undef DO_
}

void NationalCash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NationalCash)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NationalCash)
}

::google::protobuf::uint8* NationalCash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NationalCash)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional string reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reward");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NationalCash)
  return target;
}

int NationalCash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional string reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalCash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalCash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalCash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalCash::MergeFrom(const NationalCash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalCash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalCash::CopyFrom(const NationalCash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalCash::IsInitialized() const {

  return true;
}

void NationalCash::Swap(NationalCash* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(points_, other->points_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalCash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalCash_descriptor_;
  metadata.reflection = NationalCash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NationalItem::kIdFieldNumber;
const int NationalItem::kPointsFieldNumber;
const int NationalItem::kItemInfoFieldNumber;
#endif  // !_MSC_VER

NationalItem::NationalItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NationalItem)
}

void NationalItem::InitAsDefaultInstance() {
}

NationalItem::NationalItem(const NationalItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NationalItem)
}

void NationalItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  points_ = 0;
  iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalItem::~NationalItem() {
  // @@protoc_insertion_point(destructor:NationalItem)
  SharedDtor();
}

void NationalItem::SharedDtor() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (this != default_instance_) {
  }
}

void NationalItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalItem_descriptor_;
}

const NationalItem& NationalItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

NationalItem* NationalItem::default_instance_ = NULL;

NationalItem* NationalItem::New() const {
  return new NationalItem;
}

void NationalItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, points_);
    if (has_iteminfo()) {
      if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        iteminfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NationalItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // optional int32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        break;
      }

      // optional string itemInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iteminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iteminfo().data(), this->iteminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "iteminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NationalItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NationalItem)
  return false;
#undef DO_
}

void NationalItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NationalItem)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->points(), output);
  }

  // optional string itemInfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NationalItem)
}

::google::protobuf::uint8* NationalItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NationalItem)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->points(), target);
  }

  // optional string itemInfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iteminfo().data(), this->iteminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "iteminfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NationalItem)
  return target;
}

int NationalItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional string itemInfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalItem::MergeFrom(const NationalItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_iteminfo()) {
      set_iteminfo(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalItem::CopyFrom(const NationalItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalItem::IsInitialized() const {

  return true;
}

void NationalItem::Swap(NationalItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(points_, other->points_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalItem_descriptor_;
  metadata.reflection = NationalItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NationalRank::kRankFieldNumber;
const int NationalRank::kPlayerNameFieldNumber;
const int NationalRank::kPointsFieldNumber;
const int NationalRank::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

NationalRank::NationalRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NationalRank)
}

void NationalRank::InitAsDefaultInstance() {
}

NationalRank::NationalRank(const NationalRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NationalRank)
}

void NationalRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  points_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalRank::~NationalRank() {
  // @@protoc_insertion_point(destructor:NationalRank)
  SharedDtor();
}

void NationalRank::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void NationalRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalRank_descriptor_;
}

const NationalRank& NationalRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

NationalRank* NationalRank::default_instance_ = NULL;

NationalRank* NationalRank::New() const {
  return new NationalRank;
}

void NationalRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rank_, playerid_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NationalRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_points;
        break;
      }

      // optional int32 points = 3;
      case 3: {
        if (tag == 24) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 4;
      case 4: {
        if (tag == 32) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NationalRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NationalRank)
  return false;
#undef DO_
}

void NationalRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NationalRank)
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 points = 3;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->points(), output);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NationalRank)
}

::google::protobuf::uint8* NationalRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NationalRank)
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 points = 3;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->points(), target);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NationalRank)
  return target;
}

int NationalRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 points = 3;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }

    // optional int64 playerID = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalRank::MergeFrom(const NationalRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalRank::CopyFrom(const NationalRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalRank::IsInitialized() const {

  return true;
}

void NationalRank::Swap(NationalRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(playername_, other->playername_);
    std::swap(points_, other->points_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalRank_descriptor_;
  metadata.reflection = NationalRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NationalInfo::kTotalPointsFieldNumber;
const int NationalInfo::kDailyPointsFieldNumber;
const int NationalInfo::kCashsFieldNumber;
const int NationalInfo::kBaseHateFieldNumber;
#endif  // !_MSC_VER

NationalInfo::NationalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NationalInfo)
}

void NationalInfo::InitAsDefaultInstance() {
}

NationalInfo::NationalInfo(const NationalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NationalInfo)
}

void NationalInfo::SharedCtor() {
  _cached_size_ = 0;
  totalpoints_ = 0;
  dailypoints_ = 0;
  basehate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NationalInfo::~NationalInfo() {
  // @@protoc_insertion_point(destructor:NationalInfo)
  SharedDtor();
}

void NationalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NationalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NationalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NationalInfo_descriptor_;
}

const NationalInfo& NationalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

NationalInfo* NationalInfo::default_instance_ = NULL;

NationalInfo* NationalInfo::New() const {
  return new NationalInfo;
}

void NationalInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NationalInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(totalpoints_, dailypoints_);
    basehate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cashs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NationalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NationalInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalPoints = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpoints_)));
          set_has_totalpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dailyPoints;
        break;
      }

      // optional int32 dailyPoints = 2;
      case 2: {
        if (tag == 16) {
         parse_dailyPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailypoints_)));
          set_has_dailypoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cashs;
        break;
      }

      // repeated int32 cashs = 3;
      case 3: {
        if (tag == 24) {
         parse_cashs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cashs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cashs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cashs;
        if (input->ExpectTag(32)) goto parse_baseHate;
        break;
      }

      // optional int32 baseHate = 4;
      case 4: {
        if (tag == 32) {
         parse_baseHate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basehate_)));
          set_has_basehate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NationalInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NationalInfo)
  return false;
#undef DO_
}

void NationalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NationalInfo)
  // optional int32 totalPoints = 1;
  if (has_totalpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalpoints(), output);
  }

  // optional int32 dailyPoints = 2;
  if (has_dailypoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dailypoints(), output);
  }

  // repeated int32 cashs = 3;
  for (int i = 0; i < this->cashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cashs(i), output);
  }

  // optional int32 baseHate = 4;
  if (has_basehate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->basehate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NationalInfo)
}

::google::protobuf::uint8* NationalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NationalInfo)
  // optional int32 totalPoints = 1;
  if (has_totalpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalpoints(), target);
  }

  // optional int32 dailyPoints = 2;
  if (has_dailypoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dailypoints(), target);
  }

  // repeated int32 cashs = 3;
  for (int i = 0; i < this->cashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cashs(i), target);
  }

  // optional int32 baseHate = 4;
  if (has_basehate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->basehate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NationalInfo)
  return target;
}

int NationalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalPoints = 1;
    if (has_totalpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpoints());
    }

    // optional int32 dailyPoints = 2;
    if (has_dailypoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailypoints());
    }

    // optional int32 baseHate = 4;
    if (has_basehate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basehate());
    }

  }
  // repeated int32 cashs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cashs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cashs(i));
    }
    total_size += 1 * this->cashs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NationalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NationalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NationalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NationalInfo::MergeFrom(const NationalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cashs_.MergeFrom(from.cashs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalpoints()) {
      set_totalpoints(from.totalpoints());
    }
    if (from.has_dailypoints()) {
      set_dailypoints(from.dailypoints());
    }
    if (from.has_basehate()) {
      set_basehate(from.basehate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NationalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NationalInfo::CopyFrom(const NationalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NationalInfo::IsInitialized() const {

  return true;
}

void NationalInfo::Swap(NationalInfo* other) {
  if (other != this) {
    std::swap(totalpoints_, other->totalpoints_);
    std::swap(dailypoints_, other->dailypoints_);
    cashs_.Swap(&other->cashs_);
    std::swap(basehate_, other->basehate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NationalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NationalInfo_descriptor_;
  metadata.reflection = NationalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNationalOperate::kOperateFieldNumber;
const int CGNationalOperate::kItemIDFieldNumber;
const int CGNationalOperate::kNumFieldNumber;
#endif  // !_MSC_VER

CGNationalOperate::CGNationalOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGNationalOperate)
}

void CGNationalOperate::InitAsDefaultInstance() {
}

CGNationalOperate::CGNationalOperate(const CGNationalOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGNationalOperate)
}

void CGNationalOperate::SharedCtor() {
  _cached_size_ = 0;
  operate_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNationalOperate::~CGNationalOperate() {
  // @@protoc_insertion_point(destructor:CGNationalOperate)
  SharedDtor();
}

void CGNationalOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNationalOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNationalOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNationalOperate_descriptor_;
}

const CGNationalOperate& CGNationalOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

CGNationalOperate* CGNationalOperate::default_instance_ = NULL;

CGNationalOperate* CGNationalOperate::New() const {
  return new CGNationalOperate;
}

void CGNationalOperate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGNationalOperate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(operate_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNationalOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGNationalOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 2;
      case 2: {
        if (tag == 16) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGNationalOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGNationalOperate)
  return false;
#undef DO_
}

void CGNationalOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGNationalOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // optional int32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGNationalOperate)
}

::google::protobuf::uint8* CGNationalOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGNationalOperate)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // optional int32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGNationalOperate)
  return target;
}

int CGNationalOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional int32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNationalOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNationalOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNationalOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNationalOperate::MergeFrom(const CGNationalOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNationalOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNationalOperate::CopyFrom(const CGNationalOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNationalOperate::IsInitialized() const {

  return true;
}

void CGNationalOperate::Swap(CGNationalOperate* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNationalOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNationalOperate_descriptor_;
  metadata.reflection = CGNationalOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCNationalOperateResult::kOperateFieldNumber;
const int GCNationalOperateResult::kNationalRewardsFieldNumber;
const int GCNationalOperateResult::kNationalCashsFieldNumber;
const int GCNationalOperateResult::kNationalItemsFieldNumber;
const int GCNationalOperateResult::kNationalRanksFieldNumber;
const int GCNationalOperateResult::kNationalInfosFieldNumber;
const int GCNationalOperateResult::kMultiplesFieldNumber;
const int GCNationalOperateResult::kActTypeFieldNumber;
const int GCNationalOperateResult::kCaptionFieldNumber;
const int GCNationalOperateResult::kListNumFieldNumber;
#endif  // !_MSC_VER

GCNationalOperateResult::GCNationalOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCNationalOperateResult)
}

void GCNationalOperateResult::InitAsDefaultInstance() {
  nationalinfos_ = const_cast< ::NationalInfo*>(&::NationalInfo::default_instance());
}

GCNationalOperateResult::GCNationalOperateResult(const GCNationalOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCNationalOperateResult)
}

void GCNationalOperateResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  operate_ = 0;
  nationalinfos_ = NULL;
  acttype_ = 0;
  caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCNationalOperateResult::~GCNationalOperateResult() {
  // @@protoc_insertion_point(destructor:GCNationalOperateResult)
  SharedDtor();
}

void GCNationalOperateResult::SharedDtor() {
  if (caption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caption_;
  }
  if (listnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listnum_;
  }
  if (this != default_instance_) {
    delete nationalinfos_;
  }
}

void GCNationalOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCNationalOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCNationalOperateResult_descriptor_;
}

const GCNationalOperateResult& GCNationalOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NationalDayMessage_2eproto();
  return *default_instance_;
}

GCNationalOperateResult* GCNationalOperateResult::default_instance_ = NULL;

GCNationalOperateResult* GCNationalOperateResult::New() const {
  return new GCNationalOperateResult;
}

void GCNationalOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCNationalOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 161) {
    ZR_(operate_, acttype_);
    if (has_nationalinfos()) {
      if (nationalinfos_ != NULL) nationalinfos_->::NationalInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_caption()) {
      if (caption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caption_->clear();
      }
    }
    if (has_listnum()) {
      if (listnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        listnum_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  nationalrewards_.Clear();
  nationalcashs_.Clear();
  nationalitems_.Clear();
  nationalranks_.Clear();
  multiples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCNationalOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCNationalOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 operate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nationalRewards;
        break;
      }

      // repeated .NationalReward nationalRewards = 2;
      case 2: {
        if (tag == 18) {
         parse_nationalRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nationalrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nationalRewards;
        if (input->ExpectTag(26)) goto parse_nationalCashs;
        break;
      }

      // repeated .NationalCash nationalCashs = 3;
      case 3: {
        if (tag == 26) {
         parse_nationalCashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nationalcashs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nationalCashs;
        if (input->ExpectTag(34)) goto parse_nationalItems;
        break;
      }

      // repeated .NationalItem nationalItems = 4;
      case 4: {
        if (tag == 34) {
         parse_nationalItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nationalitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nationalItems;
        if (input->ExpectTag(42)) goto parse_nationalRanks;
        break;
      }

      // repeated .NationalRank nationalRanks = 5;
      case 5: {
        if (tag == 42) {
         parse_nationalRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nationalranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nationalRanks;
        if (input->ExpectTag(50)) goto parse_nationalInfos;
        break;
      }

      // optional .NationalInfo nationalInfos = 6;
      case 6: {
        if (tag == 50) {
         parse_nationalInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nationalinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiples;
        break;
      }

      // repeated int32 multiples = 7;
      case 7: {
        if (tag == 56) {
         parse_multiples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_multiples())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multiples())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_multiples;
        if (input->ExpectTag(64)) goto parse_actType;
        break;
      }

      // optional int32 actType = 8;
      case 8: {
        if (tag == 64) {
         parse_actType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_caption;
        break;
      }

      // optional string caption = 9;
      case 9: {
        if (tag == 74) {
         parse_caption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption().data(), this->caption().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caption");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_listNum;
        break;
      }

      // optional string listNum = 10;
      case 10: {
        if (tag == 82) {
         parse_listNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listnum().data(), this->listnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "listnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCNationalOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCNationalOperateResult)
  return false;
#undef DO_
}

void GCNationalOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCNationalOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate(), output);
  }

  // repeated .NationalReward nationalRewards = 2;
  for (int i = 0; i < this->nationalrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nationalrewards(i), output);
  }

  // repeated .NationalCash nationalCashs = 3;
  for (int i = 0; i < this->nationalcashs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nationalcashs(i), output);
  }

  // repeated .NationalItem nationalItems = 4;
  for (int i = 0; i < this->nationalitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nationalitems(i), output);
  }

  // repeated .NationalRank nationalRanks = 5;
  for (int i = 0; i < this->nationalranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nationalranks(i), output);
  }

  // optional .NationalInfo nationalInfos = 6;
  if (has_nationalinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nationalinfos(), output);
  }

  // repeated int32 multiples = 7;
  for (int i = 0; i < this->multiples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->multiples(i), output);
  }

  // optional int32 actType = 8;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->acttype(), output);
  }

  // optional string caption = 9;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->caption(), output);
  }

  // optional string listNum = 10;
  if (has_listnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listnum().data(), this->listnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->listnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCNationalOperateResult)
}

::google::protobuf::uint8* GCNationalOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCNationalOperateResult)
  // optional int32 operate = 1;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate(), target);
  }

  // repeated .NationalReward nationalRewards = 2;
  for (int i = 0; i < this->nationalrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nationalrewards(i), target);
  }

  // repeated .NationalCash nationalCashs = 3;
  for (int i = 0; i < this->nationalcashs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->nationalcashs(i), target);
  }

  // repeated .NationalItem nationalItems = 4;
  for (int i = 0; i < this->nationalitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nationalitems(i), target);
  }

  // repeated .NationalRank nationalRanks = 5;
  for (int i = 0; i < this->nationalranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nationalranks(i), target);
  }

  // optional .NationalInfo nationalInfos = 6;
  if (has_nationalinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nationalinfos(), target);
  }

  // repeated int32 multiples = 7;
  for (int i = 0; i < this->multiples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->multiples(i), target);
  }

  // optional int32 actType = 8;
  if (has_acttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->acttype(), target);
  }

  // optional string caption = 9;
  if (has_caption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), this->caption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->caption(), target);
  }

  // optional string listNum = 10;
  if (has_listnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listnum().data(), this->listnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "listnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->listnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCNationalOperateResult)
  return target;
}

int GCNationalOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 operate = 1;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate());
    }

    // optional .NationalInfo nationalInfos = 6;
    if (has_nationalinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nationalinfos());
    }

    // optional int32 actType = 8;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acttype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string caption = 9;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string listNum = 10;
    if (has_listnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listnum());
    }

  }
  // repeated .NationalReward nationalRewards = 2;
  total_size += 1 * this->nationalrewards_size();
  for (int i = 0; i < this->nationalrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nationalrewards(i));
  }

  // repeated .NationalCash nationalCashs = 3;
  total_size += 1 * this->nationalcashs_size();
  for (int i = 0; i < this->nationalcashs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nationalcashs(i));
  }

  // repeated .NationalItem nationalItems = 4;
  total_size += 1 * this->nationalitems_size();
  for (int i = 0; i < this->nationalitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nationalitems(i));
  }

  // repeated .NationalRank nationalRanks = 5;
  total_size += 1 * this->nationalranks_size();
  for (int i = 0; i < this->nationalranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nationalranks(i));
  }

  // repeated int32 multiples = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->multiples_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multiples(i));
    }
    total_size += 1 * this->multiples_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCNationalOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCNationalOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCNationalOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCNationalOperateResult::MergeFrom(const GCNationalOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  nationalrewards_.MergeFrom(from.nationalrewards_);
  nationalcashs_.MergeFrom(from.nationalcashs_);
  nationalitems_.MergeFrom(from.nationalitems_);
  nationalranks_.MergeFrom(from.nationalranks_);
  multiples_.MergeFrom(from.multiples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate()) {
      set_operate(from.operate());
    }
    if (from.has_nationalinfos()) {
      mutable_nationalinfos()->::NationalInfo::MergeFrom(from.nationalinfos());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_caption()) {
      set_caption(from.caption());
    }
    if (from.has_listnum()) {
      set_listnum(from.listnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCNationalOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCNationalOperateResult::CopyFrom(const GCNationalOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNationalOperateResult::IsInitialized() const {

  return true;
}

void GCNationalOperateResult::Swap(GCNationalOperateResult* other) {
  if (other != this) {
    std::swap(operate_, other->operate_);
    nationalrewards_.Swap(&other->nationalrewards_);
    nationalcashs_.Swap(&other->nationalcashs_);
    nationalitems_.Swap(&other->nationalitems_);
    nationalranks_.Swap(&other->nationalranks_);
    std::swap(nationalinfos_, other->nationalinfos_);
    multiples_.Swap(&other->multiples_);
    std::swap(acttype_, other->acttype_);
    std::swap(caption_, other->caption_);
    std::swap(listnum_, other->listnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCNationalOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCNationalOperateResult_descriptor_;
  metadata.reflection = GCNationalOperateResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
