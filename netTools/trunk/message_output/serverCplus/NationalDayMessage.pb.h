// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NationalDayMessage.proto

#ifndef PROTOBUF_NationalDayMessage_2eproto__INCLUDED
#define PROTOBUF_NationalDayMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NationalDayMessage_2eproto();
void protobuf_AssignDesc_NationalDayMessage_2eproto();
void protobuf_ShutdownFile_NationalDayMessage_2eproto();

class NationalReward;
class NationalCash;
class NationalItem;
class NationalRank;
class NationalInfo;
class CGNationalOperate;
class GCNationalOperateResult;

// ===================================================================

class NationalReward : public ::google::protobuf::Message {
 public:
  NationalReward();
  virtual ~NationalReward();

  NationalReward(const NationalReward& from);

  inline NationalReward& operator=(const NationalReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalReward& default_instance();

  void Swap(NationalReward* other);

  // implements Message ----------------------------------------------

  NationalReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalReward& from);
  void MergeFrom(const NationalReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:NationalReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reward_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static NationalReward* default_instance_;
};
// -------------------------------------------------------------------

class NationalCash : public ::google::protobuf::Message {
 public:
  NationalCash();
  virtual ~NationalCash();

  NationalCash(const NationalCash& from);

  inline NationalCash& operator=(const NationalCash& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalCash& default_instance();

  void Swap(NationalCash* other);

  // implements Message ----------------------------------------------

  NationalCash* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalCash& from);
  void MergeFrom(const NationalCash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional string reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:NationalCash)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 points_;
  ::std::string* reward_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static NationalCash* default_instance_;
};
// -------------------------------------------------------------------

class NationalItem : public ::google::protobuf::Message {
 public:
  NationalItem();
  virtual ~NationalItem();

  NationalItem(const NationalItem& from);

  inline NationalItem& operator=(const NationalItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalItem& default_instance();

  void Swap(NationalItem* other);

  // implements Message ----------------------------------------------

  NationalItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalItem& from);
  void MergeFrom(const NationalItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional string itemInfo = 3;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 3;
  inline const ::std::string& iteminfo() const;
  inline void set_iteminfo(const ::std::string& value);
  inline void set_iteminfo(const char* value);
  inline void set_iteminfo(const char* value, size_t size);
  inline ::std::string* mutable_iteminfo();
  inline ::std::string* release_iteminfo();
  inline void set_allocated_iteminfo(::std::string* iteminfo);

  // @@protoc_insertion_point(class_scope:NationalItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 points_;
  ::std::string* iteminfo_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static NationalItem* default_instance_;
};
// -------------------------------------------------------------------

class NationalRank : public ::google::protobuf::Message {
 public:
  NationalRank();
  virtual ~NationalRank();

  NationalRank(const NationalRank& from);

  inline NationalRank& operator=(const NationalRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalRank& default_instance();

  void Swap(NationalRank* other);

  // implements Message ----------------------------------------------

  NationalRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalRank& from);
  void MergeFrom(const NationalRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 points = 3;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // optional int64 playerID = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 4;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NationalRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* playername_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 points_;
  ::google::protobuf::int64 playerid_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static NationalRank* default_instance_;
};
// -------------------------------------------------------------------

class NationalInfo : public ::google::protobuf::Message {
 public:
  NationalInfo();
  virtual ~NationalInfo();

  NationalInfo(const NationalInfo& from);

  inline NationalInfo& operator=(const NationalInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NationalInfo& default_instance();

  void Swap(NationalInfo* other);

  // implements Message ----------------------------------------------

  NationalInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NationalInfo& from);
  void MergeFrom(const NationalInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 totalPoints = 1;
  inline bool has_totalpoints() const;
  inline void clear_totalpoints();
  static const int kTotalPointsFieldNumber = 1;
  inline ::google::protobuf::int32 totalpoints() const;
  inline void set_totalpoints(::google::protobuf::int32 value);

  // optional int32 dailyPoints = 2;
  inline bool has_dailypoints() const;
  inline void clear_dailypoints();
  static const int kDailyPointsFieldNumber = 2;
  inline ::google::protobuf::int32 dailypoints() const;
  inline void set_dailypoints(::google::protobuf::int32 value);

  // repeated int32 cashs = 3;
  inline int cashs_size() const;
  inline void clear_cashs();
  static const int kCashsFieldNumber = 3;
  inline ::google::protobuf::int32 cashs(int index) const;
  inline void set_cashs(int index, ::google::protobuf::int32 value);
  inline void add_cashs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cashs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cashs();

  // optional int32 baseHate = 4;
  inline bool has_basehate() const;
  inline void clear_basehate();
  static const int kBaseHateFieldNumber = 4;
  inline ::google::protobuf::int32 basehate() const;
  inline void set_basehate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NationalInfo)
 private:
  inline void set_has_totalpoints();
  inline void clear_has_totalpoints();
  inline void set_has_dailypoints();
  inline void clear_has_dailypoints();
  inline void set_has_basehate();
  inline void clear_has_basehate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 totalpoints_;
  ::google::protobuf::int32 dailypoints_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cashs_;
  ::google::protobuf::int32 basehate_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static NationalInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGNationalOperate : public ::google::protobuf::Message {
 public:
  CGNationalOperate();
  virtual ~CGNationalOperate();

  CGNationalOperate(const CGNationalOperate& from);

  inline CGNationalOperate& operator=(const CGNationalOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGNationalOperate& default_instance();

  void Swap(CGNationalOperate* other);

  // implements Message ----------------------------------------------

  CGNationalOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGNationalOperate& from);
  void MergeFrom(const CGNationalOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // optional int32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGNationalOperate)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static CGNationalOperate* default_instance_;
};
// -------------------------------------------------------------------

class GCNationalOperateResult : public ::google::protobuf::Message {
 public:
  GCNationalOperateResult();
  virtual ~GCNationalOperateResult();

  GCNationalOperateResult(const GCNationalOperateResult& from);

  inline GCNationalOperateResult& operator=(const GCNationalOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCNationalOperateResult& default_instance();

  void Swap(GCNationalOperateResult* other);

  // implements Message ----------------------------------------------

  GCNationalOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCNationalOperateResult& from);
  void MergeFrom(const GCNationalOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline ::google::protobuf::int32 operate() const;
  inline void set_operate(::google::protobuf::int32 value);

  // repeated .NationalReward nationalRewards = 2;
  inline int nationalrewards_size() const;
  inline void clear_nationalrewards();
  static const int kNationalRewardsFieldNumber = 2;
  inline const ::NationalReward& nationalrewards(int index) const;
  inline ::NationalReward* mutable_nationalrewards(int index);
  inline ::NationalReward* add_nationalrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::NationalReward >&
      nationalrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::NationalReward >*
      mutable_nationalrewards();

  // repeated .NationalCash nationalCashs = 3;
  inline int nationalcashs_size() const;
  inline void clear_nationalcashs();
  static const int kNationalCashsFieldNumber = 3;
  inline const ::NationalCash& nationalcashs(int index) const;
  inline ::NationalCash* mutable_nationalcashs(int index);
  inline ::NationalCash* add_nationalcashs();
  inline const ::google::protobuf::RepeatedPtrField< ::NationalCash >&
      nationalcashs() const;
  inline ::google::protobuf::RepeatedPtrField< ::NationalCash >*
      mutable_nationalcashs();

  // repeated .NationalItem nationalItems = 4;
  inline int nationalitems_size() const;
  inline void clear_nationalitems();
  static const int kNationalItemsFieldNumber = 4;
  inline const ::NationalItem& nationalitems(int index) const;
  inline ::NationalItem* mutable_nationalitems(int index);
  inline ::NationalItem* add_nationalitems();
  inline const ::google::protobuf::RepeatedPtrField< ::NationalItem >&
      nationalitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::NationalItem >*
      mutable_nationalitems();

  // repeated .NationalRank nationalRanks = 5;
  inline int nationalranks_size() const;
  inline void clear_nationalranks();
  static const int kNationalRanksFieldNumber = 5;
  inline const ::NationalRank& nationalranks(int index) const;
  inline ::NationalRank* mutable_nationalranks(int index);
  inline ::NationalRank* add_nationalranks();
  inline const ::google::protobuf::RepeatedPtrField< ::NationalRank >&
      nationalranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::NationalRank >*
      mutable_nationalranks();

  // optional .NationalInfo nationalInfos = 6;
  inline bool has_nationalinfos() const;
  inline void clear_nationalinfos();
  static const int kNationalInfosFieldNumber = 6;
  inline const ::NationalInfo& nationalinfos() const;
  inline ::NationalInfo* mutable_nationalinfos();
  inline ::NationalInfo* release_nationalinfos();
  inline void set_allocated_nationalinfos(::NationalInfo* nationalinfos);

  // repeated int32 multiples = 7;
  inline int multiples_size() const;
  inline void clear_multiples();
  static const int kMultiplesFieldNumber = 7;
  inline ::google::protobuf::int32 multiples(int index) const;
  inline void set_multiples(int index, ::google::protobuf::int32 value);
  inline void add_multiples(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      multiples() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_multiples();

  // optional int32 actType = 8;
  inline bool has_acttype() const;
  inline void clear_acttype();
  static const int kActTypeFieldNumber = 8;
  inline ::google::protobuf::int32 acttype() const;
  inline void set_acttype(::google::protobuf::int32 value);

  // optional string caption = 9;
  inline bool has_caption() const;
  inline void clear_caption();
  static const int kCaptionFieldNumber = 9;
  inline const ::std::string& caption() const;
  inline void set_caption(const ::std::string& value);
  inline void set_caption(const char* value);
  inline void set_caption(const char* value, size_t size);
  inline ::std::string* mutable_caption();
  inline ::std::string* release_caption();
  inline void set_allocated_caption(::std::string* caption);

  // optional string listNum = 10;
  inline bool has_listnum() const;
  inline void clear_listnum();
  static const int kListNumFieldNumber = 10;
  inline const ::std::string& listnum() const;
  inline void set_listnum(const ::std::string& value);
  inline void set_listnum(const char* value);
  inline void set_listnum(const char* value, size_t size);
  inline ::std::string* mutable_listnum();
  inline ::std::string* release_listnum();
  inline void set_allocated_listnum(::std::string* listnum);

  // @@protoc_insertion_point(class_scope:GCNationalOperateResult)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_nationalinfos();
  inline void clear_has_nationalinfos();
  inline void set_has_acttype();
  inline void clear_has_acttype();
  inline void set_has_caption();
  inline void clear_has_caption();
  inline void set_has_listnum();
  inline void clear_has_listnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NationalReward > nationalrewards_;
  ::google::protobuf::RepeatedPtrField< ::NationalCash > nationalcashs_;
  ::google::protobuf::RepeatedPtrField< ::NationalItem > nationalitems_;
  ::google::protobuf::int32 operate_;
  ::google::protobuf::int32 acttype_;
  ::google::protobuf::RepeatedPtrField< ::NationalRank > nationalranks_;
  ::NationalInfo* nationalinfos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > multiples_;
  ::std::string* caption_;
  ::std::string* listnum_;
  friend void  protobuf_AddDesc_NationalDayMessage_2eproto();
  friend void protobuf_AssignDesc_NationalDayMessage_2eproto();
  friend void protobuf_ShutdownFile_NationalDayMessage_2eproto();

  void InitAsDefaultInstance();
  static GCNationalOperateResult* default_instance_;
};
// ===================================================================


// ===================================================================

// NationalReward

// optional int32 id = 1;
inline bool NationalReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NationalReward::id() const {
  // @@protoc_insertion_point(field_get:NationalReward.id)
  return id_;
}
inline void NationalReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NationalReward.id)
}

// optional string reward = 2;
inline bool NationalReward::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalReward::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalReward::clear_reward() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& NationalReward::reward() const {
  // @@protoc_insertion_point(field_get:NationalReward.reward)
  return *reward_;
}
inline void NationalReward::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set:NationalReward.reward)
}
inline void NationalReward::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set_char:NationalReward.reward)
}
inline void NationalReward::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NationalReward.reward)
}
inline ::std::string* NationalReward::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NationalReward.reward)
  return reward_;
}
inline ::std::string* NationalReward::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalReward::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NationalReward.reward)
}

// -------------------------------------------------------------------

// NationalCash

// optional int32 id = 1;
inline bool NationalCash::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalCash::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalCash::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalCash::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NationalCash::id() const {
  // @@protoc_insertion_point(field_get:NationalCash.id)
  return id_;
}
inline void NationalCash::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NationalCash.id)
}

// optional int32 points = 2;
inline bool NationalCash::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalCash::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalCash::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalCash::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 NationalCash::points() const {
  // @@protoc_insertion_point(field_get:NationalCash.points)
  return points_;
}
inline void NationalCash::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:NationalCash.points)
}

// optional string reward = 3;
inline bool NationalCash::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NationalCash::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NationalCash::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NationalCash::clear_reward() {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& NationalCash::reward() const {
  // @@protoc_insertion_point(field_get:NationalCash.reward)
  return *reward_;
}
inline void NationalCash::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set:NationalCash.reward)
}
inline void NationalCash::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
  // @@protoc_insertion_point(field_set_char:NationalCash.reward)
}
inline void NationalCash::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NationalCash.reward)
}
inline ::std::string* NationalCash::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reward_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NationalCash.reward)
  return reward_;
}
inline ::std::string* NationalCash::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalCash::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NationalCash.reward)
}

// -------------------------------------------------------------------

// NationalItem

// optional int32 id = 1;
inline bool NationalItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NationalItem::id() const {
  // @@protoc_insertion_point(field_get:NationalItem.id)
  return id_;
}
inline void NationalItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NationalItem.id)
}

// optional int32 points = 2;
inline bool NationalItem::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalItem::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalItem::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalItem::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 NationalItem::points() const {
  // @@protoc_insertion_point(field_get:NationalItem.points)
  return points_;
}
inline void NationalItem::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:NationalItem.points)
}

// optional string itemInfo = 3;
inline bool NationalItem::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NationalItem::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NationalItem::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NationalItem::clear_iteminfo() {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_->clear();
  }
  clear_has_iteminfo();
}
inline const ::std::string& NationalItem::iteminfo() const {
  // @@protoc_insertion_point(field_get:NationalItem.itemInfo)
  return *iteminfo_;
}
inline void NationalItem::set_iteminfo(const ::std::string& value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set:NationalItem.itemInfo)
}
inline void NationalItem::set_iteminfo(const char* value) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:NationalItem.itemInfo)
}
inline void NationalItem::set_iteminfo(const char* value, size_t size) {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  iteminfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NationalItem.itemInfo)
}
inline ::std::string* NationalItem::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iteminfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NationalItem.itemInfo)
  return iteminfo_;
}
inline ::std::string* NationalItem::release_iteminfo() {
  clear_has_iteminfo();
  if (iteminfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iteminfo_;
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalItem::set_allocated_iteminfo(::std::string* iteminfo) {
  if (iteminfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iteminfo_;
  }
  if (iteminfo) {
    set_has_iteminfo();
    iteminfo_ = iteminfo;
  } else {
    clear_has_iteminfo();
    iteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NationalItem.itemInfo)
}

// -------------------------------------------------------------------

// NationalRank

// optional int32 rank = 1;
inline bool NationalRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 NationalRank::rank() const {
  // @@protoc_insertion_point(field_get:NationalRank.rank)
  return rank_;
}
inline void NationalRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:NationalRank.rank)
}

// optional string playerName = 2;
inline bool NationalRank::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalRank::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalRank::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalRank::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& NationalRank::playername() const {
  // @@protoc_insertion_point(field_get:NationalRank.playerName)
  return *playername_;
}
inline void NationalRank::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:NationalRank.playerName)
}
inline void NationalRank::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:NationalRank.playerName)
}
inline void NationalRank::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NationalRank.playerName)
}
inline ::std::string* NationalRank::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NationalRank.playerName)
  return playername_;
}
inline ::std::string* NationalRank::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NationalRank::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NationalRank.playerName)
}

// optional int32 points = 3;
inline bool NationalRank::has_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NationalRank::set_has_points() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NationalRank::clear_has_points() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NationalRank::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 NationalRank::points() const {
  // @@protoc_insertion_point(field_get:NationalRank.points)
  return points_;
}
inline void NationalRank::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:NationalRank.points)
}

// optional int64 playerID = 4;
inline bool NationalRank::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NationalRank::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NationalRank::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NationalRank::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 NationalRank::playerid() const {
  // @@protoc_insertion_point(field_get:NationalRank.playerID)
  return playerid_;
}
inline void NationalRank::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:NationalRank.playerID)
}

// -------------------------------------------------------------------

// NationalInfo

// optional int32 totalPoints = 1;
inline bool NationalInfo::has_totalpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NationalInfo::set_has_totalpoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NationalInfo::clear_has_totalpoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NationalInfo::clear_totalpoints() {
  totalpoints_ = 0;
  clear_has_totalpoints();
}
inline ::google::protobuf::int32 NationalInfo::totalpoints() const {
  // @@protoc_insertion_point(field_get:NationalInfo.totalPoints)
  return totalpoints_;
}
inline void NationalInfo::set_totalpoints(::google::protobuf::int32 value) {
  set_has_totalpoints();
  totalpoints_ = value;
  // @@protoc_insertion_point(field_set:NationalInfo.totalPoints)
}

// optional int32 dailyPoints = 2;
inline bool NationalInfo::has_dailypoints() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NationalInfo::set_has_dailypoints() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NationalInfo::clear_has_dailypoints() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NationalInfo::clear_dailypoints() {
  dailypoints_ = 0;
  clear_has_dailypoints();
}
inline ::google::protobuf::int32 NationalInfo::dailypoints() const {
  // @@protoc_insertion_point(field_get:NationalInfo.dailyPoints)
  return dailypoints_;
}
inline void NationalInfo::set_dailypoints(::google::protobuf::int32 value) {
  set_has_dailypoints();
  dailypoints_ = value;
  // @@protoc_insertion_point(field_set:NationalInfo.dailyPoints)
}

// repeated int32 cashs = 3;
inline int NationalInfo::cashs_size() const {
  return cashs_.size();
}
inline void NationalInfo::clear_cashs() {
  cashs_.Clear();
}
inline ::google::protobuf::int32 NationalInfo::cashs(int index) const {
  // @@protoc_insertion_point(field_get:NationalInfo.cashs)
  return cashs_.Get(index);
}
inline void NationalInfo::set_cashs(int index, ::google::protobuf::int32 value) {
  cashs_.Set(index, value);
  // @@protoc_insertion_point(field_set:NationalInfo.cashs)
}
inline void NationalInfo::add_cashs(::google::protobuf::int32 value) {
  cashs_.Add(value);
  // @@protoc_insertion_point(field_add:NationalInfo.cashs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NationalInfo::cashs() const {
  // @@protoc_insertion_point(field_list:NationalInfo.cashs)
  return cashs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NationalInfo::mutable_cashs() {
  // @@protoc_insertion_point(field_mutable_list:NationalInfo.cashs)
  return &cashs_;
}

// optional int32 baseHate = 4;
inline bool NationalInfo::has_basehate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NationalInfo::set_has_basehate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NationalInfo::clear_has_basehate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NationalInfo::clear_basehate() {
  basehate_ = 0;
  clear_has_basehate();
}
inline ::google::protobuf::int32 NationalInfo::basehate() const {
  // @@protoc_insertion_point(field_get:NationalInfo.baseHate)
  return basehate_;
}
inline void NationalInfo::set_basehate(::google::protobuf::int32 value) {
  set_has_basehate();
  basehate_ = value;
  // @@protoc_insertion_point(field_set:NationalInfo.baseHate)
}

// -------------------------------------------------------------------

// CGNationalOperate

// optional int32 operate = 1;
inline bool CGNationalOperate::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGNationalOperate::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGNationalOperate::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGNationalOperate::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 CGNationalOperate::operate() const {
  // @@protoc_insertion_point(field_get:CGNationalOperate.operate)
  return operate_;
}
inline void CGNationalOperate::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:CGNationalOperate.operate)
}

// optional int32 itemID = 2;
inline bool CGNationalOperate::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGNationalOperate::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGNationalOperate::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGNationalOperate::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 CGNationalOperate::itemid() const {
  // @@protoc_insertion_point(field_get:CGNationalOperate.itemID)
  return itemid_;
}
inline void CGNationalOperate::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:CGNationalOperate.itemID)
}

// optional int32 num = 3;
inline bool CGNationalOperate::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGNationalOperate::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGNationalOperate::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGNationalOperate::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 CGNationalOperate::num() const {
  // @@protoc_insertion_point(field_get:CGNationalOperate.num)
  return num_;
}
inline void CGNationalOperate::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:CGNationalOperate.num)
}

// -------------------------------------------------------------------

// GCNationalOperateResult

// optional int32 operate = 1;
inline bool GCNationalOperateResult::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCNationalOperateResult::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCNationalOperateResult::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCNationalOperateResult::clear_operate() {
  operate_ = 0;
  clear_has_operate();
}
inline ::google::protobuf::int32 GCNationalOperateResult::operate() const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.operate)
  return operate_;
}
inline void GCNationalOperateResult::set_operate(::google::protobuf::int32 value) {
  set_has_operate();
  operate_ = value;
  // @@protoc_insertion_point(field_set:GCNationalOperateResult.operate)
}

// repeated .NationalReward nationalRewards = 2;
inline int GCNationalOperateResult::nationalrewards_size() const {
  return nationalrewards_.size();
}
inline void GCNationalOperateResult::clear_nationalrewards() {
  nationalrewards_.Clear();
}
inline const ::NationalReward& GCNationalOperateResult::nationalrewards(int index) const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.nationalRewards)
  return nationalrewards_.Get(index);
}
inline ::NationalReward* GCNationalOperateResult::mutable_nationalrewards(int index) {
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.nationalRewards)
  return nationalrewards_.Mutable(index);
}
inline ::NationalReward* GCNationalOperateResult::add_nationalrewards() {
  // @@protoc_insertion_point(field_add:GCNationalOperateResult.nationalRewards)
  return nationalrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NationalReward >&
GCNationalOperateResult::nationalrewards() const {
  // @@protoc_insertion_point(field_list:GCNationalOperateResult.nationalRewards)
  return nationalrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::NationalReward >*
GCNationalOperateResult::mutable_nationalrewards() {
  // @@protoc_insertion_point(field_mutable_list:GCNationalOperateResult.nationalRewards)
  return &nationalrewards_;
}

// repeated .NationalCash nationalCashs = 3;
inline int GCNationalOperateResult::nationalcashs_size() const {
  return nationalcashs_.size();
}
inline void GCNationalOperateResult::clear_nationalcashs() {
  nationalcashs_.Clear();
}
inline const ::NationalCash& GCNationalOperateResult::nationalcashs(int index) const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.nationalCashs)
  return nationalcashs_.Get(index);
}
inline ::NationalCash* GCNationalOperateResult::mutable_nationalcashs(int index) {
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.nationalCashs)
  return nationalcashs_.Mutable(index);
}
inline ::NationalCash* GCNationalOperateResult::add_nationalcashs() {
  // @@protoc_insertion_point(field_add:GCNationalOperateResult.nationalCashs)
  return nationalcashs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NationalCash >&
GCNationalOperateResult::nationalcashs() const {
  // @@protoc_insertion_point(field_list:GCNationalOperateResult.nationalCashs)
  return nationalcashs_;
}
inline ::google::protobuf::RepeatedPtrField< ::NationalCash >*
GCNationalOperateResult::mutable_nationalcashs() {
  // @@protoc_insertion_point(field_mutable_list:GCNationalOperateResult.nationalCashs)
  return &nationalcashs_;
}

// repeated .NationalItem nationalItems = 4;
inline int GCNationalOperateResult::nationalitems_size() const {
  return nationalitems_.size();
}
inline void GCNationalOperateResult::clear_nationalitems() {
  nationalitems_.Clear();
}
inline const ::NationalItem& GCNationalOperateResult::nationalitems(int index) const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.nationalItems)
  return nationalitems_.Get(index);
}
inline ::NationalItem* GCNationalOperateResult::mutable_nationalitems(int index) {
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.nationalItems)
  return nationalitems_.Mutable(index);
}
inline ::NationalItem* GCNationalOperateResult::add_nationalitems() {
  // @@protoc_insertion_point(field_add:GCNationalOperateResult.nationalItems)
  return nationalitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NationalItem >&
GCNationalOperateResult::nationalitems() const {
  // @@protoc_insertion_point(field_list:GCNationalOperateResult.nationalItems)
  return nationalitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::NationalItem >*
GCNationalOperateResult::mutable_nationalitems() {
  // @@protoc_insertion_point(field_mutable_list:GCNationalOperateResult.nationalItems)
  return &nationalitems_;
}

// repeated .NationalRank nationalRanks = 5;
inline int GCNationalOperateResult::nationalranks_size() const {
  return nationalranks_.size();
}
inline void GCNationalOperateResult::clear_nationalranks() {
  nationalranks_.Clear();
}
inline const ::NationalRank& GCNationalOperateResult::nationalranks(int index) const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.nationalRanks)
  return nationalranks_.Get(index);
}
inline ::NationalRank* GCNationalOperateResult::mutable_nationalranks(int index) {
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.nationalRanks)
  return nationalranks_.Mutable(index);
}
inline ::NationalRank* GCNationalOperateResult::add_nationalranks() {
  // @@protoc_insertion_point(field_add:GCNationalOperateResult.nationalRanks)
  return nationalranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NationalRank >&
GCNationalOperateResult::nationalranks() const {
  // @@protoc_insertion_point(field_list:GCNationalOperateResult.nationalRanks)
  return nationalranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::NationalRank >*
GCNationalOperateResult::mutable_nationalranks() {
  // @@protoc_insertion_point(field_mutable_list:GCNationalOperateResult.nationalRanks)
  return &nationalranks_;
}

// optional .NationalInfo nationalInfos = 6;
inline bool GCNationalOperateResult::has_nationalinfos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCNationalOperateResult::set_has_nationalinfos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCNationalOperateResult::clear_has_nationalinfos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCNationalOperateResult::clear_nationalinfos() {
  if (nationalinfos_ != NULL) nationalinfos_->::NationalInfo::Clear();
  clear_has_nationalinfos();
}
inline const ::NationalInfo& GCNationalOperateResult::nationalinfos() const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.nationalInfos)
  return nationalinfos_ != NULL ? *nationalinfos_ : *default_instance_->nationalinfos_;
}
inline ::NationalInfo* GCNationalOperateResult::mutable_nationalinfos() {
  set_has_nationalinfos();
  if (nationalinfos_ == NULL) nationalinfos_ = new ::NationalInfo;
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.nationalInfos)
  return nationalinfos_;
}
inline ::NationalInfo* GCNationalOperateResult::release_nationalinfos() {
  clear_has_nationalinfos();
  ::NationalInfo* temp = nationalinfos_;
  nationalinfos_ = NULL;
  return temp;
}
inline void GCNationalOperateResult::set_allocated_nationalinfos(::NationalInfo* nationalinfos) {
  delete nationalinfos_;
  nationalinfos_ = nationalinfos;
  if (nationalinfos) {
    set_has_nationalinfos();
  } else {
    clear_has_nationalinfos();
  }
  // @@protoc_insertion_point(field_set_allocated:GCNationalOperateResult.nationalInfos)
}

// repeated int32 multiples = 7;
inline int GCNationalOperateResult::multiples_size() const {
  return multiples_.size();
}
inline void GCNationalOperateResult::clear_multiples() {
  multiples_.Clear();
}
inline ::google::protobuf::int32 GCNationalOperateResult::multiples(int index) const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.multiples)
  return multiples_.Get(index);
}
inline void GCNationalOperateResult::set_multiples(int index, ::google::protobuf::int32 value) {
  multiples_.Set(index, value);
  // @@protoc_insertion_point(field_set:GCNationalOperateResult.multiples)
}
inline void GCNationalOperateResult::add_multiples(::google::protobuf::int32 value) {
  multiples_.Add(value);
  // @@protoc_insertion_point(field_add:GCNationalOperateResult.multiples)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GCNationalOperateResult::multiples() const {
  // @@protoc_insertion_point(field_list:GCNationalOperateResult.multiples)
  return multiples_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GCNationalOperateResult::mutable_multiples() {
  // @@protoc_insertion_point(field_mutable_list:GCNationalOperateResult.multiples)
  return &multiples_;
}

// optional int32 actType = 8;
inline bool GCNationalOperateResult::has_acttype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GCNationalOperateResult::set_has_acttype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GCNationalOperateResult::clear_has_acttype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GCNationalOperateResult::clear_acttype() {
  acttype_ = 0;
  clear_has_acttype();
}
inline ::google::protobuf::int32 GCNationalOperateResult::acttype() const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.actType)
  return acttype_;
}
inline void GCNationalOperateResult::set_acttype(::google::protobuf::int32 value) {
  set_has_acttype();
  acttype_ = value;
  // @@protoc_insertion_point(field_set:GCNationalOperateResult.actType)
}

// optional string caption = 9;
inline bool GCNationalOperateResult::has_caption() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GCNationalOperateResult::set_has_caption() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GCNationalOperateResult::clear_has_caption() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GCNationalOperateResult::clear_caption() {
  if (caption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caption_->clear();
  }
  clear_has_caption();
}
inline const ::std::string& GCNationalOperateResult::caption() const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.caption)
  return *caption_;
}
inline void GCNationalOperateResult::set_caption(const ::std::string& value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
  // @@protoc_insertion_point(field_set:GCNationalOperateResult.caption)
}
inline void GCNationalOperateResult::set_caption(const char* value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCNationalOperateResult.caption)
}
inline void GCNationalOperateResult::set_caption(const char* value, size_t size) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caption_ = new ::std::string;
  }
  caption_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCNationalOperateResult.caption)
}
inline ::std::string* GCNationalOperateResult::mutable_caption() {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    caption_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.caption)
  return caption_;
}
inline ::std::string* GCNationalOperateResult::release_caption() {
  clear_has_caption();
  if (caption_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = caption_;
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCNationalOperateResult::set_allocated_caption(::std::string* caption) {
  if (caption_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caption_;
  }
  if (caption) {
    set_has_caption();
    caption_ = caption;
  } else {
    clear_has_caption();
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCNationalOperateResult.caption)
}

// optional string listNum = 10;
inline bool GCNationalOperateResult::has_listnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GCNationalOperateResult::set_has_listnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GCNationalOperateResult::clear_has_listnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GCNationalOperateResult::clear_listnum() {
  if (listnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listnum_->clear();
  }
  clear_has_listnum();
}
inline const ::std::string& GCNationalOperateResult::listnum() const {
  // @@protoc_insertion_point(field_get:GCNationalOperateResult.listNum)
  return *listnum_;
}
inline void GCNationalOperateResult::set_listnum(const ::std::string& value) {
  set_has_listnum();
  if (listnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listnum_ = new ::std::string;
  }
  listnum_->assign(value);
  // @@protoc_insertion_point(field_set:GCNationalOperateResult.listNum)
}
inline void GCNationalOperateResult::set_listnum(const char* value) {
  set_has_listnum();
  if (listnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listnum_ = new ::std::string;
  }
  listnum_->assign(value);
  // @@protoc_insertion_point(field_set_char:GCNationalOperateResult.listNum)
}
inline void GCNationalOperateResult::set_listnum(const char* value, size_t size) {
  set_has_listnum();
  if (listnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listnum_ = new ::std::string;
  }
  listnum_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GCNationalOperateResult.listNum)
}
inline ::std::string* GCNationalOperateResult::mutable_listnum() {
  set_has_listnum();
  if (listnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    listnum_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GCNationalOperateResult.listNum)
  return listnum_;
}
inline ::std::string* GCNationalOperateResult::release_listnum() {
  clear_has_listnum();
  if (listnum_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = listnum_;
    listnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GCNationalOperateResult::set_allocated_listnum(::std::string* listnum) {
  if (listnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete listnum_;
  }
  if (listnum) {
    set_has_listnum();
    listnum_ = listnum;
  } else {
    clear_has_listnum();
    listnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GCNationalOperateResult.listNum)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NationalDayMessage_2eproto__INCLUDED
