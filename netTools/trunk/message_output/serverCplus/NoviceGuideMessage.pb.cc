// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NoviceGuideMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NoviceGuideMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCNoviceGuideBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCNoviceGuideBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNoviceGuideFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNoviceGuideFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCViewMovie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCViewMovie_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGViewMovieFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGViewMovieFinish_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NoviceGuideMessage_2eproto() {
  protobuf_AddDesc_NoviceGuideMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NoviceGuideMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCNoviceGuideBack_descriptor_ = file->message_type(0);
  static const int GCNoviceGuideBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, shortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, result_),
  };
  GCNoviceGuideBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCNoviceGuideBack_descriptor_,
      GCNoviceGuideBack::default_instance_,
      GCNoviceGuideBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNoviceGuideBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCNoviceGuideBack));
  CGNoviceGuideFinish_descriptor_ = file->message_type(1);
  static const int CGNoviceGuideFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNoviceGuideFinish, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNoviceGuideFinish, shortid_),
  };
  CGNoviceGuideFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNoviceGuideFinish_descriptor_,
      CGNoviceGuideFinish::default_instance_,
      CGNoviceGuideFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNoviceGuideFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNoviceGuideFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNoviceGuideFinish));
  GCViewMovie_descriptor_ = file->message_type(2);
  static const int GCViewMovie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCViewMovie, flag_),
  };
  GCViewMovie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCViewMovie_descriptor_,
      GCViewMovie::default_instance_,
      GCViewMovie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCViewMovie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCViewMovie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCViewMovie));
  CGViewMovieFinish_descriptor_ = file->message_type(3);
  static const int CGViewMovieFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGViewMovieFinish, flag_),
  };
  CGViewMovieFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGViewMovieFinish_descriptor_,
      CGViewMovieFinish::default_instance_,
      CGViewMovieFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGViewMovieFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGViewMovieFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGViewMovieFinish));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NoviceGuideMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCNoviceGuideBack_descriptor_, &GCNoviceGuideBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNoviceGuideFinish_descriptor_, &CGNoviceGuideFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCViewMovie_descriptor_, &GCViewMovie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGViewMovieFinish_descriptor_, &CGViewMovieFinish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NoviceGuideMessage_2eproto() {
  delete GCNoviceGuideBack::default_instance_;
  delete GCNoviceGuideBack_reflection_;
  delete CGNoviceGuideFinish::default_instance_;
  delete CGNoviceGuideFinish_reflection_;
  delete GCViewMovie::default_instance_;
  delete GCViewMovie_reflection_;
  delete CGViewMovieFinish::default_instance_;
  delete CGViewMovieFinish_reflection_;
}

void protobuf_AddDesc_NoviceGuideMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030NoviceGuideMessage.proto\"V\n\021GCNoviceGu"
    "ideBack\022\022\n\nfragmentId\030\001 \001(\005\022\017\n\007shortId\030\002"
    " \001(\005\022\014\n\004type\030\003 \001(\005\022\016\n\006result\030\004 \001(\005\":\n\023CG"
    "NoviceGuideFinish\022\022\n\nfragmentId\030\001 \001(\005\022\017\n"
    "\007shortId\030\002 \001(\005\"\033\n\013GCViewMovie\022\014\n\004flag\030\001 "
    "\001(\005\"!\n\021CGViewMovieFinish\022\014\n\004flag\030\001 \001(\005B\031"
    "\n\027com.mile.common.message", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NoviceGuideMessage.proto", &protobuf_RegisterTypes);
  GCNoviceGuideBack::default_instance_ = new GCNoviceGuideBack();
  CGNoviceGuideFinish::default_instance_ = new CGNoviceGuideFinish();
  GCViewMovie::default_instance_ = new GCViewMovie();
  CGViewMovieFinish::default_instance_ = new CGViewMovieFinish();
  GCNoviceGuideBack::default_instance_->InitAsDefaultInstance();
  CGNoviceGuideFinish::default_instance_->InitAsDefaultInstance();
  GCViewMovie::default_instance_->InitAsDefaultInstance();
  CGViewMovieFinish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NoviceGuideMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NoviceGuideMessage_2eproto {
  StaticDescriptorInitializer_NoviceGuideMessage_2eproto() {
    protobuf_AddDesc_NoviceGuideMessage_2eproto();
  }
} static_descriptor_initializer_NoviceGuideMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCNoviceGuideBack::kFragmentIdFieldNumber;
const int GCNoviceGuideBack::kShortIdFieldNumber;
const int GCNoviceGuideBack::kTypeFieldNumber;
const int GCNoviceGuideBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCNoviceGuideBack::GCNoviceGuideBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCNoviceGuideBack)
}

void GCNoviceGuideBack::InitAsDefaultInstance() {
}

GCNoviceGuideBack::GCNoviceGuideBack(const GCNoviceGuideBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCNoviceGuideBack)
}

void GCNoviceGuideBack::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = 0;
  shortid_ = 0;
  type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCNoviceGuideBack::~GCNoviceGuideBack() {
  // @@protoc_insertion_point(destructor:GCNoviceGuideBack)
  SharedDtor();
}

void GCNoviceGuideBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCNoviceGuideBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCNoviceGuideBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCNoviceGuideBack_descriptor_;
}

const GCNoviceGuideBack& GCNoviceGuideBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoviceGuideMessage_2eproto();
  return *default_instance_;
}

GCNoviceGuideBack* GCNoviceGuideBack::default_instance_ = NULL;

GCNoviceGuideBack* GCNoviceGuideBack::New() const {
  return new GCNoviceGuideBack;
}

void GCNoviceGuideBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCNoviceGuideBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fragmentid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCNoviceGuideBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCNoviceGuideBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fragmentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shortId;
        break;
      }

      // optional int32 shortId = 2;
      case 2: {
        if (tag == 16) {
         parse_shortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortid_)));
          set_has_shortid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCNoviceGuideBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCNoviceGuideBack)
  return false;
#undef DO_
}

void GCNoviceGuideBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCNoviceGuideBack)
  // optional int32 fragmentId = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fragmentid(), output);
  }

  // optional int32 shortId = 2;
  if (has_shortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shortid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCNoviceGuideBack)
}

::google::protobuf::uint8* GCNoviceGuideBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCNoviceGuideBack)
  // optional int32 fragmentId = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fragmentid(), target);
  }

  // optional int32 shortId = 2;
  if (has_shortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shortid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCNoviceGuideBack)
  return target;
}

int GCNoviceGuideBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fragmentId = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentid());
    }

    // optional int32 shortId = 2;
    if (has_shortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCNoviceGuideBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCNoviceGuideBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCNoviceGuideBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCNoviceGuideBack::MergeFrom(const GCNoviceGuideBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_shortid()) {
      set_shortid(from.shortid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCNoviceGuideBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCNoviceGuideBack::CopyFrom(const GCNoviceGuideBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNoviceGuideBack::IsInitialized() const {

  return true;
}

void GCNoviceGuideBack::Swap(GCNoviceGuideBack* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(shortid_, other->shortid_);
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCNoviceGuideBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCNoviceGuideBack_descriptor_;
  metadata.reflection = GCNoviceGuideBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNoviceGuideFinish::kFragmentIdFieldNumber;
const int CGNoviceGuideFinish::kShortIdFieldNumber;
#endif  // !_MSC_VER

CGNoviceGuideFinish::CGNoviceGuideFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGNoviceGuideFinish)
}

void CGNoviceGuideFinish::InitAsDefaultInstance() {
}

CGNoviceGuideFinish::CGNoviceGuideFinish(const CGNoviceGuideFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGNoviceGuideFinish)
}

void CGNoviceGuideFinish::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = 0;
  shortid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNoviceGuideFinish::~CGNoviceGuideFinish() {
  // @@protoc_insertion_point(destructor:CGNoviceGuideFinish)
  SharedDtor();
}

void CGNoviceGuideFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNoviceGuideFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNoviceGuideFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNoviceGuideFinish_descriptor_;
}

const CGNoviceGuideFinish& CGNoviceGuideFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoviceGuideMessage_2eproto();
  return *default_instance_;
}

CGNoviceGuideFinish* CGNoviceGuideFinish::default_instance_ = NULL;

CGNoviceGuideFinish* CGNoviceGuideFinish::New() const {
  return new CGNoviceGuideFinish;
}

void CGNoviceGuideFinish::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGNoviceGuideFinish*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fragmentid_, shortid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNoviceGuideFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGNoviceGuideFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fragmentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shortId;
        break;
      }

      // optional int32 shortId = 2;
      case 2: {
        if (tag == 16) {
         parse_shortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortid_)));
          set_has_shortid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGNoviceGuideFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGNoviceGuideFinish)
  return false;
#undef DO_
}

void CGNoviceGuideFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGNoviceGuideFinish)
  // optional int32 fragmentId = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fragmentid(), output);
  }

  // optional int32 shortId = 2;
  if (has_shortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shortid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGNoviceGuideFinish)
}

::google::protobuf::uint8* CGNoviceGuideFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGNoviceGuideFinish)
  // optional int32 fragmentId = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fragmentid(), target);
  }

  // optional int32 shortId = 2;
  if (has_shortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shortid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGNoviceGuideFinish)
  return target;
}

int CGNoviceGuideFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fragmentId = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentid());
    }

    // optional int32 shortId = 2;
    if (has_shortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNoviceGuideFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNoviceGuideFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNoviceGuideFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNoviceGuideFinish::MergeFrom(const CGNoviceGuideFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_shortid()) {
      set_shortid(from.shortid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNoviceGuideFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNoviceGuideFinish::CopyFrom(const CGNoviceGuideFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNoviceGuideFinish::IsInitialized() const {

  return true;
}

void CGNoviceGuideFinish::Swap(CGNoviceGuideFinish* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(shortid_, other->shortid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNoviceGuideFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNoviceGuideFinish_descriptor_;
  metadata.reflection = CGNoviceGuideFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCViewMovie::kFlagFieldNumber;
#endif  // !_MSC_VER

GCViewMovie::GCViewMovie()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCViewMovie)
}

void GCViewMovie::InitAsDefaultInstance() {
}

GCViewMovie::GCViewMovie(const GCViewMovie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCViewMovie)
}

void GCViewMovie::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCViewMovie::~GCViewMovie() {
  // @@protoc_insertion_point(destructor:GCViewMovie)
  SharedDtor();
}

void GCViewMovie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCViewMovie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCViewMovie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCViewMovie_descriptor_;
}

const GCViewMovie& GCViewMovie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoviceGuideMessage_2eproto();
  return *default_instance_;
}

GCViewMovie* GCViewMovie::default_instance_ = NULL;

GCViewMovie* GCViewMovie::New() const {
  return new GCViewMovie;
}

void GCViewMovie::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCViewMovie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCViewMovie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCViewMovie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCViewMovie)
  return false;
#undef DO_
}

void GCViewMovie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCViewMovie)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCViewMovie)
}

::google::protobuf::uint8* GCViewMovie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCViewMovie)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCViewMovie)
  return target;
}

int GCViewMovie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCViewMovie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCViewMovie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCViewMovie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCViewMovie::MergeFrom(const GCViewMovie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCViewMovie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCViewMovie::CopyFrom(const GCViewMovie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCViewMovie::IsInitialized() const {

  return true;
}

void GCViewMovie::Swap(GCViewMovie* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCViewMovie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCViewMovie_descriptor_;
  metadata.reflection = GCViewMovie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGViewMovieFinish::kFlagFieldNumber;
#endif  // !_MSC_VER

CGViewMovieFinish::CGViewMovieFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGViewMovieFinish)
}

void CGViewMovieFinish::InitAsDefaultInstance() {
}

CGViewMovieFinish::CGViewMovieFinish(const CGViewMovieFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGViewMovieFinish)
}

void CGViewMovieFinish::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGViewMovieFinish::~CGViewMovieFinish() {
  // @@protoc_insertion_point(destructor:CGViewMovieFinish)
  SharedDtor();
}

void CGViewMovieFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGViewMovieFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGViewMovieFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGViewMovieFinish_descriptor_;
}

const CGViewMovieFinish& CGViewMovieFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NoviceGuideMessage_2eproto();
  return *default_instance_;
}

CGViewMovieFinish* CGViewMovieFinish::default_instance_ = NULL;

CGViewMovieFinish* CGViewMovieFinish::New() const {
  return new CGViewMovieFinish;
}

void CGViewMovieFinish::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGViewMovieFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGViewMovieFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGViewMovieFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGViewMovieFinish)
  return false;
#undef DO_
}

void CGViewMovieFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGViewMovieFinish)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGViewMovieFinish)
}

::google::protobuf::uint8* CGViewMovieFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGViewMovieFinish)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGViewMovieFinish)
  return target;
}

int CGViewMovieFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGViewMovieFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGViewMovieFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGViewMovieFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGViewMovieFinish::MergeFrom(const CGViewMovieFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGViewMovieFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGViewMovieFinish::CopyFrom(const CGViewMovieFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGViewMovieFinish::IsInitialized() const {

  return true;
}

void CGViewMovieFinish::Swap(CGViewMovieFinish* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGViewMovieFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGViewMovieFinish_descriptor_;
  metadata.reflection = CGViewMovieFinish_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
