// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PetMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PetMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGGetPetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetChangeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetChangeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetChangeStatusBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetChangeStatusBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetChangeNameBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetChangeNameBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetRelease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetRelease_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetReleaseBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetReleaseBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetReFreshAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetReFreshAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetReFreshAttrBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetReFreshAttrBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetCulture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetCulture_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetCultureBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetCultureBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetUpStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetUpStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetUpStarBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetUpStarBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetDeposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetDepositBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetDepositBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetStudySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetStudySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetStudySkillBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetStudySkillBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshPetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshPetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUnlockPetBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUnlockPetBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUnlockPetBagBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUnlockPetBagBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGBuyPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGBuyPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCBuyPetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCBuyPetBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLookPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLookPet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLookPetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLookPetBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdatePetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdatePetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetEmbattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetEmbattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetEmbattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetEmbattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetEmbattleBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetEmbattleBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetEmbattleAddPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetEmbattleAddPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetGoupEmbattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetGoupEmbattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetEmbattleSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetEmbattleSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetEmbattleAddPowerBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetEmbattleAddPowerBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetChangeCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetChangeCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetChangeCharacterBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetChangeCharacterBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPetSaveNewCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPetSaveNewCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPetSaveNewCharacterBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPetSaveNewCharacterBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PetMessage_2eproto() {
  protobuf_AddDesc_PetMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PetMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGGetPetList_descriptor_ = file->message_type(0);
  static const int CGGetPetList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetList, type_),
  };
  CGGetPetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPetList_descriptor_,
      CGGetPetList::default_instance_,
      CGGetPetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPetList));
  GCPetList_descriptor_ = file->message_type(1);
  static const int GCPetList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetList, petbagnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetList, petinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetList, petid_),
  };
  GCPetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetList_descriptor_,
      GCPetList::default_instance_,
      GCPetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetList));
  CGPetChangeStatus_descriptor_ = file->message_type(2);
  static const int CGPetChangeStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeStatus, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeStatus, battleflag_),
  };
  CGPetChangeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetChangeStatus_descriptor_,
      CGPetChangeStatus::default_instance_,
      CGPetChangeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetChangeStatus));
  GCPetChangeStatusBack_descriptor_ = file->message_type(3);
  static const int GCPetChangeStatusBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeStatusBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeStatusBack, objid_),
  };
  GCPetChangeStatusBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetChangeStatusBack_descriptor_,
      GCPetChangeStatusBack::default_instance_,
      GCPetChangeStatusBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeStatusBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeStatusBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetChangeStatusBack));
  CGPetChangeName_descriptor_ = file->message_type(4);
  static const int CGPetChangeName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeName, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeName, petname_),
  };
  CGPetChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetChangeName_descriptor_,
      CGPetChangeName::default_instance_,
      CGPetChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetChangeName));
  GCPetChangeNameBack_descriptor_ = file->message_type(5);
  static const int GCPetChangeNameBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeNameBack, flag_),
  };
  GCPetChangeNameBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetChangeNameBack_descriptor_,
      GCPetChangeNameBack::default_instance_,
      GCPetChangeNameBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeNameBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeNameBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetChangeNameBack));
  CGPetRelease_descriptor_ = file->message_type(6);
  static const int CGPetRelease_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetRelease, petid_),
  };
  CGPetRelease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetRelease_descriptor_,
      CGPetRelease::default_instance_,
      CGPetRelease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetRelease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetRelease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetRelease));
  GCPetReleaseBack_descriptor_ = file->message_type(7);
  static const int GCPetReleaseBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReleaseBack, flag_),
  };
  GCPetReleaseBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetReleaseBack_descriptor_,
      GCPetReleaseBack::default_instance_,
      GCPetReleaseBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReleaseBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReleaseBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetReleaseBack));
  CGPetReFreshAttr_descriptor_ = file->message_type(8);
  static const int CGPetReFreshAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetReFreshAttr, petid_),
  };
  CGPetReFreshAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetReFreshAttr_descriptor_,
      CGPetReFreshAttr::default_instance_,
      CGPetReFreshAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetReFreshAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetReFreshAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetReFreshAttr));
  GCPetReFreshAttrBack_descriptor_ = file->message_type(9);
  static const int GCPetReFreshAttrBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReFreshAttrBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReFreshAttrBack, petinfo_),
  };
  GCPetReFreshAttrBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetReFreshAttrBack_descriptor_,
      GCPetReFreshAttrBack::default_instance_,
      GCPetReFreshAttrBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReFreshAttrBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetReFreshAttrBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetReFreshAttrBack));
  CGPetCulture_descriptor_ = file->message_type(10);
  static const int CGPetCulture_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetCulture, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetCulture, cultype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetCulture, isten_),
  };
  CGPetCulture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetCulture_descriptor_,
      CGPetCulture::default_instance_,
      CGPetCulture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetCulture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetCulture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetCulture));
  GCPetCultureBack_descriptor_ = file->message_type(11);
  static const int GCPetCultureBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetCultureBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetCultureBack, petattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetCultureBack, petattrdown_),
  };
  GCPetCultureBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetCultureBack_descriptor_,
      GCPetCultureBack::default_instance_,
      GCPetCultureBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetCultureBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetCultureBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetCultureBack));
  CGPetUpStar_descriptor_ = file->message_type(12);
  static const int CGPetUpStar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetUpStar, petid_),
  };
  CGPetUpStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetUpStar_descriptor_,
      CGPetUpStar::default_instance_,
      CGPetUpStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetUpStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetUpStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetUpStar));
  GCPetUpStarBack_descriptor_ = file->message_type(13);
  static const int GCPetUpStarBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetUpStarBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetUpStarBack, petattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetUpStarBack, petattrdown_),
  };
  GCPetUpStarBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetUpStarBack_descriptor_,
      GCPetUpStarBack::default_instance_,
      GCPetUpStarBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetUpStarBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetUpStarBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetUpStarBack));
  CGPetDeposit_descriptor_ = file->message_type(14);
  static const int CGPetDeposit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetDeposit, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetDeposit, dptype_),
  };
  CGPetDeposit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetDeposit_descriptor_,
      CGPetDeposit::default_instance_,
      CGPetDeposit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetDeposit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetDeposit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetDeposit));
  GCPetDepositBack_descriptor_ = file->message_type(15);
  static const int GCPetDepositBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetDepositBack, flag_),
  };
  GCPetDepositBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetDepositBack_descriptor_,
      GCPetDepositBack::default_instance_,
      GCPetDepositBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetDepositBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetDepositBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetDepositBack));
  CGPetStudySkill_descriptor_ = file->message_type(16);
  static const int CGPetStudySkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetStudySkill, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetStudySkill, bookid_),
  };
  CGPetStudySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetStudySkill_descriptor_,
      CGPetStudySkill::default_instance_,
      CGPetStudySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetStudySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetStudySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetStudySkill));
  GCPetStudySkillBack_descriptor_ = file->message_type(17);
  static const int GCPetStudySkillBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetStudySkillBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetStudySkillBack, skilldata_),
  };
  GCPetStudySkillBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetStudySkillBack_descriptor_,
      GCPetStudySkillBack::default_instance_,
      GCPetStudySkillBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetStudySkillBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetStudySkillBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetStudySkillBack));
  GCRefreshPetData_descriptor_ = file->message_type(18);
  static const int GCRefreshPetData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPetData, petinfo_),
  };
  GCRefreshPetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshPetData_descriptor_,
      GCRefreshPetData::default_instance_,
      GCRefreshPetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshPetData));
  CGUnlockPetBag_descriptor_ = file->message_type(19);
  static const int CGUnlockPetBag_offsets_[1] = {
  };
  CGUnlockPetBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUnlockPetBag_descriptor_,
      CGUnlockPetBag::default_instance_,
      CGUnlockPetBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUnlockPetBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUnlockPetBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUnlockPetBag));
  GCUnlockPetBagBack_descriptor_ = file->message_type(20);
  static const int GCUnlockPetBagBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUnlockPetBagBack, flag_),
  };
  GCUnlockPetBagBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUnlockPetBagBack_descriptor_,
      GCUnlockPetBagBack::default_instance_,
      GCUnlockPetBagBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUnlockPetBagBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUnlockPetBagBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUnlockPetBagBack));
  CGBuyPet_descriptor_ = file->message_type(21);
  static const int CGBuyPet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPet, shopid_),
  };
  CGBuyPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGBuyPet_descriptor_,
      CGBuyPet::default_instance_,
      CGBuyPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGBuyPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGBuyPet));
  GCBuyPetBack_descriptor_ = file->message_type(22);
  static const int GCBuyPetBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBuyPetBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBuyPetBack, petinfo_),
  };
  GCBuyPetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCBuyPetBack_descriptor_,
      GCBuyPetBack::default_instance_,
      GCBuyPetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBuyPetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCBuyPetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCBuyPetBack));
  CGLookPet_descriptor_ = file->message_type(23);
  static const int CGLookPet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPet, playeruid_),
  };
  CGLookPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLookPet_descriptor_,
      CGLookPet::default_instance_,
      CGLookPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLookPet));
  GCLookPetBack_descriptor_ = file->message_type(24);
  static const int GCLookPetBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPetBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPetBack, petinfo_),
  };
  GCLookPetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLookPetBack_descriptor_,
      GCLookPetBack::default_instance_,
      GCLookPetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLookPetBack));
  GCUpdatePetInfo_descriptor_ = file->message_type(25);
  static const int GCUpdatePetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePetInfo, petinfo_),
  };
  GCUpdatePetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdatePetInfo_descriptor_,
      GCUpdatePetInfo::default_instance_,
      GCUpdatePetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdatePetInfo));
  PetEmbattleInfo_descriptor_ = file->message_type(26);
  static const int PetEmbattleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEmbattleInfo, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEmbattleInfo, petid_),
  };
  PetEmbattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetEmbattleInfo_descriptor_,
      PetEmbattleInfo::default_instance_,
      PetEmbattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEmbattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetEmbattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetEmbattleInfo));
  CGPetEmbattle_descriptor_ = file->message_type(27);
  static const int CGPetEmbattle_offsets_[1] = {
  };
  CGPetEmbattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetEmbattle_descriptor_,
      CGPetEmbattle::default_instance_,
      CGPetEmbattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetEmbattle));
  GCPetEmbattleBack_descriptor_ = file->message_type(28);
  static const int GCPetEmbattleBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, embattleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, maxpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, skillgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, charattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, petattr_),
  };
  GCPetEmbattleBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetEmbattleBack_descriptor_,
      GCPetEmbattleBack::default_instance_,
      GCPetEmbattleBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetEmbattleBack));
  CGPetEmbattleAddPower_descriptor_ = file->message_type(29);
  static const int CGPetEmbattleAddPower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattleAddPower, autopower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattleAddPower, notusebakmoney_),
  };
  CGPetEmbattleAddPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetEmbattleAddPower_descriptor_,
      CGPetEmbattleAddPower::default_instance_,
      CGPetEmbattleAddPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattleAddPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetEmbattleAddPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetEmbattleAddPower));
  CGPetGoupEmbattle_descriptor_ = file->message_type(30);
  static const int CGPetGoupEmbattle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetGoupEmbattle, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetGoupEmbattle, petid_),
  };
  CGPetGoupEmbattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetGoupEmbattle_descriptor_,
      CGPetGoupEmbattle::default_instance_,
      CGPetGoupEmbattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetGoupEmbattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetGoupEmbattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetGoupEmbattle));
  GCPetEmbattleSkill_descriptor_ = file->message_type(31);
  static const int GCPetEmbattleSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleSkill, skilldata_),
  };
  GCPetEmbattleSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetEmbattleSkill_descriptor_,
      GCPetEmbattleSkill::default_instance_,
      GCPetEmbattleSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetEmbattleSkill));
  GCPetEmbattleAddPowerBack_descriptor_ = file->message_type(32);
  static const int GCPetEmbattleAddPowerBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleAddPowerBack, autopower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleAddPowerBack, flag_),
  };
  GCPetEmbattleAddPowerBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetEmbattleAddPowerBack_descriptor_,
      GCPetEmbattleAddPowerBack::default_instance_,
      GCPetEmbattleAddPowerBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleAddPowerBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetEmbattleAddPowerBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetEmbattleAddPowerBack));
  CGPetChangeCharacter_descriptor_ = file->message_type(33);
  static const int CGPetChangeCharacter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeCharacter, petid_),
  };
  CGPetChangeCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetChangeCharacter_descriptor_,
      CGPetChangeCharacter::default_instance_,
      CGPetChangeCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetChangeCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetChangeCharacter));
  GCPetChangeCharacterBack_descriptor_ = file->message_type(34);
  static const int GCPetChangeCharacterBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeCharacterBack, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeCharacterBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeCharacterBack, newcharacter_),
  };
  GCPetChangeCharacterBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetChangeCharacterBack_descriptor_,
      GCPetChangeCharacterBack::default_instance_,
      GCPetChangeCharacterBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeCharacterBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetChangeCharacterBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetChangeCharacterBack));
  CGPetSaveNewCharacter_descriptor_ = file->message_type(35);
  static const int CGPetSaveNewCharacter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetSaveNewCharacter, petid_),
  };
  CGPetSaveNewCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPetSaveNewCharacter_descriptor_,
      CGPetSaveNewCharacter::default_instance_,
      CGPetSaveNewCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetSaveNewCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPetSaveNewCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPetSaveNewCharacter));
  GCPetSaveNewCharacterBack_descriptor_ = file->message_type(36);
  static const int GCPetSaveNewCharacterBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetSaveNewCharacterBack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetSaveNewCharacterBack, petinfo_),
  };
  GCPetSaveNewCharacterBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPetSaveNewCharacterBack_descriptor_,
      GCPetSaveNewCharacterBack::default_instance_,
      GCPetSaveNewCharacterBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetSaveNewCharacterBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPetSaveNewCharacterBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPetSaveNewCharacterBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PetMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPetList_descriptor_, &CGGetPetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetList_descriptor_, &GCPetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetChangeStatus_descriptor_, &CGPetChangeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetChangeStatusBack_descriptor_, &GCPetChangeStatusBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetChangeName_descriptor_, &CGPetChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetChangeNameBack_descriptor_, &GCPetChangeNameBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetRelease_descriptor_, &CGPetRelease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetReleaseBack_descriptor_, &GCPetReleaseBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetReFreshAttr_descriptor_, &CGPetReFreshAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetReFreshAttrBack_descriptor_, &GCPetReFreshAttrBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetCulture_descriptor_, &CGPetCulture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetCultureBack_descriptor_, &GCPetCultureBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetUpStar_descriptor_, &CGPetUpStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetUpStarBack_descriptor_, &GCPetUpStarBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetDeposit_descriptor_, &CGPetDeposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetDepositBack_descriptor_, &GCPetDepositBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetStudySkill_descriptor_, &CGPetStudySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetStudySkillBack_descriptor_, &GCPetStudySkillBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshPetData_descriptor_, &GCRefreshPetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUnlockPetBag_descriptor_, &CGUnlockPetBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUnlockPetBagBack_descriptor_, &GCUnlockPetBagBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGBuyPet_descriptor_, &CGBuyPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCBuyPetBack_descriptor_, &GCBuyPetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLookPet_descriptor_, &CGLookPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLookPetBack_descriptor_, &GCLookPetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdatePetInfo_descriptor_, &GCUpdatePetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetEmbattleInfo_descriptor_, &PetEmbattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetEmbattle_descriptor_, &CGPetEmbattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetEmbattleBack_descriptor_, &GCPetEmbattleBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetEmbattleAddPower_descriptor_, &CGPetEmbattleAddPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetGoupEmbattle_descriptor_, &CGPetGoupEmbattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetEmbattleSkill_descriptor_, &GCPetEmbattleSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetEmbattleAddPowerBack_descriptor_, &GCPetEmbattleAddPowerBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetChangeCharacter_descriptor_, &CGPetChangeCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetChangeCharacterBack_descriptor_, &GCPetChangeCharacterBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPetSaveNewCharacter_descriptor_, &CGPetSaveNewCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPetSaveNewCharacterBack_descriptor_, &GCPetSaveNewCharacterBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PetMessage_2eproto() {
  delete CGGetPetList::default_instance_;
  delete CGGetPetList_reflection_;
  delete GCPetList::default_instance_;
  delete GCPetList_reflection_;
  delete CGPetChangeStatus::default_instance_;
  delete CGPetChangeStatus_reflection_;
  delete GCPetChangeStatusBack::default_instance_;
  delete GCPetChangeStatusBack_reflection_;
  delete CGPetChangeName::default_instance_;
  delete CGPetChangeName_reflection_;
  delete GCPetChangeNameBack::default_instance_;
  delete GCPetChangeNameBack_reflection_;
  delete CGPetRelease::default_instance_;
  delete CGPetRelease_reflection_;
  delete GCPetReleaseBack::default_instance_;
  delete GCPetReleaseBack_reflection_;
  delete CGPetReFreshAttr::default_instance_;
  delete CGPetReFreshAttr_reflection_;
  delete GCPetReFreshAttrBack::default_instance_;
  delete GCPetReFreshAttrBack_reflection_;
  delete CGPetCulture::default_instance_;
  delete CGPetCulture_reflection_;
  delete GCPetCultureBack::default_instance_;
  delete GCPetCultureBack_reflection_;
  delete CGPetUpStar::default_instance_;
  delete CGPetUpStar_reflection_;
  delete GCPetUpStarBack::default_instance_;
  delete GCPetUpStarBack_reflection_;
  delete CGPetDeposit::default_instance_;
  delete CGPetDeposit_reflection_;
  delete GCPetDepositBack::default_instance_;
  delete GCPetDepositBack_reflection_;
  delete CGPetStudySkill::default_instance_;
  delete CGPetStudySkill_reflection_;
  delete GCPetStudySkillBack::default_instance_;
  delete GCPetStudySkillBack_reflection_;
  delete GCRefreshPetData::default_instance_;
  delete GCRefreshPetData_reflection_;
  delete CGUnlockPetBag::default_instance_;
  delete CGUnlockPetBag_reflection_;
  delete GCUnlockPetBagBack::default_instance_;
  delete GCUnlockPetBagBack_reflection_;
  delete CGBuyPet::default_instance_;
  delete CGBuyPet_reflection_;
  delete GCBuyPetBack::default_instance_;
  delete GCBuyPetBack_reflection_;
  delete CGLookPet::default_instance_;
  delete CGLookPet_reflection_;
  delete GCLookPetBack::default_instance_;
  delete GCLookPetBack_reflection_;
  delete GCUpdatePetInfo::default_instance_;
  delete GCUpdatePetInfo_reflection_;
  delete PetEmbattleInfo::default_instance_;
  delete PetEmbattleInfo_reflection_;
  delete CGPetEmbattle::default_instance_;
  delete CGPetEmbattle_reflection_;
  delete GCPetEmbattleBack::default_instance_;
  delete GCPetEmbattleBack_reflection_;
  delete CGPetEmbattleAddPower::default_instance_;
  delete CGPetEmbattleAddPower_reflection_;
  delete CGPetGoupEmbattle::default_instance_;
  delete CGPetGoupEmbattle_reflection_;
  delete GCPetEmbattleSkill::default_instance_;
  delete GCPetEmbattleSkill_reflection_;
  delete GCPetEmbattleAddPowerBack::default_instance_;
  delete GCPetEmbattleAddPowerBack_reflection_;
  delete CGPetChangeCharacter::default_instance_;
  delete CGPetChangeCharacter_reflection_;
  delete GCPetChangeCharacterBack::default_instance_;
  delete GCPetChangeCharacterBack_reflection_;
  delete CGPetSaveNewCharacter::default_instance_;
  delete CGPetSaveNewCharacter_reflection_;
  delete GCPetSaveNewCharacterBack::default_instance_;
  delete GCPetSaveNewCharacterBack_reflection_;
}

void protobuf_AddDesc_PetMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020PetMessage.proto\032\022InnerMessage.proto\"\034"
    "\n\014CGGetPetList\022\014\n\004type\030\001 \001(\005\"H\n\tGCPetLis"
    "t\022\021\n\tpetbagnum\030\001 \001(\005\022\031\n\007petinfo\030\002 \003(\0132\010."
    "PetInfo\022\r\n\005petid\030\003 \001(\003\"6\n\021CGPetChangeSta"
    "tus\022\r\n\005petid\030\001 \001(\003\022\022\n\nbattleflag\030\002 \001(\005\"4"
    "\n\025GCPetChangeStatusBack\022\014\n\004flag\030\001 \001(\005\022\r\n"
    "\005objId\030\002 \001(\003\"1\n\017CGPetChangeName\022\r\n\005petid"
    "\030\001 \001(\003\022\017\n\007petName\030\002 \001(\t\"#\n\023GCPetChangeNa"
    "meBack\022\014\n\004flag\030\001 \001(\005\"\035\n\014CGPetRelease\022\r\n\005"
    "petid\030\001 \001(\003\" \n\020GCPetReleaseBack\022\014\n\004flag\030"
    "\001 \001(\005\"!\n\020CGPetReFreshAttr\022\r\n\005petid\030\001 \001(\003"
    "\"\?\n\024GCPetReFreshAttrBack\022\014\n\004flag\030\001 \001(\005\022\031"
    "\n\007petinfo\030\002 \001(\0132\010.PetInfo\"=\n\014CGPetCultur"
    "e\022\r\n\005petid\030\001 \001(\003\022\017\n\007cultype\030\002 \001(\005\022\r\n\005ist"
    "en\030\003 \001(\005\"Z\n\020GCPetCultureBack\022\014\n\004flag\030\001 \001"
    "(\005\022\031\n\007petAttr\030\002 \003(\0132\010.PetAttr\022\035\n\013petAttr"
    "Down\030\003 \003(\0132\010.PetAttr\"\034\n\013CGPetUpStar\022\r\n\005p"
    "etid\030\001 \001(\003\"Y\n\017GCPetUpStarBack\022\014\n\004flag\030\001 "
    "\001(\005\022\031\n\007petAttr\030\002 \003(\0132\010.PetAttr\022\035\n\013petAtt"
    "rDown\030\003 \003(\0132\010.PetAttr\"-\n\014CGPetDeposit\022\r\n"
    "\005petid\030\001 \001(\003\022\016\n\006dptype\030\002 \001(\005\" \n\020GCPetDep"
    "ositBack\022\014\n\004flag\030\001 \001(\005\"0\n\017CGPetStudySkil"
    "l\022\r\n\005petid\030\001 \001(\003\022\016\n\006bookid\030\002 \001(\005\"F\n\023GCPe"
    "tStudySkillBack\022\014\n\004flag\030\001 \001(\005\022!\n\tskillda"
    "ta\030\002 \003(\0132\016.SkillItemData\"-\n\020GCRefreshPet"
    "Data\022\031\n\007petinfo\030\001 \003(\0132\010.PetInfo\"\020\n\016CGUnl"
    "ockPetBag\"\"\n\022GCUnlockPetBagBack\022\014\n\004flag\030"
    "\001 \001(\005\"\032\n\010CGBuyPet\022\016\n\006shopid\030\001 \001(\005\"7\n\014GCB"
    "uyPetBack\022\014\n\004flag\030\001 \001(\005\022\031\n\007petinfo\030\002 \001(\013"
    "2\010.PetInfo\"\036\n\tCGLookPet\022\021\n\tplayerUid\030\001 \001"
    "(\003\"8\n\rGCLookPetBack\022\014\n\004flag\030\001 \001(\005\022\031\n\007pet"
    "info\030\002 \001(\0132\010.PetInfo\",\n\017GCUpdatePetInfo\022"
    "\031\n\007petinfo\030\001 \003(\0132\010.PetInfo\".\n\017PetEmbattl"
    "eInfo\022\014\n\004line\030\001 \001(\005\022\r\n\005petid\030\002 \001(\003\"\017\n\rCG"
    "PetEmbattle\"\255\001\n\021GCPetEmbattleBack\022&\n\014emb"
    "attleInfo\030\001 \003(\0132\020.PetEmbattleInfo\022\r\n\005pow"
    "er\030\002 \001(\005\022\020\n\010maxPower\030\003 \001(\005\022\022\n\nskillGroup"
    "\030\004 \001(\005\022 \n\010charAttr\030\005 \003(\0132\016.CharacterAttr"
    "\022\031\n\007petAttr\030\006 \003(\0132\010.PetAttr\"B\n\025CGPetEmba"
    "ttleAddPower\022\021\n\tautoPower\030\001 \001(\005\022\026\n\016notUs"
    "eBakMoney\030\002 \001(\005\"0\n\021CGPetGoupEmbattle\022\014\n\004"
    "line\030\001 \001(\005\022\r\n\005petid\030\002 \001(\003\"7\n\022GCPetEmbatt"
    "leSkill\022!\n\tskilldata\030\001 \003(\0132\016.SkillItemDa"
    "ta\"<\n\031GCPetEmbattleAddPowerBack\022\021\n\tautoP"
    "ower\030\001 \001(\005\022\014\n\004flag\030\002 \001(\005\"%\n\024CGPetChangeC"
    "haracter\022\r\n\005petid\030\001 \001(\003\"M\n\030GCPetChangeCh"
    "aracterBack\022\r\n\005petid\030\001 \001(\003\022\014\n\004flag\030\002 \001(\005"
    "\022\024\n\014newCharacter\030\003 \001(\005\"&\n\025CGPetSaveNewCh"
    "aracter\022\r\n\005petid\030\001 \001(\003\"D\n\031GCPetSaveNewCh"
    "aracterBack\022\014\n\004flag\030\001 \001(\005\022\031\n\007petinfo\030\002 \001"
    "(\0132\010.PetInfoB\031\n\027com.mile.common.message", 2039);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PetMessage.proto", &protobuf_RegisterTypes);
  CGGetPetList::default_instance_ = new CGGetPetList();
  GCPetList::default_instance_ = new GCPetList();
  CGPetChangeStatus::default_instance_ = new CGPetChangeStatus();
  GCPetChangeStatusBack::default_instance_ = new GCPetChangeStatusBack();
  CGPetChangeName::default_instance_ = new CGPetChangeName();
  GCPetChangeNameBack::default_instance_ = new GCPetChangeNameBack();
  CGPetRelease::default_instance_ = new CGPetRelease();
  GCPetReleaseBack::default_instance_ = new GCPetReleaseBack();
  CGPetReFreshAttr::default_instance_ = new CGPetReFreshAttr();
  GCPetReFreshAttrBack::default_instance_ = new GCPetReFreshAttrBack();
  CGPetCulture::default_instance_ = new CGPetCulture();
  GCPetCultureBack::default_instance_ = new GCPetCultureBack();
  CGPetUpStar::default_instance_ = new CGPetUpStar();
  GCPetUpStarBack::default_instance_ = new GCPetUpStarBack();
  CGPetDeposit::default_instance_ = new CGPetDeposit();
  GCPetDepositBack::default_instance_ = new GCPetDepositBack();
  CGPetStudySkill::default_instance_ = new CGPetStudySkill();
  GCPetStudySkillBack::default_instance_ = new GCPetStudySkillBack();
  GCRefreshPetData::default_instance_ = new GCRefreshPetData();
  CGUnlockPetBag::default_instance_ = new CGUnlockPetBag();
  GCUnlockPetBagBack::default_instance_ = new GCUnlockPetBagBack();
  CGBuyPet::default_instance_ = new CGBuyPet();
  GCBuyPetBack::default_instance_ = new GCBuyPetBack();
  CGLookPet::default_instance_ = new CGLookPet();
  GCLookPetBack::default_instance_ = new GCLookPetBack();
  GCUpdatePetInfo::default_instance_ = new GCUpdatePetInfo();
  PetEmbattleInfo::default_instance_ = new PetEmbattleInfo();
  CGPetEmbattle::default_instance_ = new CGPetEmbattle();
  GCPetEmbattleBack::default_instance_ = new GCPetEmbattleBack();
  CGPetEmbattleAddPower::default_instance_ = new CGPetEmbattleAddPower();
  CGPetGoupEmbattle::default_instance_ = new CGPetGoupEmbattle();
  GCPetEmbattleSkill::default_instance_ = new GCPetEmbattleSkill();
  GCPetEmbattleAddPowerBack::default_instance_ = new GCPetEmbattleAddPowerBack();
  CGPetChangeCharacter::default_instance_ = new CGPetChangeCharacter();
  GCPetChangeCharacterBack::default_instance_ = new GCPetChangeCharacterBack();
  CGPetSaveNewCharacter::default_instance_ = new CGPetSaveNewCharacter();
  GCPetSaveNewCharacterBack::default_instance_ = new GCPetSaveNewCharacterBack();
  CGGetPetList::default_instance_->InitAsDefaultInstance();
  GCPetList::default_instance_->InitAsDefaultInstance();
  CGPetChangeStatus::default_instance_->InitAsDefaultInstance();
  GCPetChangeStatusBack::default_instance_->InitAsDefaultInstance();
  CGPetChangeName::default_instance_->InitAsDefaultInstance();
  GCPetChangeNameBack::default_instance_->InitAsDefaultInstance();
  CGPetRelease::default_instance_->InitAsDefaultInstance();
  GCPetReleaseBack::default_instance_->InitAsDefaultInstance();
  CGPetReFreshAttr::default_instance_->InitAsDefaultInstance();
  GCPetReFreshAttrBack::default_instance_->InitAsDefaultInstance();
  CGPetCulture::default_instance_->InitAsDefaultInstance();
  GCPetCultureBack::default_instance_->InitAsDefaultInstance();
  CGPetUpStar::default_instance_->InitAsDefaultInstance();
  GCPetUpStarBack::default_instance_->InitAsDefaultInstance();
  CGPetDeposit::default_instance_->InitAsDefaultInstance();
  GCPetDepositBack::default_instance_->InitAsDefaultInstance();
  CGPetStudySkill::default_instance_->InitAsDefaultInstance();
  GCPetStudySkillBack::default_instance_->InitAsDefaultInstance();
  GCRefreshPetData::default_instance_->InitAsDefaultInstance();
  CGUnlockPetBag::default_instance_->InitAsDefaultInstance();
  GCUnlockPetBagBack::default_instance_->InitAsDefaultInstance();
  CGBuyPet::default_instance_->InitAsDefaultInstance();
  GCBuyPetBack::default_instance_->InitAsDefaultInstance();
  CGLookPet::default_instance_->InitAsDefaultInstance();
  GCLookPetBack::default_instance_->InitAsDefaultInstance();
  GCUpdatePetInfo::default_instance_->InitAsDefaultInstance();
  PetEmbattleInfo::default_instance_->InitAsDefaultInstance();
  CGPetEmbattle::default_instance_->InitAsDefaultInstance();
  GCPetEmbattleBack::default_instance_->InitAsDefaultInstance();
  CGPetEmbattleAddPower::default_instance_->InitAsDefaultInstance();
  CGPetGoupEmbattle::default_instance_->InitAsDefaultInstance();
  GCPetEmbattleSkill::default_instance_->InitAsDefaultInstance();
  GCPetEmbattleAddPowerBack::default_instance_->InitAsDefaultInstance();
  CGPetChangeCharacter::default_instance_->InitAsDefaultInstance();
  GCPetChangeCharacterBack::default_instance_->InitAsDefaultInstance();
  CGPetSaveNewCharacter::default_instance_->InitAsDefaultInstance();
  GCPetSaveNewCharacterBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PetMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PetMessage_2eproto {
  StaticDescriptorInitializer_PetMessage_2eproto() {
    protobuf_AddDesc_PetMessage_2eproto();
  }
} static_descriptor_initializer_PetMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGGetPetList::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGetPetList::CGGetPetList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPetList)
}

void CGGetPetList::InitAsDefaultInstance() {
}

CGGetPetList::CGGetPetList(const CGGetPetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPetList)
}

void CGGetPetList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPetList::~CGGetPetList() {
  // @@protoc_insertion_point(destructor:CGGetPetList)
  SharedDtor();
}

void CGGetPetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPetList_descriptor_;
}

const CGGetPetList& CGGetPetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGGetPetList* CGGetPetList::default_instance_ = NULL;

CGGetPetList* CGGetPetList::New() const {
  return new CGGetPetList;
}

void CGGetPetList::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPetList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPetList)
  return false;
#undef DO_
}

void CGGetPetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPetList)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPetList)
}

::google::protobuf::uint8* CGGetPetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPetList)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPetList)
  return target;
}

int CGGetPetList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPetList::MergeFrom(const CGGetPetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPetList::CopyFrom(const CGGetPetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPetList::IsInitialized() const {

  return true;
}

void CGGetPetList::Swap(CGGetPetList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPetList_descriptor_;
  metadata.reflection = CGGetPetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetList::kPetbagnumFieldNumber;
const int GCPetList::kPetinfoFieldNumber;
const int GCPetList::kPetidFieldNumber;
#endif  // !_MSC_VER

GCPetList::GCPetList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetList)
}

void GCPetList::InitAsDefaultInstance() {
}

GCPetList::GCPetList(const GCPetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetList)
}

void GCPetList::SharedCtor() {
  _cached_size_ = 0;
  petbagnum_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetList::~GCPetList() {
  // @@protoc_insertion_point(destructor:GCPetList)
  SharedDtor();
}

void GCPetList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetList_descriptor_;
}

const GCPetList& GCPetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetList* GCPetList::default_instance_ = NULL;

GCPetList* GCPetList::New() const {
  return new GCPetList;
}

void GCPetList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPetList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, petbagnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  petinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 petbagnum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petbagnum_)));
          set_has_petbagnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        break;
      }

      // repeated .PetInfo petinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        if (input->ExpectTag(24)) goto parse_petid;
        break;
      }

      // optional int64 petid = 3;
      case 3: {
        if (tag == 24) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetList)
  return false;
#undef DO_
}

void GCPetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetList)
  // optional int32 petbagnum = 1;
  if (has_petbagnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->petbagnum(), output);
  }

  // repeated .PetInfo petinfo = 2;
  for (int i = 0; i < this->petinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(i), output);
  }

  // optional int64 petid = 3;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetList)
}

::google::protobuf::uint8* GCPetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetList)
  // optional int32 petbagnum = 1;
  if (has_petbagnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->petbagnum(), target);
  }

  // repeated .PetInfo petinfo = 2;
  for (int i = 0; i < this->petinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(i), target);
  }

  // optional int64 petid = 3;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetList)
  return target;
}

int GCPetList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 petbagnum = 1;
    if (has_petbagnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petbagnum());
    }

    // optional int64 petid = 3;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  // repeated .PetInfo petinfo = 2;
  total_size += 1 * this->petinfo_size();
  for (int i = 0; i < this->petinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetList::MergeFrom(const GCPetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  petinfo_.MergeFrom(from.petinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petbagnum()) {
      set_petbagnum(from.petbagnum());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetList::CopyFrom(const GCPetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetList::IsInitialized() const {

  return true;
}

void GCPetList::Swap(GCPetList* other) {
  if (other != this) {
    std::swap(petbagnum_, other->petbagnum_);
    petinfo_.Swap(&other->petinfo_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetList_descriptor_;
  metadata.reflection = GCPetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetChangeStatus::kPetidFieldNumber;
const int CGPetChangeStatus::kBattleflagFieldNumber;
#endif  // !_MSC_VER

CGPetChangeStatus::CGPetChangeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetChangeStatus)
}

void CGPetChangeStatus::InitAsDefaultInstance() {
}

CGPetChangeStatus::CGPetChangeStatus(const CGPetChangeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetChangeStatus)
}

void CGPetChangeStatus::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  battleflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetChangeStatus::~CGPetChangeStatus() {
  // @@protoc_insertion_point(destructor:CGPetChangeStatus)
  SharedDtor();
}

void CGPetChangeStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetChangeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetChangeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetChangeStatus_descriptor_;
}

const CGPetChangeStatus& CGPetChangeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetChangeStatus* CGPetChangeStatus::default_instance_ = NULL;

CGPetChangeStatus* CGPetChangeStatus::New() const {
  return new CGPetChangeStatus;
}

void CGPetChangeStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetChangeStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, battleflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetChangeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battleflag;
        break;
      }

      // optional int32 battleflag = 2;
      case 2: {
        if (tag == 16) {
         parse_battleflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleflag_)));
          set_has_battleflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetChangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetChangeStatus)
  return false;
#undef DO_
}

void CGPetChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetChangeStatus)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 battleflag = 2;
  if (has_battleflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battleflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetChangeStatus)
}

::google::protobuf::uint8* CGPetChangeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetChangeStatus)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 battleflag = 2;
  if (has_battleflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battleflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetChangeStatus)
  return target;
}

int CGPetChangeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 battleflag = 2;
    if (has_battleflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetChangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetChangeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetChangeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetChangeStatus::MergeFrom(const CGPetChangeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_battleflag()) {
      set_battleflag(from.battleflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetChangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetChangeStatus::CopyFrom(const CGPetChangeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetChangeStatus::IsInitialized() const {

  return true;
}

void CGPetChangeStatus::Swap(CGPetChangeStatus* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(battleflag_, other->battleflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetChangeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetChangeStatus_descriptor_;
  metadata.reflection = CGPetChangeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetChangeStatusBack::kFlagFieldNumber;
const int GCPetChangeStatusBack::kObjIdFieldNumber;
#endif  // !_MSC_VER

GCPetChangeStatusBack::GCPetChangeStatusBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetChangeStatusBack)
}

void GCPetChangeStatusBack::InitAsDefaultInstance() {
}

GCPetChangeStatusBack::GCPetChangeStatusBack(const GCPetChangeStatusBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetChangeStatusBack)
}

void GCPetChangeStatusBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetChangeStatusBack::~GCPetChangeStatusBack() {
  // @@protoc_insertion_point(destructor:GCPetChangeStatusBack)
  SharedDtor();
}

void GCPetChangeStatusBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetChangeStatusBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetChangeStatusBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetChangeStatusBack_descriptor_;
}

const GCPetChangeStatusBack& GCPetChangeStatusBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetChangeStatusBack* GCPetChangeStatusBack::default_instance_ = NULL;

GCPetChangeStatusBack* GCPetChangeStatusBack::New() const {
  return new GCPetChangeStatusBack;
}

void GCPetChangeStatusBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPetChangeStatusBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objid_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetChangeStatusBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetChangeStatusBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // optional int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetChangeStatusBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetChangeStatusBack)
  return false;
#undef DO_
}

void GCPetChangeStatusBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetChangeStatusBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetChangeStatusBack)
}

::google::protobuf::uint8* GCPetChangeStatusBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetChangeStatusBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetChangeStatusBack)
  return target;
}

int GCPetChangeStatusBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetChangeStatusBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetChangeStatusBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetChangeStatusBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetChangeStatusBack::MergeFrom(const GCPetChangeStatusBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetChangeStatusBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetChangeStatusBack::CopyFrom(const GCPetChangeStatusBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetChangeStatusBack::IsInitialized() const {

  return true;
}

void GCPetChangeStatusBack::Swap(GCPetChangeStatusBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetChangeStatusBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetChangeStatusBack_descriptor_;
  metadata.reflection = GCPetChangeStatusBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetChangeName::kPetidFieldNumber;
const int CGPetChangeName::kPetNameFieldNumber;
#endif  // !_MSC_VER

CGPetChangeName::CGPetChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetChangeName)
}

void CGPetChangeName::InitAsDefaultInstance() {
}

CGPetChangeName::CGPetChangeName(const CGPetChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetChangeName)
}

void CGPetChangeName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  petname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetChangeName::~CGPetChangeName() {
  // @@protoc_insertion_point(destructor:CGPetChangeName)
  SharedDtor();
}

void CGPetChangeName::SharedDtor() {
  if (petname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete petname_;
  }
  if (this != default_instance_) {
  }
}

void CGPetChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetChangeName_descriptor_;
}

const CGPetChangeName& CGPetChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetChangeName* CGPetChangeName::default_instance_ = NULL;

CGPetChangeName* CGPetChangeName::New() const {
  return new CGPetChangeName;
}

void CGPetChangeName::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    petid_ = GOOGLE_LONGLONG(0);
    if (has_petname()) {
      if (petname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        petname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petName;
        break;
      }

      // optional string petName = 2;
      case 2: {
        if (tag == 18) {
         parse_petName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_petname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->petname().data(), this->petname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "petname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetChangeName)
  return false;
#undef DO_
}

void CGPetChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetChangeName)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional string petName = 2;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "petname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->petname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetChangeName)
}

::google::protobuf::uint8* CGPetChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetChangeName)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional string petName = 2;
  if (has_petname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->petname().data(), this->petname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "petname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->petname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetChangeName)
  return target;
}

int CGPetChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional string petName = 2;
    if (has_petname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->petname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetChangeName::MergeFrom(const CGPetChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_petname()) {
      set_petname(from.petname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetChangeName::CopyFrom(const CGPetChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetChangeName::IsInitialized() const {

  return true;
}

void CGPetChangeName::Swap(CGPetChangeName* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(petname_, other->petname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetChangeName_descriptor_;
  metadata.reflection = CGPetChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetChangeNameBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCPetChangeNameBack::GCPetChangeNameBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetChangeNameBack)
}

void GCPetChangeNameBack::InitAsDefaultInstance() {
}

GCPetChangeNameBack::GCPetChangeNameBack(const GCPetChangeNameBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetChangeNameBack)
}

void GCPetChangeNameBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetChangeNameBack::~GCPetChangeNameBack() {
  // @@protoc_insertion_point(destructor:GCPetChangeNameBack)
  SharedDtor();
}

void GCPetChangeNameBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetChangeNameBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetChangeNameBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetChangeNameBack_descriptor_;
}

const GCPetChangeNameBack& GCPetChangeNameBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetChangeNameBack* GCPetChangeNameBack::default_instance_ = NULL;

GCPetChangeNameBack* GCPetChangeNameBack::New() const {
  return new GCPetChangeNameBack;
}

void GCPetChangeNameBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetChangeNameBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetChangeNameBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetChangeNameBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetChangeNameBack)
  return false;
#undef DO_
}

void GCPetChangeNameBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetChangeNameBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetChangeNameBack)
}

::google::protobuf::uint8* GCPetChangeNameBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetChangeNameBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetChangeNameBack)
  return target;
}

int GCPetChangeNameBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetChangeNameBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetChangeNameBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetChangeNameBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetChangeNameBack::MergeFrom(const GCPetChangeNameBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetChangeNameBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetChangeNameBack::CopyFrom(const GCPetChangeNameBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetChangeNameBack::IsInitialized() const {

  return true;
}

void GCPetChangeNameBack::Swap(GCPetChangeNameBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetChangeNameBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetChangeNameBack_descriptor_;
  metadata.reflection = GCPetChangeNameBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetRelease::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetRelease::CGPetRelease()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetRelease)
}

void CGPetRelease::InitAsDefaultInstance() {
}

CGPetRelease::CGPetRelease(const CGPetRelease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetRelease)
}

void CGPetRelease::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetRelease::~CGPetRelease() {
  // @@protoc_insertion_point(destructor:CGPetRelease)
  SharedDtor();
}

void CGPetRelease::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetRelease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetRelease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetRelease_descriptor_;
}

const CGPetRelease& CGPetRelease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetRelease* CGPetRelease::default_instance_ = NULL;

CGPetRelease* CGPetRelease::New() const {
  return new CGPetRelease;
}

void CGPetRelease::Clear() {
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetRelease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetRelease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetRelease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetRelease)
  return false;
#undef DO_
}

void CGPetRelease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetRelease)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetRelease)
}

::google::protobuf::uint8* CGPetRelease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetRelease)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetRelease)
  return target;
}

int CGPetRelease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetRelease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetRelease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetRelease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetRelease::MergeFrom(const CGPetRelease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetRelease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetRelease::CopyFrom(const CGPetRelease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetRelease::IsInitialized() const {

  return true;
}

void CGPetRelease::Swap(CGPetRelease* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetRelease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetRelease_descriptor_;
  metadata.reflection = CGPetRelease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetReleaseBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCPetReleaseBack::GCPetReleaseBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetReleaseBack)
}

void GCPetReleaseBack::InitAsDefaultInstance() {
}

GCPetReleaseBack::GCPetReleaseBack(const GCPetReleaseBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetReleaseBack)
}

void GCPetReleaseBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetReleaseBack::~GCPetReleaseBack() {
  // @@protoc_insertion_point(destructor:GCPetReleaseBack)
  SharedDtor();
}

void GCPetReleaseBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetReleaseBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetReleaseBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetReleaseBack_descriptor_;
}

const GCPetReleaseBack& GCPetReleaseBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetReleaseBack* GCPetReleaseBack::default_instance_ = NULL;

GCPetReleaseBack* GCPetReleaseBack::New() const {
  return new GCPetReleaseBack;
}

void GCPetReleaseBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetReleaseBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetReleaseBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetReleaseBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetReleaseBack)
  return false;
#undef DO_
}

void GCPetReleaseBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetReleaseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetReleaseBack)
}

::google::protobuf::uint8* GCPetReleaseBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetReleaseBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetReleaseBack)
  return target;
}

int GCPetReleaseBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetReleaseBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetReleaseBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetReleaseBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetReleaseBack::MergeFrom(const GCPetReleaseBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetReleaseBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetReleaseBack::CopyFrom(const GCPetReleaseBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetReleaseBack::IsInitialized() const {

  return true;
}

void GCPetReleaseBack::Swap(GCPetReleaseBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetReleaseBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetReleaseBack_descriptor_;
  metadata.reflection = GCPetReleaseBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetReFreshAttr::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetReFreshAttr::CGPetReFreshAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetReFreshAttr)
}

void CGPetReFreshAttr::InitAsDefaultInstance() {
}

CGPetReFreshAttr::CGPetReFreshAttr(const CGPetReFreshAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetReFreshAttr)
}

void CGPetReFreshAttr::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetReFreshAttr::~CGPetReFreshAttr() {
  // @@protoc_insertion_point(destructor:CGPetReFreshAttr)
  SharedDtor();
}

void CGPetReFreshAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetReFreshAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetReFreshAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetReFreshAttr_descriptor_;
}

const CGPetReFreshAttr& CGPetReFreshAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetReFreshAttr* CGPetReFreshAttr::default_instance_ = NULL;

CGPetReFreshAttr* CGPetReFreshAttr::New() const {
  return new CGPetReFreshAttr;
}

void CGPetReFreshAttr::Clear() {
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetReFreshAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetReFreshAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetReFreshAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetReFreshAttr)
  return false;
#undef DO_
}

void CGPetReFreshAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetReFreshAttr)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetReFreshAttr)
}

::google::protobuf::uint8* CGPetReFreshAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetReFreshAttr)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetReFreshAttr)
  return target;
}

int CGPetReFreshAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetReFreshAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetReFreshAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetReFreshAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetReFreshAttr::MergeFrom(const CGPetReFreshAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetReFreshAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetReFreshAttr::CopyFrom(const CGPetReFreshAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetReFreshAttr::IsInitialized() const {

  return true;
}

void CGPetReFreshAttr::Swap(CGPetReFreshAttr* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetReFreshAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetReFreshAttr_descriptor_;
  metadata.reflection = CGPetReFreshAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetReFreshAttrBack::kFlagFieldNumber;
const int GCPetReFreshAttrBack::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCPetReFreshAttrBack::GCPetReFreshAttrBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetReFreshAttrBack)
}

void GCPetReFreshAttrBack::InitAsDefaultInstance() {
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

GCPetReFreshAttrBack::GCPetReFreshAttrBack(const GCPetReFreshAttrBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetReFreshAttrBack)
}

void GCPetReFreshAttrBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  petinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetReFreshAttrBack::~GCPetReFreshAttrBack() {
  // @@protoc_insertion_point(destructor:GCPetReFreshAttrBack)
  SharedDtor();
}

void GCPetReFreshAttrBack::SharedDtor() {
  if (this != default_instance_) {
    delete petinfo_;
  }
}

void GCPetReFreshAttrBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetReFreshAttrBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetReFreshAttrBack_descriptor_;
}

const GCPetReFreshAttrBack& GCPetReFreshAttrBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetReFreshAttrBack* GCPetReFreshAttrBack::default_instance_ = NULL;

GCPetReFreshAttrBack* GCPetReFreshAttrBack::New() const {
  return new GCPetReFreshAttrBack;
}

void GCPetReFreshAttrBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetReFreshAttrBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetReFreshAttrBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        break;
      }

      // optional .PetInfo petinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetReFreshAttrBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetReFreshAttrBack)
  return false;
#undef DO_
}

void GCPetReFreshAttrBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetReFreshAttrBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetReFreshAttrBack)
}

::google::protobuf::uint8* GCPetReFreshAttrBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetReFreshAttrBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetReFreshAttrBack)
  return target;
}

int GCPetReFreshAttrBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .PetInfo petinfo = 2;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetReFreshAttrBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetReFreshAttrBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetReFreshAttrBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetReFreshAttrBack::MergeFrom(const GCPetReFreshAttrBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetReFreshAttrBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetReFreshAttrBack::CopyFrom(const GCPetReFreshAttrBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetReFreshAttrBack::IsInitialized() const {

  return true;
}

void GCPetReFreshAttrBack::Swap(GCPetReFreshAttrBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetReFreshAttrBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetReFreshAttrBack_descriptor_;
  metadata.reflection = GCPetReFreshAttrBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetCulture::kPetidFieldNumber;
const int CGPetCulture::kCultypeFieldNumber;
const int CGPetCulture::kIstenFieldNumber;
#endif  // !_MSC_VER

CGPetCulture::CGPetCulture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetCulture)
}

void CGPetCulture::InitAsDefaultInstance() {
}

CGPetCulture::CGPetCulture(const CGPetCulture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetCulture)
}

void CGPetCulture::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  cultype_ = 0;
  isten_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetCulture::~CGPetCulture() {
  // @@protoc_insertion_point(destructor:CGPetCulture)
  SharedDtor();
}

void CGPetCulture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetCulture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetCulture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetCulture_descriptor_;
}

const CGPetCulture& CGPetCulture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetCulture* CGPetCulture::default_instance_ = NULL;

CGPetCulture* CGPetCulture::New() const {
  return new CGPetCulture;
}

void CGPetCulture::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetCulture*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, isten_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetCulture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetCulture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cultype;
        break;
      }

      // optional int32 cultype = 2;
      case 2: {
        if (tag == 16) {
         parse_cultype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cultype_)));
          set_has_cultype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isten;
        break;
      }

      // optional int32 isten = 3;
      case 3: {
        if (tag == 24) {
         parse_isten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isten_)));
          set_has_isten();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetCulture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetCulture)
  return false;
#undef DO_
}

void CGPetCulture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetCulture)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 cultype = 2;
  if (has_cultype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cultype(), output);
  }

  // optional int32 isten = 3;
  if (has_isten()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isten(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetCulture)
}

::google::protobuf::uint8* CGPetCulture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetCulture)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 cultype = 2;
  if (has_cultype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cultype(), target);
  }

  // optional int32 isten = 3;
  if (has_isten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isten(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetCulture)
  return target;
}

int CGPetCulture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 cultype = 2;
    if (has_cultype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cultype());
    }

    // optional int32 isten = 3;
    if (has_isten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isten());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetCulture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetCulture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetCulture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetCulture::MergeFrom(const CGPetCulture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_cultype()) {
      set_cultype(from.cultype());
    }
    if (from.has_isten()) {
      set_isten(from.isten());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetCulture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetCulture::CopyFrom(const CGPetCulture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetCulture::IsInitialized() const {

  return true;
}

void CGPetCulture::Swap(CGPetCulture* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(cultype_, other->cultype_);
    std::swap(isten_, other->isten_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetCulture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetCulture_descriptor_;
  metadata.reflection = CGPetCulture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetCultureBack::kFlagFieldNumber;
const int GCPetCultureBack::kPetAttrFieldNumber;
const int GCPetCultureBack::kPetAttrDownFieldNumber;
#endif  // !_MSC_VER

GCPetCultureBack::GCPetCultureBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetCultureBack)
}

void GCPetCultureBack::InitAsDefaultInstance() {
}

GCPetCultureBack::GCPetCultureBack(const GCPetCultureBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetCultureBack)
}

void GCPetCultureBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetCultureBack::~GCPetCultureBack() {
  // @@protoc_insertion_point(destructor:GCPetCultureBack)
  SharedDtor();
}

void GCPetCultureBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetCultureBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetCultureBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetCultureBack_descriptor_;
}

const GCPetCultureBack& GCPetCultureBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetCultureBack* GCPetCultureBack::default_instance_ = NULL;

GCPetCultureBack* GCPetCultureBack::New() const {
  return new GCPetCultureBack;
}

void GCPetCultureBack::Clear() {
  flag_ = 0;
  petattr_.Clear();
  petattrdown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetCultureBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetCultureBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petAttr;
        break;
      }

      // repeated .PetAttr petAttr = 2;
      case 2: {
        if (tag == 18) {
         parse_petAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petAttr;
        if (input->ExpectTag(26)) goto parse_petAttrDown;
        break;
      }

      // repeated .PetAttr petAttrDown = 3;
      case 3: {
        if (tag == 26) {
         parse_petAttrDown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattrdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petAttrDown;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetCultureBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetCultureBack)
  return false;
#undef DO_
}

void GCPetCultureBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetCultureBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .PetAttr petAttr = 2;
  for (int i = 0; i < this->petattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petattr(i), output);
  }

  // repeated .PetAttr petAttrDown = 3;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->petattrdown(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetCultureBack)
}

::google::protobuf::uint8* GCPetCultureBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetCultureBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .PetAttr petAttr = 2;
  for (int i = 0; i < this->petattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petattr(i), target);
  }

  // repeated .PetAttr petAttrDown = 3;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->petattrdown(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetCultureBack)
  return target;
}

int GCPetCultureBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .PetAttr petAttr = 2;
  total_size += 1 * this->petattr_size();
  for (int i = 0; i < this->petattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattr(i));
  }

  // repeated .PetAttr petAttrDown = 3;
  total_size += 1 * this->petattrdown_size();
  for (int i = 0; i < this->petattrdown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattrdown(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetCultureBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetCultureBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetCultureBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetCultureBack::MergeFrom(const GCPetCultureBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  petattr_.MergeFrom(from.petattr_);
  petattrdown_.MergeFrom(from.petattrdown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetCultureBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetCultureBack::CopyFrom(const GCPetCultureBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetCultureBack::IsInitialized() const {

  return true;
}

void GCPetCultureBack::Swap(GCPetCultureBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    petattr_.Swap(&other->petattr_);
    petattrdown_.Swap(&other->petattrdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetCultureBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetCultureBack_descriptor_;
  metadata.reflection = GCPetCultureBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetUpStar::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetUpStar::CGPetUpStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetUpStar)
}

void CGPetUpStar::InitAsDefaultInstance() {
}

CGPetUpStar::CGPetUpStar(const CGPetUpStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetUpStar)
}

void CGPetUpStar::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetUpStar::~CGPetUpStar() {
  // @@protoc_insertion_point(destructor:CGPetUpStar)
  SharedDtor();
}

void CGPetUpStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetUpStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetUpStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetUpStar_descriptor_;
}

const CGPetUpStar& CGPetUpStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetUpStar* CGPetUpStar::default_instance_ = NULL;

CGPetUpStar* CGPetUpStar::New() const {
  return new CGPetUpStar;
}

void CGPetUpStar::Clear() {
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetUpStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetUpStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetUpStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetUpStar)
  return false;
#undef DO_
}

void CGPetUpStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetUpStar)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetUpStar)
}

::google::protobuf::uint8* CGPetUpStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetUpStar)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetUpStar)
  return target;
}

int CGPetUpStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetUpStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetUpStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetUpStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetUpStar::MergeFrom(const CGPetUpStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetUpStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetUpStar::CopyFrom(const CGPetUpStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetUpStar::IsInitialized() const {

  return true;
}

void CGPetUpStar::Swap(CGPetUpStar* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetUpStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetUpStar_descriptor_;
  metadata.reflection = CGPetUpStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetUpStarBack::kFlagFieldNumber;
const int GCPetUpStarBack::kPetAttrFieldNumber;
const int GCPetUpStarBack::kPetAttrDownFieldNumber;
#endif  // !_MSC_VER

GCPetUpStarBack::GCPetUpStarBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetUpStarBack)
}

void GCPetUpStarBack::InitAsDefaultInstance() {
}

GCPetUpStarBack::GCPetUpStarBack(const GCPetUpStarBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetUpStarBack)
}

void GCPetUpStarBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetUpStarBack::~GCPetUpStarBack() {
  // @@protoc_insertion_point(destructor:GCPetUpStarBack)
  SharedDtor();
}

void GCPetUpStarBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetUpStarBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetUpStarBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetUpStarBack_descriptor_;
}

const GCPetUpStarBack& GCPetUpStarBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetUpStarBack* GCPetUpStarBack::default_instance_ = NULL;

GCPetUpStarBack* GCPetUpStarBack::New() const {
  return new GCPetUpStarBack;
}

void GCPetUpStarBack::Clear() {
  flag_ = 0;
  petattr_.Clear();
  petattrdown_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetUpStarBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetUpStarBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petAttr;
        break;
      }

      // repeated .PetAttr petAttr = 2;
      case 2: {
        if (tag == 18) {
         parse_petAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petAttr;
        if (input->ExpectTag(26)) goto parse_petAttrDown;
        break;
      }

      // repeated .PetAttr petAttrDown = 3;
      case 3: {
        if (tag == 26) {
         parse_petAttrDown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattrdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_petAttrDown;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetUpStarBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetUpStarBack)
  return false;
#undef DO_
}

void GCPetUpStarBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetUpStarBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .PetAttr petAttr = 2;
  for (int i = 0; i < this->petattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petattr(i), output);
  }

  // repeated .PetAttr petAttrDown = 3;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->petattrdown(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetUpStarBack)
}

::google::protobuf::uint8* GCPetUpStarBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetUpStarBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .PetAttr petAttr = 2;
  for (int i = 0; i < this->petattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petattr(i), target);
  }

  // repeated .PetAttr petAttrDown = 3;
  for (int i = 0; i < this->petattrdown_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->petattrdown(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetUpStarBack)
  return target;
}

int GCPetUpStarBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .PetAttr petAttr = 2;
  total_size += 1 * this->petattr_size();
  for (int i = 0; i < this->petattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattr(i));
  }

  // repeated .PetAttr petAttrDown = 3;
  total_size += 1 * this->petattrdown_size();
  for (int i = 0; i < this->petattrdown_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattrdown(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetUpStarBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetUpStarBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetUpStarBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetUpStarBack::MergeFrom(const GCPetUpStarBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  petattr_.MergeFrom(from.petattr_);
  petattrdown_.MergeFrom(from.petattrdown_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetUpStarBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetUpStarBack::CopyFrom(const GCPetUpStarBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetUpStarBack::IsInitialized() const {

  return true;
}

void GCPetUpStarBack::Swap(GCPetUpStarBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    petattr_.Swap(&other->petattr_);
    petattrdown_.Swap(&other->petattrdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetUpStarBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetUpStarBack_descriptor_;
  metadata.reflection = GCPetUpStarBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetDeposit::kPetidFieldNumber;
const int CGPetDeposit::kDptypeFieldNumber;
#endif  // !_MSC_VER

CGPetDeposit::CGPetDeposit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetDeposit)
}

void CGPetDeposit::InitAsDefaultInstance() {
}

CGPetDeposit::CGPetDeposit(const CGPetDeposit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetDeposit)
}

void CGPetDeposit::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  dptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetDeposit::~CGPetDeposit() {
  // @@protoc_insertion_point(destructor:CGPetDeposit)
  SharedDtor();
}

void CGPetDeposit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetDeposit_descriptor_;
}

const CGPetDeposit& CGPetDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetDeposit* CGPetDeposit::default_instance_ = NULL;

CGPetDeposit* CGPetDeposit::New() const {
  return new CGPetDeposit;
}

void CGPetDeposit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetDeposit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, dptype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetDeposit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dptype;
        break;
      }

      // optional int32 dptype = 2;
      case 2: {
        if (tag == 16) {
         parse_dptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dptype_)));
          set_has_dptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetDeposit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetDeposit)
  return false;
#undef DO_
}

void CGPetDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetDeposit)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 dptype = 2;
  if (has_dptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetDeposit)
}

::google::protobuf::uint8* CGPetDeposit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetDeposit)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 dptype = 2;
  if (has_dptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetDeposit)
  return target;
}

int CGPetDeposit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 dptype = 2;
    if (has_dptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetDeposit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetDeposit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetDeposit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetDeposit::MergeFrom(const CGPetDeposit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_dptype()) {
      set_dptype(from.dptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetDeposit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetDeposit::CopyFrom(const CGPetDeposit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetDeposit::IsInitialized() const {

  return true;
}

void CGPetDeposit::Swap(CGPetDeposit* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(dptype_, other->dptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetDeposit_descriptor_;
  metadata.reflection = CGPetDeposit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetDepositBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCPetDepositBack::GCPetDepositBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetDepositBack)
}

void GCPetDepositBack::InitAsDefaultInstance() {
}

GCPetDepositBack::GCPetDepositBack(const GCPetDepositBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetDepositBack)
}

void GCPetDepositBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetDepositBack::~GCPetDepositBack() {
  // @@protoc_insertion_point(destructor:GCPetDepositBack)
  SharedDtor();
}

void GCPetDepositBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetDepositBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetDepositBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetDepositBack_descriptor_;
}

const GCPetDepositBack& GCPetDepositBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetDepositBack* GCPetDepositBack::default_instance_ = NULL;

GCPetDepositBack* GCPetDepositBack::New() const {
  return new GCPetDepositBack;
}

void GCPetDepositBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetDepositBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetDepositBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetDepositBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetDepositBack)
  return false;
#undef DO_
}

void GCPetDepositBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetDepositBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetDepositBack)
}

::google::protobuf::uint8* GCPetDepositBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetDepositBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetDepositBack)
  return target;
}

int GCPetDepositBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetDepositBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetDepositBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetDepositBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetDepositBack::MergeFrom(const GCPetDepositBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetDepositBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetDepositBack::CopyFrom(const GCPetDepositBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetDepositBack::IsInitialized() const {

  return true;
}

void GCPetDepositBack::Swap(GCPetDepositBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetDepositBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetDepositBack_descriptor_;
  metadata.reflection = GCPetDepositBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetStudySkill::kPetidFieldNumber;
const int CGPetStudySkill::kBookidFieldNumber;
#endif  // !_MSC_VER

CGPetStudySkill::CGPetStudySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetStudySkill)
}

void CGPetStudySkill::InitAsDefaultInstance() {
}

CGPetStudySkill::CGPetStudySkill(const CGPetStudySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetStudySkill)
}

void CGPetStudySkill::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  bookid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetStudySkill::~CGPetStudySkill() {
  // @@protoc_insertion_point(destructor:CGPetStudySkill)
  SharedDtor();
}

void CGPetStudySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetStudySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetStudySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetStudySkill_descriptor_;
}

const CGPetStudySkill& CGPetStudySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetStudySkill* CGPetStudySkill::default_instance_ = NULL;

CGPetStudySkill* CGPetStudySkill::New() const {
  return new CGPetStudySkill;
}

void CGPetStudySkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetStudySkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, bookid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetStudySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetStudySkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bookid;
        break;
      }

      // optional int32 bookid = 2;
      case 2: {
        if (tag == 16) {
         parse_bookid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookid_)));
          set_has_bookid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetStudySkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetStudySkill)
  return false;
#undef DO_
}

void CGPetStudySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetStudySkill)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 bookid = 2;
  if (has_bookid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bookid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetStudySkill)
}

::google::protobuf::uint8* CGPetStudySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetStudySkill)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 bookid = 2;
  if (has_bookid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bookid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetStudySkill)
  return target;
}

int CGPetStudySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 bookid = 2;
    if (has_bookid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bookid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetStudySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetStudySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetStudySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetStudySkill::MergeFrom(const CGPetStudySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_bookid()) {
      set_bookid(from.bookid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetStudySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetStudySkill::CopyFrom(const CGPetStudySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetStudySkill::IsInitialized() const {

  return true;
}

void CGPetStudySkill::Swap(CGPetStudySkill* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(bookid_, other->bookid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetStudySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetStudySkill_descriptor_;
  metadata.reflection = CGPetStudySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetStudySkillBack::kFlagFieldNumber;
const int GCPetStudySkillBack::kSkilldataFieldNumber;
#endif  // !_MSC_VER

GCPetStudySkillBack::GCPetStudySkillBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetStudySkillBack)
}

void GCPetStudySkillBack::InitAsDefaultInstance() {
}

GCPetStudySkillBack::GCPetStudySkillBack(const GCPetStudySkillBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetStudySkillBack)
}

void GCPetStudySkillBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetStudySkillBack::~GCPetStudySkillBack() {
  // @@protoc_insertion_point(destructor:GCPetStudySkillBack)
  SharedDtor();
}

void GCPetStudySkillBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetStudySkillBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetStudySkillBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetStudySkillBack_descriptor_;
}

const GCPetStudySkillBack& GCPetStudySkillBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetStudySkillBack* GCPetStudySkillBack::default_instance_ = NULL;

GCPetStudySkillBack* GCPetStudySkillBack::New() const {
  return new GCPetStudySkillBack;
}

void GCPetStudySkillBack::Clear() {
  flag_ = 0;
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetStudySkillBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetStudySkillBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }

      // repeated .SkillItemData skilldata = 2;
      case 2: {
        if (tag == 18) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetStudySkillBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetStudySkillBack)
  return false;
#undef DO_
}

void GCPetStudySkillBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetStudySkillBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetStudySkillBack)
}

::google::protobuf::uint8* GCPetStudySkillBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetStudySkillBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetStudySkillBack)
  return target;
}

int GCPetStudySkillBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .SkillItemData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetStudySkillBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetStudySkillBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetStudySkillBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetStudySkillBack::MergeFrom(const GCPetStudySkillBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetStudySkillBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetStudySkillBack::CopyFrom(const GCPetStudySkillBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetStudySkillBack::IsInitialized() const {

  return true;
}

void GCPetStudySkillBack::Swap(GCPetStudySkillBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetStudySkillBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetStudySkillBack_descriptor_;
  metadata.reflection = GCPetStudySkillBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshPetData::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCRefreshPetData::GCRefreshPetData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshPetData)
}

void GCRefreshPetData::InitAsDefaultInstance() {
}

GCRefreshPetData::GCRefreshPetData(const GCRefreshPetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshPetData)
}

void GCRefreshPetData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshPetData::~GCRefreshPetData() {
  // @@protoc_insertion_point(destructor:GCRefreshPetData)
  SharedDtor();
}

void GCRefreshPetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshPetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshPetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshPetData_descriptor_;
}

const GCRefreshPetData& GCRefreshPetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCRefreshPetData* GCRefreshPetData::default_instance_ = NULL;

GCRefreshPetData* GCRefreshPetData::New() const {
  return new GCRefreshPetData;
}

void GCRefreshPetData::Clear() {
  petinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshPetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshPetData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PetInfo petinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_petinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshPetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshPetData)
  return false;
#undef DO_
}

void GCRefreshPetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshPetData)
  // repeated .PetInfo petinfo = 1;
  for (int i = 0; i < this->petinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshPetData)
}

::google::protobuf::uint8* GCRefreshPetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshPetData)
  // repeated .PetInfo petinfo = 1;
  for (int i = 0; i < this->petinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshPetData)
  return target;
}

int GCRefreshPetData::ByteSize() const {
  int total_size = 0;

  // repeated .PetInfo petinfo = 1;
  total_size += 1 * this->petinfo_size();
  for (int i = 0; i < this->petinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshPetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshPetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshPetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshPetData::MergeFrom(const GCRefreshPetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  petinfo_.MergeFrom(from.petinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshPetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshPetData::CopyFrom(const GCRefreshPetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshPetData::IsInitialized() const {

  return true;
}

void GCRefreshPetData::Swap(GCRefreshPetData* other) {
  if (other != this) {
    petinfo_.Swap(&other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshPetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshPetData_descriptor_;
  metadata.reflection = GCRefreshPetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGUnlockPetBag::CGUnlockPetBag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUnlockPetBag)
}

void CGUnlockPetBag::InitAsDefaultInstance() {
}

CGUnlockPetBag::CGUnlockPetBag(const CGUnlockPetBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUnlockPetBag)
}

void CGUnlockPetBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUnlockPetBag::~CGUnlockPetBag() {
  // @@protoc_insertion_point(destructor:CGUnlockPetBag)
  SharedDtor();
}

void CGUnlockPetBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUnlockPetBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUnlockPetBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUnlockPetBag_descriptor_;
}

const CGUnlockPetBag& CGUnlockPetBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGUnlockPetBag* CGUnlockPetBag::default_instance_ = NULL;

CGUnlockPetBag* CGUnlockPetBag::New() const {
  return new CGUnlockPetBag;
}

void CGUnlockPetBag::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUnlockPetBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUnlockPetBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGUnlockPetBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUnlockPetBag)
  return false;
#undef DO_
}

void CGUnlockPetBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUnlockPetBag)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUnlockPetBag)
}

::google::protobuf::uint8* CGUnlockPetBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUnlockPetBag)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUnlockPetBag)
  return target;
}

int CGUnlockPetBag::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUnlockPetBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUnlockPetBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUnlockPetBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUnlockPetBag::MergeFrom(const CGUnlockPetBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUnlockPetBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUnlockPetBag::CopyFrom(const CGUnlockPetBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUnlockPetBag::IsInitialized() const {

  return true;
}

void CGUnlockPetBag::Swap(CGUnlockPetBag* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUnlockPetBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUnlockPetBag_descriptor_;
  metadata.reflection = CGUnlockPetBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUnlockPetBagBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCUnlockPetBagBack::GCUnlockPetBagBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUnlockPetBagBack)
}

void GCUnlockPetBagBack::InitAsDefaultInstance() {
}

GCUnlockPetBagBack::GCUnlockPetBagBack(const GCUnlockPetBagBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUnlockPetBagBack)
}

void GCUnlockPetBagBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUnlockPetBagBack::~GCUnlockPetBagBack() {
  // @@protoc_insertion_point(destructor:GCUnlockPetBagBack)
  SharedDtor();
}

void GCUnlockPetBagBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUnlockPetBagBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUnlockPetBagBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUnlockPetBagBack_descriptor_;
}

const GCUnlockPetBagBack& GCUnlockPetBagBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCUnlockPetBagBack* GCUnlockPetBagBack::default_instance_ = NULL;

GCUnlockPetBagBack* GCUnlockPetBagBack::New() const {
  return new GCUnlockPetBagBack;
}

void GCUnlockPetBagBack::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUnlockPetBagBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUnlockPetBagBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUnlockPetBagBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUnlockPetBagBack)
  return false;
#undef DO_
}

void GCUnlockPetBagBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUnlockPetBagBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUnlockPetBagBack)
}

::google::protobuf::uint8* GCUnlockPetBagBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUnlockPetBagBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUnlockPetBagBack)
  return target;
}

int GCUnlockPetBagBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUnlockPetBagBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUnlockPetBagBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUnlockPetBagBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUnlockPetBagBack::MergeFrom(const GCUnlockPetBagBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUnlockPetBagBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUnlockPetBagBack::CopyFrom(const GCUnlockPetBagBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUnlockPetBagBack::IsInitialized() const {

  return true;
}

void GCUnlockPetBagBack::Swap(GCUnlockPetBagBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUnlockPetBagBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUnlockPetBagBack_descriptor_;
  metadata.reflection = GCUnlockPetBagBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGBuyPet::kShopidFieldNumber;
#endif  // !_MSC_VER

CGBuyPet::CGBuyPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGBuyPet)
}

void CGBuyPet::InitAsDefaultInstance() {
}

CGBuyPet::CGBuyPet(const CGBuyPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGBuyPet)
}

void CGBuyPet::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGBuyPet::~CGBuyPet() {
  // @@protoc_insertion_point(destructor:CGBuyPet)
  SharedDtor();
}

void CGBuyPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGBuyPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGBuyPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGBuyPet_descriptor_;
}

const CGBuyPet& CGBuyPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGBuyPet* CGBuyPet::default_instance_ = NULL;

CGBuyPet* CGBuyPet::New() const {
  return new CGBuyPet;
}

void CGBuyPet::Clear() {
  shopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGBuyPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGBuyPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shopid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGBuyPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGBuyPet)
  return false;
#undef DO_
}

void CGBuyPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGBuyPet)
  // optional int32 shopid = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGBuyPet)
}

::google::protobuf::uint8* CGBuyPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGBuyPet)
  // optional int32 shopid = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGBuyPet)
  return target;
}

int CGBuyPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shopid = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGBuyPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGBuyPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGBuyPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGBuyPet::MergeFrom(const CGBuyPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGBuyPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGBuyPet::CopyFrom(const CGBuyPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGBuyPet::IsInitialized() const {

  return true;
}

void CGBuyPet::Swap(CGBuyPet* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGBuyPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGBuyPet_descriptor_;
  metadata.reflection = CGBuyPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCBuyPetBack::kFlagFieldNumber;
const int GCBuyPetBack::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCBuyPetBack::GCBuyPetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCBuyPetBack)
}

void GCBuyPetBack::InitAsDefaultInstance() {
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

GCBuyPetBack::GCBuyPetBack(const GCBuyPetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCBuyPetBack)
}

void GCBuyPetBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  petinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCBuyPetBack::~GCBuyPetBack() {
  // @@protoc_insertion_point(destructor:GCBuyPetBack)
  SharedDtor();
}

void GCBuyPetBack::SharedDtor() {
  if (this != default_instance_) {
    delete petinfo_;
  }
}

void GCBuyPetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCBuyPetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCBuyPetBack_descriptor_;
}

const GCBuyPetBack& GCBuyPetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCBuyPetBack* GCBuyPetBack::default_instance_ = NULL;

GCBuyPetBack* GCBuyPetBack::New() const {
  return new GCBuyPetBack;
}

void GCBuyPetBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCBuyPetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCBuyPetBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        break;
      }

      // optional .PetInfo petinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCBuyPetBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCBuyPetBack)
  return false;
#undef DO_
}

void GCBuyPetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCBuyPetBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCBuyPetBack)
}

::google::protobuf::uint8* GCBuyPetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCBuyPetBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCBuyPetBack)
  return target;
}

int GCBuyPetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .PetInfo petinfo = 2;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCBuyPetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCBuyPetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCBuyPetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCBuyPetBack::MergeFrom(const GCBuyPetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCBuyPetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCBuyPetBack::CopyFrom(const GCBuyPetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCBuyPetBack::IsInitialized() const {

  return true;
}

void GCBuyPetBack::Swap(GCBuyPetBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCBuyPetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCBuyPetBack_descriptor_;
  metadata.reflection = GCBuyPetBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLookPet::kPlayerUidFieldNumber;
#endif  // !_MSC_VER

CGLookPet::CGLookPet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLookPet)
}

void CGLookPet::InitAsDefaultInstance() {
}

CGLookPet::CGLookPet(const CGLookPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLookPet)
}

void CGLookPet::SharedCtor() {
  _cached_size_ = 0;
  playeruid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLookPet::~CGLookPet() {
  // @@protoc_insertion_point(destructor:CGLookPet)
  SharedDtor();
}

void CGLookPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLookPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLookPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLookPet_descriptor_;
}

const CGLookPet& CGLookPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGLookPet* CGLookPet::default_instance_ = NULL;

CGLookPet* CGLookPet::New() const {
  return new CGLookPet;
}

void CGLookPet::Clear() {
  playeruid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLookPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLookPet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playeruid_)));
          set_has_playeruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLookPet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLookPet)
  return false;
#undef DO_
}

void CGLookPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLookPet)
  // optional int64 playerUid = 1;
  if (has_playeruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playeruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLookPet)
}

::google::protobuf::uint8* CGLookPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLookPet)
  // optional int64 playerUid = 1;
  if (has_playeruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playeruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLookPet)
  return target;
}

int CGLookPet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerUid = 1;
    if (has_playeruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playeruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLookPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLookPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLookPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLookPet::MergeFrom(const CGLookPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeruid()) {
      set_playeruid(from.playeruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLookPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLookPet::CopyFrom(const CGLookPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLookPet::IsInitialized() const {

  return true;
}

void CGLookPet::Swap(CGLookPet* other) {
  if (other != this) {
    std::swap(playeruid_, other->playeruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLookPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLookPet_descriptor_;
  metadata.reflection = CGLookPet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLookPetBack::kFlagFieldNumber;
const int GCLookPetBack::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCLookPetBack::GCLookPetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLookPetBack)
}

void GCLookPetBack::InitAsDefaultInstance() {
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

GCLookPetBack::GCLookPetBack(const GCLookPetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLookPetBack)
}

void GCLookPetBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  petinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLookPetBack::~GCLookPetBack() {
  // @@protoc_insertion_point(destructor:GCLookPetBack)
  SharedDtor();
}

void GCLookPetBack::SharedDtor() {
  if (this != default_instance_) {
    delete petinfo_;
  }
}

void GCLookPetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLookPetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLookPetBack_descriptor_;
}

const GCLookPetBack& GCLookPetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCLookPetBack* GCLookPetBack::default_instance_ = NULL;

GCLookPetBack* GCLookPetBack::New() const {
  return new GCLookPetBack;
}

void GCLookPetBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLookPetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLookPetBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        break;
      }

      // optional .PetInfo petinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLookPetBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLookPetBack)
  return false;
#undef DO_
}

void GCLookPetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLookPetBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLookPetBack)
}

::google::protobuf::uint8* GCLookPetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLookPetBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLookPetBack)
  return target;
}

int GCLookPetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .PetInfo petinfo = 2;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLookPetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLookPetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLookPetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLookPetBack::MergeFrom(const GCLookPetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLookPetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLookPetBack::CopyFrom(const GCLookPetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLookPetBack::IsInitialized() const {

  return true;
}

void GCLookPetBack::Swap(GCLookPetBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLookPetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLookPetBack_descriptor_;
  metadata.reflection = GCLookPetBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdatePetInfo::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCUpdatePetInfo::GCUpdatePetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdatePetInfo)
}

void GCUpdatePetInfo::InitAsDefaultInstance() {
}

GCUpdatePetInfo::GCUpdatePetInfo(const GCUpdatePetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdatePetInfo)
}

void GCUpdatePetInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdatePetInfo::~GCUpdatePetInfo() {
  // @@protoc_insertion_point(destructor:GCUpdatePetInfo)
  SharedDtor();
}

void GCUpdatePetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdatePetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdatePetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdatePetInfo_descriptor_;
}

const GCUpdatePetInfo& GCUpdatePetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCUpdatePetInfo* GCUpdatePetInfo::default_instance_ = NULL;

GCUpdatePetInfo* GCUpdatePetInfo::New() const {
  return new GCUpdatePetInfo;
}

void GCUpdatePetInfo::Clear() {
  petinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdatePetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdatePetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PetInfo petinfo = 1;
      case 1: {
        if (tag == 10) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_petinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdatePetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdatePetInfo)
  return false;
#undef DO_
}

void GCUpdatePetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdatePetInfo)
  // repeated .PetInfo petinfo = 1;
  for (int i = 0; i < this->petinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdatePetInfo)
}

::google::protobuf::uint8* GCUpdatePetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdatePetInfo)
  // repeated .PetInfo petinfo = 1;
  for (int i = 0; i < this->petinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdatePetInfo)
  return target;
}

int GCUpdatePetInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PetInfo petinfo = 1;
  total_size += 1 * this->petinfo_size();
  for (int i = 0; i < this->petinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdatePetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdatePetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdatePetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdatePetInfo::MergeFrom(const GCUpdatePetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  petinfo_.MergeFrom(from.petinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdatePetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdatePetInfo::CopyFrom(const GCUpdatePetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdatePetInfo::IsInitialized() const {

  return true;
}

void GCUpdatePetInfo::Swap(GCUpdatePetInfo* other) {
  if (other != this) {
    petinfo_.Swap(&other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdatePetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdatePetInfo_descriptor_;
  metadata.reflection = GCUpdatePetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetEmbattleInfo::kLineFieldNumber;
const int PetEmbattleInfo::kPetidFieldNumber;
#endif  // !_MSC_VER

PetEmbattleInfo::PetEmbattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PetEmbattleInfo)
}

void PetEmbattleInfo::InitAsDefaultInstance() {
}

PetEmbattleInfo::PetEmbattleInfo(const PetEmbattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PetEmbattleInfo)
}

void PetEmbattleInfo::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetEmbattleInfo::~PetEmbattleInfo() {
  // @@protoc_insertion_point(destructor:PetEmbattleInfo)
  SharedDtor();
}

void PetEmbattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetEmbattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetEmbattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetEmbattleInfo_descriptor_;
}

const PetEmbattleInfo& PetEmbattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

PetEmbattleInfo* PetEmbattleInfo::default_instance_ = NULL;

PetEmbattleInfo* PetEmbattleInfo::New() const {
  return new PetEmbattleInfo;
}

void PetEmbattleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PetEmbattleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, line_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetEmbattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PetEmbattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 line = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int64 petid = 2;
      case 2: {
        if (tag == 16) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PetEmbattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PetEmbattleInfo)
  return false;
#undef DO_
}

void PetEmbattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PetEmbattleInfo)
  // optional int32 line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line(), output);
  }

  // optional int64 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PetEmbattleInfo)
}

::google::protobuf::uint8* PetEmbattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PetEmbattleInfo)
  // optional int32 line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line(), target);
  }

  // optional int64 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PetEmbattleInfo)
  return target;
}

int PetEmbattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional int64 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetEmbattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetEmbattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetEmbattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetEmbattleInfo::MergeFrom(const PetEmbattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetEmbattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetEmbattleInfo::CopyFrom(const PetEmbattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetEmbattleInfo::IsInitialized() const {

  return true;
}

void PetEmbattleInfo::Swap(PetEmbattleInfo* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetEmbattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetEmbattleInfo_descriptor_;
  metadata.reflection = PetEmbattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGPetEmbattle::CGPetEmbattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetEmbattle)
}

void CGPetEmbattle::InitAsDefaultInstance() {
}

CGPetEmbattle::CGPetEmbattle(const CGPetEmbattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetEmbattle)
}

void CGPetEmbattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetEmbattle::~CGPetEmbattle() {
  // @@protoc_insertion_point(destructor:CGPetEmbattle)
  SharedDtor();
}

void CGPetEmbattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetEmbattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetEmbattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetEmbattle_descriptor_;
}

const CGPetEmbattle& CGPetEmbattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetEmbattle* CGPetEmbattle::default_instance_ = NULL;

CGPetEmbattle* CGPetEmbattle::New() const {
  return new CGPetEmbattle;
}

void CGPetEmbattle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetEmbattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetEmbattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetEmbattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetEmbattle)
  return false;
#undef DO_
}

void CGPetEmbattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetEmbattle)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetEmbattle)
}

::google::protobuf::uint8* CGPetEmbattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetEmbattle)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetEmbattle)
  return target;
}

int CGPetEmbattle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetEmbattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetEmbattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetEmbattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetEmbattle::MergeFrom(const CGPetEmbattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetEmbattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetEmbattle::CopyFrom(const CGPetEmbattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetEmbattle::IsInitialized() const {

  return true;
}

void CGPetEmbattle::Swap(CGPetEmbattle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetEmbattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetEmbattle_descriptor_;
  metadata.reflection = CGPetEmbattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetEmbattleBack::kEmbattleInfoFieldNumber;
const int GCPetEmbattleBack::kPowerFieldNumber;
const int GCPetEmbattleBack::kMaxPowerFieldNumber;
const int GCPetEmbattleBack::kSkillGroupFieldNumber;
const int GCPetEmbattleBack::kCharAttrFieldNumber;
const int GCPetEmbattleBack::kPetAttrFieldNumber;
#endif  // !_MSC_VER

GCPetEmbattleBack::GCPetEmbattleBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetEmbattleBack)
}

void GCPetEmbattleBack::InitAsDefaultInstance() {
}

GCPetEmbattleBack::GCPetEmbattleBack(const GCPetEmbattleBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetEmbattleBack)
}

void GCPetEmbattleBack::SharedCtor() {
  _cached_size_ = 0;
  power_ = 0;
  maxpower_ = 0;
  skillgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetEmbattleBack::~GCPetEmbattleBack() {
  // @@protoc_insertion_point(destructor:GCPetEmbattleBack)
  SharedDtor();
}

void GCPetEmbattleBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetEmbattleBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetEmbattleBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetEmbattleBack_descriptor_;
}

const GCPetEmbattleBack& GCPetEmbattleBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetEmbattleBack* GCPetEmbattleBack::default_instance_ = NULL;

GCPetEmbattleBack* GCPetEmbattleBack::New() const {
  return new GCPetEmbattleBack;
}

void GCPetEmbattleBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPetEmbattleBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(power_, maxpower_);
    skillgroup_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  embattleinfo_.Clear();
  charattr_.Clear();
  petattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetEmbattleBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetEmbattleBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PetEmbattleInfo embattleInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_embattleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_embattleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_embattleInfo;
        if (input->ExpectTag(16)) goto parse_power;
        break;
      }

      // optional int32 power = 2;
      case 2: {
        if (tag == 16) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxPower;
        break;
      }

      // optional int32 maxPower = 3;
      case 3: {
        if (tag == 24) {
         parse_maxPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpower_)));
          set_has_maxpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillGroup;
        break;
      }

      // optional int32 skillGroup = 4;
      case 4: {
        if (tag == 32) {
         parse_skillGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillgroup_)));
          set_has_skillgroup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charAttr;
        break;
      }

      // repeated .CharacterAttr charAttr = 5;
      case 5: {
        if (tag == 42) {
         parse_charAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charAttr;
        if (input->ExpectTag(50)) goto parse_petAttr;
        break;
      }

      // repeated .PetAttr petAttr = 6;
      case 6: {
        if (tag == 50) {
         parse_petAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_petattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_petAttr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetEmbattleBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetEmbattleBack)
  return false;
#undef DO_
}

void GCPetEmbattleBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetEmbattleBack)
  // repeated .PetEmbattleInfo embattleInfo = 1;
  for (int i = 0; i < this->embattleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->embattleinfo(i), output);
  }

  // optional int32 power = 2;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->power(), output);
  }

  // optional int32 maxPower = 3;
  if (has_maxpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxpower(), output);
  }

  // optional int32 skillGroup = 4;
  if (has_skillgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillgroup(), output);
  }

  // repeated .CharacterAttr charAttr = 5;
  for (int i = 0; i < this->charattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->charattr(i), output);
  }

  // repeated .PetAttr petAttr = 6;
  for (int i = 0; i < this->petattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->petattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetEmbattleBack)
}

::google::protobuf::uint8* GCPetEmbattleBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetEmbattleBack)
  // repeated .PetEmbattleInfo embattleInfo = 1;
  for (int i = 0; i < this->embattleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->embattleinfo(i), target);
  }

  // optional int32 power = 2;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->power(), target);
  }

  // optional int32 maxPower = 3;
  if (has_maxpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxpower(), target);
  }

  // optional int32 skillGroup = 4;
  if (has_skillgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillgroup(), target);
  }

  // repeated .CharacterAttr charAttr = 5;
  for (int i = 0; i < this->charattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->charattr(i), target);
  }

  // repeated .PetAttr petAttr = 6;
  for (int i = 0; i < this->petattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->petattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetEmbattleBack)
  return target;
}

int GCPetEmbattleBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 power = 2;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 maxPower = 3;
    if (has_maxpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxpower());
    }

    // optional int32 skillGroup = 4;
    if (has_skillgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillgroup());
    }

  }
  // repeated .PetEmbattleInfo embattleInfo = 1;
  total_size += 1 * this->embattleinfo_size();
  for (int i = 0; i < this->embattleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->embattleinfo(i));
  }

  // repeated .CharacterAttr charAttr = 5;
  total_size += 1 * this->charattr_size();
  for (int i = 0; i < this->charattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charattr(i));
  }

  // repeated .PetAttr petAttr = 6;
  total_size += 1 * this->petattr_size();
  for (int i = 0; i < this->petattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->petattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetEmbattleBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetEmbattleBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetEmbattleBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetEmbattleBack::MergeFrom(const GCPetEmbattleBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  embattleinfo_.MergeFrom(from.embattleinfo_);
  charattr_.MergeFrom(from.charattr_);
  petattr_.MergeFrom(from.petattr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_maxpower()) {
      set_maxpower(from.maxpower());
    }
    if (from.has_skillgroup()) {
      set_skillgroup(from.skillgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetEmbattleBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetEmbattleBack::CopyFrom(const GCPetEmbattleBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetEmbattleBack::IsInitialized() const {

  return true;
}

void GCPetEmbattleBack::Swap(GCPetEmbattleBack* other) {
  if (other != this) {
    embattleinfo_.Swap(&other->embattleinfo_);
    std::swap(power_, other->power_);
    std::swap(maxpower_, other->maxpower_);
    std::swap(skillgroup_, other->skillgroup_);
    charattr_.Swap(&other->charattr_);
    petattr_.Swap(&other->petattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetEmbattleBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetEmbattleBack_descriptor_;
  metadata.reflection = GCPetEmbattleBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetEmbattleAddPower::kAutoPowerFieldNumber;
const int CGPetEmbattleAddPower::kNotUseBakMoneyFieldNumber;
#endif  // !_MSC_VER

CGPetEmbattleAddPower::CGPetEmbattleAddPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetEmbattleAddPower)
}

void CGPetEmbattleAddPower::InitAsDefaultInstance() {
}

CGPetEmbattleAddPower::CGPetEmbattleAddPower(const CGPetEmbattleAddPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetEmbattleAddPower)
}

void CGPetEmbattleAddPower::SharedCtor() {
  _cached_size_ = 0;
  autopower_ = 0;
  notusebakmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetEmbattleAddPower::~CGPetEmbattleAddPower() {
  // @@protoc_insertion_point(destructor:CGPetEmbattleAddPower)
  SharedDtor();
}

void CGPetEmbattleAddPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetEmbattleAddPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetEmbattleAddPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetEmbattleAddPower_descriptor_;
}

const CGPetEmbattleAddPower& CGPetEmbattleAddPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetEmbattleAddPower* CGPetEmbattleAddPower::default_instance_ = NULL;

CGPetEmbattleAddPower* CGPetEmbattleAddPower::New() const {
  return new CGPetEmbattleAddPower;
}

void CGPetEmbattleAddPower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetEmbattleAddPower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(autopower_, notusebakmoney_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetEmbattleAddPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetEmbattleAddPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoPower = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autopower_)));
          set_has_autopower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_notUseBakMoney;
        break;
      }

      // optional int32 notUseBakMoney = 2;
      case 2: {
        if (tag == 16) {
         parse_notUseBakMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notusebakmoney_)));
          set_has_notusebakmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetEmbattleAddPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetEmbattleAddPower)
  return false;
#undef DO_
}

void CGPetEmbattleAddPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetEmbattleAddPower)
  // optional int32 autoPower = 1;
  if (has_autopower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autopower(), output);
  }

  // optional int32 notUseBakMoney = 2;
  if (has_notusebakmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->notusebakmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetEmbattleAddPower)
}

::google::protobuf::uint8* CGPetEmbattleAddPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetEmbattleAddPower)
  // optional int32 autoPower = 1;
  if (has_autopower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autopower(), target);
  }

  // optional int32 notUseBakMoney = 2;
  if (has_notusebakmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->notusebakmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetEmbattleAddPower)
  return target;
}

int CGPetEmbattleAddPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoPower = 1;
    if (has_autopower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autopower());
    }

    // optional int32 notUseBakMoney = 2;
    if (has_notusebakmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notusebakmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetEmbattleAddPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetEmbattleAddPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetEmbattleAddPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetEmbattleAddPower::MergeFrom(const CGPetEmbattleAddPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autopower()) {
      set_autopower(from.autopower());
    }
    if (from.has_notusebakmoney()) {
      set_notusebakmoney(from.notusebakmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetEmbattleAddPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetEmbattleAddPower::CopyFrom(const CGPetEmbattleAddPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetEmbattleAddPower::IsInitialized() const {

  return true;
}

void CGPetEmbattleAddPower::Swap(CGPetEmbattleAddPower* other) {
  if (other != this) {
    std::swap(autopower_, other->autopower_);
    std::swap(notusebakmoney_, other->notusebakmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetEmbattleAddPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetEmbattleAddPower_descriptor_;
  metadata.reflection = CGPetEmbattleAddPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetGoupEmbattle::kLineFieldNumber;
const int CGPetGoupEmbattle::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetGoupEmbattle::CGPetGoupEmbattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetGoupEmbattle)
}

void CGPetGoupEmbattle::InitAsDefaultInstance() {
}

CGPetGoupEmbattle::CGPetGoupEmbattle(const CGPetGoupEmbattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetGoupEmbattle)
}

void CGPetGoupEmbattle::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetGoupEmbattle::~CGPetGoupEmbattle() {
  // @@protoc_insertion_point(destructor:CGPetGoupEmbattle)
  SharedDtor();
}

void CGPetGoupEmbattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetGoupEmbattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetGoupEmbattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetGoupEmbattle_descriptor_;
}

const CGPetGoupEmbattle& CGPetGoupEmbattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetGoupEmbattle* CGPetGoupEmbattle::default_instance_ = NULL;

CGPetGoupEmbattle* CGPetGoupEmbattle::New() const {
  return new CGPetGoupEmbattle;
}

void CGPetGoupEmbattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPetGoupEmbattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, line_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetGoupEmbattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetGoupEmbattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 line = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petid;
        break;
      }

      // optional int64 petid = 2;
      case 2: {
        if (tag == 16) {
         parse_petid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetGoupEmbattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetGoupEmbattle)
  return false;
#undef DO_
}

void CGPetGoupEmbattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetGoupEmbattle)
  // optional int32 line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line(), output);
  }

  // optional int64 petid = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetGoupEmbattle)
}

::google::protobuf::uint8* CGPetGoupEmbattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetGoupEmbattle)
  // optional int32 line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line(), target);
  }

  // optional int64 petid = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetGoupEmbattle)
  return target;
}

int CGPetGoupEmbattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional int64 petid = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetGoupEmbattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetGoupEmbattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetGoupEmbattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetGoupEmbattle::MergeFrom(const CGPetGoupEmbattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetGoupEmbattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetGoupEmbattle::CopyFrom(const CGPetGoupEmbattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetGoupEmbattle::IsInitialized() const {

  return true;
}

void CGPetGoupEmbattle::Swap(CGPetGoupEmbattle* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetGoupEmbattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetGoupEmbattle_descriptor_;
  metadata.reflection = CGPetGoupEmbattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetEmbattleSkill::kSkilldataFieldNumber;
#endif  // !_MSC_VER

GCPetEmbattleSkill::GCPetEmbattleSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetEmbattleSkill)
}

void GCPetEmbattleSkill::InitAsDefaultInstance() {
}

GCPetEmbattleSkill::GCPetEmbattleSkill(const GCPetEmbattleSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetEmbattleSkill)
}

void GCPetEmbattleSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetEmbattleSkill::~GCPetEmbattleSkill() {
  // @@protoc_insertion_point(destructor:GCPetEmbattleSkill)
  SharedDtor();
}

void GCPetEmbattleSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetEmbattleSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetEmbattleSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetEmbattleSkill_descriptor_;
}

const GCPetEmbattleSkill& GCPetEmbattleSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetEmbattleSkill* GCPetEmbattleSkill::default_instance_ = NULL;

GCPetEmbattleSkill* GCPetEmbattleSkill::New() const {
  return new GCPetEmbattleSkill;
}

void GCPetEmbattleSkill::Clear() {
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetEmbattleSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetEmbattleSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillItemData skilldata = 1;
      case 1: {
        if (tag == 10) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skilldata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetEmbattleSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetEmbattleSkill)
  return false;
#undef DO_
}

void GCPetEmbattleSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetEmbattleSkill)
  // repeated .SkillItemData skilldata = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetEmbattleSkill)
}

::google::protobuf::uint8* GCPetEmbattleSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetEmbattleSkill)
  // repeated .SkillItemData skilldata = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetEmbattleSkill)
  return target;
}

int GCPetEmbattleSkill::ByteSize() const {
  int total_size = 0;

  // repeated .SkillItemData skilldata = 1;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetEmbattleSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetEmbattleSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetEmbattleSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetEmbattleSkill::MergeFrom(const GCPetEmbattleSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetEmbattleSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetEmbattleSkill::CopyFrom(const GCPetEmbattleSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetEmbattleSkill::IsInitialized() const {

  return true;
}

void GCPetEmbattleSkill::Swap(GCPetEmbattleSkill* other) {
  if (other != this) {
    skilldata_.Swap(&other->skilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetEmbattleSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetEmbattleSkill_descriptor_;
  metadata.reflection = GCPetEmbattleSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetEmbattleAddPowerBack::kAutoPowerFieldNumber;
const int GCPetEmbattleAddPowerBack::kFlagFieldNumber;
#endif  // !_MSC_VER

GCPetEmbattleAddPowerBack::GCPetEmbattleAddPowerBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetEmbattleAddPowerBack)
}

void GCPetEmbattleAddPowerBack::InitAsDefaultInstance() {
}

GCPetEmbattleAddPowerBack::GCPetEmbattleAddPowerBack(const GCPetEmbattleAddPowerBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetEmbattleAddPowerBack)
}

void GCPetEmbattleAddPowerBack::SharedCtor() {
  _cached_size_ = 0;
  autopower_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetEmbattleAddPowerBack::~GCPetEmbattleAddPowerBack() {
  // @@protoc_insertion_point(destructor:GCPetEmbattleAddPowerBack)
  SharedDtor();
}

void GCPetEmbattleAddPowerBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetEmbattleAddPowerBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetEmbattleAddPowerBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetEmbattleAddPowerBack_descriptor_;
}

const GCPetEmbattleAddPowerBack& GCPetEmbattleAddPowerBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetEmbattleAddPowerBack* GCPetEmbattleAddPowerBack::default_instance_ = NULL;

GCPetEmbattleAddPowerBack* GCPetEmbattleAddPowerBack::New() const {
  return new GCPetEmbattleAddPowerBack;
}

void GCPetEmbattleAddPowerBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPetEmbattleAddPowerBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(autopower_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetEmbattleAddPowerBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetEmbattleAddPowerBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 autoPower = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autopower_)));
          set_has_autopower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetEmbattleAddPowerBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetEmbattleAddPowerBack)
  return false;
#undef DO_
}

void GCPetEmbattleAddPowerBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetEmbattleAddPowerBack)
  // optional int32 autoPower = 1;
  if (has_autopower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->autopower(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetEmbattleAddPowerBack)
}

::google::protobuf::uint8* GCPetEmbattleAddPowerBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetEmbattleAddPowerBack)
  // optional int32 autoPower = 1;
  if (has_autopower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->autopower(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetEmbattleAddPowerBack)
  return target;
}

int GCPetEmbattleAddPowerBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 autoPower = 1;
    if (has_autopower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autopower());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetEmbattleAddPowerBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetEmbattleAddPowerBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetEmbattleAddPowerBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetEmbattleAddPowerBack::MergeFrom(const GCPetEmbattleAddPowerBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autopower()) {
      set_autopower(from.autopower());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetEmbattleAddPowerBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetEmbattleAddPowerBack::CopyFrom(const GCPetEmbattleAddPowerBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetEmbattleAddPowerBack::IsInitialized() const {

  return true;
}

void GCPetEmbattleAddPowerBack::Swap(GCPetEmbattleAddPowerBack* other) {
  if (other != this) {
    std::swap(autopower_, other->autopower_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetEmbattleAddPowerBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetEmbattleAddPowerBack_descriptor_;
  metadata.reflection = GCPetEmbattleAddPowerBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetChangeCharacter::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetChangeCharacter::CGPetChangeCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetChangeCharacter)
}

void CGPetChangeCharacter::InitAsDefaultInstance() {
}

CGPetChangeCharacter::CGPetChangeCharacter(const CGPetChangeCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetChangeCharacter)
}

void CGPetChangeCharacter::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetChangeCharacter::~CGPetChangeCharacter() {
  // @@protoc_insertion_point(destructor:CGPetChangeCharacter)
  SharedDtor();
}

void CGPetChangeCharacter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetChangeCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetChangeCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetChangeCharacter_descriptor_;
}

const CGPetChangeCharacter& CGPetChangeCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetChangeCharacter* CGPetChangeCharacter::default_instance_ = NULL;

CGPetChangeCharacter* CGPetChangeCharacter::New() const {
  return new CGPetChangeCharacter;
}

void CGPetChangeCharacter::Clear() {
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetChangeCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetChangeCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetChangeCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetChangeCharacter)
  return false;
#undef DO_
}

void CGPetChangeCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetChangeCharacter)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetChangeCharacter)
}

::google::protobuf::uint8* CGPetChangeCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetChangeCharacter)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetChangeCharacter)
  return target;
}

int CGPetChangeCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetChangeCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetChangeCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetChangeCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetChangeCharacter::MergeFrom(const CGPetChangeCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetChangeCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetChangeCharacter::CopyFrom(const CGPetChangeCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetChangeCharacter::IsInitialized() const {

  return true;
}

void CGPetChangeCharacter::Swap(CGPetChangeCharacter* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetChangeCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetChangeCharacter_descriptor_;
  metadata.reflection = CGPetChangeCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetChangeCharacterBack::kPetidFieldNumber;
const int GCPetChangeCharacterBack::kFlagFieldNumber;
const int GCPetChangeCharacterBack::kNewCharacterFieldNumber;
#endif  // !_MSC_VER

GCPetChangeCharacterBack::GCPetChangeCharacterBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetChangeCharacterBack)
}

void GCPetChangeCharacterBack::InitAsDefaultInstance() {
}

GCPetChangeCharacterBack::GCPetChangeCharacterBack(const GCPetChangeCharacterBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetChangeCharacterBack)
}

void GCPetChangeCharacterBack::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  flag_ = 0;
  newcharacter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetChangeCharacterBack::~GCPetChangeCharacterBack() {
  // @@protoc_insertion_point(destructor:GCPetChangeCharacterBack)
  SharedDtor();
}

void GCPetChangeCharacterBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPetChangeCharacterBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetChangeCharacterBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetChangeCharacterBack_descriptor_;
}

const GCPetChangeCharacterBack& GCPetChangeCharacterBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetChangeCharacterBack* GCPetChangeCharacterBack::default_instance_ = NULL;

GCPetChangeCharacterBack* GCPetChangeCharacterBack::New() const {
  return new GCPetChangeCharacterBack;
}

void GCPetChangeCharacterBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPetChangeCharacterBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(petid_, newcharacter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetChangeCharacterBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetChangeCharacterBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_newCharacter;
        break;
      }

      // optional int32 newCharacter = 3;
      case 3: {
        if (tag == 24) {
         parse_newCharacter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newcharacter_)));
          set_has_newcharacter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetChangeCharacterBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetChangeCharacterBack)
  return false;
#undef DO_
}

void GCPetChangeCharacterBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetChangeCharacterBack)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int32 newCharacter = 3;
  if (has_newcharacter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->newcharacter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetChangeCharacterBack)
}

::google::protobuf::uint8* GCPetChangeCharacterBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetChangeCharacterBack)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional int32 newCharacter = 3;
  if (has_newcharacter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->newcharacter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetChangeCharacterBack)
  return target;
}

int GCPetChangeCharacterBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 newCharacter = 3;
    if (has_newcharacter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newcharacter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetChangeCharacterBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetChangeCharacterBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetChangeCharacterBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetChangeCharacterBack::MergeFrom(const GCPetChangeCharacterBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_newcharacter()) {
      set_newcharacter(from.newcharacter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetChangeCharacterBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetChangeCharacterBack::CopyFrom(const GCPetChangeCharacterBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetChangeCharacterBack::IsInitialized() const {

  return true;
}

void GCPetChangeCharacterBack::Swap(GCPetChangeCharacterBack* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(flag_, other->flag_);
    std::swap(newcharacter_, other->newcharacter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetChangeCharacterBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetChangeCharacterBack_descriptor_;
  metadata.reflection = GCPetChangeCharacterBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPetSaveNewCharacter::kPetidFieldNumber;
#endif  // !_MSC_VER

CGPetSaveNewCharacter::CGPetSaveNewCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPetSaveNewCharacter)
}

void CGPetSaveNewCharacter::InitAsDefaultInstance() {
}

CGPetSaveNewCharacter::CGPetSaveNewCharacter(const CGPetSaveNewCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPetSaveNewCharacter)
}

void CGPetSaveNewCharacter::SharedCtor() {
  _cached_size_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPetSaveNewCharacter::~CGPetSaveNewCharacter() {
  // @@protoc_insertion_point(destructor:CGPetSaveNewCharacter)
  SharedDtor();
}

void CGPetSaveNewCharacter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPetSaveNewCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPetSaveNewCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPetSaveNewCharacter_descriptor_;
}

const CGPetSaveNewCharacter& CGPetSaveNewCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

CGPetSaveNewCharacter* CGPetSaveNewCharacter::default_instance_ = NULL;

CGPetSaveNewCharacter* CGPetSaveNewCharacter::New() const {
  return new CGPetSaveNewCharacter;
}

void CGPetSaveNewCharacter::Clear() {
  petid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPetSaveNewCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPetSaveNewCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 petid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPetSaveNewCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPetSaveNewCharacter)
  return false;
#undef DO_
}

void CGPetSaveNewCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPetSaveNewCharacter)
  // optional int64 petid = 1;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->petid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPetSaveNewCharacter)
}

::google::protobuf::uint8* CGPetSaveNewCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPetSaveNewCharacter)
  // optional int64 petid = 1;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->petid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPetSaveNewCharacter)
  return target;
}

int CGPetSaveNewCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 petid = 1;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPetSaveNewCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPetSaveNewCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPetSaveNewCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPetSaveNewCharacter::MergeFrom(const CGPetSaveNewCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petid()) {
      set_petid(from.petid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPetSaveNewCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPetSaveNewCharacter::CopyFrom(const CGPetSaveNewCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPetSaveNewCharacter::IsInitialized() const {

  return true;
}

void CGPetSaveNewCharacter::Swap(CGPetSaveNewCharacter* other) {
  if (other != this) {
    std::swap(petid_, other->petid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPetSaveNewCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPetSaveNewCharacter_descriptor_;
  metadata.reflection = CGPetSaveNewCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPetSaveNewCharacterBack::kFlagFieldNumber;
const int GCPetSaveNewCharacterBack::kPetinfoFieldNumber;
#endif  // !_MSC_VER

GCPetSaveNewCharacterBack::GCPetSaveNewCharacterBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPetSaveNewCharacterBack)
}

void GCPetSaveNewCharacterBack::InitAsDefaultInstance() {
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

GCPetSaveNewCharacterBack::GCPetSaveNewCharacterBack(const GCPetSaveNewCharacterBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPetSaveNewCharacterBack)
}

void GCPetSaveNewCharacterBack::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  petinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPetSaveNewCharacterBack::~GCPetSaveNewCharacterBack() {
  // @@protoc_insertion_point(destructor:GCPetSaveNewCharacterBack)
  SharedDtor();
}

void GCPetSaveNewCharacterBack::SharedDtor() {
  if (this != default_instance_) {
    delete petinfo_;
  }
}

void GCPetSaveNewCharacterBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPetSaveNewCharacterBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPetSaveNewCharacterBack_descriptor_;
}

const GCPetSaveNewCharacterBack& GCPetSaveNewCharacterBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PetMessage_2eproto();
  return *default_instance_;
}

GCPetSaveNewCharacterBack* GCPetSaveNewCharacterBack::default_instance_ = NULL;

GCPetSaveNewCharacterBack* GCPetSaveNewCharacterBack::New() const {
  return new GCPetSaveNewCharacterBack;
}

void GCPetSaveNewCharacterBack::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPetSaveNewCharacterBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPetSaveNewCharacterBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petinfo;
        break;
      }

      // optional .PetInfo petinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPetSaveNewCharacterBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPetSaveNewCharacterBack)
  return false;
#undef DO_
}

void GCPetSaveNewCharacterBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPetSaveNewCharacterBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPetSaveNewCharacterBack)
}

::google::protobuf::uint8* GCPetSaveNewCharacterBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPetSaveNewCharacterBack)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .PetInfo petinfo = 2;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPetSaveNewCharacterBack)
  return target;
}

int GCPetSaveNewCharacterBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .PetInfo petinfo = 2;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPetSaveNewCharacterBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPetSaveNewCharacterBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPetSaveNewCharacterBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPetSaveNewCharacterBack::MergeFrom(const GCPetSaveNewCharacterBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPetSaveNewCharacterBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPetSaveNewCharacterBack::CopyFrom(const GCPetSaveNewCharacterBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPetSaveNewCharacterBack::IsInitialized() const {

  return true;
}

void GCPetSaveNewCharacterBack::Swap(GCPetSaveNewCharacterBack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPetSaveNewCharacterBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPetSaveNewCharacterBack_descriptor_;
  metadata.reflection = GCPetSaveNewCharacterBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
