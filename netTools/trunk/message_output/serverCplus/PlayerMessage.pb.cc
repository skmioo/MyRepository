// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GCCharacterFaceTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharacterFaceTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPlayerDie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPlayerDie_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGReqPlayerReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGReqPlayerReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPlayerReborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPlayerReborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUpdatePlayerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUpdatePlayerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdatePlayerNameOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdatePlayerNameOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendHeadIconList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendHeadIconList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUpdatePlayerHeadIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUpdatePlayerHeadIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateHeadIconOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateHeadIconOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGReLoginGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGReLoginGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCReLoginGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCReLoginGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendSkillList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendSkillList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPlayerHangup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPlayerHangup_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPlayerHangup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPlayerHangup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSendRotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSendRotate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendRotate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendRotate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPlaerInfoById_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPlaerInfoById_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendPlayerInfoById_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendPlayerInfoById_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLevelUpGetNewSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLevelUpGetNewSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPlayerAndPetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPlayerAndPetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendPlayerAndPetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendPlayerAndPetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChangePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChangePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangePlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangePlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCStressTestBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCStressTestBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGPlayerViewSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGPlayerViewSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPlayerViewSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPlayerViewSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGQuitLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGQuitLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCQuitLoginBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCQuitLoginBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMuteTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMuteTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameForceLoginout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameForceLoginout_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCExpPlus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCExpPlus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCNonageSts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCNonageSts_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNeedNonage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNeedNonage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOnLineTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOnLineTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGAmbitLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGAmbitLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAmbitLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAmbitLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPrivatePlayerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPrivatePlayerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUnLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUnLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGLookPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGLookPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCLookPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCLookPlayerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayerMessage_2eproto() {
  protobuf_AddDesc_PlayerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GCCharacterFaceTo_descriptor_ = file->message_type(0);
  static const int GCCharacterFaceTo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterFaceTo, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterFaceTo, facetoobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterFaceTo, facetopos_),
  };
  GCCharacterFaceTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharacterFaceTo_descriptor_,
      GCCharacterFaceTo::default_instance_,
      GCCharacterFaceTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterFaceTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterFaceTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharacterFaceTo));
  GCPlayerDie_descriptor_ = file->message_type(1);
  static const int GCPlayerDie_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, dietime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, reborntiem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, kimbdnum_),
  };
  GCPlayerDie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPlayerDie_descriptor_,
      GCPlayerDie::default_instance_,
      GCPlayerDie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerDie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPlayerDie));
  CGReqPlayerReborn_descriptor_ = file->message_type(2);
  static const int CGReqPlayerReborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReqPlayerReborn, type_),
  };
  CGReqPlayerReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGReqPlayerReborn_descriptor_,
      CGReqPlayerReborn::default_instance_,
      CGReqPlayerReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReqPlayerReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReqPlayerReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGReqPlayerReborn));
  GCPlayerReborn_descriptor_ = file->message_type(3);
  static const int GCPlayerReborn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerReborn, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerReborn, objectid_),
  };
  GCPlayerReborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPlayerReborn_descriptor_,
      GCPlayerReborn::default_instance_,
      GCPlayerReborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerReborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerReborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPlayerReborn));
  CGUpdatePlayerName_descriptor_ = file->message_type(4);
  static const int CGUpdatePlayerName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerName, name_),
  };
  CGUpdatePlayerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUpdatePlayerName_descriptor_,
      CGUpdatePlayerName::default_instance_,
      CGUpdatePlayerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUpdatePlayerName));
  GCUpdatePlayerNameOK_descriptor_ = file->message_type(5);
  static const int GCUpdatePlayerNameOK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePlayerNameOK, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePlayerNameOK, newname_),
  };
  GCUpdatePlayerNameOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdatePlayerNameOK_descriptor_,
      GCUpdatePlayerNameOK::default_instance_,
      GCUpdatePlayerNameOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePlayerNameOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdatePlayerNameOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdatePlayerNameOK));
  GCSendHeadIconList_descriptor_ = file->message_type(6);
  static const int GCSendHeadIconList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendHeadIconList, iconlist_),
  };
  GCSendHeadIconList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendHeadIconList_descriptor_,
      GCSendHeadIconList::default_instance_,
      GCSendHeadIconList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendHeadIconList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendHeadIconList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendHeadIconList));
  CGUpdatePlayerHeadIcon_descriptor_ = file->message_type(7);
  static const int CGUpdatePlayerHeadIcon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerHeadIcon, iconid_),
  };
  CGUpdatePlayerHeadIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUpdatePlayerHeadIcon_descriptor_,
      CGUpdatePlayerHeadIcon::default_instance_,
      CGUpdatePlayerHeadIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerHeadIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpdatePlayerHeadIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUpdatePlayerHeadIcon));
  GCUpdateHeadIconOK_descriptor_ = file->message_type(8);
  static const int GCUpdateHeadIconOK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateHeadIconOK, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateHeadIconOK, headicon_),
  };
  GCUpdateHeadIconOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateHeadIconOK_descriptor_,
      GCUpdateHeadIconOK::default_instance_,
      GCUpdateHeadIconOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateHeadIconOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateHeadIconOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateHeadIconOK));
  CGReLoginGameServer_descriptor_ = file->message_type(9);
  static const int CGReLoginGameServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, currsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, authkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, sceneloading_),
  };
  CGReLoginGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGReLoginGameServer_descriptor_,
      CGReLoginGameServer::default_instance_,
      CGReLoginGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGReLoginGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGReLoginGameServer));
  GCReLoginGameServer_descriptor_ = file->message_type(10);
  static const int GCReLoginGameServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLoginGameServer, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLoginGameServer, eniqueid_),
  };
  GCReLoginGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCReLoginGameServer_descriptor_,
      GCReLoginGameServer::default_instance_,
      GCReLoginGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLoginGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCReLoginGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCReLoginGameServer));
  GCSendSkillList_descriptor_ = file->message_type(11);
  static const int GCSendSkillList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, isfirstlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, shenqiskilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, skillflag_),
  };
  GCSendSkillList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendSkillList_descriptor_,
      GCSendSkillList::default_instance_,
      GCSendSkillList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendSkillList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendSkillList));
  CGPlayerHangup_descriptor_ = file->message_type(12);
  static const int CGPlayerHangup_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, autorenorn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, avoiboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, attackback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, picktypeindexs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, pickquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, autoskills_),
  };
  CGPlayerHangup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPlayerHangup_descriptor_,
      CGPlayerHangup::default_instance_,
      CGPlayerHangup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerHangup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPlayerHangup));
  GCPlayerHangup_descriptor_ = file->message_type(13);
  static const int GCPlayerHangup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerHangup, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerHangup, open_),
  };
  GCPlayerHangup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPlayerHangup_descriptor_,
      GCPlayerHangup::default_instance_,
      GCPlayerHangup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerHangup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerHangup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPlayerHangup));
  CGSendRotate_descriptor_ = file->message_type(14);
  static const int CGSendRotate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendRotate, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendRotate, rotate_),
  };
  CGSendRotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSendRotate_descriptor_,
      CGSendRotate::default_instance_,
      CGSendRotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendRotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendRotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSendRotate));
  GCSendRotate_descriptor_ = file->message_type(15);
  static const int GCSendRotate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendRotate, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendRotate, rotate_),
  };
  GCSendRotate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendRotate_descriptor_,
      GCSendRotate::default_instance_,
      GCSendRotate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendRotate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendRotate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendRotate));
  CGGetPlaerInfoById_descriptor_ = file->message_type(16);
  static const int CGGetPlaerInfoById_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlaerInfoById, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlaerInfoById, type_),
  };
  CGGetPlaerInfoById_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPlaerInfoById_descriptor_,
      CGGetPlaerInfoById::default_instance_,
      CGGetPlaerInfoById_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlaerInfoById, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlaerInfoById, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPlaerInfoById));
  GCSendPlayerInfoById_descriptor_ = file->message_type(17);
  static const int GCSendPlayerInfoById_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerInfoById, characterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerInfoById, type_),
  };
  GCSendPlayerInfoById_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendPlayerInfoById_descriptor_,
      GCSendPlayerInfoById::default_instance_,
      GCSendPlayerInfoById_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerInfoById, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerInfoById, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendPlayerInfoById));
  GCLevelUpGetNewSkill_descriptor_ = file->message_type(18);
  static const int GCLevelUpGetNewSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelUpGetNewSkill, skilldata_),
  };
  GCLevelUpGetNewSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLevelUpGetNewSkill_descriptor_,
      GCLevelUpGetNewSkill::default_instance_,
      GCLevelUpGetNewSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelUpGetNewSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLevelUpGetNewSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLevelUpGetNewSkill));
  CGGetPlayerAndPetInfo_descriptor_ = file->message_type(19);
  static const int CGGetPlayerAndPetInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlayerAndPetInfo, playerid_),
  };
  CGGetPlayerAndPetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPlayerAndPetInfo_descriptor_,
      CGGetPlayerAndPetInfo::default_instance_,
      CGGetPlayerAndPetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlayerAndPetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPlayerAndPetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPlayerAndPetInfo));
  GCSendPlayerAndPetInfo_descriptor_ = file->message_type(20);
  static const int GCSendPlayerAndPetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerAndPetInfo, characterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerAndPetInfo, petinfo_),
  };
  GCSendPlayerAndPetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendPlayerAndPetInfo_descriptor_,
      GCSendPlayerAndPetInfo::default_instance_,
      GCSendPlayerAndPetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerAndPetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPlayerAndPetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendPlayerAndPetInfo));
  CGChangePlayer_descriptor_ = file->message_type(21);
  static const int CGChangePlayer_offsets_[1] = {
  };
  CGChangePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChangePlayer_descriptor_,
      CGChangePlayer::default_instance_,
      CGChangePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChangePlayer));
  GCChangePlayerResult_descriptor_ = file->message_type(22);
  static const int GCChangePlayerResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangePlayerResult, result_),
  };
  GCChangePlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangePlayerResult_descriptor_,
      GCChangePlayerResult::default_instance_,
      GCChangePlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangePlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangePlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangePlayerResult));
  GCStressTestBegin_descriptor_ = file->message_type(23);
  static const int GCStressTestBegin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStressTestBegin, playerid_),
  };
  GCStressTestBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCStressTestBegin_descriptor_,
      GCStressTestBegin::default_instance_,
      GCStressTestBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStressTestBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStressTestBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCStressTestBegin));
  CGPlayerViewSetting_descriptor_ = file->message_type(24);
  static const int CGPlayerViewSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerViewSetting, maxnum_),
  };
  CGPlayerViewSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGPlayerViewSetting_descriptor_,
      CGPlayerViewSetting::default_instance_,
      CGPlayerViewSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerViewSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGPlayerViewSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGPlayerViewSetting));
  GCPlayerViewSetting_descriptor_ = file->message_type(25);
  static const int GCPlayerViewSetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerViewSetting, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerViewSetting, maxnum_),
  };
  GCPlayerViewSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPlayerViewSetting_descriptor_,
      GCPlayerViewSetting::default_instance_,
      GCPlayerViewSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerViewSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPlayerViewSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPlayerViewSetting));
  CGQuitLogin_descriptor_ = file->message_type(26);
  static const int CGQuitLogin_offsets_[1] = {
  };
  CGQuitLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGQuitLogin_descriptor_,
      CGQuitLogin::default_instance_,
      CGQuitLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuitLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQuitLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGQuitLogin));
  GCQuitLoginBack_descriptor_ = file->message_type(27);
  static const int GCQuitLoginBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuitLoginBack, result_),
  };
  GCQuitLoginBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCQuitLoginBack_descriptor_,
      GCQuitLoginBack::default_instance_,
      GCQuitLoginBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuitLoginBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQuitLoginBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCQuitLoginBack));
  GCMuteTime_descriptor_ = file->message_type(28);
  static const int GCMuteTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteTime, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteTime, mutetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteTime, muteendtime_),
  };
  GCMuteTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMuteTime_descriptor_,
      GCMuteTime::default_instance_,
      GCMuteTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMuteTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMuteTime));
  GameForceLoginout_descriptor_ = file->message_type(29);
  static const int GameForceLoginout_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, noticeloginsvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, noticegatesvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, reason_),
  };
  GameForceLoginout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameForceLoginout_descriptor_,
      GameForceLoginout::default_instance_,
      GameForceLoginout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameForceLoginout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameForceLoginout));
  GCExpPlus_descriptor_ = file->message_type(30);
  static const int GCExpPlus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpPlus, display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpPlus, worldlevel_),
  };
  GCExpPlus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCExpPlus_descriptor_,
      GCExpPlus::default_instance_,
      GCExpPlus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpPlus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCExpPlus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCExpPlus));
  GCNonageSts_descriptor_ = file->message_type(31);
  static const int GCNonageSts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNonageSts, sts_),
  };
  GCNonageSts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCNonageSts_descriptor_,
      GCNonageSts::default_instance_,
      GCNonageSts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNonageSts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCNonageSts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCNonageSts));
  CGNeedNonage_descriptor_ = file->message_type(32);
  static const int CGNeedNonage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNeedNonage, sts_),
  };
  CGNeedNonage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNeedNonage_descriptor_,
      CGNeedNonage::default_instance_,
      CGNeedNonage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNeedNonage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNeedNonage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNeedNonage));
  GCOnLineTime_descriptor_ = file->message_type(33);
  static const int GCOnLineTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnLineTime, senconds_),
  };
  GCOnLineTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOnLineTime_descriptor_,
      GCOnLineTime::default_instance_,
      GCOnLineTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnLineTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOnLineTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOnLineTime));
  CGAmbitLevelUp_descriptor_ = file->message_type(34);
  static const int CGAmbitLevelUp_offsets_[1] = {
  };
  CGAmbitLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGAmbitLevelUp_descriptor_,
      CGAmbitLevelUp::default_instance_,
      CGAmbitLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAmbitLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGAmbitLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGAmbitLevelUp));
  GCAmbitLevelUp_descriptor_ = file->message_type(35);
  static const int GCAmbitLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAmbitLevelUp, ambitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAmbitLevelUp, ambitstatus_),
  };
  GCAmbitLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAmbitLevelUp_descriptor_,
      GCAmbitLevelUp::default_instance_,
      GCAmbitLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAmbitLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAmbitLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAmbitLevelUp));
  GCPrivatePlayerAttr_descriptor_ = file->message_type(36);
  static const int GCPrivatePlayerAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPrivatePlayerAttr, charattr_),
  };
  GCPrivatePlayerAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPrivatePlayerAttr_descriptor_,
      GCPrivatePlayerAttr::default_instance_,
      GCPrivatePlayerAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPrivatePlayerAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPrivatePlayerAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPrivatePlayerAttr));
  CGUnLock_descriptor_ = file->message_type(37);
  static const int CGUnLock_offsets_[1] = {
  };
  CGUnLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUnLock_descriptor_,
      CGUnLock::default_instance_,
      CGUnLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUnLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUnLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUnLock));
  CGLookPlayerInfo_descriptor_ = file->message_type(38);
  static const int CGLookPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPlayerInfo, pid_),
  };
  CGLookPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGLookPlayerInfo_descriptor_,
      CGLookPlayerInfo::default_instance_,
      CGLookPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGLookPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGLookPlayerInfo));
  GCLookPlayerInfo_descriptor_ = file->message_type(39);
  static const int GCLookPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, equipslots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, sbinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, talisslots_),
  };
  GCLookPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCLookPlayerInfo_descriptor_,
      GCLookPlayerInfo::default_instance_,
      GCLookPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCLookPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCLookPlayerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharacterFaceTo_descriptor_, &GCCharacterFaceTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPlayerDie_descriptor_, &GCPlayerDie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGReqPlayerReborn_descriptor_, &CGReqPlayerReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPlayerReborn_descriptor_, &GCPlayerReborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUpdatePlayerName_descriptor_, &CGUpdatePlayerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdatePlayerNameOK_descriptor_, &GCUpdatePlayerNameOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendHeadIconList_descriptor_, &GCSendHeadIconList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUpdatePlayerHeadIcon_descriptor_, &CGUpdatePlayerHeadIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateHeadIconOK_descriptor_, &GCUpdateHeadIconOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGReLoginGameServer_descriptor_, &CGReLoginGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCReLoginGameServer_descriptor_, &GCReLoginGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendSkillList_descriptor_, &GCSendSkillList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPlayerHangup_descriptor_, &CGPlayerHangup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPlayerHangup_descriptor_, &GCPlayerHangup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSendRotate_descriptor_, &CGSendRotate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendRotate_descriptor_, &GCSendRotate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPlaerInfoById_descriptor_, &CGGetPlaerInfoById::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendPlayerInfoById_descriptor_, &GCSendPlayerInfoById::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLevelUpGetNewSkill_descriptor_, &GCLevelUpGetNewSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPlayerAndPetInfo_descriptor_, &CGGetPlayerAndPetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendPlayerAndPetInfo_descriptor_, &GCSendPlayerAndPetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChangePlayer_descriptor_, &CGChangePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangePlayerResult_descriptor_, &GCChangePlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCStressTestBegin_descriptor_, &GCStressTestBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGPlayerViewSetting_descriptor_, &CGPlayerViewSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPlayerViewSetting_descriptor_, &GCPlayerViewSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGQuitLogin_descriptor_, &CGQuitLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCQuitLoginBack_descriptor_, &GCQuitLoginBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMuteTime_descriptor_, &GCMuteTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameForceLoginout_descriptor_, &GameForceLoginout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCExpPlus_descriptor_, &GCExpPlus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCNonageSts_descriptor_, &GCNonageSts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNeedNonage_descriptor_, &CGNeedNonage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOnLineTime_descriptor_, &GCOnLineTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGAmbitLevelUp_descriptor_, &CGAmbitLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAmbitLevelUp_descriptor_, &GCAmbitLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPrivatePlayerAttr_descriptor_, &GCPrivatePlayerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUnLock_descriptor_, &CGUnLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGLookPlayerInfo_descriptor_, &CGLookPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCLookPlayerInfo_descriptor_, &GCLookPlayerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayerMessage_2eproto() {
  delete GCCharacterFaceTo::default_instance_;
  delete GCCharacterFaceTo_reflection_;
  delete GCPlayerDie::default_instance_;
  delete GCPlayerDie_reflection_;
  delete CGReqPlayerReborn::default_instance_;
  delete CGReqPlayerReborn_reflection_;
  delete GCPlayerReborn::default_instance_;
  delete GCPlayerReborn_reflection_;
  delete CGUpdatePlayerName::default_instance_;
  delete CGUpdatePlayerName_reflection_;
  delete GCUpdatePlayerNameOK::default_instance_;
  delete GCUpdatePlayerNameOK_reflection_;
  delete GCSendHeadIconList::default_instance_;
  delete GCSendHeadIconList_reflection_;
  delete CGUpdatePlayerHeadIcon::default_instance_;
  delete CGUpdatePlayerHeadIcon_reflection_;
  delete GCUpdateHeadIconOK::default_instance_;
  delete GCUpdateHeadIconOK_reflection_;
  delete CGReLoginGameServer::default_instance_;
  delete CGReLoginGameServer_reflection_;
  delete GCReLoginGameServer::default_instance_;
  delete GCReLoginGameServer_reflection_;
  delete GCSendSkillList::default_instance_;
  delete GCSendSkillList_reflection_;
  delete CGPlayerHangup::default_instance_;
  delete CGPlayerHangup_reflection_;
  delete GCPlayerHangup::default_instance_;
  delete GCPlayerHangup_reflection_;
  delete CGSendRotate::default_instance_;
  delete CGSendRotate_reflection_;
  delete GCSendRotate::default_instance_;
  delete GCSendRotate_reflection_;
  delete CGGetPlaerInfoById::default_instance_;
  delete CGGetPlaerInfoById_reflection_;
  delete GCSendPlayerInfoById::default_instance_;
  delete GCSendPlayerInfoById_reflection_;
  delete GCLevelUpGetNewSkill::default_instance_;
  delete GCLevelUpGetNewSkill_reflection_;
  delete CGGetPlayerAndPetInfo::default_instance_;
  delete CGGetPlayerAndPetInfo_reflection_;
  delete GCSendPlayerAndPetInfo::default_instance_;
  delete GCSendPlayerAndPetInfo_reflection_;
  delete CGChangePlayer::default_instance_;
  delete CGChangePlayer_reflection_;
  delete GCChangePlayerResult::default_instance_;
  delete GCChangePlayerResult_reflection_;
  delete GCStressTestBegin::default_instance_;
  delete GCStressTestBegin_reflection_;
  delete CGPlayerViewSetting::default_instance_;
  delete CGPlayerViewSetting_reflection_;
  delete GCPlayerViewSetting::default_instance_;
  delete GCPlayerViewSetting_reflection_;
  delete CGQuitLogin::default_instance_;
  delete CGQuitLogin_reflection_;
  delete GCQuitLoginBack::default_instance_;
  delete GCQuitLoginBack_reflection_;
  delete GCMuteTime::default_instance_;
  delete GCMuteTime_reflection_;
  delete GameForceLoginout::default_instance_;
  delete GameForceLoginout_reflection_;
  delete GCExpPlus::default_instance_;
  delete GCExpPlus_reflection_;
  delete GCNonageSts::default_instance_;
  delete GCNonageSts_reflection_;
  delete CGNeedNonage::default_instance_;
  delete CGNeedNonage_reflection_;
  delete GCOnLineTime::default_instance_;
  delete GCOnLineTime_reflection_;
  delete CGAmbitLevelUp::default_instance_;
  delete CGAmbitLevelUp_reflection_;
  delete GCAmbitLevelUp::default_instance_;
  delete GCAmbitLevelUp_reflection_;
  delete GCPrivatePlayerAttr::default_instance_;
  delete GCPrivatePlayerAttr_reflection_;
  delete CGUnLock::default_instance_;
  delete CGUnLock_reflection_;
  delete CGLookPlayerInfo::default_instance_;
  delete CGLookPlayerInfo_reflection_;
  delete GCLookPlayerInfo::default_instance_;
  delete GCLookPlayerInfo_reflection_;
}

void protobuf_AddDesc_PlayerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::protobuf_AddDesc_EquipMessage_2eproto();
  ::protobuf_AddDesc_SpiritBeastMessage_2eproto();
  ::protobuf_AddDesc_TalismanMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PlayerMessage.proto\032\022InnerMessage.prot"
    "o\032\022EquipMessage.proto\032\030SpiritBeastMessag"
    "e.proto\032\025TalismanMessage.proto\"^\n\021GCChar"
    "acterFaceTo\022\020\n\010objectId\030\001 \001(\003\022\026\n\016faceToO"
    "bjectId\030\002 \001(\003\022\037\n\tfaceToPos\030\003 \001(\0132\014.Vecto"
    "r3Info\"T\n\013GCPlayerDie\022\017\n\007dietime\030\001 \001(\003\022\022"
    "\n\nreborntiem\030\002 \001(\003\022\016\n\006killer\030\003 \001(\003\022\020\n\010ki"
    "mbdNum\030\004 \001(\005\"!\n\021CGReqPlayerReborn\022\014\n\004typ"
    "e\030\001 \001(\005\"2\n\016GCPlayerReborn\022\016\n\006result\030\001 \001("
    "\005\022\020\n\010objectId\030\002 \001(\003\"\"\n\022CGUpdatePlayerNam"
    "e\022\014\n\004name\030\001 \001(\t\"5\n\024GCUpdatePlayerNameOK\022"
    "\014\n\004flag\030\001 \001(\005\022\017\n\007newname\030\002 \001(\t\"&\n\022GCSend"
    "HeadIconList\022\020\n\010iconlist\030\001 \003(\005\"(\n\026CGUpda"
    "tePlayerHeadIcon\022\016\n\006iconid\030\001 \001(\005\"4\n\022GCUp"
    "dateHeadIconOK\022\014\n\004flag\030\001 \001(\005\022\020\n\010headIcon"
    "\030\002 \001(\005\"\225\001\n\023CGReLoginGameServer\022\020\n\010player"
    "Id\030\001 \001(\003\022\013\n\003uid\030\002 \001(\t\022\020\n\010platForm\030\003 \001(\t\022"
    "\021\n\taccountID\030\004 \001(\003\022\023\n\013currSceneId\030\005 \001(\005\022"
    "\017\n\007authKey\030\006 \001(\t\022\024\n\014sceneLoading\030\007 \001(\005\"7"
    "\n\023GCReLoginGameServer\022\016\n\006result\030\001 \001(\005\022\020\n"
    "\010eniqueID\030\002 \001(\003\"\230\001\n\017GCSendSkillList\022\020\n\010p"
    "layerId\030\001 \001(\003\022!\n\tskilldata\030\002 \003(\0132\016.Skill"
    "ItemData\022\024\n\014isfirstlogin\030\003 \001(\005\022\'\n\017shenQi"
    "Skilldata\030\004 \001(\0132\016.SkillItemData\022\021\n\tskill"
    "Flag\030\005 \001(\005\"\250\001\n\016CGPlayerHangup\022\014\n\004open\030\001 "
    "\001(\005\022\r\n\005scope\030\002 \001(\005\022\022\n\nautoRenorn\030\003 \001(\005\022\020"
    "\n\010avoiBoss\030\004 \001(\005\022\022\n\nattackBack\030\005 \001(\005\022\026\n\016"
    "pickTypeIndexs\030\006 \003(\005\022\023\n\013pickQuality\030\007 \003("
    "\005\022\022\n\nautoSkills\030\010 \003(\005\".\n\016GCPlayerHangup\022"
    "\016\n\006result\030\001 \001(\005\022\014\n\004open\030\002 \001(\005\">\n\014CGSendR"
    "otate\022\020\n\010objectId\030\001 \001(\003\022\034\n\006rotate\030\002 \001(\0132"
    "\014.Vector3Info\">\n\014GCSendRotate\022\020\n\010objectI"
    "d\030\001 \001(\003\022\034\n\006rotate\030\002 \001(\0132\014.Vector3Info\"4\n"
    "\022CGGetPlaerInfoById\022\020\n\010playerID\030\001 \001(\003\022\014\n"
    "\004type\030\002 \001(\005\"K\n\024GCSendPlayerInfoById\022%\n\rc"
    "haracterInfo\030\001 \001(\0132\016.CharacterInfo\022\014\n\004ty"
    "pe\030\002 \001(\005\"9\n\024GCLevelUpGetNewSkill\022!\n\tskil"
    "ldata\030\001 \003(\0132\016.SkillItemData\")\n\025CGGetPlay"
    "erAndPetInfo\022\020\n\010playerID\030\001 \001(\003\"Z\n\026GCSend"
    "PlayerAndPetInfo\022%\n\rcharacterInfo\030\001 \001(\0132"
    "\016.CharacterInfo\022\031\n\007petInfo\030\002 \001(\0132\010.PetIn"
    "fo\"\020\n\016CGChangePlayer\"&\n\024GCChangePlayerRe"
    "sult\022\016\n\006result\030\001 \001(\005\"%\n\021GCStressTestBegi"
    "n\022\020\n\010playerId\030\001 \001(\003\"%\n\023CGPlayerViewSetti"
    "ng\022\016\n\006maxNum\030\001 \001(\005\"5\n\023GCPlayerViewSettin"
    "g\022\016\n\006result\030\001 \001(\005\022\016\n\006maxNum\030\002 \001(\005\"\r\n\013CGQ"
    "uitLogin\"!\n\017GCQuitLoginBack\022\016\n\006result\030\001 "
    "\001(\005\"A\n\nGCMuteTime\022\014\n\004flag\030\001 \001(\005\022\020\n\010muteT"
    "ime\030\002 \001(\005\022\023\n\013muteEndTime\030\003 \001(\003\"d\n\021GameFo"
    "rceLoginout\022\020\n\010playerId\030\001 \001(\003\022\026\n\016noticeL"
    "oginSvr\030\002 \001(\005\022\025\n\rnoticeGateSvr\030\003 \001(\005\022\016\n\006"
    "reason\030\004 \001(\005\"0\n\tGCExpPlus\022\017\n\007display\030\001 \001"
    "(\005\022\022\n\nworldLevel\030\002 \001(\005\"\032\n\013GCNonageSts\022\013\n"
    "\003sts\030\001 \001(\005\"\033\n\014CGNeedNonage\022\013\n\003sts\030\001 \001(\005\""
    " \n\014GCOnLineTime\022\020\n\010senconds\030\001 \001(\005\"\020\n\016CGA"
    "mbitLevelUp\"9\n\016GCAmbitLevelUp\022\022\n\nambitLe"
    "vel\030\001 \001(\005\022\023\n\013ambitStatus\030\002 \001(\005\"7\n\023GCPriv"
    "atePlayerAttr\022 \n\010charAttr\030\001 \003(\0132\016.Charac"
    "terAttr\"\n\n\010CGUnLock\"\037\n\020CGLookPlayerInfo\022"
    "\013\n\003pid\030\001 \001(\003\"\241\001\n\020GCLookPlayerInfo\022\"\n\npla"
    "yerInfo\030\001 \001(\0132\016.CharacterInfo\022\037\n\nequipSl"
    "ots\030\002 \003(\0132\013.EquipSlots\022 \n\006sbInfo\030\003 \003(\0132\020"
    ".SpiritBeastInfo\022&\n\ntalisSlots\030\004 \003(\0132\022.T"
    "alismanSlotsLookB\031\n\027com.mile.common.mess"
    "age", 2563);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerMessage.proto", &protobuf_RegisterTypes);
  GCCharacterFaceTo::default_instance_ = new GCCharacterFaceTo();
  GCPlayerDie::default_instance_ = new GCPlayerDie();
  CGReqPlayerReborn::default_instance_ = new CGReqPlayerReborn();
  GCPlayerReborn::default_instance_ = new GCPlayerReborn();
  CGUpdatePlayerName::default_instance_ = new CGUpdatePlayerName();
  GCUpdatePlayerNameOK::default_instance_ = new GCUpdatePlayerNameOK();
  GCSendHeadIconList::default_instance_ = new GCSendHeadIconList();
  CGUpdatePlayerHeadIcon::default_instance_ = new CGUpdatePlayerHeadIcon();
  GCUpdateHeadIconOK::default_instance_ = new GCUpdateHeadIconOK();
  CGReLoginGameServer::default_instance_ = new CGReLoginGameServer();
  GCReLoginGameServer::default_instance_ = new GCReLoginGameServer();
  GCSendSkillList::default_instance_ = new GCSendSkillList();
  CGPlayerHangup::default_instance_ = new CGPlayerHangup();
  GCPlayerHangup::default_instance_ = new GCPlayerHangup();
  CGSendRotate::default_instance_ = new CGSendRotate();
  GCSendRotate::default_instance_ = new GCSendRotate();
  CGGetPlaerInfoById::default_instance_ = new CGGetPlaerInfoById();
  GCSendPlayerInfoById::default_instance_ = new GCSendPlayerInfoById();
  GCLevelUpGetNewSkill::default_instance_ = new GCLevelUpGetNewSkill();
  CGGetPlayerAndPetInfo::default_instance_ = new CGGetPlayerAndPetInfo();
  GCSendPlayerAndPetInfo::default_instance_ = new GCSendPlayerAndPetInfo();
  CGChangePlayer::default_instance_ = new CGChangePlayer();
  GCChangePlayerResult::default_instance_ = new GCChangePlayerResult();
  GCStressTestBegin::default_instance_ = new GCStressTestBegin();
  CGPlayerViewSetting::default_instance_ = new CGPlayerViewSetting();
  GCPlayerViewSetting::default_instance_ = new GCPlayerViewSetting();
  CGQuitLogin::default_instance_ = new CGQuitLogin();
  GCQuitLoginBack::default_instance_ = new GCQuitLoginBack();
  GCMuteTime::default_instance_ = new GCMuteTime();
  GameForceLoginout::default_instance_ = new GameForceLoginout();
  GCExpPlus::default_instance_ = new GCExpPlus();
  GCNonageSts::default_instance_ = new GCNonageSts();
  CGNeedNonage::default_instance_ = new CGNeedNonage();
  GCOnLineTime::default_instance_ = new GCOnLineTime();
  CGAmbitLevelUp::default_instance_ = new CGAmbitLevelUp();
  GCAmbitLevelUp::default_instance_ = new GCAmbitLevelUp();
  GCPrivatePlayerAttr::default_instance_ = new GCPrivatePlayerAttr();
  CGUnLock::default_instance_ = new CGUnLock();
  CGLookPlayerInfo::default_instance_ = new CGLookPlayerInfo();
  GCLookPlayerInfo::default_instance_ = new GCLookPlayerInfo();
  GCCharacterFaceTo::default_instance_->InitAsDefaultInstance();
  GCPlayerDie::default_instance_->InitAsDefaultInstance();
  CGReqPlayerReborn::default_instance_->InitAsDefaultInstance();
  GCPlayerReborn::default_instance_->InitAsDefaultInstance();
  CGUpdatePlayerName::default_instance_->InitAsDefaultInstance();
  GCUpdatePlayerNameOK::default_instance_->InitAsDefaultInstance();
  GCSendHeadIconList::default_instance_->InitAsDefaultInstance();
  CGUpdatePlayerHeadIcon::default_instance_->InitAsDefaultInstance();
  GCUpdateHeadIconOK::default_instance_->InitAsDefaultInstance();
  CGReLoginGameServer::default_instance_->InitAsDefaultInstance();
  GCReLoginGameServer::default_instance_->InitAsDefaultInstance();
  GCSendSkillList::default_instance_->InitAsDefaultInstance();
  CGPlayerHangup::default_instance_->InitAsDefaultInstance();
  GCPlayerHangup::default_instance_->InitAsDefaultInstance();
  CGSendRotate::default_instance_->InitAsDefaultInstance();
  GCSendRotate::default_instance_->InitAsDefaultInstance();
  CGGetPlaerInfoById::default_instance_->InitAsDefaultInstance();
  GCSendPlayerInfoById::default_instance_->InitAsDefaultInstance();
  GCLevelUpGetNewSkill::default_instance_->InitAsDefaultInstance();
  CGGetPlayerAndPetInfo::default_instance_->InitAsDefaultInstance();
  GCSendPlayerAndPetInfo::default_instance_->InitAsDefaultInstance();
  CGChangePlayer::default_instance_->InitAsDefaultInstance();
  GCChangePlayerResult::default_instance_->InitAsDefaultInstance();
  GCStressTestBegin::default_instance_->InitAsDefaultInstance();
  CGPlayerViewSetting::default_instance_->InitAsDefaultInstance();
  GCPlayerViewSetting::default_instance_->InitAsDefaultInstance();
  CGQuitLogin::default_instance_->InitAsDefaultInstance();
  GCQuitLoginBack::default_instance_->InitAsDefaultInstance();
  GCMuteTime::default_instance_->InitAsDefaultInstance();
  GameForceLoginout::default_instance_->InitAsDefaultInstance();
  GCExpPlus::default_instance_->InitAsDefaultInstance();
  GCNonageSts::default_instance_->InitAsDefaultInstance();
  CGNeedNonage::default_instance_->InitAsDefaultInstance();
  GCOnLineTime::default_instance_->InitAsDefaultInstance();
  CGAmbitLevelUp::default_instance_->InitAsDefaultInstance();
  GCAmbitLevelUp::default_instance_->InitAsDefaultInstance();
  GCPrivatePlayerAttr::default_instance_->InitAsDefaultInstance();
  CGUnLock::default_instance_->InitAsDefaultInstance();
  CGLookPlayerInfo::default_instance_->InitAsDefaultInstance();
  GCLookPlayerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerMessage_2eproto {
  StaticDescriptorInitializer_PlayerMessage_2eproto() {
    protobuf_AddDesc_PlayerMessage_2eproto();
  }
} static_descriptor_initializer_PlayerMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GCCharacterFaceTo::kObjectIdFieldNumber;
const int GCCharacterFaceTo::kFaceToObjectIdFieldNumber;
const int GCCharacterFaceTo::kFaceToPosFieldNumber;
#endif  // !_MSC_VER

GCCharacterFaceTo::GCCharacterFaceTo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharacterFaceTo)
}

void GCCharacterFaceTo::InitAsDefaultInstance() {
  facetopos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCCharacterFaceTo::GCCharacterFaceTo(const GCCharacterFaceTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharacterFaceTo)
}

void GCCharacterFaceTo::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  facetoobjectid_ = GOOGLE_LONGLONG(0);
  facetopos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharacterFaceTo::~GCCharacterFaceTo() {
  // @@protoc_insertion_point(destructor:GCCharacterFaceTo)
  SharedDtor();
}

void GCCharacterFaceTo::SharedDtor() {
  if (this != default_instance_) {
    delete facetopos_;
  }
}

void GCCharacterFaceTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharacterFaceTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharacterFaceTo_descriptor_;
}

const GCCharacterFaceTo& GCCharacterFaceTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCCharacterFaceTo* GCCharacterFaceTo::default_instance_ = NULL;

GCCharacterFaceTo* GCCharacterFaceTo::New() const {
  return new GCCharacterFaceTo;
}

void GCCharacterFaceTo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCharacterFaceTo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(objectid_, facetoobjectid_);
    if (has_facetopos()) {
      if (facetopos_ != NULL) facetopos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharacterFaceTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharacterFaceTo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_faceToObjectId;
        break;
      }

      // optional int64 faceToObjectId = 2;
      case 2: {
        if (tag == 16) {
         parse_faceToObjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &facetoobjectid_)));
          set_has_facetoobjectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faceToPos;
        break;
      }

      // optional .Vector3Info faceToPos = 3;
      case 3: {
        if (tag == 26) {
         parse_faceToPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facetopos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharacterFaceTo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharacterFaceTo)
  return false;
#undef DO_
}

void GCCharacterFaceTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharacterFaceTo)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional int64 faceToObjectId = 2;
  if (has_facetoobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->facetoobjectid(), output);
  }

  // optional .Vector3Info faceToPos = 3;
  if (has_facetopos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->facetopos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharacterFaceTo)
}

::google::protobuf::uint8* GCCharacterFaceTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharacterFaceTo)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional int64 faceToObjectId = 2;
  if (has_facetoobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->facetoobjectid(), target);
  }

  // optional .Vector3Info faceToPos = 3;
  if (has_facetopos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->facetopos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharacterFaceTo)
  return target;
}

int GCCharacterFaceTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional int64 faceToObjectId = 2;
    if (has_facetoobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->facetoobjectid());
    }

    // optional .Vector3Info faceToPos = 3;
    if (has_facetopos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facetopos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharacterFaceTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharacterFaceTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharacterFaceTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharacterFaceTo::MergeFrom(const GCCharacterFaceTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_facetoobjectid()) {
      set_facetoobjectid(from.facetoobjectid());
    }
    if (from.has_facetopos()) {
      mutable_facetopos()->::Vector3Info::MergeFrom(from.facetopos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharacterFaceTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharacterFaceTo::CopyFrom(const GCCharacterFaceTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterFaceTo::IsInitialized() const {

  return true;
}

void GCCharacterFaceTo::Swap(GCCharacterFaceTo* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(facetoobjectid_, other->facetoobjectid_);
    std::swap(facetopos_, other->facetopos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharacterFaceTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharacterFaceTo_descriptor_;
  metadata.reflection = GCCharacterFaceTo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPlayerDie::kDietimeFieldNumber;
const int GCPlayerDie::kReborntiemFieldNumber;
const int GCPlayerDie::kKillerFieldNumber;
const int GCPlayerDie::kKimbdNumFieldNumber;
#endif  // !_MSC_VER

GCPlayerDie::GCPlayerDie()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPlayerDie)
}

void GCPlayerDie::InitAsDefaultInstance() {
}

GCPlayerDie::GCPlayerDie(const GCPlayerDie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPlayerDie)
}

void GCPlayerDie::SharedCtor() {
  _cached_size_ = 0;
  dietime_ = GOOGLE_LONGLONG(0);
  reborntiem_ = GOOGLE_LONGLONG(0);
  killer_ = GOOGLE_LONGLONG(0);
  kimbdnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPlayerDie::~GCPlayerDie() {
  // @@protoc_insertion_point(destructor:GCPlayerDie)
  SharedDtor();
}

void GCPlayerDie::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPlayerDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPlayerDie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPlayerDie_descriptor_;
}

const GCPlayerDie& GCPlayerDie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCPlayerDie* GCPlayerDie::default_instance_ = NULL;

GCPlayerDie* GCPlayerDie::New() const {
  return new GCPlayerDie;
}

void GCPlayerDie::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPlayerDie*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dietime_, kimbdnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPlayerDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPlayerDie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 dietime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dietime_)));
          set_has_dietime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reborntiem;
        break;
      }

      // optional int64 reborntiem = 2;
      case 2: {
        if (tag == 16) {
         parse_reborntiem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reborntiem_)));
          set_has_reborntiem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killer;
        break;
      }

      // optional int64 killer = 3;
      case 3: {
        if (tag == 24) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_kimbdNum;
        break;
      }

      // optional int32 kimbdNum = 4;
      case 4: {
        if (tag == 32) {
         parse_kimbdNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kimbdnum_)));
          set_has_kimbdnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPlayerDie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPlayerDie)
  return false;
#undef DO_
}

void GCPlayerDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPlayerDie)
  // optional int64 dietime = 1;
  if (has_dietime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dietime(), output);
  }

  // optional int64 reborntiem = 2;
  if (has_reborntiem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->reborntiem(), output);
  }

  // optional int64 killer = 3;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->killer(), output);
  }

  // optional int32 kimbdNum = 4;
  if (has_kimbdnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kimbdnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPlayerDie)
}

::google::protobuf::uint8* GCPlayerDie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPlayerDie)
  // optional int64 dietime = 1;
  if (has_dietime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dietime(), target);
  }

  // optional int64 reborntiem = 2;
  if (has_reborntiem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->reborntiem(), target);
  }

  // optional int64 killer = 3;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->killer(), target);
  }

  // optional int32 kimbdNum = 4;
  if (has_kimbdnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kimbdnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPlayerDie)
  return target;
}

int GCPlayerDie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 dietime = 1;
    if (has_dietime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dietime());
    }

    // optional int64 reborntiem = 2;
    if (has_reborntiem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reborntiem());
    }

    // optional int64 killer = 3;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->killer());
    }

    // optional int32 kimbdNum = 4;
    if (has_kimbdnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kimbdnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPlayerDie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPlayerDie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPlayerDie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPlayerDie::MergeFrom(const GCPlayerDie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dietime()) {
      set_dietime(from.dietime());
    }
    if (from.has_reborntiem()) {
      set_reborntiem(from.reborntiem());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_kimbdnum()) {
      set_kimbdnum(from.kimbdnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPlayerDie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPlayerDie::CopyFrom(const GCPlayerDie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerDie::IsInitialized() const {

  return true;
}

void GCPlayerDie::Swap(GCPlayerDie* other) {
  if (other != this) {
    std::swap(dietime_, other->dietime_);
    std::swap(reborntiem_, other->reborntiem_);
    std::swap(killer_, other->killer_);
    std::swap(kimbdnum_, other->kimbdnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPlayerDie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPlayerDie_descriptor_;
  metadata.reflection = GCPlayerDie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGReqPlayerReborn::kTypeFieldNumber;
#endif  // !_MSC_VER

CGReqPlayerReborn::CGReqPlayerReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGReqPlayerReborn)
}

void CGReqPlayerReborn::InitAsDefaultInstance() {
}

CGReqPlayerReborn::CGReqPlayerReborn(const CGReqPlayerReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGReqPlayerReborn)
}

void CGReqPlayerReborn::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGReqPlayerReborn::~CGReqPlayerReborn() {
  // @@protoc_insertion_point(destructor:CGReqPlayerReborn)
  SharedDtor();
}

void CGReqPlayerReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGReqPlayerReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGReqPlayerReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGReqPlayerReborn_descriptor_;
}

const CGReqPlayerReborn& CGReqPlayerReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGReqPlayerReborn* CGReqPlayerReborn::default_instance_ = NULL;

CGReqPlayerReborn* CGReqPlayerReborn::New() const {
  return new CGReqPlayerReborn;
}

void CGReqPlayerReborn::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGReqPlayerReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGReqPlayerReborn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGReqPlayerReborn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGReqPlayerReborn)
  return false;
#undef DO_
}

void CGReqPlayerReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGReqPlayerReborn)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGReqPlayerReborn)
}

::google::protobuf::uint8* CGReqPlayerReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGReqPlayerReborn)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGReqPlayerReborn)
  return target;
}

int CGReqPlayerReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGReqPlayerReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGReqPlayerReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGReqPlayerReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGReqPlayerReborn::MergeFrom(const CGReqPlayerReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGReqPlayerReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGReqPlayerReborn::CopyFrom(const CGReqPlayerReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReqPlayerReborn::IsInitialized() const {

  return true;
}

void CGReqPlayerReborn::Swap(CGReqPlayerReborn* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGReqPlayerReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGReqPlayerReborn_descriptor_;
  metadata.reflection = CGReqPlayerReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPlayerReborn::kResultFieldNumber;
const int GCPlayerReborn::kObjectIdFieldNumber;
#endif  // !_MSC_VER

GCPlayerReborn::GCPlayerReborn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPlayerReborn)
}

void GCPlayerReborn::InitAsDefaultInstance() {
}

GCPlayerReborn::GCPlayerReborn(const GCPlayerReborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPlayerReborn)
}

void GCPlayerReborn::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPlayerReborn::~GCPlayerReborn() {
  // @@protoc_insertion_point(destructor:GCPlayerReborn)
  SharedDtor();
}

void GCPlayerReborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPlayerReborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPlayerReborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPlayerReborn_descriptor_;
}

const GCPlayerReborn& GCPlayerReborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCPlayerReborn* GCPlayerReborn::default_instance_ = NULL;

GCPlayerReborn* GCPlayerReborn::New() const {
  return new GCPlayerReborn;
}

void GCPlayerReborn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPlayerReborn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objectid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPlayerReborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPlayerReborn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objectId;
        break;
      }

      // optional int64 objectId = 2;
      case 2: {
        if (tag == 16) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPlayerReborn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPlayerReborn)
  return false;
#undef DO_
}

void GCPlayerReborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPlayerReborn)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 objectId = 2;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPlayerReborn)
}

::google::protobuf::uint8* GCPlayerReborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPlayerReborn)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 objectId = 2;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPlayerReborn)
  return target;
}

int GCPlayerReborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 objectId = 2;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPlayerReborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPlayerReborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPlayerReborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPlayerReborn::MergeFrom(const GCPlayerReborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPlayerReborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPlayerReborn::CopyFrom(const GCPlayerReborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerReborn::IsInitialized() const {

  return true;
}

void GCPlayerReborn::Swap(GCPlayerReborn* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPlayerReborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPlayerReborn_descriptor_;
  metadata.reflection = GCPlayerReborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUpdatePlayerName::kNameFieldNumber;
#endif  // !_MSC_VER

CGUpdatePlayerName::CGUpdatePlayerName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUpdatePlayerName)
}

void CGUpdatePlayerName::InitAsDefaultInstance() {
}

CGUpdatePlayerName::CGUpdatePlayerName(const CGUpdatePlayerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUpdatePlayerName)
}

void CGUpdatePlayerName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUpdatePlayerName::~CGUpdatePlayerName() {
  // @@protoc_insertion_point(destructor:CGUpdatePlayerName)
  SharedDtor();
}

void CGUpdatePlayerName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CGUpdatePlayerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUpdatePlayerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUpdatePlayerName_descriptor_;
}

const CGUpdatePlayerName& CGUpdatePlayerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGUpdatePlayerName* CGUpdatePlayerName::default_instance_ = NULL;

CGUpdatePlayerName* CGUpdatePlayerName::New() const {
  return new CGUpdatePlayerName;
}

void CGUpdatePlayerName::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUpdatePlayerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUpdatePlayerName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUpdatePlayerName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUpdatePlayerName)
  return false;
#undef DO_
}

void CGUpdatePlayerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUpdatePlayerName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUpdatePlayerName)
}

::google::protobuf::uint8* CGUpdatePlayerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUpdatePlayerName)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUpdatePlayerName)
  return target;
}

int CGUpdatePlayerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUpdatePlayerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUpdatePlayerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUpdatePlayerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUpdatePlayerName::MergeFrom(const CGUpdatePlayerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUpdatePlayerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUpdatePlayerName::CopyFrom(const CGUpdatePlayerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUpdatePlayerName::IsInitialized() const {

  return true;
}

void CGUpdatePlayerName::Swap(CGUpdatePlayerName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUpdatePlayerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUpdatePlayerName_descriptor_;
  metadata.reflection = CGUpdatePlayerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdatePlayerNameOK::kFlagFieldNumber;
const int GCUpdatePlayerNameOK::kNewnameFieldNumber;
#endif  // !_MSC_VER

GCUpdatePlayerNameOK::GCUpdatePlayerNameOK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdatePlayerNameOK)
}

void GCUpdatePlayerNameOK::InitAsDefaultInstance() {
}

GCUpdatePlayerNameOK::GCUpdatePlayerNameOK(const GCUpdatePlayerNameOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdatePlayerNameOK)
}

void GCUpdatePlayerNameOK::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdatePlayerNameOK::~GCUpdatePlayerNameOK() {
  // @@protoc_insertion_point(destructor:GCUpdatePlayerNameOK)
  SharedDtor();
}

void GCUpdatePlayerNameOK::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void GCUpdatePlayerNameOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdatePlayerNameOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdatePlayerNameOK_descriptor_;
}

const GCUpdatePlayerNameOK& GCUpdatePlayerNameOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCUpdatePlayerNameOK* GCUpdatePlayerNameOK::default_instance_ = NULL;

GCUpdatePlayerNameOK* GCUpdatePlayerNameOK::New() const {
  return new GCUpdatePlayerNameOK;
}

void GCUpdatePlayerNameOK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdatePlayerNameOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdatePlayerNameOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // optional string newname = 2;
      case 2: {
        if (tag == 18) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdatePlayerNameOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdatePlayerNameOK)
  return false;
#undef DO_
}

void GCUpdatePlayerNameOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdatePlayerNameOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdatePlayerNameOK)
}

::google::protobuf::uint8* GCUpdatePlayerNameOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdatePlayerNameOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdatePlayerNameOK)
  return target;
}

int GCUpdatePlayerNameOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdatePlayerNameOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdatePlayerNameOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdatePlayerNameOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdatePlayerNameOK::MergeFrom(const GCUpdatePlayerNameOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdatePlayerNameOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdatePlayerNameOK::CopyFrom(const GCUpdatePlayerNameOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdatePlayerNameOK::IsInitialized() const {

  return true;
}

void GCUpdatePlayerNameOK::Swap(GCUpdatePlayerNameOK* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdatePlayerNameOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdatePlayerNameOK_descriptor_;
  metadata.reflection = GCUpdatePlayerNameOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendHeadIconList::kIconlistFieldNumber;
#endif  // !_MSC_VER

GCSendHeadIconList::GCSendHeadIconList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendHeadIconList)
}

void GCSendHeadIconList::InitAsDefaultInstance() {
}

GCSendHeadIconList::GCSendHeadIconList(const GCSendHeadIconList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendHeadIconList)
}

void GCSendHeadIconList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendHeadIconList::~GCSendHeadIconList() {
  // @@protoc_insertion_point(destructor:GCSendHeadIconList)
  SharedDtor();
}

void GCSendHeadIconList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSendHeadIconList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendHeadIconList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendHeadIconList_descriptor_;
}

const GCSendHeadIconList& GCSendHeadIconList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCSendHeadIconList* GCSendHeadIconList::default_instance_ = NULL;

GCSendHeadIconList* GCSendHeadIconList::New() const {
  return new GCSendHeadIconList;
}

void GCSendHeadIconList::Clear() {
  iconlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendHeadIconList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendHeadIconList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 iconlist = 1;
      case 1: {
        if (tag == 8) {
         parse_iconlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_iconlist())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iconlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_iconlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendHeadIconList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendHeadIconList)
  return false;
#undef DO_
}

void GCSendHeadIconList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendHeadIconList)
  // repeated int32 iconlist = 1;
  for (int i = 0; i < this->iconlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->iconlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendHeadIconList)
}

::google::protobuf::uint8* GCSendHeadIconList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendHeadIconList)
  // repeated int32 iconlist = 1;
  for (int i = 0; i < this->iconlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->iconlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendHeadIconList)
  return target;
}

int GCSendHeadIconList::ByteSize() const {
  int total_size = 0;

  // repeated int32 iconlist = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->iconlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iconlist(i));
    }
    total_size += 1 * this->iconlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendHeadIconList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendHeadIconList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendHeadIconList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendHeadIconList::MergeFrom(const GCSendHeadIconList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iconlist_.MergeFrom(from.iconlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendHeadIconList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendHeadIconList::CopyFrom(const GCSendHeadIconList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendHeadIconList::IsInitialized() const {

  return true;
}

void GCSendHeadIconList::Swap(GCSendHeadIconList* other) {
  if (other != this) {
    iconlist_.Swap(&other->iconlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendHeadIconList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendHeadIconList_descriptor_;
  metadata.reflection = GCSendHeadIconList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUpdatePlayerHeadIcon::kIconidFieldNumber;
#endif  // !_MSC_VER

CGUpdatePlayerHeadIcon::CGUpdatePlayerHeadIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUpdatePlayerHeadIcon)
}

void CGUpdatePlayerHeadIcon::InitAsDefaultInstance() {
}

CGUpdatePlayerHeadIcon::CGUpdatePlayerHeadIcon(const CGUpdatePlayerHeadIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUpdatePlayerHeadIcon)
}

void CGUpdatePlayerHeadIcon::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUpdatePlayerHeadIcon::~CGUpdatePlayerHeadIcon() {
  // @@protoc_insertion_point(destructor:CGUpdatePlayerHeadIcon)
  SharedDtor();
}

void CGUpdatePlayerHeadIcon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUpdatePlayerHeadIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUpdatePlayerHeadIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUpdatePlayerHeadIcon_descriptor_;
}

const CGUpdatePlayerHeadIcon& CGUpdatePlayerHeadIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGUpdatePlayerHeadIcon* CGUpdatePlayerHeadIcon::default_instance_ = NULL;

CGUpdatePlayerHeadIcon* CGUpdatePlayerHeadIcon::New() const {
  return new CGUpdatePlayerHeadIcon;
}

void CGUpdatePlayerHeadIcon::Clear() {
  iconid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUpdatePlayerHeadIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUpdatePlayerHeadIcon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iconid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUpdatePlayerHeadIcon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUpdatePlayerHeadIcon)
  return false;
#undef DO_
}

void CGUpdatePlayerHeadIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUpdatePlayerHeadIcon)
  // optional int32 iconid = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUpdatePlayerHeadIcon)
}

::google::protobuf::uint8* CGUpdatePlayerHeadIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUpdatePlayerHeadIcon)
  // optional int32 iconid = 1;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUpdatePlayerHeadIcon)
  return target;
}

int CGUpdatePlayerHeadIcon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iconid = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUpdatePlayerHeadIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUpdatePlayerHeadIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUpdatePlayerHeadIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUpdatePlayerHeadIcon::MergeFrom(const CGUpdatePlayerHeadIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUpdatePlayerHeadIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUpdatePlayerHeadIcon::CopyFrom(const CGUpdatePlayerHeadIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUpdatePlayerHeadIcon::IsInitialized() const {

  return true;
}

void CGUpdatePlayerHeadIcon::Swap(CGUpdatePlayerHeadIcon* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUpdatePlayerHeadIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUpdatePlayerHeadIcon_descriptor_;
  metadata.reflection = CGUpdatePlayerHeadIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateHeadIconOK::kFlagFieldNumber;
const int GCUpdateHeadIconOK::kHeadIconFieldNumber;
#endif  // !_MSC_VER

GCUpdateHeadIconOK::GCUpdateHeadIconOK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpdateHeadIconOK)
}

void GCUpdateHeadIconOK::InitAsDefaultInstance() {
}

GCUpdateHeadIconOK::GCUpdateHeadIconOK(const GCUpdateHeadIconOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpdateHeadIconOK)
}

void GCUpdateHeadIconOK::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  headicon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateHeadIconOK::~GCUpdateHeadIconOK() {
  // @@protoc_insertion_point(destructor:GCUpdateHeadIconOK)
  SharedDtor();
}

void GCUpdateHeadIconOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateHeadIconOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateHeadIconOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateHeadIconOK_descriptor_;
}

const GCUpdateHeadIconOK& GCUpdateHeadIconOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCUpdateHeadIconOK* GCUpdateHeadIconOK::default_instance_ = NULL;

GCUpdateHeadIconOK* GCUpdateHeadIconOK::New() const {
  return new GCUpdateHeadIconOK;
}

void GCUpdateHeadIconOK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCUpdateHeadIconOK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, headicon_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateHeadIconOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpdateHeadIconOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_headIcon;
        break;
      }

      // optional int32 headIcon = 2;
      case 2: {
        if (tag == 16) {
         parse_headIcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headicon_)));
          set_has_headicon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpdateHeadIconOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpdateHeadIconOK)
  return false;
#undef DO_
}

void GCUpdateHeadIconOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpdateHeadIconOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 headIcon = 2;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headicon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpdateHeadIconOK)
}

::google::protobuf::uint8* GCUpdateHeadIconOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpdateHeadIconOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 headIcon = 2;
  if (has_headicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headicon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpdateHeadIconOK)
  return target;
}

int GCUpdateHeadIconOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 headIcon = 2;
    if (has_headicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headicon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateHeadIconOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateHeadIconOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateHeadIconOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateHeadIconOK::MergeFrom(const GCUpdateHeadIconOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_headicon()) {
      set_headicon(from.headicon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateHeadIconOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateHeadIconOK::CopyFrom(const GCUpdateHeadIconOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateHeadIconOK::IsInitialized() const {

  return true;
}

void GCUpdateHeadIconOK::Swap(GCUpdateHeadIconOK* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(headicon_, other->headicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateHeadIconOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateHeadIconOK_descriptor_;
  metadata.reflection = GCUpdateHeadIconOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGReLoginGameServer::kPlayerIdFieldNumber;
const int CGReLoginGameServer::kUidFieldNumber;
const int CGReLoginGameServer::kPlatFormFieldNumber;
const int CGReLoginGameServer::kAccountIDFieldNumber;
const int CGReLoginGameServer::kCurrSceneIdFieldNumber;
const int CGReLoginGameServer::kAuthKeyFieldNumber;
const int CGReLoginGameServer::kSceneLoadingFieldNumber;
#endif  // !_MSC_VER

CGReLoginGameServer::CGReLoginGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGReLoginGameServer)
}

void CGReLoginGameServer::InitAsDefaultInstance() {
}

CGReLoginGameServer::CGReLoginGameServer(const CGReLoginGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGReLoginGameServer)
}

void CGReLoginGameServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = GOOGLE_LONGLONG(0);
  currsceneid_ = 0;
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneloading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGReLoginGameServer::~CGReLoginGameServer() {
  // @@protoc_insertion_point(destructor:CGReLoginGameServer)
  SharedDtor();
}

void CGReLoginGameServer::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_;
  }
  if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void CGReLoginGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGReLoginGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGReLoginGameServer_descriptor_;
}

const CGReLoginGameServer& CGReLoginGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGReLoginGameServer* CGReLoginGameServer::default_instance_ = NULL;

CGReLoginGameServer* CGReLoginGameServer::New() const {
  return new CGReLoginGameServer;
}

void CGReLoginGameServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGReLoginGameServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(currsceneid_, sceneloading_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uid_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_->clear();
      }
    }
    accountid_ = GOOGLE_LONGLONG(0);
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authkey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGReLoginGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGReLoginGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // optional string uid = 2;
      case 2: {
        if (tag == 18) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_platForm;
        break;
      }

      // optional string platForm = 3;
      case 3: {
        if (tag == 26) {
         parse_platForm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accountID;
        break;
      }

      // optional int64 accountID = 4;
      case 4: {
        if (tag == 32) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currSceneId;
        break;
      }

      // optional int32 currSceneId = 5;
      case 5: {
        if (tag == 40) {
         parse_currSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currsceneid_)));
          set_has_currsceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_authKey;
        break;
      }

      // optional string authKey = 6;
      case 6: {
        if (tag == 50) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sceneLoading;
        break;
      }

      // optional int32 sceneLoading = 7;
      case 7: {
        if (tag == 56) {
         parse_sceneLoading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneloading_)));
          set_has_sceneloading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGReLoginGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGReLoginGameServer)
  return false;
#undef DO_
}

void CGReLoginGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGReLoginGameServer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform(), output);
  }

  // optional int64 accountID = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->accountid(), output);
  }

  // optional int32 currSceneId = 5;
  if (has_currsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currsceneid(), output);
  }

  // optional string authKey = 6;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->authkey(), output);
  }

  // optional int32 sceneLoading = 7;
  if (has_sceneloading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sceneloading(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGReLoginGameServer)
}

::google::protobuf::uint8* CGReLoginGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGReLoginGameServer)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // optional string platForm = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional int64 accountID = 4;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->accountid(), target);
  }

  // optional int32 currSceneId = 5;
  if (has_currsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currsceneid(), target);
  }

  // optional string authKey = 6;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->authkey(), target);
  }

  // optional int32 sceneLoading = 7;
  if (has_sceneloading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sceneloading(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGReLoginGameServer)
  return target;
}

int CGReLoginGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // optional string platForm = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional int64 accountID = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }

    // optional int32 currSceneId = 5;
    if (has_currsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currsceneid());
    }

    // optional string authKey = 6;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

    // optional int32 sceneLoading = 7;
    if (has_sceneloading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneloading());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGReLoginGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGReLoginGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGReLoginGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGReLoginGameServer::MergeFrom(const CGReLoginGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_currsceneid()) {
      set_currsceneid(from.currsceneid());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
    if (from.has_sceneloading()) {
      set_sceneloading(from.sceneloading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGReLoginGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGReLoginGameServer::CopyFrom(const CGReLoginGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGReLoginGameServer::IsInitialized() const {

  return true;
}

void CGReLoginGameServer::Swap(CGReLoginGameServer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(uid_, other->uid_);
    std::swap(platform_, other->platform_);
    std::swap(accountid_, other->accountid_);
    std::swap(currsceneid_, other->currsceneid_);
    std::swap(authkey_, other->authkey_);
    std::swap(sceneloading_, other->sceneloading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGReLoginGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGReLoginGameServer_descriptor_;
  metadata.reflection = CGReLoginGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCReLoginGameServer::kResultFieldNumber;
const int GCReLoginGameServer::kEniqueIDFieldNumber;
#endif  // !_MSC_VER

GCReLoginGameServer::GCReLoginGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCReLoginGameServer)
}

void GCReLoginGameServer::InitAsDefaultInstance() {
}

GCReLoginGameServer::GCReLoginGameServer(const GCReLoginGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCReLoginGameServer)
}

void GCReLoginGameServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  eniqueid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCReLoginGameServer::~GCReLoginGameServer() {
  // @@protoc_insertion_point(destructor:GCReLoginGameServer)
  SharedDtor();
}

void GCReLoginGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCReLoginGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCReLoginGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCReLoginGameServer_descriptor_;
}

const GCReLoginGameServer& GCReLoginGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCReLoginGameServer* GCReLoginGameServer::default_instance_ = NULL;

GCReLoginGameServer* GCReLoginGameServer::New() const {
  return new GCReLoginGameServer;
}

void GCReLoginGameServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCReLoginGameServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eniqueid_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCReLoginGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCReLoginGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eniqueID;
        break;
      }

      // optional int64 eniqueID = 2;
      case 2: {
        if (tag == 16) {
         parse_eniqueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eniqueid_)));
          set_has_eniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCReLoginGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCReLoginGameServer)
  return false;
#undef DO_
}

void GCReLoginGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCReLoginGameServer)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 eniqueID = 2;
  if (has_eniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->eniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCReLoginGameServer)
}

::google::protobuf::uint8* GCReLoginGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCReLoginGameServer)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 eniqueID = 2;
  if (has_eniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->eniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCReLoginGameServer)
  return target;
}

int GCReLoginGameServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 eniqueID = 2;
    if (has_eniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCReLoginGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCReLoginGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCReLoginGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCReLoginGameServer::MergeFrom(const GCReLoginGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_eniqueid()) {
      set_eniqueid(from.eniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCReLoginGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCReLoginGameServer::CopyFrom(const GCReLoginGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCReLoginGameServer::IsInitialized() const {

  return true;
}

void GCReLoginGameServer::Swap(GCReLoginGameServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(eniqueid_, other->eniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCReLoginGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCReLoginGameServer_descriptor_;
  metadata.reflection = GCReLoginGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendSkillList::kPlayerIdFieldNumber;
const int GCSendSkillList::kSkilldataFieldNumber;
const int GCSendSkillList::kIsfirstloginFieldNumber;
const int GCSendSkillList::kShenQiSkilldataFieldNumber;
const int GCSendSkillList::kSkillFlagFieldNumber;
#endif  // !_MSC_VER

GCSendSkillList::GCSendSkillList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendSkillList)
}

void GCSendSkillList::InitAsDefaultInstance() {
  shenqiskilldata_ = const_cast< ::SkillItemData*>(&::SkillItemData::default_instance());
}

GCSendSkillList::GCSendSkillList(const GCSendSkillList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendSkillList)
}

void GCSendSkillList::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  isfirstlogin_ = 0;
  shenqiskilldata_ = NULL;
  skillflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendSkillList::~GCSendSkillList() {
  // @@protoc_insertion_point(destructor:GCSendSkillList)
  SharedDtor();
}

void GCSendSkillList::SharedDtor() {
  if (this != default_instance_) {
    delete shenqiskilldata_;
  }
}

void GCSendSkillList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendSkillList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendSkillList_descriptor_;
}

const GCSendSkillList& GCSendSkillList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCSendSkillList* GCSendSkillList::default_instance_ = NULL;

GCSendSkillList* GCSendSkillList::New() const {
  return new GCSendSkillList;
}

void GCSendSkillList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendSkillList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(isfirstlogin_, skillflag_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_shenqiskilldata()) {
      if (shenqiskilldata_ != NULL) shenqiskilldata_->::SkillItemData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendSkillList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendSkillList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }

      // repeated .SkillItemData skilldata = 2;
      case 2: {
        if (tag == 18) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectTag(24)) goto parse_isfirstlogin;
        break;
      }

      // optional int32 isfirstlogin = 3;
      case 3: {
        if (tag == 24) {
         parse_isfirstlogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfirstlogin_)));
          set_has_isfirstlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shenQiSkilldata;
        break;
      }

      // optional .SkillItemData shenQiSkilldata = 4;
      case 4: {
        if (tag == 34) {
         parse_shenQiSkilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shenqiskilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skillFlag;
        break;
      }

      // optional int32 skillFlag = 5;
      case 5: {
        if (tag == 40) {
         parse_skillFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillflag_)));
          set_has_skillflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendSkillList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendSkillList)
  return false;
#undef DO_
}

void GCSendSkillList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendSkillList)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }

  // optional int32 isfirstlogin = 3;
  if (has_isfirstlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isfirstlogin(), output);
  }

  // optional .SkillItemData shenQiSkilldata = 4;
  if (has_shenqiskilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shenqiskilldata(), output);
  }

  // optional int32 skillFlag = 5;
  if (has_skillflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skillflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendSkillList)
}

::google::protobuf::uint8* GCSendSkillList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendSkillList)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }

  // optional int32 isfirstlogin = 3;
  if (has_isfirstlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isfirstlogin(), target);
  }

  // optional .SkillItemData shenQiSkilldata = 4;
  if (has_shenqiskilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shenqiskilldata(), target);
  }

  // optional int32 skillFlag = 5;
  if (has_skillflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skillflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendSkillList)
  return target;
}

int GCSendSkillList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 isfirstlogin = 3;
    if (has_isfirstlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfirstlogin());
    }

    // optional .SkillItemData shenQiSkilldata = 4;
    if (has_shenqiskilldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shenqiskilldata());
    }

    // optional int32 skillFlag = 5;
    if (has_skillflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillflag());
    }

  }
  // repeated .SkillItemData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendSkillList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendSkillList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendSkillList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendSkillList::MergeFrom(const GCSendSkillList& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isfirstlogin()) {
      set_isfirstlogin(from.isfirstlogin());
    }
    if (from.has_shenqiskilldata()) {
      mutable_shenqiskilldata()->::SkillItemData::MergeFrom(from.shenqiskilldata());
    }
    if (from.has_skillflag()) {
      set_skillflag(from.skillflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendSkillList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendSkillList::CopyFrom(const GCSendSkillList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendSkillList::IsInitialized() const {

  return true;
}

void GCSendSkillList::Swap(GCSendSkillList* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(isfirstlogin_, other->isfirstlogin_);
    std::swap(shenqiskilldata_, other->shenqiskilldata_);
    std::swap(skillflag_, other->skillflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendSkillList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendSkillList_descriptor_;
  metadata.reflection = GCSendSkillList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPlayerHangup::kOpenFieldNumber;
const int CGPlayerHangup::kScopeFieldNumber;
const int CGPlayerHangup::kAutoRenornFieldNumber;
const int CGPlayerHangup::kAvoiBossFieldNumber;
const int CGPlayerHangup::kAttackBackFieldNumber;
const int CGPlayerHangup::kPickTypeIndexsFieldNumber;
const int CGPlayerHangup::kPickQualityFieldNumber;
const int CGPlayerHangup::kAutoSkillsFieldNumber;
#endif  // !_MSC_VER

CGPlayerHangup::CGPlayerHangup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPlayerHangup)
}

void CGPlayerHangup::InitAsDefaultInstance() {
}

CGPlayerHangup::CGPlayerHangup(const CGPlayerHangup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPlayerHangup)
}

void CGPlayerHangup::SharedCtor() {
  _cached_size_ = 0;
  open_ = 0;
  scope_ = 0;
  autorenorn_ = 0;
  avoiboss_ = 0;
  attackback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPlayerHangup::~CGPlayerHangup() {
  // @@protoc_insertion_point(destructor:CGPlayerHangup)
  SharedDtor();
}

void CGPlayerHangup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPlayerHangup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPlayerHangup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPlayerHangup_descriptor_;
}

const CGPlayerHangup& CGPlayerHangup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGPlayerHangup* CGPlayerHangup::default_instance_ = NULL;

CGPlayerHangup* CGPlayerHangup::New() const {
  return new CGPlayerHangup;
}

void CGPlayerHangup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGPlayerHangup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(open_, avoiboss_);
    attackback_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  picktypeindexs_.Clear();
  pickquality_.Clear();
  autoskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPlayerHangup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPlayerHangup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 open = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scope;
        break;
      }

      // optional int32 scope = 2;
      case 2: {
        if (tag == 16) {
         parse_scope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_)));
          set_has_scope();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_autoRenorn;
        break;
      }

      // optional int32 autoRenorn = 3;
      case 3: {
        if (tag == 24) {
         parse_autoRenorn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autorenorn_)));
          set_has_autorenorn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_avoiBoss;
        break;
      }

      // optional int32 avoiBoss = 4;
      case 4: {
        if (tag == 32) {
         parse_avoiBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoiboss_)));
          set_has_avoiboss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_attackBack;
        break;
      }

      // optional int32 attackBack = 5;
      case 5: {
        if (tag == 40) {
         parse_attackBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackback_)));
          set_has_attackback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pickTypeIndexs;
        break;
      }

      // repeated int32 pickTypeIndexs = 6;
      case 6: {
        if (tag == 48) {
         parse_pickTypeIndexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_picktypeindexs())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_picktypeindexs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pickTypeIndexs;
        if (input->ExpectTag(56)) goto parse_pickQuality;
        break;
      }

      // repeated int32 pickQuality = 7;
      case 7: {
        if (tag == 56) {
         parse_pickQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_pickquality())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pickquality())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pickQuality;
        if (input->ExpectTag(64)) goto parse_autoSkills;
        break;
      }

      // repeated int32 autoSkills = 8;
      case 8: {
        if (tag == 64) {
         parse_autoSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_autoskills())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_autoskills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_autoSkills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPlayerHangup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPlayerHangup)
  return false;
#undef DO_
}

void CGPlayerHangup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPlayerHangup)
  // optional int32 open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->open(), output);
  }

  // optional int32 scope = 2;
  if (has_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scope(), output);
  }

  // optional int32 autoRenorn = 3;
  if (has_autorenorn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->autorenorn(), output);
  }

  // optional int32 avoiBoss = 4;
  if (has_avoiboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->avoiboss(), output);
  }

  // optional int32 attackBack = 5;
  if (has_attackback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attackback(), output);
  }

  // repeated int32 pickTypeIndexs = 6;
  for (int i = 0; i < this->picktypeindexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->picktypeindexs(i), output);
  }

  // repeated int32 pickQuality = 7;
  for (int i = 0; i < this->pickquality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->pickquality(i), output);
  }

  // repeated int32 autoSkills = 8;
  for (int i = 0; i < this->autoskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->autoskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPlayerHangup)
}

::google::protobuf::uint8* CGPlayerHangup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPlayerHangup)
  // optional int32 open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->open(), target);
  }

  // optional int32 scope = 2;
  if (has_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scope(), target);
  }

  // optional int32 autoRenorn = 3;
  if (has_autorenorn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->autorenorn(), target);
  }

  // optional int32 avoiBoss = 4;
  if (has_avoiboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->avoiboss(), target);
  }

  // optional int32 attackBack = 5;
  if (has_attackback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attackback(), target);
  }

  // repeated int32 pickTypeIndexs = 6;
  for (int i = 0; i < this->picktypeindexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->picktypeindexs(i), target);
  }

  // repeated int32 pickQuality = 7;
  for (int i = 0; i < this->pickquality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->pickquality(i), target);
  }

  // repeated int32 autoSkills = 8;
  for (int i = 0; i < this->autoskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->autoskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPlayerHangup)
  return target;
}

int CGPlayerHangup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 open = 1;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

    // optional int32 scope = 2;
    if (has_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope());
    }

    // optional int32 autoRenorn = 3;
    if (has_autorenorn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autorenorn());
    }

    // optional int32 avoiBoss = 4;
    if (has_avoiboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoiboss());
    }

    // optional int32 attackBack = 5;
    if (has_attackback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackback());
    }

  }
  // repeated int32 pickTypeIndexs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->picktypeindexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->picktypeindexs(i));
    }
    total_size += 1 * this->picktypeindexs_size() + data_size;
  }

  // repeated int32 pickQuality = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->pickquality_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pickquality(i));
    }
    total_size += 1 * this->pickquality_size() + data_size;
  }

  // repeated int32 autoSkills = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->autoskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->autoskills(i));
    }
    total_size += 1 * this->autoskills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPlayerHangup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPlayerHangup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPlayerHangup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPlayerHangup::MergeFrom(const CGPlayerHangup& from) {
  GOOGLE_CHECK_NE(&from, this);
  picktypeindexs_.MergeFrom(from.picktypeindexs_);
  pickquality_.MergeFrom(from.pickquality_);
  autoskills_.MergeFrom(from.autoskills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_scope()) {
      set_scope(from.scope());
    }
    if (from.has_autorenorn()) {
      set_autorenorn(from.autorenorn());
    }
    if (from.has_avoiboss()) {
      set_avoiboss(from.avoiboss());
    }
    if (from.has_attackback()) {
      set_attackback(from.attackback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPlayerHangup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPlayerHangup::CopyFrom(const CGPlayerHangup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerHangup::IsInitialized() const {

  return true;
}

void CGPlayerHangup::Swap(CGPlayerHangup* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(scope_, other->scope_);
    std::swap(autorenorn_, other->autorenorn_);
    std::swap(avoiboss_, other->avoiboss_);
    std::swap(attackback_, other->attackback_);
    picktypeindexs_.Swap(&other->picktypeindexs_);
    pickquality_.Swap(&other->pickquality_);
    autoskills_.Swap(&other->autoskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPlayerHangup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPlayerHangup_descriptor_;
  metadata.reflection = CGPlayerHangup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPlayerHangup::kResultFieldNumber;
const int GCPlayerHangup::kOpenFieldNumber;
#endif  // !_MSC_VER

GCPlayerHangup::GCPlayerHangup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPlayerHangup)
}

void GCPlayerHangup::InitAsDefaultInstance() {
}

GCPlayerHangup::GCPlayerHangup(const GCPlayerHangup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPlayerHangup)
}

void GCPlayerHangup::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPlayerHangup::~GCPlayerHangup() {
  // @@protoc_insertion_point(destructor:GCPlayerHangup)
  SharedDtor();
}

void GCPlayerHangup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPlayerHangup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPlayerHangup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPlayerHangup_descriptor_;
}

const GCPlayerHangup& GCPlayerHangup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCPlayerHangup* GCPlayerHangup::default_instance_ = NULL;

GCPlayerHangup* GCPlayerHangup::New() const {
  return new GCPlayerHangup;
}

void GCPlayerHangup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPlayerHangup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, open_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPlayerHangup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPlayerHangup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open;
        break;
      }

      // optional int32 open = 2;
      case 2: {
        if (tag == 16) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPlayerHangup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPlayerHangup)
  return false;
#undef DO_
}

void GCPlayerHangup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPlayerHangup)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 open = 2;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPlayerHangup)
}

::google::protobuf::uint8* GCPlayerHangup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPlayerHangup)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 open = 2;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPlayerHangup)
  return target;
}

int GCPlayerHangup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 open = 2;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPlayerHangup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPlayerHangup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPlayerHangup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPlayerHangup::MergeFrom(const GCPlayerHangup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPlayerHangup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPlayerHangup::CopyFrom(const GCPlayerHangup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerHangup::IsInitialized() const {

  return true;
}

void GCPlayerHangup::Swap(GCPlayerHangup* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPlayerHangup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPlayerHangup_descriptor_;
  metadata.reflection = GCPlayerHangup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSendRotate::kObjectIdFieldNumber;
const int CGSendRotate::kRotateFieldNumber;
#endif  // !_MSC_VER

CGSendRotate::CGSendRotate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSendRotate)
}

void CGSendRotate::InitAsDefaultInstance() {
  rotate_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGSendRotate::CGSendRotate(const CGSendRotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSendRotate)
}

void CGSendRotate::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  rotate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSendRotate::~CGSendRotate() {
  // @@protoc_insertion_point(destructor:CGSendRotate)
  SharedDtor();
}

void CGSendRotate::SharedDtor() {
  if (this != default_instance_) {
    delete rotate_;
  }
}

void CGSendRotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSendRotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSendRotate_descriptor_;
}

const CGSendRotate& CGSendRotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGSendRotate* CGSendRotate::default_instance_ = NULL;

CGSendRotate* CGSendRotate::New() const {
  return new CGSendRotate;
}

void CGSendRotate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    objectid_ = GOOGLE_LONGLONG(0);
    if (has_rotate()) {
      if (rotate_ != NULL) rotate_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSendRotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSendRotate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotate;
        break;
      }

      // optional .Vector3Info rotate = 2;
      case 2: {
        if (tag == 18) {
         parse_rotate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSendRotate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSendRotate)
  return false;
#undef DO_
}

void CGSendRotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSendRotate)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional .Vector3Info rotate = 2;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSendRotate)
}

::google::protobuf::uint8* CGSendRotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSendRotate)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional .Vector3Info rotate = 2;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSendRotate)
  return target;
}

int CGSendRotate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional .Vector3Info rotate = 2;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSendRotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSendRotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSendRotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSendRotate::MergeFrom(const CGSendRotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_rotate()) {
      mutable_rotate()->::Vector3Info::MergeFrom(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSendRotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSendRotate::CopyFrom(const CGSendRotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSendRotate::IsInitialized() const {

  return true;
}

void CGSendRotate::Swap(CGSendRotate* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSendRotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSendRotate_descriptor_;
  metadata.reflection = CGSendRotate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendRotate::kObjectIdFieldNumber;
const int GCSendRotate::kRotateFieldNumber;
#endif  // !_MSC_VER

GCSendRotate::GCSendRotate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendRotate)
}

void GCSendRotate::InitAsDefaultInstance() {
  rotate_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCSendRotate::GCSendRotate(const GCSendRotate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendRotate)
}

void GCSendRotate::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  rotate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendRotate::~GCSendRotate() {
  // @@protoc_insertion_point(destructor:GCSendRotate)
  SharedDtor();
}

void GCSendRotate::SharedDtor() {
  if (this != default_instance_) {
    delete rotate_;
  }
}

void GCSendRotate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendRotate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendRotate_descriptor_;
}

const GCSendRotate& GCSendRotate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCSendRotate* GCSendRotate::default_instance_ = NULL;

GCSendRotate* GCSendRotate::New() const {
  return new GCSendRotate;
}

void GCSendRotate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    objectid_ = GOOGLE_LONGLONG(0);
    if (has_rotate()) {
      if (rotate_ != NULL) rotate_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendRotate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendRotate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotate;
        break;
      }

      // optional .Vector3Info rotate = 2;
      case 2: {
        if (tag == 18) {
         parse_rotate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendRotate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendRotate)
  return false;
#undef DO_
}

void GCSendRotate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendRotate)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional .Vector3Info rotate = 2;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendRotate)
}

::google::protobuf::uint8* GCSendRotate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendRotate)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional .Vector3Info rotate = 2;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendRotate)
  return target;
}

int GCSendRotate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional .Vector3Info rotate = 2;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendRotate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendRotate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendRotate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendRotate::MergeFrom(const GCSendRotate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_rotate()) {
      mutable_rotate()->::Vector3Info::MergeFrom(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendRotate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendRotate::CopyFrom(const GCSendRotate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendRotate::IsInitialized() const {

  return true;
}

void GCSendRotate::Swap(GCSendRotate* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendRotate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendRotate_descriptor_;
  metadata.reflection = GCSendRotate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetPlaerInfoById::kPlayerIDFieldNumber;
const int CGGetPlaerInfoById::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGetPlaerInfoById::CGGetPlaerInfoById()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPlaerInfoById)
}

void CGGetPlaerInfoById::InitAsDefaultInstance() {
}

CGGetPlaerInfoById::CGGetPlaerInfoById(const CGGetPlaerInfoById& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPlaerInfoById)
}

void CGGetPlaerInfoById::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPlaerInfoById::~CGGetPlaerInfoById() {
  // @@protoc_insertion_point(destructor:CGGetPlaerInfoById)
  SharedDtor();
}

void CGGetPlaerInfoById::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPlaerInfoById::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPlaerInfoById::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPlaerInfoById_descriptor_;
}

const CGGetPlaerInfoById& CGGetPlaerInfoById::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGGetPlaerInfoById* CGGetPlaerInfoById::default_instance_ = NULL;

CGGetPlaerInfoById* CGGetPlaerInfoById::New() const {
  return new CGGetPlaerInfoById;
}

void CGGetPlaerInfoById::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetPlaerInfoById*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPlaerInfoById::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPlaerInfoById)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPlaerInfoById)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPlaerInfoById)
  return false;
#undef DO_
}

void CGGetPlaerInfoById::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPlaerInfoById)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPlaerInfoById)
}

::google::protobuf::uint8* CGGetPlaerInfoById::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPlaerInfoById)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPlaerInfoById)
  return target;
}

int CGGetPlaerInfoById::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPlaerInfoById::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPlaerInfoById* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPlaerInfoById*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPlaerInfoById::MergeFrom(const CGGetPlaerInfoById& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPlaerInfoById::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPlaerInfoById::CopyFrom(const CGGetPlaerInfoById& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPlaerInfoById::IsInitialized() const {

  return true;
}

void CGGetPlaerInfoById::Swap(CGGetPlaerInfoById* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPlaerInfoById::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPlaerInfoById_descriptor_;
  metadata.reflection = CGGetPlaerInfoById_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendPlayerInfoById::kCharacterInfoFieldNumber;
const int GCSendPlayerInfoById::kTypeFieldNumber;
#endif  // !_MSC_VER

GCSendPlayerInfoById::GCSendPlayerInfoById()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendPlayerInfoById)
}

void GCSendPlayerInfoById::InitAsDefaultInstance() {
  characterinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCSendPlayerInfoById::GCSendPlayerInfoById(const GCSendPlayerInfoById& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendPlayerInfoById)
}

void GCSendPlayerInfoById::SharedCtor() {
  _cached_size_ = 0;
  characterinfo_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendPlayerInfoById::~GCSendPlayerInfoById() {
  // @@protoc_insertion_point(destructor:GCSendPlayerInfoById)
  SharedDtor();
}

void GCSendPlayerInfoById::SharedDtor() {
  if (this != default_instance_) {
    delete characterinfo_;
  }
}

void GCSendPlayerInfoById::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendPlayerInfoById::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendPlayerInfoById_descriptor_;
}

const GCSendPlayerInfoById& GCSendPlayerInfoById::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCSendPlayerInfoById* GCSendPlayerInfoById::default_instance_ = NULL;

GCSendPlayerInfoById* GCSendPlayerInfoById::New() const {
  return new GCSendPlayerInfoById;
}

void GCSendPlayerInfoById::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_characterinfo()) {
      if (characterinfo_ != NULL) characterinfo_->::CharacterInfo::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendPlayerInfoById::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendPlayerInfoById)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo characterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendPlayerInfoById)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendPlayerInfoById)
  return false;
#undef DO_
}

void GCSendPlayerInfoById::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendPlayerInfoById)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characterinfo(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendPlayerInfoById)
}

::google::protobuf::uint8* GCSendPlayerInfoById::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendPlayerInfoById)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characterinfo(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendPlayerInfoById)
  return target;
}

int GCSendPlayerInfoById::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo characterInfo = 1;
    if (has_characterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->characterinfo());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendPlayerInfoById::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendPlayerInfoById* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendPlayerInfoById*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendPlayerInfoById::MergeFrom(const GCSendPlayerInfoById& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_characterinfo()) {
      mutable_characterinfo()->::CharacterInfo::MergeFrom(from.characterinfo());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendPlayerInfoById::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendPlayerInfoById::CopyFrom(const GCSendPlayerInfoById& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendPlayerInfoById::IsInitialized() const {

  return true;
}

void GCSendPlayerInfoById::Swap(GCSendPlayerInfoById* other) {
  if (other != this) {
    std::swap(characterinfo_, other->characterinfo_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendPlayerInfoById::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendPlayerInfoById_descriptor_;
  metadata.reflection = GCSendPlayerInfoById_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLevelUpGetNewSkill::kSkilldataFieldNumber;
#endif  // !_MSC_VER

GCLevelUpGetNewSkill::GCLevelUpGetNewSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLevelUpGetNewSkill)
}

void GCLevelUpGetNewSkill::InitAsDefaultInstance() {
}

GCLevelUpGetNewSkill::GCLevelUpGetNewSkill(const GCLevelUpGetNewSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLevelUpGetNewSkill)
}

void GCLevelUpGetNewSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLevelUpGetNewSkill::~GCLevelUpGetNewSkill() {
  // @@protoc_insertion_point(destructor:GCLevelUpGetNewSkill)
  SharedDtor();
}

void GCLevelUpGetNewSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCLevelUpGetNewSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLevelUpGetNewSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLevelUpGetNewSkill_descriptor_;
}

const GCLevelUpGetNewSkill& GCLevelUpGetNewSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCLevelUpGetNewSkill* GCLevelUpGetNewSkill::default_instance_ = NULL;

GCLevelUpGetNewSkill* GCLevelUpGetNewSkill::New() const {
  return new GCLevelUpGetNewSkill;
}

void GCLevelUpGetNewSkill::Clear() {
  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLevelUpGetNewSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLevelUpGetNewSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillItemData skilldata = 1;
      case 1: {
        if (tag == 10) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skilldata;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLevelUpGetNewSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLevelUpGetNewSkill)
  return false;
#undef DO_
}

void GCLevelUpGetNewSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLevelUpGetNewSkill)
  // repeated .SkillItemData skilldata = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skilldata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLevelUpGetNewSkill)
}

::google::protobuf::uint8* GCLevelUpGetNewSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLevelUpGetNewSkill)
  // repeated .SkillItemData skilldata = 1;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skilldata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLevelUpGetNewSkill)
  return target;
}

int GCLevelUpGetNewSkill::ByteSize() const {
  int total_size = 0;

  // repeated .SkillItemData skilldata = 1;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLevelUpGetNewSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLevelUpGetNewSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLevelUpGetNewSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLevelUpGetNewSkill::MergeFrom(const GCLevelUpGetNewSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLevelUpGetNewSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLevelUpGetNewSkill::CopyFrom(const GCLevelUpGetNewSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLevelUpGetNewSkill::IsInitialized() const {

  return true;
}

void GCLevelUpGetNewSkill::Swap(GCLevelUpGetNewSkill* other) {
  if (other != this) {
    skilldata_.Swap(&other->skilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLevelUpGetNewSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLevelUpGetNewSkill_descriptor_;
  metadata.reflection = GCLevelUpGetNewSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetPlayerAndPetInfo::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

CGGetPlayerAndPetInfo::CGGetPlayerAndPetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPlayerAndPetInfo)
}

void CGGetPlayerAndPetInfo::InitAsDefaultInstance() {
}

CGGetPlayerAndPetInfo::CGGetPlayerAndPetInfo(const CGGetPlayerAndPetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPlayerAndPetInfo)
}

void CGGetPlayerAndPetInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPlayerAndPetInfo::~CGGetPlayerAndPetInfo() {
  // @@protoc_insertion_point(destructor:CGGetPlayerAndPetInfo)
  SharedDtor();
}

void CGGetPlayerAndPetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPlayerAndPetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPlayerAndPetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPlayerAndPetInfo_descriptor_;
}

const CGGetPlayerAndPetInfo& CGGetPlayerAndPetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGGetPlayerAndPetInfo* CGGetPlayerAndPetInfo::default_instance_ = NULL;

CGGetPlayerAndPetInfo* CGGetPlayerAndPetInfo::New() const {
  return new CGGetPlayerAndPetInfo;
}

void CGGetPlayerAndPetInfo::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPlayerAndPetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPlayerAndPetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPlayerAndPetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPlayerAndPetInfo)
  return false;
#undef DO_
}

void CGGetPlayerAndPetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPlayerAndPetInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPlayerAndPetInfo)
}

::google::protobuf::uint8* CGGetPlayerAndPetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPlayerAndPetInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPlayerAndPetInfo)
  return target;
}

int CGGetPlayerAndPetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPlayerAndPetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPlayerAndPetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPlayerAndPetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPlayerAndPetInfo::MergeFrom(const CGGetPlayerAndPetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPlayerAndPetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPlayerAndPetInfo::CopyFrom(const CGGetPlayerAndPetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPlayerAndPetInfo::IsInitialized() const {

  return true;
}

void CGGetPlayerAndPetInfo::Swap(CGGetPlayerAndPetInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPlayerAndPetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPlayerAndPetInfo_descriptor_;
  metadata.reflection = CGGetPlayerAndPetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendPlayerAndPetInfo::kCharacterInfoFieldNumber;
const int GCSendPlayerAndPetInfo::kPetInfoFieldNumber;
#endif  // !_MSC_VER

GCSendPlayerAndPetInfo::GCSendPlayerAndPetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendPlayerAndPetInfo)
}

void GCSendPlayerAndPetInfo::InitAsDefaultInstance() {
  characterinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
}

GCSendPlayerAndPetInfo::GCSendPlayerAndPetInfo(const GCSendPlayerAndPetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendPlayerAndPetInfo)
}

void GCSendPlayerAndPetInfo::SharedCtor() {
  _cached_size_ = 0;
  characterinfo_ = NULL;
  petinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendPlayerAndPetInfo::~GCSendPlayerAndPetInfo() {
  // @@protoc_insertion_point(destructor:GCSendPlayerAndPetInfo)
  SharedDtor();
}

void GCSendPlayerAndPetInfo::SharedDtor() {
  if (this != default_instance_) {
    delete characterinfo_;
    delete petinfo_;
  }
}

void GCSendPlayerAndPetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendPlayerAndPetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendPlayerAndPetInfo_descriptor_;
}

const GCSendPlayerAndPetInfo& GCSendPlayerAndPetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCSendPlayerAndPetInfo* GCSendPlayerAndPetInfo::default_instance_ = NULL;

GCSendPlayerAndPetInfo* GCSendPlayerAndPetInfo::New() const {
  return new GCSendPlayerAndPetInfo;
}

void GCSendPlayerAndPetInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_characterinfo()) {
      if (characterinfo_ != NULL) characterinfo_->::CharacterInfo::Clear();
    }
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendPlayerAndPetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendPlayerAndPetInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo characterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_characterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_petInfo;
        break;
      }

      // optional .PetInfo petInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_petInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendPlayerAndPetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendPlayerAndPetInfo)
  return false;
#undef DO_
}

void GCSendPlayerAndPetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendPlayerAndPetInfo)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characterinfo(), output);
  }

  // optional .PetInfo petInfo = 2;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->petinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendPlayerAndPetInfo)
}

::google::protobuf::uint8* GCSendPlayerAndPetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendPlayerAndPetInfo)
  // optional .CharacterInfo characterInfo = 1;
  if (has_characterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characterinfo(), target);
  }

  // optional .PetInfo petInfo = 2;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->petinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendPlayerAndPetInfo)
  return target;
}

int GCSendPlayerAndPetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo characterInfo = 1;
    if (has_characterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->characterinfo());
    }

    // optional .PetInfo petInfo = 2;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendPlayerAndPetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendPlayerAndPetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendPlayerAndPetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendPlayerAndPetInfo::MergeFrom(const GCSendPlayerAndPetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_characterinfo()) {
      mutable_characterinfo()->::CharacterInfo::MergeFrom(from.characterinfo());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendPlayerAndPetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendPlayerAndPetInfo::CopyFrom(const GCSendPlayerAndPetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendPlayerAndPetInfo::IsInitialized() const {

  return true;
}

void GCSendPlayerAndPetInfo::Swap(GCSendPlayerAndPetInfo* other) {
  if (other != this) {
    std::swap(characterinfo_, other->characterinfo_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendPlayerAndPetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendPlayerAndPetInfo_descriptor_;
  metadata.reflection = GCSendPlayerAndPetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGChangePlayer::CGChangePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChangePlayer)
}

void CGChangePlayer::InitAsDefaultInstance() {
}

CGChangePlayer::CGChangePlayer(const CGChangePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChangePlayer)
}

void CGChangePlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChangePlayer::~CGChangePlayer() {
  // @@protoc_insertion_point(destructor:CGChangePlayer)
  SharedDtor();
}

void CGChangePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChangePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChangePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChangePlayer_descriptor_;
}

const CGChangePlayer& CGChangePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGChangePlayer* CGChangePlayer::default_instance_ = NULL;

CGChangePlayer* CGChangePlayer::New() const {
  return new CGChangePlayer;
}

void CGChangePlayer::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChangePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChangePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGChangePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChangePlayer)
  return false;
#undef DO_
}

void CGChangePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChangePlayer)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChangePlayer)
}

::google::protobuf::uint8* CGChangePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChangePlayer)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChangePlayer)
  return target;
}

int CGChangePlayer::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChangePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChangePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChangePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChangePlayer::MergeFrom(const CGChangePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChangePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChangePlayer::CopyFrom(const CGChangePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChangePlayer::IsInitialized() const {

  return true;
}

void CGChangePlayer::Swap(CGChangePlayer* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChangePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChangePlayer_descriptor_;
  metadata.reflection = CGChangePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangePlayerResult::kResultFieldNumber;
#endif  // !_MSC_VER

GCChangePlayerResult::GCChangePlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangePlayerResult)
}

void GCChangePlayerResult::InitAsDefaultInstance() {
}

GCChangePlayerResult::GCChangePlayerResult(const GCChangePlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangePlayerResult)
}

void GCChangePlayerResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangePlayerResult::~GCChangePlayerResult() {
  // @@protoc_insertion_point(destructor:GCChangePlayerResult)
  SharedDtor();
}

void GCChangePlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChangePlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangePlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangePlayerResult_descriptor_;
}

const GCChangePlayerResult& GCChangePlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCChangePlayerResult* GCChangePlayerResult::default_instance_ = NULL;

GCChangePlayerResult* GCChangePlayerResult::New() const {
  return new GCChangePlayerResult;
}

void GCChangePlayerResult::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangePlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangePlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangePlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangePlayerResult)
  return false;
#undef DO_
}

void GCChangePlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangePlayerResult)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangePlayerResult)
}

::google::protobuf::uint8* GCChangePlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangePlayerResult)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangePlayerResult)
  return target;
}

int GCChangePlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangePlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangePlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangePlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangePlayerResult::MergeFrom(const GCChangePlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangePlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangePlayerResult::CopyFrom(const GCChangePlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangePlayerResult::IsInitialized() const {

  return true;
}

void GCChangePlayerResult::Swap(GCChangePlayerResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangePlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangePlayerResult_descriptor_;
  metadata.reflection = GCChangePlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCStressTestBegin::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GCStressTestBegin::GCStressTestBegin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCStressTestBegin)
}

void GCStressTestBegin::InitAsDefaultInstance() {
}

GCStressTestBegin::GCStressTestBegin(const GCStressTestBegin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCStressTestBegin)
}

void GCStressTestBegin::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCStressTestBegin::~GCStressTestBegin() {
  // @@protoc_insertion_point(destructor:GCStressTestBegin)
  SharedDtor();
}

void GCStressTestBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCStressTestBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCStressTestBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCStressTestBegin_descriptor_;
}

const GCStressTestBegin& GCStressTestBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCStressTestBegin* GCStressTestBegin::default_instance_ = NULL;

GCStressTestBegin* GCStressTestBegin::New() const {
  return new GCStressTestBegin;
}

void GCStressTestBegin::Clear() {
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCStressTestBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCStressTestBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCStressTestBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCStressTestBegin)
  return false;
#undef DO_
}

void GCStressTestBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCStressTestBegin)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCStressTestBegin)
}

::google::protobuf::uint8* GCStressTestBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCStressTestBegin)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCStressTestBegin)
  return target;
}

int GCStressTestBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCStressTestBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCStressTestBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCStressTestBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCStressTestBegin::MergeFrom(const GCStressTestBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCStressTestBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCStressTestBegin::CopyFrom(const GCStressTestBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCStressTestBegin::IsInitialized() const {

  return true;
}

void GCStressTestBegin::Swap(GCStressTestBegin* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCStressTestBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCStressTestBegin_descriptor_;
  metadata.reflection = GCStressTestBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGPlayerViewSetting::kMaxNumFieldNumber;
#endif  // !_MSC_VER

CGPlayerViewSetting::CGPlayerViewSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGPlayerViewSetting)
}

void CGPlayerViewSetting::InitAsDefaultInstance() {
}

CGPlayerViewSetting::CGPlayerViewSetting(const CGPlayerViewSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGPlayerViewSetting)
}

void CGPlayerViewSetting::SharedCtor() {
  _cached_size_ = 0;
  maxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGPlayerViewSetting::~CGPlayerViewSetting() {
  // @@protoc_insertion_point(destructor:CGPlayerViewSetting)
  SharedDtor();
}

void CGPlayerViewSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGPlayerViewSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGPlayerViewSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGPlayerViewSetting_descriptor_;
}

const CGPlayerViewSetting& CGPlayerViewSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGPlayerViewSetting* CGPlayerViewSetting::default_instance_ = NULL;

CGPlayerViewSetting* CGPlayerViewSetting::New() const {
  return new CGPlayerViewSetting;
}

void CGPlayerViewSetting::Clear() {
  maxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGPlayerViewSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGPlayerViewSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGPlayerViewSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGPlayerViewSetting)
  return false;
#undef DO_
}

void CGPlayerViewSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGPlayerViewSetting)
  // optional int32 maxNum = 1;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGPlayerViewSetting)
}

::google::protobuf::uint8* CGPlayerViewSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGPlayerViewSetting)
  // optional int32 maxNum = 1;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGPlayerViewSetting)
  return target;
}

int CGPlayerViewSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxNum = 1;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGPlayerViewSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGPlayerViewSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGPlayerViewSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGPlayerViewSetting::MergeFrom(const CGPlayerViewSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGPlayerViewSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGPlayerViewSetting::CopyFrom(const CGPlayerViewSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGPlayerViewSetting::IsInitialized() const {

  return true;
}

void CGPlayerViewSetting::Swap(CGPlayerViewSetting* other) {
  if (other != this) {
    std::swap(maxnum_, other->maxnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGPlayerViewSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGPlayerViewSetting_descriptor_;
  metadata.reflection = CGPlayerViewSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPlayerViewSetting::kResultFieldNumber;
const int GCPlayerViewSetting::kMaxNumFieldNumber;
#endif  // !_MSC_VER

GCPlayerViewSetting::GCPlayerViewSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPlayerViewSetting)
}

void GCPlayerViewSetting::InitAsDefaultInstance() {
}

GCPlayerViewSetting::GCPlayerViewSetting(const GCPlayerViewSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPlayerViewSetting)
}

void GCPlayerViewSetting::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  maxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPlayerViewSetting::~GCPlayerViewSetting() {
  // @@protoc_insertion_point(destructor:GCPlayerViewSetting)
  SharedDtor();
}

void GCPlayerViewSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPlayerViewSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPlayerViewSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPlayerViewSetting_descriptor_;
}

const GCPlayerViewSetting& GCPlayerViewSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCPlayerViewSetting* GCPlayerViewSetting::default_instance_ = NULL;

GCPlayerViewSetting* GCPlayerViewSetting::New() const {
  return new GCPlayerViewSetting;
}

void GCPlayerViewSetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPlayerViewSetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, maxnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPlayerViewSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPlayerViewSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 2;
      case 2: {
        if (tag == 16) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPlayerViewSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPlayerViewSetting)
  return false;
#undef DO_
}

void GCPlayerViewSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPlayerViewSetting)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPlayerViewSetting)
}

::google::protobuf::uint8* GCPlayerViewSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPlayerViewSetting)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPlayerViewSetting)
  return target;
}

int GCPlayerViewSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 maxNum = 2;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPlayerViewSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPlayerViewSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPlayerViewSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPlayerViewSetting::MergeFrom(const GCPlayerViewSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPlayerViewSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPlayerViewSetting::CopyFrom(const GCPlayerViewSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPlayerViewSetting::IsInitialized() const {

  return true;
}

void GCPlayerViewSetting::Swap(GCPlayerViewSetting* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPlayerViewSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPlayerViewSetting_descriptor_;
  metadata.reflection = GCPlayerViewSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGQuitLogin::CGQuitLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGQuitLogin)
}

void CGQuitLogin::InitAsDefaultInstance() {
}

CGQuitLogin::CGQuitLogin(const CGQuitLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGQuitLogin)
}

void CGQuitLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGQuitLogin::~CGQuitLogin() {
  // @@protoc_insertion_point(destructor:CGQuitLogin)
  SharedDtor();
}

void CGQuitLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGQuitLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGQuitLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGQuitLogin_descriptor_;
}

const CGQuitLogin& CGQuitLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGQuitLogin* CGQuitLogin::default_instance_ = NULL;

CGQuitLogin* CGQuitLogin::New() const {
  return new CGQuitLogin;
}

void CGQuitLogin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGQuitLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGQuitLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGQuitLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGQuitLogin)
  return false;
#undef DO_
}

void CGQuitLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGQuitLogin)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGQuitLogin)
}

::google::protobuf::uint8* CGQuitLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGQuitLogin)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGQuitLogin)
  return target;
}

int CGQuitLogin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGQuitLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGQuitLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGQuitLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGQuitLogin::MergeFrom(const CGQuitLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGQuitLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGQuitLogin::CopyFrom(const CGQuitLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQuitLogin::IsInitialized() const {

  return true;
}

void CGQuitLogin::Swap(CGQuitLogin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGQuitLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGQuitLogin_descriptor_;
  metadata.reflection = CGQuitLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCQuitLoginBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCQuitLoginBack::GCQuitLoginBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCQuitLoginBack)
}

void GCQuitLoginBack::InitAsDefaultInstance() {
}

GCQuitLoginBack::GCQuitLoginBack(const GCQuitLoginBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCQuitLoginBack)
}

void GCQuitLoginBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCQuitLoginBack::~GCQuitLoginBack() {
  // @@protoc_insertion_point(destructor:GCQuitLoginBack)
  SharedDtor();
}

void GCQuitLoginBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCQuitLoginBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCQuitLoginBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCQuitLoginBack_descriptor_;
}

const GCQuitLoginBack& GCQuitLoginBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCQuitLoginBack* GCQuitLoginBack::default_instance_ = NULL;

GCQuitLoginBack* GCQuitLoginBack::New() const {
  return new GCQuitLoginBack;
}

void GCQuitLoginBack::Clear() {
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCQuitLoginBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCQuitLoginBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCQuitLoginBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCQuitLoginBack)
  return false;
#undef DO_
}

void GCQuitLoginBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCQuitLoginBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCQuitLoginBack)
}

::google::protobuf::uint8* GCQuitLoginBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCQuitLoginBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCQuitLoginBack)
  return target;
}

int GCQuitLoginBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCQuitLoginBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCQuitLoginBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCQuitLoginBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCQuitLoginBack::MergeFrom(const GCQuitLoginBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCQuitLoginBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQuitLoginBack::CopyFrom(const GCQuitLoginBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQuitLoginBack::IsInitialized() const {

  return true;
}

void GCQuitLoginBack::Swap(GCQuitLoginBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCQuitLoginBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCQuitLoginBack_descriptor_;
  metadata.reflection = GCQuitLoginBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMuteTime::kFlagFieldNumber;
const int GCMuteTime::kMuteTimeFieldNumber;
const int GCMuteTime::kMuteEndTimeFieldNumber;
#endif  // !_MSC_VER

GCMuteTime::GCMuteTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCMuteTime)
}

void GCMuteTime::InitAsDefaultInstance() {
}

GCMuteTime::GCMuteTime(const GCMuteTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCMuteTime)
}

void GCMuteTime::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  mutetime_ = 0;
  muteendtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMuteTime::~GCMuteTime() {
  // @@protoc_insertion_point(destructor:GCMuteTime)
  SharedDtor();
}

void GCMuteTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMuteTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMuteTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMuteTime_descriptor_;
}

const GCMuteTime& GCMuteTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCMuteTime* GCMuteTime::default_instance_ = NULL;

GCMuteTime* GCMuteTime::New() const {
  return new GCMuteTime;
}

void GCMuteTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMuteTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, muteendtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMuteTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCMuteTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_muteTime;
        break;
      }

      // optional int32 muteTime = 2;
      case 2: {
        if (tag == 16) {
         parse_muteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mutetime_)));
          set_has_mutetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_muteEndTime;
        break;
      }

      // optional int64 muteEndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_muteEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &muteendtime_)));
          set_has_muteendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCMuteTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCMuteTime)
  return false;
#undef DO_
}

void GCMuteTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCMuteTime)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 muteTime = 2;
  if (has_mutetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mutetime(), output);
  }

  // optional int64 muteEndTime = 3;
  if (has_muteendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->muteendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCMuteTime)
}

::google::protobuf::uint8* GCMuteTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCMuteTime)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 muteTime = 2;
  if (has_mutetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mutetime(), target);
  }

  // optional int64 muteEndTime = 3;
  if (has_muteendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->muteendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCMuteTime)
  return target;
}

int GCMuteTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 muteTime = 2;
    if (has_mutetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mutetime());
    }

    // optional int64 muteEndTime = 3;
    if (has_muteendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->muteendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMuteTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMuteTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMuteTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMuteTime::MergeFrom(const GCMuteTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_mutetime()) {
      set_mutetime(from.mutetime());
    }
    if (from.has_muteendtime()) {
      set_muteendtime(from.muteendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMuteTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMuteTime::CopyFrom(const GCMuteTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMuteTime::IsInitialized() const {

  return true;
}

void GCMuteTime::Swap(GCMuteTime* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(mutetime_, other->mutetime_);
    std::swap(muteendtime_, other->muteendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMuteTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMuteTime_descriptor_;
  metadata.reflection = GCMuteTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameForceLoginout::kPlayerIdFieldNumber;
const int GameForceLoginout::kNoticeLoginSvrFieldNumber;
const int GameForceLoginout::kNoticeGateSvrFieldNumber;
const int GameForceLoginout::kReasonFieldNumber;
#endif  // !_MSC_VER

GameForceLoginout::GameForceLoginout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameForceLoginout)
}

void GameForceLoginout::InitAsDefaultInstance() {
}

GameForceLoginout::GameForceLoginout(const GameForceLoginout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameForceLoginout)
}

void GameForceLoginout::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  noticeloginsvr_ = 0;
  noticegatesvr_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameForceLoginout::~GameForceLoginout() {
  // @@protoc_insertion_point(destructor:GameForceLoginout)
  SharedDtor();
}

void GameForceLoginout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameForceLoginout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameForceLoginout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameForceLoginout_descriptor_;
}

const GameForceLoginout& GameForceLoginout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GameForceLoginout* GameForceLoginout::default_instance_ = NULL;

GameForceLoginout* GameForceLoginout::New() const {
  return new GameForceLoginout;
}

void GameForceLoginout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameForceLoginout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameForceLoginout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameForceLoginout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_noticeLoginSvr;
        break;
      }

      // optional int32 noticeLoginSvr = 2;
      case 2: {
        if (tag == 16) {
         parse_noticeLoginSvr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticeloginsvr_)));
          set_has_noticeloginsvr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_noticeGateSvr;
        break;
      }

      // optional int32 noticeGateSvr = 3;
      case 3: {
        if (tag == 24) {
         parse_noticeGateSvr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticegatesvr_)));
          set_has_noticegatesvr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // optional int32 reason = 4;
      case 4: {
        if (tag == 32) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameForceLoginout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameForceLoginout)
  return false;
#undef DO_
}

void GameForceLoginout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameForceLoginout)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 noticeLoginSvr = 2;
  if (has_noticeloginsvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->noticeloginsvr(), output);
  }

  // optional int32 noticeGateSvr = 3;
  if (has_noticegatesvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->noticegatesvr(), output);
  }

  // optional int32 reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameForceLoginout)
}

::google::protobuf::uint8* GameForceLoginout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameForceLoginout)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 noticeLoginSvr = 2;
  if (has_noticeloginsvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->noticeloginsvr(), target);
  }

  // optional int32 noticeGateSvr = 3;
  if (has_noticegatesvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->noticegatesvr(), target);
  }

  // optional int32 reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameForceLoginout)
  return target;
}

int GameForceLoginout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 noticeLoginSvr = 2;
    if (has_noticeloginsvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticeloginsvr());
    }

    // optional int32 noticeGateSvr = 3;
    if (has_noticegatesvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticegatesvr());
    }

    // optional int32 reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameForceLoginout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameForceLoginout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameForceLoginout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameForceLoginout::MergeFrom(const GameForceLoginout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_noticeloginsvr()) {
      set_noticeloginsvr(from.noticeloginsvr());
    }
    if (from.has_noticegatesvr()) {
      set_noticegatesvr(from.noticegatesvr());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameForceLoginout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameForceLoginout::CopyFrom(const GameForceLoginout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameForceLoginout::IsInitialized() const {

  return true;
}

void GameForceLoginout::Swap(GameForceLoginout* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(noticeloginsvr_, other->noticeloginsvr_);
    std::swap(noticegatesvr_, other->noticegatesvr_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameForceLoginout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameForceLoginout_descriptor_;
  metadata.reflection = GameForceLoginout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCExpPlus::kDisplayFieldNumber;
const int GCExpPlus::kWorldLevelFieldNumber;
#endif  // !_MSC_VER

GCExpPlus::GCExpPlus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCExpPlus)
}

void GCExpPlus::InitAsDefaultInstance() {
}

GCExpPlus::GCExpPlus(const GCExpPlus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCExpPlus)
}

void GCExpPlus::SharedCtor() {
  _cached_size_ = 0;
  display_ = 0;
  worldlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCExpPlus::~GCExpPlus() {
  // @@protoc_insertion_point(destructor:GCExpPlus)
  SharedDtor();
}

void GCExpPlus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCExpPlus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCExpPlus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCExpPlus_descriptor_;
}

const GCExpPlus& GCExpPlus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCExpPlus* GCExpPlus::default_instance_ = NULL;

GCExpPlus* GCExpPlus::New() const {
  return new GCExpPlus;
}

void GCExpPlus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCExpPlus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(display_, worldlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCExpPlus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCExpPlus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 display = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_)));
          set_has_display();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worldLevel;
        break;
      }

      // optional int32 worldLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_worldLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldlevel_)));
          set_has_worldlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCExpPlus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCExpPlus)
  return false;
#undef DO_
}

void GCExpPlus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCExpPlus)
  // optional int32 display = 1;
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->display(), output);
  }

  // optional int32 worldLevel = 2;
  if (has_worldlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCExpPlus)
}

::google::protobuf::uint8* GCExpPlus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCExpPlus)
  // optional int32 display = 1;
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->display(), target);
  }

  // optional int32 worldLevel = 2;
  if (has_worldlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCExpPlus)
  return target;
}

int GCExpPlus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 display = 1;
    if (has_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display());
    }

    // optional int32 worldLevel = 2;
    if (has_worldlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCExpPlus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCExpPlus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCExpPlus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCExpPlus::MergeFrom(const GCExpPlus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_worldlevel()) {
      set_worldlevel(from.worldlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCExpPlus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCExpPlus::CopyFrom(const GCExpPlus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCExpPlus::IsInitialized() const {

  return true;
}

void GCExpPlus::Swap(GCExpPlus* other) {
  if (other != this) {
    std::swap(display_, other->display_);
    std::swap(worldlevel_, other->worldlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCExpPlus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCExpPlus_descriptor_;
  metadata.reflection = GCExpPlus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCNonageSts::kStsFieldNumber;
#endif  // !_MSC_VER

GCNonageSts::GCNonageSts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCNonageSts)
}

void GCNonageSts::InitAsDefaultInstance() {
}

GCNonageSts::GCNonageSts(const GCNonageSts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCNonageSts)
}

void GCNonageSts::SharedCtor() {
  _cached_size_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCNonageSts::~GCNonageSts() {
  // @@protoc_insertion_point(destructor:GCNonageSts)
  SharedDtor();
}

void GCNonageSts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCNonageSts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCNonageSts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCNonageSts_descriptor_;
}

const GCNonageSts& GCNonageSts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCNonageSts* GCNonageSts::default_instance_ = NULL;

GCNonageSts* GCNonageSts::New() const {
  return new GCNonageSts;
}

void GCNonageSts::Clear() {
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCNonageSts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCNonageSts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCNonageSts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCNonageSts)
  return false;
#undef DO_
}

void GCNonageSts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCNonageSts)
  // optional int32 sts = 1;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCNonageSts)
}

::google::protobuf::uint8* GCNonageSts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCNonageSts)
  // optional int32 sts = 1;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCNonageSts)
  return target;
}

int GCNonageSts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sts = 1;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCNonageSts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCNonageSts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCNonageSts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCNonageSts::MergeFrom(const GCNonageSts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCNonageSts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCNonageSts::CopyFrom(const GCNonageSts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCNonageSts::IsInitialized() const {

  return true;
}

void GCNonageSts::Swap(GCNonageSts* other) {
  if (other != this) {
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCNonageSts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCNonageSts_descriptor_;
  metadata.reflection = GCNonageSts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNeedNonage::kStsFieldNumber;
#endif  // !_MSC_VER

CGNeedNonage::CGNeedNonage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGNeedNonage)
}

void CGNeedNonage::InitAsDefaultInstance() {
}

CGNeedNonage::CGNeedNonage(const CGNeedNonage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGNeedNonage)
}

void CGNeedNonage::SharedCtor() {
  _cached_size_ = 0;
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNeedNonage::~CGNeedNonage() {
  // @@protoc_insertion_point(destructor:CGNeedNonage)
  SharedDtor();
}

void CGNeedNonage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNeedNonage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNeedNonage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNeedNonage_descriptor_;
}

const CGNeedNonage& CGNeedNonage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGNeedNonage* CGNeedNonage::default_instance_ = NULL;

CGNeedNonage* CGNeedNonage::New() const {
  return new CGNeedNonage;
}

void CGNeedNonage::Clear() {
  sts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNeedNonage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGNeedNonage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGNeedNonage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGNeedNonage)
  return false;
#undef DO_
}

void CGNeedNonage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGNeedNonage)
  // optional int32 sts = 1;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGNeedNonage)
}

::google::protobuf::uint8* CGNeedNonage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGNeedNonage)
  // optional int32 sts = 1;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGNeedNonage)
  return target;
}

int CGNeedNonage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sts = 1;
    if (has_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNeedNonage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNeedNonage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNeedNonage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNeedNonage::MergeFrom(const CGNeedNonage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNeedNonage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNeedNonage::CopyFrom(const CGNeedNonage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNeedNonage::IsInitialized() const {

  return true;
}

void CGNeedNonage::Swap(CGNeedNonage* other) {
  if (other != this) {
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNeedNonage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNeedNonage_descriptor_;
  metadata.reflection = CGNeedNonage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOnLineTime::kSencondsFieldNumber;
#endif  // !_MSC_VER

GCOnLineTime::GCOnLineTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOnLineTime)
}

void GCOnLineTime::InitAsDefaultInstance() {
}

GCOnLineTime::GCOnLineTime(const GCOnLineTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOnLineTime)
}

void GCOnLineTime::SharedCtor() {
  _cached_size_ = 0;
  senconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOnLineTime::~GCOnLineTime() {
  // @@protoc_insertion_point(destructor:GCOnLineTime)
  SharedDtor();
}

void GCOnLineTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOnLineTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOnLineTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOnLineTime_descriptor_;
}

const GCOnLineTime& GCOnLineTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCOnLineTime* GCOnLineTime::default_instance_ = NULL;

GCOnLineTime* GCOnLineTime::New() const {
  return new GCOnLineTime;
}

void GCOnLineTime::Clear() {
  senconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOnLineTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOnLineTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 senconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senconds_)));
          set_has_senconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOnLineTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOnLineTime)
  return false;
#undef DO_
}

void GCOnLineTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOnLineTime)
  // optional int32 senconds = 1;
  if (has_senconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOnLineTime)
}

::google::protobuf::uint8* GCOnLineTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOnLineTime)
  // optional int32 senconds = 1;
  if (has_senconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOnLineTime)
  return target;
}

int GCOnLineTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 senconds = 1;
    if (has_senconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOnLineTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOnLineTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOnLineTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOnLineTime::MergeFrom(const GCOnLineTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senconds()) {
      set_senconds(from.senconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOnLineTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOnLineTime::CopyFrom(const GCOnLineTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOnLineTime::IsInitialized() const {

  return true;
}

void GCOnLineTime::Swap(GCOnLineTime* other) {
  if (other != this) {
    std::swap(senconds_, other->senconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOnLineTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOnLineTime_descriptor_;
  metadata.reflection = GCOnLineTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGAmbitLevelUp::CGAmbitLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGAmbitLevelUp)
}

void CGAmbitLevelUp::InitAsDefaultInstance() {
}

CGAmbitLevelUp::CGAmbitLevelUp(const CGAmbitLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGAmbitLevelUp)
}

void CGAmbitLevelUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGAmbitLevelUp::~CGAmbitLevelUp() {
  // @@protoc_insertion_point(destructor:CGAmbitLevelUp)
  SharedDtor();
}

void CGAmbitLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGAmbitLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGAmbitLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGAmbitLevelUp_descriptor_;
}

const CGAmbitLevelUp& CGAmbitLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGAmbitLevelUp* CGAmbitLevelUp::default_instance_ = NULL;

CGAmbitLevelUp* CGAmbitLevelUp::New() const {
  return new CGAmbitLevelUp;
}

void CGAmbitLevelUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGAmbitLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGAmbitLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGAmbitLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGAmbitLevelUp)
  return false;
#undef DO_
}

void CGAmbitLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGAmbitLevelUp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGAmbitLevelUp)
}

::google::protobuf::uint8* CGAmbitLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGAmbitLevelUp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGAmbitLevelUp)
  return target;
}

int CGAmbitLevelUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGAmbitLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGAmbitLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGAmbitLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGAmbitLevelUp::MergeFrom(const CGAmbitLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGAmbitLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGAmbitLevelUp::CopyFrom(const CGAmbitLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGAmbitLevelUp::IsInitialized() const {

  return true;
}

void CGAmbitLevelUp::Swap(CGAmbitLevelUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGAmbitLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGAmbitLevelUp_descriptor_;
  metadata.reflection = CGAmbitLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAmbitLevelUp::kAmbitLevelFieldNumber;
const int GCAmbitLevelUp::kAmbitStatusFieldNumber;
#endif  // !_MSC_VER

GCAmbitLevelUp::GCAmbitLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAmbitLevelUp)
}

void GCAmbitLevelUp::InitAsDefaultInstance() {
}

GCAmbitLevelUp::GCAmbitLevelUp(const GCAmbitLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAmbitLevelUp)
}

void GCAmbitLevelUp::SharedCtor() {
  _cached_size_ = 0;
  ambitlevel_ = 0;
  ambitstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAmbitLevelUp::~GCAmbitLevelUp() {
  // @@protoc_insertion_point(destructor:GCAmbitLevelUp)
  SharedDtor();
}

void GCAmbitLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAmbitLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAmbitLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAmbitLevelUp_descriptor_;
}

const GCAmbitLevelUp& GCAmbitLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCAmbitLevelUp* GCAmbitLevelUp::default_instance_ = NULL;

GCAmbitLevelUp* GCAmbitLevelUp::New() const {
  return new GCAmbitLevelUp;
}

void GCAmbitLevelUp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCAmbitLevelUp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ambitlevel_, ambitstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAmbitLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAmbitLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ambitLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ambitlevel_)));
          set_has_ambitlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ambitStatus;
        break;
      }

      // optional int32 ambitStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_ambitStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ambitstatus_)));
          set_has_ambitstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAmbitLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAmbitLevelUp)
  return false;
#undef DO_
}

void GCAmbitLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAmbitLevelUp)
  // optional int32 ambitLevel = 1;
  if (has_ambitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ambitlevel(), output);
  }

  // optional int32 ambitStatus = 2;
  if (has_ambitstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ambitstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAmbitLevelUp)
}

::google::protobuf::uint8* GCAmbitLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAmbitLevelUp)
  // optional int32 ambitLevel = 1;
  if (has_ambitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ambitlevel(), target);
  }

  // optional int32 ambitStatus = 2;
  if (has_ambitstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ambitstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAmbitLevelUp)
  return target;
}

int GCAmbitLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ambitLevel = 1;
    if (has_ambitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ambitlevel());
    }

    // optional int32 ambitStatus = 2;
    if (has_ambitstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ambitstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAmbitLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAmbitLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAmbitLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAmbitLevelUp::MergeFrom(const GCAmbitLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ambitlevel()) {
      set_ambitlevel(from.ambitlevel());
    }
    if (from.has_ambitstatus()) {
      set_ambitstatus(from.ambitstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAmbitLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAmbitLevelUp::CopyFrom(const GCAmbitLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAmbitLevelUp::IsInitialized() const {

  return true;
}

void GCAmbitLevelUp::Swap(GCAmbitLevelUp* other) {
  if (other != this) {
    std::swap(ambitlevel_, other->ambitlevel_);
    std::swap(ambitstatus_, other->ambitstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAmbitLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAmbitLevelUp_descriptor_;
  metadata.reflection = GCAmbitLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPrivatePlayerAttr::kCharAttrFieldNumber;
#endif  // !_MSC_VER

GCPrivatePlayerAttr::GCPrivatePlayerAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPrivatePlayerAttr)
}

void GCPrivatePlayerAttr::InitAsDefaultInstance() {
}

GCPrivatePlayerAttr::GCPrivatePlayerAttr(const GCPrivatePlayerAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPrivatePlayerAttr)
}

void GCPrivatePlayerAttr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPrivatePlayerAttr::~GCPrivatePlayerAttr() {
  // @@protoc_insertion_point(destructor:GCPrivatePlayerAttr)
  SharedDtor();
}

void GCPrivatePlayerAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPrivatePlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPrivatePlayerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPrivatePlayerAttr_descriptor_;
}

const GCPrivatePlayerAttr& GCPrivatePlayerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCPrivatePlayerAttr* GCPrivatePlayerAttr::default_instance_ = NULL;

GCPrivatePlayerAttr* GCPrivatePlayerAttr::New() const {
  return new GCPrivatePlayerAttr;
}

void GCPrivatePlayerAttr::Clear() {
  charattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPrivatePlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPrivatePlayerAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharacterAttr charAttr = 1;
      case 1: {
        if (tag == 10) {
         parse_charAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charattr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charAttr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPrivatePlayerAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPrivatePlayerAttr)
  return false;
#undef DO_
}

void GCPrivatePlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPrivatePlayerAttr)
  // repeated .CharacterAttr charAttr = 1;
  for (int i = 0; i < this->charattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPrivatePlayerAttr)
}

::google::protobuf::uint8* GCPrivatePlayerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPrivatePlayerAttr)
  // repeated .CharacterAttr charAttr = 1;
  for (int i = 0; i < this->charattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPrivatePlayerAttr)
  return target;
}

int GCPrivatePlayerAttr::ByteSize() const {
  int total_size = 0;

  // repeated .CharacterAttr charAttr = 1;
  total_size += 1 * this->charattr_size();
  for (int i = 0; i < this->charattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPrivatePlayerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPrivatePlayerAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPrivatePlayerAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPrivatePlayerAttr::MergeFrom(const GCPrivatePlayerAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  charattr_.MergeFrom(from.charattr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPrivatePlayerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPrivatePlayerAttr::CopyFrom(const GCPrivatePlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPrivatePlayerAttr::IsInitialized() const {

  return true;
}

void GCPrivatePlayerAttr::Swap(GCPrivatePlayerAttr* other) {
  if (other != this) {
    charattr_.Swap(&other->charattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPrivatePlayerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPrivatePlayerAttr_descriptor_;
  metadata.reflection = GCPrivatePlayerAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGUnLock::CGUnLock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUnLock)
}

void CGUnLock::InitAsDefaultInstance() {
}

CGUnLock::CGUnLock(const CGUnLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUnLock)
}

void CGUnLock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUnLock::~CGUnLock() {
  // @@protoc_insertion_point(destructor:CGUnLock)
  SharedDtor();
}

void CGUnLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUnLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUnLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUnLock_descriptor_;
}

const CGUnLock& CGUnLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGUnLock* CGUnLock::default_instance_ = NULL;

CGUnLock* CGUnLock::New() const {
  return new CGUnLock;
}

void CGUnLock::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUnLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUnLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGUnLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUnLock)
  return false;
#undef DO_
}

void CGUnLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUnLock)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUnLock)
}

::google::protobuf::uint8* CGUnLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUnLock)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUnLock)
  return target;
}

int CGUnLock::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUnLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUnLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUnLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUnLock::MergeFrom(const CGUnLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUnLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUnLock::CopyFrom(const CGUnLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUnLock::IsInitialized() const {

  return true;
}

void CGUnLock::Swap(CGUnLock* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUnLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUnLock_descriptor_;
  metadata.reflection = CGUnLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGLookPlayerInfo::kPidFieldNumber;
#endif  // !_MSC_VER

CGLookPlayerInfo::CGLookPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGLookPlayerInfo)
}

void CGLookPlayerInfo::InitAsDefaultInstance() {
}

CGLookPlayerInfo::CGLookPlayerInfo(const CGLookPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGLookPlayerInfo)
}

void CGLookPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGLookPlayerInfo::~CGLookPlayerInfo() {
  // @@protoc_insertion_point(destructor:CGLookPlayerInfo)
  SharedDtor();
}

void CGLookPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGLookPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGLookPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGLookPlayerInfo_descriptor_;
}

const CGLookPlayerInfo& CGLookPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

CGLookPlayerInfo* CGLookPlayerInfo::default_instance_ = NULL;

CGLookPlayerInfo* CGLookPlayerInfo::New() const {
  return new CGLookPlayerInfo;
}

void CGLookPlayerInfo::Clear() {
  pid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGLookPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGLookPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGLookPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGLookPlayerInfo)
  return false;
#undef DO_
}

void CGLookPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGLookPlayerInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGLookPlayerInfo)
}

::google::protobuf::uint8* CGLookPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGLookPlayerInfo)
  // optional int64 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGLookPlayerInfo)
  return target;
}

int CGLookPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGLookPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGLookPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGLookPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGLookPlayerInfo::MergeFrom(const CGLookPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGLookPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGLookPlayerInfo::CopyFrom(const CGLookPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGLookPlayerInfo::IsInitialized() const {

  return true;
}

void CGLookPlayerInfo::Swap(CGLookPlayerInfo* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGLookPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGLookPlayerInfo_descriptor_;
  metadata.reflection = CGLookPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCLookPlayerInfo::kPlayerInfoFieldNumber;
const int GCLookPlayerInfo::kEquipSlotsFieldNumber;
const int GCLookPlayerInfo::kSbInfoFieldNumber;
const int GCLookPlayerInfo::kTalisSlotsFieldNumber;
#endif  // !_MSC_VER

GCLookPlayerInfo::GCLookPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCLookPlayerInfo)
}

void GCLookPlayerInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCLookPlayerInfo::GCLookPlayerInfo(const GCLookPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCLookPlayerInfo)
}

void GCLookPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCLookPlayerInfo::~GCLookPlayerInfo() {
  // @@protoc_insertion_point(destructor:GCLookPlayerInfo)
  SharedDtor();
}

void GCLookPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void GCLookPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCLookPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCLookPlayerInfo_descriptor_;
}

const GCLookPlayerInfo& GCLookPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerMessage_2eproto();
  return *default_instance_;
}

GCLookPlayerInfo* GCLookPlayerInfo::default_instance_ = NULL;

GCLookPlayerInfo* GCLookPlayerInfo::New() const {
  return new GCLookPlayerInfo;
}

void GCLookPlayerInfo::Clear() {
  if (has_playerinfo()) {
    if (playerinfo_ != NULL) playerinfo_->::CharacterInfo::Clear();
  }
  equipslots_.Clear();
  sbinfo_.Clear();
  talisslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCLookPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCLookPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo playerInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipSlots;
        break;
      }

      // repeated .EquipSlots equipSlots = 2;
      case 2: {
        if (tag == 18) {
         parse_equipSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipSlots;
        if (input->ExpectTag(26)) goto parse_sbInfo;
        break;
      }

      // repeated .SpiritBeastInfo sbInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_sbInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sbinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sbInfo;
        if (input->ExpectTag(34)) goto parse_talisSlots;
        break;
      }

      // repeated .TalismanSlotsLook talisSlots = 4;
      case 4: {
        if (tag == 34) {
         parse_talisSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talisslots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_talisSlots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCLookPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCLookPlayerInfo)
  return false;
#undef DO_
}

void GCLookPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCLookPlayerInfo)
  // optional .CharacterInfo playerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  // repeated .EquipSlots equipSlots = 2;
  for (int i = 0; i < this->equipslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equipslots(i), output);
  }

  // repeated .SpiritBeastInfo sbInfo = 3;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sbinfo(i), output);
  }

  // repeated .TalismanSlotsLook talisSlots = 4;
  for (int i = 0; i < this->talisslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->talisslots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCLookPlayerInfo)
}

::google::protobuf::uint8* GCLookPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCLookPlayerInfo)
  // optional .CharacterInfo playerInfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  // repeated .EquipSlots equipSlots = 2;
  for (int i = 0; i < this->equipslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equipslots(i), target);
  }

  // repeated .SpiritBeastInfo sbInfo = 3;
  for (int i = 0; i < this->sbinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sbinfo(i), target);
  }

  // repeated .TalismanSlotsLook talisSlots = 4;
  for (int i = 0; i < this->talisslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->talisslots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCLookPlayerInfo)
  return target;
}

int GCLookPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo playerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  // repeated .EquipSlots equipSlots = 2;
  total_size += 1 * this->equipslots_size();
  for (int i = 0; i < this->equipslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipslots(i));
  }

  // repeated .SpiritBeastInfo sbInfo = 3;
  total_size += 1 * this->sbinfo_size();
  for (int i = 0; i < this->sbinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sbinfo(i));
  }

  // repeated .TalismanSlotsLook talisSlots = 4;
  total_size += 1 * this->talisslots_size();
  for (int i = 0; i < this->talisslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talisslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCLookPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCLookPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCLookPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCLookPlayerInfo::MergeFrom(const GCLookPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipslots_.MergeFrom(from.equipslots_);
  sbinfo_.MergeFrom(from.sbinfo_);
  talisslots_.MergeFrom(from.talisslots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::CharacterInfo::MergeFrom(from.playerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCLookPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCLookPlayerInfo::CopyFrom(const GCLookPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCLookPlayerInfo::IsInitialized() const {

  return true;
}

void GCLookPlayerInfo::Swap(GCLookPlayerInfo* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    equipslots_.Swap(&other->equipslots_);
    sbinfo_.Swap(&other->sbinfo_);
    talisslots_.Swap(&other->talisslots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCLookPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCLookPlayerInfo_descriptor_;
  metadata.reflection = GCLookPlayerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
