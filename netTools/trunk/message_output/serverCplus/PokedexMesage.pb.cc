// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PokedexMesage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PokedexMesage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PokedexSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokedexSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPokedex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPokedex_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetPokedexList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetPokedexList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PokedexMesage_2eproto() {
  protobuf_AddDesc_PokedexMesage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PokedexMesage.proto");
  GOOGLE_CHECK(file != NULL);
  PokedexSimpleInfo_descriptor_ = file->message_type(0);
  static const int PokedexSimpleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexSimpleInfo, pokedexsimpleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexSimpleInfo, pokedexsimpleinfolevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexSimpleInfo, pokedexsimpleinfovalue_),
  };
  PokedexSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PokedexSimpleInfo_descriptor_,
      PokedexSimpleInfo::default_instance_,
      PokedexSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokedexSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PokedexSimpleInfo));
  CGGetPokedex_descriptor_ = file->message_type(1);
  static const int CGGetPokedex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPokedex, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPokedex, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPokedex, id_),
  };
  CGGetPokedex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPokedex_descriptor_,
      CGGetPokedex::default_instance_,
      CGGetPokedex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPokedex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPokedex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPokedex));
  GCGetPokedexList_descriptor_ = file->message_type(2);
  static const int GCGetPokedexList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, restnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, restnumkim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, pokedexs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, newid_),
  };
  GCGetPokedexList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetPokedexList_descriptor_,
      GCGetPokedexList::default_instance_,
      GCGetPokedexList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetPokedexList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetPokedexList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PokedexMesage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokedexSimpleInfo_descriptor_, &PokedexSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPokedex_descriptor_, &CGGetPokedex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetPokedexList_descriptor_, &GCGetPokedexList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PokedexMesage_2eproto() {
  delete PokedexSimpleInfo::default_instance_;
  delete PokedexSimpleInfo_reflection_;
  delete CGGetPokedex::default_instance_;
  delete CGGetPokedex_reflection_;
  delete GCGetPokedexList::default_instance_;
  delete GCGetPokedexList_reflection_;
}

void protobuf_AddDesc_PokedexMesage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023PokedexMesage.proto\032\022InnerMessage.prot"
    "o\"p\n\021PokedexSimpleInfo\022\033\n\023pokedexSimpleI"
    "nfoId\030\001 \001(\005\022\036\n\026pokedexSimpleInfoLevel\030\002 "
    "\001(\005\022\036\n\026pokedexSimpleInfoValue\030\003 \001(\005\":\n\014C"
    "GGetPokedex\022\020\n\010playerId\030\001 \001(\003\022\014\n\004type\030\002 "
    "\001(\005\022\n\n\002id\030\003 \001(\005\"\234\001\n\020GCGetPokedexList\022\020\n\010"
    "lastTime\030\001 \001(\003\022\017\n\007restNum\030\002 \001(\005\022\022\n\nrestN"
    "umKim\030\003 \001(\005\022\014\n\004type\030\004 \001(\005\022$\n\010pokedexs\030\005 "
    "\003(\0132\022.PokedexSimpleInfo\022\016\n\006result\030\006 \001(\005\022"
    "\r\n\005newId\030\007 \001(\005B\031\n\027com.mile.common.messag"
    "e", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PokedexMesage.proto", &protobuf_RegisterTypes);
  PokedexSimpleInfo::default_instance_ = new PokedexSimpleInfo();
  CGGetPokedex::default_instance_ = new CGGetPokedex();
  GCGetPokedexList::default_instance_ = new GCGetPokedexList();
  PokedexSimpleInfo::default_instance_->InitAsDefaultInstance();
  CGGetPokedex::default_instance_->InitAsDefaultInstance();
  GCGetPokedexList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PokedexMesage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PokedexMesage_2eproto {
  StaticDescriptorInitializer_PokedexMesage_2eproto() {
    protobuf_AddDesc_PokedexMesage_2eproto();
  }
} static_descriptor_initializer_PokedexMesage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PokedexSimpleInfo::kPokedexSimpleInfoIdFieldNumber;
const int PokedexSimpleInfo::kPokedexSimpleInfoLevelFieldNumber;
const int PokedexSimpleInfo::kPokedexSimpleInfoValueFieldNumber;
#endif  // !_MSC_VER

PokedexSimpleInfo::PokedexSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PokedexSimpleInfo)
}

void PokedexSimpleInfo::InitAsDefaultInstance() {
}

PokedexSimpleInfo::PokedexSimpleInfo(const PokedexSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PokedexSimpleInfo)
}

void PokedexSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  pokedexsimpleinfoid_ = 0;
  pokedexsimpleinfolevel_ = 0;
  pokedexsimpleinfovalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokedexSimpleInfo::~PokedexSimpleInfo() {
  // @@protoc_insertion_point(destructor:PokedexSimpleInfo)
  SharedDtor();
}

void PokedexSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PokedexSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokedexSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokedexSimpleInfo_descriptor_;
}

const PokedexSimpleInfo& PokedexSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PokedexMesage_2eproto();
  return *default_instance_;
}

PokedexSimpleInfo* PokedexSimpleInfo::default_instance_ = NULL;

PokedexSimpleInfo* PokedexSimpleInfo::New() const {
  return new PokedexSimpleInfo;
}

void PokedexSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PokedexSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pokedexsimpleinfoid_, pokedexsimpleinfovalue_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokedexSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PokedexSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pokedexSimpleInfoId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokedexsimpleinfoid_)));
          set_has_pokedexsimpleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pokedexSimpleInfoLevel;
        break;
      }

      // optional int32 pokedexSimpleInfoLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_pokedexSimpleInfoLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokedexsimpleinfolevel_)));
          set_has_pokedexsimpleinfolevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pokedexSimpleInfoValue;
        break;
      }

      // optional int32 pokedexSimpleInfoValue = 3;
      case 3: {
        if (tag == 24) {
         parse_pokedexSimpleInfoValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pokedexsimpleinfovalue_)));
          set_has_pokedexsimpleinfovalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PokedexSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PokedexSimpleInfo)
  return false;
#undef DO_
}

void PokedexSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PokedexSimpleInfo)
  // optional int32 pokedexSimpleInfoId = 1;
  if (has_pokedexsimpleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pokedexsimpleinfoid(), output);
  }

  // optional int32 pokedexSimpleInfoLevel = 2;
  if (has_pokedexsimpleinfolevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pokedexsimpleinfolevel(), output);
  }

  // optional int32 pokedexSimpleInfoValue = 3;
  if (has_pokedexsimpleinfovalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pokedexsimpleinfovalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PokedexSimpleInfo)
}

::google::protobuf::uint8* PokedexSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PokedexSimpleInfo)
  // optional int32 pokedexSimpleInfoId = 1;
  if (has_pokedexsimpleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pokedexsimpleinfoid(), target);
  }

  // optional int32 pokedexSimpleInfoLevel = 2;
  if (has_pokedexsimpleinfolevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pokedexsimpleinfolevel(), target);
  }

  // optional int32 pokedexSimpleInfoValue = 3;
  if (has_pokedexsimpleinfovalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pokedexsimpleinfovalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PokedexSimpleInfo)
  return target;
}

int PokedexSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pokedexSimpleInfoId = 1;
    if (has_pokedexsimpleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokedexsimpleinfoid());
    }

    // optional int32 pokedexSimpleInfoLevel = 2;
    if (has_pokedexsimpleinfolevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokedexsimpleinfolevel());
    }

    // optional int32 pokedexSimpleInfoValue = 3;
    if (has_pokedexsimpleinfovalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pokedexsimpleinfovalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokedexSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokedexSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PokedexSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokedexSimpleInfo::MergeFrom(const PokedexSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pokedexsimpleinfoid()) {
      set_pokedexsimpleinfoid(from.pokedexsimpleinfoid());
    }
    if (from.has_pokedexsimpleinfolevel()) {
      set_pokedexsimpleinfolevel(from.pokedexsimpleinfolevel());
    }
    if (from.has_pokedexsimpleinfovalue()) {
      set_pokedexsimpleinfovalue(from.pokedexsimpleinfovalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokedexSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokedexSimpleInfo::CopyFrom(const PokedexSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokedexSimpleInfo::IsInitialized() const {

  return true;
}

void PokedexSimpleInfo::Swap(PokedexSimpleInfo* other) {
  if (other != this) {
    std::swap(pokedexsimpleinfoid_, other->pokedexsimpleinfoid_);
    std::swap(pokedexsimpleinfolevel_, other->pokedexsimpleinfolevel_);
    std::swap(pokedexsimpleinfovalue_, other->pokedexsimpleinfovalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PokedexSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokedexSimpleInfo_descriptor_;
  metadata.reflection = PokedexSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetPokedex::kPlayerIdFieldNumber;
const int CGGetPokedex::kTypeFieldNumber;
const int CGGetPokedex::kIdFieldNumber;
#endif  // !_MSC_VER

CGGetPokedex::CGGetPokedex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPokedex)
}

void CGGetPokedex::InitAsDefaultInstance() {
}

CGGetPokedex::CGGetPokedex(const CGGetPokedex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPokedex)
}

void CGGetPokedex::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPokedex::~CGGetPokedex() {
  // @@protoc_insertion_point(destructor:CGGetPokedex)
  SharedDtor();
}

void CGGetPokedex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPokedex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPokedex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPokedex_descriptor_;
}

const CGGetPokedex& CGGetPokedex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PokedexMesage_2eproto();
  return *default_instance_;
}

CGGetPokedex* CGGetPokedex::default_instance_ = NULL;

CGGetPokedex* CGGetPokedex::New() const {
  return new CGGetPokedex;
}

void CGGetPokedex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetPokedex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPokedex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPokedex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPokedex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPokedex)
  return false;
#undef DO_
}

void CGGetPokedex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPokedex)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPokedex)
}

::google::protobuf::uint8* CGGetPokedex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPokedex)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPokedex)
  return target;
}

int CGGetPokedex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPokedex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPokedex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPokedex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPokedex::MergeFrom(const CGGetPokedex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPokedex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPokedex::CopyFrom(const CGGetPokedex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPokedex::IsInitialized() const {

  return true;
}

void CGGetPokedex::Swap(CGGetPokedex* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPokedex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPokedex_descriptor_;
  metadata.reflection = CGGetPokedex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetPokedexList::kLastTimeFieldNumber;
const int GCGetPokedexList::kRestNumFieldNumber;
const int GCGetPokedexList::kRestNumKimFieldNumber;
const int GCGetPokedexList::kTypeFieldNumber;
const int GCGetPokedexList::kPokedexsFieldNumber;
const int GCGetPokedexList::kResultFieldNumber;
const int GCGetPokedexList::kNewIdFieldNumber;
#endif  // !_MSC_VER

GCGetPokedexList::GCGetPokedexList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetPokedexList)
}

void GCGetPokedexList::InitAsDefaultInstance() {
}

GCGetPokedexList::GCGetPokedexList(const GCGetPokedexList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetPokedexList)
}

void GCGetPokedexList::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  restnum_ = 0;
  restnumkim_ = 0;
  type_ = 0;
  result_ = 0;
  newid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetPokedexList::~GCGetPokedexList() {
  // @@protoc_insertion_point(destructor:GCGetPokedexList)
  SharedDtor();
}

void GCGetPokedexList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetPokedexList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetPokedexList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetPokedexList_descriptor_;
}

const GCGetPokedexList& GCGetPokedexList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PokedexMesage_2eproto();
  return *default_instance_;
}

GCGetPokedexList* GCGetPokedexList::default_instance_ = NULL;

GCGetPokedexList* GCGetPokedexList::New() const {
  return new GCGetPokedexList;
}

void GCGetPokedexList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCGetPokedexList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(lasttime_, restnumkim_);
    ZR_(type_, newid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pokedexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetPokedexList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetPokedexList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lastTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_restNum;
        break;
      }

      // optional int32 restNum = 2;
      case 2: {
        if (tag == 16) {
         parse_restNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restnum_)));
          set_has_restnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_restNumKim;
        break;
      }

      // optional int32 restNumKim = 3;
      case 3: {
        if (tag == 24) {
         parse_restNumKim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restnumkim_)));
          set_has_restnumkim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pokedexs;
        break;
      }

      // repeated .PokedexSimpleInfo pokedexs = 5;
      case 5: {
        if (tag == 42) {
         parse_pokedexs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokedexs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pokedexs;
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional int32 result = 6;
      case 6: {
        if (tag == 48) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_newId;
        break;
      }

      // optional int32 newId = 7;
      case 7: {
        if (tag == 56) {
         parse_newId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newid_)));
          set_has_newid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetPokedexList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetPokedexList)
  return false;
#undef DO_
}

void GCGetPokedexList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetPokedexList)
  // optional int64 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lasttime(), output);
  }

  // optional int32 restNum = 2;
  if (has_restnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->restnum(), output);
  }

  // optional int32 restNumKim = 3;
  if (has_restnumkim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->restnumkim(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // repeated .PokedexSimpleInfo pokedexs = 5;
  for (int i = 0; i < this->pokedexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pokedexs(i), output);
  }

  // optional int32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->result(), output);
  }

  // optional int32 newId = 7;
  if (has_newid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->newid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetPokedexList)
}

::google::protobuf::uint8* GCGetPokedexList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetPokedexList)
  // optional int64 lastTime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lasttime(), target);
  }

  // optional int32 restNum = 2;
  if (has_restnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->restnum(), target);
  }

  // optional int32 restNumKim = 3;
  if (has_restnumkim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->restnumkim(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // repeated .PokedexSimpleInfo pokedexs = 5;
  for (int i = 0; i < this->pokedexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pokedexs(i), target);
  }

  // optional int32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->result(), target);
  }

  // optional int32 newId = 7;
  if (has_newid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->newid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetPokedexList)
  return target;
}

int GCGetPokedexList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 restNum = 2;
    if (has_restnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restnum());
    }

    // optional int32 restNumKim = 3;
    if (has_restnumkim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restnumkim());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 newId = 7;
    if (has_newid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newid());
    }

  }
  // repeated .PokedexSimpleInfo pokedexs = 5;
  total_size += 1 * this->pokedexs_size();
  for (int i = 0; i < this->pokedexs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokedexs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetPokedexList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetPokedexList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetPokedexList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetPokedexList::MergeFrom(const GCGetPokedexList& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokedexs_.MergeFrom(from.pokedexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_restnum()) {
      set_restnum(from.restnum());
    }
    if (from.has_restnumkim()) {
      set_restnumkim(from.restnumkim());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_newid()) {
      set_newid(from.newid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetPokedexList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetPokedexList::CopyFrom(const GCGetPokedexList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetPokedexList::IsInitialized() const {

  return true;
}

void GCGetPokedexList::Swap(GCGetPokedexList* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(restnum_, other->restnum_);
    std::swap(restnumkim_, other->restnumkim_);
    std::swap(type_, other->type_);
    pokedexs_.Swap(&other->pokedexs_);
    std::swap(result_, other->result_);
    std::swap(newid_, other->newid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetPokedexList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetPokedexList_descriptor_;
  metadata.reflection = GCGetPokedexList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
