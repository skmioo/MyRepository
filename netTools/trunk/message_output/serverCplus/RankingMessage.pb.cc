// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankingMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RankingMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetRankByType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetRankByType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRankWorship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRankWorship_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRankWrshipBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRankWrshipBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetPetOrHorseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetPetOrHorseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendPetOrHorseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendPetOrHorseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushWorship_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushWorship_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushOpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushOpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCOpenRankOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCOpenRankOver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RankingMessage_2eproto() {
  protobuf_AddDesc_RankingMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RankingMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RankInfo_descriptor_ = file->message_type(0);
  static const int RankInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, moneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, petbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, horsebattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, arenarank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, toptower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, gangbattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, worship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, winnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, gangid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, isworship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, killplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, killvalue_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  CGGetRankByType_descriptor_ = file->message_type(1);
  static const int CGGetRankByType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRankByType, type_),
  };
  CGGetRankByType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetRankByType_descriptor_,
      CGGetRankByType::default_instance_,
      CGGetRankByType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRankByType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetRankByType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetRankByType));
  GCPushRankInfo_descriptor_ = file->message_type(2);
  static const int GCPushRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, firstinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, petinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, horseinfo_),
  };
  GCPushRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushRankInfo_descriptor_,
      GCPushRankInfo::default_instance_,
      GCPushRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushRankInfo));
  CGRankWorship_descriptor_ = file->message_type(3);
  static const int CGRankWorship_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRankWorship, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRankWorship, type_),
  };
  CGRankWorship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRankWorship_descriptor_,
      CGRankWorship::default_instance_,
      CGRankWorship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRankWorship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRankWorship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRankWorship));
  GCRankWrshipBack_descriptor_ = file->message_type(4);
  static const int GCRankWrshipBack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, worship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, result_),
  };
  GCRankWrshipBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRankWrshipBack_descriptor_,
      GCRankWrshipBack::default_instance_,
      GCRankWrshipBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRankWrshipBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRankWrshipBack));
  CGGetPetOrHorseInfo_descriptor_ = file->message_type(5);
  static const int CGGetPetOrHorseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetOrHorseInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetOrHorseInfo, petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetOrHorseInfo, horseid_),
  };
  CGGetPetOrHorseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetPetOrHorseInfo_descriptor_,
      CGGetPetOrHorseInfo::default_instance_,
      CGGetPetOrHorseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetOrHorseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetPetOrHorseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetPetOrHorseInfo));
  GCSendPetOrHorseInfo_descriptor_ = file->message_type(6);
  static const int GCSendPetOrHorseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPetOrHorseInfo, petinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPetOrHorseInfo, horseinfo_),
  };
  GCSendPetOrHorseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendPetOrHorseInfo_descriptor_,
      GCSendPetOrHorseInfo::default_instance_,
      GCSendPetOrHorseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPetOrHorseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendPetOrHorseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendPetOrHorseInfo));
  GCPushWorship_descriptor_ = file->message_type(7);
  static const int GCPushWorship_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWorship, num_),
  };
  GCPushWorship_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushWorship_descriptor_,
      GCPushWorship::default_instance_,
      GCPushWorship_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWorship, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushWorship, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushWorship));
  GCRefreshRank_descriptor_ = file->message_type(8);
  static const int GCRefreshRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRank, type_),
  };
  GCRefreshRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshRank_descriptor_,
      GCRefreshRank::default_instance_,
      GCRefreshRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshRank));
  FightInfo_descriptor_ = file->message_type(9);
  static const int FightInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, rotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, rewards_),
  };
  FightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightInfo_descriptor_,
      FightInfo::default_instance_,
      FightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightInfo));
  LevelInfo_descriptor_ = file->message_type(10);
  static const int LevelInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, rewards_),
  };
  LevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelInfo_descriptor_,
      LevelInfo::default_instance_,
      LevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelInfo));
  GCPushOpenInfo_descriptor_ = file->message_type(11);
  static const int GCPushOpenInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, firstinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, levelinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, levelstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, levelendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, fightstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, fightendtime_),
  };
  GCPushOpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushOpenInfo_descriptor_,
      GCPushOpenInfo::default_instance_,
      GCPushOpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushOpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushOpenInfo));
  GCOpenRankOver_descriptor_ = file->message_type(12);
  static const int GCOpenRankOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenRankOver, type_),
  };
  GCOpenRankOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCOpenRankOver_descriptor_,
      GCOpenRankOver::default_instance_,
      GCOpenRankOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenRankOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCOpenRankOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCOpenRankOver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RankingMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetRankByType_descriptor_, &CGGetRankByType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushRankInfo_descriptor_, &GCPushRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRankWorship_descriptor_, &CGRankWorship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRankWrshipBack_descriptor_, &GCRankWrshipBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetPetOrHorseInfo_descriptor_, &CGGetPetOrHorseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendPetOrHorseInfo_descriptor_, &GCSendPetOrHorseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushWorship_descriptor_, &GCPushWorship::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshRank_descriptor_, &GCRefreshRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightInfo_descriptor_, &FightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelInfo_descriptor_, &LevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushOpenInfo_descriptor_, &GCPushOpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCOpenRankOver_descriptor_, &GCOpenRankOver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RankingMessage_2eproto() {
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete CGGetRankByType::default_instance_;
  delete CGGetRankByType_reflection_;
  delete GCPushRankInfo::default_instance_;
  delete GCPushRankInfo_reflection_;
  delete CGRankWorship::default_instance_;
  delete CGRankWorship_reflection_;
  delete GCRankWrshipBack::default_instance_;
  delete GCRankWrshipBack_reflection_;
  delete CGGetPetOrHorseInfo::default_instance_;
  delete CGGetPetOrHorseInfo_reflection_;
  delete GCSendPetOrHorseInfo::default_instance_;
  delete GCSendPetOrHorseInfo_reflection_;
  delete GCPushWorship::default_instance_;
  delete GCPushWorship_reflection_;
  delete GCRefreshRank::default_instance_;
  delete GCRefreshRank_reflection_;
  delete FightInfo::default_instance_;
  delete FightInfo_reflection_;
  delete LevelInfo::default_instance_;
  delete LevelInfo_reflection_;
  delete GCPushOpenInfo::default_instance_;
  delete GCPushOpenInfo_reflection_;
  delete GCOpenRankOver::default_instance_;
  delete GCOpenRankOver_reflection_;
}

void protobuf_AddDesc_RankingMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024RankingMessage.proto\032\022InnerMessage.pro"
    "to\"\233\003\n\010RankInfo\022\020\n\010playerId\030\001 \001(\003\022\022\n\npla"
    "yerName\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\014\n\004rank\030\004 \001("
    "\005\022\016\n\006battle\030\005 \001(\005\022\020\n\010moneyNum\030\006 \001(\003\022\021\n\tp"
    "etBattle\030\007 \001(\005\022\023\n\013horseBattle\030\010 \001(\005\022\021\n\ta"
    "renaRank\030\t \001(\005\022\020\n\010topTower\030\n \001(\005\022\016\n\006outP"
    "ut\030\013 \001(\t\022\022\n\nonlineTime\030\014 \001(\003\022\022\n\ngangBatt"
    "le\030\r \001(\005\022\r\n\005petID\030\016 \001(\003\022\017\n\007horseID\030\017 \001(\003"
    "\022\017\n\007worship\030\020 \001(\003\022\r\n\005level\030\021 \001(\005\022\016\n\006winN"
    "um\030\022 \001(\005\022\016\n\006gangID\030\023 \001(\003\022\021\n\tisWorship\030\024 "
    "\001(\005\022\013\n\003vip\030\025 \001(\005\022\023\n\013killPlayers\030\026 \001(\005\022\021\n"
    "\tkillValue\030\027 \001(\005\"\037\n\017CGGetRankByType\022\014\n\004t"
    "ype\030\001 \001(\005\"\245\001\n\016GCPushRankInfo\022\033\n\010rankInfo"
    "\030\001 \003(\0132\t.RankInfo\022\014\n\004type\030\002 \001(\005\022\013\n\003num\030\003"
    " \001(\005\022!\n\tfirstInfo\030\004 \001(\0132\016.CharacterInfo\022"
    "\031\n\007petInfo\030\005 \001(\0132\010.PetInfo\022\035\n\thorseInfo\030"
    "\006 \001(\0132\n.HorseInfo\"/\n\rCGRankWorship\022\020\n\010pl"
    "ayerID\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\"`\n\020GCRankWrsh"
    "ipBack\022\020\n\010playerID\030\001 \001(\003\022\017\n\007worship\030\002 \001("
    "\003\022\014\n\004type\030\003 \001(\005\022\013\n\003num\030\004 \001(\005\022\016\n\006result\030\005"
    " \001(\005\"G\n\023CGGetPetOrHorseInfo\022\020\n\010playerID\030"
    "\001 \001(\003\022\r\n\005petID\030\002 \001(\003\022\017\n\007horseID\030\003 \001(\003\"P\n"
    "\024GCSendPetOrHorseInfo\022\031\n\007petInfo\030\001 \001(\0132\010"
    ".PetInfo\022\035\n\thorseInfo\030\002 \001(\0132\n.HorseInfo\""
    "\034\n\rGCPushWorship\022\013\n\003num\030\001 \001(\005\"\035\n\rGCRefre"
    "shRank\022\014\n\004type\030\001 \001(\005\"\211\001\n\tFightInfo\022\n\n\002id"
    "\030\001 \001(\005\022\020\n\010fighting\030\002 \001(\t\022\r\n\005horse\030\003 \001(\t\022"
    "\r\n\005model\030\004 \001(\005\022\020\n\010position\030\005 \001(\t\022\r\n\005scal"
    "e\030\006 \001(\t\022\016\n\006rotate\030\007 \001(\t\022\017\n\007rewards\030\010 \001(\t"
    "\"j\n\tLevelInfo\022\n\n\002id\030\001 \001(\005\022\020\n\010fighting\030\002 "
    "\001(\t\022\r\n\005title\030\003 \001(\005\022\020\n\010position\030\004 \001(\t\022\r\n\005"
    "scale\030\005 \001(\t\022\017\n\007rewards\030\006 \001(\t\"\254\001\n\016GCPushO"
    "penInfo\022\036\n\nfirstInfos\030\001 \003(\0132\n.FightInfo\022"
    "\036\n\nlevelInfos\030\002 \003(\0132\n.LevelInfo\022\026\n\016level"
    "StartTime\030\003 \001(\003\022\024\n\014levelEndTime\030\004 \001(\003\022\026\n"
    "\016fightStartTime\030\005 \001(\003\022\024\n\014fightEndTime\030\006 "
    "\001(\003\"\036\n\016GCOpenRankOver\022\014\n\004type\030\001 \001(\005B\031\n\027c"
    "om.mile.common.message", 1502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RankingMessage.proto", &protobuf_RegisterTypes);
  RankInfo::default_instance_ = new RankInfo();
  CGGetRankByType::default_instance_ = new CGGetRankByType();
  GCPushRankInfo::default_instance_ = new GCPushRankInfo();
  CGRankWorship::default_instance_ = new CGRankWorship();
  GCRankWrshipBack::default_instance_ = new GCRankWrshipBack();
  CGGetPetOrHorseInfo::default_instance_ = new CGGetPetOrHorseInfo();
  GCSendPetOrHorseInfo::default_instance_ = new GCSendPetOrHorseInfo();
  GCPushWorship::default_instance_ = new GCPushWorship();
  GCRefreshRank::default_instance_ = new GCRefreshRank();
  FightInfo::default_instance_ = new FightInfo();
  LevelInfo::default_instance_ = new LevelInfo();
  GCPushOpenInfo::default_instance_ = new GCPushOpenInfo();
  GCOpenRankOver::default_instance_ = new GCOpenRankOver();
  RankInfo::default_instance_->InitAsDefaultInstance();
  CGGetRankByType::default_instance_->InitAsDefaultInstance();
  GCPushRankInfo::default_instance_->InitAsDefaultInstance();
  CGRankWorship::default_instance_->InitAsDefaultInstance();
  GCRankWrshipBack::default_instance_->InitAsDefaultInstance();
  CGGetPetOrHorseInfo::default_instance_->InitAsDefaultInstance();
  GCSendPetOrHorseInfo::default_instance_->InitAsDefaultInstance();
  GCPushWorship::default_instance_->InitAsDefaultInstance();
  GCRefreshRank::default_instance_->InitAsDefaultInstance();
  FightInfo::default_instance_->InitAsDefaultInstance();
  LevelInfo::default_instance_->InitAsDefaultInstance();
  GCPushOpenInfo::default_instance_->InitAsDefaultInstance();
  GCOpenRankOver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RankingMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RankingMessage_2eproto {
  StaticDescriptorInitializer_RankingMessage_2eproto() {
    protobuf_AddDesc_RankingMessage_2eproto();
  }
} static_descriptor_initializer_RankingMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kPlayerIdFieldNumber;
const int RankInfo::kPlayerNameFieldNumber;
const int RankInfo::kTypeFieldNumber;
const int RankInfo::kRankFieldNumber;
const int RankInfo::kBattleFieldNumber;
const int RankInfo::kMoneyNumFieldNumber;
const int RankInfo::kPetBattleFieldNumber;
const int RankInfo::kHorseBattleFieldNumber;
const int RankInfo::kArenaRankFieldNumber;
const int RankInfo::kTopTowerFieldNumber;
const int RankInfo::kOutPutFieldNumber;
const int RankInfo::kOnlineTimeFieldNumber;
const int RankInfo::kGangBattleFieldNumber;
const int RankInfo::kPetIDFieldNumber;
const int RankInfo::kHorseIDFieldNumber;
const int RankInfo::kWorshipFieldNumber;
const int RankInfo::kLevelFieldNumber;
const int RankInfo::kWinNumFieldNumber;
const int RankInfo::kGangIDFieldNumber;
const int RankInfo::kIsWorshipFieldNumber;
const int RankInfo::kVipFieldNumber;
const int RankInfo::kKillPlayersFieldNumber;
const int RankInfo::kKillValueFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankInfo)
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RankInfo)
}

void RankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  rank_ = 0;
  battle_ = 0;
  moneynum_ = GOOGLE_LONGLONG(0);
  petbattle_ = 0;
  horsebattle_ = 0;
  arenarank_ = 0;
  toptower_ = 0;
  output_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlinetime_ = GOOGLE_LONGLONG(0);
  gangbattle_ = 0;
  petid_ = GOOGLE_LONGLONG(0);
  horseid_ = GOOGLE_LONGLONG(0);
  worship_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  winnum_ = 0;
  gangid_ = GOOGLE_LONGLONG(0);
  isworship_ = 0;
  vip_ = 0;
  killplayers_ = 0;
  killvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:RankInfo)
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (output_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, horsebattle_);
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(toptower_, worship_);
    arenarank_ = 0;
    if (has_output()) {
      if (output_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        output_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(level_, killvalue_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_battle;
        break;
      }

      // optional int32 battle = 5;
      case 5: {
        if (tag == 40) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_moneyNum;
        break;
      }

      // optional int64 moneyNum = 6;
      case 6: {
        if (tag == 48) {
         parse_moneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &moneynum_)));
          set_has_moneynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_petBattle;
        break;
      }

      // optional int32 petBattle = 7;
      case 7: {
        if (tag == 56) {
         parse_petBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &petbattle_)));
          set_has_petbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_horseBattle;
        break;
      }

      // optional int32 horseBattle = 8;
      case 8: {
        if (tag == 64) {
         parse_horseBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsebattle_)));
          set_has_horsebattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_arenaRank;
        break;
      }

      // optional int32 arenaRank = 9;
      case 9: {
        if (tag == 72) {
         parse_arenaRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenarank_)));
          set_has_arenarank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_topTower;
        break;
      }

      // optional int32 topTower = 10;
      case 10: {
        if (tag == 80) {
         parse_topTower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toptower_)));
          set_has_toptower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_outPut;
        break;
      }

      // optional string outPut = 11;
      case 11: {
        if (tag == 90) {
         parse_outPut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output().data(), this->output().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "output");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_onlineTime;
        break;
      }

      // optional int64 onlineTime = 12;
      case 12: {
        if (tag == 96) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gangBattle;
        break;
      }

      // optional int32 gangBattle = 13;
      case 13: {
        if (tag == 104) {
         parse_gangBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangbattle_)));
          set_has_gangbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_petID;
        break;
      }

      // optional int64 petID = 14;
      case 14: {
        if (tag == 112) {
         parse_petID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_horseID;
        break;
      }

      // optional int64 horseID = 15;
      case 15: {
        if (tag == 120) {
         parse_horseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_worship;
        break;
      }

      // optional int64 worship = 16;
      case 16: {
        if (tag == 128) {
         parse_worship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worship_)));
          set_has_worship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_level;
        break;
      }

      // optional int32 level = 17;
      case 17: {
        if (tag == 136) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_winNum;
        break;
      }

      // optional int32 winNum = 18;
      case 18: {
        if (tag == 144) {
         parse_winNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_gangID;
        break;
      }

      // optional int64 gangID = 19;
      case 19: {
        if (tag == 152) {
         parse_gangID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gangid_)));
          set_has_gangid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_isWorship;
        break;
      }

      // optional int32 isWorship = 20;
      case 20: {
        if (tag == 160) {
         parse_isWorship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isworship_)));
          set_has_isworship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_vip;
        break;
      }

      // optional int32 vip = 21;
      case 21: {
        if (tag == 168) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_killPlayers;
        break;
      }

      // optional int32 killPlayers = 22;
      case 22: {
        if (tag == 176) {
         parse_killPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killplayers_)));
          set_has_killplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_killValue;
        break;
      }

      // optional int32 killValue = 23;
      case 23: {
        if (tag == 184) {
         parse_killValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankInfo)
  return false;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // optional int32 battle = 5;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battle(), output);
  }

  // optional int64 moneyNum = 6;
  if (has_moneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->moneynum(), output);
  }

  // optional int32 petBattle = 7;
  if (has_petbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->petbattle(), output);
  }

  // optional int32 horseBattle = 8;
  if (has_horsebattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->horsebattle(), output);
  }

  // optional int32 arenaRank = 9;
  if (has_arenarank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->arenarank(), output);
  }

  // optional int32 topTower = 10;
  if (has_toptower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->toptower(), output);
  }

  // optional string outPut = 11;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->output(), output);
  }

  // optional int64 onlineTime = 12;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->onlinetime(), output);
  }

  // optional int32 gangBattle = 13;
  if (has_gangbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gangbattle(), output);
  }

  // optional int64 petID = 14;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->petid(), output);
  }

  // optional int64 horseID = 15;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->horseid(), output);
  }

  // optional int64 worship = 16;
  if (has_worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->worship(), output);
  }

  // optional int32 level = 17;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->level(), output);
  }

  // optional int32 winNum = 18;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->winnum(), output);
  }

  // optional int64 gangID = 19;
  if (has_gangid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->gangid(), output);
  }

  // optional int32 isWorship = 20;
  if (has_isworship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->isworship(), output);
  }

  // optional int32 vip = 21;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->vip(), output);
  }

  // optional int32 killPlayers = 22;
  if (has_killplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->killplayers(), output);
  }

  // optional int32 killValue = 23;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->killvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankInfo)
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankInfo)
  // optional int64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // optional int32 battle = 5;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battle(), target);
  }

  // optional int64 moneyNum = 6;
  if (has_moneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->moneynum(), target);
  }

  // optional int32 petBattle = 7;
  if (has_petbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->petbattle(), target);
  }

  // optional int32 horseBattle = 8;
  if (has_horsebattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->horsebattle(), target);
  }

  // optional int32 arenaRank = 9;
  if (has_arenarank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->arenarank(), target);
  }

  // optional int32 topTower = 10;
  if (has_toptower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->toptower(), target);
  }

  // optional string outPut = 11;
  if (has_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output().data(), this->output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->output(), target);
  }

  // optional int64 onlineTime = 12;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->onlinetime(), target);
  }

  // optional int32 gangBattle = 13;
  if (has_gangbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gangbattle(), target);
  }

  // optional int64 petID = 14;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->petid(), target);
  }

  // optional int64 horseID = 15;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->horseid(), target);
  }

  // optional int64 worship = 16;
  if (has_worship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->worship(), target);
  }

  // optional int32 level = 17;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->level(), target);
  }

  // optional int32 winNum = 18;
  if (has_winnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->winnum(), target);
  }

  // optional int64 gangID = 19;
  if (has_gangid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->gangid(), target);
  }

  // optional int32 isWorship = 20;
  if (has_isworship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->isworship(), target);
  }

  // optional int32 vip = 21;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->vip(), target);
  }

  // optional int32 killPlayers = 22;
  if (has_killplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->killplayers(), target);
  }

  // optional int32 killValue = 23;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->killvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankInfo)
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 battle = 5;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // optional int64 moneyNum = 6;
    if (has_moneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->moneynum());
    }

    // optional int32 petBattle = 7;
    if (has_petbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->petbattle());
    }

    // optional int32 horseBattle = 8;
    if (has_horsebattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsebattle());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 arenaRank = 9;
    if (has_arenarank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenarank());
    }

    // optional int32 topTower = 10;
    if (has_toptower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toptower());
    }

    // optional string outPut = 11;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output());
    }

    // optional int64 onlineTime = 12;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }

    // optional int32 gangBattle = 13;
    if (has_gangbattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangbattle());
    }

    // optional int64 petID = 14;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int64 horseID = 15;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->horseid());
    }

    // optional int64 worship = 16;
    if (has_worship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->worship());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 level = 17;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 winNum = 18;
    if (has_winnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winnum());
    }

    // optional int64 gangID = 19;
    if (has_gangid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gangid());
    }

    // optional int32 isWorship = 20;
    if (has_isworship()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isworship());
    }

    // optional int32 vip = 21;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 killPlayers = 22;
    if (has_killplayers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killplayers());
    }

    // optional int32 killValue = 23;
    if (has_killvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_moneynum()) {
      set_moneynum(from.moneynum());
    }
    if (from.has_petbattle()) {
      set_petbattle(from.petbattle());
    }
    if (from.has_horsebattle()) {
      set_horsebattle(from.horsebattle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arenarank()) {
      set_arenarank(from.arenarank());
    }
    if (from.has_toptower()) {
      set_toptower(from.toptower());
    }
    if (from.has_output()) {
      set_output(from.output());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_gangbattle()) {
      set_gangbattle(from.gangbattle());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_worship()) {
      set_worship(from.worship());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_gangid()) {
      set_gangid(from.gangid());
    }
    if (from.has_isworship()) {
      set_isworship(from.isworship());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_killplayers()) {
      set_killplayers(from.killplayers());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(type_, other->type_);
    std::swap(rank_, other->rank_);
    std::swap(battle_, other->battle_);
    std::swap(moneynum_, other->moneynum_);
    std::swap(petbattle_, other->petbattle_);
    std::swap(horsebattle_, other->horsebattle_);
    std::swap(arenarank_, other->arenarank_);
    std::swap(toptower_, other->toptower_);
    std::swap(output_, other->output_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(gangbattle_, other->gangbattle_);
    std::swap(petid_, other->petid_);
    std::swap(horseid_, other->horseid_);
    std::swap(worship_, other->worship_);
    std::swap(level_, other->level_);
    std::swap(winnum_, other->winnum_);
    std::swap(gangid_, other->gangid_);
    std::swap(isworship_, other->isworship_);
    std::swap(vip_, other->vip_);
    std::swap(killplayers_, other->killplayers_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetRankByType::kTypeFieldNumber;
#endif  // !_MSC_VER

CGGetRankByType::CGGetRankByType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetRankByType)
}

void CGGetRankByType::InitAsDefaultInstance() {
}

CGGetRankByType::CGGetRankByType(const CGGetRankByType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetRankByType)
}

void CGGetRankByType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetRankByType::~CGGetRankByType() {
  // @@protoc_insertion_point(destructor:CGGetRankByType)
  SharedDtor();
}

void CGGetRankByType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetRankByType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetRankByType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetRankByType_descriptor_;
}

const CGGetRankByType& CGGetRankByType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

CGGetRankByType* CGGetRankByType::default_instance_ = NULL;

CGGetRankByType* CGGetRankByType::New() const {
  return new CGGetRankByType;
}

void CGGetRankByType::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetRankByType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetRankByType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetRankByType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetRankByType)
  return false;
#undef DO_
}

void CGGetRankByType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetRankByType)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetRankByType)
}

::google::protobuf::uint8* CGGetRankByType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetRankByType)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetRankByType)
  return target;
}

int CGGetRankByType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetRankByType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetRankByType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetRankByType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetRankByType::MergeFrom(const CGGetRankByType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetRankByType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetRankByType::CopyFrom(const CGGetRankByType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetRankByType::IsInitialized() const {

  return true;
}

void CGGetRankByType::Swap(CGGetRankByType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetRankByType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetRankByType_descriptor_;
  metadata.reflection = CGGetRankByType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushRankInfo::kRankInfoFieldNumber;
const int GCPushRankInfo::kTypeFieldNumber;
const int GCPushRankInfo::kNumFieldNumber;
const int GCPushRankInfo::kFirstInfoFieldNumber;
const int GCPushRankInfo::kPetInfoFieldNumber;
const int GCPushRankInfo::kHorseInfoFieldNumber;
#endif  // !_MSC_VER

GCPushRankInfo::GCPushRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushRankInfo)
}

void GCPushRankInfo::InitAsDefaultInstance() {
  firstinfo_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
  horseinfo_ = const_cast< ::HorseInfo*>(&::HorseInfo::default_instance());
}

GCPushRankInfo::GCPushRankInfo(const GCPushRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushRankInfo)
}

void GCPushRankInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  firstinfo_ = NULL;
  petinfo_ = NULL;
  horseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushRankInfo::~GCPushRankInfo() {
  // @@protoc_insertion_point(destructor:GCPushRankInfo)
  SharedDtor();
}

void GCPushRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete firstinfo_;
    delete petinfo_;
    delete horseinfo_;
  }
}

void GCPushRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushRankInfo_descriptor_;
}

const GCPushRankInfo& GCPushRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCPushRankInfo* GCPushRankInfo::default_instance_ = NULL;

GCPushRankInfo* GCPushRankInfo::New() const {
  return new GCPushRankInfo;
}

void GCPushRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 62) {
    ZR_(type_, num_);
    if (has_firstinfo()) {
      if (firstinfo_ != NULL) firstinfo_->::CharacterInfo::Clear();
    }
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
    if (has_horseinfo()) {
      if (horseinfo_ != NULL) horseinfo_->::HorseInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RankInfo rankInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_rankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rankInfo;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_firstInfo;
        break;
      }

      // optional .CharacterInfo firstInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_firstInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_firstinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_petInfo;
        break;
      }

      // optional .PetInfo petInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_petInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_horseInfo;
        break;
      }

      // optional .HorseInfo horseInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_horseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushRankInfo)
  return false;
#undef DO_
}

void GCPushRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushRankInfo)
  // repeated .RankInfo rankInfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional .CharacterInfo firstInfo = 4;
  if (has_firstinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->firstinfo(), output);
  }

  // optional .PetInfo petInfo = 5;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->petinfo(), output);
  }

  // optional .HorseInfo horseInfo = 6;
  if (has_horseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->horseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushRankInfo)
}

::google::protobuf::uint8* GCPushRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushRankInfo)
  // repeated .RankInfo rankInfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional .CharacterInfo firstInfo = 4;
  if (has_firstinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->firstinfo(), target);
  }

  // optional .PetInfo petInfo = 5;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->petinfo(), target);
  }

  // optional .HorseInfo horseInfo = 6;
  if (has_horseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->horseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushRankInfo)
  return target;
}

int GCPushRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional .CharacterInfo firstInfo = 4;
    if (has_firstinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->firstinfo());
    }

    // optional .PetInfo petInfo = 5;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

    // optional .HorseInfo horseInfo = 6;
    if (has_horseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horseinfo());
    }

  }
  // repeated .RankInfo rankInfo = 1;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushRankInfo::MergeFrom(const GCPushRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_firstinfo()) {
      mutable_firstinfo()->::CharacterInfo::MergeFrom(from.firstinfo());
    }
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
    if (from.has_horseinfo()) {
      mutable_horseinfo()->::HorseInfo::MergeFrom(from.horseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushRankInfo::CopyFrom(const GCPushRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushRankInfo::IsInitialized() const {

  return true;
}

void GCPushRankInfo::Swap(GCPushRankInfo* other) {
  if (other != this) {
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(firstinfo_, other->firstinfo_);
    std::swap(petinfo_, other->petinfo_);
    std::swap(horseinfo_, other->horseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushRankInfo_descriptor_;
  metadata.reflection = GCPushRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRankWorship::kPlayerIDFieldNumber;
const int CGRankWorship::kTypeFieldNumber;
#endif  // !_MSC_VER

CGRankWorship::CGRankWorship()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRankWorship)
}

void CGRankWorship::InitAsDefaultInstance() {
}

CGRankWorship::CGRankWorship(const CGRankWorship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRankWorship)
}

void CGRankWorship::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRankWorship::~CGRankWorship() {
  // @@protoc_insertion_point(destructor:CGRankWorship)
  SharedDtor();
}

void CGRankWorship::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRankWorship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRankWorship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRankWorship_descriptor_;
}

const CGRankWorship& CGRankWorship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

CGRankWorship* CGRankWorship::default_instance_ = NULL;

CGRankWorship* CGRankWorship::New() const {
  return new CGRankWorship;
}

void CGRankWorship::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGRankWorship*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRankWorship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRankWorship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRankWorship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRankWorship)
  return false;
#undef DO_
}

void CGRankWorship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRankWorship)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRankWorship)
}

::google::protobuf::uint8* CGRankWorship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRankWorship)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRankWorship)
  return target;
}

int CGRankWorship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRankWorship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRankWorship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRankWorship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRankWorship::MergeFrom(const CGRankWorship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRankWorship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRankWorship::CopyFrom(const CGRankWorship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRankWorship::IsInitialized() const {

  return true;
}

void CGRankWorship::Swap(CGRankWorship* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRankWorship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRankWorship_descriptor_;
  metadata.reflection = CGRankWorship_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRankWrshipBack::kPlayerIDFieldNumber;
const int GCRankWrshipBack::kWorshipFieldNumber;
const int GCRankWrshipBack::kTypeFieldNumber;
const int GCRankWrshipBack::kNumFieldNumber;
const int GCRankWrshipBack::kResultFieldNumber;
#endif  // !_MSC_VER

GCRankWrshipBack::GCRankWrshipBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRankWrshipBack)
}

void GCRankWrshipBack::InitAsDefaultInstance() {
}

GCRankWrshipBack::GCRankWrshipBack(const GCRankWrshipBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRankWrshipBack)
}

void GCRankWrshipBack::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  worship_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  num_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRankWrshipBack::~GCRankWrshipBack() {
  // @@protoc_insertion_point(destructor:GCRankWrshipBack)
  SharedDtor();
}

void GCRankWrshipBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRankWrshipBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRankWrshipBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRankWrshipBack_descriptor_;
}

const GCRankWrshipBack& GCRankWrshipBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCRankWrshipBack* GCRankWrshipBack::default_instance_ = NULL;

GCRankWrshipBack* GCRankWrshipBack::New() const {
  return new GCRankWrshipBack;
}

void GCRankWrshipBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRankWrshipBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(playerid_, result_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRankWrshipBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRankWrshipBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worship;
        break;
      }

      // optional int64 worship = 2;
      case 2: {
        if (tag == 16) {
         parse_worship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &worship_)));
          set_has_worship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRankWrshipBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRankWrshipBack)
  return false;
#undef DO_
}

void GCRankWrshipBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRankWrshipBack)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 worship = 2;
  if (has_worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->worship(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 result = 5;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRankWrshipBack)
}

::google::protobuf::uint8* GCRankWrshipBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRankWrshipBack)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 worship = 2;
  if (has_worship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->worship(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 result = 5;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRankWrshipBack)
  return target;
}

int GCRankWrshipBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 worship = 2;
    if (has_worship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->worship());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRankWrshipBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRankWrshipBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRankWrshipBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRankWrshipBack::MergeFrom(const GCRankWrshipBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_worship()) {
      set_worship(from.worship());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRankWrshipBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRankWrshipBack::CopyFrom(const GCRankWrshipBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRankWrshipBack::IsInitialized() const {

  return true;
}

void GCRankWrshipBack::Swap(GCRankWrshipBack* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(worship_, other->worship_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRankWrshipBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRankWrshipBack_descriptor_;
  metadata.reflection = GCRankWrshipBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetPetOrHorseInfo::kPlayerIDFieldNumber;
const int CGGetPetOrHorseInfo::kPetIDFieldNumber;
const int CGGetPetOrHorseInfo::kHorseIDFieldNumber;
#endif  // !_MSC_VER

CGGetPetOrHorseInfo::CGGetPetOrHorseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetPetOrHorseInfo)
}

void CGGetPetOrHorseInfo::InitAsDefaultInstance() {
}

CGGetPetOrHorseInfo::CGGetPetOrHorseInfo(const CGGetPetOrHorseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetPetOrHorseInfo)
}

void CGGetPetOrHorseInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  petid_ = GOOGLE_LONGLONG(0);
  horseid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetPetOrHorseInfo::~CGGetPetOrHorseInfo() {
  // @@protoc_insertion_point(destructor:CGGetPetOrHorseInfo)
  SharedDtor();
}

void CGGetPetOrHorseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetPetOrHorseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetPetOrHorseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetPetOrHorseInfo_descriptor_;
}

const CGGetPetOrHorseInfo& CGGetPetOrHorseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

CGGetPetOrHorseInfo* CGGetPetOrHorseInfo::default_instance_ = NULL;

CGGetPetOrHorseInfo* CGGetPetOrHorseInfo::New() const {
  return new CGGetPetOrHorseInfo;
}

void CGGetPetOrHorseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetPetOrHorseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(playerid_, horseid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetPetOrHorseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetPetOrHorseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_petID;
        break;
      }

      // optional int64 petID = 2;
      case 2: {
        if (tag == 16) {
         parse_petID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &petid_)));
          set_has_petid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_horseID;
        break;
      }

      // optional int64 horseID = 3;
      case 3: {
        if (tag == 24) {
         parse_horseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetPetOrHorseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetPetOrHorseInfo)
  return false;
#undef DO_
}

void CGGetPetOrHorseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetPetOrHorseInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int64 petID = 2;
  if (has_petid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->petid(), output);
  }

  // optional int64 horseID = 3;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->horseid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetPetOrHorseInfo)
}

::google::protobuf::uint8* CGGetPetOrHorseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetPetOrHorseInfo)
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int64 petID = 2;
  if (has_petid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->petid(), target);
  }

  // optional int64 horseID = 3;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->horseid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetPetOrHorseInfo)
  return target;
}

int CGGetPetOrHorseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 petID = 2;
    if (has_petid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->petid());
    }

    // optional int64 horseID = 3;
    if (has_horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->horseid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetPetOrHorseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetPetOrHorseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetPetOrHorseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetPetOrHorseInfo::MergeFrom(const CGGetPetOrHorseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_petid()) {
      set_petid(from.petid());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetPetOrHorseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetPetOrHorseInfo::CopyFrom(const CGGetPetOrHorseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetPetOrHorseInfo::IsInitialized() const {

  return true;
}

void CGGetPetOrHorseInfo::Swap(CGGetPetOrHorseInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(petid_, other->petid_);
    std::swap(horseid_, other->horseid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetPetOrHorseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetPetOrHorseInfo_descriptor_;
  metadata.reflection = CGGetPetOrHorseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendPetOrHorseInfo::kPetInfoFieldNumber;
const int GCSendPetOrHorseInfo::kHorseInfoFieldNumber;
#endif  // !_MSC_VER

GCSendPetOrHorseInfo::GCSendPetOrHorseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendPetOrHorseInfo)
}

void GCSendPetOrHorseInfo::InitAsDefaultInstance() {
  petinfo_ = const_cast< ::PetInfo*>(&::PetInfo::default_instance());
  horseinfo_ = const_cast< ::HorseInfo*>(&::HorseInfo::default_instance());
}

GCSendPetOrHorseInfo::GCSendPetOrHorseInfo(const GCSendPetOrHorseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendPetOrHorseInfo)
}

void GCSendPetOrHorseInfo::SharedCtor() {
  _cached_size_ = 0;
  petinfo_ = NULL;
  horseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendPetOrHorseInfo::~GCSendPetOrHorseInfo() {
  // @@protoc_insertion_point(destructor:GCSendPetOrHorseInfo)
  SharedDtor();
}

void GCSendPetOrHorseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete petinfo_;
    delete horseinfo_;
  }
}

void GCSendPetOrHorseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendPetOrHorseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendPetOrHorseInfo_descriptor_;
}

const GCSendPetOrHorseInfo& GCSendPetOrHorseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCSendPetOrHorseInfo* GCSendPetOrHorseInfo::default_instance_ = NULL;

GCSendPetOrHorseInfo* GCSendPetOrHorseInfo::New() const {
  return new GCSendPetOrHorseInfo;
}

void GCSendPetOrHorseInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_petinfo()) {
      if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
    }
    if (has_horseinfo()) {
      if (horseinfo_ != NULL) horseinfo_->::HorseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendPetOrHorseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendPetOrHorseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PetInfo petInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_petinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_horseInfo;
        break;
      }

      // optional .HorseInfo horseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_horseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendPetOrHorseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendPetOrHorseInfo)
  return false;
#undef DO_
}

void GCSendPetOrHorseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendPetOrHorseInfo)
  // optional .PetInfo petInfo = 1;
  if (has_petinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->petinfo(), output);
  }

  // optional .HorseInfo horseInfo = 2;
  if (has_horseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->horseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendPetOrHorseInfo)
}

::google::protobuf::uint8* GCSendPetOrHorseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendPetOrHorseInfo)
  // optional .PetInfo petInfo = 1;
  if (has_petinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->petinfo(), target);
  }

  // optional .HorseInfo horseInfo = 2;
  if (has_horseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendPetOrHorseInfo)
  return target;
}

int GCSendPetOrHorseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PetInfo petInfo = 1;
    if (has_petinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->petinfo());
    }

    // optional .HorseInfo horseInfo = 2;
    if (has_horseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendPetOrHorseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendPetOrHorseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendPetOrHorseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendPetOrHorseInfo::MergeFrom(const GCSendPetOrHorseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_petinfo()) {
      mutable_petinfo()->::PetInfo::MergeFrom(from.petinfo());
    }
    if (from.has_horseinfo()) {
      mutable_horseinfo()->::HorseInfo::MergeFrom(from.horseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendPetOrHorseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendPetOrHorseInfo::CopyFrom(const GCSendPetOrHorseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendPetOrHorseInfo::IsInitialized() const {

  return true;
}

void GCSendPetOrHorseInfo::Swap(GCSendPetOrHorseInfo* other) {
  if (other != this) {
    std::swap(petinfo_, other->petinfo_);
    std::swap(horseinfo_, other->horseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendPetOrHorseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendPetOrHorseInfo_descriptor_;
  metadata.reflection = GCSendPetOrHorseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushWorship::kNumFieldNumber;
#endif  // !_MSC_VER

GCPushWorship::GCPushWorship()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushWorship)
}

void GCPushWorship::InitAsDefaultInstance() {
}

GCPushWorship::GCPushWorship(const GCPushWorship& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushWorship)
}

void GCPushWorship::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushWorship::~GCPushWorship() {
  // @@protoc_insertion_point(destructor:GCPushWorship)
  SharedDtor();
}

void GCPushWorship::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushWorship::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushWorship::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushWorship_descriptor_;
}

const GCPushWorship& GCPushWorship::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCPushWorship* GCPushWorship::default_instance_ = NULL;

GCPushWorship* GCPushWorship::New() const {
  return new GCPushWorship;
}

void GCPushWorship::Clear() {
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushWorship::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushWorship)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushWorship)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushWorship)
  return false;
#undef DO_
}

void GCPushWorship::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushWorship)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushWorship)
}

::google::protobuf::uint8* GCPushWorship::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushWorship)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushWorship)
  return target;
}

int GCPushWorship::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushWorship::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushWorship* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushWorship*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushWorship::MergeFrom(const GCPushWorship& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushWorship::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushWorship::CopyFrom(const GCPushWorship& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushWorship::IsInitialized() const {

  return true;
}

void GCPushWorship::Swap(GCPushWorship* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushWorship::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushWorship_descriptor_;
  metadata.reflection = GCPushWorship_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshRank::kTypeFieldNumber;
#endif  // !_MSC_VER

GCRefreshRank::GCRefreshRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshRank)
}

void GCRefreshRank::InitAsDefaultInstance() {
}

GCRefreshRank::GCRefreshRank(const GCRefreshRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshRank)
}

void GCRefreshRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshRank::~GCRefreshRank() {
  // @@protoc_insertion_point(destructor:GCRefreshRank)
  SharedDtor();
}

void GCRefreshRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshRank_descriptor_;
}

const GCRefreshRank& GCRefreshRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCRefreshRank* GCRefreshRank::default_instance_ = NULL;

GCRefreshRank* GCRefreshRank::New() const {
  return new GCRefreshRank;
}

void GCRefreshRank::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshRank)
  return false;
#undef DO_
}

void GCRefreshRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshRank)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshRank)
}

::google::protobuf::uint8* GCRefreshRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshRank)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshRank)
  return target;
}

int GCRefreshRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshRank::MergeFrom(const GCRefreshRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshRank::CopyFrom(const GCRefreshRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshRank::IsInitialized() const {

  return true;
}

void GCRefreshRank::Swap(GCRefreshRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshRank_descriptor_;
  metadata.reflection = GCRefreshRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightInfo::kIdFieldNumber;
const int FightInfo::kFightingFieldNumber;
const int FightInfo::kHorseFieldNumber;
const int FightInfo::kModelFieldNumber;
const int FightInfo::kPositionFieldNumber;
const int FightInfo::kScaleFieldNumber;
const int FightInfo::kRotateFieldNumber;
const int FightInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

FightInfo::FightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightInfo)
}

void FightInfo::InitAsDefaultInstance() {
}

FightInfo::FightInfo(const FightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FightInfo)
}

void FightInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  horse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = 0;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightInfo::~FightInfo() {
  // @@protoc_insertion_point(destructor:FightInfo)
  SharedDtor();
}

void FightInfo::SharedDtor() {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fighting_;
  }
  if (horse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete horse_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewards_;
  }
  if (this != default_instance_) {
  }
}

void FightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightInfo_descriptor_;
}

const FightInfo& FightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

FightInfo* FightInfo::default_instance_ = NULL;

FightInfo* FightInfo::New() const {
  return new FightInfo;
}

void FightInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, model_);
    if (has_fighting()) {
      if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fighting_->clear();
      }
    }
    if (has_horse()) {
      if (horse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        horse_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scale_->clear();
      }
    }
    if (has_rotate()) {
      if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rotate_->clear();
      }
    }
    if (has_rewards()) {
      if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewards_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fighting;
        break;
      }

      // optional string fighting = 2;
      case 2: {
        if (tag == 18) {
         parse_fighting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fighting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fighting().data(), this->fighting().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fighting");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_horse;
        break;
      }

      // optional string horse = 3;
      case 3: {
        if (tag == 26) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_horse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->horse().data(), this->horse().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "horse");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_model;
        break;
      }

      // optional int32 model = 4;
      case 4: {
        if (tag == 32) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_position;
        break;
      }

      // optional string position = 5;
      case 5: {
        if (tag == 42) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_scale;
        break;
      }

      // optional string scale = 6;
      case 6: {
        if (tag == 50) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rotate;
        break;
      }

      // optional string rotate = 7;
      case 7: {
        if (tag == 58) {
         parse_rotate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rotate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rotate().data(), this->rotate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rotate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rewards;
        break;
      }

      // optional string rewards = 8;
      case 8: {
        if (tag == 66) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewards()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewards().data(), this->rewards().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewards");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightInfo)
  return false;
#undef DO_
}

void FightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string fighting = 2;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fighting");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fighting(), output);
  }

  // optional string horse = 3;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->horse().data(), this->horse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "horse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->horse(), output);
  }

  // optional int32 model = 4;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model(), output);
  }

  // optional string position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->position(), output);
  }

  // optional string scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->scale(), output);
  }

  // optional string rotate = 7;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rotate(), output);
  }

  // optional string rewards = 8;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewards");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightInfo)
}

::google::protobuf::uint8* FightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FightInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string fighting = 2;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fighting");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fighting(), target);
  }

  // optional string horse = 3;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->horse().data(), this->horse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "horse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->horse(), target);
  }

  // optional int32 model = 4;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model(), target);
  }

  // optional string position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->position(), target);
  }

  // optional string scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->scale(), target);
  }

  // optional string rotate = 7;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotate().data(), this->rotate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rotate(), target);
  }

  // optional string rewards = 8;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewards");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightInfo)
  return target;
}

int FightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string fighting = 2;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fighting());
    }

    // optional string horse = 3;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->horse());
    }

    // optional int32 model = 4;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }

    // optional string position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string scale = 6;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string rotate = 7;
    if (has_rotate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rotate());
    }

    // optional string rewards = 8;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightInfo::MergeFrom(const FightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
    if (from.has_rewards()) {
      set_rewards(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightInfo::CopyFrom(const FightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightInfo::IsInitialized() const {

  return true;
}

void FightInfo::Swap(FightInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fighting_, other->fighting_);
    std::swap(horse_, other->horse_);
    std::swap(model_, other->model_);
    std::swap(position_, other->position_);
    std::swap(scale_, other->scale_);
    std::swap(rotate_, other->rotate_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightInfo_descriptor_;
  metadata.reflection = FightInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelInfo::kIdFieldNumber;
const int LevelInfo::kFightingFieldNumber;
const int LevelInfo::kTitleFieldNumber;
const int LevelInfo::kPositionFieldNumber;
const int LevelInfo::kScaleFieldNumber;
const int LevelInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

LevelInfo::LevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LevelInfo)
}

void LevelInfo::InitAsDefaultInstance() {
}

LevelInfo::LevelInfo(const LevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LevelInfo)
}

void LevelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelInfo::~LevelInfo() {
  // @@protoc_insertion_point(destructor:LevelInfo)
  SharedDtor();
}

void LevelInfo::SharedDtor() {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fighting_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewards_;
  }
  if (this != default_instance_) {
  }
}

void LevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelInfo_descriptor_;
}

const LevelInfo& LevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

LevelInfo* LevelInfo::default_instance_ = NULL;

LevelInfo* LevelInfo::New() const {
  return new LevelInfo;
}

void LevelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LevelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, title_);
    if (has_fighting()) {
      if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fighting_->clear();
      }
    }
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scale_->clear();
      }
    }
    if (has_rewards()) {
      if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewards_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LevelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fighting;
        break;
      }

      // optional string fighting = 2;
      case 2: {
        if (tag == 18) {
         parse_fighting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fighting()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fighting().data(), this->fighting().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fighting");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_title;
        break;
      }

      // optional int32 title = 3;
      case 3: {
        if (tag == 24) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // optional string position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_scale;
        break;
      }

      // optional string scale = 5;
      case 5: {
        if (tag == 42) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // optional string rewards = 6;
      case 6: {
        if (tag == 50) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewards()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewards().data(), this->rewards().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewards");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LevelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LevelInfo)
  return false;
#undef DO_
}

void LevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LevelInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string fighting = 2;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fighting");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fighting(), output);
  }

  // optional int32 title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->title(), output);
  }

  // optional string position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->position(), output);
  }

  // optional string scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->scale(), output);
  }

  // optional string rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewards");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LevelInfo)
}

::google::protobuf::uint8* LevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LevelInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string fighting = 2;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fighting().data(), this->fighting().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fighting");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fighting(), target);
  }

  // optional int32 title = 3;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->title(), target);
  }

  // optional string position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->position(), target);
  }

  // optional string scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scale(), target);
  }

  // optional string rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewards");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LevelInfo)
  return target;
}

int LevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string fighting = 2;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fighting());
    }

    // optional int32 title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->title());
    }

    // optional string position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string scale = 5;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

    // optional string rewards = 6;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelInfo::MergeFrom(const LevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_rewards()) {
      set_rewards(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelInfo::CopyFrom(const LevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelInfo::IsInitialized() const {

  return true;
}

void LevelInfo::Swap(LevelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fighting_, other->fighting_);
    std::swap(title_, other->title_);
    std::swap(position_, other->position_);
    std::swap(scale_, other->scale_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelInfo_descriptor_;
  metadata.reflection = LevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushOpenInfo::kFirstInfosFieldNumber;
const int GCPushOpenInfo::kLevelInfosFieldNumber;
const int GCPushOpenInfo::kLevelStartTimeFieldNumber;
const int GCPushOpenInfo::kLevelEndTimeFieldNumber;
const int GCPushOpenInfo::kFightStartTimeFieldNumber;
const int GCPushOpenInfo::kFightEndTimeFieldNumber;
#endif  // !_MSC_VER

GCPushOpenInfo::GCPushOpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushOpenInfo)
}

void GCPushOpenInfo::InitAsDefaultInstance() {
}

GCPushOpenInfo::GCPushOpenInfo(const GCPushOpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushOpenInfo)
}

void GCPushOpenInfo::SharedCtor() {
  _cached_size_ = 0;
  levelstarttime_ = GOOGLE_LONGLONG(0);
  levelendtime_ = GOOGLE_LONGLONG(0);
  fightstarttime_ = GOOGLE_LONGLONG(0);
  fightendtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushOpenInfo::~GCPushOpenInfo() {
  // @@protoc_insertion_point(destructor:GCPushOpenInfo)
  SharedDtor();
}

void GCPushOpenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushOpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushOpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushOpenInfo_descriptor_;
}

const GCPushOpenInfo& GCPushOpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCPushOpenInfo* GCPushOpenInfo::default_instance_ = NULL;

GCPushOpenInfo* GCPushOpenInfo::New() const {
  return new GCPushOpenInfo;
}

void GCPushOpenInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushOpenInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(levelstarttime_, fightendtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  firstinfos_.Clear();
  levelinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushOpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushOpenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FightInfo firstInfos = 1;
      case 1: {
        if (tag == 10) {
         parse_firstInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_firstInfos;
        if (input->ExpectTag(18)) goto parse_levelInfos;
        break;
      }

      // repeated .LevelInfo levelInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_levelInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_levelInfos;
        if (input->ExpectTag(24)) goto parse_levelStartTime;
        break;
      }

      // optional int64 levelStartTime = 3;
      case 3: {
        if (tag == 24) {
         parse_levelStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &levelstarttime_)));
          set_has_levelstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_levelEndTime;
        break;
      }

      // optional int64 levelEndTime = 4;
      case 4: {
        if (tag == 32) {
         parse_levelEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &levelendtime_)));
          set_has_levelendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fightStartTime;
        break;
      }

      // optional int64 fightStartTime = 5;
      case 5: {
        if (tag == 40) {
         parse_fightStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightstarttime_)));
          set_has_fightstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fightEndTime;
        break;
      }

      // optional int64 fightEndTime = 6;
      case 6: {
        if (tag == 48) {
         parse_fightEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fightendtime_)));
          set_has_fightendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushOpenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushOpenInfo)
  return false;
#undef DO_
}

void GCPushOpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushOpenInfo)
  // repeated .FightInfo firstInfos = 1;
  for (int i = 0; i < this->firstinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstinfos(i), output);
  }

  // repeated .LevelInfo levelInfos = 2;
  for (int i = 0; i < this->levelinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelinfos(i), output);
  }

  // optional int64 levelStartTime = 3;
  if (has_levelstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->levelstarttime(), output);
  }

  // optional int64 levelEndTime = 4;
  if (has_levelendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->levelendtime(), output);
  }

  // optional int64 fightStartTime = 5;
  if (has_fightstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fightstarttime(), output);
  }

  // optional int64 fightEndTime = 6;
  if (has_fightendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fightendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushOpenInfo)
}

::google::protobuf::uint8* GCPushOpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushOpenInfo)
  // repeated .FightInfo firstInfos = 1;
  for (int i = 0; i < this->firstinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstinfos(i), target);
  }

  // repeated .LevelInfo levelInfos = 2;
  for (int i = 0; i < this->levelinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelinfos(i), target);
  }

  // optional int64 levelStartTime = 3;
  if (has_levelstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->levelstarttime(), target);
  }

  // optional int64 levelEndTime = 4;
  if (has_levelendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->levelendtime(), target);
  }

  // optional int64 fightStartTime = 5;
  if (has_fightstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fightstarttime(), target);
  }

  // optional int64 fightEndTime = 6;
  if (has_fightendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fightendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushOpenInfo)
  return target;
}

int GCPushOpenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int64 levelStartTime = 3;
    if (has_levelstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->levelstarttime());
    }

    // optional int64 levelEndTime = 4;
    if (has_levelendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->levelendtime());
    }

    // optional int64 fightStartTime = 5;
    if (has_fightstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightstarttime());
    }

    // optional int64 fightEndTime = 6;
    if (has_fightendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fightendtime());
    }

  }
  // repeated .FightInfo firstInfos = 1;
  total_size += 1 * this->firstinfos_size();
  for (int i = 0; i < this->firstinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstinfos(i));
  }

  // repeated .LevelInfo levelInfos = 2;
  total_size += 1 * this->levelinfos_size();
  for (int i = 0; i < this->levelinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushOpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushOpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushOpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushOpenInfo::MergeFrom(const GCPushOpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstinfos_.MergeFrom(from.firstinfos_);
  levelinfos_.MergeFrom(from.levelinfos_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_levelstarttime()) {
      set_levelstarttime(from.levelstarttime());
    }
    if (from.has_levelendtime()) {
      set_levelendtime(from.levelendtime());
    }
    if (from.has_fightstarttime()) {
      set_fightstarttime(from.fightstarttime());
    }
    if (from.has_fightendtime()) {
      set_fightendtime(from.fightendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushOpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushOpenInfo::CopyFrom(const GCPushOpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushOpenInfo::IsInitialized() const {

  return true;
}

void GCPushOpenInfo::Swap(GCPushOpenInfo* other) {
  if (other != this) {
    firstinfos_.Swap(&other->firstinfos_);
    levelinfos_.Swap(&other->levelinfos_);
    std::swap(levelstarttime_, other->levelstarttime_);
    std::swap(levelendtime_, other->levelendtime_);
    std::swap(fightstarttime_, other->fightstarttime_);
    std::swap(fightendtime_, other->fightendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushOpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushOpenInfo_descriptor_;
  metadata.reflection = GCPushOpenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCOpenRankOver::kTypeFieldNumber;
#endif  // !_MSC_VER

GCOpenRankOver::GCOpenRankOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCOpenRankOver)
}

void GCOpenRankOver::InitAsDefaultInstance() {
}

GCOpenRankOver::GCOpenRankOver(const GCOpenRankOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCOpenRankOver)
}

void GCOpenRankOver::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCOpenRankOver::~GCOpenRankOver() {
  // @@protoc_insertion_point(destructor:GCOpenRankOver)
  SharedDtor();
}

void GCOpenRankOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCOpenRankOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCOpenRankOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCOpenRankOver_descriptor_;
}

const GCOpenRankOver& GCOpenRankOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankingMessage_2eproto();
  return *default_instance_;
}

GCOpenRankOver* GCOpenRankOver::default_instance_ = NULL;

GCOpenRankOver* GCOpenRankOver::New() const {
  return new GCOpenRankOver;
}

void GCOpenRankOver::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCOpenRankOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCOpenRankOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCOpenRankOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCOpenRankOver)
  return false;
#undef DO_
}

void GCOpenRankOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCOpenRankOver)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCOpenRankOver)
}

::google::protobuf::uint8* GCOpenRankOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCOpenRankOver)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCOpenRankOver)
  return target;
}

int GCOpenRankOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCOpenRankOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCOpenRankOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCOpenRankOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCOpenRankOver::MergeFrom(const GCOpenRankOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCOpenRankOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCOpenRankOver::CopyFrom(const GCOpenRankOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCOpenRankOver::IsInitialized() const {

  return true;
}

void GCOpenRankOver::Swap(GCOpenRankOver* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCOpenRankOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCOpenRankOver_descriptor_;
  metadata.reflection = GCOpenRankOver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
