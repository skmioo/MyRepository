// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankingMessage.proto

#ifndef PROTOBUF_RankingMessage_2eproto__INCLUDED
#define PROTOBUF_RankingMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RankingMessage_2eproto();
void protobuf_AssignDesc_RankingMessage_2eproto();
void protobuf_ShutdownFile_RankingMessage_2eproto();

class RankInfo;
class CGGetRankByType;
class GCPushRankInfo;
class CGRankWorship;
class GCRankWrshipBack;
class CGGetPetOrHorseInfo;
class GCSendPetOrHorseInfo;
class GCPushWorship;
class GCRefreshRank;
class FightInfo;
class LevelInfo;
class GCPushOpenInfo;
class GCOpenRankOver;

// ===================================================================

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional string playerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 battle = 5;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 5;
  inline ::google::protobuf::int32 battle() const;
  inline void set_battle(::google::protobuf::int32 value);

  // optional int64 moneyNum = 6;
  inline bool has_moneynum() const;
  inline void clear_moneynum();
  static const int kMoneyNumFieldNumber = 6;
  inline ::google::protobuf::int64 moneynum() const;
  inline void set_moneynum(::google::protobuf::int64 value);

  // optional int32 petBattle = 7;
  inline bool has_petbattle() const;
  inline void clear_petbattle();
  static const int kPetBattleFieldNumber = 7;
  inline ::google::protobuf::int32 petbattle() const;
  inline void set_petbattle(::google::protobuf::int32 value);

  // optional int32 horseBattle = 8;
  inline bool has_horsebattle() const;
  inline void clear_horsebattle();
  static const int kHorseBattleFieldNumber = 8;
  inline ::google::protobuf::int32 horsebattle() const;
  inline void set_horsebattle(::google::protobuf::int32 value);

  // optional int32 arenaRank = 9;
  inline bool has_arenarank() const;
  inline void clear_arenarank();
  static const int kArenaRankFieldNumber = 9;
  inline ::google::protobuf::int32 arenarank() const;
  inline void set_arenarank(::google::protobuf::int32 value);

  // optional int32 topTower = 10;
  inline bool has_toptower() const;
  inline void clear_toptower();
  static const int kTopTowerFieldNumber = 10;
  inline ::google::protobuf::int32 toptower() const;
  inline void set_toptower(::google::protobuf::int32 value);

  // optional string outPut = 11;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutPutFieldNumber = 11;
  inline const ::std::string& output() const;
  inline void set_output(const ::std::string& value);
  inline void set_output(const char* value);
  inline void set_output(const char* value, size_t size);
  inline ::std::string* mutable_output();
  inline ::std::string* release_output();
  inline void set_allocated_output(::std::string* output);

  // optional int64 onlineTime = 12;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 12;
  inline ::google::protobuf::int64 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::int64 value);

  // optional int32 gangBattle = 13;
  inline bool has_gangbattle() const;
  inline void clear_gangbattle();
  static const int kGangBattleFieldNumber = 13;
  inline ::google::protobuf::int32 gangbattle() const;
  inline void set_gangbattle(::google::protobuf::int32 value);

  // optional int64 petID = 14;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 14;
  inline ::google::protobuf::int64 petid() const;
  inline void set_petid(::google::protobuf::int64 value);

  // optional int64 horseID = 15;
  inline bool has_horseid() const;
  inline void clear_horseid();
  static const int kHorseIDFieldNumber = 15;
  inline ::google::protobuf::int64 horseid() const;
  inline void set_horseid(::google::protobuf::int64 value);

  // optional int64 worship = 16;
  inline bool has_worship() const;
  inline void clear_worship();
  static const int kWorshipFieldNumber = 16;
  inline ::google::protobuf::int64 worship() const;
  inline void set_worship(::google::protobuf::int64 value);

  // optional int32 level = 17;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 17;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 winNum = 18;
  inline bool has_winnum() const;
  inline void clear_winnum();
  static const int kWinNumFieldNumber = 18;
  inline ::google::protobuf::int32 winnum() const;
  inline void set_winnum(::google::protobuf::int32 value);

  // optional int64 gangID = 19;
  inline bool has_gangid() const;
  inline void clear_gangid();
  static const int kGangIDFieldNumber = 19;
  inline ::google::protobuf::int64 gangid() const;
  inline void set_gangid(::google::protobuf::int64 value);

  // optional int32 isWorship = 20;
  inline bool has_isworship() const;
  inline void clear_isworship();
  static const int kIsWorshipFieldNumber = 20;
  inline ::google::protobuf::int32 isworship() const;
  inline void set_isworship(::google::protobuf::int32 value);

  // optional int32 vip = 21;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 21;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 killPlayers = 22;
  inline bool has_killplayers() const;
  inline void clear_killplayers();
  static const int kKillPlayersFieldNumber = 22;
  inline ::google::protobuf::int32 killplayers() const;
  inline void set_killplayers(::google::protobuf::int32 value);

  // optional int32 killValue = 23;
  inline bool has_killvalue() const;
  inline void clear_killvalue();
  static const int kKillValueFieldNumber = 23;
  inline ::google::protobuf::int32 killvalue() const;
  inline void set_killvalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_moneynum();
  inline void clear_has_moneynum();
  inline void set_has_petbattle();
  inline void clear_has_petbattle();
  inline void set_has_horsebattle();
  inline void clear_has_horsebattle();
  inline void set_has_arenarank();
  inline void clear_has_arenarank();
  inline void set_has_toptower();
  inline void clear_has_toptower();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_gangbattle();
  inline void clear_has_gangbattle();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_horseid();
  inline void clear_has_horseid();
  inline void set_has_worship();
  inline void clear_has_worship();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_winnum();
  inline void clear_has_winnum();
  inline void set_has_gangid();
  inline void clear_has_gangid();
  inline void set_has_isworship();
  inline void clear_has_isworship();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_killplayers();
  inline void clear_has_killplayers();
  inline void set_has_killvalue();
  inline void clear_has_killvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int64 moneynum_;
  ::google::protobuf::int32 battle_;
  ::google::protobuf::int32 petbattle_;
  ::google::protobuf::int32 horsebattle_;
  ::google::protobuf::int32 arenarank_;
  ::std::string* output_;
  ::google::protobuf::int32 toptower_;
  ::google::protobuf::int32 gangbattle_;
  ::google::protobuf::int64 onlinetime_;
  ::google::protobuf::int64 petid_;
  ::google::protobuf::int64 horseid_;
  ::google::protobuf::int64 worship_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 winnum_;
  ::google::protobuf::int64 gangid_;
  ::google::protobuf::int32 isworship_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 killplayers_;
  ::google::protobuf::int32 killvalue_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGGetRankByType : public ::google::protobuf::Message {
 public:
  CGGetRankByType();
  virtual ~CGGetRankByType();

  CGGetRankByType(const CGGetRankByType& from);

  inline CGGetRankByType& operator=(const CGGetRankByType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetRankByType& default_instance();

  void Swap(CGGetRankByType* other);

  // implements Message ----------------------------------------------

  CGGetRankByType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetRankByType& from);
  void MergeFrom(const CGGetRankByType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGGetRankByType)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetRankByType* default_instance_;
};
// -------------------------------------------------------------------

class GCPushRankInfo : public ::google::protobuf::Message {
 public:
  GCPushRankInfo();
  virtual ~GCPushRankInfo();

  GCPushRankInfo(const GCPushRankInfo& from);

  inline GCPushRankInfo& operator=(const GCPushRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPushRankInfo& default_instance();

  void Swap(GCPushRankInfo* other);

  // implements Message ----------------------------------------------

  GCPushRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPushRankInfo& from);
  void MergeFrom(const GCPushRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RankInfo rankInfo = 1;
  inline int rankinfo_size() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 1;
  inline const ::RankInfo& rankinfo(int index) const;
  inline ::RankInfo* mutable_rankinfo(int index);
  inline ::RankInfo* add_rankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::RankInfo >&
      rankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::RankInfo >*
      mutable_rankinfo();

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional .CharacterInfo firstInfo = 4;
  inline bool has_firstinfo() const;
  inline void clear_firstinfo();
  static const int kFirstInfoFieldNumber = 4;
  inline const ::CharacterInfo& firstinfo() const;
  inline ::CharacterInfo* mutable_firstinfo();
  inline ::CharacterInfo* release_firstinfo();
  inline void set_allocated_firstinfo(::CharacterInfo* firstinfo);

  // optional .PetInfo petInfo = 5;
  inline bool has_petinfo() const;
  inline void clear_petinfo();
  static const int kPetInfoFieldNumber = 5;
  inline const ::PetInfo& petinfo() const;
  inline ::PetInfo* mutable_petinfo();
  inline ::PetInfo* release_petinfo();
  inline void set_allocated_petinfo(::PetInfo* petinfo);

  // optional .HorseInfo horseInfo = 6;
  inline bool has_horseinfo() const;
  inline void clear_horseinfo();
  static const int kHorseInfoFieldNumber = 6;
  inline const ::HorseInfo& horseinfo() const;
  inline ::HorseInfo* mutable_horseinfo();
  inline ::HorseInfo* release_horseinfo();
  inline void set_allocated_horseinfo(::HorseInfo* horseinfo);

  // @@protoc_insertion_point(class_scope:GCPushRankInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_firstinfo();
  inline void clear_has_firstinfo();
  inline void set_has_petinfo();
  inline void clear_has_petinfo();
  inline void set_has_horseinfo();
  inline void clear_has_horseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RankInfo > rankinfo_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::CharacterInfo* firstinfo_;
  ::PetInfo* petinfo_;
  ::HorseInfo* horseinfo_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPushRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGRankWorship : public ::google::protobuf::Message {
 public:
  CGRankWorship();
  virtual ~CGRankWorship();

  CGRankWorship(const CGRankWorship& from);

  inline CGRankWorship& operator=(const CGRankWorship& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGRankWorship& default_instance();

  void Swap(CGRankWorship* other);

  // implements Message ----------------------------------------------

  CGRankWorship* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGRankWorship& from);
  void MergeFrom(const CGRankWorship& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CGRankWorship)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static CGRankWorship* default_instance_;
};
// -------------------------------------------------------------------

class GCRankWrshipBack : public ::google::protobuf::Message {
 public:
  GCRankWrshipBack();
  virtual ~GCRankWrshipBack();

  GCRankWrshipBack(const GCRankWrshipBack& from);

  inline GCRankWrshipBack& operator=(const GCRankWrshipBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRankWrshipBack& default_instance();

  void Swap(GCRankWrshipBack* other);

  // implements Message ----------------------------------------------

  GCRankWrshipBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRankWrshipBack& from);
  void MergeFrom(const GCRankWrshipBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 worship = 2;
  inline bool has_worship() const;
  inline void clear_worship();
  static const int kWorshipFieldNumber = 2;
  inline ::google::protobuf::int64 worship() const;
  inline void set_worship(::google::protobuf::int64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCRankWrshipBack)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_worship();
  inline void clear_has_worship();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 worship_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRankWrshipBack* default_instance_;
};
// -------------------------------------------------------------------

class CGGetPetOrHorseInfo : public ::google::protobuf::Message {
 public:
  CGGetPetOrHorseInfo();
  virtual ~CGGetPetOrHorseInfo();

  CGGetPetOrHorseInfo(const CGGetPetOrHorseInfo& from);

  inline CGGetPetOrHorseInfo& operator=(const CGGetPetOrHorseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGGetPetOrHorseInfo& default_instance();

  void Swap(CGGetPetOrHorseInfo* other);

  // implements Message ----------------------------------------------

  CGGetPetOrHorseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGGetPetOrHorseInfo& from);
  void MergeFrom(const CGGetPetOrHorseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 petID = 2;
  inline bool has_petid() const;
  inline void clear_petid();
  static const int kPetIDFieldNumber = 2;
  inline ::google::protobuf::int64 petid() const;
  inline void set_petid(::google::protobuf::int64 value);

  // optional int64 horseID = 3;
  inline bool has_horseid() const;
  inline void clear_horseid();
  static const int kHorseIDFieldNumber = 3;
  inline ::google::protobuf::int64 horseid() const;
  inline void set_horseid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CGGetPetOrHorseInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_petid();
  inline void clear_has_petid();
  inline void set_has_horseid();
  inline void clear_has_horseid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 petid_;
  ::google::protobuf::int64 horseid_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static CGGetPetOrHorseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCSendPetOrHorseInfo : public ::google::protobuf::Message {
 public:
  GCSendPetOrHorseInfo();
  virtual ~GCSendPetOrHorseInfo();

  GCSendPetOrHorseInfo(const GCSendPetOrHorseInfo& from);

  inline GCSendPetOrHorseInfo& operator=(const GCSendPetOrHorseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCSendPetOrHorseInfo& default_instance();

  void Swap(GCSendPetOrHorseInfo* other);

  // implements Message ----------------------------------------------

  GCSendPetOrHorseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCSendPetOrHorseInfo& from);
  void MergeFrom(const GCSendPetOrHorseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PetInfo petInfo = 1;
  inline bool has_petinfo() const;
  inline void clear_petinfo();
  static const int kPetInfoFieldNumber = 1;
  inline const ::PetInfo& petinfo() const;
  inline ::PetInfo* mutable_petinfo();
  inline ::PetInfo* release_petinfo();
  inline void set_allocated_petinfo(::PetInfo* petinfo);

  // optional .HorseInfo horseInfo = 2;
  inline bool has_horseinfo() const;
  inline void clear_horseinfo();
  static const int kHorseInfoFieldNumber = 2;
  inline const ::HorseInfo& horseinfo() const;
  inline ::HorseInfo* mutable_horseinfo();
  inline ::HorseInfo* release_horseinfo();
  inline void set_allocated_horseinfo(::HorseInfo* horseinfo);

  // @@protoc_insertion_point(class_scope:GCSendPetOrHorseInfo)
 private:
  inline void set_has_petinfo();
  inline void clear_has_petinfo();
  inline void set_has_horseinfo();
  inline void clear_has_horseinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PetInfo* petinfo_;
  ::HorseInfo* horseinfo_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCSendPetOrHorseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCPushWorship : public ::google::protobuf::Message {
 public:
  GCPushWorship();
  virtual ~GCPushWorship();

  GCPushWorship(const GCPushWorship& from);

  inline GCPushWorship& operator=(const GCPushWorship& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPushWorship& default_instance();

  void Swap(GCPushWorship* other);

  // implements Message ----------------------------------------------

  GCPushWorship* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPushWorship& from);
  void MergeFrom(const GCPushWorship& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCPushWorship)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPushWorship* default_instance_;
};
// -------------------------------------------------------------------

class GCRefreshRank : public ::google::protobuf::Message {
 public:
  GCRefreshRank();
  virtual ~GCRefreshRank();

  GCRefreshRank(const GCRefreshRank& from);

  inline GCRefreshRank& operator=(const GCRefreshRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCRefreshRank& default_instance();

  void Swap(GCRefreshRank* other);

  // implements Message ----------------------------------------------

  GCRefreshRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCRefreshRank& from);
  void MergeFrom(const GCRefreshRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCRefreshRank)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCRefreshRank* default_instance_;
};
// -------------------------------------------------------------------

class FightInfo : public ::google::protobuf::Message {
 public:
  FightInfo();
  virtual ~FightInfo();

  FightInfo(const FightInfo& from);

  inline FightInfo& operator=(const FightInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightInfo& default_instance();

  void Swap(FightInfo* other);

  // implements Message ----------------------------------------------

  FightInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightInfo& from);
  void MergeFrom(const FightInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string fighting = 2;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 2;
  inline const ::std::string& fighting() const;
  inline void set_fighting(const ::std::string& value);
  inline void set_fighting(const char* value);
  inline void set_fighting(const char* value, size_t size);
  inline ::std::string* mutable_fighting();
  inline ::std::string* release_fighting();
  inline void set_allocated_fighting(::std::string* fighting);

  // optional string horse = 3;
  inline bool has_horse() const;
  inline void clear_horse();
  static const int kHorseFieldNumber = 3;
  inline const ::std::string& horse() const;
  inline void set_horse(const ::std::string& value);
  inline void set_horse(const char* value);
  inline void set_horse(const char* value, size_t size);
  inline ::std::string* mutable_horse();
  inline ::std::string* release_horse();
  inline void set_allocated_horse(::std::string* horse);

  // optional int32 model = 4;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline ::google::protobuf::int32 model() const;
  inline void set_model(::google::protobuf::int32 value);

  // optional string position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional string scale = 6;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 6;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // optional string rotate = 7;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 7;
  inline const ::std::string& rotate() const;
  inline void set_rotate(const ::std::string& value);
  inline void set_rotate(const char* value);
  inline void set_rotate(const char* value, size_t size);
  inline ::std::string* mutable_rotate();
  inline ::std::string* release_rotate();
  inline void set_allocated_rotate(::std::string* rotate);

  // optional string rewards = 8;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 8;
  inline const ::std::string& rewards() const;
  inline void set_rewards(const ::std::string& value);
  inline void set_rewards(const char* value);
  inline void set_rewards(const char* value, size_t size);
  inline ::std::string* mutable_rewards();
  inline ::std::string* release_rewards();
  inline void set_allocated_rewards(::std::string* rewards);

  // @@protoc_insertion_point(class_scope:FightInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_horse();
  inline void clear_has_horse();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fighting_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 model_;
  ::std::string* horse_;
  ::std::string* position_;
  ::std::string* scale_;
  ::std::string* rotate_;
  ::std::string* rewards_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static FightInfo* default_instance_;
};
// -------------------------------------------------------------------

class LevelInfo : public ::google::protobuf::Message {
 public:
  LevelInfo();
  virtual ~LevelInfo();

  LevelInfo(const LevelInfo& from);

  inline LevelInfo& operator=(const LevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelInfo& default_instance();

  void Swap(LevelInfo* other);

  // implements Message ----------------------------------------------

  LevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelInfo& from);
  void MergeFrom(const LevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string fighting = 2;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 2;
  inline const ::std::string& fighting() const;
  inline void set_fighting(const ::std::string& value);
  inline void set_fighting(const char* value);
  inline void set_fighting(const char* value, size_t size);
  inline ::std::string* mutable_fighting();
  inline ::std::string* release_fighting();
  inline void set_allocated_fighting(::std::string* fighting);

  // optional int32 title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline ::google::protobuf::int32 title() const;
  inline void set_title(::google::protobuf::int32 value);

  // optional string position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional string scale = 5;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 5;
  inline const ::std::string& scale() const;
  inline void set_scale(const ::std::string& value);
  inline void set_scale(const char* value);
  inline void set_scale(const char* value, size_t size);
  inline ::std::string* mutable_scale();
  inline ::std::string* release_scale();
  inline void set_allocated_scale(::std::string* scale);

  // optional string rewards = 6;
  inline bool has_rewards() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 6;
  inline const ::std::string& rewards() const;
  inline void set_rewards(const ::std::string& value);
  inline void set_rewards(const char* value);
  inline void set_rewards(const char* value, size_t size);
  inline ::std::string* mutable_rewards();
  inline ::std::string* release_rewards();
  inline void set_allocated_rewards(::std::string* rewards);

  // @@protoc_insertion_point(class_scope:LevelInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rewards();
  inline void clear_has_rewards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fighting_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 title_;
  ::std::string* position_;
  ::std::string* scale_;
  ::std::string* rewards_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static LevelInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCPushOpenInfo : public ::google::protobuf::Message {
 public:
  GCPushOpenInfo();
  virtual ~GCPushOpenInfo();

  GCPushOpenInfo(const GCPushOpenInfo& from);

  inline GCPushOpenInfo& operator=(const GCPushOpenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCPushOpenInfo& default_instance();

  void Swap(GCPushOpenInfo* other);

  // implements Message ----------------------------------------------

  GCPushOpenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCPushOpenInfo& from);
  void MergeFrom(const GCPushOpenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FightInfo firstInfos = 1;
  inline int firstinfos_size() const;
  inline void clear_firstinfos();
  static const int kFirstInfosFieldNumber = 1;
  inline const ::FightInfo& firstinfos(int index) const;
  inline ::FightInfo* mutable_firstinfos(int index);
  inline ::FightInfo* add_firstinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::FightInfo >&
      firstinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::FightInfo >*
      mutable_firstinfos();

  // repeated .LevelInfo levelInfos = 2;
  inline int levelinfos_size() const;
  inline void clear_levelinfos();
  static const int kLevelInfosFieldNumber = 2;
  inline const ::LevelInfo& levelinfos(int index) const;
  inline ::LevelInfo* mutable_levelinfos(int index);
  inline ::LevelInfo* add_levelinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::LevelInfo >&
      levelinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::LevelInfo >*
      mutable_levelinfos();

  // optional int64 levelStartTime = 3;
  inline bool has_levelstarttime() const;
  inline void clear_levelstarttime();
  static const int kLevelStartTimeFieldNumber = 3;
  inline ::google::protobuf::int64 levelstarttime() const;
  inline void set_levelstarttime(::google::protobuf::int64 value);

  // optional int64 levelEndTime = 4;
  inline bool has_levelendtime() const;
  inline void clear_levelendtime();
  static const int kLevelEndTimeFieldNumber = 4;
  inline ::google::protobuf::int64 levelendtime() const;
  inline void set_levelendtime(::google::protobuf::int64 value);

  // optional int64 fightStartTime = 5;
  inline bool has_fightstarttime() const;
  inline void clear_fightstarttime();
  static const int kFightStartTimeFieldNumber = 5;
  inline ::google::protobuf::int64 fightstarttime() const;
  inline void set_fightstarttime(::google::protobuf::int64 value);

  // optional int64 fightEndTime = 6;
  inline bool has_fightendtime() const;
  inline void clear_fightendtime();
  static const int kFightEndTimeFieldNumber = 6;
  inline ::google::protobuf::int64 fightendtime() const;
  inline void set_fightendtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GCPushOpenInfo)
 private:
  inline void set_has_levelstarttime();
  inline void clear_has_levelstarttime();
  inline void set_has_levelendtime();
  inline void clear_has_levelendtime();
  inline void set_has_fightstarttime();
  inline void clear_has_fightstarttime();
  inline void set_has_fightendtime();
  inline void clear_has_fightendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::FightInfo > firstinfos_;
  ::google::protobuf::RepeatedPtrField< ::LevelInfo > levelinfos_;
  ::google::protobuf::int64 levelstarttime_;
  ::google::protobuf::int64 levelendtime_;
  ::google::protobuf::int64 fightstarttime_;
  ::google::protobuf::int64 fightendtime_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCPushOpenInfo* default_instance_;
};
// -------------------------------------------------------------------

class GCOpenRankOver : public ::google::protobuf::Message {
 public:
  GCOpenRankOver();
  virtual ~GCOpenRankOver();

  GCOpenRankOver(const GCOpenRankOver& from);

  inline GCOpenRankOver& operator=(const GCOpenRankOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCOpenRankOver& default_instance();

  void Swap(GCOpenRankOver* other);

  // implements Message ----------------------------------------------

  GCOpenRankOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCOpenRankOver& from);
  void MergeFrom(const GCOpenRankOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GCOpenRankOver)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_RankingMessage_2eproto();
  friend void protobuf_AssignDesc_RankingMessage_2eproto();
  friend void protobuf_ShutdownFile_RankingMessage_2eproto();

  void InitAsDefaultInstance();
  static GCOpenRankOver* default_instance_;
};
// ===================================================================


// ===================================================================

// RankInfo

// optional int64 playerId = 1;
inline bool RankInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 RankInfo::playerid() const {
  // @@protoc_insertion_point(field_get:RankInfo.playerId)
  return playerid_;
}
inline void RankInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.playerId)
}

// optional string playerName = 2;
inline bool RankInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& RankInfo::playername() const {
  // @@protoc_insertion_point(field_get:RankInfo.playerName)
  return *playername_;
}
inline void RankInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:RankInfo.playerName)
}
inline void RankInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:RankInfo.playerName)
}
inline void RankInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RankInfo.playerName)
}
inline ::std::string* RankInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RankInfo.playerName)
  return playername_;
}
inline ::std::string* RankInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RankInfo.playerName)
}

// optional int32 type = 3;
inline bool RankInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RankInfo::type() const {
  // @@protoc_insertion_point(field_get:RankInfo.type)
  return type_;
}
inline void RankInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.type)
}

// optional int32 rank = 4;
inline bool RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankInfo::rank() const {
  // @@protoc_insertion_point(field_get:RankInfo.rank)
  return rank_;
}
inline void RankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.rank)
}

// optional int32 battle = 5;
inline bool RankInfo::has_battle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankInfo::set_has_battle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankInfo::clear_has_battle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankInfo::clear_battle() {
  battle_ = 0;
  clear_has_battle();
}
inline ::google::protobuf::int32 RankInfo::battle() const {
  // @@protoc_insertion_point(field_get:RankInfo.battle)
  return battle_;
}
inline void RankInfo::set_battle(::google::protobuf::int32 value) {
  set_has_battle();
  battle_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.battle)
}

// optional int64 moneyNum = 6;
inline bool RankInfo::has_moneynum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankInfo::set_has_moneynum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankInfo::clear_has_moneynum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankInfo::clear_moneynum() {
  moneynum_ = GOOGLE_LONGLONG(0);
  clear_has_moneynum();
}
inline ::google::protobuf::int64 RankInfo::moneynum() const {
  // @@protoc_insertion_point(field_get:RankInfo.moneyNum)
  return moneynum_;
}
inline void RankInfo::set_moneynum(::google::protobuf::int64 value) {
  set_has_moneynum();
  moneynum_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.moneyNum)
}

// optional int32 petBattle = 7;
inline bool RankInfo::has_petbattle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankInfo::set_has_petbattle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankInfo::clear_has_petbattle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankInfo::clear_petbattle() {
  petbattle_ = 0;
  clear_has_petbattle();
}
inline ::google::protobuf::int32 RankInfo::petbattle() const {
  // @@protoc_insertion_point(field_get:RankInfo.petBattle)
  return petbattle_;
}
inline void RankInfo::set_petbattle(::google::protobuf::int32 value) {
  set_has_petbattle();
  petbattle_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.petBattle)
}

// optional int32 horseBattle = 8;
inline bool RankInfo::has_horsebattle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankInfo::set_has_horsebattle() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankInfo::clear_has_horsebattle() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankInfo::clear_horsebattle() {
  horsebattle_ = 0;
  clear_has_horsebattle();
}
inline ::google::protobuf::int32 RankInfo::horsebattle() const {
  // @@protoc_insertion_point(field_get:RankInfo.horseBattle)
  return horsebattle_;
}
inline void RankInfo::set_horsebattle(::google::protobuf::int32 value) {
  set_has_horsebattle();
  horsebattle_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.horseBattle)
}

// optional int32 arenaRank = 9;
inline bool RankInfo::has_arenarank() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankInfo::set_has_arenarank() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankInfo::clear_has_arenarank() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankInfo::clear_arenarank() {
  arenarank_ = 0;
  clear_has_arenarank();
}
inline ::google::protobuf::int32 RankInfo::arenarank() const {
  // @@protoc_insertion_point(field_get:RankInfo.arenaRank)
  return arenarank_;
}
inline void RankInfo::set_arenarank(::google::protobuf::int32 value) {
  set_has_arenarank();
  arenarank_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.arenaRank)
}

// optional int32 topTower = 10;
inline bool RankInfo::has_toptower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankInfo::set_has_toptower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankInfo::clear_has_toptower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankInfo::clear_toptower() {
  toptower_ = 0;
  clear_has_toptower();
}
inline ::google::protobuf::int32 RankInfo::toptower() const {
  // @@protoc_insertion_point(field_get:RankInfo.topTower)
  return toptower_;
}
inline void RankInfo::set_toptower(::google::protobuf::int32 value) {
  set_has_toptower();
  toptower_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.topTower)
}

// optional string outPut = 11;
inline bool RankInfo::has_output() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankInfo::set_has_output() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankInfo::clear_has_output() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankInfo::clear_output() {
  if (output_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_->clear();
  }
  clear_has_output();
}
inline const ::std::string& RankInfo::output() const {
  // @@protoc_insertion_point(field_get:RankInfo.outPut)
  return *output_;
}
inline void RankInfo::set_output(const ::std::string& value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_ = new ::std::string;
  }
  output_->assign(value);
  // @@protoc_insertion_point(field_set:RankInfo.outPut)
}
inline void RankInfo::set_output(const char* value) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_ = new ::std::string;
  }
  output_->assign(value);
  // @@protoc_insertion_point(field_set_char:RankInfo.outPut)
}
inline void RankInfo::set_output(const char* value, size_t size) {
  set_has_output();
  if (output_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_ = new ::std::string;
  }
  output_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RankInfo.outPut)
}
inline ::std::string* RankInfo::mutable_output() {
  set_has_output();
  if (output_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RankInfo.outPut)
  return output_;
}
inline ::std::string* RankInfo::release_output() {
  clear_has_output();
  if (output_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_;
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankInfo::set_allocated_output(::std::string* output) {
  if (output_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_;
  }
  if (output) {
    set_has_output();
    output_ = output;
  } else {
    clear_has_output();
    output_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RankInfo.outPut)
}

// optional int64 onlineTime = 12;
inline bool RankInfo::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RankInfo::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RankInfo::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RankInfo::clear_onlinetime() {
  onlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_onlinetime();
}
inline ::google::protobuf::int64 RankInfo::onlinetime() const {
  // @@protoc_insertion_point(field_get:RankInfo.onlineTime)
  return onlinetime_;
}
inline void RankInfo::set_onlinetime(::google::protobuf::int64 value) {
  set_has_onlinetime();
  onlinetime_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.onlineTime)
}

// optional int32 gangBattle = 13;
inline bool RankInfo::has_gangbattle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RankInfo::set_has_gangbattle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RankInfo::clear_has_gangbattle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RankInfo::clear_gangbattle() {
  gangbattle_ = 0;
  clear_has_gangbattle();
}
inline ::google::protobuf::int32 RankInfo::gangbattle() const {
  // @@protoc_insertion_point(field_get:RankInfo.gangBattle)
  return gangbattle_;
}
inline void RankInfo::set_gangbattle(::google::protobuf::int32 value) {
  set_has_gangbattle();
  gangbattle_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.gangBattle)
}

// optional int64 petID = 14;
inline bool RankInfo::has_petid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RankInfo::set_has_petid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RankInfo::clear_has_petid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RankInfo::clear_petid() {
  petid_ = GOOGLE_LONGLONG(0);
  clear_has_petid();
}
inline ::google::protobuf::int64 RankInfo::petid() const {
  // @@protoc_insertion_point(field_get:RankInfo.petID)
  return petid_;
}
inline void RankInfo::set_petid(::google::protobuf::int64 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.petID)
}

// optional int64 horseID = 15;
inline bool RankInfo::has_horseid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RankInfo::set_has_horseid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RankInfo::clear_has_horseid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RankInfo::clear_horseid() {
  horseid_ = GOOGLE_LONGLONG(0);
  clear_has_horseid();
}
inline ::google::protobuf::int64 RankInfo::horseid() const {
  // @@protoc_insertion_point(field_get:RankInfo.horseID)
  return horseid_;
}
inline void RankInfo::set_horseid(::google::protobuf::int64 value) {
  set_has_horseid();
  horseid_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.horseID)
}

// optional int64 worship = 16;
inline bool RankInfo::has_worship() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RankInfo::set_has_worship() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RankInfo::clear_has_worship() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RankInfo::clear_worship() {
  worship_ = GOOGLE_LONGLONG(0);
  clear_has_worship();
}
inline ::google::protobuf::int64 RankInfo::worship() const {
  // @@protoc_insertion_point(field_get:RankInfo.worship)
  return worship_;
}
inline void RankInfo::set_worship(::google::protobuf::int64 value) {
  set_has_worship();
  worship_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.worship)
}

// optional int32 level = 17;
inline bool RankInfo::has_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RankInfo::set_has_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RankInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RankInfo::level() const {
  // @@protoc_insertion_point(field_get:RankInfo.level)
  return level_;
}
inline void RankInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.level)
}

// optional int32 winNum = 18;
inline bool RankInfo::has_winnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RankInfo::set_has_winnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RankInfo::clear_has_winnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RankInfo::clear_winnum() {
  winnum_ = 0;
  clear_has_winnum();
}
inline ::google::protobuf::int32 RankInfo::winnum() const {
  // @@protoc_insertion_point(field_get:RankInfo.winNum)
  return winnum_;
}
inline void RankInfo::set_winnum(::google::protobuf::int32 value) {
  set_has_winnum();
  winnum_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.winNum)
}

// optional int64 gangID = 19;
inline bool RankInfo::has_gangid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RankInfo::set_has_gangid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RankInfo::clear_has_gangid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RankInfo::clear_gangid() {
  gangid_ = GOOGLE_LONGLONG(0);
  clear_has_gangid();
}
inline ::google::protobuf::int64 RankInfo::gangid() const {
  // @@protoc_insertion_point(field_get:RankInfo.gangID)
  return gangid_;
}
inline void RankInfo::set_gangid(::google::protobuf::int64 value) {
  set_has_gangid();
  gangid_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.gangID)
}

// optional int32 isWorship = 20;
inline bool RankInfo::has_isworship() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RankInfo::set_has_isworship() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RankInfo::clear_has_isworship() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RankInfo::clear_isworship() {
  isworship_ = 0;
  clear_has_isworship();
}
inline ::google::protobuf::int32 RankInfo::isworship() const {
  // @@protoc_insertion_point(field_get:RankInfo.isWorship)
  return isworship_;
}
inline void RankInfo::set_isworship(::google::protobuf::int32 value) {
  set_has_isworship();
  isworship_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.isWorship)
}

// optional int32 vip = 21;
inline bool RankInfo::has_vip() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RankInfo::set_has_vip() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RankInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RankInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 RankInfo::vip() const {
  // @@protoc_insertion_point(field_get:RankInfo.vip)
  return vip_;
}
inline void RankInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.vip)
}

// optional int32 killPlayers = 22;
inline bool RankInfo::has_killplayers() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RankInfo::set_has_killplayers() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RankInfo::clear_has_killplayers() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RankInfo::clear_killplayers() {
  killplayers_ = 0;
  clear_has_killplayers();
}
inline ::google::protobuf::int32 RankInfo::killplayers() const {
  // @@protoc_insertion_point(field_get:RankInfo.killPlayers)
  return killplayers_;
}
inline void RankInfo::set_killplayers(::google::protobuf::int32 value) {
  set_has_killplayers();
  killplayers_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.killPlayers)
}

// optional int32 killValue = 23;
inline bool RankInfo::has_killvalue() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RankInfo::set_has_killvalue() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RankInfo::clear_has_killvalue() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RankInfo::clear_killvalue() {
  killvalue_ = 0;
  clear_has_killvalue();
}
inline ::google::protobuf::int32 RankInfo::killvalue() const {
  // @@protoc_insertion_point(field_get:RankInfo.killValue)
  return killvalue_;
}
inline void RankInfo::set_killvalue(::google::protobuf::int32 value) {
  set_has_killvalue();
  killvalue_ = value;
  // @@protoc_insertion_point(field_set:RankInfo.killValue)
}

// -------------------------------------------------------------------

// CGGetRankByType

// optional int32 type = 1;
inline bool CGGetRankByType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetRankByType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetRankByType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetRankByType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGGetRankByType::type() const {
  // @@protoc_insertion_point(field_get:CGGetRankByType.type)
  return type_;
}
inline void CGGetRankByType::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGGetRankByType.type)
}

// -------------------------------------------------------------------

// GCPushRankInfo

// repeated .RankInfo rankInfo = 1;
inline int GCPushRankInfo::rankinfo_size() const {
  return rankinfo_.size();
}
inline void GCPushRankInfo::clear_rankinfo() {
  rankinfo_.Clear();
}
inline const ::RankInfo& GCPushRankInfo::rankinfo(int index) const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.rankInfo)
  return rankinfo_.Get(index);
}
inline ::RankInfo* GCPushRankInfo::mutable_rankinfo(int index) {
  // @@protoc_insertion_point(field_mutable:GCPushRankInfo.rankInfo)
  return rankinfo_.Mutable(index);
}
inline ::RankInfo* GCPushRankInfo::add_rankinfo() {
  // @@protoc_insertion_point(field_add:GCPushRankInfo.rankInfo)
  return rankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RankInfo >&
GCPushRankInfo::rankinfo() const {
  // @@protoc_insertion_point(field_list:GCPushRankInfo.rankInfo)
  return rankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::RankInfo >*
GCPushRankInfo::mutable_rankinfo() {
  // @@protoc_insertion_point(field_mutable_list:GCPushRankInfo.rankInfo)
  return &rankinfo_;
}

// optional int32 type = 2;
inline bool GCPushRankInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCPushRankInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCPushRankInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCPushRankInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCPushRankInfo::type() const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.type)
  return type_;
}
inline void GCPushRankInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCPushRankInfo.type)
}

// optional int32 num = 3;
inline bool GCPushRankInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCPushRankInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCPushRankInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCPushRankInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GCPushRankInfo::num() const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.num)
  return num_;
}
inline void GCPushRankInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:GCPushRankInfo.num)
}

// optional .CharacterInfo firstInfo = 4;
inline bool GCPushRankInfo::has_firstinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCPushRankInfo::set_has_firstinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCPushRankInfo::clear_has_firstinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCPushRankInfo::clear_firstinfo() {
  if (firstinfo_ != NULL) firstinfo_->::CharacterInfo::Clear();
  clear_has_firstinfo();
}
inline const ::CharacterInfo& GCPushRankInfo::firstinfo() const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.firstInfo)
  return firstinfo_ != NULL ? *firstinfo_ : *default_instance_->firstinfo_;
}
inline ::CharacterInfo* GCPushRankInfo::mutable_firstinfo() {
  set_has_firstinfo();
  if (firstinfo_ == NULL) firstinfo_ = new ::CharacterInfo;
  // @@protoc_insertion_point(field_mutable:GCPushRankInfo.firstInfo)
  return firstinfo_;
}
inline ::CharacterInfo* GCPushRankInfo::release_firstinfo() {
  clear_has_firstinfo();
  ::CharacterInfo* temp = firstinfo_;
  firstinfo_ = NULL;
  return temp;
}
inline void GCPushRankInfo::set_allocated_firstinfo(::CharacterInfo* firstinfo) {
  delete firstinfo_;
  firstinfo_ = firstinfo;
  if (firstinfo) {
    set_has_firstinfo();
  } else {
    clear_has_firstinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCPushRankInfo.firstInfo)
}

// optional .PetInfo petInfo = 5;
inline bool GCPushRankInfo::has_petinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCPushRankInfo::set_has_petinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCPushRankInfo::clear_has_petinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCPushRankInfo::clear_petinfo() {
  if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
  clear_has_petinfo();
}
inline const ::PetInfo& GCPushRankInfo::petinfo() const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.petInfo)
  return petinfo_ != NULL ? *petinfo_ : *default_instance_->petinfo_;
}
inline ::PetInfo* GCPushRankInfo::mutable_petinfo() {
  set_has_petinfo();
  if (petinfo_ == NULL) petinfo_ = new ::PetInfo;
  // @@protoc_insertion_point(field_mutable:GCPushRankInfo.petInfo)
  return petinfo_;
}
inline ::PetInfo* GCPushRankInfo::release_petinfo() {
  clear_has_petinfo();
  ::PetInfo* temp = petinfo_;
  petinfo_ = NULL;
  return temp;
}
inline void GCPushRankInfo::set_allocated_petinfo(::PetInfo* petinfo) {
  delete petinfo_;
  petinfo_ = petinfo;
  if (petinfo) {
    set_has_petinfo();
  } else {
    clear_has_petinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCPushRankInfo.petInfo)
}

// optional .HorseInfo horseInfo = 6;
inline bool GCPushRankInfo::has_horseinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCPushRankInfo::set_has_horseinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCPushRankInfo::clear_has_horseinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCPushRankInfo::clear_horseinfo() {
  if (horseinfo_ != NULL) horseinfo_->::HorseInfo::Clear();
  clear_has_horseinfo();
}
inline const ::HorseInfo& GCPushRankInfo::horseinfo() const {
  // @@protoc_insertion_point(field_get:GCPushRankInfo.horseInfo)
  return horseinfo_ != NULL ? *horseinfo_ : *default_instance_->horseinfo_;
}
inline ::HorseInfo* GCPushRankInfo::mutable_horseinfo() {
  set_has_horseinfo();
  if (horseinfo_ == NULL) horseinfo_ = new ::HorseInfo;
  // @@protoc_insertion_point(field_mutable:GCPushRankInfo.horseInfo)
  return horseinfo_;
}
inline ::HorseInfo* GCPushRankInfo::release_horseinfo() {
  clear_has_horseinfo();
  ::HorseInfo* temp = horseinfo_;
  horseinfo_ = NULL;
  return temp;
}
inline void GCPushRankInfo::set_allocated_horseinfo(::HorseInfo* horseinfo) {
  delete horseinfo_;
  horseinfo_ = horseinfo;
  if (horseinfo) {
    set_has_horseinfo();
  } else {
    clear_has_horseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCPushRankInfo.horseInfo)
}

// -------------------------------------------------------------------

// CGRankWorship

// optional int64 playerID = 1;
inline bool CGRankWorship::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGRankWorship::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGRankWorship::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGRankWorship::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGRankWorship::playerid() const {
  // @@protoc_insertion_point(field_get:CGRankWorship.playerID)
  return playerid_;
}
inline void CGRankWorship::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGRankWorship.playerID)
}

// optional int32 type = 2;
inline bool CGRankWorship::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGRankWorship::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGRankWorship::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGRankWorship::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CGRankWorship::type() const {
  // @@protoc_insertion_point(field_get:CGRankWorship.type)
  return type_;
}
inline void CGRankWorship::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CGRankWorship.type)
}

// -------------------------------------------------------------------

// GCRankWrshipBack

// optional int64 playerID = 1;
inline bool GCRankWrshipBack::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCRankWrshipBack::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCRankWrshipBack::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCRankWrshipBack::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GCRankWrshipBack::playerid() const {
  // @@protoc_insertion_point(field_get:GCRankWrshipBack.playerID)
  return playerid_;
}
inline void GCRankWrshipBack::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GCRankWrshipBack.playerID)
}

// optional int64 worship = 2;
inline bool GCRankWrshipBack::has_worship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCRankWrshipBack::set_has_worship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCRankWrshipBack::clear_has_worship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCRankWrshipBack::clear_worship() {
  worship_ = GOOGLE_LONGLONG(0);
  clear_has_worship();
}
inline ::google::protobuf::int64 GCRankWrshipBack::worship() const {
  // @@protoc_insertion_point(field_get:GCRankWrshipBack.worship)
  return worship_;
}
inline void GCRankWrshipBack::set_worship(::google::protobuf::int64 value) {
  set_has_worship();
  worship_ = value;
  // @@protoc_insertion_point(field_set:GCRankWrshipBack.worship)
}

// optional int32 type = 3;
inline bool GCRankWrshipBack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCRankWrshipBack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCRankWrshipBack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCRankWrshipBack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCRankWrshipBack::type() const {
  // @@protoc_insertion_point(field_get:GCRankWrshipBack.type)
  return type_;
}
inline void GCRankWrshipBack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCRankWrshipBack.type)
}

// optional int32 num = 4;
inline bool GCRankWrshipBack::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCRankWrshipBack::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCRankWrshipBack::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCRankWrshipBack::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GCRankWrshipBack::num() const {
  // @@protoc_insertion_point(field_get:GCRankWrshipBack.num)
  return num_;
}
inline void GCRankWrshipBack::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:GCRankWrshipBack.num)
}

// optional int32 result = 5;
inline bool GCRankWrshipBack::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCRankWrshipBack::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCRankWrshipBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCRankWrshipBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GCRankWrshipBack::result() const {
  // @@protoc_insertion_point(field_get:GCRankWrshipBack.result)
  return result_;
}
inline void GCRankWrshipBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:GCRankWrshipBack.result)
}

// -------------------------------------------------------------------

// CGGetPetOrHorseInfo

// optional int64 playerID = 1;
inline bool CGGetPetOrHorseInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGGetPetOrHorseInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGGetPetOrHorseInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGGetPetOrHorseInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 CGGetPetOrHorseInfo::playerid() const {
  // @@protoc_insertion_point(field_get:CGGetPetOrHorseInfo.playerID)
  return playerid_;
}
inline void CGGetPetOrHorseInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:CGGetPetOrHorseInfo.playerID)
}

// optional int64 petID = 2;
inline bool CGGetPetOrHorseInfo::has_petid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGGetPetOrHorseInfo::set_has_petid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGGetPetOrHorseInfo::clear_has_petid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGGetPetOrHorseInfo::clear_petid() {
  petid_ = GOOGLE_LONGLONG(0);
  clear_has_petid();
}
inline ::google::protobuf::int64 CGGetPetOrHorseInfo::petid() const {
  // @@protoc_insertion_point(field_get:CGGetPetOrHorseInfo.petID)
  return petid_;
}
inline void CGGetPetOrHorseInfo::set_petid(::google::protobuf::int64 value) {
  set_has_petid();
  petid_ = value;
  // @@protoc_insertion_point(field_set:CGGetPetOrHorseInfo.petID)
}

// optional int64 horseID = 3;
inline bool CGGetPetOrHorseInfo::has_horseid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGGetPetOrHorseInfo::set_has_horseid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGGetPetOrHorseInfo::clear_has_horseid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGGetPetOrHorseInfo::clear_horseid() {
  horseid_ = GOOGLE_LONGLONG(0);
  clear_has_horseid();
}
inline ::google::protobuf::int64 CGGetPetOrHorseInfo::horseid() const {
  // @@protoc_insertion_point(field_get:CGGetPetOrHorseInfo.horseID)
  return horseid_;
}
inline void CGGetPetOrHorseInfo::set_horseid(::google::protobuf::int64 value) {
  set_has_horseid();
  horseid_ = value;
  // @@protoc_insertion_point(field_set:CGGetPetOrHorseInfo.horseID)
}

// -------------------------------------------------------------------

// GCSendPetOrHorseInfo

// optional .PetInfo petInfo = 1;
inline bool GCSendPetOrHorseInfo::has_petinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCSendPetOrHorseInfo::set_has_petinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCSendPetOrHorseInfo::clear_has_petinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCSendPetOrHorseInfo::clear_petinfo() {
  if (petinfo_ != NULL) petinfo_->::PetInfo::Clear();
  clear_has_petinfo();
}
inline const ::PetInfo& GCSendPetOrHorseInfo::petinfo() const {
  // @@protoc_insertion_point(field_get:GCSendPetOrHorseInfo.petInfo)
  return petinfo_ != NULL ? *petinfo_ : *default_instance_->petinfo_;
}
inline ::PetInfo* GCSendPetOrHorseInfo::mutable_petinfo() {
  set_has_petinfo();
  if (petinfo_ == NULL) petinfo_ = new ::PetInfo;
  // @@protoc_insertion_point(field_mutable:GCSendPetOrHorseInfo.petInfo)
  return petinfo_;
}
inline ::PetInfo* GCSendPetOrHorseInfo::release_petinfo() {
  clear_has_petinfo();
  ::PetInfo* temp = petinfo_;
  petinfo_ = NULL;
  return temp;
}
inline void GCSendPetOrHorseInfo::set_allocated_petinfo(::PetInfo* petinfo) {
  delete petinfo_;
  petinfo_ = petinfo;
  if (petinfo) {
    set_has_petinfo();
  } else {
    clear_has_petinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCSendPetOrHorseInfo.petInfo)
}

// optional .HorseInfo horseInfo = 2;
inline bool GCSendPetOrHorseInfo::has_horseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCSendPetOrHorseInfo::set_has_horseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCSendPetOrHorseInfo::clear_has_horseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCSendPetOrHorseInfo::clear_horseinfo() {
  if (horseinfo_ != NULL) horseinfo_->::HorseInfo::Clear();
  clear_has_horseinfo();
}
inline const ::HorseInfo& GCSendPetOrHorseInfo::horseinfo() const {
  // @@protoc_insertion_point(field_get:GCSendPetOrHorseInfo.horseInfo)
  return horseinfo_ != NULL ? *horseinfo_ : *default_instance_->horseinfo_;
}
inline ::HorseInfo* GCSendPetOrHorseInfo::mutable_horseinfo() {
  set_has_horseinfo();
  if (horseinfo_ == NULL) horseinfo_ = new ::HorseInfo;
  // @@protoc_insertion_point(field_mutable:GCSendPetOrHorseInfo.horseInfo)
  return horseinfo_;
}
inline ::HorseInfo* GCSendPetOrHorseInfo::release_horseinfo() {
  clear_has_horseinfo();
  ::HorseInfo* temp = horseinfo_;
  horseinfo_ = NULL;
  return temp;
}
inline void GCSendPetOrHorseInfo::set_allocated_horseinfo(::HorseInfo* horseinfo) {
  delete horseinfo_;
  horseinfo_ = horseinfo;
  if (horseinfo) {
    set_has_horseinfo();
  } else {
    clear_has_horseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:GCSendPetOrHorseInfo.horseInfo)
}

// -------------------------------------------------------------------

// GCPushWorship

// optional int32 num = 1;
inline bool GCPushWorship::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCPushWorship::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCPushWorship::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCPushWorship::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GCPushWorship::num() const {
  // @@protoc_insertion_point(field_get:GCPushWorship.num)
  return num_;
}
inline void GCPushWorship::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:GCPushWorship.num)
}

// -------------------------------------------------------------------

// GCRefreshRank

// optional int32 type = 1;
inline bool GCRefreshRank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCRefreshRank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCRefreshRank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCRefreshRank::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCRefreshRank::type() const {
  // @@protoc_insertion_point(field_get:GCRefreshRank.type)
  return type_;
}
inline void GCRefreshRank::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCRefreshRank.type)
}

// -------------------------------------------------------------------

// FightInfo

// optional int32 id = 1;
inline bool FightInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FightInfo::id() const {
  // @@protoc_insertion_point(field_get:FightInfo.id)
  return id_;
}
inline void FightInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:FightInfo.id)
}

// optional string fighting = 2;
inline bool FightInfo::has_fighting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightInfo::set_has_fighting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightInfo::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightInfo::clear_fighting() {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_->clear();
  }
  clear_has_fighting();
}
inline const ::std::string& FightInfo::fighting() const {
  // @@protoc_insertion_point(field_get:FightInfo.fighting)
  return *fighting_;
}
inline void FightInfo::set_fighting(const ::std::string& value) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.fighting)
}
inline void FightInfo::set_fighting(const char* value) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.fighting)
}
inline void FightInfo::set_fighting(const char* value, size_t size) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.fighting)
}
inline ::std::string* FightInfo::mutable_fighting() {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.fighting)
  return fighting_;
}
inline ::std::string* FightInfo::release_fighting() {
  clear_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fighting_;
    fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_fighting(::std::string* fighting) {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fighting_;
  }
  if (fighting) {
    set_has_fighting();
    fighting_ = fighting;
  } else {
    clear_has_fighting();
    fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.fighting)
}

// optional string horse = 3;
inline bool FightInfo::has_horse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightInfo::set_has_horse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightInfo::clear_has_horse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightInfo::clear_horse() {
  if (horse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horse_->clear();
  }
  clear_has_horse();
}
inline const ::std::string& FightInfo::horse() const {
  // @@protoc_insertion_point(field_get:FightInfo.horse)
  return *horse_;
}
inline void FightInfo::set_horse(const ::std::string& value) {
  set_has_horse();
  if (horse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horse_ = new ::std::string;
  }
  horse_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.horse)
}
inline void FightInfo::set_horse(const char* value) {
  set_has_horse();
  if (horse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horse_ = new ::std::string;
  }
  horse_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.horse)
}
inline void FightInfo::set_horse(const char* value, size_t size) {
  set_has_horse();
  if (horse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horse_ = new ::std::string;
  }
  horse_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.horse)
}
inline ::std::string* FightInfo::mutable_horse() {
  set_has_horse();
  if (horse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    horse_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.horse)
  return horse_;
}
inline ::std::string* FightInfo::release_horse() {
  clear_has_horse();
  if (horse_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = horse_;
    horse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_horse(::std::string* horse) {
  if (horse_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete horse_;
  }
  if (horse) {
    set_has_horse();
    horse_ = horse;
  } else {
    clear_has_horse();
    horse_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.horse)
}

// optional int32 model = 4;
inline bool FightInfo::has_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightInfo::set_has_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightInfo::clear_model() {
  model_ = 0;
  clear_has_model();
}
inline ::google::protobuf::int32 FightInfo::model() const {
  // @@protoc_insertion_point(field_get:FightInfo.model)
  return model_;
}
inline void FightInfo::set_model(::google::protobuf::int32 value) {
  set_has_model();
  model_ = value;
  // @@protoc_insertion_point(field_set:FightInfo.model)
}

// optional string position = 5;
inline bool FightInfo::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightInfo::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightInfo::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& FightInfo::position() const {
  // @@protoc_insertion_point(field_get:FightInfo.position)
  return *position_;
}
inline void FightInfo::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.position)
}
inline void FightInfo::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.position)
}
inline void FightInfo::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.position)
}
inline ::std::string* FightInfo::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.position)
  return position_;
}
inline ::std::string* FightInfo::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.position)
}

// optional string scale = 6;
inline bool FightInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightInfo::clear_scale() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& FightInfo::scale() const {
  // @@protoc_insertion_point(field_get:FightInfo.scale)
  return *scale_;
}
inline void FightInfo::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.scale)
}
inline void FightInfo::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.scale)
}
inline void FightInfo::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.scale)
}
inline ::std::string* FightInfo::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.scale)
  return scale_;
}
inline ::std::string* FightInfo::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.scale)
}

// optional string rotate = 7;
inline bool FightInfo::has_rotate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightInfo::set_has_rotate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightInfo::clear_has_rotate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightInfo::clear_rotate() {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_->clear();
  }
  clear_has_rotate();
}
inline const ::std::string& FightInfo::rotate() const {
  // @@protoc_insertion_point(field_get:FightInfo.rotate)
  return *rotate_;
}
inline void FightInfo::set_rotate(const ::std::string& value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.rotate)
}
inline void FightInfo::set_rotate(const char* value) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.rotate)
}
inline void FightInfo::set_rotate(const char* value, size_t size) {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  rotate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.rotate)
}
inline ::std::string* FightInfo::mutable_rotate() {
  set_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rotate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.rotate)
  return rotate_;
}
inline ::std::string* FightInfo::release_rotate() {
  clear_has_rotate();
  if (rotate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rotate_;
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_rotate(::std::string* rotate) {
  if (rotate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotate_;
  }
  if (rotate) {
    set_has_rotate();
    rotate_ = rotate;
  } else {
    clear_has_rotate();
    rotate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.rotate)
}

// optional string rewards = 8;
inline bool FightInfo::has_rewards() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FightInfo::set_has_rewards() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FightInfo::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FightInfo::clear_rewards() {
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_->clear();
  }
  clear_has_rewards();
}
inline const ::std::string& FightInfo::rewards() const {
  // @@protoc_insertion_point(field_get:FightInfo.rewards)
  return *rewards_;
}
inline void FightInfo::set_rewards(const ::std::string& value) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(value);
  // @@protoc_insertion_point(field_set:FightInfo.rewards)
}
inline void FightInfo::set_rewards(const char* value) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(value);
  // @@protoc_insertion_point(field_set_char:FightInfo.rewards)
}
inline void FightInfo::set_rewards(const char* value, size_t size) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FightInfo.rewards)
}
inline ::std::string* FightInfo::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:FightInfo.rewards)
  return rewards_;
}
inline ::std::string* FightInfo::release_rewards() {
  clear_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewards_;
    rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightInfo::set_allocated_rewards(::std::string* rewards) {
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewards_;
  }
  if (rewards) {
    set_has_rewards();
    rewards_ = rewards;
  } else {
    clear_has_rewards();
    rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:FightInfo.rewards)
}

// -------------------------------------------------------------------

// LevelInfo

// optional int32 id = 1;
inline bool LevelInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LevelInfo::id() const {
  // @@protoc_insertion_point(field_get:LevelInfo.id)
  return id_;
}
inline void LevelInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LevelInfo.id)
}

// optional string fighting = 2;
inline bool LevelInfo::has_fighting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelInfo::set_has_fighting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelInfo::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelInfo::clear_fighting() {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_->clear();
  }
  clear_has_fighting();
}
inline const ::std::string& LevelInfo::fighting() const {
  // @@protoc_insertion_point(field_get:LevelInfo.fighting)
  return *fighting_;
}
inline void LevelInfo::set_fighting(const ::std::string& value) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(value);
  // @@protoc_insertion_point(field_set:LevelInfo.fighting)
}
inline void LevelInfo::set_fighting(const char* value) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(value);
  // @@protoc_insertion_point(field_set_char:LevelInfo.fighting)
}
inline void LevelInfo::set_fighting(const char* value, size_t size) {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  fighting_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LevelInfo.fighting)
}
inline ::std::string* LevelInfo::mutable_fighting() {
  set_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fighting_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LevelInfo.fighting)
  return fighting_;
}
inline ::std::string* LevelInfo::release_fighting() {
  clear_has_fighting();
  if (fighting_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fighting_;
    fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelInfo::set_allocated_fighting(::std::string* fighting) {
  if (fighting_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fighting_;
  }
  if (fighting) {
    set_has_fighting();
    fighting_ = fighting;
  } else {
    clear_has_fighting();
    fighting_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LevelInfo.fighting)
}

// optional int32 title = 3;
inline bool LevelInfo::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelInfo::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelInfo::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 LevelInfo::title() const {
  // @@protoc_insertion_point(field_get:LevelInfo.title)
  return title_;
}
inline void LevelInfo::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:LevelInfo.title)
}

// optional string position = 4;
inline bool LevelInfo::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelInfo::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelInfo::clear_position() {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_->clear();
  }
  clear_has_position();
}
inline const ::std::string& LevelInfo::position() const {
  // @@protoc_insertion_point(field_get:LevelInfo.position)
  return *position_;
}
inline void LevelInfo::set_position(const ::std::string& value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set:LevelInfo.position)
}
inline void LevelInfo::set_position(const char* value) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(value);
  // @@protoc_insertion_point(field_set_char:LevelInfo.position)
}
inline void LevelInfo::set_position(const char* value, size_t size) {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LevelInfo.position)
}
inline ::std::string* LevelInfo::mutable_position() {
  set_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    position_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LevelInfo.position)
  return position_;
}
inline ::std::string* LevelInfo::release_position() {
  clear_has_position();
  if (position_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = position_;
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelInfo::set_allocated_position(::std::string* position) {
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (position) {
    set_has_position();
    position_ = position;
  } else {
    clear_has_position();
    position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LevelInfo.position)
}

// optional string scale = 5;
inline bool LevelInfo::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelInfo::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelInfo::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelInfo::clear_scale() {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_->clear();
  }
  clear_has_scale();
}
inline const ::std::string& LevelInfo::scale() const {
  // @@protoc_insertion_point(field_get:LevelInfo.scale)
  return *scale_;
}
inline void LevelInfo::set_scale(const ::std::string& value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set:LevelInfo.scale)
}
inline void LevelInfo::set_scale(const char* value) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(value);
  // @@protoc_insertion_point(field_set_char:LevelInfo.scale)
}
inline void LevelInfo::set_scale(const char* value, size_t size) {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  scale_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LevelInfo.scale)
}
inline ::std::string* LevelInfo::mutable_scale() {
  set_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scale_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LevelInfo.scale)
  return scale_;
}
inline ::std::string* LevelInfo::release_scale() {
  clear_has_scale();
  if (scale_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scale_;
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelInfo::set_allocated_scale(::std::string* scale) {
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (scale) {
    set_has_scale();
    scale_ = scale;
  } else {
    clear_has_scale();
    scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LevelInfo.scale)
}

// optional string rewards = 6;
inline bool LevelInfo::has_rewards() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelInfo::set_has_rewards() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelInfo::clear_has_rewards() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelInfo::clear_rewards() {
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_->clear();
  }
  clear_has_rewards();
}
inline const ::std::string& LevelInfo::rewards() const {
  // @@protoc_insertion_point(field_get:LevelInfo.rewards)
  return *rewards_;
}
inline void LevelInfo::set_rewards(const ::std::string& value) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(value);
  // @@protoc_insertion_point(field_set:LevelInfo.rewards)
}
inline void LevelInfo::set_rewards(const char* value) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(value);
  // @@protoc_insertion_point(field_set_char:LevelInfo.rewards)
}
inline void LevelInfo::set_rewards(const char* value, size_t size) {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  rewards_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LevelInfo.rewards)
}
inline ::std::string* LevelInfo::mutable_rewards() {
  set_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rewards_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LevelInfo.rewards)
  return rewards_;
}
inline ::std::string* LevelInfo::release_rewards() {
  clear_has_rewards();
  if (rewards_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rewards_;
    rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LevelInfo::set_allocated_rewards(::std::string* rewards) {
  if (rewards_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewards_;
  }
  if (rewards) {
    set_has_rewards();
    rewards_ = rewards;
  } else {
    clear_has_rewards();
    rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LevelInfo.rewards)
}

// -------------------------------------------------------------------

// GCPushOpenInfo

// repeated .FightInfo firstInfos = 1;
inline int GCPushOpenInfo::firstinfos_size() const {
  return firstinfos_.size();
}
inline void GCPushOpenInfo::clear_firstinfos() {
  firstinfos_.Clear();
}
inline const ::FightInfo& GCPushOpenInfo::firstinfos(int index) const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.firstInfos)
  return firstinfos_.Get(index);
}
inline ::FightInfo* GCPushOpenInfo::mutable_firstinfos(int index) {
  // @@protoc_insertion_point(field_mutable:GCPushOpenInfo.firstInfos)
  return firstinfos_.Mutable(index);
}
inline ::FightInfo* GCPushOpenInfo::add_firstinfos() {
  // @@protoc_insertion_point(field_add:GCPushOpenInfo.firstInfos)
  return firstinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FightInfo >&
GCPushOpenInfo::firstinfos() const {
  // @@protoc_insertion_point(field_list:GCPushOpenInfo.firstInfos)
  return firstinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::FightInfo >*
GCPushOpenInfo::mutable_firstinfos() {
  // @@protoc_insertion_point(field_mutable_list:GCPushOpenInfo.firstInfos)
  return &firstinfos_;
}

// repeated .LevelInfo levelInfos = 2;
inline int GCPushOpenInfo::levelinfos_size() const {
  return levelinfos_.size();
}
inline void GCPushOpenInfo::clear_levelinfos() {
  levelinfos_.Clear();
}
inline const ::LevelInfo& GCPushOpenInfo::levelinfos(int index) const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.levelInfos)
  return levelinfos_.Get(index);
}
inline ::LevelInfo* GCPushOpenInfo::mutable_levelinfos(int index) {
  // @@protoc_insertion_point(field_mutable:GCPushOpenInfo.levelInfos)
  return levelinfos_.Mutable(index);
}
inline ::LevelInfo* GCPushOpenInfo::add_levelinfos() {
  // @@protoc_insertion_point(field_add:GCPushOpenInfo.levelInfos)
  return levelinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LevelInfo >&
GCPushOpenInfo::levelinfos() const {
  // @@protoc_insertion_point(field_list:GCPushOpenInfo.levelInfos)
  return levelinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::LevelInfo >*
GCPushOpenInfo::mutable_levelinfos() {
  // @@protoc_insertion_point(field_mutable_list:GCPushOpenInfo.levelInfos)
  return &levelinfos_;
}

// optional int64 levelStartTime = 3;
inline bool GCPushOpenInfo::has_levelstarttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GCPushOpenInfo::set_has_levelstarttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GCPushOpenInfo::clear_has_levelstarttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GCPushOpenInfo::clear_levelstarttime() {
  levelstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_levelstarttime();
}
inline ::google::protobuf::int64 GCPushOpenInfo::levelstarttime() const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.levelStartTime)
  return levelstarttime_;
}
inline void GCPushOpenInfo::set_levelstarttime(::google::protobuf::int64 value) {
  set_has_levelstarttime();
  levelstarttime_ = value;
  // @@protoc_insertion_point(field_set:GCPushOpenInfo.levelStartTime)
}

// optional int64 levelEndTime = 4;
inline bool GCPushOpenInfo::has_levelendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GCPushOpenInfo::set_has_levelendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GCPushOpenInfo::clear_has_levelendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GCPushOpenInfo::clear_levelendtime() {
  levelendtime_ = GOOGLE_LONGLONG(0);
  clear_has_levelendtime();
}
inline ::google::protobuf::int64 GCPushOpenInfo::levelendtime() const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.levelEndTime)
  return levelendtime_;
}
inline void GCPushOpenInfo::set_levelendtime(::google::protobuf::int64 value) {
  set_has_levelendtime();
  levelendtime_ = value;
  // @@protoc_insertion_point(field_set:GCPushOpenInfo.levelEndTime)
}

// optional int64 fightStartTime = 5;
inline bool GCPushOpenInfo::has_fightstarttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GCPushOpenInfo::set_has_fightstarttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GCPushOpenInfo::clear_has_fightstarttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GCPushOpenInfo::clear_fightstarttime() {
  fightstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_fightstarttime();
}
inline ::google::protobuf::int64 GCPushOpenInfo::fightstarttime() const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.fightStartTime)
  return fightstarttime_;
}
inline void GCPushOpenInfo::set_fightstarttime(::google::protobuf::int64 value) {
  set_has_fightstarttime();
  fightstarttime_ = value;
  // @@protoc_insertion_point(field_set:GCPushOpenInfo.fightStartTime)
}

// optional int64 fightEndTime = 6;
inline bool GCPushOpenInfo::has_fightendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GCPushOpenInfo::set_has_fightendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GCPushOpenInfo::clear_has_fightendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GCPushOpenInfo::clear_fightendtime() {
  fightendtime_ = GOOGLE_LONGLONG(0);
  clear_has_fightendtime();
}
inline ::google::protobuf::int64 GCPushOpenInfo::fightendtime() const {
  // @@protoc_insertion_point(field_get:GCPushOpenInfo.fightEndTime)
  return fightendtime_;
}
inline void GCPushOpenInfo::set_fightendtime(::google::protobuf::int64 value) {
  set_has_fightendtime();
  fightendtime_ = value;
  // @@protoc_insertion_point(field_set:GCPushOpenInfo.fightEndTime)
}

// -------------------------------------------------------------------

// GCOpenRankOver

// optional int32 type = 1;
inline bool GCOpenRankOver::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCOpenRankOver::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCOpenRankOver::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCOpenRankOver::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GCOpenRankOver::type() const {
  // @@protoc_insertion_point(field_get:GCOpenRankOver.type)
  return type_;
}
inline void GCOpenRankOver::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GCOpenRankOver.type)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RankingMessage_2eproto__INCLUDED
