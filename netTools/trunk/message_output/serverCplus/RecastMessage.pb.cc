// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecastMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RecastMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RecastRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecastRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRStartMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRStartMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGStartMoveBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGStartMoveBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRCheckMoveToRayCastTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRCheckMoveToRayCastTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGCheckMoveToRayCastTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGCheckMoveToRayCastTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRMoveStepOnPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRMoveStepOnPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGMoveStepOnPathBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGMoveStepOnPathBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRStopMoving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRStopMoving_reflection_ = NULL;
const ::google::protobuf::Descriptor* RGStopMovingBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGStopMovingBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRUpdateMoveSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRUpdateMoveSpeed_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RecastMessage_2eproto() {
  protobuf_AddDesc_RecastMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RecastMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RecastRegist_descriptor_ = file->message_type(0);
  static const int RecastRegist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastRegist, recastid_),
  };
  RecastRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecastRegist_descriptor_,
      RecastRegist::default_instance_,
      RecastRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecastRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecastRegist));
  GRStartMove_descriptor_ = file->message_type(1);
  static const int GRStartMove_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, mapfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, stoprange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, useraycast_),
  };
  GRStartMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRStartMove_descriptor_,
      GRStartMove::default_instance_,
      GRStartMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStartMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRStartMove));
  RGStartMoveBack_descriptor_ = file->message_type(2);
  static const int RGStartMoveBack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, stoprange_),
  };
  RGStartMoveBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGStartMoveBack_descriptor_,
      RGStartMoveBack::default_instance_,
      RGStartMoveBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStartMoveBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGStartMoveBack));
  GRCheckMoveToRayCastTest_descriptor_ = file->message_type(3);
  static const int GRCheckMoveToRayCastTest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, mapfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, targetpos_),
  };
  GRCheckMoveToRayCastTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRCheckMoveToRayCastTest_descriptor_,
      GRCheckMoveToRayCastTest::default_instance_,
      GRCheckMoveToRayCastTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRCheckMoveToRayCastTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRCheckMoveToRayCastTest));
  RGCheckMoveToRayCastTest_descriptor_ = file->message_type(4);
  static const int RGCheckMoveToRayCastTest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, targetpos_),
  };
  RGCheckMoveToRayCastTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGCheckMoveToRayCastTest_descriptor_,
      RGCheckMoveToRayCastTest::default_instance_,
      RGCheckMoveToRayCastTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGCheckMoveToRayCastTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGCheckMoveToRayCastTest));
  GRMoveStepOnPath_descriptor_ = file->message_type(5);
  static const int GRMoveStepOnPath_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, mapfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, movestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, stoprange_),
  };
  GRMoveStepOnPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRMoveStepOnPath_descriptor_,
      GRMoveStepOnPath::default_instance_,
      GRMoveStepOnPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRMoveStepOnPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRMoveStepOnPath));
  RGMoveStepOnPathBack_descriptor_ = file->message_type(6);
  static const int RGMoveStepOnPathBack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, orderid_),
  };
  RGMoveStepOnPathBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGMoveStepOnPathBack_descriptor_,
      RGMoveStepOnPathBack::default_instance_,
      RGMoveStepOnPathBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGMoveStepOnPathBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGMoveStepOnPathBack));
  GRStopMoving_descriptor_ = file->message_type(7);
  static const int GRStopMoving_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, needback_),
  };
  GRStopMoving_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRStopMoving_descriptor_,
      GRStopMoving::default_instance_,
      GRStopMoving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRStopMoving, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRStopMoving));
  RGStopMovingBack_descriptor_ = file->message_type(8);
  static const int RGStopMovingBack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, orderid_),
  };
  RGStopMovingBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RGStopMovingBack_descriptor_,
      RGStopMovingBack::default_instance_,
      RGStopMovingBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGStopMovingBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RGStopMovingBack));
  GRUpdateMoveSpeed_descriptor_ = file->message_type(9);
  static const int GRUpdateMoveSpeed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, charguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, movespeed_),
  };
  GRUpdateMoveSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRUpdateMoveSpeed_descriptor_,
      GRUpdateMoveSpeed::default_instance_,
      GRUpdateMoveSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRUpdateMoveSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRUpdateMoveSpeed));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RecastMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecastRegist_descriptor_, &RecastRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRStartMove_descriptor_, &GRStartMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGStartMoveBack_descriptor_, &RGStartMoveBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRCheckMoveToRayCastTest_descriptor_, &GRCheckMoveToRayCastTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGCheckMoveToRayCastTest_descriptor_, &RGCheckMoveToRayCastTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRMoveStepOnPath_descriptor_, &GRMoveStepOnPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGMoveStepOnPathBack_descriptor_, &RGMoveStepOnPathBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRStopMoving_descriptor_, &GRStopMoving::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RGStopMovingBack_descriptor_, &RGStopMovingBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRUpdateMoveSpeed_descriptor_, &GRUpdateMoveSpeed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RecastMessage_2eproto() {
  delete RecastRegist::default_instance_;
  delete RecastRegist_reflection_;
  delete GRStartMove::default_instance_;
  delete GRStartMove_reflection_;
  delete RGStartMoveBack::default_instance_;
  delete RGStartMoveBack_reflection_;
  delete GRCheckMoveToRayCastTest::default_instance_;
  delete GRCheckMoveToRayCastTest_reflection_;
  delete RGCheckMoveToRayCastTest::default_instance_;
  delete RGCheckMoveToRayCastTest_reflection_;
  delete GRMoveStepOnPath::default_instance_;
  delete GRMoveStepOnPath_reflection_;
  delete RGMoveStepOnPathBack::default_instance_;
  delete RGMoveStepOnPathBack_reflection_;
  delete GRStopMoving::default_instance_;
  delete GRStopMoving_reflection_;
  delete RGStopMovingBack::default_instance_;
  delete RGStopMovingBack_reflection_;
  delete GRUpdateMoveSpeed::default_instance_;
  delete GRUpdateMoveSpeed_reflection_;
}

void protobuf_AddDesc_RecastMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RecastMessage.proto\032\022InnerMessage.prot"
    "o\" \n\014RecastRegist\022\020\n\010recastId\030\001 \001(\005\"\354\001\n\013"
    "GRStartMove\022\027\n\017sceneInstanceId\030\001 \001(\005\022\023\n\013"
    "mapFileName\030\002 \001(\t\022\020\n\010charGuid\030\003 \001(\003\022\017\n\007o"
    "rderId\030\004 \001(\005\022\036\n\010startPos\030\005 \001(\0132\014.Vector3"
    "Info\022\037\n\ttargetPos\030\006 \001(\0132\014.Vector3Info\022\021\n"
    "\tstartTime\030\007 \001(\003\022\021\n\tmoveSpeed\030\010 \001(\005\022\021\n\ts"
    "topRange\030\t \001(\005\022\022\n\nuseRaycast\030\n \001(\005\"\327\001\n\017R"
    "GStartMoveBack\022\016\n\006result\030\001 \001(\005\022\020\n\010charGu"
    "id\030\002 \001(\003\022\027\n\017sceneInstanceId\030\003 \001(\005\022\036\n\010sta"
    "rtPos\030\004 \001(\0132\014.Vector3Info\022\037\n\ttargetPos\030\005"
    " \001(\0132\014.Vector3Info\022\017\n\007orderId\030\006 \001(\005\022\021\n\ts"
    "tartTime\030\007 \001(\003\022\021\n\tmoveSpeed\030\010 \001(\005\022\021\n\tsto"
    "pRange\030\t \001(\005\"\254\001\n\030GRCheckMoveToRayCastTes"
    "t\022\027\n\017sceneInstanceId\030\001 \001(\005\022\023\n\013mapFileNam"
    "e\030\002 \001(\t\022\020\n\010charGuid\030\003 \001(\003\022\017\n\007orderId\030\004 \001"
    "(\005\022\036\n\010startPos\030\005 \001(\0132\014.Vector3Info\022\037\n\tta"
    "rgetPos\030\006 \001(\0132\014.Vector3Info\"\247\001\n\030RGCheckM"
    "oveToRayCastTest\022\016\n\006result\030\001 \001(\005\022\020\n\010char"
    "Guid\030\002 \001(\003\022\027\n\017sceneInstanceId\030\003 \001(\005\022\017\n\007o"
    "rderId\030\004 \001(\005\022\036\n\010startPos\030\005 \001(\0132\014.Vector3"
    "Info\022\037\n\ttargetPos\030\006 \001(\0132\014.Vector3Info\"\210\001"
    "\n\020GRMoveStepOnPath\022\027\n\017sceneInstanceId\030\001 "
    "\001(\005\022\023\n\013mapFileName\030\002 \001(\t\022\020\n\010charGuid\030\003 \001"
    "(\003\022\017\n\007orderId\030\004 \001(\005\022\020\n\010moveStep\030\005 \001(\005\022\021\n"
    "\tstopRange\030\006 \001(\005\"\236\001\n\024RGMoveStepOnPathBac"
    "k\022\016\n\006result\030\001 \001(\005\022\020\n\010charGuid\030\002 \001(\003\022\027\n\017s"
    "ceneInstanceId\030\003 \001(\005\022\031\n\003pos\030\004 \001(\0132\014.Vect"
    "or3Info\022\037\n\tdirection\030\005 \001(\0132\014.Vector3Info"
    "\022\017\n\007orderId\030\006 \001(\005\"\\\n\014GRStopMoving\022\020\n\010cha"
    "rGuid\030\001 \001(\003\022\027\n\017sceneInstanceId\030\002 \001(\005\022\017\n\007"
    "orderId\030\003 \001(\005\022\020\n\010needBack\030\004 \001(\005\"^\n\020RGSto"
    "pMovingBack\022\016\n\006result\030\001 \001(\005\022\020\n\010charGuid\030"
    "\002 \001(\003\022\027\n\017sceneInstanceId\030\003 \001(\005\022\017\n\007orderI"
    "d\030\004 \001(\005\"b\n\021GRUpdateMoveSpeed\022\020\n\010charGuid"
    "\030\001 \001(\003\022\027\n\017sceneInstanceId\030\002 \001(\005\022\017\n\007order"
    "Id\030\003 \001(\005\022\021\n\tmoveSpeed\030\004 \001(\005B\031\n\027com.mile."
    "common.message", 1494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RecastMessage.proto", &protobuf_RegisterTypes);
  RecastRegist::default_instance_ = new RecastRegist();
  GRStartMove::default_instance_ = new GRStartMove();
  RGStartMoveBack::default_instance_ = new RGStartMoveBack();
  GRCheckMoveToRayCastTest::default_instance_ = new GRCheckMoveToRayCastTest();
  RGCheckMoveToRayCastTest::default_instance_ = new RGCheckMoveToRayCastTest();
  GRMoveStepOnPath::default_instance_ = new GRMoveStepOnPath();
  RGMoveStepOnPathBack::default_instance_ = new RGMoveStepOnPathBack();
  GRStopMoving::default_instance_ = new GRStopMoving();
  RGStopMovingBack::default_instance_ = new RGStopMovingBack();
  GRUpdateMoveSpeed::default_instance_ = new GRUpdateMoveSpeed();
  RecastRegist::default_instance_->InitAsDefaultInstance();
  GRStartMove::default_instance_->InitAsDefaultInstance();
  RGStartMoveBack::default_instance_->InitAsDefaultInstance();
  GRCheckMoveToRayCastTest::default_instance_->InitAsDefaultInstance();
  RGCheckMoveToRayCastTest::default_instance_->InitAsDefaultInstance();
  GRMoveStepOnPath::default_instance_->InitAsDefaultInstance();
  RGMoveStepOnPathBack::default_instance_->InitAsDefaultInstance();
  GRStopMoving::default_instance_->InitAsDefaultInstance();
  RGStopMovingBack::default_instance_->InitAsDefaultInstance();
  GRUpdateMoveSpeed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RecastMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RecastMessage_2eproto {
  StaticDescriptorInitializer_RecastMessage_2eproto() {
    protobuf_AddDesc_RecastMessage_2eproto();
  }
} static_descriptor_initializer_RecastMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecastRegist::kRecastIdFieldNumber;
#endif  // !_MSC_VER

RecastRegist::RecastRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RecastRegist)
}

void RecastRegist::InitAsDefaultInstance() {
}

RecastRegist::RecastRegist(const RecastRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RecastRegist)
}

void RecastRegist::SharedCtor() {
  _cached_size_ = 0;
  recastid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecastRegist::~RecastRegist() {
  // @@protoc_insertion_point(destructor:RecastRegist)
  SharedDtor();
}

void RecastRegist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecastRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecastRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecastRegist_descriptor_;
}

const RecastRegist& RecastRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

RecastRegist* RecastRegist::default_instance_ = NULL;

RecastRegist* RecastRegist::New() const {
  return new RecastRegist;
}

void RecastRegist::Clear() {
  recastid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecastRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RecastRegist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 recastId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recastid_)));
          set_has_recastid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RecastRegist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RecastRegist)
  return false;
#undef DO_
}

void RecastRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RecastRegist)
  // optional int32 recastId = 1;
  if (has_recastid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->recastid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RecastRegist)
}

::google::protobuf::uint8* RecastRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RecastRegist)
  // optional int32 recastId = 1;
  if (has_recastid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->recastid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RecastRegist)
  return target;
}

int RecastRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 recastId = 1;
    if (has_recastid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recastid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecastRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecastRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecastRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecastRegist::MergeFrom(const RecastRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recastid()) {
      set_recastid(from.recastid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecastRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecastRegist::CopyFrom(const RecastRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecastRegist::IsInitialized() const {

  return true;
}

void RecastRegist::Swap(RecastRegist* other) {
  if (other != this) {
    std::swap(recastid_, other->recastid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecastRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecastRegist_descriptor_;
  metadata.reflection = RecastRegist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRStartMove::kSceneInstanceIdFieldNumber;
const int GRStartMove::kMapFileNameFieldNumber;
const int GRStartMove::kCharGuidFieldNumber;
const int GRStartMove::kOrderIdFieldNumber;
const int GRStartMove::kStartPosFieldNumber;
const int GRStartMove::kTargetPosFieldNumber;
const int GRStartMove::kStartTimeFieldNumber;
const int GRStartMove::kMoveSpeedFieldNumber;
const int GRStartMove::kStopRangeFieldNumber;
const int GRStartMove::kUseRaycastFieldNumber;
#endif  // !_MSC_VER

GRStartMove::GRStartMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRStartMove)
}

void GRStartMove::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GRStartMove::GRStartMove(const GRStartMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRStartMove)
}

void GRStartMove::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneinstanceid_ = 0;
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charguid_ = GOOGLE_LONGLONG(0);
  orderid_ = 0;
  startpos_ = NULL;
  targetpos_ = NULL;
  starttime_ = GOOGLE_LONGLONG(0);
  movespeed_ = 0;
  stoprange_ = 0;
  useraycast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRStartMove::~GRStartMove() {
  // @@protoc_insertion_point(destructor:GRStartMove)
  SharedDtor();
}

void GRStartMove::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
    delete startpos_;
    delete targetpos_;
  }
}

void GRStartMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRStartMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRStartMove_descriptor_;
}

const GRStartMove& GRStartMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

GRStartMove* GRStartMove::default_instance_ = NULL;

GRStartMove* GRStartMove::New() const {
  return new GRStartMove;
}

void GRStartMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GRStartMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(sceneinstanceid_, charguid_);
    ZR_(starttime_, movespeed_);
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }
  ZR_(stoprange_, useraycast_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRStartMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRStartMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneInstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapFileName;
        break;
      }

      // optional string mapFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_mapFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 3;
      case 3: {
        if (tag == 24) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 4;
      case 4: {
        if (tag == 32) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_startPos;
        break;
      }

      // optional .Vector3Info startPos = 5;
      case 5: {
        if (tag == 42) {
         parse_startPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 6;
      case 6: {
        if (tag == 50) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 7;
      case 7: {
        if (tag == 56) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_moveSpeed;
        break;
      }

      // optional int32 moveSpeed = 8;
      case 8: {
        if (tag == 64) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_stopRange;
        break;
      }

      // optional int32 stopRange = 9;
      case 9: {
        if (tag == 72) {
         parse_stopRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoprange_)));
          set_has_stoprange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_useRaycast;
        break;
      }

      // optional int32 useRaycast = 10;
      case 10: {
        if (tag == 80) {
         parse_useRaycast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useraycast_)));
          set_has_useraycast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRStartMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRStartMove)
  return false;
#undef DO_
}

void GRStartMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRStartMove)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneinstanceid(), output);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapfilename(), output);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charguid(), output);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderid(), output);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->startpos(), output);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->targetpos(), output);
  }

  // optional int64 startTime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->starttime(), output);
  }

  // optional int32 moveSpeed = 8;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->movespeed(), output);
  }

  // optional int32 stopRange = 9;
  if (has_stoprange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->stoprange(), output);
  }

  // optional int32 useRaycast = 10;
  if (has_useraycast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->useraycast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRStartMove)
}

::google::protobuf::uint8* GRStartMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRStartMove)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneinstanceid(), target);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapfilename(), target);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charguid(), target);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderid(), target);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->startpos(), target);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->targetpos(), target);
  }

  // optional int64 startTime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->starttime(), target);
  }

  // optional int32 moveSpeed = 8;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->movespeed(), target);
  }

  // optional int32 stopRange = 9;
  if (has_stoprange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->stoprange(), target);
  }

  // optional int32 useRaycast = 10;
  if (has_useraycast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->useraycast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRStartMove)
  return target;
}

int GRStartMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneInstanceId = 1;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional string mapFileName = 2;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

    // optional int64 charGuid = 3;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 orderId = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional .Vector3Info startPos = 5;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional .Vector3Info targetPos = 6;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional int64 startTime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int32 moveSpeed = 8;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 stopRange = 9;
    if (has_stoprange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoprange());
    }

    // optional int32 useRaycast = 10;
    if (has_useraycast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useraycast());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRStartMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRStartMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRStartMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRStartMove::MergeFrom(const GRStartMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stoprange()) {
      set_stoprange(from.stoprange());
    }
    if (from.has_useraycast()) {
      set_useraycast(from.useraycast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRStartMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRStartMove::CopyFrom(const GRStartMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRStartMove::IsInitialized() const {

  return true;
}

void GRStartMove::Swap(GRStartMove* other) {
  if (other != this) {
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(charguid_, other->charguid_);
    std::swap(orderid_, other->orderid_);
    std::swap(startpos_, other->startpos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(starttime_, other->starttime_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(stoprange_, other->stoprange_);
    std::swap(useraycast_, other->useraycast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRStartMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRStartMove_descriptor_;
  metadata.reflection = GRStartMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RGStartMoveBack::kResultFieldNumber;
const int RGStartMoveBack::kCharGuidFieldNumber;
const int RGStartMoveBack::kSceneInstanceIdFieldNumber;
const int RGStartMoveBack::kStartPosFieldNumber;
const int RGStartMoveBack::kTargetPosFieldNumber;
const int RGStartMoveBack::kOrderIdFieldNumber;
const int RGStartMoveBack::kStartTimeFieldNumber;
const int RGStartMoveBack::kMoveSpeedFieldNumber;
const int RGStartMoveBack::kStopRangeFieldNumber;
#endif  // !_MSC_VER

RGStartMoveBack::RGStartMoveBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RGStartMoveBack)
}

void RGStartMoveBack::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

RGStartMoveBack::RGStartMoveBack(const RGStartMoveBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RGStartMoveBack)
}

void RGStartMoveBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  startpos_ = NULL;
  targetpos_ = NULL;
  orderid_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  movespeed_ = 0;
  stoprange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGStartMoveBack::~RGStartMoveBack() {
  // @@protoc_insertion_point(destructor:RGStartMoveBack)
  SharedDtor();
}

void RGStartMoveBack::SharedDtor() {
  if (this != default_instance_) {
    delete startpos_;
    delete targetpos_;
  }
}

void RGStartMoveBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGStartMoveBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGStartMoveBack_descriptor_;
}

const RGStartMoveBack& RGStartMoveBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

RGStartMoveBack* RGStartMoveBack::default_instance_ = NULL;

RGStartMoveBack* RGStartMoveBack::New() const {
  return new RGStartMoveBack;
}

void RGStartMoveBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGStartMoveBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charguid_, sceneinstanceid_);
    ZR_(starttime_, movespeed_);
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }
  stoprange_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGStartMoveBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RGStartMoveBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 2;
      case 2: {
        if (tag == 16) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startPos;
        break;
      }

      // optional .Vector3Info startPos = 4;
      case 4: {
        if (tag == 34) {
         parse_startPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 5;
      case 5: {
        if (tag == 42) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 6;
      case 6: {
        if (tag == 48) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_startTime;
        break;
      }

      // optional int64 startTime = 7;
      case 7: {
        if (tag == 56) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_moveSpeed;
        break;
      }

      // optional int32 moveSpeed = 8;
      case 8: {
        if (tag == 64) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_stopRange;
        break;
      }

      // optional int32 stopRange = 9;
      case 9: {
        if (tag == 72) {
         parse_stopRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoprange_)));
          set_has_stoprange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RGStartMoveBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RGStartMoveBack)
  return false;
#undef DO_
}

void RGStartMoveBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RGStartMoveBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneinstanceid(), output);
  }

  // optional .Vector3Info startPos = 4;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->startpos(), output);
  }

  // optional .Vector3Info targetPos = 5;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->targetpos(), output);
  }

  // optional int32 orderId = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->orderid(), output);
  }

  // optional int64 startTime = 7;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->starttime(), output);
  }

  // optional int32 moveSpeed = 8;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->movespeed(), output);
  }

  // optional int32 stopRange = 9;
  if (has_stoprange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->stoprange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RGStartMoveBack)
}

::google::protobuf::uint8* RGStartMoveBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RGStartMoveBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneinstanceid(), target);
  }

  // optional .Vector3Info startPos = 4;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->startpos(), target);
  }

  // optional .Vector3Info targetPos = 5;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->targetpos(), target);
  }

  // optional int32 orderId = 6;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->orderid(), target);
  }

  // optional int64 startTime = 7;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->starttime(), target);
  }

  // optional int32 moveSpeed = 8;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->movespeed(), target);
  }

  // optional int32 stopRange = 9;
  if (has_stoprange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->stoprange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RGStartMoveBack)
  return target;
}

int RGStartMoveBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 charGuid = 2;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 3;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional .Vector3Info startPos = 4;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional .Vector3Info targetPos = 5;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional int32 orderId = 6;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int64 startTime = 7;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int32 moveSpeed = 8;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 stopRange = 9;
    if (has_stoprange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoprange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGStartMoveBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGStartMoveBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGStartMoveBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGStartMoveBack::MergeFrom(const RGStartMoveBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stoprange()) {
      set_stoprange(from.stoprange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGStartMoveBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGStartMoveBack::CopyFrom(const RGStartMoveBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGStartMoveBack::IsInitialized() const {

  return true;
}

void RGStartMoveBack::Swap(RGStartMoveBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(startpos_, other->startpos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(orderid_, other->orderid_);
    std::swap(starttime_, other->starttime_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(stoprange_, other->stoprange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGStartMoveBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGStartMoveBack_descriptor_;
  metadata.reflection = RGStartMoveBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRCheckMoveToRayCastTest::kSceneInstanceIdFieldNumber;
const int GRCheckMoveToRayCastTest::kMapFileNameFieldNumber;
const int GRCheckMoveToRayCastTest::kCharGuidFieldNumber;
const int GRCheckMoveToRayCastTest::kOrderIdFieldNumber;
const int GRCheckMoveToRayCastTest::kStartPosFieldNumber;
const int GRCheckMoveToRayCastTest::kTargetPosFieldNumber;
#endif  // !_MSC_VER

GRCheckMoveToRayCastTest::GRCheckMoveToRayCastTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRCheckMoveToRayCastTest)
}

void GRCheckMoveToRayCastTest::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GRCheckMoveToRayCastTest::GRCheckMoveToRayCastTest(const GRCheckMoveToRayCastTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRCheckMoveToRayCastTest)
}

void GRCheckMoveToRayCastTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneinstanceid_ = 0;
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charguid_ = GOOGLE_LONGLONG(0);
  orderid_ = 0;
  startpos_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRCheckMoveToRayCastTest::~GRCheckMoveToRayCastTest() {
  // @@protoc_insertion_point(destructor:GRCheckMoveToRayCastTest)
  SharedDtor();
}

void GRCheckMoveToRayCastTest::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
    delete startpos_;
    delete targetpos_;
  }
}

void GRCheckMoveToRayCastTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRCheckMoveToRayCastTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRCheckMoveToRayCastTest_descriptor_;
}

const GRCheckMoveToRayCastTest& GRCheckMoveToRayCastTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

GRCheckMoveToRayCastTest* GRCheckMoveToRayCastTest::default_instance_ = NULL;

GRCheckMoveToRayCastTest* GRCheckMoveToRayCastTest::New() const {
  return new GRCheckMoveToRayCastTest;
}

void GRCheckMoveToRayCastTest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GRCheckMoveToRayCastTest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sceneinstanceid_, charguid_);
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRCheckMoveToRayCastTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRCheckMoveToRayCastTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneInstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapFileName;
        break;
      }

      // optional string mapFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_mapFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 3;
      case 3: {
        if (tag == 24) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 4;
      case 4: {
        if (tag == 32) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_startPos;
        break;
      }

      // optional .Vector3Info startPos = 5;
      case 5: {
        if (tag == 42) {
         parse_startPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 6;
      case 6: {
        if (tag == 50) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRCheckMoveToRayCastTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRCheckMoveToRayCastTest)
  return false;
#undef DO_
}

void GRCheckMoveToRayCastTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRCheckMoveToRayCastTest)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneinstanceid(), output);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapfilename(), output);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charguid(), output);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderid(), output);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->startpos(), output);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRCheckMoveToRayCastTest)
}

::google::protobuf::uint8* GRCheckMoveToRayCastTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRCheckMoveToRayCastTest)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneinstanceid(), target);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapfilename(), target);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charguid(), target);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderid(), target);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->startpos(), target);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRCheckMoveToRayCastTest)
  return target;
}

int GRCheckMoveToRayCastTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneInstanceId = 1;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional string mapFileName = 2;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

    // optional int64 charGuid = 3;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 orderId = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional .Vector3Info startPos = 5;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional .Vector3Info targetPos = 6;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRCheckMoveToRayCastTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRCheckMoveToRayCastTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRCheckMoveToRayCastTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRCheckMoveToRayCastTest::MergeFrom(const GRCheckMoveToRayCastTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRCheckMoveToRayCastTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRCheckMoveToRayCastTest::CopyFrom(const GRCheckMoveToRayCastTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRCheckMoveToRayCastTest::IsInitialized() const {

  return true;
}

void GRCheckMoveToRayCastTest::Swap(GRCheckMoveToRayCastTest* other) {
  if (other != this) {
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(charguid_, other->charguid_);
    std::swap(orderid_, other->orderid_);
    std::swap(startpos_, other->startpos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRCheckMoveToRayCastTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRCheckMoveToRayCastTest_descriptor_;
  metadata.reflection = GRCheckMoveToRayCastTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RGCheckMoveToRayCastTest::kResultFieldNumber;
const int RGCheckMoveToRayCastTest::kCharGuidFieldNumber;
const int RGCheckMoveToRayCastTest::kSceneInstanceIdFieldNumber;
const int RGCheckMoveToRayCastTest::kOrderIdFieldNumber;
const int RGCheckMoveToRayCastTest::kStartPosFieldNumber;
const int RGCheckMoveToRayCastTest::kTargetPosFieldNumber;
#endif  // !_MSC_VER

RGCheckMoveToRayCastTest::RGCheckMoveToRayCastTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RGCheckMoveToRayCastTest)
}

void RGCheckMoveToRayCastTest::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

RGCheckMoveToRayCastTest::RGCheckMoveToRayCastTest(const RGCheckMoveToRayCastTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RGCheckMoveToRayCastTest)
}

void RGCheckMoveToRayCastTest::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  orderid_ = 0;
  startpos_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGCheckMoveToRayCastTest::~RGCheckMoveToRayCastTest() {
  // @@protoc_insertion_point(destructor:RGCheckMoveToRayCastTest)
  SharedDtor();
}

void RGCheckMoveToRayCastTest::SharedDtor() {
  if (this != default_instance_) {
    delete startpos_;
    delete targetpos_;
  }
}

void RGCheckMoveToRayCastTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGCheckMoveToRayCastTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGCheckMoveToRayCastTest_descriptor_;
}

const RGCheckMoveToRayCastTest& RGCheckMoveToRayCastTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

RGCheckMoveToRayCastTest* RGCheckMoveToRayCastTest::default_instance_ = NULL;

RGCheckMoveToRayCastTest* RGCheckMoveToRayCastTest::New() const {
  return new RGCheckMoveToRayCastTest;
}

void RGCheckMoveToRayCastTest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGCheckMoveToRayCastTest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charguid_, sceneinstanceid_);
    orderid_ = 0;
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGCheckMoveToRayCastTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RGCheckMoveToRayCastTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 2;
      case 2: {
        if (tag == 16) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 4;
      case 4: {
        if (tag == 32) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_startPos;
        break;
      }

      // optional .Vector3Info startPos = 5;
      case 5: {
        if (tag == 42) {
         parse_startPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 6;
      case 6: {
        if (tag == 50) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RGCheckMoveToRayCastTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RGCheckMoveToRayCastTest)
  return false;
#undef DO_
}

void RGCheckMoveToRayCastTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RGCheckMoveToRayCastTest)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneinstanceid(), output);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderid(), output);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->startpos(), output);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RGCheckMoveToRayCastTest)
}

::google::protobuf::uint8* RGCheckMoveToRayCastTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RGCheckMoveToRayCastTest)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneinstanceid(), target);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderid(), target);
  }

  // optional .Vector3Info startPos = 5;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->startpos(), target);
  }

  // optional .Vector3Info targetPos = 6;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RGCheckMoveToRayCastTest)
  return target;
}

int RGCheckMoveToRayCastTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 charGuid = 2;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 3;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional int32 orderId = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional .Vector3Info startPos = 5;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional .Vector3Info targetPos = 6;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGCheckMoveToRayCastTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGCheckMoveToRayCastTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGCheckMoveToRayCastTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGCheckMoveToRayCastTest::MergeFrom(const RGCheckMoveToRayCastTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGCheckMoveToRayCastTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGCheckMoveToRayCastTest::CopyFrom(const RGCheckMoveToRayCastTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGCheckMoveToRayCastTest::IsInitialized() const {

  return true;
}

void RGCheckMoveToRayCastTest::Swap(RGCheckMoveToRayCastTest* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(orderid_, other->orderid_);
    std::swap(startpos_, other->startpos_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGCheckMoveToRayCastTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGCheckMoveToRayCastTest_descriptor_;
  metadata.reflection = RGCheckMoveToRayCastTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRMoveStepOnPath::kSceneInstanceIdFieldNumber;
const int GRMoveStepOnPath::kMapFileNameFieldNumber;
const int GRMoveStepOnPath::kCharGuidFieldNumber;
const int GRMoveStepOnPath::kOrderIdFieldNumber;
const int GRMoveStepOnPath::kMoveStepFieldNumber;
const int GRMoveStepOnPath::kStopRangeFieldNumber;
#endif  // !_MSC_VER

GRMoveStepOnPath::GRMoveStepOnPath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRMoveStepOnPath)
}

void GRMoveStepOnPath::InitAsDefaultInstance() {
}

GRMoveStepOnPath::GRMoveStepOnPath(const GRMoveStepOnPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRMoveStepOnPath)
}

void GRMoveStepOnPath::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneinstanceid_ = 0;
  mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charguid_ = GOOGLE_LONGLONG(0);
  orderid_ = 0;
  movestep_ = 0;
  stoprange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRMoveStepOnPath::~GRMoveStepOnPath() {
  // @@protoc_insertion_point(destructor:GRMoveStepOnPath)
  SharedDtor();
}

void GRMoveStepOnPath::SharedDtor() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (this != default_instance_) {
  }
}

void GRMoveStepOnPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRMoveStepOnPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRMoveStepOnPath_descriptor_;
}

const GRMoveStepOnPath& GRMoveStepOnPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

GRMoveStepOnPath* GRMoveStepOnPath::default_instance_ = NULL;

GRMoveStepOnPath* GRMoveStepOnPath::New() const {
  return new GRMoveStepOnPath;
}

void GRMoveStepOnPath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GRMoveStepOnPath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sceneinstanceid_, stoprange_);
    if (has_mapfilename()) {
      if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapfilename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRMoveStepOnPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRMoveStepOnPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneInstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapFileName;
        break;
      }

      // optional string mapFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_mapFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapfilename().data(), this->mapfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 3;
      case 3: {
        if (tag == 24) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 4;
      case 4: {
        if (tag == 32) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_moveStep;
        break;
      }

      // optional int32 moveStep = 5;
      case 5: {
        if (tag == 40) {
         parse_moveStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movestep_)));
          set_has_movestep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stopRange;
        break;
      }

      // optional int32 stopRange = 6;
      case 6: {
        if (tag == 48) {
         parse_stopRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoprange_)));
          set_has_stoprange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRMoveStepOnPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRMoveStepOnPath)
  return false;
#undef DO_
}

void GRMoveStepOnPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRMoveStepOnPath)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneinstanceid(), output);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mapfilename(), output);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charguid(), output);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderid(), output);
  }

  // optional int32 moveStep = 5;
  if (has_movestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->movestep(), output);
  }

  // optional int32 stopRange = 6;
  if (has_stoprange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stoprange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRMoveStepOnPath)
}

::google::protobuf::uint8* GRMoveStepOnPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRMoveStepOnPath)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneinstanceid(), target);
  }

  // optional string mapFileName = 2;
  if (has_mapfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapfilename().data(), this->mapfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mapfilename(), target);
  }

  // optional int64 charGuid = 3;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charguid(), target);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderid(), target);
  }

  // optional int32 moveStep = 5;
  if (has_movestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->movestep(), target);
  }

  // optional int32 stopRange = 6;
  if (has_stoprange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stoprange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRMoveStepOnPath)
  return target;
}

int GRMoveStepOnPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneInstanceId = 1;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional string mapFileName = 2;
    if (has_mapfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapfilename());
    }

    // optional int64 charGuid = 3;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 orderId = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 moveStep = 5;
    if (has_movestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movestep());
    }

    // optional int32 stopRange = 6;
    if (has_stoprange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoprange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRMoveStepOnPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRMoveStepOnPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRMoveStepOnPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRMoveStepOnPath::MergeFrom(const GRMoveStepOnPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_mapfilename()) {
      set_mapfilename(from.mapfilename());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_movestep()) {
      set_movestep(from.movestep());
    }
    if (from.has_stoprange()) {
      set_stoprange(from.stoprange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRMoveStepOnPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRMoveStepOnPath::CopyFrom(const GRMoveStepOnPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRMoveStepOnPath::IsInitialized() const {

  return true;
}

void GRMoveStepOnPath::Swap(GRMoveStepOnPath* other) {
  if (other != this) {
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(mapfilename_, other->mapfilename_);
    std::swap(charguid_, other->charguid_);
    std::swap(orderid_, other->orderid_);
    std::swap(movestep_, other->movestep_);
    std::swap(stoprange_, other->stoprange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRMoveStepOnPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRMoveStepOnPath_descriptor_;
  metadata.reflection = GRMoveStepOnPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RGMoveStepOnPathBack::kResultFieldNumber;
const int RGMoveStepOnPathBack::kCharGuidFieldNumber;
const int RGMoveStepOnPathBack::kSceneInstanceIdFieldNumber;
const int RGMoveStepOnPathBack::kPosFieldNumber;
const int RGMoveStepOnPathBack::kDirectionFieldNumber;
const int RGMoveStepOnPathBack::kOrderIdFieldNumber;
#endif  // !_MSC_VER

RGMoveStepOnPathBack::RGMoveStepOnPathBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RGMoveStepOnPathBack)
}

void RGMoveStepOnPathBack::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

RGMoveStepOnPathBack::RGMoveStepOnPathBack(const RGMoveStepOnPathBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RGMoveStepOnPathBack)
}

void RGMoveStepOnPathBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  pos_ = NULL;
  direction_ = NULL;
  orderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGMoveStepOnPathBack::~RGMoveStepOnPathBack() {
  // @@protoc_insertion_point(destructor:RGMoveStepOnPathBack)
  SharedDtor();
}

void RGMoveStepOnPathBack::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
  }
}

void RGMoveStepOnPathBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGMoveStepOnPathBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGMoveStepOnPathBack_descriptor_;
}

const RGMoveStepOnPathBack& RGMoveStepOnPathBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

RGMoveStepOnPathBack* RGMoveStepOnPathBack::default_instance_ = NULL;

RGMoveStepOnPathBack* RGMoveStepOnPathBack::New() const {
  return new RGMoveStepOnPathBack;
}

void RGMoveStepOnPathBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGMoveStepOnPathBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charguid_, sceneinstanceid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
    orderid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGMoveStepOnPathBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RGMoveStepOnPathBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 2;
      case 2: {
        if (tag == 16) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 5;
      case 5: {
        if (tag == 42) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 6;
      case 6: {
        if (tag == 48) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RGMoveStepOnPathBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RGMoveStepOnPathBack)
  return false;
#undef DO_
}

void RGMoveStepOnPathBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RGMoveStepOnPathBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneinstanceid(), output);
  }

  // optional .Vector3Info pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional .Vector3Info direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->direction(), output);
  }

  // optional int32 orderId = 6;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RGMoveStepOnPathBack)
}

::google::protobuf::uint8* RGMoveStepOnPathBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RGMoveStepOnPathBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneinstanceid(), target);
  }

  // optional .Vector3Info pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional .Vector3Info direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }

  // optional int32 orderId = 6;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RGMoveStepOnPathBack)
  return target;
}

int RGMoveStepOnPathBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 charGuid = 2;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 3;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional .Vector3Info pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 orderId = 6;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGMoveStepOnPathBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGMoveStepOnPathBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGMoveStepOnPathBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGMoveStepOnPathBack::MergeFrom(const RGMoveStepOnPathBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGMoveStepOnPathBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGMoveStepOnPathBack::CopyFrom(const RGMoveStepOnPathBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGMoveStepOnPathBack::IsInitialized() const {

  return true;
}

void RGMoveStepOnPathBack::Swap(RGMoveStepOnPathBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGMoveStepOnPathBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGMoveStepOnPathBack_descriptor_;
  metadata.reflection = RGMoveStepOnPathBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRStopMoving::kCharGuidFieldNumber;
const int GRStopMoving::kSceneInstanceIdFieldNumber;
const int GRStopMoving::kOrderIdFieldNumber;
const int GRStopMoving::kNeedBackFieldNumber;
#endif  // !_MSC_VER

GRStopMoving::GRStopMoving()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRStopMoving)
}

void GRStopMoving::InitAsDefaultInstance() {
}

GRStopMoving::GRStopMoving(const GRStopMoving& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRStopMoving)
}

void GRStopMoving::SharedCtor() {
  _cached_size_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  orderid_ = 0;
  needback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRStopMoving::~GRStopMoving() {
  // @@protoc_insertion_point(destructor:GRStopMoving)
  SharedDtor();
}

void GRStopMoving::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRStopMoving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRStopMoving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRStopMoving_descriptor_;
}

const GRStopMoving& GRStopMoving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

GRStopMoving* GRStopMoving::default_instance_ = NULL;

GRStopMoving* GRStopMoving::New() const {
  return new GRStopMoving;
}

void GRStopMoving::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GRStopMoving*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charguid_, needback_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRStopMoving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRStopMoving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charGuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 3;
      case 3: {
        if (tag == 24) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_needBack;
        break;
      }

      // optional int32 needBack = 4;
      case 4: {
        if (tag == 32) {
         parse_needBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needback_)));
          set_has_needback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRStopMoving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRStopMoving)
  return false;
#undef DO_
}

void GRStopMoving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRStopMoving)
  // optional int64 charGuid = 1;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 2;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneinstanceid(), output);
  }

  // optional int32 orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  // optional int32 needBack = 4;
  if (has_needback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->needback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRStopMoving)
}

::google::protobuf::uint8* GRStopMoving::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRStopMoving)
  // optional int64 charGuid = 1;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 2;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneinstanceid(), target);
  }

  // optional int32 orderId = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  // optional int32 needBack = 4;
  if (has_needback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->needback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRStopMoving)
  return target;
}

int GRStopMoving::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charGuid = 1;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 2;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional int32 orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 needBack = 4;
    if (has_needback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRStopMoving::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRStopMoving* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRStopMoving*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRStopMoving::MergeFrom(const GRStopMoving& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_needback()) {
      set_needback(from.needback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRStopMoving::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRStopMoving::CopyFrom(const GRStopMoving& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRStopMoving::IsInitialized() const {

  return true;
}

void GRStopMoving::Swap(GRStopMoving* other) {
  if (other != this) {
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(orderid_, other->orderid_);
    std::swap(needback_, other->needback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRStopMoving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRStopMoving_descriptor_;
  metadata.reflection = GRStopMoving_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RGStopMovingBack::kResultFieldNumber;
const int RGStopMovingBack::kCharGuidFieldNumber;
const int RGStopMovingBack::kSceneInstanceIdFieldNumber;
const int RGStopMovingBack::kOrderIdFieldNumber;
#endif  // !_MSC_VER

RGStopMovingBack::RGStopMovingBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RGStopMovingBack)
}

void RGStopMovingBack::InitAsDefaultInstance() {
}

RGStopMovingBack::RGStopMovingBack(const RGStopMovingBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RGStopMovingBack)
}

void RGStopMovingBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  orderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RGStopMovingBack::~RGStopMovingBack() {
  // @@protoc_insertion_point(destructor:RGStopMovingBack)
  SharedDtor();
}

void RGStopMovingBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RGStopMovingBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGStopMovingBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGStopMovingBack_descriptor_;
}

const RGStopMovingBack& RGStopMovingBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

RGStopMovingBack* RGStopMovingBack::default_instance_ = NULL;

RGStopMovingBack* RGStopMovingBack::New() const {
  return new RGStopMovingBack;
}

void RGStopMovingBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RGStopMovingBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charguid_, orderid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RGStopMovingBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RGStopMovingBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charGuid;
        break;
      }

      // optional int64 charGuid = 2;
      case 2: {
        if (tag == 16) {
         parse_charGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 3;
      case 3: {
        if (tag == 24) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 4;
      case 4: {
        if (tag == 32) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RGStopMovingBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RGStopMovingBack)
  return false;
#undef DO_
}

void RGStopMovingBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RGStopMovingBack)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneinstanceid(), output);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RGStopMovingBack)
}

::google::protobuf::uint8* RGStopMovingBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RGStopMovingBack)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int64 charGuid = 2;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 3;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneinstanceid(), target);
  }

  // optional int32 orderId = 4;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RGStopMovingBack)
  return target;
}

int RGStopMovingBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int64 charGuid = 2;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 3;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional int32 orderId = 4;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGStopMovingBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RGStopMovingBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RGStopMovingBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RGStopMovingBack::MergeFrom(const RGStopMovingBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RGStopMovingBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGStopMovingBack::CopyFrom(const RGStopMovingBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGStopMovingBack::IsInitialized() const {

  return true;
}

void RGStopMovingBack::Swap(RGStopMovingBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RGStopMovingBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGStopMovingBack_descriptor_;
  metadata.reflection = RGStopMovingBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRUpdateMoveSpeed::kCharGuidFieldNumber;
const int GRUpdateMoveSpeed::kSceneInstanceIdFieldNumber;
const int GRUpdateMoveSpeed::kOrderIdFieldNumber;
const int GRUpdateMoveSpeed::kMoveSpeedFieldNumber;
#endif  // !_MSC_VER

GRUpdateMoveSpeed::GRUpdateMoveSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRUpdateMoveSpeed)
}

void GRUpdateMoveSpeed::InitAsDefaultInstance() {
}

GRUpdateMoveSpeed::GRUpdateMoveSpeed(const GRUpdateMoveSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GRUpdateMoveSpeed)
}

void GRUpdateMoveSpeed::SharedCtor() {
  _cached_size_ = 0;
  charguid_ = GOOGLE_LONGLONG(0);
  sceneinstanceid_ = 0;
  orderid_ = 0;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRUpdateMoveSpeed::~GRUpdateMoveSpeed() {
  // @@protoc_insertion_point(destructor:GRUpdateMoveSpeed)
  SharedDtor();
}

void GRUpdateMoveSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRUpdateMoveSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRUpdateMoveSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRUpdateMoveSpeed_descriptor_;
}

const GRUpdateMoveSpeed& GRUpdateMoveSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RecastMessage_2eproto();
  return *default_instance_;
}

GRUpdateMoveSpeed* GRUpdateMoveSpeed::default_instance_ = NULL;

GRUpdateMoveSpeed* GRUpdateMoveSpeed::New() const {
  return new GRUpdateMoveSpeed;
}

void GRUpdateMoveSpeed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GRUpdateMoveSpeed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charguid_, movespeed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRUpdateMoveSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRUpdateMoveSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charGuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charguid_)));
          set_has_charguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sceneInstanceId;
        break;
      }

      // optional int32 sceneInstanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_sceneInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orderId;
        break;
      }

      // optional int32 orderId = 3;
      case 3: {
        if (tag == 24) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_moveSpeed;
        break;
      }

      // optional int32 moveSpeed = 4;
      case 4: {
        if (tag == 32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRUpdateMoveSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRUpdateMoveSpeed)
  return false;
#undef DO_
}

void GRUpdateMoveSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRUpdateMoveSpeed)
  // optional int64 charGuid = 1;
  if (has_charguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charguid(), output);
  }

  // optional int32 sceneInstanceId = 2;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneinstanceid(), output);
  }

  // optional int32 orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->orderid(), output);
  }

  // optional int32 moveSpeed = 4;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRUpdateMoveSpeed)
}

::google::protobuf::uint8* GRUpdateMoveSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRUpdateMoveSpeed)
  // optional int64 charGuid = 1;
  if (has_charguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charguid(), target);
  }

  // optional int32 sceneInstanceId = 2;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneinstanceid(), target);
  }

  // optional int32 orderId = 3;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->orderid(), target);
  }

  // optional int32 moveSpeed = 4;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRUpdateMoveSpeed)
  return target;
}

int GRUpdateMoveSpeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charGuid = 1;
    if (has_charguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charguid());
    }

    // optional int32 sceneInstanceId = 2;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional int32 orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }

    // optional int32 moveSpeed = 4;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRUpdateMoveSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRUpdateMoveSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRUpdateMoveSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRUpdateMoveSpeed::MergeFrom(const GRUpdateMoveSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charguid()) {
      set_charguid(from.charguid());
    }
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRUpdateMoveSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRUpdateMoveSpeed::CopyFrom(const GRUpdateMoveSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRUpdateMoveSpeed::IsInitialized() const {

  return true;
}

void GRUpdateMoveSpeed::Swap(GRUpdateMoveSpeed* other) {
  if (other != this) {
    std::swap(charguid_, other->charguid_);
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(orderid_, other->orderid_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRUpdateMoveSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRUpdateMoveSpeed_descriptor_;
  metadata.reflection = GRUpdateMoveSpeed_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
