// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecastMessage.proto

#ifndef PROTOBUF_RecastMessage_2eproto__INCLUDED
#define PROTOBUF_RecastMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "InnerMessage.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecastMessage_2eproto();
void protobuf_AssignDesc_RecastMessage_2eproto();
void protobuf_ShutdownFile_RecastMessage_2eproto();

class RecastRegist;
class GRStartMove;
class RGStartMoveBack;
class GRCheckMoveToRayCastTest;
class RGCheckMoveToRayCastTest;
class GRMoveStepOnPath;
class RGMoveStepOnPathBack;
class GRStopMoving;
class RGStopMovingBack;
class GRUpdateMoveSpeed;

// ===================================================================

class RecastRegist : public ::google::protobuf::Message {
 public:
  RecastRegist();
  virtual ~RecastRegist();

  RecastRegist(const RecastRegist& from);

  inline RecastRegist& operator=(const RecastRegist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecastRegist& default_instance();

  void Swap(RecastRegist* other);

  // implements Message ----------------------------------------------

  RecastRegist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecastRegist& from);
  void MergeFrom(const RecastRegist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 recastId = 1;
  inline bool has_recastid() const;
  inline void clear_recastid();
  static const int kRecastIdFieldNumber = 1;
  inline ::google::protobuf::int32 recastid() const;
  inline void set_recastid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RecastRegist)
 private:
  inline void set_has_recastid();
  inline void clear_has_recastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 recastid_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static RecastRegist* default_instance_;
};
// -------------------------------------------------------------------

class GRStartMove : public ::google::protobuf::Message {
 public:
  GRStartMove();
  virtual ~GRStartMove();

  GRStartMove(const GRStartMove& from);

  inline GRStartMove& operator=(const GRStartMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRStartMove& default_instance();

  void Swap(GRStartMove* other);

  // implements Message ----------------------------------------------

  GRStartMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRStartMove& from);
  void MergeFrom(const GRStartMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sceneInstanceId = 1;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional string mapFileName = 2;
  inline bool has_mapfilename() const;
  inline void clear_mapfilename();
  static const int kMapFileNameFieldNumber = 2;
  inline const ::std::string& mapfilename() const;
  inline void set_mapfilename(const ::std::string& value);
  inline void set_mapfilename(const char* value);
  inline void set_mapfilename(const char* value, size_t size);
  inline ::std::string* mutable_mapfilename();
  inline ::std::string* release_mapfilename();
  inline void set_allocated_mapfilename(::std::string* mapfilename);

  // optional int64 charGuid = 3;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 3;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 orderId = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional .Vector3Info startPos = 5;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  inline const ::Vector3Info& startpos() const;
  inline ::Vector3Info* mutable_startpos();
  inline ::Vector3Info* release_startpos();
  inline void set_allocated_startpos(::Vector3Info* startpos);

  // optional .Vector3Info targetPos = 6;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 6;
  inline const ::Vector3Info& targetpos() const;
  inline ::Vector3Info* mutable_targetpos();
  inline ::Vector3Info* release_targetpos();
  inline void set_allocated_targetpos(::Vector3Info* targetpos);

  // optional int64 startTime = 7;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 7;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int32 moveSpeed = 8;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // optional int32 stopRange = 9;
  inline bool has_stoprange() const;
  inline void clear_stoprange();
  static const int kStopRangeFieldNumber = 9;
  inline ::google::protobuf::int32 stoprange() const;
  inline void set_stoprange(::google::protobuf::int32 value);

  // optional int32 useRaycast = 10;
  inline bool has_useraycast() const;
  inline void clear_useraycast();
  static const int kUseRaycastFieldNumber = 10;
  inline ::google::protobuf::int32 useraycast() const;
  inline void set_useraycast(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GRStartMove)
 private:
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_mapfilename();
  inline void clear_has_mapfilename();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_stoprange();
  inline void clear_has_stoprange();
  inline void set_has_useraycast();
  inline void clear_has_useraycast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapfilename_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int64 charguid_;
  ::Vector3Info* startpos_;
  ::Vector3Info* targetpos_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::int32 stoprange_;
  ::google::protobuf::int32 useraycast_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static GRStartMove* default_instance_;
};
// -------------------------------------------------------------------

class RGStartMoveBack : public ::google::protobuf::Message {
 public:
  RGStartMoveBack();
  virtual ~RGStartMoveBack();

  RGStartMoveBack(const RGStartMoveBack& from);

  inline RGStartMoveBack& operator=(const RGStartMoveBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGStartMoveBack& default_instance();

  void Swap(RGStartMoveBack* other);

  // implements Message ----------------------------------------------

  RGStartMoveBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGStartMoveBack& from);
  void MergeFrom(const RGStartMoveBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 charGuid = 2;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 2;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 3;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional .Vector3Info startPos = 4;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 4;
  inline const ::Vector3Info& startpos() const;
  inline ::Vector3Info* mutable_startpos();
  inline ::Vector3Info* release_startpos();
  inline void set_allocated_startpos(::Vector3Info* startpos);

  // optional .Vector3Info targetPos = 5;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 5;
  inline const ::Vector3Info& targetpos() const;
  inline ::Vector3Info* mutable_targetpos();
  inline ::Vector3Info* release_targetpos();
  inline void set_allocated_targetpos(::Vector3Info* targetpos);

  // optional int32 orderId = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 6;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int64 startTime = 7;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 7;
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int32 moveSpeed = 8;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 8;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // optional int32 stopRange = 9;
  inline bool has_stoprange() const;
  inline void clear_stoprange();
  static const int kStopRangeFieldNumber = 9;
  inline ::google::protobuf::int32 stoprange() const;
  inline void set_stoprange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RGStartMoveBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_stoprange();
  inline void clear_has_stoprange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::Vector3Info* startpos_;
  ::Vector3Info* targetpos_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::int32 stoprange_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static RGStartMoveBack* default_instance_;
};
// -------------------------------------------------------------------

class GRCheckMoveToRayCastTest : public ::google::protobuf::Message {
 public:
  GRCheckMoveToRayCastTest();
  virtual ~GRCheckMoveToRayCastTest();

  GRCheckMoveToRayCastTest(const GRCheckMoveToRayCastTest& from);

  inline GRCheckMoveToRayCastTest& operator=(const GRCheckMoveToRayCastTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRCheckMoveToRayCastTest& default_instance();

  void Swap(GRCheckMoveToRayCastTest* other);

  // implements Message ----------------------------------------------

  GRCheckMoveToRayCastTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRCheckMoveToRayCastTest& from);
  void MergeFrom(const GRCheckMoveToRayCastTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sceneInstanceId = 1;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional string mapFileName = 2;
  inline bool has_mapfilename() const;
  inline void clear_mapfilename();
  static const int kMapFileNameFieldNumber = 2;
  inline const ::std::string& mapfilename() const;
  inline void set_mapfilename(const ::std::string& value);
  inline void set_mapfilename(const char* value);
  inline void set_mapfilename(const char* value, size_t size);
  inline ::std::string* mutable_mapfilename();
  inline ::std::string* release_mapfilename();
  inline void set_allocated_mapfilename(::std::string* mapfilename);

  // optional int64 charGuid = 3;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 3;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 orderId = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional .Vector3Info startPos = 5;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  inline const ::Vector3Info& startpos() const;
  inline ::Vector3Info* mutable_startpos();
  inline ::Vector3Info* release_startpos();
  inline void set_allocated_startpos(::Vector3Info* startpos);

  // optional .Vector3Info targetPos = 6;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 6;
  inline const ::Vector3Info& targetpos() const;
  inline ::Vector3Info* mutable_targetpos();
  inline ::Vector3Info* release_targetpos();
  inline void set_allocated_targetpos(::Vector3Info* targetpos);

  // @@protoc_insertion_point(class_scope:GRCheckMoveToRayCastTest)
 private:
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_mapfilename();
  inline void clear_has_mapfilename();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapfilename_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int64 charguid_;
  ::Vector3Info* startpos_;
  ::Vector3Info* targetpos_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static GRCheckMoveToRayCastTest* default_instance_;
};
// -------------------------------------------------------------------

class RGCheckMoveToRayCastTest : public ::google::protobuf::Message {
 public:
  RGCheckMoveToRayCastTest();
  virtual ~RGCheckMoveToRayCastTest();

  RGCheckMoveToRayCastTest(const RGCheckMoveToRayCastTest& from);

  inline RGCheckMoveToRayCastTest& operator=(const RGCheckMoveToRayCastTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGCheckMoveToRayCastTest& default_instance();

  void Swap(RGCheckMoveToRayCastTest* other);

  // implements Message ----------------------------------------------

  RGCheckMoveToRayCastTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGCheckMoveToRayCastTest& from);
  void MergeFrom(const RGCheckMoveToRayCastTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 charGuid = 2;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 2;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 3;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional int32 orderId = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional .Vector3Info startPos = 5;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 5;
  inline const ::Vector3Info& startpos() const;
  inline ::Vector3Info* mutable_startpos();
  inline ::Vector3Info* release_startpos();
  inline void set_allocated_startpos(::Vector3Info* startpos);

  // optional .Vector3Info targetPos = 6;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 6;
  inline const ::Vector3Info& targetpos() const;
  inline ::Vector3Info* mutable_targetpos();
  inline ::Vector3Info* release_targetpos();
  inline void set_allocated_targetpos(::Vector3Info* targetpos);

  // @@protoc_insertion_point(class_scope:RGCheckMoveToRayCastTest)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::Vector3Info* startpos_;
  ::Vector3Info* targetpos_;
  ::google::protobuf::int32 orderid_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static RGCheckMoveToRayCastTest* default_instance_;
};
// -------------------------------------------------------------------

class GRMoveStepOnPath : public ::google::protobuf::Message {
 public:
  GRMoveStepOnPath();
  virtual ~GRMoveStepOnPath();

  GRMoveStepOnPath(const GRMoveStepOnPath& from);

  inline GRMoveStepOnPath& operator=(const GRMoveStepOnPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRMoveStepOnPath& default_instance();

  void Swap(GRMoveStepOnPath* other);

  // implements Message ----------------------------------------------

  GRMoveStepOnPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRMoveStepOnPath& from);
  void MergeFrom(const GRMoveStepOnPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sceneInstanceId = 1;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional string mapFileName = 2;
  inline bool has_mapfilename() const;
  inline void clear_mapfilename();
  static const int kMapFileNameFieldNumber = 2;
  inline const ::std::string& mapfilename() const;
  inline void set_mapfilename(const ::std::string& value);
  inline void set_mapfilename(const char* value);
  inline void set_mapfilename(const char* value, size_t size);
  inline ::std::string* mutable_mapfilename();
  inline ::std::string* release_mapfilename();
  inline void set_allocated_mapfilename(::std::string* mapfilename);

  // optional int64 charGuid = 3;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 3;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 orderId = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int32 moveStep = 5;
  inline bool has_movestep() const;
  inline void clear_movestep();
  static const int kMoveStepFieldNumber = 5;
  inline ::google::protobuf::int32 movestep() const;
  inline void set_movestep(::google::protobuf::int32 value);

  // optional int32 stopRange = 6;
  inline bool has_stoprange() const;
  inline void clear_stoprange();
  static const int kStopRangeFieldNumber = 6;
  inline ::google::protobuf::int32 stoprange() const;
  inline void set_stoprange(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GRMoveStepOnPath)
 private:
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_mapfilename();
  inline void clear_has_mapfilename();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_movestep();
  inline void clear_has_movestep();
  inline void set_has_stoprange();
  inline void clear_has_stoprange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapfilename_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 movestep_;
  ::google::protobuf::int32 stoprange_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static GRMoveStepOnPath* default_instance_;
};
// -------------------------------------------------------------------

class RGMoveStepOnPathBack : public ::google::protobuf::Message {
 public:
  RGMoveStepOnPathBack();
  virtual ~RGMoveStepOnPathBack();

  RGMoveStepOnPathBack(const RGMoveStepOnPathBack& from);

  inline RGMoveStepOnPathBack& operator=(const RGMoveStepOnPathBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGMoveStepOnPathBack& default_instance();

  void Swap(RGMoveStepOnPathBack* other);

  // implements Message ----------------------------------------------

  RGMoveStepOnPathBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGMoveStepOnPathBack& from);
  void MergeFrom(const RGMoveStepOnPathBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 charGuid = 2;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 2;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 3;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional .Vector3Info pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Vector3Info& pos() const;
  inline ::Vector3Info* mutable_pos();
  inline ::Vector3Info* release_pos();
  inline void set_allocated_pos(::Vector3Info* pos);

  // optional .Vector3Info direction = 5;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 5;
  inline const ::Vector3Info& direction() const;
  inline ::Vector3Info* mutable_direction();
  inline ::Vector3Info* release_direction();
  inline void set_allocated_direction(::Vector3Info* direction);

  // optional int32 orderId = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 6;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RGMoveStepOnPathBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::Vector3Info* pos_;
  ::Vector3Info* direction_;
  ::google::protobuf::int32 orderid_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static RGMoveStepOnPathBack* default_instance_;
};
// -------------------------------------------------------------------

class GRStopMoving : public ::google::protobuf::Message {
 public:
  GRStopMoving();
  virtual ~GRStopMoving();

  GRStopMoving(const GRStopMoving& from);

  inline GRStopMoving& operator=(const GRStopMoving& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRStopMoving& default_instance();

  void Swap(GRStopMoving* other);

  // implements Message ----------------------------------------------

  GRStopMoving* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRStopMoving& from);
  void MergeFrom(const GRStopMoving& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 charGuid = 1;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 1;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 2;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional int32 orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int32 needBack = 4;
  inline bool has_needback() const;
  inline void clear_needback();
  static const int kNeedBackFieldNumber = 4;
  inline ::google::protobuf::int32 needback() const;
  inline void set_needback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GRStopMoving)
 private:
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_needback();
  inline void clear_has_needback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 needback_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static GRStopMoving* default_instance_;
};
// -------------------------------------------------------------------

class RGStopMovingBack : public ::google::protobuf::Message {
 public:
  RGStopMovingBack();
  virtual ~RGStopMovingBack();

  RGStopMovingBack(const RGStopMovingBack& from);

  inline RGStopMovingBack& operator=(const RGStopMovingBack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGStopMovingBack& default_instance();

  void Swap(RGStopMovingBack* other);

  // implements Message ----------------------------------------------

  RGStopMovingBack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGStopMovingBack& from);
  void MergeFrom(const RGStopMovingBack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int64 charGuid = 2;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 2;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 3;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional int32 orderId = 4;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RGStopMovingBack)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_orderid();
  inline void clear_has_orderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static RGStopMovingBack* default_instance_;
};
// -------------------------------------------------------------------

class GRUpdateMoveSpeed : public ::google::protobuf::Message {
 public:
  GRUpdateMoveSpeed();
  virtual ~GRUpdateMoveSpeed();

  GRUpdateMoveSpeed(const GRUpdateMoveSpeed& from);

  inline GRUpdateMoveSpeed& operator=(const GRUpdateMoveSpeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GRUpdateMoveSpeed& default_instance();

  void Swap(GRUpdateMoveSpeed* other);

  // implements Message ----------------------------------------------

  GRUpdateMoveSpeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRUpdateMoveSpeed& from);
  void MergeFrom(const GRUpdateMoveSpeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 charGuid = 1;
  inline bool has_charguid() const;
  inline void clear_charguid();
  static const int kCharGuidFieldNumber = 1;
  inline ::google::protobuf::int64 charguid() const;
  inline void set_charguid(::google::protobuf::int64 value);

  // optional int32 sceneInstanceId = 2;
  inline bool has_sceneinstanceid() const;
  inline void clear_sceneinstanceid();
  static const int kSceneInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 sceneinstanceid() const;
  inline void set_sceneinstanceid(::google::protobuf::int32 value);

  // optional int32 orderId = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional int32 moveSpeed = 4;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 4;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GRUpdateMoveSpeed)
 private:
  inline void set_has_charguid();
  inline void clear_has_charguid();
  inline void set_has_sceneinstanceid();
  inline void clear_has_sceneinstanceid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 charguid_;
  ::google::protobuf::int32 sceneinstanceid_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 movespeed_;
  friend void  protobuf_AddDesc_RecastMessage_2eproto();
  friend void protobuf_AssignDesc_RecastMessage_2eproto();
  friend void protobuf_ShutdownFile_RecastMessage_2eproto();

  void InitAsDefaultInstance();
  static GRUpdateMoveSpeed* default_instance_;
};
// ===================================================================


// ===================================================================

// RecastRegist

// optional int32 recastId = 1;
inline bool RecastRegist::has_recastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecastRegist::set_has_recastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecastRegist::clear_has_recastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecastRegist::clear_recastid() {
  recastid_ = 0;
  clear_has_recastid();
}
inline ::google::protobuf::int32 RecastRegist::recastid() const {
  // @@protoc_insertion_point(field_get:RecastRegist.recastId)
  return recastid_;
}
inline void RecastRegist::set_recastid(::google::protobuf::int32 value) {
  set_has_recastid();
  recastid_ = value;
  // @@protoc_insertion_point(field_set:RecastRegist.recastId)
}

// -------------------------------------------------------------------

// GRStartMove

// optional int32 sceneInstanceId = 1;
inline bool GRStartMove::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRStartMove::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRStartMove::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRStartMove::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 GRStartMove::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:GRStartMove.sceneInstanceId)
  return sceneinstanceid_;
}
inline void GRStartMove::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.sceneInstanceId)
}

// optional string mapFileName = 2;
inline bool GRStartMove::has_mapfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRStartMove::set_has_mapfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRStartMove::clear_has_mapfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRStartMove::clear_mapfilename() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_->clear();
  }
  clear_has_mapfilename();
}
inline const ::std::string& GRStartMove::mapfilename() const {
  // @@protoc_insertion_point(field_get:GRStartMove.mapFileName)
  return *mapfilename_;
}
inline void GRStartMove::set_mapfilename(const ::std::string& value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set:GRStartMove.mapFileName)
}
inline void GRStartMove::set_mapfilename(const char* value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GRStartMove.mapFileName)
}
inline void GRStartMove::set_mapfilename(const char* value, size_t size) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GRStartMove.mapFileName)
}
inline ::std::string* GRStartMove::mutable_mapfilename() {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GRStartMove.mapFileName)
  return mapfilename_;
}
inline ::std::string* GRStartMove::release_mapfilename() {
  clear_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapfilename_;
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GRStartMove::set_allocated_mapfilename(::std::string* mapfilename) {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (mapfilename) {
    set_has_mapfilename();
    mapfilename_ = mapfilename;
  } else {
    clear_has_mapfilename();
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GRStartMove.mapFileName)
}

// optional int64 charGuid = 3;
inline bool GRStartMove::has_charguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRStartMove::set_has_charguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRStartMove::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRStartMove::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 GRStartMove::charguid() const {
  // @@protoc_insertion_point(field_get:GRStartMove.charGuid)
  return charguid_;
}
inline void GRStartMove::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.charGuid)
}

// optional int32 orderId = 4;
inline bool GRStartMove::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GRStartMove::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GRStartMove::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GRStartMove::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 GRStartMove::orderid() const {
  // @@protoc_insertion_point(field_get:GRStartMove.orderId)
  return orderid_;
}
inline void GRStartMove::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.orderId)
}

// optional .Vector3Info startPos = 5;
inline bool GRStartMove::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GRStartMove::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GRStartMove::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GRStartMove::clear_startpos() {
  if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
  clear_has_startpos();
}
inline const ::Vector3Info& GRStartMove::startpos() const {
  // @@protoc_insertion_point(field_get:GRStartMove.startPos)
  return startpos_ != NULL ? *startpos_ : *default_instance_->startpos_;
}
inline ::Vector3Info* GRStartMove::mutable_startpos() {
  set_has_startpos();
  if (startpos_ == NULL) startpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:GRStartMove.startPos)
  return startpos_;
}
inline ::Vector3Info* GRStartMove::release_startpos() {
  clear_has_startpos();
  ::Vector3Info* temp = startpos_;
  startpos_ = NULL;
  return temp;
}
inline void GRStartMove::set_allocated_startpos(::Vector3Info* startpos) {
  delete startpos_;
  startpos_ = startpos;
  if (startpos) {
    set_has_startpos();
  } else {
    clear_has_startpos();
  }
  // @@protoc_insertion_point(field_set_allocated:GRStartMove.startPos)
}

// optional .Vector3Info targetPos = 6;
inline bool GRStartMove::has_targetpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GRStartMove::set_has_targetpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GRStartMove::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GRStartMove::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  clear_has_targetpos();
}
inline const ::Vector3Info& GRStartMove::targetpos() const {
  // @@protoc_insertion_point(field_get:GRStartMove.targetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3Info* GRStartMove::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:GRStartMove.targetPos)
  return targetpos_;
}
inline ::Vector3Info* GRStartMove::release_targetpos() {
  clear_has_targetpos();
  ::Vector3Info* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void GRStartMove::set_allocated_targetpos(::Vector3Info* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:GRStartMove.targetPos)
}

// optional int64 startTime = 7;
inline bool GRStartMove::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GRStartMove::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GRStartMove::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GRStartMove::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 GRStartMove::starttime() const {
  // @@protoc_insertion_point(field_get:GRStartMove.startTime)
  return starttime_;
}
inline void GRStartMove::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.startTime)
}

// optional int32 moveSpeed = 8;
inline bool GRStartMove::has_movespeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GRStartMove::set_has_movespeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GRStartMove::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GRStartMove::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 GRStartMove::movespeed() const {
  // @@protoc_insertion_point(field_get:GRStartMove.moveSpeed)
  return movespeed_;
}
inline void GRStartMove::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.moveSpeed)
}

// optional int32 stopRange = 9;
inline bool GRStartMove::has_stoprange() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GRStartMove::set_has_stoprange() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GRStartMove::clear_has_stoprange() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GRStartMove::clear_stoprange() {
  stoprange_ = 0;
  clear_has_stoprange();
}
inline ::google::protobuf::int32 GRStartMove::stoprange() const {
  // @@protoc_insertion_point(field_get:GRStartMove.stopRange)
  return stoprange_;
}
inline void GRStartMove::set_stoprange(::google::protobuf::int32 value) {
  set_has_stoprange();
  stoprange_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.stopRange)
}

// optional int32 useRaycast = 10;
inline bool GRStartMove::has_useraycast() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GRStartMove::set_has_useraycast() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GRStartMove::clear_has_useraycast() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GRStartMove::clear_useraycast() {
  useraycast_ = 0;
  clear_has_useraycast();
}
inline ::google::protobuf::int32 GRStartMove::useraycast() const {
  // @@protoc_insertion_point(field_get:GRStartMove.useRaycast)
  return useraycast_;
}
inline void GRStartMove::set_useraycast(::google::protobuf::int32 value) {
  set_has_useraycast();
  useraycast_ = value;
  // @@protoc_insertion_point(field_set:GRStartMove.useRaycast)
}

// -------------------------------------------------------------------

// RGStartMoveBack

// optional int32 result = 1;
inline bool RGStartMoveBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGStartMoveBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGStartMoveBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGStartMoveBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RGStartMoveBack::result() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.result)
  return result_;
}
inline void RGStartMoveBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.result)
}

// optional int64 charGuid = 2;
inline bool RGStartMoveBack::has_charguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGStartMoveBack::set_has_charguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGStartMoveBack::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGStartMoveBack::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 RGStartMoveBack::charguid() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.charGuid)
  return charguid_;
}
inline void RGStartMoveBack::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.charGuid)
}

// optional int32 sceneInstanceId = 3;
inline bool RGStartMoveBack::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGStartMoveBack::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGStartMoveBack::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGStartMoveBack::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 RGStartMoveBack::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.sceneInstanceId)
  return sceneinstanceid_;
}
inline void RGStartMoveBack::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.sceneInstanceId)
}

// optional .Vector3Info startPos = 4;
inline bool RGStartMoveBack::has_startpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RGStartMoveBack::set_has_startpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RGStartMoveBack::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RGStartMoveBack::clear_startpos() {
  if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
  clear_has_startpos();
}
inline const ::Vector3Info& RGStartMoveBack::startpos() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.startPos)
  return startpos_ != NULL ? *startpos_ : *default_instance_->startpos_;
}
inline ::Vector3Info* RGStartMoveBack::mutable_startpos() {
  set_has_startpos();
  if (startpos_ == NULL) startpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGStartMoveBack.startPos)
  return startpos_;
}
inline ::Vector3Info* RGStartMoveBack::release_startpos() {
  clear_has_startpos();
  ::Vector3Info* temp = startpos_;
  startpos_ = NULL;
  return temp;
}
inline void RGStartMoveBack::set_allocated_startpos(::Vector3Info* startpos) {
  delete startpos_;
  startpos_ = startpos;
  if (startpos) {
    set_has_startpos();
  } else {
    clear_has_startpos();
  }
  // @@protoc_insertion_point(field_set_allocated:RGStartMoveBack.startPos)
}

// optional .Vector3Info targetPos = 5;
inline bool RGStartMoveBack::has_targetpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RGStartMoveBack::set_has_targetpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RGStartMoveBack::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RGStartMoveBack::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  clear_has_targetpos();
}
inline const ::Vector3Info& RGStartMoveBack::targetpos() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.targetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3Info* RGStartMoveBack::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGStartMoveBack.targetPos)
  return targetpos_;
}
inline ::Vector3Info* RGStartMoveBack::release_targetpos() {
  clear_has_targetpos();
  ::Vector3Info* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void RGStartMoveBack::set_allocated_targetpos(::Vector3Info* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:RGStartMoveBack.targetPos)
}

// optional int32 orderId = 6;
inline bool RGStartMoveBack::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RGStartMoveBack::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RGStartMoveBack::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RGStartMoveBack::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 RGStartMoveBack::orderid() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.orderId)
  return orderid_;
}
inline void RGStartMoveBack::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.orderId)
}

// optional int64 startTime = 7;
inline bool RGStartMoveBack::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RGStartMoveBack::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RGStartMoveBack::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RGStartMoveBack::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 RGStartMoveBack::starttime() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.startTime)
  return starttime_;
}
inline void RGStartMoveBack::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.startTime)
}

// optional int32 moveSpeed = 8;
inline bool RGStartMoveBack::has_movespeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RGStartMoveBack::set_has_movespeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RGStartMoveBack::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RGStartMoveBack::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 RGStartMoveBack::movespeed() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.moveSpeed)
  return movespeed_;
}
inline void RGStartMoveBack::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.moveSpeed)
}

// optional int32 stopRange = 9;
inline bool RGStartMoveBack::has_stoprange() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RGStartMoveBack::set_has_stoprange() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RGStartMoveBack::clear_has_stoprange() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RGStartMoveBack::clear_stoprange() {
  stoprange_ = 0;
  clear_has_stoprange();
}
inline ::google::protobuf::int32 RGStartMoveBack::stoprange() const {
  // @@protoc_insertion_point(field_get:RGStartMoveBack.stopRange)
  return stoprange_;
}
inline void RGStartMoveBack::set_stoprange(::google::protobuf::int32 value) {
  set_has_stoprange();
  stoprange_ = value;
  // @@protoc_insertion_point(field_set:RGStartMoveBack.stopRange)
}

// -------------------------------------------------------------------

// GRCheckMoveToRayCastTest

// optional int32 sceneInstanceId = 1;
inline bool GRCheckMoveToRayCastTest::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRCheckMoveToRayCastTest::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRCheckMoveToRayCastTest::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 GRCheckMoveToRayCastTest::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.sceneInstanceId)
  return sceneinstanceid_;
}
inline void GRCheckMoveToRayCastTest::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:GRCheckMoveToRayCastTest.sceneInstanceId)
}

// optional string mapFileName = 2;
inline bool GRCheckMoveToRayCastTest::has_mapfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_mapfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRCheckMoveToRayCastTest::clear_has_mapfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRCheckMoveToRayCastTest::clear_mapfilename() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_->clear();
  }
  clear_has_mapfilename();
}
inline const ::std::string& GRCheckMoveToRayCastTest::mapfilename() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.mapFileName)
  return *mapfilename_;
}
inline void GRCheckMoveToRayCastTest::set_mapfilename(const ::std::string& value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set:GRCheckMoveToRayCastTest.mapFileName)
}
inline void GRCheckMoveToRayCastTest::set_mapfilename(const char* value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GRCheckMoveToRayCastTest.mapFileName)
}
inline void GRCheckMoveToRayCastTest::set_mapfilename(const char* value, size_t size) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GRCheckMoveToRayCastTest.mapFileName)
}
inline ::std::string* GRCheckMoveToRayCastTest::mutable_mapfilename() {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GRCheckMoveToRayCastTest.mapFileName)
  return mapfilename_;
}
inline ::std::string* GRCheckMoveToRayCastTest::release_mapfilename() {
  clear_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapfilename_;
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GRCheckMoveToRayCastTest::set_allocated_mapfilename(::std::string* mapfilename) {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (mapfilename) {
    set_has_mapfilename();
    mapfilename_ = mapfilename;
  } else {
    clear_has_mapfilename();
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GRCheckMoveToRayCastTest.mapFileName)
}

// optional int64 charGuid = 3;
inline bool GRCheckMoveToRayCastTest::has_charguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_charguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRCheckMoveToRayCastTest::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRCheckMoveToRayCastTest::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 GRCheckMoveToRayCastTest::charguid() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.charGuid)
  return charguid_;
}
inline void GRCheckMoveToRayCastTest::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:GRCheckMoveToRayCastTest.charGuid)
}

// optional int32 orderId = 4;
inline bool GRCheckMoveToRayCastTest::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GRCheckMoveToRayCastTest::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GRCheckMoveToRayCastTest::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 GRCheckMoveToRayCastTest::orderid() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.orderId)
  return orderid_;
}
inline void GRCheckMoveToRayCastTest::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:GRCheckMoveToRayCastTest.orderId)
}

// optional .Vector3Info startPos = 5;
inline bool GRCheckMoveToRayCastTest::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GRCheckMoveToRayCastTest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GRCheckMoveToRayCastTest::clear_startpos() {
  if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
  clear_has_startpos();
}
inline const ::Vector3Info& GRCheckMoveToRayCastTest::startpos() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.startPos)
  return startpos_ != NULL ? *startpos_ : *default_instance_->startpos_;
}
inline ::Vector3Info* GRCheckMoveToRayCastTest::mutable_startpos() {
  set_has_startpos();
  if (startpos_ == NULL) startpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:GRCheckMoveToRayCastTest.startPos)
  return startpos_;
}
inline ::Vector3Info* GRCheckMoveToRayCastTest::release_startpos() {
  clear_has_startpos();
  ::Vector3Info* temp = startpos_;
  startpos_ = NULL;
  return temp;
}
inline void GRCheckMoveToRayCastTest::set_allocated_startpos(::Vector3Info* startpos) {
  delete startpos_;
  startpos_ = startpos;
  if (startpos) {
    set_has_startpos();
  } else {
    clear_has_startpos();
  }
  // @@protoc_insertion_point(field_set_allocated:GRCheckMoveToRayCastTest.startPos)
}

// optional .Vector3Info targetPos = 6;
inline bool GRCheckMoveToRayCastTest::has_targetpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GRCheckMoveToRayCastTest::set_has_targetpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GRCheckMoveToRayCastTest::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GRCheckMoveToRayCastTest::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  clear_has_targetpos();
}
inline const ::Vector3Info& GRCheckMoveToRayCastTest::targetpos() const {
  // @@protoc_insertion_point(field_get:GRCheckMoveToRayCastTest.targetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3Info* GRCheckMoveToRayCastTest::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:GRCheckMoveToRayCastTest.targetPos)
  return targetpos_;
}
inline ::Vector3Info* GRCheckMoveToRayCastTest::release_targetpos() {
  clear_has_targetpos();
  ::Vector3Info* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void GRCheckMoveToRayCastTest::set_allocated_targetpos(::Vector3Info* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:GRCheckMoveToRayCastTest.targetPos)
}

// -------------------------------------------------------------------

// RGCheckMoveToRayCastTest

// optional int32 result = 1;
inline bool RGCheckMoveToRayCastTest::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGCheckMoveToRayCastTest::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGCheckMoveToRayCastTest::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RGCheckMoveToRayCastTest::result() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.result)
  return result_;
}
inline void RGCheckMoveToRayCastTest::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RGCheckMoveToRayCastTest.result)
}

// optional int64 charGuid = 2;
inline bool RGCheckMoveToRayCastTest::has_charguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_charguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGCheckMoveToRayCastTest::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGCheckMoveToRayCastTest::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 RGCheckMoveToRayCastTest::charguid() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.charGuid)
  return charguid_;
}
inline void RGCheckMoveToRayCastTest::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:RGCheckMoveToRayCastTest.charGuid)
}

// optional int32 sceneInstanceId = 3;
inline bool RGCheckMoveToRayCastTest::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGCheckMoveToRayCastTest::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGCheckMoveToRayCastTest::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 RGCheckMoveToRayCastTest::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.sceneInstanceId)
  return sceneinstanceid_;
}
inline void RGCheckMoveToRayCastTest::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:RGCheckMoveToRayCastTest.sceneInstanceId)
}

// optional int32 orderId = 4;
inline bool RGCheckMoveToRayCastTest::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RGCheckMoveToRayCastTest::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RGCheckMoveToRayCastTest::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 RGCheckMoveToRayCastTest::orderid() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.orderId)
  return orderid_;
}
inline void RGCheckMoveToRayCastTest::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:RGCheckMoveToRayCastTest.orderId)
}

// optional .Vector3Info startPos = 5;
inline bool RGCheckMoveToRayCastTest::has_startpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_startpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RGCheckMoveToRayCastTest::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RGCheckMoveToRayCastTest::clear_startpos() {
  if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
  clear_has_startpos();
}
inline const ::Vector3Info& RGCheckMoveToRayCastTest::startpos() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.startPos)
  return startpos_ != NULL ? *startpos_ : *default_instance_->startpos_;
}
inline ::Vector3Info* RGCheckMoveToRayCastTest::mutable_startpos() {
  set_has_startpos();
  if (startpos_ == NULL) startpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGCheckMoveToRayCastTest.startPos)
  return startpos_;
}
inline ::Vector3Info* RGCheckMoveToRayCastTest::release_startpos() {
  clear_has_startpos();
  ::Vector3Info* temp = startpos_;
  startpos_ = NULL;
  return temp;
}
inline void RGCheckMoveToRayCastTest::set_allocated_startpos(::Vector3Info* startpos) {
  delete startpos_;
  startpos_ = startpos;
  if (startpos) {
    set_has_startpos();
  } else {
    clear_has_startpos();
  }
  // @@protoc_insertion_point(field_set_allocated:RGCheckMoveToRayCastTest.startPos)
}

// optional .Vector3Info targetPos = 6;
inline bool RGCheckMoveToRayCastTest::has_targetpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RGCheckMoveToRayCastTest::set_has_targetpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RGCheckMoveToRayCastTest::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RGCheckMoveToRayCastTest::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  clear_has_targetpos();
}
inline const ::Vector3Info& RGCheckMoveToRayCastTest::targetpos() const {
  // @@protoc_insertion_point(field_get:RGCheckMoveToRayCastTest.targetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::Vector3Info* RGCheckMoveToRayCastTest::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGCheckMoveToRayCastTest.targetPos)
  return targetpos_;
}
inline ::Vector3Info* RGCheckMoveToRayCastTest::release_targetpos() {
  clear_has_targetpos();
  ::Vector3Info* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void RGCheckMoveToRayCastTest::set_allocated_targetpos(::Vector3Info* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:RGCheckMoveToRayCastTest.targetPos)
}

// -------------------------------------------------------------------

// GRMoveStepOnPath

// optional int32 sceneInstanceId = 1;
inline bool GRMoveStepOnPath::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRMoveStepOnPath::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRMoveStepOnPath::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRMoveStepOnPath::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 GRMoveStepOnPath::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.sceneInstanceId)
  return sceneinstanceid_;
}
inline void GRMoveStepOnPath::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.sceneInstanceId)
}

// optional string mapFileName = 2;
inline bool GRMoveStepOnPath::has_mapfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRMoveStepOnPath::set_has_mapfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRMoveStepOnPath::clear_has_mapfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRMoveStepOnPath::clear_mapfilename() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_->clear();
  }
  clear_has_mapfilename();
}
inline const ::std::string& GRMoveStepOnPath::mapfilename() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.mapFileName)
  return *mapfilename_;
}
inline void GRMoveStepOnPath::set_mapfilename(const ::std::string& value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.mapFileName)
}
inline void GRMoveStepOnPath::set_mapfilename(const char* value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:GRMoveStepOnPath.mapFileName)
}
inline void GRMoveStepOnPath::set_mapfilename(const char* value, size_t size) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GRMoveStepOnPath.mapFileName)
}
inline ::std::string* GRMoveStepOnPath::mutable_mapfilename() {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:GRMoveStepOnPath.mapFileName)
  return mapfilename_;
}
inline ::std::string* GRMoveStepOnPath::release_mapfilename() {
  clear_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapfilename_;
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GRMoveStepOnPath::set_allocated_mapfilename(::std::string* mapfilename) {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (mapfilename) {
    set_has_mapfilename();
    mapfilename_ = mapfilename;
  } else {
    clear_has_mapfilename();
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:GRMoveStepOnPath.mapFileName)
}

// optional int64 charGuid = 3;
inline bool GRMoveStepOnPath::has_charguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRMoveStepOnPath::set_has_charguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRMoveStepOnPath::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRMoveStepOnPath::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 GRMoveStepOnPath::charguid() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.charGuid)
  return charguid_;
}
inline void GRMoveStepOnPath::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.charGuid)
}

// optional int32 orderId = 4;
inline bool GRMoveStepOnPath::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GRMoveStepOnPath::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GRMoveStepOnPath::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GRMoveStepOnPath::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 GRMoveStepOnPath::orderid() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.orderId)
  return orderid_;
}
inline void GRMoveStepOnPath::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.orderId)
}

// optional int32 moveStep = 5;
inline bool GRMoveStepOnPath::has_movestep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GRMoveStepOnPath::set_has_movestep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GRMoveStepOnPath::clear_has_movestep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GRMoveStepOnPath::clear_movestep() {
  movestep_ = 0;
  clear_has_movestep();
}
inline ::google::protobuf::int32 GRMoveStepOnPath::movestep() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.moveStep)
  return movestep_;
}
inline void GRMoveStepOnPath::set_movestep(::google::protobuf::int32 value) {
  set_has_movestep();
  movestep_ = value;
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.moveStep)
}

// optional int32 stopRange = 6;
inline bool GRMoveStepOnPath::has_stoprange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GRMoveStepOnPath::set_has_stoprange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GRMoveStepOnPath::clear_has_stoprange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GRMoveStepOnPath::clear_stoprange() {
  stoprange_ = 0;
  clear_has_stoprange();
}
inline ::google::protobuf::int32 GRMoveStepOnPath::stoprange() const {
  // @@protoc_insertion_point(field_get:GRMoveStepOnPath.stopRange)
  return stoprange_;
}
inline void GRMoveStepOnPath::set_stoprange(::google::protobuf::int32 value) {
  set_has_stoprange();
  stoprange_ = value;
  // @@protoc_insertion_point(field_set:GRMoveStepOnPath.stopRange)
}

// -------------------------------------------------------------------

// RGMoveStepOnPathBack

// optional int32 result = 1;
inline bool RGMoveStepOnPathBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGMoveStepOnPathBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGMoveStepOnPathBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RGMoveStepOnPathBack::result() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.result)
  return result_;
}
inline void RGMoveStepOnPathBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RGMoveStepOnPathBack.result)
}

// optional int64 charGuid = 2;
inline bool RGMoveStepOnPathBack::has_charguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_charguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGMoveStepOnPathBack::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGMoveStepOnPathBack::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 RGMoveStepOnPathBack::charguid() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.charGuid)
  return charguid_;
}
inline void RGMoveStepOnPathBack::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:RGMoveStepOnPathBack.charGuid)
}

// optional int32 sceneInstanceId = 3;
inline bool RGMoveStepOnPathBack::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGMoveStepOnPathBack::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGMoveStepOnPathBack::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 RGMoveStepOnPathBack::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.sceneInstanceId)
  return sceneinstanceid_;
}
inline void RGMoveStepOnPathBack::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:RGMoveStepOnPathBack.sceneInstanceId)
}

// optional .Vector3Info pos = 4;
inline bool RGMoveStepOnPathBack::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RGMoveStepOnPathBack::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RGMoveStepOnPathBack::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3Info::Clear();
  clear_has_pos();
}
inline const ::Vector3Info& RGMoveStepOnPathBack::pos() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3Info* RGMoveStepOnPathBack::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGMoveStepOnPathBack.pos)
  return pos_;
}
inline ::Vector3Info* RGMoveStepOnPathBack::release_pos() {
  clear_has_pos();
  ::Vector3Info* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void RGMoveStepOnPathBack::set_allocated_pos(::Vector3Info* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:RGMoveStepOnPathBack.pos)
}

// optional .Vector3Info direction = 5;
inline bool RGMoveStepOnPathBack::has_direction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_direction() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RGMoveStepOnPathBack::clear_has_direction() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RGMoveStepOnPathBack::clear_direction() {
  if (direction_ != NULL) direction_->::Vector3Info::Clear();
  clear_has_direction();
}
inline const ::Vector3Info& RGMoveStepOnPathBack::direction() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::Vector3Info* RGMoveStepOnPathBack::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::Vector3Info;
  // @@protoc_insertion_point(field_mutable:RGMoveStepOnPathBack.direction)
  return direction_;
}
inline ::Vector3Info* RGMoveStepOnPathBack::release_direction() {
  clear_has_direction();
  ::Vector3Info* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void RGMoveStepOnPathBack::set_allocated_direction(::Vector3Info* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:RGMoveStepOnPathBack.direction)
}

// optional int32 orderId = 6;
inline bool RGMoveStepOnPathBack::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RGMoveStepOnPathBack::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RGMoveStepOnPathBack::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RGMoveStepOnPathBack::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 RGMoveStepOnPathBack::orderid() const {
  // @@protoc_insertion_point(field_get:RGMoveStepOnPathBack.orderId)
  return orderid_;
}
inline void RGMoveStepOnPathBack::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:RGMoveStepOnPathBack.orderId)
}

// -------------------------------------------------------------------

// GRStopMoving

// optional int64 charGuid = 1;
inline bool GRStopMoving::has_charguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRStopMoving::set_has_charguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRStopMoving::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRStopMoving::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 GRStopMoving::charguid() const {
  // @@protoc_insertion_point(field_get:GRStopMoving.charGuid)
  return charguid_;
}
inline void GRStopMoving::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:GRStopMoving.charGuid)
}

// optional int32 sceneInstanceId = 2;
inline bool GRStopMoving::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRStopMoving::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRStopMoving::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRStopMoving::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 GRStopMoving::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:GRStopMoving.sceneInstanceId)
  return sceneinstanceid_;
}
inline void GRStopMoving::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:GRStopMoving.sceneInstanceId)
}

// optional int32 orderId = 3;
inline bool GRStopMoving::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRStopMoving::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRStopMoving::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRStopMoving::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 GRStopMoving::orderid() const {
  // @@protoc_insertion_point(field_get:GRStopMoving.orderId)
  return orderid_;
}
inline void GRStopMoving::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:GRStopMoving.orderId)
}

// optional int32 needBack = 4;
inline bool GRStopMoving::has_needback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GRStopMoving::set_has_needback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GRStopMoving::clear_has_needback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GRStopMoving::clear_needback() {
  needback_ = 0;
  clear_has_needback();
}
inline ::google::protobuf::int32 GRStopMoving::needback() const {
  // @@protoc_insertion_point(field_get:GRStopMoving.needBack)
  return needback_;
}
inline void GRStopMoving::set_needback(::google::protobuf::int32 value) {
  set_has_needback();
  needback_ = value;
  // @@protoc_insertion_point(field_set:GRStopMoving.needBack)
}

// -------------------------------------------------------------------

// RGStopMovingBack

// optional int32 result = 1;
inline bool RGStopMovingBack::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RGStopMovingBack::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RGStopMovingBack::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RGStopMovingBack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 RGStopMovingBack::result() const {
  // @@protoc_insertion_point(field_get:RGStopMovingBack.result)
  return result_;
}
inline void RGStopMovingBack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:RGStopMovingBack.result)
}

// optional int64 charGuid = 2;
inline bool RGStopMovingBack::has_charguid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RGStopMovingBack::set_has_charguid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RGStopMovingBack::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RGStopMovingBack::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 RGStopMovingBack::charguid() const {
  // @@protoc_insertion_point(field_get:RGStopMovingBack.charGuid)
  return charguid_;
}
inline void RGStopMovingBack::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:RGStopMovingBack.charGuid)
}

// optional int32 sceneInstanceId = 3;
inline bool RGStopMovingBack::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RGStopMovingBack::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RGStopMovingBack::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RGStopMovingBack::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 RGStopMovingBack::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:RGStopMovingBack.sceneInstanceId)
  return sceneinstanceid_;
}
inline void RGStopMovingBack::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:RGStopMovingBack.sceneInstanceId)
}

// optional int32 orderId = 4;
inline bool RGStopMovingBack::has_orderid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RGStopMovingBack::set_has_orderid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RGStopMovingBack::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RGStopMovingBack::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 RGStopMovingBack::orderid() const {
  // @@protoc_insertion_point(field_get:RGStopMovingBack.orderId)
  return orderid_;
}
inline void RGStopMovingBack::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:RGStopMovingBack.orderId)
}

// -------------------------------------------------------------------

// GRUpdateMoveSpeed

// optional int64 charGuid = 1;
inline bool GRUpdateMoveSpeed::has_charguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GRUpdateMoveSpeed::set_has_charguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GRUpdateMoveSpeed::clear_has_charguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GRUpdateMoveSpeed::clear_charguid() {
  charguid_ = GOOGLE_LONGLONG(0);
  clear_has_charguid();
}
inline ::google::protobuf::int64 GRUpdateMoveSpeed::charguid() const {
  // @@protoc_insertion_point(field_get:GRUpdateMoveSpeed.charGuid)
  return charguid_;
}
inline void GRUpdateMoveSpeed::set_charguid(::google::protobuf::int64 value) {
  set_has_charguid();
  charguid_ = value;
  // @@protoc_insertion_point(field_set:GRUpdateMoveSpeed.charGuid)
}

// optional int32 sceneInstanceId = 2;
inline bool GRUpdateMoveSpeed::has_sceneinstanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GRUpdateMoveSpeed::set_has_sceneinstanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GRUpdateMoveSpeed::clear_has_sceneinstanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GRUpdateMoveSpeed::clear_sceneinstanceid() {
  sceneinstanceid_ = 0;
  clear_has_sceneinstanceid();
}
inline ::google::protobuf::int32 GRUpdateMoveSpeed::sceneinstanceid() const {
  // @@protoc_insertion_point(field_get:GRUpdateMoveSpeed.sceneInstanceId)
  return sceneinstanceid_;
}
inline void GRUpdateMoveSpeed::set_sceneinstanceid(::google::protobuf::int32 value) {
  set_has_sceneinstanceid();
  sceneinstanceid_ = value;
  // @@protoc_insertion_point(field_set:GRUpdateMoveSpeed.sceneInstanceId)
}

// optional int32 orderId = 3;
inline bool GRUpdateMoveSpeed::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GRUpdateMoveSpeed::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GRUpdateMoveSpeed::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GRUpdateMoveSpeed::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 GRUpdateMoveSpeed::orderid() const {
  // @@protoc_insertion_point(field_get:GRUpdateMoveSpeed.orderId)
  return orderid_;
}
inline void GRUpdateMoveSpeed::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:GRUpdateMoveSpeed.orderId)
}

// optional int32 moveSpeed = 4;
inline bool GRUpdateMoveSpeed::has_movespeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GRUpdateMoveSpeed::set_has_movespeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GRUpdateMoveSpeed::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GRUpdateMoveSpeed::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 GRUpdateMoveSpeed::movespeed() const {
  // @@protoc_insertion_point(field_get:GRUpdateMoveSpeed.moveSpeed)
  return movespeed_;
}
inline void GRUpdateMoveSpeed::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:GRUpdateMoveSpeed.moveSpeed)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecastMessage_2eproto__INCLUDED
