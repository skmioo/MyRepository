// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourceMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResourceMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRequestResourceInfoBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRequestResourceInfoBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCGetResourceBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCGetResourceBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResourceMessage_2eproto() {
  protobuf_AddDesc_ResourceMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResourceMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceInfo_descriptor_ = file->message_type(0);
  static const int ResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, backnum_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  GCRequestResourceInfoBack_descriptor_ = file->message_type(1);
  static const int GCRequestResourceInfoBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestResourceInfoBack, resourceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestResourceInfoBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestResourceInfoBack, loginlv_),
  };
  GCRequestResourceInfoBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRequestResourceInfoBack_descriptor_,
      GCRequestResourceInfoBack::default_instance_,
      GCRequestResourceInfoBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestResourceInfoBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequestResourceInfoBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRequestResourceInfoBack));
  CGGetResource_descriptor_ = file->message_type(2);
  static const int CGGetResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetResource, gettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetResource, consumetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetResource, resourceid_),
  };
  CGGetResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetResource_descriptor_,
      CGGetResource::default_instance_,
      CGGetResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetResource));
  GCGetResourceBack_descriptor_ = file->message_type(3);
  static const int GCGetResourceBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetResourceBack, resourceinfo_),
  };
  GCGetResourceBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCGetResourceBack_descriptor_,
      GCGetResourceBack::default_instance_,
      GCGetResourceBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetResourceBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGetResourceBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCGetResourceBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResourceMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRequestResourceInfoBack_descriptor_, &GCRequestResourceInfoBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetResource_descriptor_, &CGGetResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCGetResourceBack_descriptor_, &GCGetResourceBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResourceMessage_2eproto() {
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete GCRequestResourceInfoBack::default_instance_;
  delete GCRequestResourceInfoBack_reflection_;
  delete CGGetResource::default_instance_;
  delete CGGetResource_reflection_;
  delete GCGetResourceBack::default_instance_;
  delete GCGetResourceBack_reflection_;
}

void protobuf_AddDesc_ResourceMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ResourceMessage.proto\"+\n\014ResourceInfo\022"
    "\n\n\002id\030\001 \001(\005\022\017\n\007backNum\030\002 \001(\005\"_\n\031GCReques"
    "tResourceInfoBack\022#\n\014resourceInfo\030\001 \003(\0132"
    "\r.ResourceInfo\022\014\n\004type\030\002 \001(\005\022\017\n\007loginLv\030"
    "\003 \001(\005\"I\n\rCGGetResource\022\017\n\007getType\030\001 \001(\005\022"
    "\023\n\013consumeType\030\002 \001(\005\022\022\n\nresourceId\030\003 \001(\005"
    "\"8\n\021GCGetResourceBack\022#\n\014resourceInfo\030\001 "
    "\003(\0132\r.ResourceInfoB\031\n\027com.mile.common.me"
    "ssage", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResourceMessage.proto", &protobuf_RegisterTypes);
  ResourceInfo::default_instance_ = new ResourceInfo();
  GCRequestResourceInfoBack::default_instance_ = new GCRequestResourceInfoBack();
  CGGetResource::default_instance_ = new CGGetResource();
  GCGetResourceBack::default_instance_ = new GCGetResourceBack();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  GCRequestResourceInfoBack::default_instance_->InitAsDefaultInstance();
  CGGetResource::default_instance_->InitAsDefaultInstance();
  GCGetResourceBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResourceMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResourceMessage_2eproto {
  StaticDescriptorInitializer_ResourceMessage_2eproto() {
    protobuf_AddDesc_ResourceMessage_2eproto();
  }
} static_descriptor_initializer_ResourceMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kIdFieldNumber;
const int ResourceInfo::kBackNumFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResourceInfo)
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResourceInfo)
}

void ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  backnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  // @@protoc_insertion_point(destructor:ResourceInfo)
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceMessage_2eproto();
  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResourceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, backnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_backNum;
        break;
      }

      // optional int32 backNum = 2;
      case 2: {
        if (tag == 16) {
         parse_backNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backnum_)));
          set_has_backnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResourceInfo)
  return false;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResourceInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 backNum = 2;
  if (has_backnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->backnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResourceInfo)
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 backNum = 2;
  if (has_backnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->backnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceInfo)
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 backNum = 2;
    if (has_backnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_backnum()) {
      set_backnum(from.backnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {

  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(backnum_, other->backnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRequestResourceInfoBack::kResourceInfoFieldNumber;
const int GCRequestResourceInfoBack::kTypeFieldNumber;
const int GCRequestResourceInfoBack::kLoginLvFieldNumber;
#endif  // !_MSC_VER

GCRequestResourceInfoBack::GCRequestResourceInfoBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRequestResourceInfoBack)
}

void GCRequestResourceInfoBack::InitAsDefaultInstance() {
}

GCRequestResourceInfoBack::GCRequestResourceInfoBack(const GCRequestResourceInfoBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRequestResourceInfoBack)
}

void GCRequestResourceInfoBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  loginlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRequestResourceInfoBack::~GCRequestResourceInfoBack() {
  // @@protoc_insertion_point(destructor:GCRequestResourceInfoBack)
  SharedDtor();
}

void GCRequestResourceInfoBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRequestResourceInfoBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRequestResourceInfoBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRequestResourceInfoBack_descriptor_;
}

const GCRequestResourceInfoBack& GCRequestResourceInfoBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceMessage_2eproto();
  return *default_instance_;
}

GCRequestResourceInfoBack* GCRequestResourceInfoBack::default_instance_ = NULL;

GCRequestResourceInfoBack* GCRequestResourceInfoBack::New() const {
  return new GCRequestResourceInfoBack;
}

void GCRequestResourceInfoBack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRequestResourceInfoBack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, loginlv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  resourceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRequestResourceInfoBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRequestResourceInfoBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ResourceInfo resourceInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_resourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_resourceInfo;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loginLv;
        break;
      }

      // optional int32 loginLv = 3;
      case 3: {
        if (tag == 24) {
         parse_loginLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginlv_)));
          set_has_loginlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRequestResourceInfoBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRequestResourceInfoBack)
  return false;
#undef DO_
}

void GCRequestResourceInfoBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRequestResourceInfoBack)
  // repeated .ResourceInfo resourceInfo = 1;
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resourceinfo(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 loginLv = 3;
  if (has_loginlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->loginlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRequestResourceInfoBack)
}

::google::protobuf::uint8* GCRequestResourceInfoBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRequestResourceInfoBack)
  // repeated .ResourceInfo resourceInfo = 1;
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resourceinfo(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 loginLv = 3;
  if (has_loginlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->loginlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRequestResourceInfoBack)
  return target;
}

int GCRequestResourceInfoBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 loginLv = 3;
    if (has_loginlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginlv());
    }

  }
  // repeated .ResourceInfo resourceInfo = 1;
  total_size += 1 * this->resourceinfo_size();
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRequestResourceInfoBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRequestResourceInfoBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRequestResourceInfoBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRequestResourceInfoBack::MergeFrom(const GCRequestResourceInfoBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  resourceinfo_.MergeFrom(from.resourceinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_loginlv()) {
      set_loginlv(from.loginlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRequestResourceInfoBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRequestResourceInfoBack::CopyFrom(const GCRequestResourceInfoBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRequestResourceInfoBack::IsInitialized() const {

  return true;
}

void GCRequestResourceInfoBack::Swap(GCRequestResourceInfoBack* other) {
  if (other != this) {
    resourceinfo_.Swap(&other->resourceinfo_);
    std::swap(type_, other->type_);
    std::swap(loginlv_, other->loginlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRequestResourceInfoBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRequestResourceInfoBack_descriptor_;
  metadata.reflection = GCRequestResourceInfoBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetResource::kGetTypeFieldNumber;
const int CGGetResource::kConsumeTypeFieldNumber;
const int CGGetResource::kResourceIdFieldNumber;
#endif  // !_MSC_VER

CGGetResource::CGGetResource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetResource)
}

void CGGetResource::InitAsDefaultInstance() {
}

CGGetResource::CGGetResource(const CGGetResource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetResource)
}

void CGGetResource::SharedCtor() {
  _cached_size_ = 0;
  gettype_ = 0;
  consumetype_ = 0;
  resourceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetResource::~CGGetResource() {
  // @@protoc_insertion_point(destructor:CGGetResource)
  SharedDtor();
}

void CGGetResource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetResource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetResource_descriptor_;
}

const CGGetResource& CGGetResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceMessage_2eproto();
  return *default_instance_;
}

CGGetResource* CGGetResource::default_instance_ = NULL;

CGGetResource* CGGetResource::New() const {
  return new CGGetResource;
}

void CGGetResource::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGGetResource*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gettype_, resourceid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetResource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 getType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gettype_)));
          set_has_gettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_consumeType;
        break;
      }

      // optional int32 consumeType = 2;
      case 2: {
        if (tag == 16) {
         parse_consumeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumetype_)));
          set_has_consumetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_resourceId;
        break;
      }

      // optional int32 resourceId = 3;
      case 3: {
        if (tag == 24) {
         parse_resourceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourceid_)));
          set_has_resourceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetResource)
  return false;
#undef DO_
}

void CGGetResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetResource)
  // optional int32 getType = 1;
  if (has_gettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gettype(), output);
  }

  // optional int32 consumeType = 2;
  if (has_consumetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->consumetype(), output);
  }

  // optional int32 resourceId = 3;
  if (has_resourceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resourceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetResource)
}

::google::protobuf::uint8* CGGetResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetResource)
  // optional int32 getType = 1;
  if (has_gettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gettype(), target);
  }

  // optional int32 consumeType = 2;
  if (has_consumetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->consumetype(), target);
  }

  // optional int32 resourceId = 3;
  if (has_resourceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resourceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetResource)
  return target;
}

int CGGetResource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 getType = 1;
    if (has_gettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gettype());
    }

    // optional int32 consumeType = 2;
    if (has_consumetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumetype());
    }

    // optional int32 resourceId = 3;
    if (has_resourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetResource::MergeFrom(const CGGetResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gettype()) {
      set_gettype(from.gettype());
    }
    if (from.has_consumetype()) {
      set_consumetype(from.consumetype());
    }
    if (from.has_resourceid()) {
      set_resourceid(from.resourceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetResource::CopyFrom(const CGGetResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetResource::IsInitialized() const {

  return true;
}

void CGGetResource::Swap(CGGetResource* other) {
  if (other != this) {
    std::swap(gettype_, other->gettype_);
    std::swap(consumetype_, other->consumetype_);
    std::swap(resourceid_, other->resourceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetResource_descriptor_;
  metadata.reflection = CGGetResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCGetResourceBack::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

GCGetResourceBack::GCGetResourceBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCGetResourceBack)
}

void GCGetResourceBack::InitAsDefaultInstance() {
}

GCGetResourceBack::GCGetResourceBack(const GCGetResourceBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCGetResourceBack)
}

void GCGetResourceBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCGetResourceBack::~GCGetResourceBack() {
  // @@protoc_insertion_point(destructor:GCGetResourceBack)
  SharedDtor();
}

void GCGetResourceBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCGetResourceBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGetResourceBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCGetResourceBack_descriptor_;
}

const GCGetResourceBack& GCGetResourceBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceMessage_2eproto();
  return *default_instance_;
}

GCGetResourceBack* GCGetResourceBack::default_instance_ = NULL;

GCGetResourceBack* GCGetResourceBack::New() const {
  return new GCGetResourceBack;
}

void GCGetResourceBack::Clear() {
  resourceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCGetResourceBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCGetResourceBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ResourceInfo resourceInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_resourceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resourceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_resourceInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCGetResourceBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCGetResourceBack)
  return false;
#undef DO_
}

void GCGetResourceBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCGetResourceBack)
  // repeated .ResourceInfo resourceInfo = 1;
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resourceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCGetResourceBack)
}

::google::protobuf::uint8* GCGetResourceBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCGetResourceBack)
  // repeated .ResourceInfo resourceInfo = 1;
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resourceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCGetResourceBack)
  return target;
}

int GCGetResourceBack::ByteSize() const {
  int total_size = 0;

  // repeated .ResourceInfo resourceInfo = 1;
  total_size += 1 * this->resourceinfo_size();
  for (int i = 0; i < this->resourceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resourceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGetResourceBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCGetResourceBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCGetResourceBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCGetResourceBack::MergeFrom(const GCGetResourceBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  resourceinfo_.MergeFrom(from.resourceinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCGetResourceBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGetResourceBack::CopyFrom(const GCGetResourceBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGetResourceBack::IsInitialized() const {

  return true;
}

void GCGetResourceBack::Swap(GCGetResourceBack* other) {
  if (other != this) {
    resourceinfo_.Swap(&other->resourceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCGetResourceBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCGetResourceBack_descriptor_;
  metadata.reflection = GCGetResourceBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
