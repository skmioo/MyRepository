// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGEnterSceneOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterSceneOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCEnterSceneOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCEnterSceneOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCharacterObjsInView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharacterObjsInView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelObjInSceneBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelObjInSceneBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCharObjDieBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharObjDieBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSendMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSendMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSendMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSendMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCStopMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCStopMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshPlayerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshPlayerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGFly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGFly_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSynPlayerPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSynPlayerPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChangeAttackState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChangeAttackState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPutDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPutDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGGetherDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGGetherDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPickDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPickDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCShowHideObjInSceneBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCShowHideObjInSceneBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshTrapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshTrapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTrapItemStartMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTrapItemStartMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterHurtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterHurtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshCharacterHurtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshCharacterHurtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelCharacterHurtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelCharacterHurtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTeleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTeleport_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTeleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTeleport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMoveInJog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMoveInJog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GGEnterExistScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GGEnterExistScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* GGLeaveScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GGLeaveScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCharacterChangeMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharacterChangeMotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSyncCharacterPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSyncCharacterPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCharacterRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCharacterRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSyncCharacterRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSyncCharacterRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGCommonGetherDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGCommonGetherDevice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneMessage_2eproto() {
  protobuf_AddDesc_SceneMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEnterScene_descriptor_ = file->message_type(0);
  static const int CGEnterScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, notbackgcenterscene_),
  };
  CGEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterScene_descriptor_,
      CGEnterScene::default_instance_,
      CGEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterScene));
  GCEnterScene_descriptor_ = file->message_type(1);
  static const int GCEnterScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterScene, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterScene, reason_),
  };
  GCEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterScene_descriptor_,
      GCEnterScene::default_instance_,
      GCEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterScene));
  CGEnterSceneOk_descriptor_ = file->message_type(2);
  static const int CGEnterSceneOk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSceneOk, flag_),
  };
  CGEnterSceneOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterSceneOk_descriptor_,
      CGEnterSceneOk::default_instance_,
      CGEnterSceneOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSceneOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSceneOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterSceneOk));
  GCEnterSceneOk_descriptor_ = file->message_type(3);
  static const int GCEnterSceneOk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterSceneOk, flag_),
  };
  GCEnterSceneOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCEnterSceneOk_descriptor_,
      GCEnterSceneOk::default_instance_,
      GCEnterSceneOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterSceneOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCEnterSceneOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCEnterSceneOk));
  GCCharacterObjsInView_descriptor_ = file->message_type(4);
  static const int GCCharacterObjsInView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterObjsInView, characterobjs_),
  };
  GCCharacterObjsInView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharacterObjsInView_descriptor_,
      GCCharacterObjsInView::default_instance_,
      GCCharacterObjsInView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterObjsInView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterObjsInView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharacterObjsInView));
  GCDelObjInSceneBack_descriptor_ = file->message_type(5);
  static const int GCDelObjInSceneBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelObjInSceneBack, objids_),
  };
  GCDelObjInSceneBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelObjInSceneBack_descriptor_,
      GCDelObjInSceneBack::default_instance_,
      GCDelObjInSceneBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelObjInSceneBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelObjInSceneBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelObjInSceneBack));
  GCCharObjDieBack_descriptor_ = file->message_type(6);
  static const int GCCharObjDieBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharObjDieBack, objids_),
  };
  GCCharObjDieBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharObjDieBack_descriptor_,
      GCCharObjDieBack::default_instance_,
      GCCharObjDieBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharObjDieBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharObjDieBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharObjDieBack));
  CGSendMove_descriptor_ = file->message_type(7);
  static const int CGSendMove_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, clienttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, flyheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, flow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, objectid_),
  };
  CGSendMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSendMove_descriptor_,
      CGSendMove::default_instance_,
      CGSendMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSendMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSendMove));
  GCSendMove_descriptor_ = file->message_type(8);
  static const int GCSendMove_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, startmovetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, flyheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, flow_),
  };
  GCSendMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSendMove_descriptor_,
      GCSendMove::default_instance_,
      GCSendMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSendMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSendMove));
  CGStopMove_descriptor_ = file->message_type(9);
  static const int CGStopMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, stopposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, dirposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, flyheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, objectid_),
  };
  CGStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGStopMove_descriptor_,
      CGStopMove::default_instance_,
      CGStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGStopMove));
  GCStopMove_descriptor_ = file->message_type(10);
  static const int GCStopMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, stopposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, dirposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, flyheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, type_),
  };
  GCStopMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCStopMove_descriptor_,
      GCStopMove::default_instance_,
      GCStopMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCStopMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCStopMove));
  GCRefreshPlayerAttr_descriptor_ = file->message_type(11);
  static const int GCRefreshPlayerAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPlayerAttr, myself_),
  };
  GCRefreshPlayerAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshPlayerAttr_descriptor_,
      GCRefreshPlayerAttr::default_instance_,
      GCRefreshPlayerAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPlayerAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshPlayerAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshPlayerAttr));
  CGFly_descriptor_ = file->message_type(12);
  static const int CGFly_offsets_[1] = {
  };
  CGFly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGFly_descriptor_,
      CGFly::default_instance_,
      CGFly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGFly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGFly));
  CGSynPlayerPos_descriptor_ = file->message_type(13);
  static const int CGSynPlayerPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSynPlayerPos, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSynPlayerPos, dirposition_),
  };
  CGSynPlayerPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSynPlayerPos_descriptor_,
      CGSynPlayerPos::default_instance_,
      CGSynPlayerPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSynPlayerPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSynPlayerPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSynPlayerPos));
  CGChangeAttackState_descriptor_ = file->message_type(14);
  static const int CGChangeAttackState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeAttackState, state_),
  };
  CGChangeAttackState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChangeAttackState_descriptor_,
      CGChangeAttackState::default_instance_,
      CGChangeAttackState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeAttackState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeAttackState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChangeAttackState));
  GCPutDeviceInfo_descriptor_ = file->message_type(15);
  static const int GCPutDeviceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutDeviceInfo, deviceinfo_),
  };
  GCPutDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPutDeviceInfo_descriptor_,
      GCPutDeviceInfo::default_instance_,
      GCPutDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPutDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPutDeviceInfo));
  GCRefreshDeviceInfo_descriptor_ = file->message_type(16);
  static const int GCRefreshDeviceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshDeviceInfo, deviceinfo_),
  };
  GCRefreshDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshDeviceInfo_descriptor_,
      GCRefreshDeviceInfo::default_instance_,
      GCRefreshDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshDeviceInfo));
  CGGetherDevice_descriptor_ = file->message_type(17);
  static const int CGGetherDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherDevice, objid_),
  };
  CGGetherDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGGetherDevice_descriptor_,
      CGGetherDevice::default_instance_,
      CGGetherDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGGetherDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGGetherDevice));
  GCPickDevice_descriptor_ = file->message_type(18);
  static const int GCPickDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPickDevice, objids_),
  };
  GCPickDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPickDevice_descriptor_,
      GCPickDevice::default_instance_,
      GCPickDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPickDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPickDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPickDevice));
  GCShowHideObjInSceneBack_descriptor_ = file->message_type(19);
  static const int GCShowHideObjInSceneBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShowHideObjInSceneBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShowHideObjInSceneBack, objids_),
  };
  GCShowHideObjInSceneBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCShowHideObjInSceneBack_descriptor_,
      GCShowHideObjInSceneBack::default_instance_,
      GCShowHideObjInSceneBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShowHideObjInSceneBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShowHideObjInSceneBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCShowHideObjInSceneBack));
  GCRefreshTrapData_descriptor_ = file->message_type(20);
  static const int GCRefreshTrapData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshTrapData, trapdata_),
  };
  GCRefreshTrapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshTrapData_descriptor_,
      GCRefreshTrapData::default_instance_,
      GCRefreshTrapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshTrapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshTrapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshTrapData));
  GCTrapItemStartMove_descriptor_ = file->message_type(21);
  static const int GCTrapItemStartMove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrapItemStartMove, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrapItemStartMove, itemindex_),
  };
  GCTrapItemStartMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTrapItemStartMove_descriptor_,
      GCTrapItemStartMove::default_instance_,
      GCTrapItemStartMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrapItemStartMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTrapItemStartMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTrapItemStartMove));
  CharacterHurtInfo_descriptor_ = file->message_type(22);
  static const int CharacterHurtInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, totalhurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, type_),
  };
  CharacterHurtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterHurtInfo_descriptor_,
      CharacterHurtInfo::default_instance_,
      CharacterHurtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterHurtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterHurtInfo));
  GCRefreshCharacterHurtInfo_descriptor_ = file->message_type(23);
  static const int GCRefreshCharacterHurtInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, hurtinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, selfhurtinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, damageobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, refreshtype_),
  };
  GCRefreshCharacterHurtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshCharacterHurtInfo_descriptor_,
      GCRefreshCharacterHurtInfo::default_instance_,
      GCRefreshCharacterHurtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshCharacterHurtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshCharacterHurtInfo));
  GCDelCharacterHurtInfo_descriptor_ = file->message_type(24);
  static const int GCDelCharacterHurtInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelCharacterHurtInfo, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelCharacterHurtInfo, refreshtype_),
  };
  GCDelCharacterHurtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelCharacterHurtInfo_descriptor_,
      GCDelCharacterHurtInfo::default_instance_,
      GCDelCharacterHurtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelCharacterHurtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelCharacterHurtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelCharacterHurtInfo));
  CGTeleport_descriptor_ = file->message_type(25);
  static const int CGTeleport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, navmeshid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, objid_),
  };
  CGTeleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTeleport_descriptor_,
      CGTeleport::default_instance_,
      CGTeleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTeleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTeleport));
  GCTeleport_descriptor_ = file->message_type(26);
  static const int GCTeleport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, navmeshid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, objid_),
  };
  GCTeleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTeleport_descriptor_,
      GCTeleport::default_instance_,
      GCTeleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTeleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTeleport));
  CGMoveInJog_descriptor_ = file->message_type(27);
  static const int CGMoveInJog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMoveInJog, type_),
  };
  CGMoveInJog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMoveInJog_descriptor_,
      CGMoveInJog::default_instance_,
      CGMoveInJog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMoveInJog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMoveInJog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMoveInJog));
  GGEnterExistScene_descriptor_ = file->message_type(28);
  static const int GGEnterExistScene_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, notbackgcenterscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, reasonparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, samemuiltlinescene_),
  };
  GGEnterExistScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GGEnterExistScene_descriptor_,
      GGEnterExistScene::default_instance_,
      GGEnterExistScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGEnterExistScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GGEnterExistScene));
  GGLeaveScene_descriptor_ = file->message_type(29);
  static const int GGLeaveScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, sceneinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, reasonparams_),
  };
  GGLeaveScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GGLeaveScene_descriptor_,
      GGLeaveScene::default_instance_,
      GGLeaveScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGLeaveScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GGLeaveScene));
  GCCharacterChangeMotion_descriptor_ = file->message_type(30);
  static const int GCCharacterChangeMotion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterChangeMotion, motionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterChangeMotion, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterChangeMotion, targetobjid_),
  };
  GCCharacterChangeMotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharacterChangeMotion_descriptor_,
      GCCharacterChangeMotion::default_instance_,
      GCCharacterChangeMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterChangeMotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterChangeMotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharacterChangeMotion));
  GCSyncCharacterPos_descriptor_ = file->message_type(31);
  static const int GCSyncCharacterPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterPos, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterPos, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterPos, dir_),
  };
  GCSyncCharacterPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSyncCharacterPos_descriptor_,
      GCSyncCharacterPos::default_instance_,
      GCSyncCharacterPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSyncCharacterPos));
  GCCharacterRelation_descriptor_ = file->message_type(32);
  static const int GCCharacterRelation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterRelation, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterRelation, attacksts_),
  };
  GCCharacterRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCharacterRelation_descriptor_,
      GCCharacterRelation::default_instance_,
      GCCharacterRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCharacterRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCharacterRelation));
  GCSyncCharacterRelation_descriptor_ = file->message_type(33);
  static const int GCSyncCharacterRelation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterRelation, relations_),
  };
  GCSyncCharacterRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSyncCharacterRelation_descriptor_,
      GCSyncCharacterRelation::default_instance_,
      GCSyncCharacterRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSyncCharacterRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSyncCharacterRelation));
  CGCommonGetherDevice_descriptor_ = file->message_type(34);
  static const int CGCommonGetherDevice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonGetherDevice, objid_),
  };
  CGCommonGetherDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGCommonGetherDevice_descriptor_,
      CGCommonGetherDevice::default_instance_,
      CGCommonGetherDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonGetherDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGCommonGetherDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGCommonGetherDevice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterScene_descriptor_, &CGEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterScene_descriptor_, &GCEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterSceneOk_descriptor_, &CGEnterSceneOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCEnterSceneOk_descriptor_, &GCEnterSceneOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharacterObjsInView_descriptor_, &GCCharacterObjsInView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelObjInSceneBack_descriptor_, &GCDelObjInSceneBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharObjDieBack_descriptor_, &GCCharObjDieBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSendMove_descriptor_, &CGSendMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSendMove_descriptor_, &GCSendMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGStopMove_descriptor_, &CGStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCStopMove_descriptor_, &GCStopMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshPlayerAttr_descriptor_, &GCRefreshPlayerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGFly_descriptor_, &CGFly::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSynPlayerPos_descriptor_, &CGSynPlayerPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChangeAttackState_descriptor_, &CGChangeAttackState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPutDeviceInfo_descriptor_, &GCPutDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshDeviceInfo_descriptor_, &GCRefreshDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGGetherDevice_descriptor_, &CGGetherDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPickDevice_descriptor_, &GCPickDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCShowHideObjInSceneBack_descriptor_, &GCShowHideObjInSceneBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshTrapData_descriptor_, &GCRefreshTrapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTrapItemStartMove_descriptor_, &GCTrapItemStartMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterHurtInfo_descriptor_, &CharacterHurtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshCharacterHurtInfo_descriptor_, &GCRefreshCharacterHurtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelCharacterHurtInfo_descriptor_, &GCDelCharacterHurtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTeleport_descriptor_, &CGTeleport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTeleport_descriptor_, &GCTeleport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMoveInJog_descriptor_, &CGMoveInJog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GGEnterExistScene_descriptor_, &GGEnterExistScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GGLeaveScene_descriptor_, &GGLeaveScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharacterChangeMotion_descriptor_, &GCCharacterChangeMotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSyncCharacterPos_descriptor_, &GCSyncCharacterPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCharacterRelation_descriptor_, &GCCharacterRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSyncCharacterRelation_descriptor_, &GCSyncCharacterRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGCommonGetherDevice_descriptor_, &CGCommonGetherDevice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneMessage_2eproto() {
  delete CGEnterScene::default_instance_;
  delete CGEnterScene_reflection_;
  delete GCEnterScene::default_instance_;
  delete GCEnterScene_reflection_;
  delete CGEnterSceneOk::default_instance_;
  delete CGEnterSceneOk_reflection_;
  delete GCEnterSceneOk::default_instance_;
  delete GCEnterSceneOk_reflection_;
  delete GCCharacterObjsInView::default_instance_;
  delete GCCharacterObjsInView_reflection_;
  delete GCDelObjInSceneBack::default_instance_;
  delete GCDelObjInSceneBack_reflection_;
  delete GCCharObjDieBack::default_instance_;
  delete GCCharObjDieBack_reflection_;
  delete CGSendMove::default_instance_;
  delete CGSendMove_reflection_;
  delete GCSendMove::default_instance_;
  delete GCSendMove_reflection_;
  delete CGStopMove::default_instance_;
  delete CGStopMove_reflection_;
  delete GCStopMove::default_instance_;
  delete GCStopMove_reflection_;
  delete GCRefreshPlayerAttr::default_instance_;
  delete GCRefreshPlayerAttr_reflection_;
  delete CGFly::default_instance_;
  delete CGFly_reflection_;
  delete CGSynPlayerPos::default_instance_;
  delete CGSynPlayerPos_reflection_;
  delete CGChangeAttackState::default_instance_;
  delete CGChangeAttackState_reflection_;
  delete GCPutDeviceInfo::default_instance_;
  delete GCPutDeviceInfo_reflection_;
  delete GCRefreshDeviceInfo::default_instance_;
  delete GCRefreshDeviceInfo_reflection_;
  delete CGGetherDevice::default_instance_;
  delete CGGetherDevice_reflection_;
  delete GCPickDevice::default_instance_;
  delete GCPickDevice_reflection_;
  delete GCShowHideObjInSceneBack::default_instance_;
  delete GCShowHideObjInSceneBack_reflection_;
  delete GCRefreshTrapData::default_instance_;
  delete GCRefreshTrapData_reflection_;
  delete GCTrapItemStartMove::default_instance_;
  delete GCTrapItemStartMove_reflection_;
  delete CharacterHurtInfo::default_instance_;
  delete CharacterHurtInfo_reflection_;
  delete GCRefreshCharacterHurtInfo::default_instance_;
  delete GCRefreshCharacterHurtInfo_reflection_;
  delete GCDelCharacterHurtInfo::default_instance_;
  delete GCDelCharacterHurtInfo_reflection_;
  delete CGTeleport::default_instance_;
  delete CGTeleport_reflection_;
  delete GCTeleport::default_instance_;
  delete GCTeleport_reflection_;
  delete CGMoveInJog::default_instance_;
  delete CGMoveInJog_reflection_;
  delete GGEnterExistScene::default_instance_;
  delete GGEnterExistScene_reflection_;
  delete GGLeaveScene::default_instance_;
  delete GGLeaveScene_reflection_;
  delete GCCharacterChangeMotion::default_instance_;
  delete GCCharacterChangeMotion_reflection_;
  delete GCSyncCharacterPos::default_instance_;
  delete GCSyncCharacterPos_reflection_;
  delete GCCharacterRelation::default_instance_;
  delete GCCharacterRelation_reflection_;
  delete GCSyncCharacterRelation::default_instance_;
  delete GCSyncCharacterRelation_reflection_;
  delete CGCommonGetherDevice::default_instance_;
  delete CGCommonGetherDevice_reflection_;
}

void protobuf_AddDesc_SceneMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SceneMessage.proto\032\022InnerMessage.proto"
    "\"x\n\014CGEnterScene\022\017\n\007sceneId\030\001 \001(\005\022\031\n\003pos"
    "\030\002 \001(\0132\014.Vector3Info\022\037\n\tdirection\030\003 \001(\0132"
    "\014.Vector3Info\022\033\n\023notBackGCEnterScene\030\004 \001"
    "(\005\"/\n\014GCEnterScene\022\017\n\007sceneId\030\001 \001(\005\022\016\n\006r"
    "eason\030\002 \001(\005\"\036\n\016CGEnterSceneOk\022\014\n\004flag\030\001 "
    "\001(\005\"\036\n\016GCEnterSceneOk\022\014\n\004flag\030\001 \001(\005\">\n\025G"
    "CCharacterObjsInView\022%\n\rcharacterObjs\030\001 "
    "\003(\0132\016.CharacterInfo\"%\n\023GCDelObjInSceneBa"
    "ck\022\016\n\006objIds\030\001 \003(\003\"\"\n\020GCCharObjDieBack\022\016"
    "\n\006objIds\030\001 \003(\003\"\261\001\n\nCGSendMove\022\036\n\010startPo"
    "s\030\001 \001(\0132\014.Vector3Info\022\037\n\ttargetPos\030\002 \003(\013"
    "2\014.Vector3Info\022\022\n\nclientTime\030\003 \001(\003\022\021\n\tfl"
    "yHeight\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\r\n\005speed\030\006 \001"
    "(\005\022\014\n\004flow\030\007 \001(\005\022\020\n\010objectId\030\010 \001(\003\"\264\001\n\nG"
    "CSendMove\022\036\n\010startPos\030\001 \001(\0132\014.Vector3Inf"
    "o\022\037\n\ttargetPos\030\002 \003(\0132\014.Vector3Info\022\020\n\010ob"
    "jectId\030\003 \001(\003\022\025\n\rstartMoveTime\030\004 \001(\003\022\021\n\tf"
    "lyHeight\030\005 \001(\005\022\014\n\004type\030\006 \001(\005\022\r\n\005speed\030\007 "
    "\001(\005\022\014\n\004flow\030\010 \001(\005\"\206\001\n\nCGStopMove\022\"\n\014stop"
    "Position\030\001 \001(\0132\014.Vector3Info\022!\n\013dirPosit"
    "ion\030\002 \001(\0132\014.Vector3Info\022\021\n\tflyHeight\030\003 \001"
    "(\005\022\014\n\004type\030\004 \001(\005\022\020\n\010objectId\030\005 \001(\003\"\206\001\n\nG"
    "CStopMove\022\020\n\010objectId\030\001 \001(\003\022\"\n\014stopPosit"
    "ion\030\002 \001(\0132\014.Vector3Info\022!\n\013dirPosition\030\003"
    " \001(\0132\014.Vector3Info\022\021\n\tflyHeight\030\004 \001(\005\022\014\n"
    "\004type\030\005 \001(\005\"5\n\023GCRefreshPlayerAttr\022\036\n\006my"
    "Self\030\001 \001(\0132\016.CharacterInfo\"\007\n\005CGFly\"S\n\016C"
    "GSynPlayerPos\022\036\n\010position\030\001 \001(\0132\014.Vector"
    "3Info\022!\n\013dirPosition\030\002 \001(\0132\014.Vector3Info"
    "\"$\n\023CGChangeAttackState\022\r\n\005state\030\001 \001(\005\"2"
    "\n\017GCPutDeviceInfo\022\037\n\ndeviceInfo\030\001 \003(\0132\013."
    "DeviceInfo\"6\n\023GCRefreshDeviceInfo\022\037\n\ndev"
    "iceInfo\030\001 \001(\0132\013.DeviceInfo\"\037\n\016CGGetherDe"
    "vice\022\r\n\005objId\030\001 \001(\003\"\036\n\014GCPickDevice\022\016\n\006o"
    "bjIds\030\001 \003(\003\"8\n\030GCShowHideObjInSceneBack\022"
    "\014\n\004type\030\001 \001(\005\022\016\n\006objIds\030\002 \003(\003\"0\n\021GCRefre"
    "shTrapData\022\033\n\010trapData\030\001 \003(\0132\t.TrapData\""
    "7\n\023GCTrapItemStartMove\022\r\n\005objId\030\001 \001(\003\022\021\n"
    "\titemIndex\030\002 \003(\005\"U\n\021CharacterHurtInfo\022\r\n"
    "\005objId\030\001 \001(\003\022\021\n\ttotalHurt\030\002 \001(\005\022\020\n\010charN"
    "ame\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"\231\001\n\032GCRefreshCha"
    "racterHurtInfo\022\'\n\013hurtInfoArr\030\001 \003(\0132\022.Ch"
    "aracterHurtInfo\022(\n\014selfHurtInfo\030\002 \001(\0132\022."
    "CharacterHurtInfo\022\023\n\013damageObjId\030\003 \001(\003\022\023"
    "\n\013refreshType\030\004 \001(\005\"<\n\026GCDelCharacterHur"
    "tInfo\022\r\n\005objId\030\001 \003(\003\022\023\n\013refreshType\030\002 \001("
    "\005\"x\n\nCGTeleport\022\014\n\004type\030\001 \001(\005\022\031\n\003pos\030\002 \001"
    "(\0132\014.Vector3Info\022\037\n\tdirection\030\003 \001(\0132\014.Ve"
    "ctor3Info\022\021\n\tnavMeshId\030\004 \001(\005\022\r\n\005objId\030\005 "
    "\001(\003\"\206\001\n\nGCTeleport\022\014\n\004flag\030\001 \001(\005\022\014\n\004type"
    "\030\002 \001(\005\022\031\n\003pos\030\003 \001(\0132\014.Vector3Info\022\037\n\tdir"
    "ection\030\004 \001(\0132\014.Vector3Info\022\021\n\tnavMeshId\030"
    "\005 \001(\005\022\r\n\005objId\030\006 \001(\003\"\033\n\013CGMoveInJog\022\014\n\004t"
    "ype\030\001 \001(\005\"\326\001\n\021GGEnterExistScene\022\027\n\017scene"
    "InstanceId\030\001 \001(\005\022\031\n\003pos\030\002 \001(\0132\014.Vector3I"
    "nfo\022\037\n\tdirection\030\003 \001(\0132\014.Vector3Info\022\r\n\005"
    "objId\030\004 \003(\003\022\033\n\023notBackGCEnterScene\030\005 \001(\005"
    "\022\016\n\006reason\030\006 \001(\005\022\024\n\014reasonParams\030\007 \003(\t\022\032"
    "\n\022sameMuiltLineScene\030\010 \001(\005\"\\\n\014GGLeaveSce"
    "ne\022\027\n\017sceneInstanceId\030\001 \001(\005\022\r\n\005objId\030\002 \003"
    "(\003\022\016\n\006reason\030\003 \001(\005\022\024\n\014reasonParams\030\004 \003(\t"
    "\"O\n\027GCCharacterChangeMotion\022\020\n\010motionId\030"
    "\001 \001(\005\022\r\n\005objId\030\002 \003(\003\022\023\n\013targetObjId\030\003 \001("
    "\003\"a\n\022GCSyncCharacterPos\022\020\n\010objectId\030\001 \001("
    "\003\022\036\n\010position\030\002 \001(\0132\014.Vector3Info\022\031\n\003dir"
    "\030\003 \001(\0132\014.Vector3Info\":\n\023GCCharacterRelat"
    "ion\022\020\n\010objectId\030\001 \001(\003\022\021\n\tattackSts\030\002 \001(\005"
    "\"B\n\027GCSyncCharacterRelation\022\'\n\trelations"
    "\030\001 \003(\0132\024.GCCharacterRelation\"%\n\024CGCommon"
    "GetherDevice\022\r\n\005objId\030\001 \001(\003B\031\n\027com.mile."
    "common.message", 2854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneMessage.proto", &protobuf_RegisterTypes);
  CGEnterScene::default_instance_ = new CGEnterScene();
  GCEnterScene::default_instance_ = new GCEnterScene();
  CGEnterSceneOk::default_instance_ = new CGEnterSceneOk();
  GCEnterSceneOk::default_instance_ = new GCEnterSceneOk();
  GCCharacterObjsInView::default_instance_ = new GCCharacterObjsInView();
  GCDelObjInSceneBack::default_instance_ = new GCDelObjInSceneBack();
  GCCharObjDieBack::default_instance_ = new GCCharObjDieBack();
  CGSendMove::default_instance_ = new CGSendMove();
  GCSendMove::default_instance_ = new GCSendMove();
  CGStopMove::default_instance_ = new CGStopMove();
  GCStopMove::default_instance_ = new GCStopMove();
  GCRefreshPlayerAttr::default_instance_ = new GCRefreshPlayerAttr();
  CGFly::default_instance_ = new CGFly();
  CGSynPlayerPos::default_instance_ = new CGSynPlayerPos();
  CGChangeAttackState::default_instance_ = new CGChangeAttackState();
  GCPutDeviceInfo::default_instance_ = new GCPutDeviceInfo();
  GCRefreshDeviceInfo::default_instance_ = new GCRefreshDeviceInfo();
  CGGetherDevice::default_instance_ = new CGGetherDevice();
  GCPickDevice::default_instance_ = new GCPickDevice();
  GCShowHideObjInSceneBack::default_instance_ = new GCShowHideObjInSceneBack();
  GCRefreshTrapData::default_instance_ = new GCRefreshTrapData();
  GCTrapItemStartMove::default_instance_ = new GCTrapItemStartMove();
  CharacterHurtInfo::default_instance_ = new CharacterHurtInfo();
  GCRefreshCharacterHurtInfo::default_instance_ = new GCRefreshCharacterHurtInfo();
  GCDelCharacterHurtInfo::default_instance_ = new GCDelCharacterHurtInfo();
  CGTeleport::default_instance_ = new CGTeleport();
  GCTeleport::default_instance_ = new GCTeleport();
  CGMoveInJog::default_instance_ = new CGMoveInJog();
  GGEnterExistScene::default_instance_ = new GGEnterExistScene();
  GGLeaveScene::default_instance_ = new GGLeaveScene();
  GCCharacterChangeMotion::default_instance_ = new GCCharacterChangeMotion();
  GCSyncCharacterPos::default_instance_ = new GCSyncCharacterPos();
  GCCharacterRelation::default_instance_ = new GCCharacterRelation();
  GCSyncCharacterRelation::default_instance_ = new GCSyncCharacterRelation();
  CGCommonGetherDevice::default_instance_ = new CGCommonGetherDevice();
  CGEnterScene::default_instance_->InitAsDefaultInstance();
  GCEnterScene::default_instance_->InitAsDefaultInstance();
  CGEnterSceneOk::default_instance_->InitAsDefaultInstance();
  GCEnterSceneOk::default_instance_->InitAsDefaultInstance();
  GCCharacterObjsInView::default_instance_->InitAsDefaultInstance();
  GCDelObjInSceneBack::default_instance_->InitAsDefaultInstance();
  GCCharObjDieBack::default_instance_->InitAsDefaultInstance();
  CGSendMove::default_instance_->InitAsDefaultInstance();
  GCSendMove::default_instance_->InitAsDefaultInstance();
  CGStopMove::default_instance_->InitAsDefaultInstance();
  GCStopMove::default_instance_->InitAsDefaultInstance();
  GCRefreshPlayerAttr::default_instance_->InitAsDefaultInstance();
  CGFly::default_instance_->InitAsDefaultInstance();
  CGSynPlayerPos::default_instance_->InitAsDefaultInstance();
  CGChangeAttackState::default_instance_->InitAsDefaultInstance();
  GCPutDeviceInfo::default_instance_->InitAsDefaultInstance();
  GCRefreshDeviceInfo::default_instance_->InitAsDefaultInstance();
  CGGetherDevice::default_instance_->InitAsDefaultInstance();
  GCPickDevice::default_instance_->InitAsDefaultInstance();
  GCShowHideObjInSceneBack::default_instance_->InitAsDefaultInstance();
  GCRefreshTrapData::default_instance_->InitAsDefaultInstance();
  GCTrapItemStartMove::default_instance_->InitAsDefaultInstance();
  CharacterHurtInfo::default_instance_->InitAsDefaultInstance();
  GCRefreshCharacterHurtInfo::default_instance_->InitAsDefaultInstance();
  GCDelCharacterHurtInfo::default_instance_->InitAsDefaultInstance();
  CGTeleport::default_instance_->InitAsDefaultInstance();
  GCTeleport::default_instance_->InitAsDefaultInstance();
  CGMoveInJog::default_instance_->InitAsDefaultInstance();
  GGEnterExistScene::default_instance_->InitAsDefaultInstance();
  GGLeaveScene::default_instance_->InitAsDefaultInstance();
  GCCharacterChangeMotion::default_instance_->InitAsDefaultInstance();
  GCSyncCharacterPos::default_instance_->InitAsDefaultInstance();
  GCCharacterRelation::default_instance_->InitAsDefaultInstance();
  GCSyncCharacterRelation::default_instance_->InitAsDefaultInstance();
  CGCommonGetherDevice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneMessage_2eproto {
  StaticDescriptorInitializer_SceneMessage_2eproto() {
    protobuf_AddDesc_SceneMessage_2eproto();
  }
} static_descriptor_initializer_SceneMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEnterScene::kSceneIdFieldNumber;
const int CGEnterScene::kPosFieldNumber;
const int CGEnterScene::kDirectionFieldNumber;
const int CGEnterScene::kNotBackGCEnterSceneFieldNumber;
#endif  // !_MSC_VER

CGEnterScene::CGEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterScene)
}

void CGEnterScene::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGEnterScene::CGEnterScene(const CGEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterScene)
}

void CGEnterScene::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  pos_ = NULL;
  direction_ = NULL;
  notbackgcenterscene_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterScene::~CGEnterScene() {
  // @@protoc_insertion_point(destructor:CGEnterScene)
  SharedDtor();
}

void CGEnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
  }
}

void CGEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterScene_descriptor_;
}

const CGEnterScene& CGEnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGEnterScene* CGEnterScene::default_instance_ = NULL;

CGEnterScene* CGEnterScene::New() const {
  return new CGEnterScene;
}

void CGEnterScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGEnterScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sceneid_, notbackgcenterscene_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 3;
      case 3: {
        if (tag == 26) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_notBackGCEnterScene;
        break;
      }

      // optional int32 notBackGCEnterScene = 4;
      case 4: {
        if (tag == 32) {
         parse_notBackGCEnterScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notbackgcenterscene_)));
          set_has_notbackgcenterscene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterScene)
  return false;
#undef DO_
}

void CGEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterScene)
  // optional int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // optional int32 notBackGCEnterScene = 4;
  if (has_notbackgcenterscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->notbackgcenterscene(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterScene)
}

::google::protobuf::uint8* CGEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterScene)
  // optional int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // optional int32 notBackGCEnterScene = 4;
  if (has_notbackgcenterscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->notbackgcenterscene(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterScene)
  return target;
}

int CGEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional .Vector3Info pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 notBackGCEnterScene = 4;
    if (has_notbackgcenterscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notbackgcenterscene());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterScene::MergeFrom(const CGEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_notbackgcenterscene()) {
      set_notbackgcenterscene(from.notbackgcenterscene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterScene::CopyFrom(const CGEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterScene::IsInitialized() const {

  return true;
}

void CGEnterScene::Swap(CGEnterScene* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    std::swap(notbackgcenterscene_, other->notbackgcenterscene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterScene_descriptor_;
  metadata.reflection = CGEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterScene::kSceneIdFieldNumber;
const int GCEnterScene::kReasonFieldNumber;
#endif  // !_MSC_VER

GCEnterScene::GCEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterScene)
}

void GCEnterScene::InitAsDefaultInstance() {
}

GCEnterScene::GCEnterScene(const GCEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterScene)
}

void GCEnterScene::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterScene::~GCEnterScene() {
  // @@protoc_insertion_point(destructor:GCEnterScene)
  SharedDtor();
}

void GCEnterScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterScene_descriptor_;
}

const GCEnterScene& GCEnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCEnterScene* GCEnterScene::default_instance_ = NULL;

GCEnterScene* GCEnterScene::New() const {
  return new GCEnterScene;
}

void GCEnterScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCEnterScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sceneid_, reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional int32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterScene)
  return false;
#undef DO_
}

void GCEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterScene)
  // optional int32 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneid(), output);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterScene)
}

::google::protobuf::uint8* GCEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterScene)
  // optional int32 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneid(), target);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterScene)
  return target;
}

int GCEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterScene::MergeFrom(const GCEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterScene::CopyFrom(const GCEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterScene::IsInitialized() const {

  return true;
}

void GCEnterScene::Swap(GCEnterScene* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterScene_descriptor_;
  metadata.reflection = GCEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGEnterSceneOk::kFlagFieldNumber;
#endif  // !_MSC_VER

CGEnterSceneOk::CGEnterSceneOk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterSceneOk)
}

void CGEnterSceneOk::InitAsDefaultInstance() {
}

CGEnterSceneOk::CGEnterSceneOk(const CGEnterSceneOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterSceneOk)
}

void CGEnterSceneOk::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterSceneOk::~CGEnterSceneOk() {
  // @@protoc_insertion_point(destructor:CGEnterSceneOk)
  SharedDtor();
}

void CGEnterSceneOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterSceneOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterSceneOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterSceneOk_descriptor_;
}

const CGEnterSceneOk& CGEnterSceneOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGEnterSceneOk* CGEnterSceneOk::default_instance_ = NULL;

CGEnterSceneOk* CGEnterSceneOk::New() const {
  return new CGEnterSceneOk;
}

void CGEnterSceneOk::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterSceneOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterSceneOk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterSceneOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterSceneOk)
  return false;
#undef DO_
}

void CGEnterSceneOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterSceneOk)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterSceneOk)
}

::google::protobuf::uint8* CGEnterSceneOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterSceneOk)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterSceneOk)
  return target;
}

int CGEnterSceneOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterSceneOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterSceneOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterSceneOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterSceneOk::MergeFrom(const CGEnterSceneOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterSceneOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterSceneOk::CopyFrom(const CGEnterSceneOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterSceneOk::IsInitialized() const {

  return true;
}

void CGEnterSceneOk::Swap(CGEnterSceneOk* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterSceneOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterSceneOk_descriptor_;
  metadata.reflection = CGEnterSceneOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCEnterSceneOk::kFlagFieldNumber;
#endif  // !_MSC_VER

GCEnterSceneOk::GCEnterSceneOk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCEnterSceneOk)
}

void GCEnterSceneOk::InitAsDefaultInstance() {
}

GCEnterSceneOk::GCEnterSceneOk(const GCEnterSceneOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCEnterSceneOk)
}

void GCEnterSceneOk::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCEnterSceneOk::~GCEnterSceneOk() {
  // @@protoc_insertion_point(destructor:GCEnterSceneOk)
  SharedDtor();
}

void GCEnterSceneOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCEnterSceneOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCEnterSceneOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCEnterSceneOk_descriptor_;
}

const GCEnterSceneOk& GCEnterSceneOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCEnterSceneOk* GCEnterSceneOk::default_instance_ = NULL;

GCEnterSceneOk* GCEnterSceneOk::New() const {
  return new GCEnterSceneOk;
}

void GCEnterSceneOk::Clear() {
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCEnterSceneOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCEnterSceneOk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCEnterSceneOk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCEnterSceneOk)
  return false;
#undef DO_
}

void GCEnterSceneOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCEnterSceneOk)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCEnterSceneOk)
}

::google::protobuf::uint8* GCEnterSceneOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCEnterSceneOk)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCEnterSceneOk)
  return target;
}

int GCEnterSceneOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCEnterSceneOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCEnterSceneOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCEnterSceneOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCEnterSceneOk::MergeFrom(const GCEnterSceneOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCEnterSceneOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCEnterSceneOk::CopyFrom(const GCEnterSceneOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCEnterSceneOk::IsInitialized() const {

  return true;
}

void GCEnterSceneOk::Swap(GCEnterSceneOk* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCEnterSceneOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCEnterSceneOk_descriptor_;
  metadata.reflection = GCEnterSceneOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCharacterObjsInView::kCharacterObjsFieldNumber;
#endif  // !_MSC_VER

GCCharacterObjsInView::GCCharacterObjsInView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharacterObjsInView)
}

void GCCharacterObjsInView::InitAsDefaultInstance() {
}

GCCharacterObjsInView::GCCharacterObjsInView(const GCCharacterObjsInView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharacterObjsInView)
}

void GCCharacterObjsInView::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharacterObjsInView::~GCCharacterObjsInView() {
  // @@protoc_insertion_point(destructor:GCCharacterObjsInView)
  SharedDtor();
}

void GCCharacterObjsInView::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCharacterObjsInView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharacterObjsInView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharacterObjsInView_descriptor_;
}

const GCCharacterObjsInView& GCCharacterObjsInView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCCharacterObjsInView* GCCharacterObjsInView::default_instance_ = NULL;

GCCharacterObjsInView* GCCharacterObjsInView::New() const {
  return new GCCharacterObjsInView;
}

void GCCharacterObjsInView::Clear() {
  characterobjs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharacterObjsInView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharacterObjsInView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharacterInfo characterObjs = 1;
      case 1: {
        if (tag == 10) {
         parse_characterObjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characterobjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_characterObjs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharacterObjsInView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharacterObjsInView)
  return false;
#undef DO_
}

void GCCharacterObjsInView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharacterObjsInView)
  // repeated .CharacterInfo characterObjs = 1;
  for (int i = 0; i < this->characterobjs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->characterobjs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharacterObjsInView)
}

::google::protobuf::uint8* GCCharacterObjsInView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharacterObjsInView)
  // repeated .CharacterInfo characterObjs = 1;
  for (int i = 0; i < this->characterobjs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->characterobjs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharacterObjsInView)
  return target;
}

int GCCharacterObjsInView::ByteSize() const {
  int total_size = 0;

  // repeated .CharacterInfo characterObjs = 1;
  total_size += 1 * this->characterobjs_size();
  for (int i = 0; i < this->characterobjs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characterobjs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharacterObjsInView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharacterObjsInView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharacterObjsInView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharacterObjsInView::MergeFrom(const GCCharacterObjsInView& from) {
  GOOGLE_CHECK_NE(&from, this);
  characterobjs_.MergeFrom(from.characterobjs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharacterObjsInView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharacterObjsInView::CopyFrom(const GCCharacterObjsInView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterObjsInView::IsInitialized() const {

  return true;
}

void GCCharacterObjsInView::Swap(GCCharacterObjsInView* other) {
  if (other != this) {
    characterobjs_.Swap(&other->characterobjs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharacterObjsInView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharacterObjsInView_descriptor_;
  metadata.reflection = GCCharacterObjsInView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelObjInSceneBack::kObjIdsFieldNumber;
#endif  // !_MSC_VER

GCDelObjInSceneBack::GCDelObjInSceneBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelObjInSceneBack)
}

void GCDelObjInSceneBack::InitAsDefaultInstance() {
}

GCDelObjInSceneBack::GCDelObjInSceneBack(const GCDelObjInSceneBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelObjInSceneBack)
}

void GCDelObjInSceneBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelObjInSceneBack::~GCDelObjInSceneBack() {
  // @@protoc_insertion_point(destructor:GCDelObjInSceneBack)
  SharedDtor();
}

void GCDelObjInSceneBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelObjInSceneBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelObjInSceneBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelObjInSceneBack_descriptor_;
}

const GCDelObjInSceneBack& GCDelObjInSceneBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCDelObjInSceneBack* GCDelObjInSceneBack::default_instance_ = NULL;

GCDelObjInSceneBack* GCDelObjInSceneBack::New() const {
  return new GCDelObjInSceneBack;
}

void GCDelObjInSceneBack::Clear() {
  objids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelObjInSceneBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelObjInSceneBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 objIds = 1;
      case 1: {
        if (tag == 8) {
         parse_objIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_objids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_objIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelObjInSceneBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelObjInSceneBack)
  return false;
#undef DO_
}

void GCDelObjInSceneBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelObjInSceneBack)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->objids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelObjInSceneBack)
}

::google::protobuf::uint8* GCDelObjInSceneBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelObjInSceneBack)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->objids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelObjInSceneBack)
  return target;
}

int GCDelObjInSceneBack::ByteSize() const {
  int total_size = 0;

  // repeated int64 objIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objids(i));
    }
    total_size += 1 * this->objids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelObjInSceneBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelObjInSceneBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelObjInSceneBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelObjInSceneBack::MergeFrom(const GCDelObjInSceneBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  objids_.MergeFrom(from.objids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelObjInSceneBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelObjInSceneBack::CopyFrom(const GCDelObjInSceneBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelObjInSceneBack::IsInitialized() const {

  return true;
}

void GCDelObjInSceneBack::Swap(GCDelObjInSceneBack* other) {
  if (other != this) {
    objids_.Swap(&other->objids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelObjInSceneBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelObjInSceneBack_descriptor_;
  metadata.reflection = GCDelObjInSceneBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCharObjDieBack::kObjIdsFieldNumber;
#endif  // !_MSC_VER

GCCharObjDieBack::GCCharObjDieBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharObjDieBack)
}

void GCCharObjDieBack::InitAsDefaultInstance() {
}

GCCharObjDieBack::GCCharObjDieBack(const GCCharObjDieBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharObjDieBack)
}

void GCCharObjDieBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharObjDieBack::~GCCharObjDieBack() {
  // @@protoc_insertion_point(destructor:GCCharObjDieBack)
  SharedDtor();
}

void GCCharObjDieBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCharObjDieBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharObjDieBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharObjDieBack_descriptor_;
}

const GCCharObjDieBack& GCCharObjDieBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCCharObjDieBack* GCCharObjDieBack::default_instance_ = NULL;

GCCharObjDieBack* GCCharObjDieBack::New() const {
  return new GCCharObjDieBack;
}

void GCCharObjDieBack::Clear() {
  objids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharObjDieBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharObjDieBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 objIds = 1;
      case 1: {
        if (tag == 8) {
         parse_objIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_objids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_objIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharObjDieBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharObjDieBack)
  return false;
#undef DO_
}

void GCCharObjDieBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharObjDieBack)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->objids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharObjDieBack)
}

::google::protobuf::uint8* GCCharObjDieBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharObjDieBack)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->objids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharObjDieBack)
  return target;
}

int GCCharObjDieBack::ByteSize() const {
  int total_size = 0;

  // repeated int64 objIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objids(i));
    }
    total_size += 1 * this->objids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharObjDieBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharObjDieBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharObjDieBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharObjDieBack::MergeFrom(const GCCharObjDieBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  objids_.MergeFrom(from.objids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharObjDieBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharObjDieBack::CopyFrom(const GCCharObjDieBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharObjDieBack::IsInitialized() const {

  return true;
}

void GCCharObjDieBack::Swap(GCCharObjDieBack* other) {
  if (other != this) {
    objids_.Swap(&other->objids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharObjDieBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharObjDieBack_descriptor_;
  metadata.reflection = GCCharObjDieBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSendMove::kStartPosFieldNumber;
const int CGSendMove::kTargetPosFieldNumber;
const int CGSendMove::kClientTimeFieldNumber;
const int CGSendMove::kFlyHeightFieldNumber;
const int CGSendMove::kTypeFieldNumber;
const int CGSendMove::kSpeedFieldNumber;
const int CGSendMove::kFlowFieldNumber;
const int CGSendMove::kObjectIdFieldNumber;
#endif  // !_MSC_VER

CGSendMove::CGSendMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSendMove)
}

void CGSendMove::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGSendMove::CGSendMove(const CGSendMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSendMove)
}

void CGSendMove::SharedCtor() {
  _cached_size_ = 0;
  startpos_ = NULL;
  clienttime_ = GOOGLE_LONGLONG(0);
  flyheight_ = 0;
  type_ = 0;
  speed_ = 0;
  flow_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSendMove::~CGSendMove() {
  // @@protoc_insertion_point(destructor:CGSendMove)
  SharedDtor();
}

void CGSendMove::SharedDtor() {
  if (this != default_instance_) {
    delete startpos_;
  }
}

void CGSendMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSendMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSendMove_descriptor_;
}

const CGSendMove& CGSendMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGSendMove* CGSendMove::default_instance_ = NULL;

CGSendMove* CGSendMove::New() const {
  return new CGSendMove;
}

void CGSendMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGSendMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(clienttime_, objectid_);
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSendMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSendMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3Info startPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        break;
      }

      // repeated .Vector3Info targetPos = 2;
      case 2: {
        if (tag == 18) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        if (input->ExpectTag(24)) goto parse_clientTime;
        break;
      }

      // optional int64 clientTime = 3;
      case 3: {
        if (tag == 24) {
         parse_clientTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clienttime_)));
          set_has_clienttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flyHeight;
        break;
      }

      // optional int32 flyHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_flyHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flyheight_)));
          set_has_flyheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (tag == 48) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_flow;
        break;
      }

      // optional int32 flow = 7;
      case 7: {
        if (tag == 56) {
         parse_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flow_)));
          set_has_flow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_objectId;
        break;
      }

      // optional int64 objectId = 8;
      case 8: {
        if (tag == 64) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSendMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSendMove)
  return false;
#undef DO_
}

void CGSendMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSendMove)
  // optional .Vector3Info startPos = 1;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startpos(), output);
  }

  // repeated .Vector3Info targetPos = 2;
  for (int i = 0; i < this->targetpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(i), output);
  }

  // optional int64 clientTime = 3;
  if (has_clienttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->clienttime(), output);
  }

  // optional int32 flyHeight = 4;
  if (has_flyheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flyheight(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int32 flow = 7;
  if (has_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flow(), output);
  }

  // optional int64 objectId = 8;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSendMove)
}

::google::protobuf::uint8* CGSendMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSendMove)
  // optional .Vector3Info startPos = 1;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startpos(), target);
  }

  // repeated .Vector3Info targetPos = 2;
  for (int i = 0; i < this->targetpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(i), target);
  }

  // optional int64 clientTime = 3;
  if (has_clienttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->clienttime(), target);
  }

  // optional int32 flyHeight = 4;
  if (has_flyheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flyheight(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int32 flow = 7;
  if (has_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flow(), target);
  }

  // optional int64 objectId = 8;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSendMove)
  return target;
}

int CGSendMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3Info startPos = 1;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional int64 clientTime = 3;
    if (has_clienttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clienttime());
    }

    // optional int32 flyHeight = 4;
    if (has_flyheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flyheight());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 flow = 7;
    if (has_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow());
    }

    // optional int64 objectId = 8;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

  }
  // repeated .Vector3Info targetPos = 2;
  total_size += 1 * this->targetpos_size();
  for (int i = 0; i < this->targetpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSendMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSendMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSendMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSendMove::MergeFrom(const CGSendMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetpos_.MergeFrom(from.targetpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_clienttime()) {
      set_clienttime(from.clienttime());
    }
    if (from.has_flyheight()) {
      set_flyheight(from.flyheight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_flow()) {
      set_flow(from.flow());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSendMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSendMove::CopyFrom(const CGSendMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSendMove::IsInitialized() const {

  return true;
}

void CGSendMove::Swap(CGSendMove* other) {
  if (other != this) {
    std::swap(startpos_, other->startpos_);
    targetpos_.Swap(&other->targetpos_);
    std::swap(clienttime_, other->clienttime_);
    std::swap(flyheight_, other->flyheight_);
    std::swap(type_, other->type_);
    std::swap(speed_, other->speed_);
    std::swap(flow_, other->flow_);
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSendMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSendMove_descriptor_;
  metadata.reflection = CGSendMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSendMove::kStartPosFieldNumber;
const int GCSendMove::kTargetPosFieldNumber;
const int GCSendMove::kObjectIdFieldNumber;
const int GCSendMove::kStartMoveTimeFieldNumber;
const int GCSendMove::kFlyHeightFieldNumber;
const int GCSendMove::kTypeFieldNumber;
const int GCSendMove::kSpeedFieldNumber;
const int GCSendMove::kFlowFieldNumber;
#endif  // !_MSC_VER

GCSendMove::GCSendMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSendMove)
}

void GCSendMove::InitAsDefaultInstance() {
  startpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCSendMove::GCSendMove(const GCSendMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSendMove)
}

void GCSendMove::SharedCtor() {
  _cached_size_ = 0;
  startpos_ = NULL;
  objectid_ = GOOGLE_LONGLONG(0);
  startmovetime_ = GOOGLE_LONGLONG(0);
  flyheight_ = 0;
  type_ = 0;
  speed_ = 0;
  flow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSendMove::~GCSendMove() {
  // @@protoc_insertion_point(destructor:GCSendMove)
  SharedDtor();
}

void GCSendMove::SharedDtor() {
  if (this != default_instance_) {
    delete startpos_;
  }
}

void GCSendMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSendMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSendMove_descriptor_;
}

const GCSendMove& GCSendMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCSendMove* GCSendMove::default_instance_ = NULL;

GCSendMove* GCSendMove::New() const {
  return new GCSendMove;
}

void GCSendMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCSendMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(objectid_, flow_);
    if (has_startpos()) {
      if (startpos_ != NULL) startpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSendMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSendMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3Info startPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        break;
      }

      // repeated .Vector3Info targetPos = 2;
      case 2: {
        if (tag == 18) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetPos;
        if (input->ExpectTag(24)) goto parse_objectId;
        break;
      }

      // optional int64 objectId = 3;
      case 3: {
        if (tag == 24) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_startMoveTime;
        break;
      }

      // optional int64 startMoveTime = 4;
      case 4: {
        if (tag == 32) {
         parse_startMoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startmovetime_)));
          set_has_startmovetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flyHeight;
        break;
      }

      // optional int32 flyHeight = 5;
      case 5: {
        if (tag == 40) {
         parse_flyHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flyheight_)));
          set_has_flyheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional int32 type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_speed;
        break;
      }

      // optional int32 speed = 7;
      case 7: {
        if (tag == 56) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_flow;
        break;
      }

      // optional int32 flow = 8;
      case 8: {
        if (tag == 64) {
         parse_flow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flow_)));
          set_has_flow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSendMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSendMove)
  return false;
#undef DO_
}

void GCSendMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSendMove)
  // optional .Vector3Info startPos = 1;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startpos(), output);
  }

  // repeated .Vector3Info targetPos = 2;
  for (int i = 0; i < this->targetpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetpos(i), output);
  }

  // optional int64 objectId = 3;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->objectid(), output);
  }

  // optional int64 startMoveTime = 4;
  if (has_startmovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->startmovetime(), output);
  }

  // optional int32 flyHeight = 5;
  if (has_flyheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flyheight(), output);
  }

  // optional int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->speed(), output);
  }

  // optional int32 flow = 8;
  if (has_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSendMove)
}

::google::protobuf::uint8* GCSendMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSendMove)
  // optional .Vector3Info startPos = 1;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startpos(), target);
  }

  // repeated .Vector3Info targetPos = 2;
  for (int i = 0; i < this->targetpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetpos(i), target);
  }

  // optional int64 objectId = 3;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->objectid(), target);
  }

  // optional int64 startMoveTime = 4;
  if (has_startmovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->startmovetime(), target);
  }

  // optional int32 flyHeight = 5;
  if (has_flyheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flyheight(), target);
  }

  // optional int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // optional int32 speed = 7;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->speed(), target);
  }

  // optional int32 flow = 8;
  if (has_flow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSendMove)
  return target;
}

int GCSendMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3Info startPos = 1;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpos());
    }

    // optional int64 objectId = 3;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional int64 startMoveTime = 4;
    if (has_startmovetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startmovetime());
    }

    // optional int32 flyHeight = 5;
    if (has_flyheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flyheight());
    }

    // optional int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 speed = 7;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 flow = 8;
    if (has_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow());
    }

  }
  // repeated .Vector3Info targetPos = 2;
  total_size += 1 * this->targetpos_size();
  for (int i = 0; i < this->targetpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targetpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSendMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSendMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSendMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSendMove::MergeFrom(const GCSendMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetpos_.MergeFrom(from.targetpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startpos()) {
      mutable_startpos()->::Vector3Info::MergeFrom(from.startpos());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_startmovetime()) {
      set_startmovetime(from.startmovetime());
    }
    if (from.has_flyheight()) {
      set_flyheight(from.flyheight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_flow()) {
      set_flow(from.flow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSendMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSendMove::CopyFrom(const GCSendMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSendMove::IsInitialized() const {

  return true;
}

void GCSendMove::Swap(GCSendMove* other) {
  if (other != this) {
    std::swap(startpos_, other->startpos_);
    targetpos_.Swap(&other->targetpos_);
    std::swap(objectid_, other->objectid_);
    std::swap(startmovetime_, other->startmovetime_);
    std::swap(flyheight_, other->flyheight_);
    std::swap(type_, other->type_);
    std::swap(speed_, other->speed_);
    std::swap(flow_, other->flow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSendMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSendMove_descriptor_;
  metadata.reflection = GCSendMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGStopMove::kStopPositionFieldNumber;
const int CGStopMove::kDirPositionFieldNumber;
const int CGStopMove::kFlyHeightFieldNumber;
const int CGStopMove::kTypeFieldNumber;
const int CGStopMove::kObjectIdFieldNumber;
#endif  // !_MSC_VER

CGStopMove::CGStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGStopMove)
}

void CGStopMove::InitAsDefaultInstance() {
  stopposition_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  dirposition_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGStopMove::CGStopMove(const CGStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGStopMove)
}

void CGStopMove::SharedCtor() {
  _cached_size_ = 0;
  stopposition_ = NULL;
  dirposition_ = NULL;
  flyheight_ = 0;
  type_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGStopMove::~CGStopMove() {
  // @@protoc_insertion_point(destructor:CGStopMove)
  SharedDtor();
}

void CGStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete stopposition_;
    delete dirposition_;
  }
}

void CGStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGStopMove_descriptor_;
}

const CGStopMove& CGStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGStopMove* CGStopMove::default_instance_ = NULL;

CGStopMove* CGStopMove::New() const {
  return new CGStopMove;
}

void CGStopMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGStopMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flyheight_, objectid_);
    if (has_stopposition()) {
      if (stopposition_ != NULL) stopposition_->::Vector3Info::Clear();
    }
    if (has_dirposition()) {
      if (dirposition_ != NULL) dirposition_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGStopMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3Info stopPosition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dirPosition;
        break;
      }

      // optional .Vector3Info dirPosition = 2;
      case 2: {
        if (tag == 18) {
         parse_dirPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flyHeight;
        break;
      }

      // optional int32 flyHeight = 3;
      case 3: {
        if (tag == 24) {
         parse_flyHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flyheight_)));
          set_has_flyheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_objectId;
        break;
      }

      // optional int64 objectId = 5;
      case 5: {
        if (tag == 40) {
         parse_objectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGStopMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGStopMove)
  return false;
#undef DO_
}

void CGStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGStopMove)
  // optional .Vector3Info stopPosition = 1;
  if (has_stopposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stopposition(), output);
  }

  // optional .Vector3Info dirPosition = 2;
  if (has_dirposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dirposition(), output);
  }

  // optional int32 flyHeight = 3;
  if (has_flyheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flyheight(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int64 objectId = 5;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->objectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGStopMove)
}

::google::protobuf::uint8* CGStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGStopMove)
  // optional .Vector3Info stopPosition = 1;
  if (has_stopposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stopposition(), target);
  }

  // optional .Vector3Info dirPosition = 2;
  if (has_dirposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dirposition(), target);
  }

  // optional int32 flyHeight = 3;
  if (has_flyheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flyheight(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int64 objectId = 5;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->objectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGStopMove)
  return target;
}

int CGStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3Info stopPosition = 1;
    if (has_stopposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopposition());
    }

    // optional .Vector3Info dirPosition = 2;
    if (has_dirposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirposition());
    }

    // optional int32 flyHeight = 3;
    if (has_flyheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flyheight());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 objectId = 5;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGStopMove::MergeFrom(const CGStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stopposition()) {
      mutable_stopposition()->::Vector3Info::MergeFrom(from.stopposition());
    }
    if (from.has_dirposition()) {
      mutable_dirposition()->::Vector3Info::MergeFrom(from.dirposition());
    }
    if (from.has_flyheight()) {
      set_flyheight(from.flyheight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGStopMove::CopyFrom(const CGStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGStopMove::IsInitialized() const {

  return true;
}

void CGStopMove::Swap(CGStopMove* other) {
  if (other != this) {
    std::swap(stopposition_, other->stopposition_);
    std::swap(dirposition_, other->dirposition_);
    std::swap(flyheight_, other->flyheight_);
    std::swap(type_, other->type_);
    std::swap(objectid_, other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGStopMove_descriptor_;
  metadata.reflection = CGStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCStopMove::kObjectIdFieldNumber;
const int GCStopMove::kStopPositionFieldNumber;
const int GCStopMove::kDirPositionFieldNumber;
const int GCStopMove::kFlyHeightFieldNumber;
const int GCStopMove::kTypeFieldNumber;
#endif  // !_MSC_VER

GCStopMove::GCStopMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCStopMove)
}

void GCStopMove::InitAsDefaultInstance() {
  stopposition_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  dirposition_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCStopMove::GCStopMove(const GCStopMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCStopMove)
}

void GCStopMove::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  stopposition_ = NULL;
  dirposition_ = NULL;
  flyheight_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCStopMove::~GCStopMove() {
  // @@protoc_insertion_point(destructor:GCStopMove)
  SharedDtor();
}

void GCStopMove::SharedDtor() {
  if (this != default_instance_) {
    delete stopposition_;
    delete dirposition_;
  }
}

void GCStopMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCStopMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCStopMove_descriptor_;
}

const GCStopMove& GCStopMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCStopMove* GCStopMove::default_instance_ = NULL;

GCStopMove* GCStopMove::New() const {
  return new GCStopMove;
}

void GCStopMove::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCStopMove*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(flyheight_, type_);
    objectid_ = GOOGLE_LONGLONG(0);
    if (has_stopposition()) {
      if (stopposition_ != NULL) stopposition_->::Vector3Info::Clear();
    }
    if (has_dirposition()) {
      if (dirposition_ != NULL) dirposition_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCStopMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCStopMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stopPosition;
        break;
      }

      // optional .Vector3Info stopPosition = 2;
      case 2: {
        if (tag == 18) {
         parse_stopPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dirPosition;
        break;
      }

      // optional .Vector3Info dirPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_dirPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flyHeight;
        break;
      }

      // optional int32 flyHeight = 4;
      case 4: {
        if (tag == 32) {
         parse_flyHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flyheight_)));
          set_has_flyheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCStopMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCStopMove)
  return false;
#undef DO_
}

void GCStopMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCStopMove)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional .Vector3Info stopPosition = 2;
  if (has_stopposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stopposition(), output);
  }

  // optional .Vector3Info dirPosition = 3;
  if (has_dirposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dirposition(), output);
  }

  // optional int32 flyHeight = 4;
  if (has_flyheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flyheight(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCStopMove)
}

::google::protobuf::uint8* GCStopMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCStopMove)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional .Vector3Info stopPosition = 2;
  if (has_stopposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stopposition(), target);
  }

  // optional .Vector3Info dirPosition = 3;
  if (has_dirposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dirposition(), target);
  }

  // optional int32 flyHeight = 4;
  if (has_flyheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flyheight(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCStopMove)
  return target;
}

int GCStopMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional .Vector3Info stopPosition = 2;
    if (has_stopposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopposition());
    }

    // optional .Vector3Info dirPosition = 3;
    if (has_dirposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirposition());
    }

    // optional int32 flyHeight = 4;
    if (has_flyheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flyheight());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCStopMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCStopMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCStopMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCStopMove::MergeFrom(const GCStopMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_stopposition()) {
      mutable_stopposition()->::Vector3Info::MergeFrom(from.stopposition());
    }
    if (from.has_dirposition()) {
      mutable_dirposition()->::Vector3Info::MergeFrom(from.dirposition());
    }
    if (from.has_flyheight()) {
      set_flyheight(from.flyheight());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCStopMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCStopMove::CopyFrom(const GCStopMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCStopMove::IsInitialized() const {

  return true;
}

void GCStopMove::Swap(GCStopMove* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(stopposition_, other->stopposition_);
    std::swap(dirposition_, other->dirposition_);
    std::swap(flyheight_, other->flyheight_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCStopMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCStopMove_descriptor_;
  metadata.reflection = GCStopMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshPlayerAttr::kMySelfFieldNumber;
#endif  // !_MSC_VER

GCRefreshPlayerAttr::GCRefreshPlayerAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshPlayerAttr)
}

void GCRefreshPlayerAttr::InitAsDefaultInstance() {
  myself_ = const_cast< ::CharacterInfo*>(&::CharacterInfo::default_instance());
}

GCRefreshPlayerAttr::GCRefreshPlayerAttr(const GCRefreshPlayerAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshPlayerAttr)
}

void GCRefreshPlayerAttr::SharedCtor() {
  _cached_size_ = 0;
  myself_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshPlayerAttr::~GCRefreshPlayerAttr() {
  // @@protoc_insertion_point(destructor:GCRefreshPlayerAttr)
  SharedDtor();
}

void GCRefreshPlayerAttr::SharedDtor() {
  if (this != default_instance_) {
    delete myself_;
  }
}

void GCRefreshPlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshPlayerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshPlayerAttr_descriptor_;
}

const GCRefreshPlayerAttr& GCRefreshPlayerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCRefreshPlayerAttr* GCRefreshPlayerAttr::default_instance_ = NULL;

GCRefreshPlayerAttr* GCRefreshPlayerAttr::New() const {
  return new GCRefreshPlayerAttr;
}

void GCRefreshPlayerAttr::Clear() {
  if (has_myself()) {
    if (myself_ != NULL) myself_->::CharacterInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshPlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshPlayerAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharacterInfo mySelf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myself()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshPlayerAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshPlayerAttr)
  return false;
#undef DO_
}

void GCRefreshPlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshPlayerAttr)
  // optional .CharacterInfo mySelf = 1;
  if (has_myself()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myself(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshPlayerAttr)
}

::google::protobuf::uint8* GCRefreshPlayerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshPlayerAttr)
  // optional .CharacterInfo mySelf = 1;
  if (has_myself()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myself(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshPlayerAttr)
  return target;
}

int GCRefreshPlayerAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharacterInfo mySelf = 1;
    if (has_myself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myself());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshPlayerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshPlayerAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshPlayerAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshPlayerAttr::MergeFrom(const GCRefreshPlayerAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myself()) {
      mutable_myself()->::CharacterInfo::MergeFrom(from.myself());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshPlayerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshPlayerAttr::CopyFrom(const GCRefreshPlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshPlayerAttr::IsInitialized() const {

  return true;
}

void GCRefreshPlayerAttr::Swap(GCRefreshPlayerAttr* other) {
  if (other != this) {
    std::swap(myself_, other->myself_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshPlayerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshPlayerAttr_descriptor_;
  metadata.reflection = GCRefreshPlayerAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGFly::CGFly()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGFly)
}

void CGFly::InitAsDefaultInstance() {
}

CGFly::CGFly(const CGFly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGFly)
}

void CGFly::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGFly::~CGFly() {
  // @@protoc_insertion_point(destructor:CGFly)
  SharedDtor();
}

void CGFly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGFly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGFly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGFly_descriptor_;
}

const CGFly& CGFly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGFly* CGFly::default_instance_ = NULL;

CGFly* CGFly::New() const {
  return new CGFly;
}

void CGFly::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGFly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGFly)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGFly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGFly)
  return false;
#undef DO_
}

void CGFly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGFly)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGFly)
}

::google::protobuf::uint8* CGFly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGFly)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGFly)
  return target;
}

int CGFly::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGFly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGFly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGFly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGFly::MergeFrom(const CGFly& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGFly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGFly::CopyFrom(const CGFly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGFly::IsInitialized() const {

  return true;
}

void CGFly::Swap(CGFly* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGFly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGFly_descriptor_;
  metadata.reflection = CGFly_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSynPlayerPos::kPositionFieldNumber;
const int CGSynPlayerPos::kDirPositionFieldNumber;
#endif  // !_MSC_VER

CGSynPlayerPos::CGSynPlayerPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGSynPlayerPos)
}

void CGSynPlayerPos::InitAsDefaultInstance() {
  position_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  dirposition_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGSynPlayerPos::CGSynPlayerPos(const CGSynPlayerPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGSynPlayerPos)
}

void CGSynPlayerPos::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  dirposition_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSynPlayerPos::~CGSynPlayerPos() {
  // @@protoc_insertion_point(destructor:CGSynPlayerPos)
  SharedDtor();
}

void CGSynPlayerPos::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete dirposition_;
  }
}

void CGSynPlayerPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSynPlayerPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSynPlayerPos_descriptor_;
}

const CGSynPlayerPos& CGSynPlayerPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGSynPlayerPos* CGSynPlayerPos::default_instance_ = NULL;

CGSynPlayerPos* CGSynPlayerPos::New() const {
  return new CGSynPlayerPos;
}

void CGSynPlayerPos::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_position()) {
      if (position_ != NULL) position_->::Vector3Info::Clear();
    }
    if (has_dirposition()) {
      if (dirposition_ != NULL) dirposition_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSynPlayerPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGSynPlayerPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Vector3Info position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dirPosition;
        break;
      }

      // optional .Vector3Info dirPosition = 2;
      case 2: {
        if (tag == 18) {
         parse_dirPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGSynPlayerPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGSynPlayerPos)
  return false;
#undef DO_
}

void CGSynPlayerPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGSynPlayerPos)
  // optional .Vector3Info position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .Vector3Info dirPosition = 2;
  if (has_dirposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dirposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGSynPlayerPos)
}

::google::protobuf::uint8* CGSynPlayerPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGSynPlayerPos)
  // optional .Vector3Info position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .Vector3Info dirPosition = 2;
  if (has_dirposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dirposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGSynPlayerPos)
  return target;
}

int CGSynPlayerPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Vector3Info position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .Vector3Info dirPosition = 2;
    if (has_dirposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirposition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSynPlayerPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSynPlayerPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSynPlayerPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSynPlayerPos::MergeFrom(const CGSynPlayerPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::Vector3Info::MergeFrom(from.position());
    }
    if (from.has_dirposition()) {
      mutable_dirposition()->::Vector3Info::MergeFrom(from.dirposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSynPlayerPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSynPlayerPos::CopyFrom(const CGSynPlayerPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSynPlayerPos::IsInitialized() const {

  return true;
}

void CGSynPlayerPos::Swap(CGSynPlayerPos* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(dirposition_, other->dirposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSynPlayerPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSynPlayerPos_descriptor_;
  metadata.reflection = CGSynPlayerPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChangeAttackState::kStateFieldNumber;
#endif  // !_MSC_VER

CGChangeAttackState::CGChangeAttackState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChangeAttackState)
}

void CGChangeAttackState::InitAsDefaultInstance() {
}

CGChangeAttackState::CGChangeAttackState(const CGChangeAttackState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChangeAttackState)
}

void CGChangeAttackState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChangeAttackState::~CGChangeAttackState() {
  // @@protoc_insertion_point(destructor:CGChangeAttackState)
  SharedDtor();
}

void CGChangeAttackState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChangeAttackState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChangeAttackState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChangeAttackState_descriptor_;
}

const CGChangeAttackState& CGChangeAttackState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGChangeAttackState* CGChangeAttackState::default_instance_ = NULL;

CGChangeAttackState* CGChangeAttackState::New() const {
  return new CGChangeAttackState;
}

void CGChangeAttackState::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChangeAttackState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChangeAttackState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChangeAttackState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChangeAttackState)
  return false;
#undef DO_
}

void CGChangeAttackState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChangeAttackState)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChangeAttackState)
}

::google::protobuf::uint8* CGChangeAttackState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChangeAttackState)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChangeAttackState)
  return target;
}

int CGChangeAttackState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChangeAttackState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChangeAttackState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChangeAttackState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChangeAttackState::MergeFrom(const CGChangeAttackState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChangeAttackState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChangeAttackState::CopyFrom(const CGChangeAttackState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChangeAttackState::IsInitialized() const {

  return true;
}

void CGChangeAttackState::Swap(CGChangeAttackState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChangeAttackState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChangeAttackState_descriptor_;
  metadata.reflection = CGChangeAttackState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPutDeviceInfo::kDeviceInfoFieldNumber;
#endif  // !_MSC_VER

GCPutDeviceInfo::GCPutDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPutDeviceInfo)
}

void GCPutDeviceInfo::InitAsDefaultInstance() {
}

GCPutDeviceInfo::GCPutDeviceInfo(const GCPutDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPutDeviceInfo)
}

void GCPutDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPutDeviceInfo::~GCPutDeviceInfo() {
  // @@protoc_insertion_point(destructor:GCPutDeviceInfo)
  SharedDtor();
}

void GCPutDeviceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPutDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPutDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPutDeviceInfo_descriptor_;
}

const GCPutDeviceInfo& GCPutDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCPutDeviceInfo* GCPutDeviceInfo::default_instance_ = NULL;

GCPutDeviceInfo* GCPutDeviceInfo::New() const {
  return new GCPutDeviceInfo;
}

void GCPutDeviceInfo::Clear() {
  deviceinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPutDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPutDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DeviceInfo deviceInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_deviceInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPutDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPutDeviceInfo)
  return false;
#undef DO_
}

void GCPutDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPutDeviceInfo)
  // repeated .DeviceInfo deviceInfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPutDeviceInfo)
}

::google::protobuf::uint8* GCPutDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPutDeviceInfo)
  // repeated .DeviceInfo deviceInfo = 1;
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPutDeviceInfo)
  return target;
}

int GCPutDeviceInfo::ByteSize() const {
  int total_size = 0;

  // repeated .DeviceInfo deviceInfo = 1;
  total_size += 1 * this->deviceinfo_size();
  for (int i = 0; i < this->deviceinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPutDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPutDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPutDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPutDeviceInfo::MergeFrom(const GCPutDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfo_.MergeFrom(from.deviceinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPutDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPutDeviceInfo::CopyFrom(const GCPutDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPutDeviceInfo::IsInitialized() const {

  return true;
}

void GCPutDeviceInfo::Swap(GCPutDeviceInfo* other) {
  if (other != this) {
    deviceinfo_.Swap(&other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPutDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPutDeviceInfo_descriptor_;
  metadata.reflection = GCPutDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshDeviceInfo::kDeviceInfoFieldNumber;
#endif  // !_MSC_VER

GCRefreshDeviceInfo::GCRefreshDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshDeviceInfo)
}

void GCRefreshDeviceInfo::InitAsDefaultInstance() {
  deviceinfo_ = const_cast< ::DeviceInfo*>(&::DeviceInfo::default_instance());
}

GCRefreshDeviceInfo::GCRefreshDeviceInfo(const GCRefreshDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshDeviceInfo)
}

void GCRefreshDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshDeviceInfo::~GCRefreshDeviceInfo() {
  // @@protoc_insertion_point(destructor:GCRefreshDeviceInfo)
  SharedDtor();
}

void GCRefreshDeviceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete deviceinfo_;
  }
}

void GCRefreshDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshDeviceInfo_descriptor_;
}

const GCRefreshDeviceInfo& GCRefreshDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCRefreshDeviceInfo* GCRefreshDeviceInfo::default_instance_ = NULL;

GCRefreshDeviceInfo* GCRefreshDeviceInfo::New() const {
  return new GCRefreshDeviceInfo;
}

void GCRefreshDeviceInfo::Clear() {
  if (has_deviceinfo()) {
    if (deviceinfo_ != NULL) deviceinfo_->::DeviceInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceInfo deviceInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deviceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshDeviceInfo)
  return false;
#undef DO_
}

void GCRefreshDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshDeviceInfo)
  // optional .DeviceInfo deviceInfo = 1;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshDeviceInfo)
}

::google::protobuf::uint8* GCRefreshDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshDeviceInfo)
  // optional .DeviceInfo deviceInfo = 1;
  if (has_deviceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshDeviceInfo)
  return target;
}

int GCRefreshDeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DeviceInfo deviceInfo = 1;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deviceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshDeviceInfo::MergeFrom(const GCRefreshDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceinfo()) {
      mutable_deviceinfo()->::DeviceInfo::MergeFrom(from.deviceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshDeviceInfo::CopyFrom(const GCRefreshDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshDeviceInfo::IsInitialized() const {

  return true;
}

void GCRefreshDeviceInfo::Swap(GCRefreshDeviceInfo* other) {
  if (other != this) {
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshDeviceInfo_descriptor_;
  metadata.reflection = GCRefreshDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGGetherDevice::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGGetherDevice::CGGetherDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGGetherDevice)
}

void CGGetherDevice::InitAsDefaultInstance() {
}

CGGetherDevice::CGGetherDevice(const CGGetherDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGGetherDevice)
}

void CGGetherDevice::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGGetherDevice::~CGGetherDevice() {
  // @@protoc_insertion_point(destructor:CGGetherDevice)
  SharedDtor();
}

void CGGetherDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGGetherDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGGetherDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGGetherDevice_descriptor_;
}

const CGGetherDevice& CGGetherDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGGetherDevice* CGGetherDevice::default_instance_ = NULL;

CGGetherDevice* CGGetherDevice::New() const {
  return new CGGetherDevice;
}

void CGGetherDevice::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGGetherDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGGetherDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGGetherDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGGetherDevice)
  return false;
#undef DO_
}

void CGGetherDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGGetherDevice)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGGetherDevice)
}

::google::protobuf::uint8* CGGetherDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGGetherDevice)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGGetherDevice)
  return target;
}

int CGGetherDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGGetherDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGGetherDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGGetherDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGGetherDevice::MergeFrom(const CGGetherDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGGetherDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGGetherDevice::CopyFrom(const CGGetherDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGGetherDevice::IsInitialized() const {

  return true;
}

void CGGetherDevice::Swap(CGGetherDevice* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGGetherDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGGetherDevice_descriptor_;
  metadata.reflection = CGGetherDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPickDevice::kObjIdsFieldNumber;
#endif  // !_MSC_VER

GCPickDevice::GCPickDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPickDevice)
}

void GCPickDevice::InitAsDefaultInstance() {
}

GCPickDevice::GCPickDevice(const GCPickDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPickDevice)
}

void GCPickDevice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPickDevice::~GCPickDevice() {
  // @@protoc_insertion_point(destructor:GCPickDevice)
  SharedDtor();
}

void GCPickDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPickDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPickDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPickDevice_descriptor_;
}

const GCPickDevice& GCPickDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCPickDevice* GCPickDevice::default_instance_ = NULL;

GCPickDevice* GCPickDevice::New() const {
  return new GCPickDevice;
}

void GCPickDevice::Clear() {
  objids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPickDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPickDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 objIds = 1;
      case 1: {
        if (tag == 8) {
         parse_objIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_objids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_objIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPickDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPickDevice)
  return false;
#undef DO_
}

void GCPickDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPickDevice)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->objids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPickDevice)
}

::google::protobuf::uint8* GCPickDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPickDevice)
  // repeated int64 objIds = 1;
  for (int i = 0; i < this->objids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->objids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPickDevice)
  return target;
}

int GCPickDevice::ByteSize() const {
  int total_size = 0;

  // repeated int64 objIds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objids(i));
    }
    total_size += 1 * this->objids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPickDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPickDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPickDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPickDevice::MergeFrom(const GCPickDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  objids_.MergeFrom(from.objids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPickDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPickDevice::CopyFrom(const GCPickDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPickDevice::IsInitialized() const {

  return true;
}

void GCPickDevice::Swap(GCPickDevice* other) {
  if (other != this) {
    objids_.Swap(&other->objids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPickDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPickDevice_descriptor_;
  metadata.reflection = GCPickDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCShowHideObjInSceneBack::kTypeFieldNumber;
const int GCShowHideObjInSceneBack::kObjIdsFieldNumber;
#endif  // !_MSC_VER

GCShowHideObjInSceneBack::GCShowHideObjInSceneBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCShowHideObjInSceneBack)
}

void GCShowHideObjInSceneBack::InitAsDefaultInstance() {
}

GCShowHideObjInSceneBack::GCShowHideObjInSceneBack(const GCShowHideObjInSceneBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCShowHideObjInSceneBack)
}

void GCShowHideObjInSceneBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCShowHideObjInSceneBack::~GCShowHideObjInSceneBack() {
  // @@protoc_insertion_point(destructor:GCShowHideObjInSceneBack)
  SharedDtor();
}

void GCShowHideObjInSceneBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCShowHideObjInSceneBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCShowHideObjInSceneBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCShowHideObjInSceneBack_descriptor_;
}

const GCShowHideObjInSceneBack& GCShowHideObjInSceneBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCShowHideObjInSceneBack* GCShowHideObjInSceneBack::default_instance_ = NULL;

GCShowHideObjInSceneBack* GCShowHideObjInSceneBack::New() const {
  return new GCShowHideObjInSceneBack;
}

void GCShowHideObjInSceneBack::Clear() {
  type_ = 0;
  objids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCShowHideObjInSceneBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCShowHideObjInSceneBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objIds;
        break;
      }

      // repeated int64 objIds = 2;
      case 2: {
        if (tag == 16) {
         parse_objIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_objids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objIds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCShowHideObjInSceneBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCShowHideObjInSceneBack)
  return false;
#undef DO_
}

void GCShowHideObjInSceneBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCShowHideObjInSceneBack)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int64 objIds = 2;
  for (int i = 0; i < this->objids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->objids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCShowHideObjInSceneBack)
}

::google::protobuf::uint8* GCShowHideObjInSceneBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCShowHideObjInSceneBack)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int64 objIds = 2;
  for (int i = 0; i < this->objids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->objids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCShowHideObjInSceneBack)
  return target;
}

int GCShowHideObjInSceneBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int64 objIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objids(i));
    }
    total_size += 1 * this->objids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCShowHideObjInSceneBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCShowHideObjInSceneBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCShowHideObjInSceneBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCShowHideObjInSceneBack::MergeFrom(const GCShowHideObjInSceneBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  objids_.MergeFrom(from.objids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCShowHideObjInSceneBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCShowHideObjInSceneBack::CopyFrom(const GCShowHideObjInSceneBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShowHideObjInSceneBack::IsInitialized() const {

  return true;
}

void GCShowHideObjInSceneBack::Swap(GCShowHideObjInSceneBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    objids_.Swap(&other->objids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCShowHideObjInSceneBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCShowHideObjInSceneBack_descriptor_;
  metadata.reflection = GCShowHideObjInSceneBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshTrapData::kTrapDataFieldNumber;
#endif  // !_MSC_VER

GCRefreshTrapData::GCRefreshTrapData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshTrapData)
}

void GCRefreshTrapData::InitAsDefaultInstance() {
}

GCRefreshTrapData::GCRefreshTrapData(const GCRefreshTrapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshTrapData)
}

void GCRefreshTrapData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshTrapData::~GCRefreshTrapData() {
  // @@protoc_insertion_point(destructor:GCRefreshTrapData)
  SharedDtor();
}

void GCRefreshTrapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshTrapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshTrapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshTrapData_descriptor_;
}

const GCRefreshTrapData& GCRefreshTrapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCRefreshTrapData* GCRefreshTrapData::default_instance_ = NULL;

GCRefreshTrapData* GCRefreshTrapData::New() const {
  return new GCRefreshTrapData;
}

void GCRefreshTrapData::Clear() {
  trapdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshTrapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshTrapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TrapData trapData = 1;
      case 1: {
        if (tag == 10) {
         parse_trapData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trapdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_trapData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshTrapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshTrapData)
  return false;
#undef DO_
}

void GCRefreshTrapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshTrapData)
  // repeated .TrapData trapData = 1;
  for (int i = 0; i < this->trapdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trapdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshTrapData)
}

::google::protobuf::uint8* GCRefreshTrapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshTrapData)
  // repeated .TrapData trapData = 1;
  for (int i = 0; i < this->trapdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trapdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshTrapData)
  return target;
}

int GCRefreshTrapData::ByteSize() const {
  int total_size = 0;

  // repeated .TrapData trapData = 1;
  total_size += 1 * this->trapdata_size();
  for (int i = 0; i < this->trapdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trapdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshTrapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshTrapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshTrapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshTrapData::MergeFrom(const GCRefreshTrapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  trapdata_.MergeFrom(from.trapdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshTrapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshTrapData::CopyFrom(const GCRefreshTrapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshTrapData::IsInitialized() const {

  return true;
}

void GCRefreshTrapData::Swap(GCRefreshTrapData* other) {
  if (other != this) {
    trapdata_.Swap(&other->trapdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshTrapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshTrapData_descriptor_;
  metadata.reflection = GCRefreshTrapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTrapItemStartMove::kObjIdFieldNumber;
const int GCTrapItemStartMove::kItemIndexFieldNumber;
#endif  // !_MSC_VER

GCTrapItemStartMove::GCTrapItemStartMove()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTrapItemStartMove)
}

void GCTrapItemStartMove::InitAsDefaultInstance() {
}

GCTrapItemStartMove::GCTrapItemStartMove(const GCTrapItemStartMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTrapItemStartMove)
}

void GCTrapItemStartMove::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTrapItemStartMove::~GCTrapItemStartMove() {
  // @@protoc_insertion_point(destructor:GCTrapItemStartMove)
  SharedDtor();
}

void GCTrapItemStartMove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCTrapItemStartMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTrapItemStartMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTrapItemStartMove_descriptor_;
}

const GCTrapItemStartMove& GCTrapItemStartMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCTrapItemStartMove* GCTrapItemStartMove::default_instance_ = NULL;

GCTrapItemStartMove* GCTrapItemStartMove::New() const {
  return new GCTrapItemStartMove;
}

void GCTrapItemStartMove::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  itemindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTrapItemStartMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTrapItemStartMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemIndex;
        break;
      }

      // repeated int32 itemIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_itemIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemindex())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTrapItemStartMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTrapItemStartMove)
  return false;
#undef DO_
}

void GCTrapItemStartMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTrapItemStartMove)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // repeated int32 itemIndex = 2;
  for (int i = 0; i < this->itemindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTrapItemStartMove)
}

::google::protobuf::uint8* GCTrapItemStartMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTrapItemStartMove)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // repeated int32 itemIndex = 2;
  for (int i = 0; i < this->itemindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTrapItemStartMove)
  return target;
}

int GCTrapItemStartMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  // repeated int32 itemIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemindex(i));
    }
    total_size += 1 * this->itemindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTrapItemStartMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTrapItemStartMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTrapItemStartMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTrapItemStartMove::MergeFrom(const GCTrapItemStartMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemindex_.MergeFrom(from.itemindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTrapItemStartMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTrapItemStartMove::CopyFrom(const GCTrapItemStartMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTrapItemStartMove::IsInitialized() const {

  return true;
}

void GCTrapItemStartMove::Swap(GCTrapItemStartMove* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    itemindex_.Swap(&other->itemindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTrapItemStartMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTrapItemStartMove_descriptor_;
  metadata.reflection = GCTrapItemStartMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterHurtInfo::kObjIdFieldNumber;
const int CharacterHurtInfo::kTotalHurtFieldNumber;
const int CharacterHurtInfo::kCharNameFieldNumber;
const int CharacterHurtInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

CharacterHurtInfo::CharacterHurtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CharacterHurtInfo)
}

void CharacterHurtInfo::InitAsDefaultInstance() {
}

CharacterHurtInfo::CharacterHurtInfo(const CharacterHurtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CharacterHurtInfo)
}

void CharacterHurtInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  totalhurt_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterHurtInfo::~CharacterHurtInfo() {
  // @@protoc_insertion_point(destructor:CharacterHurtInfo)
  SharedDtor();
}

void CharacterHurtInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void CharacterHurtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterHurtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterHurtInfo_descriptor_;
}

const CharacterHurtInfo& CharacterHurtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CharacterHurtInfo* CharacterHurtInfo::default_instance_ = NULL;

CharacterHurtInfo* CharacterHurtInfo::New() const {
  return new CharacterHurtInfo;
}

void CharacterHurtInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterHurtInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(totalhurt_, type_);
    objid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterHurtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CharacterHurtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalHurt;
        break;
      }

      // optional int32 totalHurt = 2;
      case 2: {
        if (tag == 16) {
         parse_totalHurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalhurt_)));
          set_has_totalhurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charName;
        break;
      }

      // optional string charName = 3;
      case 3: {
        if (tag == 26) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CharacterHurtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CharacterHurtInfo)
  return false;
#undef DO_
}

void CharacterHurtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CharacterHurtInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // optional int32 totalHurt = 2;
  if (has_totalhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalhurt(), output);
  }

  // optional string charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->charname(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CharacterHurtInfo)
}

::google::protobuf::uint8* CharacterHurtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CharacterHurtInfo)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // optional int32 totalHurt = 2;
  if (has_totalhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalhurt(), target);
  }

  // optional string charName = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CharacterHurtInfo)
  return target;
}

int CharacterHurtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int32 totalHurt = 2;
    if (has_totalhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalhurt());
    }

    // optional string charName = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterHurtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterHurtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterHurtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterHurtInfo::MergeFrom(const CharacterHurtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_totalhurt()) {
      set_totalhurt(from.totalhurt());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterHurtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterHurtInfo::CopyFrom(const CharacterHurtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterHurtInfo::IsInitialized() const {

  return true;
}

void CharacterHurtInfo::Swap(CharacterHurtInfo* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(totalhurt_, other->totalhurt_);
    std::swap(charname_, other->charname_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterHurtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterHurtInfo_descriptor_;
  metadata.reflection = CharacterHurtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshCharacterHurtInfo::kHurtInfoArrFieldNumber;
const int GCRefreshCharacterHurtInfo::kSelfHurtInfoFieldNumber;
const int GCRefreshCharacterHurtInfo::kDamageObjIdFieldNumber;
const int GCRefreshCharacterHurtInfo::kRefreshTypeFieldNumber;
#endif  // !_MSC_VER

GCRefreshCharacterHurtInfo::GCRefreshCharacterHurtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshCharacterHurtInfo)
}

void GCRefreshCharacterHurtInfo::InitAsDefaultInstance() {
  selfhurtinfo_ = const_cast< ::CharacterHurtInfo*>(&::CharacterHurtInfo::default_instance());
}

GCRefreshCharacterHurtInfo::GCRefreshCharacterHurtInfo(const GCRefreshCharacterHurtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshCharacterHurtInfo)
}

void GCRefreshCharacterHurtInfo::SharedCtor() {
  _cached_size_ = 0;
  selfhurtinfo_ = NULL;
  damageobjid_ = GOOGLE_LONGLONG(0);
  refreshtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshCharacterHurtInfo::~GCRefreshCharacterHurtInfo() {
  // @@protoc_insertion_point(destructor:GCRefreshCharacterHurtInfo)
  SharedDtor();
}

void GCRefreshCharacterHurtInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfhurtinfo_;
  }
}

void GCRefreshCharacterHurtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshCharacterHurtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshCharacterHurtInfo_descriptor_;
}

const GCRefreshCharacterHurtInfo& GCRefreshCharacterHurtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCRefreshCharacterHurtInfo* GCRefreshCharacterHurtInfo::default_instance_ = NULL;

GCRefreshCharacterHurtInfo* GCRefreshCharacterHurtInfo::New() const {
  return new GCRefreshCharacterHurtInfo;
}

void GCRefreshCharacterHurtInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRefreshCharacterHurtInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(damageobjid_, refreshtype_);
    if (has_selfhurtinfo()) {
      if (selfhurtinfo_ != NULL) selfhurtinfo_->::CharacterHurtInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hurtinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshCharacterHurtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshCharacterHurtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharacterHurtInfo hurtInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_hurtInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurtinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hurtInfoArr;
        if (input->ExpectTag(18)) goto parse_selfHurtInfo;
        break;
      }

      // optional .CharacterHurtInfo selfHurtInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_selfHurtInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfhurtinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_damageObjId;
        break;
      }

      // optional int64 damageObjId = 3;
      case 3: {
        if (tag == 24) {
         parse_damageObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &damageobjid_)));
          set_has_damageobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refreshType;
        break;
      }

      // optional int32 refreshType = 4;
      case 4: {
        if (tag == 32) {
         parse_refreshType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshCharacterHurtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshCharacterHurtInfo)
  return false;
#undef DO_
}

void GCRefreshCharacterHurtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshCharacterHurtInfo)
  // repeated .CharacterHurtInfo hurtInfoArr = 1;
  for (int i = 0; i < this->hurtinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hurtinfoarr(i), output);
  }

  // optional .CharacterHurtInfo selfHurtInfo = 2;
  if (has_selfhurtinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfhurtinfo(), output);
  }

  // optional int64 damageObjId = 3;
  if (has_damageobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->damageobjid(), output);
  }

  // optional int32 refreshType = 4;
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refreshtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshCharacterHurtInfo)
}

::google::protobuf::uint8* GCRefreshCharacterHurtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshCharacterHurtInfo)
  // repeated .CharacterHurtInfo hurtInfoArr = 1;
  for (int i = 0; i < this->hurtinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hurtinfoarr(i), target);
  }

  // optional .CharacterHurtInfo selfHurtInfo = 2;
  if (has_selfhurtinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfhurtinfo(), target);
  }

  // optional int64 damageObjId = 3;
  if (has_damageobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->damageobjid(), target);
  }

  // optional int32 refreshType = 4;
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refreshtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshCharacterHurtInfo)
  return target;
}

int GCRefreshCharacterHurtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CharacterHurtInfo selfHurtInfo = 2;
    if (has_selfhurtinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfhurtinfo());
    }

    // optional int64 damageObjId = 3;
    if (has_damageobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->damageobjid());
    }

    // optional int32 refreshType = 4;
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtype());
    }

  }
  // repeated .CharacterHurtInfo hurtInfoArr = 1;
  total_size += 1 * this->hurtinfoarr_size();
  for (int i = 0; i < this->hurtinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurtinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshCharacterHurtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshCharacterHurtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshCharacterHurtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshCharacterHurtInfo::MergeFrom(const GCRefreshCharacterHurtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hurtinfoarr_.MergeFrom(from.hurtinfoarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfhurtinfo()) {
      mutable_selfhurtinfo()->::CharacterHurtInfo::MergeFrom(from.selfhurtinfo());
    }
    if (from.has_damageobjid()) {
      set_damageobjid(from.damageobjid());
    }
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshCharacterHurtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshCharacterHurtInfo::CopyFrom(const GCRefreshCharacterHurtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshCharacterHurtInfo::IsInitialized() const {

  return true;
}

void GCRefreshCharacterHurtInfo::Swap(GCRefreshCharacterHurtInfo* other) {
  if (other != this) {
    hurtinfoarr_.Swap(&other->hurtinfoarr_);
    std::swap(selfhurtinfo_, other->selfhurtinfo_);
    std::swap(damageobjid_, other->damageobjid_);
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshCharacterHurtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshCharacterHurtInfo_descriptor_;
  metadata.reflection = GCRefreshCharacterHurtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelCharacterHurtInfo::kObjIdFieldNumber;
const int GCDelCharacterHurtInfo::kRefreshTypeFieldNumber;
#endif  // !_MSC_VER

GCDelCharacterHurtInfo::GCDelCharacterHurtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelCharacterHurtInfo)
}

void GCDelCharacterHurtInfo::InitAsDefaultInstance() {
}

GCDelCharacterHurtInfo::GCDelCharacterHurtInfo(const GCDelCharacterHurtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelCharacterHurtInfo)
}

void GCDelCharacterHurtInfo::SharedCtor() {
  _cached_size_ = 0;
  refreshtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelCharacterHurtInfo::~GCDelCharacterHurtInfo() {
  // @@protoc_insertion_point(destructor:GCDelCharacterHurtInfo)
  SharedDtor();
}

void GCDelCharacterHurtInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelCharacterHurtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelCharacterHurtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelCharacterHurtInfo_descriptor_;
}

const GCDelCharacterHurtInfo& GCDelCharacterHurtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCDelCharacterHurtInfo* GCDelCharacterHurtInfo::default_instance_ = NULL;

GCDelCharacterHurtInfo* GCDelCharacterHurtInfo::New() const {
  return new GCDelCharacterHurtInfo;
}

void GCDelCharacterHurtInfo::Clear() {
  refreshtype_ = 0;
  objid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelCharacterHurtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelCharacterHurtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 objId = 1;
      case 1: {
        if (tag == 8) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_objid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_objId;
        if (input->ExpectTag(16)) goto parse_refreshType;
        break;
      }

      // optional int32 refreshType = 2;
      case 2: {
        if (tag == 16) {
         parse_refreshType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refreshtype_)));
          set_has_refreshtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelCharacterHurtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelCharacterHurtInfo)
  return false;
#undef DO_
}

void GCDelCharacterHurtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelCharacterHurtInfo)
  // repeated int64 objId = 1;
  for (int i = 0; i < this->objid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->objid(i), output);
  }

  // optional int32 refreshType = 2;
  if (has_refreshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refreshtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelCharacterHurtInfo)
}

::google::protobuf::uint8* GCDelCharacterHurtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelCharacterHurtInfo)
  // repeated int64 objId = 1;
  for (int i = 0; i < this->objid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->objid(i), target);
  }

  // optional int32 refreshType = 2;
  if (has_refreshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refreshtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelCharacterHurtInfo)
  return target;
}

int GCDelCharacterHurtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 refreshType = 2;
    if (has_refreshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refreshtype());
    }

  }
  // repeated int64 objId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objid(i));
    }
    total_size += 1 * this->objid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelCharacterHurtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelCharacterHurtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelCharacterHurtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelCharacterHurtInfo::MergeFrom(const GCDelCharacterHurtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  objid_.MergeFrom(from.objid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_refreshtype()) {
      set_refreshtype(from.refreshtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelCharacterHurtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelCharacterHurtInfo::CopyFrom(const GCDelCharacterHurtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelCharacterHurtInfo::IsInitialized() const {

  return true;
}

void GCDelCharacterHurtInfo::Swap(GCDelCharacterHurtInfo* other) {
  if (other != this) {
    objid_.Swap(&other->objid_);
    std::swap(refreshtype_, other->refreshtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelCharacterHurtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelCharacterHurtInfo_descriptor_;
  metadata.reflection = GCDelCharacterHurtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTeleport::kTypeFieldNumber;
const int CGTeleport::kPosFieldNumber;
const int CGTeleport::kDirectionFieldNumber;
const int CGTeleport::kNavMeshIdFieldNumber;
const int CGTeleport::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGTeleport::CGTeleport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGTeleport)
}

void CGTeleport::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGTeleport::CGTeleport(const CGTeleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGTeleport)
}

void CGTeleport::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = NULL;
  direction_ = NULL;
  navmeshid_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTeleport::~CGTeleport() {
  // @@protoc_insertion_point(destructor:CGTeleport)
  SharedDtor();
}

void CGTeleport::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
  }
}

void CGTeleport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTeleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTeleport_descriptor_;
}

const CGTeleport& CGTeleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGTeleport* CGTeleport::default_instance_ = NULL;

CGTeleport* CGTeleport::New() const {
  return new CGTeleport;
}

void CGTeleport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGTeleport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, navmeshid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
    objid_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTeleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGTeleport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 3;
      case 3: {
        if (tag == 26) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_navMeshId;
        break;
      }

      // optional int32 navMeshId = 4;
      case 4: {
        if (tag == 32) {
         parse_navMeshId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navmeshid_)));
          set_has_navmeshid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_objId;
        break;
      }

      // optional int64 objId = 5;
      case 5: {
        if (tag == 40) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGTeleport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGTeleport)
  return false;
#undef DO_
}

void CGTeleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGTeleport)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // optional int32 navMeshId = 4;
  if (has_navmeshid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->navmeshid(), output);
  }

  // optional int64 objId = 5;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGTeleport)
}

::google::protobuf::uint8* CGTeleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGTeleport)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // optional int32 navMeshId = 4;
  if (has_navmeshid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->navmeshid(), target);
  }

  // optional int64 objId = 5;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGTeleport)
  return target;
}

int CGTeleport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .Vector3Info pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 navMeshId = 4;
    if (has_navmeshid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->navmeshid());
    }

    // optional int64 objId = 5;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTeleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTeleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTeleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTeleport::MergeFrom(const CGTeleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_navmeshid()) {
      set_navmeshid(from.navmeshid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTeleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTeleport::CopyFrom(const CGTeleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTeleport::IsInitialized() const {

  return true;
}

void CGTeleport::Swap(CGTeleport* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    std::swap(navmeshid_, other->navmeshid_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTeleport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTeleport_descriptor_;
  metadata.reflection = CGTeleport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTeleport::kFlagFieldNumber;
const int GCTeleport::kTypeFieldNumber;
const int GCTeleport::kPosFieldNumber;
const int GCTeleport::kDirectionFieldNumber;
const int GCTeleport::kNavMeshIdFieldNumber;
const int GCTeleport::kObjIdFieldNumber;
#endif  // !_MSC_VER

GCTeleport::GCTeleport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTeleport)
}

void GCTeleport::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCTeleport::GCTeleport(const GCTeleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTeleport)
}

void GCTeleport::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  type_ = 0;
  pos_ = NULL;
  direction_ = NULL;
  navmeshid_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTeleport::~GCTeleport() {
  // @@protoc_insertion_point(destructor:GCTeleport)
  SharedDtor();
}

void GCTeleport::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
  }
}

void GCTeleport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTeleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTeleport_descriptor_;
}

const GCTeleport& GCTeleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCTeleport* GCTeleport::default_instance_ = NULL;

GCTeleport* GCTeleport::New() const {
  return new GCTeleport;
}

void GCTeleport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCTeleport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(flag_, type_);
    ZR_(objid_, navmeshid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTeleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTeleport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 4;
      case 4: {
        if (tag == 34) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_navMeshId;
        break;
      }

      // optional int32 navMeshId = 5;
      case 5: {
        if (tag == 40) {
         parse_navMeshId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &navmeshid_)));
          set_has_navmeshid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_objId;
        break;
      }

      // optional int64 objId = 6;
      case 6: {
        if (tag == 48) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTeleport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTeleport)
  return false;
#undef DO_
}

void GCTeleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTeleport)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional .Vector3Info direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  // optional int32 navMeshId = 5;
  if (has_navmeshid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->navmeshid(), output);
  }

  // optional int64 objId = 6;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTeleport)
}

::google::protobuf::uint8* GCTeleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTeleport)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .Vector3Info pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional .Vector3Info direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  // optional int32 navMeshId = 5;
  if (has_navmeshid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->navmeshid(), target);
  }

  // optional int64 objId = 6;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTeleport)
  return target;
}

int GCTeleport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .Vector3Info pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 navMeshId = 5;
    if (has_navmeshid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->navmeshid());
    }

    // optional int64 objId = 6;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTeleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTeleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTeleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTeleport::MergeFrom(const GCTeleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_navmeshid()) {
      set_navmeshid(from.navmeshid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTeleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTeleport::CopyFrom(const GCTeleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTeleport::IsInitialized() const {

  return true;
}

void GCTeleport::Swap(GCTeleport* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    std::swap(navmeshid_, other->navmeshid_);
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTeleport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTeleport_descriptor_;
  metadata.reflection = GCTeleport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMoveInJog::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMoveInJog::CGMoveInJog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGMoveInJog)
}

void CGMoveInJog::InitAsDefaultInstance() {
}

CGMoveInJog::CGMoveInJog(const CGMoveInJog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGMoveInJog)
}

void CGMoveInJog::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMoveInJog::~CGMoveInJog() {
  // @@protoc_insertion_point(destructor:CGMoveInJog)
  SharedDtor();
}

void CGMoveInJog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMoveInJog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMoveInJog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMoveInJog_descriptor_;
}

const CGMoveInJog& CGMoveInJog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGMoveInJog* CGMoveInJog::default_instance_ = NULL;

CGMoveInJog* CGMoveInJog::New() const {
  return new CGMoveInJog;
}

void CGMoveInJog::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMoveInJog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGMoveInJog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGMoveInJog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGMoveInJog)
  return false;
#undef DO_
}

void CGMoveInJog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGMoveInJog)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGMoveInJog)
}

::google::protobuf::uint8* CGMoveInJog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGMoveInJog)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGMoveInJog)
  return target;
}

int CGMoveInJog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMoveInJog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMoveInJog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMoveInJog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMoveInJog::MergeFrom(const CGMoveInJog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMoveInJog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMoveInJog::CopyFrom(const CGMoveInJog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMoveInJog::IsInitialized() const {

  return true;
}

void CGMoveInJog::Swap(CGMoveInJog* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMoveInJog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMoveInJog_descriptor_;
  metadata.reflection = CGMoveInJog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GGEnterExistScene::kSceneInstanceIdFieldNumber;
const int GGEnterExistScene::kPosFieldNumber;
const int GGEnterExistScene::kDirectionFieldNumber;
const int GGEnterExistScene::kObjIdFieldNumber;
const int GGEnterExistScene::kNotBackGCEnterSceneFieldNumber;
const int GGEnterExistScene::kReasonFieldNumber;
const int GGEnterExistScene::kReasonParamsFieldNumber;
const int GGEnterExistScene::kSameMuiltLineSceneFieldNumber;
#endif  // !_MSC_VER

GGEnterExistScene::GGEnterExistScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GGEnterExistScene)
}

void GGEnterExistScene::InitAsDefaultInstance() {
  pos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  direction_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GGEnterExistScene::GGEnterExistScene(const GGEnterExistScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GGEnterExistScene)
}

void GGEnterExistScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneinstanceid_ = 0;
  pos_ = NULL;
  direction_ = NULL;
  notbackgcenterscene_ = 0;
  reason_ = 0;
  samemuiltlinescene_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GGEnterExistScene::~GGEnterExistScene() {
  // @@protoc_insertion_point(destructor:GGEnterExistScene)
  SharedDtor();
}

void GGEnterExistScene::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete direction_;
  }
}

void GGEnterExistScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GGEnterExistScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GGEnterExistScene_descriptor_;
}

const GGEnterExistScene& GGEnterExistScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GGEnterExistScene* GGEnterExistScene::default_instance_ = NULL;

GGEnterExistScene* GGEnterExistScene::New() const {
  return new GGEnterExistScene;
}

void GGEnterExistScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GGEnterExistScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 183) {
    ZR_(sceneinstanceid_, notbackgcenterscene_);
    ZR_(reason_, samemuiltlinescene_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Vector3Info::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  objid_.Clear();
  reasonparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GGEnterExistScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GGEnterExistScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneInstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Vector3Info pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // optional .Vector3Info direction = 3;
      case 3: {
        if (tag == 26) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_objId;
        break;
      }

      // repeated int64 objId = 4;
      case 4: {
        if (tag == 32) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_objid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_objId;
        if (input->ExpectTag(40)) goto parse_notBackGCEnterScene;
        break;
      }

      // optional int32 notBackGCEnterScene = 5;
      case 5: {
        if (tag == 40) {
         parse_notBackGCEnterScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notbackgcenterscene_)));
          set_has_notbackgcenterscene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reason;
        break;
      }

      // optional int32 reason = 6;
      case 6: {
        if (tag == 48) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reasonParams;
        break;
      }

      // repeated string reasonParams = 7;
      case 7: {
        if (tag == 58) {
         parse_reasonParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reasonparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reasonparams(this->reasonparams_size() - 1).data(),
            this->reasonparams(this->reasonparams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reasonparams");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reasonParams;
        if (input->ExpectTag(64)) goto parse_sameMuiltLineScene;
        break;
      }

      // optional int32 sameMuiltLineScene = 8;
      case 8: {
        if (tag == 64) {
         parse_sameMuiltLineScene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samemuiltlinescene_)));
          set_has_samemuiltlinescene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GGEnterExistScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GGEnterExistScene)
  return false;
#undef DO_
}

void GGEnterExistScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GGEnterExistScene)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneinstanceid(), output);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // repeated int64 objId = 4;
  for (int i = 0; i < this->objid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->objid(i), output);
  }

  // optional int32 notBackGCEnterScene = 5;
  if (has_notbackgcenterscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->notbackgcenterscene(), output);
  }

  // optional int32 reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reason(), output);
  }

  // repeated string reasonParams = 7;
  for (int i = 0; i < this->reasonparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->reasonparams(i).data(), this->reasonparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "reasonparams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->reasonparams(i), output);
  }

  // optional int32 sameMuiltLineScene = 8;
  if (has_samemuiltlinescene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->samemuiltlinescene(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GGEnterExistScene)
}

::google::protobuf::uint8* GGEnterExistScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GGEnterExistScene)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneinstanceid(), target);
  }

  // optional .Vector3Info pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .Vector3Info direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // repeated int64 objId = 4;
  for (int i = 0; i < this->objid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->objid(i), target);
  }

  // optional int32 notBackGCEnterScene = 5;
  if (has_notbackgcenterscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->notbackgcenterscene(), target);
  }

  // optional int32 reason = 6;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reason(), target);
  }

  // repeated string reasonParams = 7;
  for (int i = 0; i < this->reasonparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reasonparams(i).data(), this->reasonparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reasonparams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->reasonparams(i), target);
  }

  // optional int32 sameMuiltLineScene = 8;
  if (has_samemuiltlinescene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->samemuiltlinescene(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GGEnterExistScene)
  return target;
}

int GGEnterExistScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneInstanceId = 1;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional .Vector3Info pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Vector3Info direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional int32 notBackGCEnterScene = 5;
    if (has_notbackgcenterscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notbackgcenterscene());
    }

    // optional int32 reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional int32 sameMuiltLineScene = 8;
    if (has_samemuiltlinescene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samemuiltlinescene());
    }

  }
  // repeated int64 objId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->objid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objid(i));
    }
    total_size += 1 * this->objid_size() + data_size;
  }

  // repeated string reasonParams = 7;
  total_size += 1 * this->reasonparams_size();
  for (int i = 0; i < this->reasonparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reasonparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GGEnterExistScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GGEnterExistScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GGEnterExistScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GGEnterExistScene::MergeFrom(const GGEnterExistScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  objid_.MergeFrom(from.objid_);
  reasonparams_.MergeFrom(from.reasonparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Vector3Info::MergeFrom(from.pos());
    }
    if (from.has_direction()) {
      mutable_direction()->::Vector3Info::MergeFrom(from.direction());
    }
    if (from.has_notbackgcenterscene()) {
      set_notbackgcenterscene(from.notbackgcenterscene());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_samemuiltlinescene()) {
      set_samemuiltlinescene(from.samemuiltlinescene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GGEnterExistScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GGEnterExistScene::CopyFrom(const GGEnterExistScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGEnterExistScene::IsInitialized() const {

  return true;
}

void GGEnterExistScene::Swap(GGEnterExistScene* other) {
  if (other != this) {
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    std::swap(pos_, other->pos_);
    std::swap(direction_, other->direction_);
    objid_.Swap(&other->objid_);
    std::swap(notbackgcenterscene_, other->notbackgcenterscene_);
    std::swap(reason_, other->reason_);
    reasonparams_.Swap(&other->reasonparams_);
    std::swap(samemuiltlinescene_, other->samemuiltlinescene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GGEnterExistScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GGEnterExistScene_descriptor_;
  metadata.reflection = GGEnterExistScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GGLeaveScene::kSceneInstanceIdFieldNumber;
const int GGLeaveScene::kObjIdFieldNumber;
const int GGLeaveScene::kReasonFieldNumber;
const int GGLeaveScene::kReasonParamsFieldNumber;
#endif  // !_MSC_VER

GGLeaveScene::GGLeaveScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GGLeaveScene)
}

void GGLeaveScene::InitAsDefaultInstance() {
}

GGLeaveScene::GGLeaveScene(const GGLeaveScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GGLeaveScene)
}

void GGLeaveScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneinstanceid_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GGLeaveScene::~GGLeaveScene() {
  // @@protoc_insertion_point(destructor:GGLeaveScene)
  SharedDtor();
}

void GGLeaveScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GGLeaveScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GGLeaveScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GGLeaveScene_descriptor_;
}

const GGLeaveScene& GGLeaveScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GGLeaveScene* GGLeaveScene::default_instance_ = NULL;

GGLeaveScene* GGLeaveScene::New() const {
  return new GGLeaveScene;
}

void GGLeaveScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GGLeaveScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sceneinstanceid_, reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  objid_.Clear();
  reasonparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GGLeaveScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GGLeaveScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sceneInstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneinstanceid_)));
          set_has_sceneinstanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // repeated int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_objid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // optional int32 reason = 3;
      case 3: {
        if (tag == 24) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reasonParams;
        break;
      }

      // repeated string reasonParams = 4;
      case 4: {
        if (tag == 34) {
         parse_reasonParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reasonparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reasonparams(this->reasonparams_size() - 1).data(),
            this->reasonparams(this->reasonparams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reasonparams");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reasonParams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GGLeaveScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GGLeaveScene)
  return false;
#undef DO_
}

void GGLeaveScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GGLeaveScene)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneinstanceid(), output);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->objid(i), output);
  }

  // optional int32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reason(), output);
  }

  // repeated string reasonParams = 4;
  for (int i = 0; i < this->reasonparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->reasonparams(i).data(), this->reasonparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "reasonparams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reasonparams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GGLeaveScene)
}

::google::protobuf::uint8* GGLeaveScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GGLeaveScene)
  // optional int32 sceneInstanceId = 1;
  if (has_sceneinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneinstanceid(), target);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->objid(i), target);
  }

  // optional int32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reason(), target);
  }

  // repeated string reasonParams = 4;
  for (int i = 0; i < this->reasonparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reasonparams(i).data(), this->reasonparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reasonparams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reasonparams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GGLeaveScene)
  return target;
}

int GGLeaveScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sceneInstanceId = 1;
    if (has_sceneinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneinstanceid());
    }

    // optional int32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

  }
  // repeated int64 objId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objid(i));
    }
    total_size += 1 * this->objid_size() + data_size;
  }

  // repeated string reasonParams = 4;
  total_size += 1 * this->reasonparams_size();
  for (int i = 0; i < this->reasonparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reasonparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GGLeaveScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GGLeaveScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GGLeaveScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GGLeaveScene::MergeFrom(const GGLeaveScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  objid_.MergeFrom(from.objid_);
  reasonparams_.MergeFrom(from.reasonparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneinstanceid()) {
      set_sceneinstanceid(from.sceneinstanceid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GGLeaveScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GGLeaveScene::CopyFrom(const GGLeaveScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGLeaveScene::IsInitialized() const {

  return true;
}

void GGLeaveScene::Swap(GGLeaveScene* other) {
  if (other != this) {
    std::swap(sceneinstanceid_, other->sceneinstanceid_);
    objid_.Swap(&other->objid_);
    std::swap(reason_, other->reason_);
    reasonparams_.Swap(&other->reasonparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GGLeaveScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GGLeaveScene_descriptor_;
  metadata.reflection = GGLeaveScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCharacterChangeMotion::kMotionIdFieldNumber;
const int GCCharacterChangeMotion::kObjIdFieldNumber;
const int GCCharacterChangeMotion::kTargetObjIdFieldNumber;
#endif  // !_MSC_VER

GCCharacterChangeMotion::GCCharacterChangeMotion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharacterChangeMotion)
}

void GCCharacterChangeMotion::InitAsDefaultInstance() {
}

GCCharacterChangeMotion::GCCharacterChangeMotion(const GCCharacterChangeMotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharacterChangeMotion)
}

void GCCharacterChangeMotion::SharedCtor() {
  _cached_size_ = 0;
  motionid_ = 0;
  targetobjid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharacterChangeMotion::~GCCharacterChangeMotion() {
  // @@protoc_insertion_point(destructor:GCCharacterChangeMotion)
  SharedDtor();
}

void GCCharacterChangeMotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCharacterChangeMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharacterChangeMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharacterChangeMotion_descriptor_;
}

const GCCharacterChangeMotion& GCCharacterChangeMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCCharacterChangeMotion* GCCharacterChangeMotion::default_instance_ = NULL;

GCCharacterChangeMotion* GCCharacterChangeMotion::New() const {
  return new GCCharacterChangeMotion;
}

void GCCharacterChangeMotion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCharacterChangeMotion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetobjid_, motionid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  objid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharacterChangeMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharacterChangeMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 motionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motionid_)));
          set_has_motionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // repeated int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_objid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_objid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        if (input->ExpectTag(24)) goto parse_targetObjId;
        break;
      }

      // optional int64 targetObjId = 3;
      case 3: {
        if (tag == 24) {
         parse_targetObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetobjid_)));
          set_has_targetobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharacterChangeMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharacterChangeMotion)
  return false;
#undef DO_
}

void GCCharacterChangeMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharacterChangeMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motionid(), output);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->objid(i), output);
  }

  // optional int64 targetObjId = 3;
  if (has_targetobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->targetobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharacterChangeMotion)
}

::google::protobuf::uint8* GCCharacterChangeMotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharacterChangeMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motionid(), target);
  }

  // repeated int64 objId = 2;
  for (int i = 0; i < this->objid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->objid(i), target);
  }

  // optional int64 targetObjId = 3;
  if (has_targetobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->targetobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharacterChangeMotion)
  return target;
}

int GCCharacterChangeMotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 motionId = 1;
    if (has_motionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motionid());
    }

    // optional int64 targetObjId = 3;
    if (has_targetobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetobjid());
    }

  }
  // repeated int64 objId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->objid(i));
    }
    total_size += 1 * this->objid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharacterChangeMotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharacterChangeMotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharacterChangeMotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharacterChangeMotion::MergeFrom(const GCCharacterChangeMotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  objid_.MergeFrom(from.objid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motionid()) {
      set_motionid(from.motionid());
    }
    if (from.has_targetobjid()) {
      set_targetobjid(from.targetobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharacterChangeMotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharacterChangeMotion::CopyFrom(const GCCharacterChangeMotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterChangeMotion::IsInitialized() const {

  return true;
}

void GCCharacterChangeMotion::Swap(GCCharacterChangeMotion* other) {
  if (other != this) {
    std::swap(motionid_, other->motionid_);
    objid_.Swap(&other->objid_);
    std::swap(targetobjid_, other->targetobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharacterChangeMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharacterChangeMotion_descriptor_;
  metadata.reflection = GCCharacterChangeMotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSyncCharacterPos::kObjectIdFieldNumber;
const int GCSyncCharacterPos::kPositionFieldNumber;
const int GCSyncCharacterPos::kDirFieldNumber;
#endif  // !_MSC_VER

GCSyncCharacterPos::GCSyncCharacterPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSyncCharacterPos)
}

void GCSyncCharacterPos::InitAsDefaultInstance() {
  position_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  dir_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCSyncCharacterPos::GCSyncCharacterPos(const GCSyncCharacterPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSyncCharacterPos)
}

void GCSyncCharacterPos::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  position_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSyncCharacterPos::~GCSyncCharacterPos() {
  // @@protoc_insertion_point(destructor:GCSyncCharacterPos)
  SharedDtor();
}

void GCSyncCharacterPos::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete dir_;
  }
}

void GCSyncCharacterPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSyncCharacterPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSyncCharacterPos_descriptor_;
}

const GCSyncCharacterPos& GCSyncCharacterPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCSyncCharacterPos* GCSyncCharacterPos::default_instance_ = NULL;

GCSyncCharacterPos* GCSyncCharacterPos::New() const {
  return new GCSyncCharacterPos;
}

void GCSyncCharacterPos::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    objectid_ = GOOGLE_LONGLONG(0);
    if (has_position()) {
      if (position_ != NULL) position_->::Vector3Info::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSyncCharacterPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSyncCharacterPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .Vector3Info position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dir;
        break;
      }

      // optional .Vector3Info dir = 3;
      case 3: {
        if (tag == 26) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSyncCharacterPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSyncCharacterPos)
  return false;
#undef DO_
}

void GCSyncCharacterPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSyncCharacterPos)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional .Vector3Info position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // optional .Vector3Info dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSyncCharacterPos)
}

::google::protobuf::uint8* GCSyncCharacterPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSyncCharacterPos)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional .Vector3Info position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // optional .Vector3Info dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSyncCharacterPos)
  return target;
}

int GCSyncCharacterPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional .Vector3Info position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .Vector3Info dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSyncCharacterPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSyncCharacterPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSyncCharacterPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSyncCharacterPos::MergeFrom(const GCSyncCharacterPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_position()) {
      mutable_position()->::Vector3Info::MergeFrom(from.position());
    }
    if (from.has_dir()) {
      mutable_dir()->::Vector3Info::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSyncCharacterPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSyncCharacterPos::CopyFrom(const GCSyncCharacterPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSyncCharacterPos::IsInitialized() const {

  return true;
}

void GCSyncCharacterPos::Swap(GCSyncCharacterPos* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(position_, other->position_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSyncCharacterPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSyncCharacterPos_descriptor_;
  metadata.reflection = GCSyncCharacterPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCharacterRelation::kObjectIdFieldNumber;
const int GCCharacterRelation::kAttackStsFieldNumber;
#endif  // !_MSC_VER

GCCharacterRelation::GCCharacterRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCharacterRelation)
}

void GCCharacterRelation::InitAsDefaultInstance() {
}

GCCharacterRelation::GCCharacterRelation(const GCCharacterRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCharacterRelation)
}

void GCCharacterRelation::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_LONGLONG(0);
  attacksts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCharacterRelation::~GCCharacterRelation() {
  // @@protoc_insertion_point(destructor:GCCharacterRelation)
  SharedDtor();
}

void GCCharacterRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCharacterRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCharacterRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCharacterRelation_descriptor_;
}

const GCCharacterRelation& GCCharacterRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCCharacterRelation* GCCharacterRelation::default_instance_ = NULL;

GCCharacterRelation* GCCharacterRelation::New() const {
  return new GCCharacterRelation;
}

void GCCharacterRelation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCCharacterRelation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objectid_, attacksts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCharacterRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCharacterRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objectId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attackSts;
        break;
      }

      // optional int32 attackSts = 2;
      case 2: {
        if (tag == 16) {
         parse_attackSts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacksts_)));
          set_has_attacksts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCharacterRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCharacterRelation)
  return false;
#undef DO_
}

void GCCharacterRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCharacterRelation)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objectid(), output);
  }

  // optional int32 attackSts = 2;
  if (has_attacksts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attacksts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCharacterRelation)
}

::google::protobuf::uint8* GCCharacterRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCharacterRelation)
  // optional int64 objectId = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objectid(), target);
  }

  // optional int32 attackSts = 2;
  if (has_attacksts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attacksts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCharacterRelation)
  return target;
}

int GCCharacterRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objectId = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objectid());
    }

    // optional int32 attackSts = 2;
    if (has_attacksts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacksts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCharacterRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCharacterRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCharacterRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCharacterRelation::MergeFrom(const GCCharacterRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_attacksts()) {
      set_attacksts(from.attacksts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCharacterRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCharacterRelation::CopyFrom(const GCCharacterRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCharacterRelation::IsInitialized() const {

  return true;
}

void GCCharacterRelation::Swap(GCCharacterRelation* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(attacksts_, other->attacksts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCharacterRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCharacterRelation_descriptor_;
  metadata.reflection = GCCharacterRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSyncCharacterRelation::kRelationsFieldNumber;
#endif  // !_MSC_VER

GCSyncCharacterRelation::GCSyncCharacterRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCSyncCharacterRelation)
}

void GCSyncCharacterRelation::InitAsDefaultInstance() {
}

GCSyncCharacterRelation::GCSyncCharacterRelation(const GCSyncCharacterRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCSyncCharacterRelation)
}

void GCSyncCharacterRelation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSyncCharacterRelation::~GCSyncCharacterRelation() {
  // @@protoc_insertion_point(destructor:GCSyncCharacterRelation)
  SharedDtor();
}

void GCSyncCharacterRelation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSyncCharacterRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSyncCharacterRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSyncCharacterRelation_descriptor_;
}

const GCSyncCharacterRelation& GCSyncCharacterRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

GCSyncCharacterRelation* GCSyncCharacterRelation::default_instance_ = NULL;

GCSyncCharacterRelation* GCSyncCharacterRelation::New() const {
  return new GCSyncCharacterRelation;
}

void GCSyncCharacterRelation::Clear() {
  relations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSyncCharacterRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCSyncCharacterRelation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GCCharacterRelation relations = 1;
      case 1: {
        if (tag == 10) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_relations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCSyncCharacterRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCSyncCharacterRelation)
  return false;
#undef DO_
}

void GCSyncCharacterRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCSyncCharacterRelation)
  // repeated .GCCharacterRelation relations = 1;
  for (int i = 0; i < this->relations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCSyncCharacterRelation)
}

::google::protobuf::uint8* GCSyncCharacterRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCSyncCharacterRelation)
  // repeated .GCCharacterRelation relations = 1;
  for (int i = 0; i < this->relations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->relations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCSyncCharacterRelation)
  return target;
}

int GCSyncCharacterRelation::ByteSize() const {
  int total_size = 0;

  // repeated .GCCharacterRelation relations = 1;
  total_size += 1 * this->relations_size();
  for (int i = 0; i < this->relations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSyncCharacterRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSyncCharacterRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSyncCharacterRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSyncCharacterRelation::MergeFrom(const GCSyncCharacterRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  relations_.MergeFrom(from.relations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSyncCharacterRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSyncCharacterRelation::CopyFrom(const GCSyncCharacterRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSyncCharacterRelation::IsInitialized() const {

  return true;
}

void GCSyncCharacterRelation::Swap(GCSyncCharacterRelation* other) {
  if (other != this) {
    relations_.Swap(&other->relations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSyncCharacterRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSyncCharacterRelation_descriptor_;
  metadata.reflection = GCSyncCharacterRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGCommonGetherDevice::kObjIdFieldNumber;
#endif  // !_MSC_VER

CGCommonGetherDevice::CGCommonGetherDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGCommonGetherDevice)
}

void CGCommonGetherDevice::InitAsDefaultInstance() {
}

CGCommonGetherDevice::CGCommonGetherDevice(const CGCommonGetherDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGCommonGetherDevice)
}

void CGCommonGetherDevice::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGCommonGetherDevice::~CGCommonGetherDevice() {
  // @@protoc_insertion_point(destructor:CGCommonGetherDevice)
  SharedDtor();
}

void CGCommonGetherDevice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGCommonGetherDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGCommonGetherDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGCommonGetherDevice_descriptor_;
}

const CGCommonGetherDevice& CGCommonGetherDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneMessage_2eproto();
  return *default_instance_;
}

CGCommonGetherDevice* CGCommonGetherDevice::default_instance_ = NULL;

CGCommonGetherDevice* CGCommonGetherDevice::New() const {
  return new CGCommonGetherDevice;
}

void CGCommonGetherDevice::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGCommonGetherDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGCommonGetherDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGCommonGetherDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGCommonGetherDevice)
  return false;
#undef DO_
}

void CGCommonGetherDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGCommonGetherDevice)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGCommonGetherDevice)
}

::google::protobuf::uint8* CGCommonGetherDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCommonGetherDevice)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCommonGetherDevice)
  return target;
}

int CGCommonGetherDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGCommonGetherDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGCommonGetherDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGCommonGetherDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGCommonGetherDevice::MergeFrom(const CGCommonGetherDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGCommonGetherDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCommonGetherDevice::CopyFrom(const CGCommonGetherDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCommonGetherDevice::IsInitialized() const {

  return true;
}

void CGCommonGetherDevice::Swap(CGCommonGetherDevice* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGCommonGetherDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGCommonGetherDevice_descriptor_;
  metadata.reflection = CGCommonGetherDevice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
