// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShenQiMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShenQiMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ShenQiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenQiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGShenQiLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGShenQiLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCShenQiLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCShenQiLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGShenQiWear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGShenQiWear_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshShenQiSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshShenQiSkill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShenQiMessage_2eproto() {
  protobuf_AddDesc_ShenQiMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShenQiMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ShenQiInfo_descriptor_ = file->message_type(0);
  static const int ShenQiInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, can_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, iswear_),
  };
  ShenQiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenQiInfo_descriptor_,
      ShenQiInfo::default_instance_,
      ShenQiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenQiInfo));
  CGShenQiLevelUp_descriptor_ = file->message_type(1);
  static const int CGShenQiLevelUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiLevelUp, bid_),
  };
  CGShenQiLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGShenQiLevelUp_descriptor_,
      CGShenQiLevelUp::default_instance_,
      CGShenQiLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGShenQiLevelUp));
  GCShenQiLevel_descriptor_ = file->message_type(2);
  static const int GCShenQiLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShenQiLevel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShenQiLevel, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShenQiLevel, infos_),
  };
  GCShenQiLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCShenQiLevel_descriptor_,
      GCShenQiLevel::default_instance_,
      GCShenQiLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShenQiLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShenQiLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCShenQiLevel));
  CGShenQiWear_descriptor_ = file->message_type(3);
  static const int CGShenQiWear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiWear, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiWear, iswear_),
  };
  CGShenQiWear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGShenQiWear_descriptor_,
      CGShenQiWear::default_instance_,
      CGShenQiWear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiWear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShenQiWear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGShenQiWear));
  GCRefreshShenQiSkill_descriptor_ = file->message_type(4);
  static const int GCRefreshShenQiSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshShenQiSkill, shenqiskilldata_),
  };
  GCRefreshShenQiSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshShenQiSkill_descriptor_,
      GCRefreshShenQiSkill::default_instance_,
      GCRefreshShenQiSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshShenQiSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshShenQiSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshShenQiSkill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShenQiMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenQiInfo_descriptor_, &ShenQiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGShenQiLevelUp_descriptor_, &CGShenQiLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCShenQiLevel_descriptor_, &GCShenQiLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGShenQiWear_descriptor_, &CGShenQiWear::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshShenQiSkill_descriptor_, &GCRefreshShenQiSkill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShenQiMessage_2eproto() {
  delete ShenQiInfo::default_instance_;
  delete ShenQiInfo_reflection_;
  delete CGShenQiLevelUp::default_instance_;
  delete CGShenQiLevelUp_reflection_;
  delete GCShenQiLevel::default_instance_;
  delete GCShenQiLevel_reflection_;
  delete CGShenQiWear::default_instance_;
  delete CGShenQiWear_reflection_;
  delete GCRefreshShenQiSkill::default_instance_;
  delete GCRefreshShenQiSkill_reflection_;
}

void protobuf_AddDesc_ShenQiMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ShenQiMessage.proto\032\022InnerMessage.prot"
    "o\"6\n\nShenQiInfo\022\013\n\003sid\030\001 \001(\005\022\013\n\003can\030\002 \001("
    "\005\022\016\n\006isWear\030\003 \001(\005\"\036\n\017CGShenQiLevelUp\022\013\n\003"
    "bid\030\001 \001(\005\"I\n\rGCShenQiLevel\022\014\n\004type\030\001 \001(\005"
    "\022\016\n\006result\030\002 \001(\005\022\032\n\005infos\030\003 \003(\0132\013.ShenQi"
    "Info\"+\n\014CGShenQiWear\022\013\n\003bid\030\001 \001(\005\022\016\n\006isW"
    "ear\030\002 \001(\005\"\?\n\024GCRefreshShenQiSkill\022\'\n\017she"
    "nQiSkilldata\030\001 \001(\0132\016.SkillItemDataB\031\n\027co"
    "m.mile.common.message", 341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShenQiMessage.proto", &protobuf_RegisterTypes);
  ShenQiInfo::default_instance_ = new ShenQiInfo();
  CGShenQiLevelUp::default_instance_ = new CGShenQiLevelUp();
  GCShenQiLevel::default_instance_ = new GCShenQiLevel();
  CGShenQiWear::default_instance_ = new CGShenQiWear();
  GCRefreshShenQiSkill::default_instance_ = new GCRefreshShenQiSkill();
  ShenQiInfo::default_instance_->InitAsDefaultInstance();
  CGShenQiLevelUp::default_instance_->InitAsDefaultInstance();
  GCShenQiLevel::default_instance_->InitAsDefaultInstance();
  CGShenQiWear::default_instance_->InitAsDefaultInstance();
  GCRefreshShenQiSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShenQiMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShenQiMessage_2eproto {
  StaticDescriptorInitializer_ShenQiMessage_2eproto() {
    protobuf_AddDesc_ShenQiMessage_2eproto();
  }
} static_descriptor_initializer_ShenQiMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShenQiInfo::kSidFieldNumber;
const int ShenQiInfo::kCanFieldNumber;
const int ShenQiInfo::kIsWearFieldNumber;
#endif  // !_MSC_VER

ShenQiInfo::ShenQiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShenQiInfo)
}

void ShenQiInfo::InitAsDefaultInstance() {
}

ShenQiInfo::ShenQiInfo(const ShenQiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShenQiInfo)
}

void ShenQiInfo::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  can_ = 0;
  iswear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenQiInfo::~ShenQiInfo() {
  // @@protoc_insertion_point(destructor:ShenQiInfo)
  SharedDtor();
}

void ShenQiInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenQiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenQiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenQiInfo_descriptor_;
}

const ShenQiInfo& ShenQiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShenQiMessage_2eproto();
  return *default_instance_;
}

ShenQiInfo* ShenQiInfo::default_instance_ = NULL;

ShenQiInfo* ShenQiInfo::New() const {
  return new ShenQiInfo;
}

void ShenQiInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShenQiInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sid_, iswear_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenQiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShenQiInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_can;
        break;
      }

      // optional int32 can = 2;
      case 2: {
        if (tag == 16) {
         parse_can:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_)));
          set_has_can();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isWear;
        break;
      }

      // optional int32 isWear = 3;
      case 3: {
        if (tag == 24) {
         parse_isWear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswear_)));
          set_has_iswear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShenQiInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShenQiInfo)
  return false;
#undef DO_
}

void ShenQiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShenQiInfo)
  // optional int32 sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // optional int32 can = 2;
  if (has_can()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can(), output);
  }

  // optional int32 isWear = 3;
  if (has_iswear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iswear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShenQiInfo)
}

::google::protobuf::uint8* ShenQiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShenQiInfo)
  // optional int32 sid = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // optional int32 can = 2;
  if (has_can()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can(), target);
  }

  // optional int32 isWear = 3;
  if (has_iswear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iswear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShenQiInfo)
  return target;
}

int ShenQiInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 can = 2;
    if (has_can()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can());
    }

    // optional int32 isWear = 3;
    if (has_iswear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenQiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenQiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenQiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenQiInfo::MergeFrom(const ShenQiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_can()) {
      set_can(from.can());
    }
    if (from.has_iswear()) {
      set_iswear(from.iswear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenQiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenQiInfo::CopyFrom(const ShenQiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenQiInfo::IsInitialized() const {

  return true;
}

void ShenQiInfo::Swap(ShenQiInfo* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(can_, other->can_);
    std::swap(iswear_, other->iswear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenQiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenQiInfo_descriptor_;
  metadata.reflection = ShenQiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGShenQiLevelUp::kBidFieldNumber;
#endif  // !_MSC_VER

CGShenQiLevelUp::CGShenQiLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGShenQiLevelUp)
}

void CGShenQiLevelUp::InitAsDefaultInstance() {
}

CGShenQiLevelUp::CGShenQiLevelUp(const CGShenQiLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGShenQiLevelUp)
}

void CGShenQiLevelUp::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGShenQiLevelUp::~CGShenQiLevelUp() {
  // @@protoc_insertion_point(destructor:CGShenQiLevelUp)
  SharedDtor();
}

void CGShenQiLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGShenQiLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGShenQiLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGShenQiLevelUp_descriptor_;
}

const CGShenQiLevelUp& CGShenQiLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShenQiMessage_2eproto();
  return *default_instance_;
}

CGShenQiLevelUp* CGShenQiLevelUp::default_instance_ = NULL;

CGShenQiLevelUp* CGShenQiLevelUp::New() const {
  return new CGShenQiLevelUp;
}

void CGShenQiLevelUp::Clear() {
  bid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGShenQiLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGShenQiLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGShenQiLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGShenQiLevelUp)
  return false;
#undef DO_
}

void CGShenQiLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGShenQiLevelUp)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGShenQiLevelUp)
}

::google::protobuf::uint8* CGShenQiLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGShenQiLevelUp)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGShenQiLevelUp)
  return target;
}

int CGShenQiLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGShenQiLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGShenQiLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGShenQiLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGShenQiLevelUp::MergeFrom(const CGShenQiLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGShenQiLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGShenQiLevelUp::CopyFrom(const CGShenQiLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShenQiLevelUp::IsInitialized() const {

  return true;
}

void CGShenQiLevelUp::Swap(CGShenQiLevelUp* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGShenQiLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGShenQiLevelUp_descriptor_;
  metadata.reflection = CGShenQiLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCShenQiLevel::kTypeFieldNumber;
const int GCShenQiLevel::kResultFieldNumber;
const int GCShenQiLevel::kInfosFieldNumber;
#endif  // !_MSC_VER

GCShenQiLevel::GCShenQiLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCShenQiLevel)
}

void GCShenQiLevel::InitAsDefaultInstance() {
}

GCShenQiLevel::GCShenQiLevel(const GCShenQiLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCShenQiLevel)
}

void GCShenQiLevel::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCShenQiLevel::~GCShenQiLevel() {
  // @@protoc_insertion_point(destructor:GCShenQiLevel)
  SharedDtor();
}

void GCShenQiLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCShenQiLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCShenQiLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCShenQiLevel_descriptor_;
}

const GCShenQiLevel& GCShenQiLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShenQiMessage_2eproto();
  return *default_instance_;
}

GCShenQiLevel* GCShenQiLevel::default_instance_ = NULL;

GCShenQiLevel* GCShenQiLevel::New() const {
  return new GCShenQiLevel;
}

void GCShenQiLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCShenQiLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCShenQiLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCShenQiLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .ShenQiInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCShenQiLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCShenQiLevel)
  return false;
#undef DO_
}

void GCShenQiLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCShenQiLevel)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .ShenQiInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCShenQiLevel)
}

::google::protobuf::uint8* GCShenQiLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCShenQiLevel)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .ShenQiInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCShenQiLevel)
  return target;
}

int GCShenQiLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .ShenQiInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCShenQiLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCShenQiLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCShenQiLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCShenQiLevel::MergeFrom(const GCShenQiLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCShenQiLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCShenQiLevel::CopyFrom(const GCShenQiLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShenQiLevel::IsInitialized() const {

  return true;
}

void GCShenQiLevel::Swap(GCShenQiLevel* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(result_, other->result_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCShenQiLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCShenQiLevel_descriptor_;
  metadata.reflection = GCShenQiLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGShenQiWear::kBidFieldNumber;
const int CGShenQiWear::kIsWearFieldNumber;
#endif  // !_MSC_VER

CGShenQiWear::CGShenQiWear()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGShenQiWear)
}

void CGShenQiWear::InitAsDefaultInstance() {
}

CGShenQiWear::CGShenQiWear(const CGShenQiWear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGShenQiWear)
}

void CGShenQiWear::SharedCtor() {
  _cached_size_ = 0;
  bid_ = 0;
  iswear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGShenQiWear::~CGShenQiWear() {
  // @@protoc_insertion_point(destructor:CGShenQiWear)
  SharedDtor();
}

void CGShenQiWear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGShenQiWear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGShenQiWear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGShenQiWear_descriptor_;
}

const CGShenQiWear& CGShenQiWear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShenQiMessage_2eproto();
  return *default_instance_;
}

CGShenQiWear* CGShenQiWear::default_instance_ = NULL;

CGShenQiWear* CGShenQiWear::New() const {
  return new CGShenQiWear;
}

void CGShenQiWear::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGShenQiWear*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bid_, iswear_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGShenQiWear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGShenQiWear)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isWear;
        break;
      }

      // optional int32 isWear = 2;
      case 2: {
        if (tag == 16) {
         parse_isWear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iswear_)));
          set_has_iswear();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGShenQiWear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGShenQiWear)
  return false;
#undef DO_
}

void CGShenQiWear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGShenQiWear)
  // optional int32 bid = 1;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bid(), output);
  }

  // optional int32 isWear = 2;
  if (has_iswear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iswear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGShenQiWear)
}

::google::protobuf::uint8* CGShenQiWear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGShenQiWear)
  // optional int32 bid = 1;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bid(), target);
  }

  // optional int32 isWear = 2;
  if (has_iswear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iswear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGShenQiWear)
  return target;
}

int CGShenQiWear::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bid = 1;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 isWear = 2;
    if (has_iswear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iswear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGShenQiWear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGShenQiWear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGShenQiWear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGShenQiWear::MergeFrom(const CGShenQiWear& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_iswear()) {
      set_iswear(from.iswear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGShenQiWear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGShenQiWear::CopyFrom(const CGShenQiWear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShenQiWear::IsInitialized() const {

  return true;
}

void CGShenQiWear::Swap(CGShenQiWear* other) {
  if (other != this) {
    std::swap(bid_, other->bid_);
    std::swap(iswear_, other->iswear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGShenQiWear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGShenQiWear_descriptor_;
  metadata.reflection = CGShenQiWear_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshShenQiSkill::kShenQiSkilldataFieldNumber;
#endif  // !_MSC_VER

GCRefreshShenQiSkill::GCRefreshShenQiSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshShenQiSkill)
}

void GCRefreshShenQiSkill::InitAsDefaultInstance() {
  shenqiskilldata_ = const_cast< ::SkillItemData*>(&::SkillItemData::default_instance());
}

GCRefreshShenQiSkill::GCRefreshShenQiSkill(const GCRefreshShenQiSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshShenQiSkill)
}

void GCRefreshShenQiSkill::SharedCtor() {
  _cached_size_ = 0;
  shenqiskilldata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshShenQiSkill::~GCRefreshShenQiSkill() {
  // @@protoc_insertion_point(destructor:GCRefreshShenQiSkill)
  SharedDtor();
}

void GCRefreshShenQiSkill::SharedDtor() {
  if (this != default_instance_) {
    delete shenqiskilldata_;
  }
}

void GCRefreshShenQiSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshShenQiSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshShenQiSkill_descriptor_;
}

const GCRefreshShenQiSkill& GCRefreshShenQiSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShenQiMessage_2eproto();
  return *default_instance_;
}

GCRefreshShenQiSkill* GCRefreshShenQiSkill::default_instance_ = NULL;

GCRefreshShenQiSkill* GCRefreshShenQiSkill::New() const {
  return new GCRefreshShenQiSkill;
}

void GCRefreshShenQiSkill::Clear() {
  if (has_shenqiskilldata()) {
    if (shenqiskilldata_ != NULL) shenqiskilldata_->::SkillItemData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshShenQiSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshShenQiSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SkillItemData shenQiSkilldata = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shenqiskilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshShenQiSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshShenQiSkill)
  return false;
#undef DO_
}

void GCRefreshShenQiSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshShenQiSkill)
  // optional .SkillItemData shenQiSkilldata = 1;
  if (has_shenqiskilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shenqiskilldata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshShenQiSkill)
}

::google::protobuf::uint8* GCRefreshShenQiSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshShenQiSkill)
  // optional .SkillItemData shenQiSkilldata = 1;
  if (has_shenqiskilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shenqiskilldata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshShenQiSkill)
  return target;
}

int GCRefreshShenQiSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SkillItemData shenQiSkilldata = 1;
    if (has_shenqiskilldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shenqiskilldata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshShenQiSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshShenQiSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshShenQiSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshShenQiSkill::MergeFrom(const GCRefreshShenQiSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shenqiskilldata()) {
      mutable_shenqiskilldata()->::SkillItemData::MergeFrom(from.shenqiskilldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshShenQiSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshShenQiSkill::CopyFrom(const GCRefreshShenQiSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshShenQiSkill::IsInitialized() const {

  return true;
}

void GCRefreshShenQiSkill::Swap(GCRefreshShenQiSkill* other) {
  if (other != this) {
    std::swap(shenqiskilldata_, other->shenqiskilldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshShenQiSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshShenQiSkill_descriptor_;
  metadata.reflection = GCRefreshShenQiSkill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
