// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShopMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShopMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopSingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopSingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAddShopItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAddShopItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelShopItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelShopItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGShopLuckDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGShopLuckDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPushShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPushShop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShopMessage_2eproto() {
  protobuf_AddDesc_ShopMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShopMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGShop_descriptor_ = file->message_type(0);
  static const int CGShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShop, num_),
  };
  CGShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGShop_descriptor_,
      CGShop::default_instance_,
      CGShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGShop));
  GCShop_descriptor_ = file->message_type(1);
  static const int GCShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShop, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShop, errorcode_),
  };
  GCShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCShop_descriptor_,
      GCShop::default_instance_,
      GCShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCShop));
  ItemInfo_descriptor_ = file->message_type(2);
  static const int ItemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, currnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, bind_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  ShopItemInfo_descriptor_ = file->message_type(3);
  static const int ShopItemInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, temid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, shoptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, limitnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, onebuymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, needmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, limitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, limittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, cardid_),
  };
  ShopItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItemInfo_descriptor_,
      ShopItemInfo::default_instance_,
      ShopItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItemInfo));
  ShopSingInfo_descriptor_ = file->message_type(4);
  static const int ShopSingInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, cansee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, shopcardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, storetype_),
  };
  ShopSingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopSingInfo_descriptor_,
      ShopSingInfo::default_instance_,
      ShopSingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopSingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopSingInfo));
  ShopCardInfo_descriptor_ = file->message_type(5);
  static const int ShopCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardInfo, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardInfo, cardname_),
  };
  ShopCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCardInfo_descriptor_,
      ShopCardInfo::default_instance_,
      ShopCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCardInfo));
  GCPushShopData_descriptor_ = file->message_type(6);
  static const int GCPushShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShopData, shopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShopData, shopsing_),
  };
  GCPushShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushShopData_descriptor_,
      GCPushShopData::default_instance_,
      GCPushShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushShopData));
  GCAddShopItemData_descriptor_ = file->message_type(7);
  static const int GCAddShopItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddShopItemData, shopdata_),
  };
  GCAddShopItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAddShopItemData_descriptor_,
      GCAddShopItemData::default_instance_,
      GCAddShopItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddShopItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddShopItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAddShopItemData));
  DelItemData_descriptor_ = file->message_type(8);
  static const int DelItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelItemData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelItemData, id_),
  };
  DelItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelItemData_descriptor_,
      DelItemData::default_instance_,
      DelItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelItemData));
  GCDelShopItemData_descriptor_ = file->message_type(9);
  static const int GCDelShopItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelShopItemData, shopdata_),
  };
  GCDelShopItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelShopItemData_descriptor_,
      GCDelShopItemData::default_instance_,
      GCDelShopItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelShopItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelShopItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelShopItemData));
  CGShopLuckDraw_descriptor_ = file->message_type(10);
  static const int CGShopLuckDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShopLuckDraw, type_),
  };
  CGShopLuckDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGShopLuckDraw_descriptor_,
      CGShopLuckDraw::default_instance_,
      CGShopLuckDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShopLuckDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGShopLuckDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGShopLuckDraw));
  GCPushShop_descriptor_ = file->message_type(11);
  static const int GCPushShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShop, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShop, errorcode_),
  };
  GCPushShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPushShop_descriptor_,
      GCPushShop::default_instance_,
      GCPushShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPushShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPushShop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShopMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGShop_descriptor_, &CGShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCShop_descriptor_, &GCShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItemInfo_descriptor_, &ShopItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopSingInfo_descriptor_, &ShopSingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCardInfo_descriptor_, &ShopCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushShopData_descriptor_, &GCPushShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAddShopItemData_descriptor_, &GCAddShopItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelItemData_descriptor_, &DelItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelShopItemData_descriptor_, &GCDelShopItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGShopLuckDraw_descriptor_, &CGShopLuckDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPushShop_descriptor_, &GCPushShop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShopMessage_2eproto() {
  delete CGShop::default_instance_;
  delete CGShop_reflection_;
  delete GCShop::default_instance_;
  delete GCShop_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete ShopItemInfo::default_instance_;
  delete ShopItemInfo_reflection_;
  delete ShopSingInfo::default_instance_;
  delete ShopSingInfo_reflection_;
  delete ShopCardInfo::default_instance_;
  delete ShopCardInfo_reflection_;
  delete GCPushShopData::default_instance_;
  delete GCPushShopData_reflection_;
  delete GCAddShopItemData::default_instance_;
  delete GCAddShopItemData_reflection_;
  delete DelItemData::default_instance_;
  delete DelItemData_reflection_;
  delete GCDelShopItemData::default_instance_;
  delete GCDelShopItemData_reflection_;
  delete CGShopLuckDraw::default_instance_;
  delete CGShopLuckDraw_reflection_;
  delete GCPushShop::default_instance_;
  delete GCPushShop_reflection_;
}

void protobuf_AddDesc_ShopMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ShopMessage.proto\"/\n\006CGShop\022\014\n\004type\030\001 "
    "\001(\005\022\n\n\002id\030\002 \001(\003\022\013\n\003num\030\003 \001(\005\"F\n\006GCShop\022\014"
    "\n\004type\030\001 \001(\005\022\033\n\010itemInfo\030\002 \001(\0132\t.ItemInf"
    "o\022\021\n\terrorCode\030\003 \001(\005\"_\n\010ItemInfo\022\r\n\005temI"
    "D\030\001 \001(\003\022\017\n\007currNum\030\002 \001(\005\022\013\n\003bid\030\003 \001(\005\022\013\n"
    "\003sid\030\004 \001(\005\022\013\n\003num\030\005 \001(\005\022\014\n\004bind\030\006 \001(\005\"\322\001"
    "\n\014ShopItemInfo\022\r\n\005temID\030\001 \001(\003\022\020\n\010shopTyp"
    "e\030\002 \001(\005\022\016\n\006itemId\030\003 \001(\005\022\023\n\013limitNumber\030\004"
    " \001(\005\022\021\n\toneBuyMax\030\005 \001(\005\022\021\n\tneedMoney\030\006 \001"
    "(\005\022\r\n\005price\030\007 \001(\005\022\020\n\010discount\030\010 \001(\005\022\022\n\nl"
    "imitparam\030\t \001(\t\022\021\n\tlimitType\030\n \001(\005\022\016\n\006ca"
    "rdId\030\013 \001(\005\"\235\001\n\014ShopSingInfo\022\n\n\002id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\005\022\016\n\006canSee\030\003 \001(\005\022\r\n\005order\030\004"
    " \001(\005\022\014\n\004card\030\005 \001(\005\022\016\n\006result\030\006 \001(\t\022#\n\014Sh"
    "opCardInfo\030\007 \003(\0132\r.ShopCardInfo\022\021\n\tstore"
    "Type\030\010 \001(\005\"0\n\014ShopCardInfo\022\016\n\006cardId\030\001 \001"
    "(\005\022\020\n\010CardName\030\002 \001(\t\"R\n\016GCPushShopData\022\037"
    "\n\010shopData\030\001 \003(\0132\r.ShopItemInfo\022\037\n\010shopS"
    "ing\030\002 \003(\0132\r.ShopSingInfo\"4\n\021GCAddShopIte"
    "mData\022\037\n\010shopData\030\001 \003(\0132\r.ShopItemInfo\"\'"
    "\n\013DelItemData\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\003\""
    "3\n\021GCDelShopItemData\022\036\n\010shopData\030\001 \003(\0132\014"
    ".DelItemData\"\036\n\016CGShopLuckDraw\022\014\n\004type\030\001"
    " \001(\005\"J\n\nGCPushShop\022\014\n\004type\030\001 \001(\005\022\033\n\010item"
    "Info\030\002 \003(\0132\t.ItemInfo\022\021\n\terrorCode\030\003 \001(\005"
    "B\031\n\027com.mile.common.message", 1027);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShopMessage.proto", &protobuf_RegisterTypes);
  CGShop::default_instance_ = new CGShop();
  GCShop::default_instance_ = new GCShop();
  ItemInfo::default_instance_ = new ItemInfo();
  ShopItemInfo::default_instance_ = new ShopItemInfo();
  ShopSingInfo::default_instance_ = new ShopSingInfo();
  ShopCardInfo::default_instance_ = new ShopCardInfo();
  GCPushShopData::default_instance_ = new GCPushShopData();
  GCAddShopItemData::default_instance_ = new GCAddShopItemData();
  DelItemData::default_instance_ = new DelItemData();
  GCDelShopItemData::default_instance_ = new GCDelShopItemData();
  CGShopLuckDraw::default_instance_ = new CGShopLuckDraw();
  GCPushShop::default_instance_ = new GCPushShop();
  CGShop::default_instance_->InitAsDefaultInstance();
  GCShop::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ShopItemInfo::default_instance_->InitAsDefaultInstance();
  ShopSingInfo::default_instance_->InitAsDefaultInstance();
  ShopCardInfo::default_instance_->InitAsDefaultInstance();
  GCPushShopData::default_instance_->InitAsDefaultInstance();
  GCAddShopItemData::default_instance_->InitAsDefaultInstance();
  DelItemData::default_instance_->InitAsDefaultInstance();
  GCDelShopItemData::default_instance_->InitAsDefaultInstance();
  CGShopLuckDraw::default_instance_->InitAsDefaultInstance();
  GCPushShop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShopMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShopMessage_2eproto {
  StaticDescriptorInitializer_ShopMessage_2eproto() {
    protobuf_AddDesc_ShopMessage_2eproto();
  }
} static_descriptor_initializer_ShopMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGShop::kTypeFieldNumber;
const int CGShop::kIdFieldNumber;
const int CGShop::kNumFieldNumber;
#endif  // !_MSC_VER

CGShop::CGShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGShop)
}

void CGShop::InitAsDefaultInstance() {
}

CGShop::CGShop(const CGShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGShop)
}

void CGShop::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGShop::~CGShop() {
  // @@protoc_insertion_point(destructor:CGShop)
  SharedDtor();
}

void CGShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGShop_descriptor_;
}

const CGShop& CGShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

CGShop* CGShop::default_instance_ = NULL;

CGShop* CGShop::New() const {
  return new CGShop;
}

void CGShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGShop)
  return false;
#undef DO_
}

void CGShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGShop)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGShop)
}

::google::protobuf::uint8* CGShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGShop)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGShop)
  return target;
}

int CGShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGShop::MergeFrom(const CGShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGShop::CopyFrom(const CGShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShop::IsInitialized() const {

  return true;
}

void CGShop::Swap(CGShop* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGShop_descriptor_;
  metadata.reflection = CGShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCShop::kTypeFieldNumber;
const int GCShop::kItemInfoFieldNumber;
const int GCShop::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GCShop::GCShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCShop)
}

void GCShop::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::ItemInfo*>(&::ItemInfo::default_instance());
}

GCShop::GCShop(const GCShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCShop)
}

void GCShop::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  iteminfo_ = NULL;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCShop::~GCShop() {
  // @@protoc_insertion_point(destructor:GCShop)
  SharedDtor();
}

void GCShop::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void GCShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCShop_descriptor_;
}

const GCShop& GCShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

GCShop* GCShop::default_instance_ = NULL;

GCShop* GCShop::New() const {
  return new GCShop;
}

void GCShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, errorcode_);
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::ItemInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // optional .ItemInfo itemInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCShop)
  return false;
#undef DO_
}

void GCShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCShop)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .ItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCShop)
}

::google::protobuf::uint8* GCShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCShop)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .ItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCShop)
  return target;
}

int GCShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .ItemInfo itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

    // optional int32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCShop::MergeFrom(const GCShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::ItemInfo::MergeFrom(from.iteminfo());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCShop::CopyFrom(const GCShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCShop::IsInitialized() const {

  return true;
}

void GCShop::Swap(GCShop* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCShop_descriptor_;
  metadata.reflection = GCShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kTemIDFieldNumber;
const int ItemInfo::kCurrNumFieldNumber;
const int ItemInfo::kBidFieldNumber;
const int ItemInfo::kSidFieldNumber;
const int ItemInfo::kNumFieldNumber;
const int ItemInfo::kBindFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemInfo)
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  temid_ = GOOGLE_LONGLONG(0);
  currnum_ = 0;
  bid_ = 0;
  sid_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(temid_, bind_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 temID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currNum;
        break;
      }

      // optional int32 currNum = 2;
      case 2: {
        if (tag == 16) {
         parse_currNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currnum_)));
          set_has_currnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bid;
        break;
      }

      // optional int32 bid = 3;
      case 3: {
        if (tag == 24) {
         parse_bid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bid_)));
          set_has_bid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sid;
        break;
      }

      // optional int32 sid = 4;
      case 4: {
        if (tag == 32) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int32 num = 5;
      case 5: {
        if (tag == 40) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bind;
        break;
      }

      // optional int32 bind = 6;
      case 6: {
        if (tag == 48) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemInfo)
  // optional int64 temID = 1;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->temid(), output);
  }

  // optional int32 currNum = 2;
  if (has_currnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currnum(), output);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bid(), output);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sid(), output);
  }

  // optional int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // optional int32 bind = 6;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemInfo)
  // optional int64 temID = 1;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->temid(), target);
  }

  // optional int32 currNum = 2;
  if (has_currnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currnum(), target);
  }

  // optional int32 bid = 3;
  if (has_bid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bid(), target);
  }

  // optional int32 sid = 4;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sid(), target);
  }

  // optional int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // optional int32 bind = 6;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 temID = 1;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->temid());
    }

    // optional int32 currNum = 2;
    if (has_currnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currnum());
    }

    // optional int32 bid = 3;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bid());
    }

    // optional int32 sid = 4;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bind = 6;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_currnum()) {
      set_currnum(from.currnum());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(temid_, other->temid_);
    std::swap(currnum_, other->currnum_);
    std::swap(bid_, other->bid_);
    std::swap(sid_, other->sid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItemInfo::kTemIDFieldNumber;
const int ShopItemInfo::kShopTypeFieldNumber;
const int ShopItemInfo::kItemIdFieldNumber;
const int ShopItemInfo::kLimitNumberFieldNumber;
const int ShopItemInfo::kOneBuyMaxFieldNumber;
const int ShopItemInfo::kNeedMoneyFieldNumber;
const int ShopItemInfo::kPriceFieldNumber;
const int ShopItemInfo::kDiscountFieldNumber;
const int ShopItemInfo::kLimitparamFieldNumber;
const int ShopItemInfo::kLimitTypeFieldNumber;
const int ShopItemInfo::kCardIdFieldNumber;
#endif  // !_MSC_VER

ShopItemInfo::ShopItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShopItemInfo)
}

void ShopItemInfo::InitAsDefaultInstance() {
}

ShopItemInfo::ShopItemInfo(const ShopItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShopItemInfo)
}

void ShopItemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  temid_ = GOOGLE_LONGLONG(0);
  shoptype_ = 0;
  itemid_ = 0;
  limitnumber_ = 0;
  onebuymax_ = 0;
  needmoney_ = 0;
  price_ = 0;
  discount_ = 0;
  limitparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limittype_ = 0;
  cardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItemInfo::~ShopItemInfo() {
  // @@protoc_insertion_point(destructor:ShopItemInfo)
  SharedDtor();
}

void ShopItemInfo::SharedDtor() {
  if (limitparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete limitparam_;
  }
  if (this != default_instance_) {
  }
}

void ShopItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItemInfo_descriptor_;
}

const ShopItemInfo& ShopItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

ShopItemInfo* ShopItemInfo::default_instance_ = NULL;

ShopItemInfo* ShopItemInfo::New() const {
  return new ShopItemInfo;
}

void ShopItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(temid_, price_);
    discount_ = 0;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(limittype_, cardid_);
    if (has_limitparam()) {
      if (limitparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        limitparam_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShopItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 temID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temid_)));
          set_has_temid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shopType;
        break;
      }

      // optional int32 shopType = 2;
      case 2: {
        if (tag == 16) {
         parse_shopType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoptype_)));
          set_has_shoptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (tag == 24) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limitNumber;
        break;
      }

      // optional int32 limitNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_limitNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitnumber_)));
          set_has_limitnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_oneBuyMax;
        break;
      }

      // optional int32 oneBuyMax = 5;
      case 5: {
        if (tag == 40) {
         parse_oneBuyMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onebuymax_)));
          set_has_onebuymax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_needMoney;
        break;
      }

      // optional int32 needMoney = 6;
      case 6: {
        if (tag == 48) {
         parse_needMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needmoney_)));
          set_has_needmoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // optional int32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_discount;
        break;
      }

      // optional int32 discount = 8;
      case 8: {
        if (tag == 64) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_limitparam;
        break;
      }

      // optional string limitparam = 9;
      case 9: {
        if (tag == 74) {
         parse_limitparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limitparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->limitparam().data(), this->limitparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "limitparam");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_limitType;
        break;
      }

      // optional int32 limitType = 10;
      case 10: {
        if (tag == 80) {
         parse_limitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limittype_)));
          set_has_limittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cardId;
        break;
      }

      // optional int32 cardId = 11;
      case 11: {
        if (tag == 88) {
         parse_cardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShopItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShopItemInfo)
  return false;
#undef DO_
}

void ShopItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShopItemInfo)
  // optional int64 temID = 1;
  if (has_temid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->temid(), output);
  }

  // optional int32 shopType = 2;
  if (has_shoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shoptype(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 limitNumber = 4;
  if (has_limitnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limitnumber(), output);
  }

  // optional int32 oneBuyMax = 5;
  if (has_onebuymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onebuymax(), output);
  }

  // optional int32 needMoney = 6;
  if (has_needmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->needmoney(), output);
  }

  // optional int32 price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  // optional int32 discount = 8;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->discount(), output);
  }

  // optional string limitparam = 9;
  if (has_limitparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->limitparam().data(), this->limitparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "limitparam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->limitparam(), output);
  }

  // optional int32 limitType = 10;
  if (has_limittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->limittype(), output);
  }

  // optional int32 cardId = 11;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShopItemInfo)
}

::google::protobuf::uint8* ShopItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShopItemInfo)
  // optional int64 temID = 1;
  if (has_temid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->temid(), target);
  }

  // optional int32 shopType = 2;
  if (has_shoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shoptype(), target);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 limitNumber = 4;
  if (has_limitnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limitnumber(), target);
  }

  // optional int32 oneBuyMax = 5;
  if (has_onebuymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onebuymax(), target);
  }

  // optional int32 needMoney = 6;
  if (has_needmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->needmoney(), target);
  }

  // optional int32 price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  // optional int32 discount = 8;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->discount(), target);
  }

  // optional string limitparam = 9;
  if (has_limitparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->limitparam().data(), this->limitparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "limitparam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->limitparam(), target);
  }

  // optional int32 limitType = 10;
  if (has_limittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->limittype(), target);
  }

  // optional int32 cardId = 11;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShopItemInfo)
  return target;
}

int ShopItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 temID = 1;
    if (has_temid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->temid());
    }

    // optional int32 shopType = 2;
    if (has_shoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoptype());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 limitNumber = 4;
    if (has_limitnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitnumber());
    }

    // optional int32 oneBuyMax = 5;
    if (has_onebuymax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onebuymax());
    }

    // optional int32 needMoney = 6;
    if (has_needmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needmoney());
    }

    // optional int32 price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 discount = 8;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string limitparam = 9;
    if (has_limitparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limitparam());
    }

    // optional int32 limitType = 10;
    if (has_limittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limittype());
    }

    // optional int32 cardId = 11;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItemInfo::MergeFrom(const ShopItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temid()) {
      set_temid(from.temid());
    }
    if (from.has_shoptype()) {
      set_shoptype(from.shoptype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_limitnumber()) {
      set_limitnumber(from.limitnumber());
    }
    if (from.has_onebuymax()) {
      set_onebuymax(from.onebuymax());
    }
    if (from.has_needmoney()) {
      set_needmoney(from.needmoney());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limitparam()) {
      set_limitparam(from.limitparam());
    }
    if (from.has_limittype()) {
      set_limittype(from.limittype());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItemInfo::CopyFrom(const ShopItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItemInfo::IsInitialized() const {

  return true;
}

void ShopItemInfo::Swap(ShopItemInfo* other) {
  if (other != this) {
    std::swap(temid_, other->temid_);
    std::swap(shoptype_, other->shoptype_);
    std::swap(itemid_, other->itemid_);
    std::swap(limitnumber_, other->limitnumber_);
    std::swap(onebuymax_, other->onebuymax_);
    std::swap(needmoney_, other->needmoney_);
    std::swap(price_, other->price_);
    std::swap(discount_, other->discount_);
    std::swap(limitparam_, other->limitparam_);
    std::swap(limittype_, other->limittype_);
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItemInfo_descriptor_;
  metadata.reflection = ShopItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopSingInfo::kIdFieldNumber;
const int ShopSingInfo::kNameFieldNumber;
const int ShopSingInfo::kCanSeeFieldNumber;
const int ShopSingInfo::kOrderFieldNumber;
const int ShopSingInfo::kCardFieldNumber;
const int ShopSingInfo::kResultFieldNumber;
const int ShopSingInfo::kShopCardInfoFieldNumber;
const int ShopSingInfo::kStoreTypeFieldNumber;
#endif  // !_MSC_VER

ShopSingInfo::ShopSingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShopSingInfo)
}

void ShopSingInfo::InitAsDefaultInstance() {
}

ShopSingInfo::ShopSingInfo(const ShopSingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShopSingInfo)
}

void ShopSingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = 0;
  cansee_ = 0;
  order_ = 0;
  card_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopSingInfo::~ShopSingInfo() {
  // @@protoc_insertion_point(destructor:ShopSingInfo)
  SharedDtor();
}

void ShopSingInfo::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void ShopSingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopSingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopSingInfo_descriptor_;
}

const ShopSingInfo& ShopSingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

ShopSingInfo* ShopSingInfo::default_instance_ = NULL;

ShopSingInfo* ShopSingInfo::New() const {
  return new ShopSingInfo;
}

void ShopSingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopSingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(id_, order_);
    ZR_(card_, storetype_);
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  shopcardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopSingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShopSingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int32 name = 2;
      case 2: {
        if (tag == 16) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_canSee;
        break;
      }

      // optional int32 canSee = 3;
      case 3: {
        if (tag == 24) {
         parse_canSee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cansee_)));
          set_has_cansee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // optional int32 order = 4;
      case 4: {
        if (tag == 32) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_card;
        break;
      }

      // optional int32 card = 5;
      case 5: {
        if (tag == 40) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }

      // optional string result = 6;
      case 6: {
        if (tag == 50) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ShopCardInfo;
        break;
      }

      // repeated .ShopCardInfo ShopCardInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ShopCardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopcardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ShopCardInfo;
        if (input->ExpectTag(64)) goto parse_storeType;
        break;
      }

      // optional int32 storeType = 8;
      case 8: {
        if (tag == 64) {
         parse_storeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storetype_)));
          set_has_storetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShopSingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShopSingInfo)
  return false;
#undef DO_
}

void ShopSingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShopSingInfo)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->name(), output);
  }

  // optional int32 canSee = 3;
  if (has_cansee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cansee(), output);
  }

  // optional int32 order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->order(), output);
  }

  // optional int32 card = 5;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->card(), output);
  }

  // optional string result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->result(), output);
  }

  // repeated .ShopCardInfo ShopCardInfo = 7;
  for (int i = 0; i < this->shopcardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shopcardinfo(i), output);
  }

  // optional int32 storeType = 8;
  if (has_storetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->storetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShopSingInfo)
}

::google::protobuf::uint8* ShopSingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShopSingInfo)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->name(), target);
  }

  // optional int32 canSee = 3;
  if (has_cansee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cansee(), target);
  }

  // optional int32 order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->order(), target);
  }

  // optional int32 card = 5;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->card(), target);
  }

  // optional string result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->result(), target);
  }

  // repeated .ShopCardInfo ShopCardInfo = 7;
  for (int i = 0; i < this->shopcardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shopcardinfo(i), target);
  }

  // optional int32 storeType = 8;
  if (has_storetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->storetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShopSingInfo)
  return target;
}

int ShopSingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }

    // optional int32 canSee = 3;
    if (has_cansee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cansee());
    }

    // optional int32 order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 card = 5;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional string result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

    // optional int32 storeType = 8;
    if (has_storetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storetype());
    }

  }
  // repeated .ShopCardInfo ShopCardInfo = 7;
  total_size += 1 * this->shopcardinfo_size();
  for (int i = 0; i < this->shopcardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopcardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopSingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopSingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopSingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopSingInfo::MergeFrom(const ShopSingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopcardinfo_.MergeFrom(from.shopcardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cansee()) {
      set_cansee(from.cansee());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_storetype()) {
      set_storetype(from.storetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopSingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopSingInfo::CopyFrom(const ShopSingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopSingInfo::IsInitialized() const {

  return true;
}

void ShopSingInfo::Swap(ShopSingInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(cansee_, other->cansee_);
    std::swap(order_, other->order_);
    std::swap(card_, other->card_);
    std::swap(result_, other->result_);
    shopcardinfo_.Swap(&other->shopcardinfo_);
    std::swap(storetype_, other->storetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopSingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopSingInfo_descriptor_;
  metadata.reflection = ShopSingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCardInfo::kCardIdFieldNumber;
const int ShopCardInfo::kCardNameFieldNumber;
#endif  // !_MSC_VER

ShopCardInfo::ShopCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShopCardInfo)
}

void ShopCardInfo::InitAsDefaultInstance() {
}

ShopCardInfo::ShopCardInfo(const ShopCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShopCardInfo)
}

void ShopCardInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cardid_ = 0;
  cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCardInfo::~ShopCardInfo() {
  // @@protoc_insertion_point(destructor:ShopCardInfo)
  SharedDtor();
}

void ShopCardInfo::SharedDtor() {
  if (cardname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cardname_;
  }
  if (this != default_instance_) {
  }
}

void ShopCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCardInfo_descriptor_;
}

const ShopCardInfo& ShopCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

ShopCardInfo* ShopCardInfo::default_instance_ = NULL;

ShopCardInfo* ShopCardInfo::New() const {
  return new ShopCardInfo;
}

void ShopCardInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cardid_ = 0;
    if (has_cardname()) {
      if (cardname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cardname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShopCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CardName;
        break;
      }

      // optional string CardName = 2;
      case 2: {
        if (tag == 18) {
         parse_CardName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cardname().data(), this->cardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cardname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShopCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShopCardInfo)
  return false;
#undef DO_
}

void ShopCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShopCardInfo)
  // optional int32 cardId = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cardid(), output);
  }

  // optional string CardName = 2;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardname().data(), this->cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cardname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShopCardInfo)
}

::google::protobuf::uint8* ShopCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShopCardInfo)
  // optional int32 cardId = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cardid(), target);
  }

  // optional string CardName = 2;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cardname().data(), this->cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cardname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShopCardInfo)
  return target;
}

int ShopCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

    // optional string CardName = 2;
    if (has_cardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCardInfo::MergeFrom(const ShopCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_cardname()) {
      set_cardname(from.cardname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCardInfo::CopyFrom(const ShopCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCardInfo::IsInitialized() const {

  return true;
}

void ShopCardInfo::Swap(ShopCardInfo* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(cardname_, other->cardname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCardInfo_descriptor_;
  metadata.reflection = ShopCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushShopData::kShopDataFieldNumber;
const int GCPushShopData::kShopSingFieldNumber;
#endif  // !_MSC_VER

GCPushShopData::GCPushShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushShopData)
}

void GCPushShopData::InitAsDefaultInstance() {
}

GCPushShopData::GCPushShopData(const GCPushShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushShopData)
}

void GCPushShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushShopData::~GCPushShopData() {
  // @@protoc_insertion_point(destructor:GCPushShopData)
  SharedDtor();
}

void GCPushShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushShopData_descriptor_;
}

const GCPushShopData& GCPushShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

GCPushShopData* GCPushShopData::default_instance_ = NULL;

GCPushShopData* GCPushShopData::New() const {
  return new GCPushShopData;
}

void GCPushShopData::Clear() {
  shopdata_.Clear();
  shopsing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushShopData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShopItemInfo shopData = 1;
      case 1: {
        if (tag == 10) {
         parse_shopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shopData;
        if (input->ExpectTag(18)) goto parse_shopSing;
        break;
      }

      // repeated .ShopSingInfo shopSing = 2;
      case 2: {
        if (tag == 18) {
         parse_shopSing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopsing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shopSing;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushShopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushShopData)
  return false;
#undef DO_
}

void GCPushShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushShopData)
  // repeated .ShopItemInfo shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shopdata(i), output);
  }

  // repeated .ShopSingInfo shopSing = 2;
  for (int i = 0; i < this->shopsing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shopsing(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushShopData)
}

::google::protobuf::uint8* GCPushShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushShopData)
  // repeated .ShopItemInfo shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shopdata(i), target);
  }

  // repeated .ShopSingInfo shopSing = 2;
  for (int i = 0; i < this->shopsing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shopsing(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushShopData)
  return target;
}

int GCPushShopData::ByteSize() const {
  int total_size = 0;

  // repeated .ShopItemInfo shopData = 1;
  total_size += 1 * this->shopdata_size();
  for (int i = 0; i < this->shopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopdata(i));
  }

  // repeated .ShopSingInfo shopSing = 2;
  total_size += 1 * this->shopsing_size();
  for (int i = 0; i < this->shopsing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopsing(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushShopData::MergeFrom(const GCPushShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopdata_.MergeFrom(from.shopdata_);
  shopsing_.MergeFrom(from.shopsing_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushShopData::CopyFrom(const GCPushShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushShopData::IsInitialized() const {

  return true;
}

void GCPushShopData::Swap(GCPushShopData* other) {
  if (other != this) {
    shopdata_.Swap(&other->shopdata_);
    shopsing_.Swap(&other->shopsing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushShopData_descriptor_;
  metadata.reflection = GCPushShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAddShopItemData::kShopDataFieldNumber;
#endif  // !_MSC_VER

GCAddShopItemData::GCAddShopItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAddShopItemData)
}

void GCAddShopItemData::InitAsDefaultInstance() {
}

GCAddShopItemData::GCAddShopItemData(const GCAddShopItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAddShopItemData)
}

void GCAddShopItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAddShopItemData::~GCAddShopItemData() {
  // @@protoc_insertion_point(destructor:GCAddShopItemData)
  SharedDtor();
}

void GCAddShopItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAddShopItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAddShopItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAddShopItemData_descriptor_;
}

const GCAddShopItemData& GCAddShopItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

GCAddShopItemData* GCAddShopItemData::default_instance_ = NULL;

GCAddShopItemData* GCAddShopItemData::New() const {
  return new GCAddShopItemData;
}

void GCAddShopItemData::Clear() {
  shopdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAddShopItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAddShopItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ShopItemInfo shopData = 1;
      case 1: {
        if (tag == 10) {
         parse_shopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shopData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAddShopItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAddShopItemData)
  return false;
#undef DO_
}

void GCAddShopItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAddShopItemData)
  // repeated .ShopItemInfo shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shopdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAddShopItemData)
}

::google::protobuf::uint8* GCAddShopItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAddShopItemData)
  // repeated .ShopItemInfo shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shopdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAddShopItemData)
  return target;
}

int GCAddShopItemData::ByteSize() const {
  int total_size = 0;

  // repeated .ShopItemInfo shopData = 1;
  total_size += 1 * this->shopdata_size();
  for (int i = 0; i < this->shopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAddShopItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAddShopItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAddShopItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAddShopItemData::MergeFrom(const GCAddShopItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopdata_.MergeFrom(from.shopdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAddShopItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAddShopItemData::CopyFrom(const GCAddShopItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAddShopItemData::IsInitialized() const {

  return true;
}

void GCAddShopItemData::Swap(GCAddShopItemData* other) {
  if (other != this) {
    shopdata_.Swap(&other->shopdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAddShopItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAddShopItemData_descriptor_;
  metadata.reflection = GCAddShopItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelItemData::kTypeFieldNumber;
const int DelItemData::kIdFieldNumber;
#endif  // !_MSC_VER

DelItemData::DelItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DelItemData)
}

void DelItemData::InitAsDefaultInstance() {
}

DelItemData::DelItemData(const DelItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DelItemData)
}

void DelItemData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelItemData::~DelItemData() {
  // @@protoc_insertion_point(destructor:DelItemData)
  SharedDtor();
}

void DelItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelItemData_descriptor_;
}

const DelItemData& DelItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

DelItemData* DelItemData::default_instance_ = NULL;

DelItemData* DelItemData::New() const {
  return new DelItemData;
}

void DelItemData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelItemData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DelItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DelItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DelItemData)
  return false;
#undef DO_
}

void DelItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DelItemData)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DelItemData)
}

::google::protobuf::uint8* DelItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DelItemData)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DelItemData)
  return target;
}

int DelItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelItemData::MergeFrom(const DelItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelItemData::CopyFrom(const DelItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelItemData::IsInitialized() const {

  return true;
}

void DelItemData::Swap(DelItemData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelItemData_descriptor_;
  metadata.reflection = DelItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelShopItemData::kShopDataFieldNumber;
#endif  // !_MSC_VER

GCDelShopItemData::GCDelShopItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelShopItemData)
}

void GCDelShopItemData::InitAsDefaultInstance() {
}

GCDelShopItemData::GCDelShopItemData(const GCDelShopItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelShopItemData)
}

void GCDelShopItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelShopItemData::~GCDelShopItemData() {
  // @@protoc_insertion_point(destructor:GCDelShopItemData)
  SharedDtor();
}

void GCDelShopItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelShopItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelShopItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelShopItemData_descriptor_;
}

const GCDelShopItemData& GCDelShopItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

GCDelShopItemData* GCDelShopItemData::default_instance_ = NULL;

GCDelShopItemData* GCDelShopItemData::New() const {
  return new GCDelShopItemData;
}

void GCDelShopItemData::Clear() {
  shopdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelShopItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelShopItemData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DelItemData shopData = 1;
      case 1: {
        if (tag == 10) {
         parse_shopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shopdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shopData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelShopItemData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelShopItemData)
  return false;
#undef DO_
}

void GCDelShopItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelShopItemData)
  // repeated .DelItemData shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shopdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelShopItemData)
}

::google::protobuf::uint8* GCDelShopItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelShopItemData)
  // repeated .DelItemData shopData = 1;
  for (int i = 0; i < this->shopdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shopdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelShopItemData)
  return target;
}

int GCDelShopItemData::ByteSize() const {
  int total_size = 0;

  // repeated .DelItemData shopData = 1;
  total_size += 1 * this->shopdata_size();
  for (int i = 0; i < this->shopdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shopdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelShopItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelShopItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelShopItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelShopItemData::MergeFrom(const GCDelShopItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  shopdata_.MergeFrom(from.shopdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelShopItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelShopItemData::CopyFrom(const GCDelShopItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelShopItemData::IsInitialized() const {

  return true;
}

void GCDelShopItemData::Swap(GCDelShopItemData* other) {
  if (other != this) {
    shopdata_.Swap(&other->shopdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelShopItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelShopItemData_descriptor_;
  metadata.reflection = GCDelShopItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGShopLuckDraw::kTypeFieldNumber;
#endif  // !_MSC_VER

CGShopLuckDraw::CGShopLuckDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGShopLuckDraw)
}

void CGShopLuckDraw::InitAsDefaultInstance() {
}

CGShopLuckDraw::CGShopLuckDraw(const CGShopLuckDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGShopLuckDraw)
}

void CGShopLuckDraw::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGShopLuckDraw::~CGShopLuckDraw() {
  // @@protoc_insertion_point(destructor:CGShopLuckDraw)
  SharedDtor();
}

void CGShopLuckDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGShopLuckDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGShopLuckDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGShopLuckDraw_descriptor_;
}

const CGShopLuckDraw& CGShopLuckDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

CGShopLuckDraw* CGShopLuckDraw::default_instance_ = NULL;

CGShopLuckDraw* CGShopLuckDraw::New() const {
  return new CGShopLuckDraw;
}

void CGShopLuckDraw::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGShopLuckDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGShopLuckDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGShopLuckDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGShopLuckDraw)
  return false;
#undef DO_
}

void CGShopLuckDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGShopLuckDraw)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGShopLuckDraw)
}

::google::protobuf::uint8* CGShopLuckDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGShopLuckDraw)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGShopLuckDraw)
  return target;
}

int CGShopLuckDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGShopLuckDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGShopLuckDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGShopLuckDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGShopLuckDraw::MergeFrom(const CGShopLuckDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGShopLuckDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGShopLuckDraw::CopyFrom(const CGShopLuckDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGShopLuckDraw::IsInitialized() const {

  return true;
}

void CGShopLuckDraw::Swap(CGShopLuckDraw* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGShopLuckDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGShopLuckDraw_descriptor_;
  metadata.reflection = CGShopLuckDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPushShop::kTypeFieldNumber;
const int GCPushShop::kItemInfoFieldNumber;
const int GCPushShop::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

GCPushShop::GCPushShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCPushShop)
}

void GCPushShop::InitAsDefaultInstance() {
}

GCPushShop::GCPushShop(const GCPushShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCPushShop)
}

void GCPushShop::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPushShop::~GCPushShop() {
  // @@protoc_insertion_point(destructor:GCPushShop)
  SharedDtor();
}

void GCPushShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPushShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPushShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPushShop_descriptor_;
}

const GCPushShop& GCPushShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopMessage_2eproto();
  return *default_instance_;
}

GCPushShop* GCPushShop::default_instance_ = NULL;

GCPushShop* GCPushShop::New() const {
  return new GCPushShop;
}

void GCPushShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCPushShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, errorcode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPushShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCPushShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // repeated .ItemInfo itemInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 3;
      case 3: {
        if (tag == 24) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCPushShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCPushShop)
  return false;
#undef DO_
}

void GCPushShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCPushShop)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .ItemInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(i), output);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCPushShop)
}

::google::protobuf::uint8* GCPushShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCPushShop)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .ItemInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(i), target);
  }

  // optional int32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCPushShop)
  return target;
}

int GCPushShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated .ItemInfo itemInfo = 2;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPushShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPushShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPushShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPushShop::MergeFrom(const GCPushShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPushShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPushShop::CopyFrom(const GCPushShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPushShop::IsInitialized() const {

  return true;
}

void GCPushShop::Swap(GCPushShop* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPushShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPushShop_descriptor_;
  metadata.reflection = GCPushShop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
