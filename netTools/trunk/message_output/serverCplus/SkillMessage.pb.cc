// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCTriggerMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCTriggerMotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGUpSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGUpSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpSkillOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpSkillOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChangeSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChangeSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeSkillOK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeSkillOK_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffImpactInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffImpactInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCAddBuffImpact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCAddBuffImpact_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDelBuffImpact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDelBuffImpact_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRefreshBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRefreshBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshBuffBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshBuffBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombatResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombatResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCCombatResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCCombatResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillCDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillCDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshSkillCDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshSkillCDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUseSkillResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUseSkillResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChangeMotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChangeMotion_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillMessage_2eproto() {
  protobuf_AddDesc_SkillMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGUseSkill_descriptor_ = file->message_type(0);
  static const int CGUseSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, attackerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, targetobjids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, clientstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, attackerdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, attackerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, targetpos_),
  };
  CGUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUseSkill_descriptor_,
      CGUseSkill::default_instance_,
      CGUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUseSkill));
  GCUseSkill_descriptor_ = file->message_type(1);
  static const int GCUseSkill_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, attackerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, attackerpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, targetobjids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, clientstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, attackerdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, attackrelationlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, targetpos_),
  };
  GCUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUseSkill_descriptor_,
      GCUseSkill::default_instance_,
      GCUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUseSkill));
  GCTriggerMotion_descriptor_ = file->message_type(2);
  static const int GCTriggerMotion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, motionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, targetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, targetdir_),
  };
  GCTriggerMotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCTriggerMotion_descriptor_,
      GCTriggerMotion::default_instance_,
      GCTriggerMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCTriggerMotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCTriggerMotion));
  CGUpSkill_descriptor_ = file->message_type(3);
  static const int CGUpSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpSkill, flagall_),
  };
  CGUpSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGUpSkill_descriptor_,
      CGUpSkill::default_instance_,
      CGUpSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGUpSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGUpSkill));
  GCUpSkillOK_descriptor_ = file->message_type(4);
  static const int GCUpSkillOK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpSkillOK, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpSkillOK, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpSkillOK, skillflag_),
  };
  GCUpSkillOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpSkillOK_descriptor_,
      GCUpSkillOK::default_instance_,
      GCUpSkillOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpSkillOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpSkillOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpSkillOK));
  CGChangeSkill_descriptor_ = file->message_type(5);
  static const int CGChangeSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSkill, position_),
  };
  CGChangeSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChangeSkill_descriptor_,
      CGChangeSkill::default_instance_,
      CGChangeSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChangeSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChangeSkill));
  GCChangeSkillOK_descriptor_ = file->message_type(6);
  static const int GCChangeSkillOK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSkillOK, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSkillOK, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSkillOK, skillflag_),
  };
  GCChangeSkillOK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeSkillOK_descriptor_,
      GCChangeSkillOK::default_instance_,
      GCChangeSkillOK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSkillOK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeSkillOK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeSkillOK));
  BuffImpactInfo_descriptor_ = file->message_type(7);
  static const int BuffImpactInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, buffguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, impactid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, resttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, params_),
  };
  BuffImpactInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffImpactInfo_descriptor_,
      BuffImpactInfo::default_instance_,
      BuffImpactInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffImpactInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffImpactInfo));
  GCAddBuffImpact_descriptor_ = file->message_type(8);
  static const int GCAddBuffImpact_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddBuffImpact, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddBuffImpact, buffs_),
  };
  GCAddBuffImpact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCAddBuffImpact_descriptor_,
      GCAddBuffImpact::default_instance_,
      GCAddBuffImpact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddBuffImpact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCAddBuffImpact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCAddBuffImpact));
  GCDelBuffImpact_descriptor_ = file->message_type(9);
  static const int GCDelBuffImpact_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelBuffImpact, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelBuffImpact, buffguids_),
  };
  GCDelBuffImpact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDelBuffImpact_descriptor_,
      GCDelBuffImpact::default_instance_,
      GCDelBuffImpact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelBuffImpact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDelBuffImpact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDelBuffImpact));
  CGRefreshBuff_descriptor_ = file->message_type(10);
  static const int CGRefreshBuff_offsets_[1] = {
  };
  CGRefreshBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRefreshBuff_descriptor_,
      CGRefreshBuff::default_instance_,
      CGRefreshBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRefreshBuff));
  GCRefreshBuffBack_descriptor_ = file->message_type(11);
  static const int GCRefreshBuffBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshBuffBack, buffs_),
  };
  GCRefreshBuffBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshBuffBack_descriptor_,
      GCRefreshBuffBack::default_instance_,
      GCRefreshBuffBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshBuffBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshBuffBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshBuffBack));
  CombatResult_descriptor_ = file->message_type(12);
  static const int CombatResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatResult, value_),
  };
  CombatResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombatResult_descriptor_,
      CombatResult::default_instance_,
      CombatResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombatResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombatResult));
  GCCombatResult_descriptor_ = file->message_type(13);
  static const int GCCombatResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombatResult, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombatResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombatResult, srcobjid_),
  };
  GCCombatResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCCombatResult_descriptor_,
      GCCombatResult::default_instance_,
      GCCombatResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombatResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCCombatResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCCombatResult));
  SkillCDInfo_descriptor_ = file->message_type(14);
  static const int SkillCDInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, cdendtime_),
  };
  SkillCDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillCDInfo_descriptor_,
      SkillCDInfo::default_instance_,
      SkillCDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillCDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillCDInfo));
  GCRefreshSkillCDInfo_descriptor_ = file->message_type(15);
  static const int GCRefreshSkillCDInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSkillCDInfo, cdinfo_),
  };
  GCRefreshSkillCDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshSkillCDInfo_descriptor_,
      GCRefreshSkillCDInfo::default_instance_,
      GCRefreshSkillCDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSkillCDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSkillCDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshSkillCDInfo));
  GCUseSkillResult_descriptor_ = file->message_type(16);
  static const int GCUseSkillResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkillResult, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkillResult, cdinfo_),
  };
  GCUseSkillResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUseSkillResult_descriptor_,
      GCUseSkillResult::default_instance_,
      GCUseSkillResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkillResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUseSkillResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUseSkillResult));
  GCChangeMotion_descriptor_ = file->message_type(17);
  static const int GCChangeMotion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, motionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, atkid_),
  };
  GCChangeMotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChangeMotion_descriptor_,
      GCChangeMotion::default_instance_,
      GCChangeMotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChangeMotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChangeMotion));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUseSkill_descriptor_, &CGUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUseSkill_descriptor_, &GCUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCTriggerMotion_descriptor_, &GCTriggerMotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGUpSkill_descriptor_, &CGUpSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpSkillOK_descriptor_, &GCUpSkillOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChangeSkill_descriptor_, &CGChangeSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeSkillOK_descriptor_, &GCChangeSkillOK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffImpactInfo_descriptor_, &BuffImpactInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCAddBuffImpact_descriptor_, &GCAddBuffImpact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDelBuffImpact_descriptor_, &GCDelBuffImpact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRefreshBuff_descriptor_, &CGRefreshBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshBuffBack_descriptor_, &GCRefreshBuffBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombatResult_descriptor_, &CombatResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCCombatResult_descriptor_, &GCCombatResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillCDInfo_descriptor_, &SkillCDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshSkillCDInfo_descriptor_, &GCRefreshSkillCDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUseSkillResult_descriptor_, &GCUseSkillResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChangeMotion_descriptor_, &GCChangeMotion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillMessage_2eproto() {
  delete CGUseSkill::default_instance_;
  delete CGUseSkill_reflection_;
  delete GCUseSkill::default_instance_;
  delete GCUseSkill_reflection_;
  delete GCTriggerMotion::default_instance_;
  delete GCTriggerMotion_reflection_;
  delete CGUpSkill::default_instance_;
  delete CGUpSkill_reflection_;
  delete GCUpSkillOK::default_instance_;
  delete GCUpSkillOK_reflection_;
  delete CGChangeSkill::default_instance_;
  delete CGChangeSkill_reflection_;
  delete GCChangeSkillOK::default_instance_;
  delete GCChangeSkillOK_reflection_;
  delete BuffImpactInfo::default_instance_;
  delete BuffImpactInfo_reflection_;
  delete GCAddBuffImpact::default_instance_;
  delete GCAddBuffImpact_reflection_;
  delete GCDelBuffImpact::default_instance_;
  delete GCDelBuffImpact_reflection_;
  delete CGRefreshBuff::default_instance_;
  delete CGRefreshBuff_reflection_;
  delete GCRefreshBuffBack::default_instance_;
  delete GCRefreshBuffBack_reflection_;
  delete CombatResult::default_instance_;
  delete CombatResult_reflection_;
  delete GCCombatResult::default_instance_;
  delete GCCombatResult_reflection_;
  delete SkillCDInfo::default_instance_;
  delete SkillCDInfo_reflection_;
  delete GCRefreshSkillCDInfo::default_instance_;
  delete GCRefreshSkillCDInfo_reflection_;
  delete GCUseSkillResult::default_instance_;
  delete GCUseSkillResult_reflection_;
  delete GCChangeMotion::default_instance_;
  delete GCChangeMotion_reflection_;
}

void protobuf_AddDesc_SkillMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SkillMessage.proto\032\022InnerMessage.proto"
    "\"\341\001\n\nCGUseSkill\022\017\n\007skillId\030\001 \001(\005\022\022\n\nskil"
    "lIndex\030\002 \001(\005\022!\n\013attackerPos\030\003 \001(\0132\014.Vect"
    "or3Info\022\024\n\014targetObjIds\030\004 \003(\003\022\027\n\017clientS"
    "tartTime\030\005 \001(\003\022\'\n\021attackerDirection\030\006 \001("
    "\0132\014.Vector3Info\022\022\n\nattackerId\030\007 \001(\003\022\037\n\tt"
    "argetPos\030\010 \001(\0132\014.Vector3Info\"\223\002\n\nGCUseSk"
    "ill\022\022\n\nattackerId\030\001 \001(\003\022\017\n\007skillId\030\002 \001(\005"
    "\022\022\n\nskillIndex\030\003 \001(\005\022!\n\013attackerPos\030\004 \001("
    "\0132\014.Vector3Info\022\024\n\014targetObjIds\030\005 \003(\003\022\027\n"
    "\017clientStartTime\030\006 \001(\003\022\'\n\021attackerDirect"
    "ion\030\007 \001(\0132\014.Vector3Info\0220\n\022attackRelatio"
    "nList\030\010 \003(\0132\024.SkillAttackRelation\022\037\n\ttar"
    "getPos\030\t \001(\0132\014.Vector3Info\"w\n\017GCTriggerM"
    "otion\022\020\n\010motionId\030\001 \001(\005\022\020\n\010targetId\030\002 \001("
    "\003\022\037\n\ttargetPos\030\003 \001(\0132\014.Vector3Info\022\037\n\tta"
    "rgetDir\030\004 \001(\0132\014.Vector3Info\"-\n\tCGUpSkill"
    "\022\017\n\007skillId\030\001 \001(\005\022\017\n\007flagall\030\002 \001(\005\"Q\n\013GC"
    "UpSkillOK\022\014\n\004flag\030\001 \001(\005\022!\n\tskilldata\030\002 \003"
    "(\0132\016.SkillItemData\022\021\n\tskillFlag\030\003 \001(\005\"2\n"
    "\rCGChangeSkill\022\017\n\007skillId\030\001 \001(\005\022\020\n\010posit"
    "ion\030\002 \001(\005\"U\n\017GCChangeSkillOK\022\014\n\004flag\030\001 \001"
    "(\005\022!\n\tskilldata\030\002 \003(\0132\016.SkillItemData\022\021\n"
    "\tskillFlag\030\003 \001(\005\"V\n\016BuffImpactInfo\022\020\n\010bu"
    "ffGuid\030\001 \001(\003\022\020\n\010impactId\030\002 \001(\005\022\020\n\010restTi"
    "me\030\003 \001(\005\022\016\n\006params\030\004 \003(\005\"@\n\017GCAddBuffImp"
    "act\022\r\n\005objId\030\001 \001(\003\022\036\n\005buffs\030\002 \003(\0132\017.Buff"
    "ImpactInfo\"3\n\017GCDelBuffImpact\022\r\n\005objId\030\001"
    " \001(\003\022\021\n\tbuffGuids\030\002 \003(\003\"\017\n\rCGRefreshBuff"
    "\"3\n\021GCRefreshBuffBack\022\036\n\005buffs\030\001 \003(\0132\017.B"
    "uffImpactInfo\"+\n\014CombatResult\022\014\n\004type\030\002 "
    "\001(\005\022\r\n\005value\030\003 \001(\005\"P\n\016GCCombatResult\022\r\n\005"
    "objId\030\001 \001(\003\022\035\n\006result\030\002 \003(\0132\r.CombatResu"
    "lt\022\020\n\010srcObjId\030\003 \001(\003\"1\n\013SkillCDInfo\022\017\n\007s"
    "killId\030\001 \001(\005\022\021\n\tcdEndTime\030\002 \001(\003\"4\n\024GCRef"
    "reshSkillCDInfo\022\034\n\006cdInfo\030\001 \003(\0132\014.SkillC"
    "DInfo\">\n\020GCUseSkillResult\022\014\n\004flag\030\001 \001(\005\022"
    "\034\n\006cdInfo\030\002 \001(\0132\014.SkillCDInfo\"R\n\016GCChang"
    "eMotion\022\020\n\010motionId\030\001 \001(\005\022\r\n\005objId\030\002 \001(\003"
    "\022\020\n\010effectId\030\003 \001(\t\022\r\n\005atkId\030\004 \001(\003B\031\n\027com"
    ".mile.common.message", 1620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillMessage.proto", &protobuf_RegisterTypes);
  CGUseSkill::default_instance_ = new CGUseSkill();
  GCUseSkill::default_instance_ = new GCUseSkill();
  GCTriggerMotion::default_instance_ = new GCTriggerMotion();
  CGUpSkill::default_instance_ = new CGUpSkill();
  GCUpSkillOK::default_instance_ = new GCUpSkillOK();
  CGChangeSkill::default_instance_ = new CGChangeSkill();
  GCChangeSkillOK::default_instance_ = new GCChangeSkillOK();
  BuffImpactInfo::default_instance_ = new BuffImpactInfo();
  GCAddBuffImpact::default_instance_ = new GCAddBuffImpact();
  GCDelBuffImpact::default_instance_ = new GCDelBuffImpact();
  CGRefreshBuff::default_instance_ = new CGRefreshBuff();
  GCRefreshBuffBack::default_instance_ = new GCRefreshBuffBack();
  CombatResult::default_instance_ = new CombatResult();
  GCCombatResult::default_instance_ = new GCCombatResult();
  SkillCDInfo::default_instance_ = new SkillCDInfo();
  GCRefreshSkillCDInfo::default_instance_ = new GCRefreshSkillCDInfo();
  GCUseSkillResult::default_instance_ = new GCUseSkillResult();
  GCChangeMotion::default_instance_ = new GCChangeMotion();
  CGUseSkill::default_instance_->InitAsDefaultInstance();
  GCUseSkill::default_instance_->InitAsDefaultInstance();
  GCTriggerMotion::default_instance_->InitAsDefaultInstance();
  CGUpSkill::default_instance_->InitAsDefaultInstance();
  GCUpSkillOK::default_instance_->InitAsDefaultInstance();
  CGChangeSkill::default_instance_->InitAsDefaultInstance();
  GCChangeSkillOK::default_instance_->InitAsDefaultInstance();
  BuffImpactInfo::default_instance_->InitAsDefaultInstance();
  GCAddBuffImpact::default_instance_->InitAsDefaultInstance();
  GCDelBuffImpact::default_instance_->InitAsDefaultInstance();
  CGRefreshBuff::default_instance_->InitAsDefaultInstance();
  GCRefreshBuffBack::default_instance_->InitAsDefaultInstance();
  CombatResult::default_instance_->InitAsDefaultInstance();
  GCCombatResult::default_instance_->InitAsDefaultInstance();
  SkillCDInfo::default_instance_->InitAsDefaultInstance();
  GCRefreshSkillCDInfo::default_instance_->InitAsDefaultInstance();
  GCUseSkillResult::default_instance_->InitAsDefaultInstance();
  GCChangeMotion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillMessage_2eproto {
  StaticDescriptorInitializer_SkillMessage_2eproto() {
    protobuf_AddDesc_SkillMessage_2eproto();
  }
} static_descriptor_initializer_SkillMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGUseSkill::kSkillIdFieldNumber;
const int CGUseSkill::kSkillIndexFieldNumber;
const int CGUseSkill::kAttackerPosFieldNumber;
const int CGUseSkill::kTargetObjIdsFieldNumber;
const int CGUseSkill::kClientStartTimeFieldNumber;
const int CGUseSkill::kAttackerDirectionFieldNumber;
const int CGUseSkill::kAttackerIdFieldNumber;
const int CGUseSkill::kTargetPosFieldNumber;
#endif  // !_MSC_VER

CGUseSkill::CGUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUseSkill)
}

void CGUseSkill::InitAsDefaultInstance() {
  attackerpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  attackerdirection_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

CGUseSkill::CGUseSkill(const CGUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUseSkill)
}

void CGUseSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  skillindex_ = 0;
  attackerpos_ = NULL;
  clientstarttime_ = GOOGLE_LONGLONG(0);
  attackerdirection_ = NULL;
  attackerid_ = GOOGLE_LONGLONG(0);
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUseSkill::~CGUseSkill() {
  // @@protoc_insertion_point(destructor:CGUseSkill)
  SharedDtor();
}

void CGUseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete attackerpos_;
    delete attackerdirection_;
    delete targetpos_;
  }
}

void CGUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUseSkill_descriptor_;
}

const CGUseSkill& CGUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

CGUseSkill* CGUseSkill::default_instance_ = NULL;

CGUseSkill* CGUseSkill::New() const {
  return new CGUseSkill;
}

void CGUseSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGUseSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(skillid_, skillindex_);
    if (has_attackerpos()) {
      if (attackerpos_ != NULL) attackerpos_->::Vector3Info::Clear();
    }
    clientstarttime_ = GOOGLE_LONGLONG(0);
    if (has_attackerdirection()) {
      if (attackerdirection_ != NULL) attackerdirection_->::Vector3Info::Clear();
    }
    attackerid_ = GOOGLE_LONGLONG(0);
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetobjids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillIndex;
        break;
      }

      // optional int32 skillIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_skillIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attackerPos;
        break;
      }

      // optional .Vector3Info attackerPos = 3;
      case 3: {
        if (tag == 26) {
         parse_attackerPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackerpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetObjIds;
        break;
      }

      // repeated int64 targetObjIds = 4;
      case 4: {
        if (tag == 32) {
         parse_targetObjIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_targetobjids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targetobjids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetObjIds;
        if (input->ExpectTag(40)) goto parse_clientStartTime;
        break;
      }

      // optional int64 clientStartTime = 5;
      case 5: {
        if (tag == 40) {
         parse_clientStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientstarttime_)));
          set_has_clientstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attackerDirection;
        break;
      }

      // optional .Vector3Info attackerDirection = 6;
      case 6: {
        if (tag == 50) {
         parse_attackerDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackerdirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_attackerId;
        break;
      }

      // optional int64 attackerId = 7;
      case 7: {
        if (tag == 56) {
         parse_attackerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackerid_)));
          set_has_attackerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 8;
      case 8: {
        if (tag == 66) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUseSkill)
  return false;
#undef DO_
}

void CGUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUseSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 skillIndex = 2;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillindex(), output);
  }

  // optional .Vector3Info attackerPos = 3;
  if (has_attackerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attackerpos(), output);
  }

  // repeated int64 targetObjIds = 4;
  for (int i = 0; i < this->targetobjids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->targetobjids(i), output);
  }

  // optional int64 clientStartTime = 5;
  if (has_clientstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->clientstarttime(), output);
  }

  // optional .Vector3Info attackerDirection = 6;
  if (has_attackerdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attackerdirection(), output);
  }

  // optional int64 attackerId = 7;
  if (has_attackerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->attackerid(), output);
  }

  // optional .Vector3Info targetPos = 8;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUseSkill)
}

::google::protobuf::uint8* CGUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUseSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 skillIndex = 2;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillindex(), target);
  }

  // optional .Vector3Info attackerPos = 3;
  if (has_attackerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attackerpos(), target);
  }

  // repeated int64 targetObjIds = 4;
  for (int i = 0; i < this->targetobjids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->targetobjids(i), target);
  }

  // optional int64 clientStartTime = 5;
  if (has_clientstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->clientstarttime(), target);
  }

  // optional .Vector3Info attackerDirection = 6;
  if (has_attackerdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attackerdirection(), target);
  }

  // optional int64 attackerId = 7;
  if (has_attackerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->attackerid(), target);
  }

  // optional .Vector3Info targetPos = 8;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUseSkill)
  return target;
}

int CGUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillIndex = 2;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillindex());
    }

    // optional .Vector3Info attackerPos = 3;
    if (has_attackerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackerpos());
    }

    // optional int64 clientStartTime = 5;
    if (has_clientstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientstarttime());
    }

    // optional .Vector3Info attackerDirection = 6;
    if (has_attackerdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackerdirection());
    }

    // optional int64 attackerId = 7;
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackerid());
    }

    // optional .Vector3Info targetPos = 8;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated int64 targetObjIds = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetobjids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targetobjids(i));
    }
    total_size += 1 * this->targetobjids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUseSkill::MergeFrom(const CGUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetobjids_.MergeFrom(from.targetobjids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_attackerpos()) {
      mutable_attackerpos()->::Vector3Info::MergeFrom(from.attackerpos());
    }
    if (from.has_clientstarttime()) {
      set_clientstarttime(from.clientstarttime());
    }
    if (from.has_attackerdirection()) {
      mutable_attackerdirection()->::Vector3Info::MergeFrom(from.attackerdirection());
    }
    if (from.has_attackerid()) {
      set_attackerid(from.attackerid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUseSkill::CopyFrom(const CGUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUseSkill::IsInitialized() const {

  return true;
}

void CGUseSkill::Swap(CGUseSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skillindex_, other->skillindex_);
    std::swap(attackerpos_, other->attackerpos_);
    targetobjids_.Swap(&other->targetobjids_);
    std::swap(clientstarttime_, other->clientstarttime_);
    std::swap(attackerdirection_, other->attackerdirection_);
    std::swap(attackerid_, other->attackerid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUseSkill_descriptor_;
  metadata.reflection = CGUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUseSkill::kAttackerIdFieldNumber;
const int GCUseSkill::kSkillIdFieldNumber;
const int GCUseSkill::kSkillIndexFieldNumber;
const int GCUseSkill::kAttackerPosFieldNumber;
const int GCUseSkill::kTargetObjIdsFieldNumber;
const int GCUseSkill::kClientStartTimeFieldNumber;
const int GCUseSkill::kAttackerDirectionFieldNumber;
const int GCUseSkill::kAttackRelationListFieldNumber;
const int GCUseSkill::kTargetPosFieldNumber;
#endif  // !_MSC_VER

GCUseSkill::GCUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUseSkill)
}

void GCUseSkill::InitAsDefaultInstance() {
  attackerpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  attackerdirection_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCUseSkill::GCUseSkill(const GCUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUseSkill)
}

void GCUseSkill::SharedCtor() {
  _cached_size_ = 0;
  attackerid_ = GOOGLE_LONGLONG(0);
  skillid_ = 0;
  skillindex_ = 0;
  attackerpos_ = NULL;
  clientstarttime_ = GOOGLE_LONGLONG(0);
  attackerdirection_ = NULL;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUseSkill::~GCUseSkill() {
  // @@protoc_insertion_point(destructor:GCUseSkill)
  SharedDtor();
}

void GCUseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete attackerpos_;
    delete attackerdirection_;
    delete targetpos_;
  }
}

void GCUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUseSkill_descriptor_;
}

const GCUseSkill& GCUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCUseSkill* GCUseSkill::default_instance_ = NULL;

GCUseSkill* GCUseSkill::New() const {
  return new GCUseSkill;
}

void GCUseSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCUseSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(attackerid_, skillindex_);
    if (has_attackerpos()) {
      if (attackerpos_ != NULL) attackerpos_->::Vector3Info::Clear();
    }
    clientstarttime_ = GOOGLE_LONGLONG(0);
    if (has_attackerdirection()) {
      if (attackerdirection_ != NULL) attackerdirection_->::Vector3Info::Clear();
    }
  }
  if (has_targetpos()) {
    if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetobjids_.Clear();
  attackrelationlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 attackerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attackerid_)));
          set_has_attackerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int32 skillId = 2;
      case 2: {
        if (tag == 16) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillIndex;
        break;
      }

      // optional int32 skillIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_skillIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attackerPos;
        break;
      }

      // optional .Vector3Info attackerPos = 4;
      case 4: {
        if (tag == 34) {
         parse_attackerPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackerpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targetObjIds;
        break;
      }

      // repeated int64 targetObjIds = 5;
      case 5: {
        if (tag == 40) {
         parse_targetObjIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_targetobjids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targetobjids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_targetObjIds;
        if (input->ExpectTag(48)) goto parse_clientStartTime;
        break;
      }

      // optional int64 clientStartTime = 6;
      case 6: {
        if (tag == 48) {
         parse_clientStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clientstarttime_)));
          set_has_clientstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attackerDirection;
        break;
      }

      // optional .Vector3Info attackerDirection = 7;
      case 7: {
        if (tag == 58) {
         parse_attackerDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attackerdirection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attackRelationList;
        break;
      }

      // repeated .SkillAttackRelation attackRelationList = 8;
      case 8: {
        if (tag == 66) {
         parse_attackRelationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackrelationlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attackRelationList;
        if (input->ExpectTag(74)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 9;
      case 9: {
        if (tag == 74) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUseSkill)
  return false;
#undef DO_
}

void GCUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUseSkill)
  // optional int64 attackerId = 1;
  if (has_attackerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->attackerid(), output);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skillIndex = 3;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillindex(), output);
  }

  // optional .Vector3Info attackerPos = 4;
  if (has_attackerpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attackerpos(), output);
  }

  // repeated int64 targetObjIds = 5;
  for (int i = 0; i < this->targetobjids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->targetobjids(i), output);
  }

  // optional int64 clientStartTime = 6;
  if (has_clientstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->clientstarttime(), output);
  }

  // optional .Vector3Info attackerDirection = 7;
  if (has_attackerdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attackerdirection(), output);
  }

  // repeated .SkillAttackRelation attackRelationList = 8;
  for (int i = 0; i < this->attackrelationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attackrelationlist(i), output);
  }

  // optional .Vector3Info targetPos = 9;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUseSkill)
}

::google::protobuf::uint8* GCUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUseSkill)
  // optional int64 attackerId = 1;
  if (has_attackerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->attackerid(), target);
  }

  // optional int32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 skillIndex = 3;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillindex(), target);
  }

  // optional .Vector3Info attackerPos = 4;
  if (has_attackerpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attackerpos(), target);
  }

  // repeated int64 targetObjIds = 5;
  for (int i = 0; i < this->targetobjids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->targetobjids(i), target);
  }

  // optional int64 clientStartTime = 6;
  if (has_clientstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->clientstarttime(), target);
  }

  // optional .Vector3Info attackerDirection = 7;
  if (has_attackerdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attackerdirection(), target);
  }

  // repeated .SkillAttackRelation attackRelationList = 8;
  for (int i = 0; i < this->attackrelationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attackrelationlist(i), target);
  }

  // optional .Vector3Info targetPos = 9;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUseSkill)
  return target;
}

int GCUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 attackerId = 1;
    if (has_attackerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attackerid());
    }

    // optional int32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillIndex = 3;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillindex());
    }

    // optional .Vector3Info attackerPos = 4;
    if (has_attackerpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackerpos());
    }

    // optional int64 clientStartTime = 6;
    if (has_clientstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clientstarttime());
    }

    // optional .Vector3Info attackerDirection = 7;
    if (has_attackerdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackerdirection());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Vector3Info targetPos = 9;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  // repeated int64 targetObjIds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetobjids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targetobjids(i));
    }
    total_size += 1 * this->targetobjids_size() + data_size;
  }

  // repeated .SkillAttackRelation attackRelationList = 8;
  total_size += 1 * this->attackrelationlist_size();
  for (int i = 0; i < this->attackrelationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackrelationlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUseSkill::MergeFrom(const GCUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetobjids_.MergeFrom(from.targetobjids_);
  attackrelationlist_.MergeFrom(from.attackrelationlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackerid()) {
      set_attackerid(from.attackerid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_attackerpos()) {
      mutable_attackerpos()->::Vector3Info::MergeFrom(from.attackerpos());
    }
    if (from.has_clientstarttime()) {
      set_clientstarttime(from.clientstarttime());
    }
    if (from.has_attackerdirection()) {
      mutable_attackerdirection()->::Vector3Info::MergeFrom(from.attackerdirection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUseSkill::CopyFrom(const GCUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUseSkill::IsInitialized() const {

  return true;
}

void GCUseSkill::Swap(GCUseSkill* other) {
  if (other != this) {
    std::swap(attackerid_, other->attackerid_);
    std::swap(skillid_, other->skillid_);
    std::swap(skillindex_, other->skillindex_);
    std::swap(attackerpos_, other->attackerpos_);
    targetobjids_.Swap(&other->targetobjids_);
    std::swap(clientstarttime_, other->clientstarttime_);
    std::swap(attackerdirection_, other->attackerdirection_);
    attackrelationlist_.Swap(&other->attackrelationlist_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUseSkill_descriptor_;
  metadata.reflection = GCUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCTriggerMotion::kMotionIdFieldNumber;
const int GCTriggerMotion::kTargetIdFieldNumber;
const int GCTriggerMotion::kTargetPosFieldNumber;
const int GCTriggerMotion::kTargetDirFieldNumber;
#endif  // !_MSC_VER

GCTriggerMotion::GCTriggerMotion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCTriggerMotion)
}

void GCTriggerMotion::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
  targetdir_ = const_cast< ::Vector3Info*>(&::Vector3Info::default_instance());
}

GCTriggerMotion::GCTriggerMotion(const GCTriggerMotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCTriggerMotion)
}

void GCTriggerMotion::SharedCtor() {
  _cached_size_ = 0;
  motionid_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  targetpos_ = NULL;
  targetdir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCTriggerMotion::~GCTriggerMotion() {
  // @@protoc_insertion_point(destructor:GCTriggerMotion)
  SharedDtor();
}

void GCTriggerMotion::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
    delete targetdir_;
  }
}

void GCTriggerMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCTriggerMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCTriggerMotion_descriptor_;
}

const GCTriggerMotion& GCTriggerMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCTriggerMotion* GCTriggerMotion::default_instance_ = NULL;

GCTriggerMotion* GCTriggerMotion::New() const {
  return new GCTriggerMotion;
}

void GCTriggerMotion::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    motionid_ = 0;
    targetid_ = GOOGLE_LONGLONG(0);
    if (has_targetpos()) {
      if (targetpos_ != NULL) targetpos_->::Vector3Info::Clear();
    }
    if (has_targetdir()) {
      if (targetdir_ != NULL) targetdir_->::Vector3Info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCTriggerMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCTriggerMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 motionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motionid_)));
          set_has_motionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetId;
        break;
      }

      // optional int64 targetId = 2;
      case 2: {
        if (tag == 16) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_targetPos;
        break;
      }

      // optional .Vector3Info targetPos = 3;
      case 3: {
        if (tag == 26) {
         parse_targetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetDir;
        break;
      }

      // optional .Vector3Info targetDir = 4;
      case 4: {
        if (tag == 34) {
         parse_targetDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetdir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCTriggerMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCTriggerMotion)
  return false;
#undef DO_
}

void GCTriggerMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCTriggerMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motionid(), output);
  }

  // optional int64 targetId = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetid(), output);
  }

  // optional .Vector3Info targetPos = 3;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->targetpos(), output);
  }

  // optional .Vector3Info targetDir = 4;
  if (has_targetdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetdir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCTriggerMotion)
}

::google::protobuf::uint8* GCTriggerMotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCTriggerMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motionid(), target);
  }

  // optional int64 targetId = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetid(), target);
  }

  // optional .Vector3Info targetPos = 3;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->targetpos(), target);
  }

  // optional .Vector3Info targetDir = 4;
  if (has_targetdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetdir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCTriggerMotion)
  return target;
}

int GCTriggerMotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 motionId = 1;
    if (has_motionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motionid());
    }

    // optional int64 targetId = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional .Vector3Info targetPos = 3;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

    // optional .Vector3Info targetDir = 4;
    if (has_targetdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetdir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCTriggerMotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCTriggerMotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCTriggerMotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCTriggerMotion::MergeFrom(const GCTriggerMotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motionid()) {
      set_motionid(from.motionid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetpos()) {
      mutable_targetpos()->::Vector3Info::MergeFrom(from.targetpos());
    }
    if (from.has_targetdir()) {
      mutable_targetdir()->::Vector3Info::MergeFrom(from.targetdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCTriggerMotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCTriggerMotion::CopyFrom(const GCTriggerMotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCTriggerMotion::IsInitialized() const {

  return true;
}

void GCTriggerMotion::Swap(GCTriggerMotion* other) {
  if (other != this) {
    std::swap(motionid_, other->motionid_);
    std::swap(targetid_, other->targetid_);
    std::swap(targetpos_, other->targetpos_);
    std::swap(targetdir_, other->targetdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCTriggerMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCTriggerMotion_descriptor_;
  metadata.reflection = GCTriggerMotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGUpSkill::kSkillIdFieldNumber;
const int CGUpSkill::kFlagallFieldNumber;
#endif  // !_MSC_VER

CGUpSkill::CGUpSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGUpSkill)
}

void CGUpSkill::InitAsDefaultInstance() {
}

CGUpSkill::CGUpSkill(const CGUpSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGUpSkill)
}

void CGUpSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  flagall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGUpSkill::~CGUpSkill() {
  // @@protoc_insertion_point(destructor:CGUpSkill)
  SharedDtor();
}

void CGUpSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGUpSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGUpSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGUpSkill_descriptor_;
}

const CGUpSkill& CGUpSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

CGUpSkill* CGUpSkill::default_instance_ = NULL;

CGUpSkill* CGUpSkill::New() const {
  return new CGUpSkill;
}

void CGUpSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGUpSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, flagall_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGUpSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGUpSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flagall;
        break;
      }

      // optional int32 flagall = 2;
      case 2: {
        if (tag == 16) {
         parse_flagall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagall_)));
          set_has_flagall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGUpSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGUpSkill)
  return false;
#undef DO_
}

void CGUpSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGUpSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 flagall = 2;
  if (has_flagall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flagall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGUpSkill)
}

::google::protobuf::uint8* CGUpSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGUpSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 flagall = 2;
  if (has_flagall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flagall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGUpSkill)
  return target;
}

int CGUpSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 flagall = 2;
    if (has_flagall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagall());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGUpSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGUpSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGUpSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGUpSkill::MergeFrom(const CGUpSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_flagall()) {
      set_flagall(from.flagall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGUpSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGUpSkill::CopyFrom(const CGUpSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGUpSkill::IsInitialized() const {

  return true;
}

void CGUpSkill::Swap(CGUpSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(flagall_, other->flagall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGUpSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGUpSkill_descriptor_;
  metadata.reflection = CGUpSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpSkillOK::kFlagFieldNumber;
const int GCUpSkillOK::kSkilldataFieldNumber;
const int GCUpSkillOK::kSkillFlagFieldNumber;
#endif  // !_MSC_VER

GCUpSkillOK::GCUpSkillOK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUpSkillOK)
}

void GCUpSkillOK::InitAsDefaultInstance() {
}

GCUpSkillOK::GCUpSkillOK(const GCUpSkillOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUpSkillOK)
}

void GCUpSkillOK::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  skillflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpSkillOK::~GCUpSkillOK() {
  // @@protoc_insertion_point(destructor:GCUpSkillOK)
  SharedDtor();
}

void GCUpSkillOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpSkillOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpSkillOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpSkillOK_descriptor_;
}

const GCUpSkillOK& GCUpSkillOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCUpSkillOK* GCUpSkillOK::default_instance_ = NULL;

GCUpSkillOK* GCUpSkillOK::New() const {
  return new GCUpSkillOK;
}

void GCUpSkillOK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCUpSkillOK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, skillflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpSkillOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUpSkillOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }

      // repeated .SkillItemData skilldata = 2;
      case 2: {
        if (tag == 18) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectTag(24)) goto parse_skillFlag;
        break;
      }

      // optional int32 skillFlag = 3;
      case 3: {
        if (tag == 24) {
         parse_skillFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillflag_)));
          set_has_skillflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUpSkillOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUpSkillOK)
  return false;
#undef DO_
}

void GCUpSkillOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUpSkillOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }

  // optional int32 skillFlag = 3;
  if (has_skillflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUpSkillOK)
}

::google::protobuf::uint8* GCUpSkillOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUpSkillOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }

  // optional int32 skillFlag = 3;
  if (has_skillflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUpSkillOK)
  return target;
}

int GCUpSkillOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 skillFlag = 3;
    if (has_skillflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillflag());
    }

  }
  // repeated .SkillItemData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpSkillOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpSkillOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpSkillOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpSkillOK::MergeFrom(const GCUpSkillOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_skillflag()) {
      set_skillflag(from.skillflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpSkillOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpSkillOK::CopyFrom(const GCUpSkillOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpSkillOK::IsInitialized() const {

  return true;
}

void GCUpSkillOK::Swap(GCUpSkillOK* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(skillflag_, other->skillflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpSkillOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpSkillOK_descriptor_;
  metadata.reflection = GCUpSkillOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChangeSkill::kSkillIdFieldNumber;
const int CGChangeSkill::kPositionFieldNumber;
#endif  // !_MSC_VER

CGChangeSkill::CGChangeSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGChangeSkill)
}

void CGChangeSkill::InitAsDefaultInstance() {
}

CGChangeSkill::CGChangeSkill(const CGChangeSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGChangeSkill)
}

void CGChangeSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChangeSkill::~CGChangeSkill() {
  // @@protoc_insertion_point(destructor:CGChangeSkill)
  SharedDtor();
}

void CGChangeSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGChangeSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChangeSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChangeSkill_descriptor_;
}

const CGChangeSkill& CGChangeSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

CGChangeSkill* CGChangeSkill::default_instance_ = NULL;

CGChangeSkill* CGChangeSkill::New() const {
  return new CGChangeSkill;
}

void CGChangeSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGChangeSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, position_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChangeSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGChangeSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional int32 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGChangeSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGChangeSkill)
  return false;
#undef DO_
}

void CGChangeSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGChangeSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGChangeSkill)
}

::google::protobuf::uint8* CGChangeSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGChangeSkill)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGChangeSkill)
  return target;
}

int CGChangeSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChangeSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChangeSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChangeSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChangeSkill::MergeFrom(const CGChangeSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChangeSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChangeSkill::CopyFrom(const CGChangeSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChangeSkill::IsInitialized() const {

  return true;
}

void CGChangeSkill::Swap(CGChangeSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChangeSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChangeSkill_descriptor_;
  metadata.reflection = CGChangeSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeSkillOK::kFlagFieldNumber;
const int GCChangeSkillOK::kSkilldataFieldNumber;
const int GCChangeSkillOK::kSkillFlagFieldNumber;
#endif  // !_MSC_VER

GCChangeSkillOK::GCChangeSkillOK()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeSkillOK)
}

void GCChangeSkillOK::InitAsDefaultInstance() {
}

GCChangeSkillOK::GCChangeSkillOK(const GCChangeSkillOK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeSkillOK)
}

void GCChangeSkillOK::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  skillflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeSkillOK::~GCChangeSkillOK() {
  // @@protoc_insertion_point(destructor:GCChangeSkillOK)
  SharedDtor();
}

void GCChangeSkillOK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCChangeSkillOK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeSkillOK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeSkillOK_descriptor_;
}

const GCChangeSkillOK& GCChangeSkillOK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCChangeSkillOK* GCChangeSkillOK::default_instance_ = NULL;

GCChangeSkillOK* GCChangeSkillOK::New() const {
  return new GCChangeSkillOK;
}

void GCChangeSkillOK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChangeSkillOK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(flag_, skillflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  skilldata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeSkillOK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeSkillOK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        break;
      }

      // repeated .SkillItemData skilldata = 2;
      case 2: {
        if (tag == 18) {
         parse_skilldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skilldata;
        if (input->ExpectTag(24)) goto parse_skillFlag;
        break;
      }

      // optional int32 skillFlag = 3;
      case 3: {
        if (tag == 24) {
         parse_skillFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillflag_)));
          set_has_skillflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeSkillOK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeSkillOK)
  return false;
#undef DO_
}

void GCChangeSkillOK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeSkillOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skilldata(i), output);
  }

  // optional int32 skillFlag = 3;
  if (has_skillflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeSkillOK)
}

::google::protobuf::uint8* GCChangeSkillOK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeSkillOK)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .SkillItemData skilldata = 2;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skilldata(i), target);
  }

  // optional int32 skillFlag = 3;
  if (has_skillflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeSkillOK)
  return target;
}

int GCChangeSkillOK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 skillFlag = 3;
    if (has_skillflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillflag());
    }

  }
  // repeated .SkillItemData skilldata = 2;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeSkillOK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeSkillOK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeSkillOK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeSkillOK::MergeFrom(const GCChangeSkillOK& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilldata_.MergeFrom(from.skilldata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_skillflag()) {
      set_skillflag(from.skillflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeSkillOK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeSkillOK::CopyFrom(const GCChangeSkillOK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeSkillOK::IsInitialized() const {

  return true;
}

void GCChangeSkillOK::Swap(GCChangeSkillOK* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(skillflag_, other->skillflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeSkillOK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeSkillOK_descriptor_;
  metadata.reflection = GCChangeSkillOK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffImpactInfo::kBuffGuidFieldNumber;
const int BuffImpactInfo::kImpactIdFieldNumber;
const int BuffImpactInfo::kRestTimeFieldNumber;
const int BuffImpactInfo::kParamsFieldNumber;
#endif  // !_MSC_VER

BuffImpactInfo::BuffImpactInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BuffImpactInfo)
}

void BuffImpactInfo::InitAsDefaultInstance() {
}

BuffImpactInfo::BuffImpactInfo(const BuffImpactInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BuffImpactInfo)
}

void BuffImpactInfo::SharedCtor() {
  _cached_size_ = 0;
  buffguid_ = GOOGLE_LONGLONG(0);
  impactid_ = 0;
  resttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffImpactInfo::~BuffImpactInfo() {
  // @@protoc_insertion_point(destructor:BuffImpactInfo)
  SharedDtor();
}

void BuffImpactInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffImpactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffImpactInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffImpactInfo_descriptor_;
}

const BuffImpactInfo& BuffImpactInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

BuffImpactInfo* BuffImpactInfo::default_instance_ = NULL;

BuffImpactInfo* BuffImpactInfo::New() const {
  return new BuffImpactInfo;
}

void BuffImpactInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffImpactInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buffguid_, resttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffImpactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BuffImpactInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 buffGuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buffguid_)));
          set_has_buffguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_impactId;
        break;
      }

      // optional int32 impactId = 2;
      case 2: {
        if (tag == 16) {
         parse_impactId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impactid_)));
          set_has_impactid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_restTime;
        break;
      }

      // optional int32 restTime = 3;
      case 3: {
        if (tag == 24) {
         parse_restTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resttime_)));
          set_has_resttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_params;
        break;
      }

      // repeated int32 params = 4;
      case 4: {
        if (tag == 32) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_params())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BuffImpactInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BuffImpactInfo)
  return false;
#undef DO_
}

void BuffImpactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BuffImpactInfo)
  // optional int64 buffGuid = 1;
  if (has_buffguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->buffguid(), output);
  }

  // optional int32 impactId = 2;
  if (has_impactid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->impactid(), output);
  }

  // optional int32 restTime = 3;
  if (has_resttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resttime(), output);
  }

  // repeated int32 params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BuffImpactInfo)
}

::google::protobuf::uint8* BuffImpactInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuffImpactInfo)
  // optional int64 buffGuid = 1;
  if (has_buffguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->buffguid(), target);
  }

  // optional int32 impactId = 2;
  if (has_impactid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->impactid(), target);
  }

  // optional int32 restTime = 3;
  if (has_resttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resttime(), target);
  }

  // repeated int32 params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuffImpactInfo)
  return target;
}

int BuffImpactInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 buffGuid = 1;
    if (has_buffguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buffguid());
    }

    // optional int32 impactId = 2;
    if (has_impactid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impactid());
    }

    // optional int32 restTime = 3;
    if (has_resttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resttime());
    }

  }
  // repeated int32 params = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffImpactInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffImpactInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffImpactInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffImpactInfo::MergeFrom(const BuffImpactInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffguid()) {
      set_buffguid(from.buffguid());
    }
    if (from.has_impactid()) {
      set_impactid(from.impactid());
    }
    if (from.has_resttime()) {
      set_resttime(from.resttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffImpactInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffImpactInfo::CopyFrom(const BuffImpactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffImpactInfo::IsInitialized() const {

  return true;
}

void BuffImpactInfo::Swap(BuffImpactInfo* other) {
  if (other != this) {
    std::swap(buffguid_, other->buffguid_);
    std::swap(impactid_, other->impactid_);
    std::swap(resttime_, other->resttime_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffImpactInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffImpactInfo_descriptor_;
  metadata.reflection = BuffImpactInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCAddBuffImpact::kObjIdFieldNumber;
const int GCAddBuffImpact::kBuffsFieldNumber;
#endif  // !_MSC_VER

GCAddBuffImpact::GCAddBuffImpact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCAddBuffImpact)
}

void GCAddBuffImpact::InitAsDefaultInstance() {
}

GCAddBuffImpact::GCAddBuffImpact(const GCAddBuffImpact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCAddBuffImpact)
}

void GCAddBuffImpact::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCAddBuffImpact::~GCAddBuffImpact() {
  // @@protoc_insertion_point(destructor:GCAddBuffImpact)
  SharedDtor();
}

void GCAddBuffImpact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCAddBuffImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCAddBuffImpact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCAddBuffImpact_descriptor_;
}

const GCAddBuffImpact& GCAddBuffImpact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCAddBuffImpact* GCAddBuffImpact::default_instance_ = NULL;

GCAddBuffImpact* GCAddBuffImpact::New() const {
  return new GCAddBuffImpact;
}

void GCAddBuffImpact::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCAddBuffImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCAddBuffImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffs;
        break;
      }

      // repeated .BuffImpactInfo buffs = 2;
      case 2: {
        if (tag == 18) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCAddBuffImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCAddBuffImpact)
  return false;
#undef DO_
}

void GCAddBuffImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCAddBuffImpact)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // repeated .BuffImpactInfo buffs = 2;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCAddBuffImpact)
}

::google::protobuf::uint8* GCAddBuffImpact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCAddBuffImpact)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // repeated .BuffImpactInfo buffs = 2;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCAddBuffImpact)
  return target;
}

int GCAddBuffImpact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  // repeated .BuffImpactInfo buffs = 2;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCAddBuffImpact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCAddBuffImpact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCAddBuffImpact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCAddBuffImpact::MergeFrom(const GCAddBuffImpact& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCAddBuffImpact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCAddBuffImpact::CopyFrom(const GCAddBuffImpact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCAddBuffImpact::IsInitialized() const {

  return true;
}

void GCAddBuffImpact::Swap(GCAddBuffImpact* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCAddBuffImpact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCAddBuffImpact_descriptor_;
  metadata.reflection = GCAddBuffImpact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDelBuffImpact::kObjIdFieldNumber;
const int GCDelBuffImpact::kBuffGuidsFieldNumber;
#endif  // !_MSC_VER

GCDelBuffImpact::GCDelBuffImpact()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCDelBuffImpact)
}

void GCDelBuffImpact::InitAsDefaultInstance() {
}

GCDelBuffImpact::GCDelBuffImpact(const GCDelBuffImpact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCDelBuffImpact)
}

void GCDelBuffImpact::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDelBuffImpact::~GCDelBuffImpact() {
  // @@protoc_insertion_point(destructor:GCDelBuffImpact)
  SharedDtor();
}

void GCDelBuffImpact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDelBuffImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDelBuffImpact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDelBuffImpact_descriptor_;
}

const GCDelBuffImpact& GCDelBuffImpact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCDelBuffImpact* GCDelBuffImpact::default_instance_ = NULL;

GCDelBuffImpact* GCDelBuffImpact::New() const {
  return new GCDelBuffImpact;
}

void GCDelBuffImpact::Clear() {
  objid_ = GOOGLE_LONGLONG(0);
  buffguids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDelBuffImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCDelBuffImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buffGuids;
        break;
      }

      // repeated int64 buffGuids = 2;
      case 2: {
        if (tag == 16) {
         parse_buffGuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_buffguids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_buffguids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buffGuids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCDelBuffImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCDelBuffImpact)
  return false;
#undef DO_
}

void GCDelBuffImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCDelBuffImpact)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // repeated int64 buffGuids = 2;
  for (int i = 0; i < this->buffguids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->buffguids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCDelBuffImpact)
}

::google::protobuf::uint8* GCDelBuffImpact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCDelBuffImpact)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // repeated int64 buffGuids = 2;
  for (int i = 0; i < this->buffguids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->buffguids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCDelBuffImpact)
  return target;
}

int GCDelBuffImpact::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

  }
  // repeated int64 buffGuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffguids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->buffguids(i));
    }
    total_size += 1 * this->buffguids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDelBuffImpact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDelBuffImpact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDelBuffImpact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDelBuffImpact::MergeFrom(const GCDelBuffImpact& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffguids_.MergeFrom(from.buffguids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDelBuffImpact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDelBuffImpact::CopyFrom(const GCDelBuffImpact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDelBuffImpact::IsInitialized() const {

  return true;
}

void GCDelBuffImpact::Swap(GCDelBuffImpact* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    buffguids_.Swap(&other->buffguids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDelBuffImpact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDelBuffImpact_descriptor_;
  metadata.reflection = GCDelBuffImpact_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGRefreshBuff::CGRefreshBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRefreshBuff)
}

void CGRefreshBuff::InitAsDefaultInstance() {
}

CGRefreshBuff::CGRefreshBuff(const CGRefreshBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRefreshBuff)
}

void CGRefreshBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRefreshBuff::~CGRefreshBuff() {
  // @@protoc_insertion_point(destructor:CGRefreshBuff)
  SharedDtor();
}

void CGRefreshBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRefreshBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRefreshBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRefreshBuff_descriptor_;
}

const CGRefreshBuff& CGRefreshBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

CGRefreshBuff* CGRefreshBuff::default_instance_ = NULL;

CGRefreshBuff* CGRefreshBuff::New() const {
  return new CGRefreshBuff;
}

void CGRefreshBuff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRefreshBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRefreshBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CGRefreshBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRefreshBuff)
  return false;
#undef DO_
}

void CGRefreshBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRefreshBuff)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRefreshBuff)
}

::google::protobuf::uint8* CGRefreshBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRefreshBuff)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRefreshBuff)
  return target;
}

int CGRefreshBuff::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRefreshBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRefreshBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRefreshBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRefreshBuff::MergeFrom(const CGRefreshBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRefreshBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRefreshBuff::CopyFrom(const CGRefreshBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRefreshBuff::IsInitialized() const {

  return true;
}

void CGRefreshBuff::Swap(CGRefreshBuff* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRefreshBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRefreshBuff_descriptor_;
  metadata.reflection = CGRefreshBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshBuffBack::kBuffsFieldNumber;
#endif  // !_MSC_VER

GCRefreshBuffBack::GCRefreshBuffBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshBuffBack)
}

void GCRefreshBuffBack::InitAsDefaultInstance() {
}

GCRefreshBuffBack::GCRefreshBuffBack(const GCRefreshBuffBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshBuffBack)
}

void GCRefreshBuffBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshBuffBack::~GCRefreshBuffBack() {
  // @@protoc_insertion_point(destructor:GCRefreshBuffBack)
  SharedDtor();
}

void GCRefreshBuffBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshBuffBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshBuffBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshBuffBack_descriptor_;
}

const GCRefreshBuffBack& GCRefreshBuffBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCRefreshBuffBack* GCRefreshBuffBack::default_instance_ = NULL;

GCRefreshBuffBack* GCRefreshBuffBack::New() const {
  return new GCRefreshBuffBack;
}

void GCRefreshBuffBack::Clear() {
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshBuffBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshBuffBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BuffImpactInfo buffs = 1;
      case 1: {
        if (tag == 10) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshBuffBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshBuffBack)
  return false;
#undef DO_
}

void GCRefreshBuffBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshBuffBack)
  // repeated .BuffImpactInfo buffs = 1;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshBuffBack)
}

::google::protobuf::uint8* GCRefreshBuffBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshBuffBack)
  // repeated .BuffImpactInfo buffs = 1;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshBuffBack)
  return target;
}

int GCRefreshBuffBack::ByteSize() const {
  int total_size = 0;

  // repeated .BuffImpactInfo buffs = 1;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshBuffBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshBuffBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshBuffBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshBuffBack::MergeFrom(const GCRefreshBuffBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshBuffBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshBuffBack::CopyFrom(const GCRefreshBuffBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshBuffBack::IsInitialized() const {

  return true;
}

void GCRefreshBuffBack::Swap(GCRefreshBuffBack* other) {
  if (other != this) {
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshBuffBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshBuffBack_descriptor_;
  metadata.reflection = GCRefreshBuffBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombatResult::kTypeFieldNumber;
const int CombatResult::kValueFieldNumber;
#endif  // !_MSC_VER

CombatResult::CombatResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CombatResult)
}

void CombatResult::InitAsDefaultInstance() {
}

CombatResult::CombatResult(const CombatResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CombatResult)
}

void CombatResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombatResult::~CombatResult() {
  // @@protoc_insertion_point(destructor:CombatResult)
  SharedDtor();
}

void CombatResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombatResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombatResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombatResult_descriptor_;
}

const CombatResult& CombatResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

CombatResult* CombatResult::default_instance_ = NULL;

CombatResult* CombatResult::New() const {
  return new CombatResult;
}

void CombatResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CombatResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombatResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CombatResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CombatResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CombatResult)
  return false;
#undef DO_
}

void CombatResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CombatResult)
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CombatResult)
}

::google::protobuf::uint8* CombatResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CombatResult)
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CombatResult)
  return target;
}

int CombatResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombatResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombatResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombatResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombatResult::MergeFrom(const CombatResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombatResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombatResult::CopyFrom(const CombatResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombatResult::IsInitialized() const {

  return true;
}

void CombatResult::Swap(CombatResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombatResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombatResult_descriptor_;
  metadata.reflection = CombatResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCCombatResult::kObjIdFieldNumber;
const int GCCombatResult::kResultFieldNumber;
const int GCCombatResult::kSrcObjIdFieldNumber;
#endif  // !_MSC_VER

GCCombatResult::GCCombatResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCCombatResult)
}

void GCCombatResult::InitAsDefaultInstance() {
}

GCCombatResult::GCCombatResult(const GCCombatResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCCombatResult)
}

void GCCombatResult::SharedCtor() {
  _cached_size_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  srcobjid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCCombatResult::~GCCombatResult() {
  // @@protoc_insertion_point(destructor:GCCombatResult)
  SharedDtor();
}

void GCCombatResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCCombatResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCCombatResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCCombatResult_descriptor_;
}

const GCCombatResult& GCCombatResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCCombatResult* GCCombatResult::default_instance_ = NULL;

GCCombatResult* GCCombatResult::New() const {
  return new GCCombatResult;
}

void GCCombatResult::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    objid_ = GOOGLE_LONGLONG(0);
    srcobjid_ = GOOGLE_LONGLONG(0);
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCCombatResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCCombatResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 objId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .CombatResult result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(24)) goto parse_srcObjId;
        break;
      }

      // optional int64 srcObjId = 3;
      case 3: {
        if (tag == 24) {
         parse_srcObjId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &srcobjid_)));
          set_has_srcobjid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCCombatResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCCombatResult)
  return false;
#undef DO_
}

void GCCombatResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCCombatResult)
  // optional int64 objId = 1;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->objid(), output);
  }

  // repeated .CombatResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  // optional int64 srcObjId = 3;
  if (has_srcobjid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->srcobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCCombatResult)
}

::google::protobuf::uint8* GCCombatResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCCombatResult)
  // optional int64 objId = 1;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->objid(), target);
  }

  // repeated .CombatResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  // optional int64 srcObjId = 3;
  if (has_srcobjid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->srcobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCCombatResult)
  return target;
}

int GCCombatResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 objId = 1;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional int64 srcObjId = 3;
    if (has_srcobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->srcobjid());
    }

  }
  // repeated .CombatResult result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCCombatResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCCombatResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCCombatResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCCombatResult::MergeFrom(const GCCombatResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_srcobjid()) {
      set_srcobjid(from.srcobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCCombatResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCCombatResult::CopyFrom(const GCCombatResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCCombatResult::IsInitialized() const {

  return true;
}

void GCCombatResult::Swap(GCCombatResult* other) {
  if (other != this) {
    std::swap(objid_, other->objid_);
    result_.Swap(&other->result_);
    std::swap(srcobjid_, other->srcobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCCombatResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCCombatResult_descriptor_;
  metadata.reflection = GCCombatResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCDInfo::kSkillIdFieldNumber;
const int SkillCDInfo::kCdEndTimeFieldNumber;
#endif  // !_MSC_VER

SkillCDInfo::SkillCDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SkillCDInfo)
}

void SkillCDInfo::InitAsDefaultInstance() {
}

SkillCDInfo::SkillCDInfo(const SkillCDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SkillCDInfo)
}

void SkillCDInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  cdendtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCDInfo::~SkillCDInfo() {
  // @@protoc_insertion_point(destructor:SkillCDInfo)
  SharedDtor();
}

void SkillCDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillCDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillCDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillCDInfo_descriptor_;
}

const SkillCDInfo& SkillCDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

SkillCDInfo* SkillCDInfo::default_instance_ = NULL;

SkillCDInfo* SkillCDInfo::New() const {
  return new SkillCDInfo;
}

void SkillCDInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillCDInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cdendtime_, skillid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillCDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SkillCDInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cdEndTime;
        break;
      }

      // optional int64 cdEndTime = 2;
      case 2: {
        if (tag == 16) {
         parse_cdEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cdendtime_)));
          set_has_cdendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SkillCDInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SkillCDInfo)
  return false;
#undef DO_
}

void SkillCDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SkillCDInfo)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int64 cdEndTime = 2;
  if (has_cdendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cdendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SkillCDInfo)
}

::google::protobuf::uint8* SkillCDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SkillCDInfo)
  // optional int32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int64 cdEndTime = 2;
  if (has_cdendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cdendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SkillCDInfo)
  return target;
}

int SkillCDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int64 cdEndTime = 2;
    if (has_cdendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cdendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillCDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillCDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillCDInfo::MergeFrom(const SkillCDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_cdendtime()) {
      set_cdendtime(from.cdendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillCDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillCDInfo::CopyFrom(const SkillCDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCDInfo::IsInitialized() const {

  return true;
}

void SkillCDInfo::Swap(SkillCDInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(cdendtime_, other->cdendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillCDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillCDInfo_descriptor_;
  metadata.reflection = SkillCDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshSkillCDInfo::kCdInfoFieldNumber;
#endif  // !_MSC_VER

GCRefreshSkillCDInfo::GCRefreshSkillCDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshSkillCDInfo)
}

void GCRefreshSkillCDInfo::InitAsDefaultInstance() {
}

GCRefreshSkillCDInfo::GCRefreshSkillCDInfo(const GCRefreshSkillCDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshSkillCDInfo)
}

void GCRefreshSkillCDInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshSkillCDInfo::~GCRefreshSkillCDInfo() {
  // @@protoc_insertion_point(destructor:GCRefreshSkillCDInfo)
  SharedDtor();
}

void GCRefreshSkillCDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshSkillCDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshSkillCDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshSkillCDInfo_descriptor_;
}

const GCRefreshSkillCDInfo& GCRefreshSkillCDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCRefreshSkillCDInfo* GCRefreshSkillCDInfo::default_instance_ = NULL;

GCRefreshSkillCDInfo* GCRefreshSkillCDInfo::New() const {
  return new GCRefreshSkillCDInfo;
}

void GCRefreshSkillCDInfo::Clear() {
  cdinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshSkillCDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshSkillCDInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SkillCDInfo cdInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_cdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cdinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cdInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshSkillCDInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshSkillCDInfo)
  return false;
#undef DO_
}

void GCRefreshSkillCDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshSkillCDInfo)
  // repeated .SkillCDInfo cdInfo = 1;
  for (int i = 0; i < this->cdinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshSkillCDInfo)
}

::google::protobuf::uint8* GCRefreshSkillCDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshSkillCDInfo)
  // repeated .SkillCDInfo cdInfo = 1;
  for (int i = 0; i < this->cdinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cdinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshSkillCDInfo)
  return target;
}

int GCRefreshSkillCDInfo::ByteSize() const {
  int total_size = 0;

  // repeated .SkillCDInfo cdInfo = 1;
  total_size += 1 * this->cdinfo_size();
  for (int i = 0; i < this->cdinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cdinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshSkillCDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshSkillCDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshSkillCDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshSkillCDInfo::MergeFrom(const GCRefreshSkillCDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdinfo_.MergeFrom(from.cdinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshSkillCDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshSkillCDInfo::CopyFrom(const GCRefreshSkillCDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshSkillCDInfo::IsInitialized() const {

  return true;
}

void GCRefreshSkillCDInfo::Swap(GCRefreshSkillCDInfo* other) {
  if (other != this) {
    cdinfo_.Swap(&other->cdinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshSkillCDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshSkillCDInfo_descriptor_;
  metadata.reflection = GCRefreshSkillCDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUseSkillResult::kFlagFieldNumber;
const int GCUseSkillResult::kCdInfoFieldNumber;
#endif  // !_MSC_VER

GCUseSkillResult::GCUseSkillResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCUseSkillResult)
}

void GCUseSkillResult::InitAsDefaultInstance() {
  cdinfo_ = const_cast< ::SkillCDInfo*>(&::SkillCDInfo::default_instance());
}

GCUseSkillResult::GCUseSkillResult(const GCUseSkillResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCUseSkillResult)
}

void GCUseSkillResult::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  cdinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUseSkillResult::~GCUseSkillResult() {
  // @@protoc_insertion_point(destructor:GCUseSkillResult)
  SharedDtor();
}

void GCUseSkillResult::SharedDtor() {
  if (this != default_instance_) {
    delete cdinfo_;
  }
}

void GCUseSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUseSkillResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUseSkillResult_descriptor_;
}

const GCUseSkillResult& GCUseSkillResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCUseSkillResult* GCUseSkillResult::default_instance_ = NULL;

GCUseSkillResult* GCUseSkillResult::New() const {
  return new GCUseSkillResult;
}

void GCUseSkillResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    flag_ = 0;
    if (has_cdinfo()) {
      if (cdinfo_ != NULL) cdinfo_->::SkillCDInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUseSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCUseSkillResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cdInfo;
        break;
      }

      // optional .SkillCDInfo cdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_cdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCUseSkillResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCUseSkillResult)
  return false;
#undef DO_
}

void GCUseSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCUseSkillResult)
  // optional int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional .SkillCDInfo cdInfo = 2;
  if (has_cdinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cdinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCUseSkillResult)
}

::google::protobuf::uint8* GCUseSkillResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCUseSkillResult)
  // optional int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional .SkillCDInfo cdInfo = 2;
  if (has_cdinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cdinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCUseSkillResult)
  return target;
}

int GCUseSkillResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional .SkillCDInfo cdInfo = 2;
    if (has_cdinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUseSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUseSkillResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUseSkillResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUseSkillResult::MergeFrom(const GCUseSkillResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_cdinfo()) {
      mutable_cdinfo()->::SkillCDInfo::MergeFrom(from.cdinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUseSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUseSkillResult::CopyFrom(const GCUseSkillResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUseSkillResult::IsInitialized() const {

  return true;
}

void GCUseSkillResult::Swap(GCUseSkillResult* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(cdinfo_, other->cdinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUseSkillResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUseSkillResult_descriptor_;
  metadata.reflection = GCUseSkillResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChangeMotion::kMotionIdFieldNumber;
const int GCChangeMotion::kObjIdFieldNumber;
const int GCChangeMotion::kEffectIdFieldNumber;
const int GCChangeMotion::kAtkIdFieldNumber;
#endif  // !_MSC_VER

GCChangeMotion::GCChangeMotion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCChangeMotion)
}

void GCChangeMotion::InitAsDefaultInstance() {
}

GCChangeMotion::GCChangeMotion(const GCChangeMotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCChangeMotion)
}

void GCChangeMotion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  motionid_ = 0;
  objid_ = GOOGLE_LONGLONG(0);
  effectid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChangeMotion::~GCChangeMotion() {
  // @@protoc_insertion_point(destructor:GCChangeMotion)
  SharedDtor();
}

void GCChangeMotion::SharedDtor() {
  if (effectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectid_;
  }
  if (this != default_instance_) {
  }
}

void GCChangeMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChangeMotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChangeMotion_descriptor_;
}

const GCChangeMotion& GCChangeMotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillMessage_2eproto();
  return *default_instance_;
}

GCChangeMotion* GCChangeMotion::default_instance_ = NULL;

GCChangeMotion* GCChangeMotion::New() const {
  return new GCChangeMotion;
}

void GCChangeMotion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCChangeMotion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(atkid_, motionid_);
    objid_ = GOOGLE_LONGLONG(0);
    if (has_effectid()) {
      if (effectid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effectid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChangeMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCChangeMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 motionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motionid_)));
          set_has_motionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_objId;
        break;
      }

      // optional int64 objId = 2;
      case 2: {
        if (tag == 16) {
         parse_objId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &objid_)));
          set_has_objid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_effectId;
        break;
      }

      // optional string effectId = 3;
      case 3: {
        if (tag == 26) {
         parse_effectId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effectid().data(), this->effectid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effectid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_atkId;
        break;
      }

      // optional int64 atkId = 4;
      case 4: {
        if (tag == 32) {
         parse_atkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atkid_)));
          set_has_atkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCChangeMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCChangeMotion)
  return false;
#undef DO_
}

void GCChangeMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCChangeMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motionid(), output);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->objid(), output);
  }

  // optional string effectId = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectid().data(), this->effectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->effectid(), output);
  }

  // optional int64 atkId = 4;
  if (has_atkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->atkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCChangeMotion)
}

::google::protobuf::uint8* GCChangeMotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCChangeMotion)
  // optional int32 motionId = 1;
  if (has_motionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motionid(), target);
  }

  // optional int64 objId = 2;
  if (has_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->objid(), target);
  }

  // optional string effectId = 3;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectid().data(), this->effectid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->effectid(), target);
  }

  // optional int64 atkId = 4;
  if (has_atkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->atkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCChangeMotion)
  return target;
}

int GCChangeMotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 motionId = 1;
    if (has_motionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motionid());
    }

    // optional int64 objId = 2;
    if (has_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->objid());
    }

    // optional string effectId = 3;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectid());
    }

    // optional int64 atkId = 4;
    if (has_atkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChangeMotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChangeMotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChangeMotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChangeMotion::MergeFrom(const GCChangeMotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motionid()) {
      set_motionid(from.motionid());
    }
    if (from.has_objid()) {
      set_objid(from.objid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_atkid()) {
      set_atkid(from.atkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChangeMotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChangeMotion::CopyFrom(const GCChangeMotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChangeMotion::IsInitialized() const {

  return true;
}

void GCChangeMotion::Swap(GCChangeMotion* other) {
  if (other != this) {
    std::swap(motionid_, other->motionid_);
    std::swap(objid_, other->objid_);
    std::swap(effectid_, other->effectid_);
    std::swap(atkid_, other->atkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChangeMotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChangeMotion_descriptor_;
  metadata.reflection = GCChangeMotion_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
