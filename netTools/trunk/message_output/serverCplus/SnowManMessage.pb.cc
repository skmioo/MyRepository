// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SnowManMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SnowManMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CGEnterSnowInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGEnterSnowInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshSnowBossActitivy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshSnowBossActitivy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGRefreshSnowActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGRefreshSnowActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshFightRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshFightRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankRewardsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankRewardsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRefreshRankRewardsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRefreshRankRewardsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOperSnowBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOperSnowBoss_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SnowManMessage_2eproto() {
  protobuf_AddDesc_SnowManMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SnowManMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CGEnterSnowInstance_descriptor_ = file->message_type(0);
  static const int CGEnterSnowInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSnowInstance, snowmanguid_),
  };
  CGEnterSnowInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGEnterSnowInstance_descriptor_,
      CGEnterSnowInstance::default_instance_,
      CGEnterSnowInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSnowInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGEnterSnowInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGEnterSnowInstance));
  GCRefreshSnowBossActitivy_descriptor_ = file->message_type(1);
  static const int GCRefreshSnowBossActitivy_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, ruleexplain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, buttonname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, playerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, needclearcache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, canentertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, scale_),
  };
  GCRefreshSnowBossActitivy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshSnowBossActitivy_descriptor_,
      GCRefreshSnowBossActitivy::default_instance_,
      GCRefreshSnowBossActitivy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshSnowBossActitivy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshSnowBossActitivy));
  CGRefreshSnowActivityData_descriptor_ = file->message_type(2);
  static const int CGRefreshSnowActivityData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshSnowActivityData, type_),
  };
  CGRefreshSnowActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGRefreshSnowActivityData_descriptor_,
      CGRefreshSnowActivityData::default_instance_,
      CGRefreshSnowActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshSnowActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGRefreshSnowActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGRefreshSnowActivityData));
  FightRankInfo_descriptor_ = file->message_type(3);
  static const int FightRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRankInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRankInfo, damage_),
  };
  FightRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightRankInfo_descriptor_,
      FightRankInfo::default_instance_,
      FightRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightRankInfo));
  GCRefreshFightRankList_descriptor_ = file->message_type(4);
  static const int GCRefreshFightRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshFightRankList, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshFightRankList, mydamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshFightRankList, ranklist_),
  };
  GCRefreshFightRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshFightRankList_descriptor_,
      GCRefreshFightRankList::default_instance_,
      GCRefreshFightRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshFightRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshFightRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshFightRankList));
  RankRewardsInfo_descriptor_ = file->message_type(5);
  static const int RankRewardsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardsInfo, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardsInfo, rewards_),
  };
  RankRewardsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankRewardsInfo_descriptor_,
      RankRewardsInfo::default_instance_,
      RankRewardsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankRewardsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankRewardsInfo));
  GCRefreshRankRewardsList_descriptor_ = file->message_type(6);
  static const int GCRefreshRankRewardsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRankRewardsList, rewardlist_),
  };
  GCRefreshRankRewardsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCRefreshRankRewardsList_descriptor_,
      GCRefreshRankRewardsList::default_instance_,
      GCRefreshRankRewardsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRankRewardsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRefreshRankRewardsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCRefreshRankRewardsList));
  CGOperSnowBoss_descriptor_ = file->message_type(7);
  static const int CGOperSnowBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOperSnowBoss, oper_),
  };
  CGOperSnowBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOperSnowBoss_descriptor_,
      CGOperSnowBoss::default_instance_,
      CGOperSnowBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOperSnowBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOperSnowBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOperSnowBoss));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SnowManMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGEnterSnowInstance_descriptor_, &CGEnterSnowInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshSnowBossActitivy_descriptor_, &GCRefreshSnowBossActitivy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGRefreshSnowActivityData_descriptor_, &CGRefreshSnowActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightRankInfo_descriptor_, &FightRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshFightRankList_descriptor_, &GCRefreshFightRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankRewardsInfo_descriptor_, &RankRewardsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCRefreshRankRewardsList_descriptor_, &GCRefreshRankRewardsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOperSnowBoss_descriptor_, &CGOperSnowBoss::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SnowManMessage_2eproto() {
  delete CGEnterSnowInstance::default_instance_;
  delete CGEnterSnowInstance_reflection_;
  delete GCRefreshSnowBossActitivy::default_instance_;
  delete GCRefreshSnowBossActitivy_reflection_;
  delete CGRefreshSnowActivityData::default_instance_;
  delete CGRefreshSnowActivityData_reflection_;
  delete FightRankInfo::default_instance_;
  delete FightRankInfo_reflection_;
  delete GCRefreshFightRankList::default_instance_;
  delete GCRefreshFightRankList_reflection_;
  delete RankRewardsInfo::default_instance_;
  delete RankRewardsInfo_reflection_;
  delete GCRefreshRankRewardsList::default_instance_;
  delete GCRefreshRankRewardsList_reflection_;
  delete CGOperSnowBoss::default_instance_;
  delete CGOperSnowBoss_reflection_;
}

void protobuf_AddDesc_SnowManMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_InnerMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SnowManMessage.proto\032\022InnerMessage.pro"
    "to\"*\n\023CGEnterSnowInstance\022\023\n\013snowManGuid"
    "\030\001 \001(\003\"\366\001\n\031GCRefreshSnowBossActitivy\022\014\n\004"
    "name\030\001 \001(\t\022\023\n\013ruleExplain\030\002 \001(\t\022\014\n\004icon\030"
    "\003 \001(\t\022\022\n\nbuttonName\030\004 \001(\t\022\r\n\005level\030\005 \001(\005"
    "\022\024\n\014playerStatus\030\006 \001(\005\022\026\n\016needClearCache"
    "\030\007 \001(\005\022\024\n\014canEnterTime\030\010 \001(\003\022\016\n\006bossid\030\t"
    " \001(\005\022\020\n\010position\030\n \001(\t\022\020\n\010rotation\030\013 \001(\t"
    "\022\r\n\005scale\030\014 \001(\t\")\n\031CGRefreshSnowActivity"
    "Data\022\014\n\004type\030\001 \001(\005\"A\n\rFightRankInfo\022\014\n\004r"
    "ank\030\001 \001(\005\022\022\n\nplayerName\030\002 \001(\t\022\016\n\006damage\030"
    "\003 \001(\005\"\\\n\026GCRefreshFightRankList\022\016\n\006myRan"
    "k\030\001 \001(\005\022\020\n\010myDamage\030\002 \001(\005\022 \n\010rankList\030\003 "
    "\003(\0132\016.FightRankInfo\"<\n\017RankRewardsInfo\022\r"
    "\n\005ranks\030\001 \001(\t\022\032\n\007rewards\030\002 \003(\0132\t.Iteminf"
    "o\"@\n\030GCRefreshRankRewardsList\022$\n\nrewardL"
    "ist\030\001 \003(\0132\020.RankRewardsInfo\"\036\n\016CGOperSno"
    "wBoss\022\014\n\004oper\030\001 \001(\005B\031\n\027com.mile.common.m"
    "essage", 726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SnowManMessage.proto", &protobuf_RegisterTypes);
  CGEnterSnowInstance::default_instance_ = new CGEnterSnowInstance();
  GCRefreshSnowBossActitivy::default_instance_ = new GCRefreshSnowBossActitivy();
  CGRefreshSnowActivityData::default_instance_ = new CGRefreshSnowActivityData();
  FightRankInfo::default_instance_ = new FightRankInfo();
  GCRefreshFightRankList::default_instance_ = new GCRefreshFightRankList();
  RankRewardsInfo::default_instance_ = new RankRewardsInfo();
  GCRefreshRankRewardsList::default_instance_ = new GCRefreshRankRewardsList();
  CGOperSnowBoss::default_instance_ = new CGOperSnowBoss();
  CGEnterSnowInstance::default_instance_->InitAsDefaultInstance();
  GCRefreshSnowBossActitivy::default_instance_->InitAsDefaultInstance();
  CGRefreshSnowActivityData::default_instance_->InitAsDefaultInstance();
  FightRankInfo::default_instance_->InitAsDefaultInstance();
  GCRefreshFightRankList::default_instance_->InitAsDefaultInstance();
  RankRewardsInfo::default_instance_->InitAsDefaultInstance();
  GCRefreshRankRewardsList::default_instance_->InitAsDefaultInstance();
  CGOperSnowBoss::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SnowManMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SnowManMessage_2eproto {
  StaticDescriptorInitializer_SnowManMessage_2eproto() {
    protobuf_AddDesc_SnowManMessage_2eproto();
  }
} static_descriptor_initializer_SnowManMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGEnterSnowInstance::kSnowManGuidFieldNumber;
#endif  // !_MSC_VER

CGEnterSnowInstance::CGEnterSnowInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGEnterSnowInstance)
}

void CGEnterSnowInstance::InitAsDefaultInstance() {
}

CGEnterSnowInstance::CGEnterSnowInstance(const CGEnterSnowInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGEnterSnowInstance)
}

void CGEnterSnowInstance::SharedCtor() {
  _cached_size_ = 0;
  snowmanguid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGEnterSnowInstance::~CGEnterSnowInstance() {
  // @@protoc_insertion_point(destructor:CGEnterSnowInstance)
  SharedDtor();
}

void CGEnterSnowInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGEnterSnowInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGEnterSnowInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGEnterSnowInstance_descriptor_;
}

const CGEnterSnowInstance& CGEnterSnowInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

CGEnterSnowInstance* CGEnterSnowInstance::default_instance_ = NULL;

CGEnterSnowInstance* CGEnterSnowInstance::New() const {
  return new CGEnterSnowInstance;
}

void CGEnterSnowInstance::Clear() {
  snowmanguid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGEnterSnowInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGEnterSnowInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 snowManGuid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &snowmanguid_)));
          set_has_snowmanguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGEnterSnowInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGEnterSnowInstance)
  return false;
#undef DO_
}

void CGEnterSnowInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGEnterSnowInstance)
  // optional int64 snowManGuid = 1;
  if (has_snowmanguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->snowmanguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGEnterSnowInstance)
}

::google::protobuf::uint8* CGEnterSnowInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGEnterSnowInstance)
  // optional int64 snowManGuid = 1;
  if (has_snowmanguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->snowmanguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGEnterSnowInstance)
  return target;
}

int CGEnterSnowInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 snowManGuid = 1;
    if (has_snowmanguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->snowmanguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGEnterSnowInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGEnterSnowInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGEnterSnowInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGEnterSnowInstance::MergeFrom(const CGEnterSnowInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snowmanguid()) {
      set_snowmanguid(from.snowmanguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGEnterSnowInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGEnterSnowInstance::CopyFrom(const CGEnterSnowInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGEnterSnowInstance::IsInitialized() const {

  return true;
}

void CGEnterSnowInstance::Swap(CGEnterSnowInstance* other) {
  if (other != this) {
    std::swap(snowmanguid_, other->snowmanguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGEnterSnowInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGEnterSnowInstance_descriptor_;
  metadata.reflection = CGEnterSnowInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshSnowBossActitivy::kNameFieldNumber;
const int GCRefreshSnowBossActitivy::kRuleExplainFieldNumber;
const int GCRefreshSnowBossActitivy::kIconFieldNumber;
const int GCRefreshSnowBossActitivy::kButtonNameFieldNumber;
const int GCRefreshSnowBossActitivy::kLevelFieldNumber;
const int GCRefreshSnowBossActitivy::kPlayerStatusFieldNumber;
const int GCRefreshSnowBossActitivy::kNeedClearCacheFieldNumber;
const int GCRefreshSnowBossActitivy::kCanEnterTimeFieldNumber;
const int GCRefreshSnowBossActitivy::kBossidFieldNumber;
const int GCRefreshSnowBossActitivy::kPositionFieldNumber;
const int GCRefreshSnowBossActitivy::kRotationFieldNumber;
const int GCRefreshSnowBossActitivy::kScaleFieldNumber;
#endif  // !_MSC_VER

GCRefreshSnowBossActitivy::GCRefreshSnowBossActitivy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshSnowBossActitivy)
}

void GCRefreshSnowBossActitivy::InitAsDefaultInstance() {
}

GCRefreshSnowBossActitivy::GCRefreshSnowBossActitivy(const GCRefreshSnowBossActitivy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshSnowBossActitivy)
}

void GCRefreshSnowBossActitivy::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ruleexplain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buttonname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  playerstatus_ = 0;
  needclearcache_ = 0;
  canentertime_ = GOOGLE_LONGLONG(0);
  bossid_ = 0;
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rotation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshSnowBossActitivy::~GCRefreshSnowBossActitivy() {
  // @@protoc_insertion_point(destructor:GCRefreshSnowBossActitivy)
  SharedDtor();
}

void GCRefreshSnowBossActitivy::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (ruleexplain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ruleexplain_;
  }
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (buttonname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buttonname_;
  }
  if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete position_;
  }
  if (rotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rotation_;
  }
  if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scale_;
  }
  if (this != default_instance_) {
  }
}

void GCRefreshSnowBossActitivy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshSnowBossActitivy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshSnowBossActitivy_descriptor_;
}

const GCRefreshSnowBossActitivy& GCRefreshSnowBossActitivy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

GCRefreshSnowBossActitivy* GCRefreshSnowBossActitivy::default_instance_ = NULL;

GCRefreshSnowBossActitivy* GCRefreshSnowBossActitivy::New() const {
  return new GCRefreshSnowBossActitivy;
}

void GCRefreshSnowBossActitivy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRefreshSnowBossActitivy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, needclearcache_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_ruleexplain()) {
      if (ruleexplain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ruleexplain_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_buttonname()) {
      if (buttonname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buttonname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    bossid_ = 0;
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        position_->clear();
      }
    }
    if (has_rotation()) {
      if (rotation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rotation_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scale_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshSnowBossActitivy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshSnowBossActitivy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ruleExplain;
        break;
      }

      // optional string ruleExplain = 2;
      case 2: {
        if (tag == 18) {
         parse_ruleExplain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ruleexplain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ruleexplain().data(), this->ruleexplain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ruleexplain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_icon;
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (tag == 26) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buttonName;
        break;
      }

      // optional string buttonName = 4;
      case 4: {
        if (tag == 34) {
         parse_buttonName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buttonname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buttonname().data(), this->buttonname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buttonname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_playerStatus;
        break;
      }

      // optional int32 playerStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_playerStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerstatus_)));
          set_has_playerstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_needClearCache;
        break;
      }

      // optional int32 needClearCache = 7;
      case 7: {
        if (tag == 56) {
         parse_needClearCache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needclearcache_)));
          set_has_needclearcache();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_canEnterTime;
        break;
      }

      // optional int64 canEnterTime = 8;
      case 8: {
        if (tag == 64) {
         parse_canEnterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &canentertime_)));
          set_has_canentertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bossid;
        break;
      }

      // optional int32 bossid = 9;
      case 9: {
        if (tag == 72) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_position;
        break;
      }

      // optional string position = 10;
      case 10: {
        if (tag == 82) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rotation;
        break;
      }

      // optional string rotation = 11;
      case 11: {
        if (tag == 90) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rotation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rotation().data(), this->rotation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rotation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_scale;
        break;
      }

      // optional string scale = 12;
      case 12: {
        if (tag == 98) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scale");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshSnowBossActitivy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshSnowBossActitivy)
  return false;
#undef DO_
}

void GCRefreshSnowBossActitivy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshSnowBossActitivy)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ruleExplain = 2;
  if (has_ruleexplain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ruleexplain().data(), this->ruleexplain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ruleexplain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ruleexplain(), output);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon(), output);
  }

  // optional string buttonName = 4;
  if (has_buttonname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttonname().data(), this->buttonname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buttonname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->buttonname(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 playerStatus = 6;
  if (has_playerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerstatus(), output);
  }

  // optional int32 needClearCache = 7;
  if (has_needclearcache()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->needclearcache(), output);
  }

  // optional int64 canEnterTime = 8;
  if (has_canentertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->canentertime(), output);
  }

  // optional int32 bossid = 9;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bossid(), output);
  }

  // optional string position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->position(), output);
  }

  // optional string rotation = 11;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotation().data(), this->rotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->rotation(), output);
  }

  // optional string scale = 12;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshSnowBossActitivy)
}

::google::protobuf::uint8* GCRefreshSnowBossActitivy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshSnowBossActitivy)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ruleExplain = 2;
  if (has_ruleexplain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ruleexplain().data(), this->ruleexplain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ruleexplain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ruleexplain(), target);
  }

  // optional string icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional string buttonName = 4;
  if (has_buttonname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buttonname().data(), this->buttonname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buttonname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->buttonname(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 playerStatus = 6;
  if (has_playerstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerstatus(), target);
  }

  // optional int32 needClearCache = 7;
  if (has_needclearcache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->needclearcache(), target);
  }

  // optional int64 canEnterTime = 8;
  if (has_canentertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->canentertime(), target);
  }

  // optional int32 bossid = 9;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bossid(), target);
  }

  // optional string position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->position(), target);
  }

  // optional string rotation = 11;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rotation().data(), this->rotation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rotation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rotation(), target);
  }

  // optional string scale = 12;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scale");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshSnowBossActitivy)
  return target;
}

int GCRefreshSnowBossActitivy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ruleExplain = 2;
    if (has_ruleexplain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ruleexplain());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string buttonName = 4;
    if (has_buttonname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buttonname());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 playerStatus = 6;
    if (has_playerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerstatus());
    }

    // optional int32 needClearCache = 7;
    if (has_needclearcache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needclearcache());
    }

    // optional int64 canEnterTime = 8;
    if (has_canentertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->canentertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bossid = 9;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional string position = 10;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional string rotation = 11;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rotation());
    }

    // optional string scale = 12;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshSnowBossActitivy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshSnowBossActitivy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshSnowBossActitivy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshSnowBossActitivy::MergeFrom(const GCRefreshSnowBossActitivy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ruleexplain()) {
      set_ruleexplain(from.ruleexplain());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_buttonname()) {
      set_buttonname(from.buttonname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_playerstatus()) {
      set_playerstatus(from.playerstatus());
    }
    if (from.has_needclearcache()) {
      set_needclearcache(from.needclearcache());
    }
    if (from.has_canentertime()) {
      set_canentertime(from.canentertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshSnowBossActitivy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshSnowBossActitivy::CopyFrom(const GCRefreshSnowBossActitivy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshSnowBossActitivy::IsInitialized() const {

  return true;
}

void GCRefreshSnowBossActitivy::Swap(GCRefreshSnowBossActitivy* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ruleexplain_, other->ruleexplain_);
    std::swap(icon_, other->icon_);
    std::swap(buttonname_, other->buttonname_);
    std::swap(level_, other->level_);
    std::swap(playerstatus_, other->playerstatus_);
    std::swap(needclearcache_, other->needclearcache_);
    std::swap(canentertime_, other->canentertime_);
    std::swap(bossid_, other->bossid_);
    std::swap(position_, other->position_);
    std::swap(rotation_, other->rotation_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshSnowBossActitivy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshSnowBossActitivy_descriptor_;
  metadata.reflection = GCRefreshSnowBossActitivy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGRefreshSnowActivityData::kTypeFieldNumber;
#endif  // !_MSC_VER

CGRefreshSnowActivityData::CGRefreshSnowActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGRefreshSnowActivityData)
}

void CGRefreshSnowActivityData::InitAsDefaultInstance() {
}

CGRefreshSnowActivityData::CGRefreshSnowActivityData(const CGRefreshSnowActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGRefreshSnowActivityData)
}

void CGRefreshSnowActivityData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGRefreshSnowActivityData::~CGRefreshSnowActivityData() {
  // @@protoc_insertion_point(destructor:CGRefreshSnowActivityData)
  SharedDtor();
}

void CGRefreshSnowActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGRefreshSnowActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGRefreshSnowActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGRefreshSnowActivityData_descriptor_;
}

const CGRefreshSnowActivityData& CGRefreshSnowActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

CGRefreshSnowActivityData* CGRefreshSnowActivityData::default_instance_ = NULL;

CGRefreshSnowActivityData* CGRefreshSnowActivityData::New() const {
  return new CGRefreshSnowActivityData;
}

void CGRefreshSnowActivityData::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGRefreshSnowActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGRefreshSnowActivityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGRefreshSnowActivityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGRefreshSnowActivityData)
  return false;
#undef DO_
}

void CGRefreshSnowActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGRefreshSnowActivityData)
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGRefreshSnowActivityData)
}

::google::protobuf::uint8* CGRefreshSnowActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGRefreshSnowActivityData)
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGRefreshSnowActivityData)
  return target;
}

int CGRefreshSnowActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGRefreshSnowActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGRefreshSnowActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGRefreshSnowActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGRefreshSnowActivityData::MergeFrom(const CGRefreshSnowActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGRefreshSnowActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGRefreshSnowActivityData::CopyFrom(const CGRefreshSnowActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGRefreshSnowActivityData::IsInitialized() const {

  return true;
}

void CGRefreshSnowActivityData::Swap(CGRefreshSnowActivityData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGRefreshSnowActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGRefreshSnowActivityData_descriptor_;
  metadata.reflection = CGRefreshSnowActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightRankInfo::kRankFieldNumber;
const int FightRankInfo::kPlayerNameFieldNumber;
const int FightRankInfo::kDamageFieldNumber;
#endif  // !_MSC_VER

FightRankInfo::FightRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FightRankInfo)
}

void FightRankInfo::InitAsDefaultInstance() {
}

FightRankInfo::FightRankInfo(const FightRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FightRankInfo)
}

void FightRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightRankInfo::~FightRankInfo() {
  // @@protoc_insertion_point(destructor:FightRankInfo)
  SharedDtor();
}

void FightRankInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void FightRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightRankInfo_descriptor_;
}

const FightRankInfo& FightRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

FightRankInfo* FightRankInfo::default_instance_ = NULL;

FightRankInfo* FightRankInfo::New() const {
  return new FightRankInfo;
}

void FightRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FightRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, damage_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FightRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (tag == 18) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional int32 damage = 3;
      case 3: {
        if (tag == 24) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FightRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FightRankInfo)
  return false;
#undef DO_
}

void FightRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FightRankInfo)
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FightRankInfo)
}

::google::protobuf::uint8* FightRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FightRankInfo)
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FightRankInfo)
  return target;
}

int FightRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightRankInfo::MergeFrom(const FightRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightRankInfo::CopyFrom(const FightRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightRankInfo::IsInitialized() const {

  return true;
}

void FightRankInfo::Swap(FightRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(playername_, other->playername_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightRankInfo_descriptor_;
  metadata.reflection = FightRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshFightRankList::kMyRankFieldNumber;
const int GCRefreshFightRankList::kMyDamageFieldNumber;
const int GCRefreshFightRankList::kRankListFieldNumber;
#endif  // !_MSC_VER

GCRefreshFightRankList::GCRefreshFightRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshFightRankList)
}

void GCRefreshFightRankList::InitAsDefaultInstance() {
}

GCRefreshFightRankList::GCRefreshFightRankList(const GCRefreshFightRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshFightRankList)
}

void GCRefreshFightRankList::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  mydamage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshFightRankList::~GCRefreshFightRankList() {
  // @@protoc_insertion_point(destructor:GCRefreshFightRankList)
  SharedDtor();
}

void GCRefreshFightRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshFightRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshFightRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshFightRankList_descriptor_;
}

const GCRefreshFightRankList& GCRefreshFightRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

GCRefreshFightRankList* GCRefreshFightRankList::default_instance_ = NULL;

GCRefreshFightRankList* GCRefreshFightRankList::New() const {
  return new GCRefreshFightRankList;
}

void GCRefreshFightRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCRefreshFightRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(myrank_, mydamage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshFightRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshFightRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 myRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_myDamage;
        break;
      }

      // optional int32 myDamage = 2;
      case 2: {
        if (tag == 16) {
         parse_myDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mydamage_)));
          set_has_mydamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rankList;
        break;
      }

      // repeated .FightRankInfo rankList = 3;
      case 3: {
        if (tag == 26) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rankList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshFightRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshFightRankList)
  return false;
#undef DO_
}

void GCRefreshFightRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshFightRankList)
  // optional int32 myRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myrank(), output);
  }

  // optional int32 myDamage = 2;
  if (has_mydamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mydamage(), output);
  }

  // repeated .FightRankInfo rankList = 3;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshFightRankList)
}

::google::protobuf::uint8* GCRefreshFightRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshFightRankList)
  // optional int32 myRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myrank(), target);
  }

  // optional int32 myDamage = 2;
  if (has_mydamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mydamage(), target);
  }

  // repeated .FightRankInfo rankList = 3;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshFightRankList)
  return target;
}

int GCRefreshFightRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 myRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

    // optional int32 myDamage = 2;
    if (has_mydamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mydamage());
    }

  }
  // repeated .FightRankInfo rankList = 3;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshFightRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshFightRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshFightRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshFightRankList::MergeFrom(const GCRefreshFightRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_mydamage()) {
      set_mydamage(from.mydamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshFightRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshFightRankList::CopyFrom(const GCRefreshFightRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshFightRankList::IsInitialized() const {

  return true;
}

void GCRefreshFightRankList::Swap(GCRefreshFightRankList* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    std::swap(mydamage_, other->mydamage_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshFightRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshFightRankList_descriptor_;
  metadata.reflection = GCRefreshFightRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankRewardsInfo::kRanksFieldNumber;
const int RankRewardsInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

RankRewardsInfo::RankRewardsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RankRewardsInfo)
}

void RankRewardsInfo::InitAsDefaultInstance() {
}

RankRewardsInfo::RankRewardsInfo(const RankRewardsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RankRewardsInfo)
}

void RankRewardsInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ranks_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankRewardsInfo::~RankRewardsInfo() {
  // @@protoc_insertion_point(destructor:RankRewardsInfo)
  SharedDtor();
}

void RankRewardsInfo::SharedDtor() {
  if (ranks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ranks_;
  }
  if (this != default_instance_) {
  }
}

void RankRewardsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankRewardsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankRewardsInfo_descriptor_;
}

const RankRewardsInfo& RankRewardsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

RankRewardsInfo* RankRewardsInfo::default_instance_ = NULL;

RankRewardsInfo* RankRewardsInfo::New() const {
  return new RankRewardsInfo;
}

void RankRewardsInfo::Clear() {
  if (has_ranks()) {
    if (ranks_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      ranks_->clear();
    }
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankRewardsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RankRewardsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ranks = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ranks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ranks().data(), this->ranks().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ranks");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .Iteminfo rewards = 2;
      case 2: {
        if (tag == 18) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RankRewardsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RankRewardsInfo)
  return false;
#undef DO_
}

void RankRewardsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RankRewardsInfo)
  // optional string ranks = 1;
  if (has_ranks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ranks().data(), this->ranks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ranks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ranks(), output);
  }

  // repeated .Iteminfo rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RankRewardsInfo)
}

::google::protobuf::uint8* RankRewardsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RankRewardsInfo)
  // optional string ranks = 1;
  if (has_ranks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ranks().data(), this->ranks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ranks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ranks(), target);
  }

  // repeated .Iteminfo rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RankRewardsInfo)
  return target;
}

int RankRewardsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ranks = 1;
    if (has_ranks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ranks());
    }

  }
  // repeated .Iteminfo rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankRewardsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankRewardsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankRewardsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankRewardsInfo::MergeFrom(const RankRewardsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranks()) {
      set_ranks(from.ranks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankRewardsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankRewardsInfo::CopyFrom(const RankRewardsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankRewardsInfo::IsInitialized() const {

  return true;
}

void RankRewardsInfo::Swap(RankRewardsInfo* other) {
  if (other != this) {
    std::swap(ranks_, other->ranks_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankRewardsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankRewardsInfo_descriptor_;
  metadata.reflection = RankRewardsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCRefreshRankRewardsList::kRewardListFieldNumber;
#endif  // !_MSC_VER

GCRefreshRankRewardsList::GCRefreshRankRewardsList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GCRefreshRankRewardsList)
}

void GCRefreshRankRewardsList::InitAsDefaultInstance() {
}

GCRefreshRankRewardsList::GCRefreshRankRewardsList(const GCRefreshRankRewardsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GCRefreshRankRewardsList)
}

void GCRefreshRankRewardsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCRefreshRankRewardsList::~GCRefreshRankRewardsList() {
  // @@protoc_insertion_point(destructor:GCRefreshRankRewardsList)
  SharedDtor();
}

void GCRefreshRankRewardsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCRefreshRankRewardsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRefreshRankRewardsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRefreshRankRewardsList_descriptor_;
}

const GCRefreshRankRewardsList& GCRefreshRankRewardsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

GCRefreshRankRewardsList* GCRefreshRankRewardsList::default_instance_ = NULL;

GCRefreshRankRewardsList* GCRefreshRankRewardsList::New() const {
  return new GCRefreshRankRewardsList;
}

void GCRefreshRankRewardsList::Clear() {
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCRefreshRankRewardsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GCRefreshRankRewardsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RankRewardsInfo rewardList = 1;
      case 1: {
        if (tag == 10) {
         parse_rewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rewardList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GCRefreshRankRewardsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GCRefreshRankRewardsList)
  return false;
#undef DO_
}

void GCRefreshRankRewardsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GCRefreshRankRewardsList)
  // repeated .RankRewardsInfo rewardList = 1;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GCRefreshRankRewardsList)
}

::google::protobuf::uint8* GCRefreshRankRewardsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GCRefreshRankRewardsList)
  // repeated .RankRewardsInfo rewardList = 1;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GCRefreshRankRewardsList)
  return target;
}

int GCRefreshRankRewardsList::ByteSize() const {
  int total_size = 0;

  // repeated .RankRewardsInfo rewardList = 1;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRefreshRankRewardsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCRefreshRankRewardsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCRefreshRankRewardsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCRefreshRankRewardsList::MergeFrom(const GCRefreshRankRewardsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCRefreshRankRewardsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRefreshRankRewardsList::CopyFrom(const GCRefreshRankRewardsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCRefreshRankRewardsList::IsInitialized() const {

  return true;
}

void GCRefreshRankRewardsList::Swap(GCRefreshRankRewardsList* other) {
  if (other != this) {
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCRefreshRankRewardsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRefreshRankRewardsList_descriptor_;
  metadata.reflection = GCRefreshRankRewardsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOperSnowBoss::kOperFieldNumber;
#endif  // !_MSC_VER

CGOperSnowBoss::CGOperSnowBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CGOperSnowBoss)
}

void CGOperSnowBoss::InitAsDefaultInstance() {
}

CGOperSnowBoss::CGOperSnowBoss(const CGOperSnowBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CGOperSnowBoss)
}

void CGOperSnowBoss::SharedCtor() {
  _cached_size_ = 0;
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOperSnowBoss::~CGOperSnowBoss() {
  // @@protoc_insertion_point(destructor:CGOperSnowBoss)
  SharedDtor();
}

void CGOperSnowBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOperSnowBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOperSnowBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOperSnowBoss_descriptor_;
}

const CGOperSnowBoss& CGOperSnowBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SnowManMessage_2eproto();
  return *default_instance_;
}

CGOperSnowBoss* CGOperSnowBoss::default_instance_ = NULL;

CGOperSnowBoss* CGOperSnowBoss::New() const {
  return new CGOperSnowBoss;
}

void CGOperSnowBoss::Clear() {
  oper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOperSnowBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CGOperSnowBoss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oper = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oper_)));
          set_has_oper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CGOperSnowBoss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CGOperSnowBoss)
  return false;
#undef DO_
}

void CGOperSnowBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CGOperSnowBoss)
  // optional int32 oper = 1;
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CGOperSnowBoss)
}

::google::protobuf::uint8* CGOperSnowBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGOperSnowBoss)
  // optional int32 oper = 1;
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGOperSnowBoss)
  return target;
}

int CGOperSnowBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oper = 1;
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOperSnowBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOperSnowBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOperSnowBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOperSnowBoss::MergeFrom(const CGOperSnowBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oper()) {
      set_oper(from.oper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOperSnowBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOperSnowBoss::CopyFrom(const CGOperSnowBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOperSnowBoss::IsInitialized() const {

  return true;
}

void CGOperSnowBoss::Swap(CGOperSnowBoss* other) {
  if (other != this) {
    std::swap(oper_, other->oper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOperSnowBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOperSnowBoss_descriptor_;
  metadata.reflection = CGOperSnowBoss_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
